
focTemplateBak.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cb00  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0800ccd8  0800ccd8  0000dcd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cd40  0800cd40  0000e0f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800cd40  0800cd40  0000dd40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cd48  0800cd48  0000e0f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cd48  0800cd48  0000dd48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cd4c  0800cd4c  0000dd4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000f8  20000000  0800cd50  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006c0  200000f8  0800ce48  0000e0f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007b8  0800ce48  0000e7b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e0f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026803  00000000  00000000  0000e128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000548e  00000000  00000000  0003492b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e80  00000000  00000000  00039dc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001757  00000000  00000000  0003bc40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000267a8  00000000  00000000  0003d397  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029891  00000000  00000000  00063b3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec84f  00000000  00000000  0008d3d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00179c1f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000835c  00000000  00000000  00179c64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  00181fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200000f8 	.word	0x200000f8
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800ccc0 	.word	0x0800ccc0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200000fc 	.word	0x200000fc
 8000214:	0800ccc0 	.word	0x0800ccc0

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2uiz>:
 8000af0:	004a      	lsls	r2, r1, #1
 8000af2:	d211      	bcs.n	8000b18 <__aeabi_d2uiz+0x28>
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000af8:	d211      	bcs.n	8000b1e <__aeabi_d2uiz+0x2e>
 8000afa:	d50d      	bpl.n	8000b18 <__aeabi_d2uiz+0x28>
 8000afc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d40e      	bmi.n	8000b24 <__aeabi_d2uiz+0x34>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	fa23 f002 	lsr.w	r0, r3, r2
 8000b16:	4770      	bx	lr
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b22:	d102      	bne.n	8000b2a <__aeabi_d2uiz+0x3a>
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295
 8000b28:	4770      	bx	lr
 8000b2a:	f04f 0000 	mov.w	r0, #0
 8000b2e:	4770      	bx	lr

08000b30 <__aeabi_d2f>:
 8000b30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b38:	bf24      	itt	cs
 8000b3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b42:	d90d      	bls.n	8000b60 <__aeabi_d2f+0x30>
 8000b44:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b50:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b58:	bf08      	it	eq
 8000b5a:	f020 0001 	biceq.w	r0, r0, #1
 8000b5e:	4770      	bx	lr
 8000b60:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b64:	d121      	bne.n	8000baa <__aeabi_d2f+0x7a>
 8000b66:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b6a:	bfbc      	itt	lt
 8000b6c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b70:	4770      	bxlt	lr
 8000b72:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b7a:	f1c2 0218 	rsb	r2, r2, #24
 8000b7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b86:	fa20 f002 	lsr.w	r0, r0, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	f040 0001 	orrne.w	r0, r0, #1
 8000b90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ba0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba8:	e7cc      	b.n	8000b44 <__aeabi_d2f+0x14>
 8000baa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bae:	d107      	bne.n	8000bc0 <__aeabi_d2f+0x90>
 8000bb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb4:	bf1e      	ittt	ne
 8000bb6:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bba:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bbe:	4770      	bxne	lr
 8000bc0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bc4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bc8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_uldivmod>:
 8000bd0:	b953      	cbnz	r3, 8000be8 <__aeabi_uldivmod+0x18>
 8000bd2:	b94a      	cbnz	r2, 8000be8 <__aeabi_uldivmod+0x18>
 8000bd4:	2900      	cmp	r1, #0
 8000bd6:	bf08      	it	eq
 8000bd8:	2800      	cmpeq	r0, #0
 8000bda:	bf1c      	itt	ne
 8000bdc:	f04f 31ff 	movne.w	r1, #4294967295
 8000be0:	f04f 30ff 	movne.w	r0, #4294967295
 8000be4:	f000 b96a 	b.w	8000ebc <__aeabi_idiv0>
 8000be8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf0:	f000 f806 	bl	8000c00 <__udivmoddi4>
 8000bf4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bfc:	b004      	add	sp, #16
 8000bfe:	4770      	bx	lr

08000c00 <__udivmoddi4>:
 8000c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c04:	9d08      	ldr	r5, [sp, #32]
 8000c06:	460c      	mov	r4, r1
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d14e      	bne.n	8000caa <__udivmoddi4+0xaa>
 8000c0c:	4694      	mov	ip, r2
 8000c0e:	458c      	cmp	ip, r1
 8000c10:	4686      	mov	lr, r0
 8000c12:	fab2 f282 	clz	r2, r2
 8000c16:	d962      	bls.n	8000cde <__udivmoddi4+0xde>
 8000c18:	b14a      	cbz	r2, 8000c2e <__udivmoddi4+0x2e>
 8000c1a:	f1c2 0320 	rsb	r3, r2, #32
 8000c1e:	4091      	lsls	r1, r2
 8000c20:	fa20 f303 	lsr.w	r3, r0, r3
 8000c24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c28:	4319      	orrs	r1, r3
 8000c2a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c32:	fa1f f68c 	uxth.w	r6, ip
 8000c36:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c3a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c3e:	fb07 1114 	mls	r1, r7, r4, r1
 8000c42:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c46:	fb04 f106 	mul.w	r1, r4, r6
 8000c4a:	4299      	cmp	r1, r3
 8000c4c:	d90a      	bls.n	8000c64 <__udivmoddi4+0x64>
 8000c4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c52:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c56:	f080 8112 	bcs.w	8000e7e <__udivmoddi4+0x27e>
 8000c5a:	4299      	cmp	r1, r3
 8000c5c:	f240 810f 	bls.w	8000e7e <__udivmoddi4+0x27e>
 8000c60:	3c02      	subs	r4, #2
 8000c62:	4463      	add	r3, ip
 8000c64:	1a59      	subs	r1, r3, r1
 8000c66:	fa1f f38e 	uxth.w	r3, lr
 8000c6a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c6e:	fb07 1110 	mls	r1, r7, r0, r1
 8000c72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c76:	fb00 f606 	mul.w	r6, r0, r6
 8000c7a:	429e      	cmp	r6, r3
 8000c7c:	d90a      	bls.n	8000c94 <__udivmoddi4+0x94>
 8000c7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c82:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c86:	f080 80fc 	bcs.w	8000e82 <__udivmoddi4+0x282>
 8000c8a:	429e      	cmp	r6, r3
 8000c8c:	f240 80f9 	bls.w	8000e82 <__udivmoddi4+0x282>
 8000c90:	4463      	add	r3, ip
 8000c92:	3802      	subs	r0, #2
 8000c94:	1b9b      	subs	r3, r3, r6
 8000c96:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	b11d      	cbz	r5, 8000ca6 <__udivmoddi4+0xa6>
 8000c9e:	40d3      	lsrs	r3, r2
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	e9c5 3200 	strd	r3, r2, [r5]
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	428b      	cmp	r3, r1
 8000cac:	d905      	bls.n	8000cba <__udivmoddi4+0xba>
 8000cae:	b10d      	cbz	r5, 8000cb4 <__udivmoddi4+0xb4>
 8000cb0:	e9c5 0100 	strd	r0, r1, [r5]
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	4608      	mov	r0, r1
 8000cb8:	e7f5      	b.n	8000ca6 <__udivmoddi4+0xa6>
 8000cba:	fab3 f183 	clz	r1, r3
 8000cbe:	2900      	cmp	r1, #0
 8000cc0:	d146      	bne.n	8000d50 <__udivmoddi4+0x150>
 8000cc2:	42a3      	cmp	r3, r4
 8000cc4:	d302      	bcc.n	8000ccc <__udivmoddi4+0xcc>
 8000cc6:	4290      	cmp	r0, r2
 8000cc8:	f0c0 80f0 	bcc.w	8000eac <__udivmoddi4+0x2ac>
 8000ccc:	1a86      	subs	r6, r0, r2
 8000cce:	eb64 0303 	sbc.w	r3, r4, r3
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	2d00      	cmp	r5, #0
 8000cd6:	d0e6      	beq.n	8000ca6 <__udivmoddi4+0xa6>
 8000cd8:	e9c5 6300 	strd	r6, r3, [r5]
 8000cdc:	e7e3      	b.n	8000ca6 <__udivmoddi4+0xa6>
 8000cde:	2a00      	cmp	r2, #0
 8000ce0:	f040 8090 	bne.w	8000e04 <__udivmoddi4+0x204>
 8000ce4:	eba1 040c 	sub.w	r4, r1, ip
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	fa1f f78c 	uxth.w	r7, ip
 8000cf0:	2101      	movs	r1, #1
 8000cf2:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cf6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cfa:	fb08 4416 	mls	r4, r8, r6, r4
 8000cfe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d02:	fb07 f006 	mul.w	r0, r7, r6
 8000d06:	4298      	cmp	r0, r3
 8000d08:	d908      	bls.n	8000d1c <__udivmoddi4+0x11c>
 8000d0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x11a>
 8000d14:	4298      	cmp	r0, r3
 8000d16:	f200 80cd 	bhi.w	8000eb4 <__udivmoddi4+0x2b4>
 8000d1a:	4626      	mov	r6, r4
 8000d1c:	1a1c      	subs	r4, r3, r0
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d26:	fb08 4410 	mls	r4, r8, r0, r4
 8000d2a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d2e:	fb00 f707 	mul.w	r7, r0, r7
 8000d32:	429f      	cmp	r7, r3
 8000d34:	d908      	bls.n	8000d48 <__udivmoddi4+0x148>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d3e:	d202      	bcs.n	8000d46 <__udivmoddi4+0x146>
 8000d40:	429f      	cmp	r7, r3
 8000d42:	f200 80b0 	bhi.w	8000ea6 <__udivmoddi4+0x2a6>
 8000d46:	4620      	mov	r0, r4
 8000d48:	1bdb      	subs	r3, r3, r7
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	e7a5      	b.n	8000c9c <__udivmoddi4+0x9c>
 8000d50:	f1c1 0620 	rsb	r6, r1, #32
 8000d54:	408b      	lsls	r3, r1
 8000d56:	fa22 f706 	lsr.w	r7, r2, r6
 8000d5a:	431f      	orrs	r7, r3
 8000d5c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d60:	fa04 f301 	lsl.w	r3, r4, r1
 8000d64:	ea43 030c 	orr.w	r3, r3, ip
 8000d68:	40f4      	lsrs	r4, r6
 8000d6a:	fa00 f801 	lsl.w	r8, r0, r1
 8000d6e:	0c38      	lsrs	r0, r7, #16
 8000d70:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d74:	fbb4 fef0 	udiv	lr, r4, r0
 8000d78:	fa1f fc87 	uxth.w	ip, r7
 8000d7c:	fb00 441e 	mls	r4, r0, lr, r4
 8000d80:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d84:	fb0e f90c 	mul.w	r9, lr, ip
 8000d88:	45a1      	cmp	r9, r4
 8000d8a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d8e:	d90a      	bls.n	8000da6 <__udivmoddi4+0x1a6>
 8000d90:	193c      	adds	r4, r7, r4
 8000d92:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d96:	f080 8084 	bcs.w	8000ea2 <__udivmoddi4+0x2a2>
 8000d9a:	45a1      	cmp	r9, r4
 8000d9c:	f240 8081 	bls.w	8000ea2 <__udivmoddi4+0x2a2>
 8000da0:	f1ae 0e02 	sub.w	lr, lr, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	eba4 0409 	sub.w	r4, r4, r9
 8000daa:	fa1f f983 	uxth.w	r9, r3
 8000dae:	fbb4 f3f0 	udiv	r3, r4, r0
 8000db2:	fb00 4413 	mls	r4, r0, r3, r4
 8000db6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dba:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dbe:	45a4      	cmp	ip, r4
 8000dc0:	d907      	bls.n	8000dd2 <__udivmoddi4+0x1d2>
 8000dc2:	193c      	adds	r4, r7, r4
 8000dc4:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dc8:	d267      	bcs.n	8000e9a <__udivmoddi4+0x29a>
 8000dca:	45a4      	cmp	ip, r4
 8000dcc:	d965      	bls.n	8000e9a <__udivmoddi4+0x29a>
 8000dce:	3b02      	subs	r3, #2
 8000dd0:	443c      	add	r4, r7
 8000dd2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dd6:	fba0 9302 	umull	r9, r3, r0, r2
 8000dda:	eba4 040c 	sub.w	r4, r4, ip
 8000dde:	429c      	cmp	r4, r3
 8000de0:	46ce      	mov	lr, r9
 8000de2:	469c      	mov	ip, r3
 8000de4:	d351      	bcc.n	8000e8a <__udivmoddi4+0x28a>
 8000de6:	d04e      	beq.n	8000e86 <__udivmoddi4+0x286>
 8000de8:	b155      	cbz	r5, 8000e00 <__udivmoddi4+0x200>
 8000dea:	ebb8 030e 	subs.w	r3, r8, lr
 8000dee:	eb64 040c 	sbc.w	r4, r4, ip
 8000df2:	fa04 f606 	lsl.w	r6, r4, r6
 8000df6:	40cb      	lsrs	r3, r1
 8000df8:	431e      	orrs	r6, r3
 8000dfa:	40cc      	lsrs	r4, r1
 8000dfc:	e9c5 6400 	strd	r6, r4, [r5]
 8000e00:	2100      	movs	r1, #0
 8000e02:	e750      	b.n	8000ca6 <__udivmoddi4+0xa6>
 8000e04:	f1c2 0320 	rsb	r3, r2, #32
 8000e08:	fa20 f103 	lsr.w	r1, r0, r3
 8000e0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e10:	fa24 f303 	lsr.w	r3, r4, r3
 8000e14:	4094      	lsls	r4, r2
 8000e16:	430c      	orrs	r4, r1
 8000e18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e1c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e28:	fb08 3110 	mls	r1, r8, r0, r3
 8000e2c:	0c23      	lsrs	r3, r4, #16
 8000e2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e32:	fb00 f107 	mul.w	r1, r0, r7
 8000e36:	4299      	cmp	r1, r3
 8000e38:	d908      	bls.n	8000e4c <__udivmoddi4+0x24c>
 8000e3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e42:	d22c      	bcs.n	8000e9e <__udivmoddi4+0x29e>
 8000e44:	4299      	cmp	r1, r3
 8000e46:	d92a      	bls.n	8000e9e <__udivmoddi4+0x29e>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4463      	add	r3, ip
 8000e4c:	1a5b      	subs	r3, r3, r1
 8000e4e:	b2a4      	uxth	r4, r4
 8000e50:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e54:	fb08 3311 	mls	r3, r8, r1, r3
 8000e58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e5c:	fb01 f307 	mul.w	r3, r1, r7
 8000e60:	42a3      	cmp	r3, r4
 8000e62:	d908      	bls.n	8000e76 <__udivmoddi4+0x276>
 8000e64:	eb1c 0404 	adds.w	r4, ip, r4
 8000e68:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e6c:	d213      	bcs.n	8000e96 <__udivmoddi4+0x296>
 8000e6e:	42a3      	cmp	r3, r4
 8000e70:	d911      	bls.n	8000e96 <__udivmoddi4+0x296>
 8000e72:	3902      	subs	r1, #2
 8000e74:	4464      	add	r4, ip
 8000e76:	1ae4      	subs	r4, r4, r3
 8000e78:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e7c:	e739      	b.n	8000cf2 <__udivmoddi4+0xf2>
 8000e7e:	4604      	mov	r4, r0
 8000e80:	e6f0      	b.n	8000c64 <__udivmoddi4+0x64>
 8000e82:	4608      	mov	r0, r1
 8000e84:	e706      	b.n	8000c94 <__udivmoddi4+0x94>
 8000e86:	45c8      	cmp	r8, r9
 8000e88:	d2ae      	bcs.n	8000de8 <__udivmoddi4+0x1e8>
 8000e8a:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e8e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e92:	3801      	subs	r0, #1
 8000e94:	e7a8      	b.n	8000de8 <__udivmoddi4+0x1e8>
 8000e96:	4631      	mov	r1, r6
 8000e98:	e7ed      	b.n	8000e76 <__udivmoddi4+0x276>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	e799      	b.n	8000dd2 <__udivmoddi4+0x1d2>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e7d4      	b.n	8000e4c <__udivmoddi4+0x24c>
 8000ea2:	46d6      	mov	lr, sl
 8000ea4:	e77f      	b.n	8000da6 <__udivmoddi4+0x1a6>
 8000ea6:	4463      	add	r3, ip
 8000ea8:	3802      	subs	r0, #2
 8000eaa:	e74d      	b.n	8000d48 <__udivmoddi4+0x148>
 8000eac:	4606      	mov	r6, r0
 8000eae:	4623      	mov	r3, r4
 8000eb0:	4608      	mov	r0, r1
 8000eb2:	e70f      	b.n	8000cd4 <__udivmoddi4+0xd4>
 8000eb4:	3e02      	subs	r6, #2
 8000eb6:	4463      	add	r3, ip
 8000eb8:	e730      	b.n	8000d1c <__udivmoddi4+0x11c>
 8000eba:	bf00      	nop

08000ebc <__aeabi_idiv0>:
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop

08000ec0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b09a      	sub	sp, #104	@ 0x68
 8000ec4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000ec6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	605a      	str	r2, [r3, #4]
 8000ed0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ed2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000ed6:	2220      	movs	r2, #32
 8000ed8:	2100      	movs	r1, #0
 8000eda:	4618      	mov	r0, r3
 8000edc:	f00b fd78 	bl	800c9d0 <memset>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000ee0:	463b      	mov	r3, r7
 8000ee2:	223c      	movs	r2, #60	@ 0x3c
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f00b fd72 	bl	800c9d0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000eec:	4b4d      	ldr	r3, [pc, #308]	@ (8001024 <MX_ADC1_Init+0x164>)
 8000eee:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000ef2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000ef4:	4b4b      	ldr	r3, [pc, #300]	@ (8001024 <MX_ADC1_Init+0x164>)
 8000ef6:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000efa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000efc:	4b49      	ldr	r3, [pc, #292]	@ (8001024 <MX_ADC1_Init+0x164>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f02:	4b48      	ldr	r3, [pc, #288]	@ (8001024 <MX_ADC1_Init+0x164>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000f08:	4b46      	ldr	r3, [pc, #280]	@ (8001024 <MX_ADC1_Init+0x164>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000f0e:	4b45      	ldr	r3, [pc, #276]	@ (8001024 <MX_ADC1_Init+0x164>)
 8000f10:	2201      	movs	r2, #1
 8000f12:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f14:	4b43      	ldr	r3, [pc, #268]	@ (8001024 <MX_ADC1_Init+0x164>)
 8000f16:	2204      	movs	r2, #4
 8000f18:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f1a:	4b42      	ldr	r3, [pc, #264]	@ (8001024 <MX_ADC1_Init+0x164>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f20:	4b40      	ldr	r3, [pc, #256]	@ (8001024 <MX_ADC1_Init+0x164>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000f26:	4b3f      	ldr	r3, [pc, #252]	@ (8001024 <MX_ADC1_Init+0x164>)
 8000f28:	2201      	movs	r2, #1
 8000f2a:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f2c:	4b3d      	ldr	r3, [pc, #244]	@ (8001024 <MX_ADC1_Init+0x164>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f34:	4b3b      	ldr	r3, [pc, #236]	@ (8001024 <MX_ADC1_Init+0x164>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f3a:	4b3a      	ldr	r3, [pc, #232]	@ (8001024 <MX_ADC1_Init+0x164>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f40:	4b38      	ldr	r3, [pc, #224]	@ (8001024 <MX_ADC1_Init+0x164>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f48:	4b36      	ldr	r3, [pc, #216]	@ (8001024 <MX_ADC1_Init+0x164>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000f4e:	4b35      	ldr	r3, [pc, #212]	@ (8001024 <MX_ADC1_Init+0x164>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f56:	4833      	ldr	r0, [pc, #204]	@ (8001024 <MX_ADC1_Init+0x164>)
 8000f58:	f001 fd62 	bl	8002a20 <HAL_ADC_Init>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000f62:	f000 fd06 	bl	8001972 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f66:	2300      	movs	r3, #0
 8000f68:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f6a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000f6e:	4619      	mov	r1, r3
 8000f70:	482c      	ldr	r0, [pc, #176]	@ (8001024 <MX_ADC1_Init+0x164>)
 8000f72:	f003 fe8b 	bl	8004c8c <HAL_ADCEx_MultiModeConfigChannel>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 8000f7c:	f000 fcf9 	bl	8001972 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000f80:	4b29      	ldr	r3, [pc, #164]	@ (8001028 <MX_ADC1_Init+0x168>)
 8000f82:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f84:	2306      	movs	r3, #6
 8000f86:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f8c:	237f      	movs	r3, #127	@ 0x7f
 8000f8e:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f90:	2304      	movs	r3, #4
 8000f92:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfig.Offset = 0;
 8000f94:	2300      	movs	r3, #0
 8000f96:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f98:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4821      	ldr	r0, [pc, #132]	@ (8001024 <MX_ADC1_Init+0x164>)
 8000fa0:	f002 f8fa 	bl	8003198 <HAL_ADC_ConfigChannel>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 8000faa:	f000 fce2 	bl	8001972 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8000fae:	4b1f      	ldr	r3, [pc, #124]	@ (800102c <MX_ADC1_Init+0x16c>)
 8000fb0:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000fb2:	2309      	movs	r3, #9
 8000fb4:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000fba:	237f      	movs	r3, #127	@ 0x7f
 8000fbc:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8000fbe:	2304      	movs	r3, #4
 8000fc0:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffset = 0;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedNbrOfConversion = 2;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 8000fdc:	2384      	movs	r3, #132	@ 0x84
 8000fde:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8000fe0:	2380      	movs	r3, #128	@ 0x80
 8000fe2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000fea:	463b      	mov	r3, r7
 8000fec:	4619      	mov	r1, r3
 8000fee:	480d      	ldr	r0, [pc, #52]	@ (8001024 <MX_ADC1_Init+0x164>)
 8000ff0:	f003 f96c 	bl	80042cc <HAL_ADCEx_InjectedConfigChannel>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_ADC1_Init+0x13e>
  {
    Error_Handler();
 8000ffa:	f000 fcba 	bl	8001972 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_12;
 8000ffe:	4b0c      	ldr	r3, [pc, #48]	@ (8001030 <MX_ADC1_Init+0x170>)
 8001000:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8001002:	f240 130f 	movw	r3, #271	@ 0x10f
 8001006:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001008:	463b      	mov	r3, r7
 800100a:	4619      	mov	r1, r3
 800100c:	4805      	ldr	r0, [pc, #20]	@ (8001024 <MX_ADC1_Init+0x164>)
 800100e:	f003 f95d 	bl	80042cc <HAL_ADCEx_InjectedConfigChannel>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <MX_ADC1_Init+0x15c>
  {
    Error_Handler();
 8001018:	f000 fcab 	bl	8001972 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800101c:	bf00      	nop
 800101e:	3768      	adds	r7, #104	@ 0x68
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	20000114 	.word	0x20000114
 8001028:	2e300800 	.word	0x2e300800
 800102c:	0c900008 	.word	0x0c900008
 8001030:	32601000 	.word	0x32601000

08001034 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b098      	sub	sp, #96	@ 0x60
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800103a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800103e:	223c      	movs	r2, #60	@ 0x3c
 8001040:	2100      	movs	r1, #0
 8001042:	4618      	mov	r0, r3
 8001044:	f00b fcc4 	bl	800c9d0 <memset>
  ADC_ChannelConfTypeDef sConfig = {0};
 8001048:	1d3b      	adds	r3, r7, #4
 800104a:	2220      	movs	r2, #32
 800104c:	2100      	movs	r1, #0
 800104e:	4618      	mov	r0, r3
 8001050:	f00b fcbe 	bl	800c9d0 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001054:	4b3f      	ldr	r3, [pc, #252]	@ (8001154 <MX_ADC2_Init+0x120>)
 8001056:	4a40      	ldr	r2, [pc, #256]	@ (8001158 <MX_ADC2_Init+0x124>)
 8001058:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 800105a:	4b3e      	ldr	r3, [pc, #248]	@ (8001154 <MX_ADC2_Init+0x120>)
 800105c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001060:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001062:	4b3c      	ldr	r3, [pc, #240]	@ (8001154 <MX_ADC2_Init+0x120>)
 8001064:	2200      	movs	r2, #0
 8001066:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001068:	4b3a      	ldr	r3, [pc, #232]	@ (8001154 <MX_ADC2_Init+0x120>)
 800106a:	2200      	movs	r2, #0
 800106c:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 800106e:	4b39      	ldr	r3, [pc, #228]	@ (8001154 <MX_ADC2_Init+0x120>)
 8001070:	2200      	movs	r2, #0
 8001072:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001074:	4b37      	ldr	r3, [pc, #220]	@ (8001154 <MX_ADC2_Init+0x120>)
 8001076:	2200      	movs	r2, #0
 8001078:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800107a:	4b36      	ldr	r3, [pc, #216]	@ (8001154 <MX_ADC2_Init+0x120>)
 800107c:	2204      	movs	r2, #4
 800107e:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001080:	4b34      	ldr	r3, [pc, #208]	@ (8001154 <MX_ADC2_Init+0x120>)
 8001082:	2200      	movs	r2, #0
 8001084:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001086:	4b33      	ldr	r3, [pc, #204]	@ (8001154 <MX_ADC2_Init+0x120>)
 8001088:	2200      	movs	r2, #0
 800108a:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800108c:	4b31      	ldr	r3, [pc, #196]	@ (8001154 <MX_ADC2_Init+0x120>)
 800108e:	2201      	movs	r2, #1
 8001090:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001092:	4b30      	ldr	r3, [pc, #192]	@ (8001154 <MX_ADC2_Init+0x120>)
 8001094:	2200      	movs	r2, #0
 8001096:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800109a:	4b2e      	ldr	r3, [pc, #184]	@ (8001154 <MX_ADC2_Init+0x120>)
 800109c:	2200      	movs	r2, #0
 800109e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010a0:	4b2c      	ldr	r3, [pc, #176]	@ (8001154 <MX_ADC2_Init+0x120>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80010a6:	4b2b      	ldr	r3, [pc, #172]	@ (8001154 <MX_ADC2_Init+0x120>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010ae:	4b29      	ldr	r3, [pc, #164]	@ (8001154 <MX_ADC2_Init+0x120>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80010b4:	4b27      	ldr	r3, [pc, #156]	@ (8001154 <MX_ADC2_Init+0x120>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80010bc:	4825      	ldr	r0, [pc, #148]	@ (8001154 <MX_ADC2_Init+0x120>)
 80010be:	f001 fcaf 	bl	8002a20 <HAL_ADC_Init>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_ADC2_Init+0x98>
  {
    Error_Handler();
 80010c8:	f000 fc53 	bl	8001972 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 80010cc:	4b23      	ldr	r3, [pc, #140]	@ (800115c <MX_ADC2_Init+0x128>)
 80010ce:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80010d0:	2309      	movs	r3, #9
 80010d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 80010d4:	2301      	movs	r3, #1
 80010d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 80010d8:	237f      	movs	r3, #127	@ 0x7f
 80010da:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 80010dc:	2304      	movs	r3, #4
 80010de:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigInjected.InjectedOffset = 0;
 80010e0:	2300      	movs	r3, #0
 80010e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigInjected.InjectedNbrOfConversion = 1;
 80010e4:	2301      	movs	r3, #1
 80010e6:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80010e8:	2300      	movs	r3, #0
 80010ea:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  sConfigInjected.AutoInjectedConv = DISABLE;
 80010ee:	2300      	movs	r3, #0
 80010f0:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  sConfigInjected.QueueInjectedContext = DISABLE;
 80010f4:	2300      	movs	r3, #0
 80010f6:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 80010fa:	2384      	movs	r3, #132	@ 0x84
 80010fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 80010fe:	2380      	movs	r3, #128	@ 0x80
 8001100:	653b      	str	r3, [r7, #80]	@ 0x50
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8001102:	2300      	movs	r3, #0
 8001104:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8001108:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800110c:	4619      	mov	r1, r3
 800110e:	4811      	ldr	r0, [pc, #68]	@ (8001154 <MX_ADC2_Init+0x120>)
 8001110:	f003 f8dc 	bl	80042cc <HAL_ADCEx_InjectedConfigChannel>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_ADC2_Init+0xea>
  {
    Error_Handler();
 800111a:	f000 fc2a 	bl	8001972 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800111e:	4b10      	ldr	r3, [pc, #64]	@ (8001160 <MX_ADC2_Init+0x12c>)
 8001120:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001122:	2306      	movs	r3, #6
 8001124:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001126:	2300      	movs	r3, #0
 8001128:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800112a:	237f      	movs	r3, #127	@ 0x7f
 800112c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800112e:	2304      	movs	r3, #4
 8001130:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001132:	2300      	movs	r3, #0
 8001134:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001136:	1d3b      	adds	r3, r7, #4
 8001138:	4619      	mov	r1, r3
 800113a:	4806      	ldr	r0, [pc, #24]	@ (8001154 <MX_ADC2_Init+0x120>)
 800113c:	f002 f82c 	bl	8003198 <HAL_ADC_ConfigChannel>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_ADC2_Init+0x116>
  {
    Error_Handler();
 8001146:	f000 fc14 	bl	8001972 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800114a:	bf00      	nop
 800114c:	3760      	adds	r7, #96	@ 0x60
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	20000180 	.word	0x20000180
 8001158:	50000100 	.word	0x50000100
 800115c:	0c900008 	.word	0x0c900008
 8001160:	04300002 	.word	0x04300002

08001164 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b09e      	sub	sp, #120	@ 0x78
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	605a      	str	r2, [r3, #4]
 8001176:	609a      	str	r2, [r3, #8]
 8001178:	60da      	str	r2, [r3, #12]
 800117a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800117c:	f107 0320 	add.w	r3, r7, #32
 8001180:	2244      	movs	r2, #68	@ 0x44
 8001182:	2100      	movs	r1, #0
 8001184:	4618      	mov	r0, r3
 8001186:	f00b fc23 	bl	800c9d0 <memset>
  if(adcHandle->Instance==ADC1)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001192:	d15f      	bne.n	8001254 <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001194:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001198:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800119a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800119e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011a0:	f107 0320 	add.w	r3, r7, #32
 80011a4:	4618      	mov	r0, r3
 80011a6:	f006 fbdb 	bl	8007960 <HAL_RCCEx_PeriphCLKConfig>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80011b0:	f000 fbdf 	bl	8001972 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80011b4:	4b4f      	ldr	r3, [pc, #316]	@ (80012f4 <HAL_ADC_MspInit+0x190>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	3301      	adds	r3, #1
 80011ba:	4a4e      	ldr	r2, [pc, #312]	@ (80012f4 <HAL_ADC_MspInit+0x190>)
 80011bc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80011be:	4b4d      	ldr	r3, [pc, #308]	@ (80012f4 <HAL_ADC_MspInit+0x190>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d10b      	bne.n	80011de <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80011c6:	4b4c      	ldr	r3, [pc, #304]	@ (80012f8 <HAL_ADC_MspInit+0x194>)
 80011c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ca:	4a4b      	ldr	r2, [pc, #300]	@ (80012f8 <HAL_ADC_MspInit+0x194>)
 80011cc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80011d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011d2:	4b49      	ldr	r3, [pc, #292]	@ (80012f8 <HAL_ADC_MspInit+0x194>)
 80011d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80011da:	61fb      	str	r3, [r7, #28]
 80011dc:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011de:	4b46      	ldr	r3, [pc, #280]	@ (80012f8 <HAL_ADC_MspInit+0x194>)
 80011e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011e2:	4a45      	ldr	r2, [pc, #276]	@ (80012f8 <HAL_ADC_MspInit+0x194>)
 80011e4:	f043 0301 	orr.w	r3, r3, #1
 80011e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011ea:	4b43      	ldr	r3, [pc, #268]	@ (80012f8 <HAL_ADC_MspInit+0x194>)
 80011ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ee:	f003 0301 	and.w	r3, r3, #1
 80011f2:	61bb      	str	r3, [r7, #24]
 80011f4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f6:	4b40      	ldr	r3, [pc, #256]	@ (80012f8 <HAL_ADC_MspInit+0x194>)
 80011f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011fa:	4a3f      	ldr	r2, [pc, #252]	@ (80012f8 <HAL_ADC_MspInit+0x194>)
 80011fc:	f043 0302 	orr.w	r3, r3, #2
 8001200:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001202:	4b3d      	ldr	r3, [pc, #244]	@ (80012f8 <HAL_ADC_MspInit+0x194>)
 8001204:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001206:	f003 0302 	and.w	r3, r3, #2
 800120a:	617b      	str	r3, [r7, #20]
 800120c:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN3
    PB1     ------> ADC1_IN12
    PB12     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800120e:	2304      	movs	r3, #4
 8001210:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001212:	2303      	movs	r3, #3
 8001214:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001216:	2300      	movs	r3, #0
 8001218:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800121a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800121e:	4619      	mov	r1, r3
 8001220:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001224:	f005 fb06 	bl	8006834 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_12;
 8001228:	f241 0302 	movw	r3, #4098	@ 0x1002
 800122c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800122e:	2303      	movs	r3, #3
 8001230:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001232:	2300      	movs	r3, #0
 8001234:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001236:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800123a:	4619      	mov	r1, r3
 800123c:	482f      	ldr	r0, [pc, #188]	@ (80012fc <HAL_ADC_MspInit+0x198>)
 800123e:	f005 faf9 	bl	8006834 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001242:	2200      	movs	r2, #0
 8001244:	2100      	movs	r1, #0
 8001246:	2012      	movs	r0, #18
 8001248:	f004 f8c7 	bl	80053da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800124c:	2012      	movs	r0, #18
 800124e:	f004 f8de 	bl	800540e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001252:	e04a      	b.n	80012ea <HAL_ADC_MspInit+0x186>
  else if(adcHandle->Instance==ADC2)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a29      	ldr	r2, [pc, #164]	@ (8001300 <HAL_ADC_MspInit+0x19c>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d145      	bne.n	80012ea <HAL_ADC_MspInit+0x186>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800125e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001262:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001264:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001268:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800126a:	f107 0320 	add.w	r3, r7, #32
 800126e:	4618      	mov	r0, r3
 8001270:	f006 fb76 	bl	8007960 <HAL_RCCEx_PeriphCLKConfig>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <HAL_ADC_MspInit+0x11a>
      Error_Handler();
 800127a:	f000 fb7a 	bl	8001972 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800127e:	4b1d      	ldr	r3, [pc, #116]	@ (80012f4 <HAL_ADC_MspInit+0x190>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	3301      	adds	r3, #1
 8001284:	4a1b      	ldr	r2, [pc, #108]	@ (80012f4 <HAL_ADC_MspInit+0x190>)
 8001286:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001288:	4b1a      	ldr	r3, [pc, #104]	@ (80012f4 <HAL_ADC_MspInit+0x190>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2b01      	cmp	r3, #1
 800128e:	d10b      	bne.n	80012a8 <HAL_ADC_MspInit+0x144>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001290:	4b19      	ldr	r3, [pc, #100]	@ (80012f8 <HAL_ADC_MspInit+0x194>)
 8001292:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001294:	4a18      	ldr	r2, [pc, #96]	@ (80012f8 <HAL_ADC_MspInit+0x194>)
 8001296:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800129a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800129c:	4b16      	ldr	r3, [pc, #88]	@ (80012f8 <HAL_ADC_MspInit+0x194>)
 800129e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80012a4:	613b      	str	r3, [r7, #16]
 80012a6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a8:	4b13      	ldr	r3, [pc, #76]	@ (80012f8 <HAL_ADC_MspInit+0x194>)
 80012aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ac:	4a12      	ldr	r2, [pc, #72]	@ (80012f8 <HAL_ADC_MspInit+0x194>)
 80012ae:	f043 0301 	orr.w	r3, r3, #1
 80012b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012b4:	4b10      	ldr	r3, [pc, #64]	@ (80012f8 <HAL_ADC_MspInit+0x194>)
 80012b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012b8:	f003 0301 	and.w	r3, r3, #1
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6;
 80012c0:	2341      	movs	r3, #65	@ 0x41
 80012c2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012c4:	2303      	movs	r3, #3
 80012c6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c8:	2300      	movs	r3, #0
 80012ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012cc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80012d0:	4619      	mov	r1, r3
 80012d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012d6:	f005 faad 	bl	8006834 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80012da:	2200      	movs	r2, #0
 80012dc:	2100      	movs	r1, #0
 80012de:	2012      	movs	r0, #18
 80012e0:	f004 f87b 	bl	80053da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80012e4:	2012      	movs	r0, #18
 80012e6:	f004 f892 	bl	800540e <HAL_NVIC_EnableIRQ>
}
 80012ea:	bf00      	nop
 80012ec:	3778      	adds	r7, #120	@ 0x78
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	200001ec 	.word	0x200001ec
 80012f8:	40021000 	.word	0x40021000
 80012fc:	48000400 	.word	0x48000400
 8001300:	50000100 	.word	0x50000100

08001304 <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 8001308:	4b0f      	ldr	r3, [pc, #60]	@ (8001348 <MX_COMP1_Init+0x44>)
 800130a:	4a10      	ldr	r2, [pc, #64]	@ (800134c <MX_COMP1_Init+0x48>)
 800130c:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO2;
 800130e:	4b0e      	ldr	r3, [pc, #56]	@ (8001348 <MX_COMP1_Init+0x44>)
 8001310:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001314:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH1;
 8001316:	4b0c      	ldr	r3, [pc, #48]	@ (8001348 <MX_COMP1_Init+0x44>)
 8001318:	2240      	movs	r2, #64	@ 0x40
 800131a:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800131c:	4b0a      	ldr	r3, [pc, #40]	@ (8001348 <MX_COMP1_Init+0x44>)
 800131e:	2200      	movs	r2, #0
 8001320:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8001322:	4b09      	ldr	r3, [pc, #36]	@ (8001348 <MX_COMP1_Init+0x44>)
 8001324:	2200      	movs	r2, #0
 8001326:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8001328:	4b07      	ldr	r3, [pc, #28]	@ (8001348 <MX_COMP1_Init+0x44>)
 800132a:	2200      	movs	r2, #0
 800132c:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING;
 800132e:	4b06      	ldr	r3, [pc, #24]	@ (8001348 <MX_COMP1_Init+0x44>)
 8001330:	2211      	movs	r2, #17
 8001332:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8001334:	4804      	ldr	r0, [pc, #16]	@ (8001348 <MX_COMP1_Init+0x44>)
 8001336:	f003 fe0b 	bl	8004f50 <HAL_COMP_Init>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_COMP1_Init+0x40>
  {
    Error_Handler();
 8001340:	f000 fb17 	bl	8001972 <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 8001344:	bf00      	nop
 8001346:	bd80      	pop	{r7, pc}
 8001348:	200001f0 	.word	0x200001f0
 800134c:	40010200 	.word	0x40010200

08001350 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b088      	sub	sp, #32
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001358:	f107 030c 	add.w	r3, r7, #12
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	60da      	str	r2, [r3, #12]
 8001366:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a13      	ldr	r2, [pc, #76]	@ (80013bc <HAL_COMP_MspInit+0x6c>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d11f      	bne.n	80013b2 <HAL_COMP_MspInit+0x62>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001372:	4b13      	ldr	r3, [pc, #76]	@ (80013c0 <HAL_COMP_MspInit+0x70>)
 8001374:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001376:	4a12      	ldr	r2, [pc, #72]	@ (80013c0 <HAL_COMP_MspInit+0x70>)
 8001378:	f043 0302 	orr.w	r3, r3, #2
 800137c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800137e:	4b10      	ldr	r3, [pc, #64]	@ (80013c0 <HAL_COMP_MspInit+0x70>)
 8001380:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	60bb      	str	r3, [r7, #8]
 8001388:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration
    PB1     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800138a:	2302      	movs	r3, #2
 800138c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800138e:	2303      	movs	r3, #3
 8001390:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	2300      	movs	r3, #0
 8001394:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001396:	f107 030c 	add.w	r3, r7, #12
 800139a:	4619      	mov	r1, r3
 800139c:	4809      	ldr	r0, [pc, #36]	@ (80013c4 <HAL_COMP_MspInit+0x74>)
 800139e:	f005 fa49 	bl	8006834 <HAL_GPIO_Init>

    /* COMP1 interrupt Init */
    HAL_NVIC_SetPriority(COMP1_2_3_IRQn, 0, 0);
 80013a2:	2200      	movs	r2, #0
 80013a4:	2100      	movs	r1, #0
 80013a6:	2040      	movs	r0, #64	@ 0x40
 80013a8:	f004 f817 	bl	80053da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP1_2_3_IRQn);
 80013ac:	2040      	movs	r0, #64	@ 0x40
 80013ae:	f004 f82e 	bl	800540e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 80013b2:	bf00      	nop
 80013b4:	3720      	adds	r7, #32
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	40010200 	.word	0x40010200
 80013c0:	40021000 	.word	0x40021000
 80013c4:	48000400 	.word	0x48000400

080013c8 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DAC_HandleTypeDef hdac3;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b08c      	sub	sp, #48	@ 0x30
 80013cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80013ce:	463b      	mov	r3, r7
 80013d0:	2230      	movs	r2, #48	@ 0x30
 80013d2:	2100      	movs	r1, #0
 80013d4:	4618      	mov	r0, r3
 80013d6:	f00b fafb 	bl	800c9d0 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80013da:	4b16      	ldr	r3, [pc, #88]	@ (8001434 <MX_DAC1_Init+0x6c>)
 80013dc:	4a16      	ldr	r2, [pc, #88]	@ (8001438 <MX_DAC1_Init+0x70>)
 80013de:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80013e0:	4814      	ldr	r0, [pc, #80]	@ (8001434 <MX_DAC1_Init+0x6c>)
 80013e2:	f004 f82e 	bl	8005442 <HAL_DAC_Init>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80013ec:	f000 fac1 	bl	8001972 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80013f0:	2302      	movs	r3, #2
 80013f2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80013f4:	2300      	movs	r3, #0
 80013f6:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80013f8:	2300      	movs	r3, #0
 80013fa:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80013fc:	2300      	movs	r3, #0
 80013fe:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001400:	2300      	movs	r3, #0
 8001402:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001404:	2300      	movs	r3, #0
 8001406:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001408:	2300      	movs	r3, #0
 800140a:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 800140c:	2301      	movs	r3, #1
 800140e:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001410:	2300      	movs	r3, #0
 8001412:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001414:	463b      	mov	r3, r7
 8001416:	2200      	movs	r2, #0
 8001418:	4619      	mov	r1, r3
 800141a:	4806      	ldr	r0, [pc, #24]	@ (8001434 <MX_DAC1_Init+0x6c>)
 800141c:	f004 f8ce 	bl	80055bc <HAL_DAC_ConfigChannel>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8001426:	f000 faa4 	bl	8001972 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800142a:	bf00      	nop
 800142c:	3730      	adds	r7, #48	@ 0x30
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	20000214 	.word	0x20000214
 8001438:	50000800 	.word	0x50000800

0800143c <MX_DAC3_Init>:
/* DAC3 init function */
void MX_DAC3_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b08c      	sub	sp, #48	@ 0x30
 8001440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC3_Init 0 */

  /* USER CODE END DAC3_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001442:	463b      	mov	r3, r7
 8001444:	2230      	movs	r2, #48	@ 0x30
 8001446:	2100      	movs	r1, #0
 8001448:	4618      	mov	r0, r3
 800144a:	f00b fac1 	bl	800c9d0 <memset>

  /* USER CODE END DAC3_Init 1 */

  /** DAC Initialization
  */
  hdac3.Instance = DAC3;
 800144e:	4b16      	ldr	r3, [pc, #88]	@ (80014a8 <MX_DAC3_Init+0x6c>)
 8001450:	4a16      	ldr	r2, [pc, #88]	@ (80014ac <MX_DAC3_Init+0x70>)
 8001452:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac3) != HAL_OK)
 8001454:	4814      	ldr	r0, [pc, #80]	@ (80014a8 <MX_DAC3_Init+0x6c>)
 8001456:	f003 fff4 	bl	8005442 <HAL_DAC_Init>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_DAC3_Init+0x28>
  {
    Error_Handler();
 8001460:	f000 fa87 	bl	8001972 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001464:	2302      	movs	r3, #2
 8001466:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001468:	2300      	movs	r3, #0
 800146a:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 800146c:	2300      	movs	r3, #0
 800146e:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001470:	2300      	movs	r3, #0
 8001472:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001474:	2300      	movs	r3, #0
 8001476:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001478:	2300      	movs	r3, #0
 800147a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 800147c:	2302      	movs	r3, #2
 800147e:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8001480:	2302      	movs	r3, #2
 8001482:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001484:	2300      	movs	r3, #0
 8001486:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001488:	463b      	mov	r3, r7
 800148a:	2200      	movs	r2, #0
 800148c:	4619      	mov	r1, r3
 800148e:	4806      	ldr	r0, [pc, #24]	@ (80014a8 <MX_DAC3_Init+0x6c>)
 8001490:	f004 f894 	bl	80055bc <HAL_DAC_ConfigChannel>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_DAC3_Init+0x62>
  {
    Error_Handler();
 800149a:	f000 fa6a 	bl	8001972 <Error_Handler>
  }
  /* USER CODE BEGIN DAC3_Init 2 */

  /* USER CODE END DAC3_Init 2 */

}
 800149e:	bf00      	nop
 80014a0:	3730      	adds	r7, #48	@ 0x30
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	20000228 	.word	0x20000228
 80014ac:	50001000 	.word	0x50001000

080014b0 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b08a      	sub	sp, #40	@ 0x28
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b8:	f107 0314 	add.w	r3, r7, #20
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	605a      	str	r2, [r3, #4]
 80014c2:	609a      	str	r2, [r3, #8]
 80014c4:	60da      	str	r2, [r3, #12]
 80014c6:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a1e      	ldr	r2, [pc, #120]	@ (8001548 <HAL_DAC_MspInit+0x98>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d125      	bne.n	800151e <HAL_DAC_MspInit+0x6e>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80014d2:	4b1e      	ldr	r3, [pc, #120]	@ (800154c <HAL_DAC_MspInit+0x9c>)
 80014d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014d6:	4a1d      	ldr	r2, [pc, #116]	@ (800154c <HAL_DAC_MspInit+0x9c>)
 80014d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014de:	4b1b      	ldr	r3, [pc, #108]	@ (800154c <HAL_DAC_MspInit+0x9c>)
 80014e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014e6:	613b      	str	r3, [r7, #16]
 80014e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ea:	4b18      	ldr	r3, [pc, #96]	@ (800154c <HAL_DAC_MspInit+0x9c>)
 80014ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ee:	4a17      	ldr	r2, [pc, #92]	@ (800154c <HAL_DAC_MspInit+0x9c>)
 80014f0:	f043 0301 	orr.w	r3, r3, #1
 80014f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014f6:	4b15      	ldr	r3, [pc, #84]	@ (800154c <HAL_DAC_MspInit+0x9c>)
 80014f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014fa:	f003 0301 	and.w	r3, r3, #1
 80014fe:	60fb      	str	r3, [r7, #12]
 8001500:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001502:	2310      	movs	r3, #16
 8001504:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001506:	2303      	movs	r3, #3
 8001508:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150a:	2300      	movs	r3, #0
 800150c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800150e:	f107 0314 	add.w	r3, r7, #20
 8001512:	4619      	mov	r1, r3
 8001514:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001518:	f005 f98c 	bl	8006834 <HAL_GPIO_Init>
    __HAL_RCC_DAC3_CLK_ENABLE();
  /* USER CODE BEGIN DAC3_MspInit 1 */

  /* USER CODE END DAC3_MspInit 1 */
  }
}
 800151c:	e010      	b.n	8001540 <HAL_DAC_MspInit+0x90>
  else if(dacHandle->Instance==DAC3)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a0b      	ldr	r2, [pc, #44]	@ (8001550 <HAL_DAC_MspInit+0xa0>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d10b      	bne.n	8001540 <HAL_DAC_MspInit+0x90>
    __HAL_RCC_DAC3_CLK_ENABLE();
 8001528:	4b08      	ldr	r3, [pc, #32]	@ (800154c <HAL_DAC_MspInit+0x9c>)
 800152a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800152c:	4a07      	ldr	r2, [pc, #28]	@ (800154c <HAL_DAC_MspInit+0x9c>)
 800152e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001532:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001534:	4b05      	ldr	r3, [pc, #20]	@ (800154c <HAL_DAC_MspInit+0x9c>)
 8001536:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001538:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800153c:	60bb      	str	r3, [r7, #8]
 800153e:	68bb      	ldr	r3, [r7, #8]
}
 8001540:	bf00      	nop
 8001542:	3728      	adds	r7, #40	@ 0x28
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	50000800 	.word	0x50000800
 800154c:	40021000 	.word	0x40021000
 8001550:	50001000 	.word	0x50001000

08001554 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800155a:	4b12      	ldr	r3, [pc, #72]	@ (80015a4 <MX_DMA_Init+0x50>)
 800155c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800155e:	4a11      	ldr	r2, [pc, #68]	@ (80015a4 <MX_DMA_Init+0x50>)
 8001560:	f043 0304 	orr.w	r3, r3, #4
 8001564:	6493      	str	r3, [r2, #72]	@ 0x48
 8001566:	4b0f      	ldr	r3, [pc, #60]	@ (80015a4 <MX_DMA_Init+0x50>)
 8001568:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800156a:	f003 0304 	and.w	r3, r3, #4
 800156e:	607b      	str	r3, [r7, #4]
 8001570:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001572:	4b0c      	ldr	r3, [pc, #48]	@ (80015a4 <MX_DMA_Init+0x50>)
 8001574:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001576:	4a0b      	ldr	r2, [pc, #44]	@ (80015a4 <MX_DMA_Init+0x50>)
 8001578:	f043 0301 	orr.w	r3, r3, #1
 800157c:	6493      	str	r3, [r2, #72]	@ 0x48
 800157e:	4b09      	ldr	r3, [pc, #36]	@ (80015a4 <MX_DMA_Init+0x50>)
 8001580:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	603b      	str	r3, [r7, #0]
 8001588:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800158a:	2200      	movs	r2, #0
 800158c:	2100      	movs	r1, #0
 800158e:	200b      	movs	r0, #11
 8001590:	f003 ff23 	bl	80053da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001594:	200b      	movs	r0, #11
 8001596:	f003 ff3a 	bl	800540e <HAL_NVIC_EnableIRQ>

}
 800159a:	bf00      	nop
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	40021000 	.word	0x40021000

080015a8 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80015ac:	4b1f      	ldr	r3, [pc, #124]	@ (800162c <MX_FDCAN1_Init+0x84>)
 80015ae:	4a20      	ldr	r2, [pc, #128]	@ (8001630 <MX_FDCAN1_Init+0x88>)
 80015b0:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80015b2:	4b1e      	ldr	r3, [pc, #120]	@ (800162c <MX_FDCAN1_Init+0x84>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80015b8:	4b1c      	ldr	r3, [pc, #112]	@ (800162c <MX_FDCAN1_Init+0x84>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80015be:	4b1b      	ldr	r3, [pc, #108]	@ (800162c <MX_FDCAN1_Init+0x84>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80015c4:	4b19      	ldr	r3, [pc, #100]	@ (800162c <MX_FDCAN1_Init+0x84>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80015ca:	4b18      	ldr	r3, [pc, #96]	@ (800162c <MX_FDCAN1_Init+0x84>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80015d0:	4b16      	ldr	r3, [pc, #88]	@ (800162c <MX_FDCAN1_Init+0x84>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 20;
 80015d6:	4b15      	ldr	r3, [pc, #84]	@ (800162c <MX_FDCAN1_Init+0x84>)
 80015d8:	2214      	movs	r2, #20
 80015da:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80015dc:	4b13      	ldr	r3, [pc, #76]	@ (800162c <MX_FDCAN1_Init+0x84>)
 80015de:	2201      	movs	r2, #1
 80015e0:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 10;
 80015e2:	4b12      	ldr	r3, [pc, #72]	@ (800162c <MX_FDCAN1_Init+0x84>)
 80015e4:	220a      	movs	r2, #10
 80015e6:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 5;
 80015e8:	4b10      	ldr	r3, [pc, #64]	@ (800162c <MX_FDCAN1_Init+0x84>)
 80015ea:	2205      	movs	r2, #5
 80015ec:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 20;
 80015ee:	4b0f      	ldr	r3, [pc, #60]	@ (800162c <MX_FDCAN1_Init+0x84>)
 80015f0:	2214      	movs	r2, #20
 80015f2:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80015f4:	4b0d      	ldr	r3, [pc, #52]	@ (800162c <MX_FDCAN1_Init+0x84>)
 80015f6:	2201      	movs	r2, #1
 80015f8:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 10;
 80015fa:	4b0c      	ldr	r3, [pc, #48]	@ (800162c <MX_FDCAN1_Init+0x84>)
 80015fc:	220a      	movs	r2, #10
 80015fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 5;
 8001600:	4b0a      	ldr	r3, [pc, #40]	@ (800162c <MX_FDCAN1_Init+0x84>)
 8001602:	2205      	movs	r2, #5
 8001604:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 8001606:	4b09      	ldr	r3, [pc, #36]	@ (800162c <MX_FDCAN1_Init+0x84>)
 8001608:	2201      	movs	r2, #1
 800160a:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 1;
 800160c:	4b07      	ldr	r3, [pc, #28]	@ (800162c <MX_FDCAN1_Init+0x84>)
 800160e:	2201      	movs	r2, #1
 8001610:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001612:	4b06      	ldr	r3, [pc, #24]	@ (800162c <MX_FDCAN1_Init+0x84>)
 8001614:	2200      	movs	r2, #0
 8001616:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001618:	4804      	ldr	r0, [pc, #16]	@ (800162c <MX_FDCAN1_Init+0x84>)
 800161a:	f004 fcb9 	bl	8005f90 <HAL_FDCAN_Init>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8001624:	f000 f9a5 	bl	8001972 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001628:	bf00      	nop
 800162a:	bd80      	pop	{r7, pc}
 800162c:	2000023c 	.word	0x2000023c
 8001630:	40006400 	.word	0x40006400

08001634 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b09a      	sub	sp, #104	@ 0x68
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800163c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	60da      	str	r2, [r3, #12]
 800164a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800164c:	f107 0310 	add.w	r3, r7, #16
 8001650:	2244      	movs	r2, #68	@ 0x44
 8001652:	2100      	movs	r1, #0
 8001654:	4618      	mov	r0, r3
 8001656:	f00b f9bb 	bl	800c9d0 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a24      	ldr	r2, [pc, #144]	@ (80016f0 <HAL_FDCAN_MspInit+0xbc>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d141      	bne.n	80016e8 <HAL_FDCAN_MspInit+0xb4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001664:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001668:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800166a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800166e:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001670:	f107 0310 	add.w	r3, r7, #16
 8001674:	4618      	mov	r0, r3
 8001676:	f006 f973 	bl	8007960 <HAL_RCCEx_PeriphCLKConfig>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001680:	f000 f977 	bl	8001972 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001684:	4b1b      	ldr	r3, [pc, #108]	@ (80016f4 <HAL_FDCAN_MspInit+0xc0>)
 8001686:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001688:	4a1a      	ldr	r2, [pc, #104]	@ (80016f4 <HAL_FDCAN_MspInit+0xc0>)
 800168a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800168e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001690:	4b18      	ldr	r3, [pc, #96]	@ (80016f4 <HAL_FDCAN_MspInit+0xc0>)
 8001692:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001694:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001698:	60fb      	str	r3, [r7, #12]
 800169a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800169c:	4b15      	ldr	r3, [pc, #84]	@ (80016f4 <HAL_FDCAN_MspInit+0xc0>)
 800169e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016a0:	4a14      	ldr	r2, [pc, #80]	@ (80016f4 <HAL_FDCAN_MspInit+0xc0>)
 80016a2:	f043 0301 	orr.w	r3, r3, #1
 80016a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016a8:	4b12      	ldr	r3, [pc, #72]	@ (80016f4 <HAL_FDCAN_MspInit+0xc0>)
 80016aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ac:	f003 0301 	and.w	r3, r3, #1
 80016b0:	60bb      	str	r3, [r7, #8]
 80016b2:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80016b4:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80016b8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ba:	2302      	movs	r3, #2
 80016bc:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016be:	2300      	movs	r3, #0
 80016c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c2:	2300      	movs	r3, #0
 80016c4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80016c6:	2309      	movs	r3, #9
 80016c8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ca:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80016ce:	4619      	mov	r1, r3
 80016d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016d4:	f005 f8ae 	bl	8006834 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 80016d8:	2200      	movs	r2, #0
 80016da:	2100      	movs	r1, #0
 80016dc:	2015      	movs	r0, #21
 80016de:	f003 fe7c 	bl	80053da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80016e2:	2015      	movs	r0, #21
 80016e4:	f003 fe93 	bl	800540e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 80016e8:	bf00      	nop
 80016ea:	3768      	adds	r7, #104	@ 0x68
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	40006400 	.word	0x40006400
 80016f4:	40021000 	.word	0x40021000

080016f8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b08a      	sub	sp, #40	@ 0x28
 80016fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016fe:	f107 0314 	add.w	r3, r7, #20
 8001702:	2200      	movs	r2, #0
 8001704:	601a      	str	r2, [r3, #0]
 8001706:	605a      	str	r2, [r3, #4]
 8001708:	609a      	str	r2, [r3, #8]
 800170a:	60da      	str	r2, [r3, #12]
 800170c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800170e:	4b2e      	ldr	r3, [pc, #184]	@ (80017c8 <MX_GPIO_Init+0xd0>)
 8001710:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001712:	4a2d      	ldr	r2, [pc, #180]	@ (80017c8 <MX_GPIO_Init+0xd0>)
 8001714:	f043 0304 	orr.w	r3, r3, #4
 8001718:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800171a:	4b2b      	ldr	r3, [pc, #172]	@ (80017c8 <MX_GPIO_Init+0xd0>)
 800171c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800171e:	f003 0304 	and.w	r3, r3, #4
 8001722:	613b      	str	r3, [r7, #16]
 8001724:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001726:	4b28      	ldr	r3, [pc, #160]	@ (80017c8 <MX_GPIO_Init+0xd0>)
 8001728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800172a:	4a27      	ldr	r2, [pc, #156]	@ (80017c8 <MX_GPIO_Init+0xd0>)
 800172c:	f043 0320 	orr.w	r3, r3, #32
 8001730:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001732:	4b25      	ldr	r3, [pc, #148]	@ (80017c8 <MX_GPIO_Init+0xd0>)
 8001734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001736:	f003 0320 	and.w	r3, r3, #32
 800173a:	60fb      	str	r3, [r7, #12]
 800173c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800173e:	4b22      	ldr	r3, [pc, #136]	@ (80017c8 <MX_GPIO_Init+0xd0>)
 8001740:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001742:	4a21      	ldr	r2, [pc, #132]	@ (80017c8 <MX_GPIO_Init+0xd0>)
 8001744:	f043 0301 	orr.w	r3, r3, #1
 8001748:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800174a:	4b1f      	ldr	r3, [pc, #124]	@ (80017c8 <MX_GPIO_Init+0xd0>)
 800174c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	60bb      	str	r3, [r7, #8]
 8001754:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001756:	4b1c      	ldr	r3, [pc, #112]	@ (80017c8 <MX_GPIO_Init+0xd0>)
 8001758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800175a:	4a1b      	ldr	r2, [pc, #108]	@ (80017c8 <MX_GPIO_Init+0xd0>)
 800175c:	f043 0302 	orr.w	r3, r3, #2
 8001760:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001762:	4b19      	ldr	r3, [pc, #100]	@ (80017c8 <MX_GPIO_Init+0xd0>)
 8001764:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001766:	f003 0302 	and.w	r3, r3, #2
 800176a:	607b      	str	r3, [r7, #4]
 800176c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 800176e:	2200      	movs	r2, #0
 8001770:	2150      	movs	r1, #80	@ 0x50
 8001772:	4816      	ldr	r0, [pc, #88]	@ (80017cc <MX_GPIO_Init+0xd4>)
 8001774:	f005 f9e0 	bl	8006b38 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Button3_Pin|Button1_Pin|Button2_Pin;
 8001778:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 800177c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800177e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001782:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001784:	2300      	movs	r3, #0
 8001786:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001788:	f107 0314 	add.w	r3, r7, #20
 800178c:	4619      	mov	r1, r3
 800178e:	480f      	ldr	r0, [pc, #60]	@ (80017cc <MX_GPIO_Init+0xd4>)
 8001790:	f005 f850 	bl	8006834 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin;
 8001794:	2350      	movs	r3, #80	@ 0x50
 8001796:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001798:	2301      	movs	r3, #1
 800179a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179c:	2300      	movs	r3, #0
 800179e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a0:	2300      	movs	r3, #0
 80017a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017a4:	f107 0314 	add.w	r3, r7, #20
 80017a8:	4619      	mov	r1, r3
 80017aa:	4808      	ldr	r0, [pc, #32]	@ (80017cc <MX_GPIO_Init+0xd4>)
 80017ac:	f005 f842 	bl	8006834 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80017b0:	2200      	movs	r2, #0
 80017b2:	2100      	movs	r1, #0
 80017b4:	2028      	movs	r0, #40	@ 0x28
 80017b6:	f003 fe10 	bl	80053da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80017ba:	2028      	movs	r0, #40	@ 0x28
 80017bc:	f003 fe27 	bl	800540e <HAL_NVIC_EnableIRQ>

}
 80017c0:	bf00      	nop
 80017c2:	3728      	adds	r7, #40	@ 0x28
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	40021000 	.word	0x40021000
 80017cc:	48000800 	.word	0x48000800

080017d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017d4:	f000 fe61 	bl	800249a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017d8:	f000 f882 	bl	80018e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017dc:	f7ff ff8c 	bl	80016f8 <MX_GPIO_Init>
  MX_DMA_Init();
 80017e0:	f7ff feb8 	bl	8001554 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80017e4:	f000 fd56 	bl	8002294 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 80017e8:	f7ff fb6a 	bl	8000ec0 <MX_ADC1_Init>
  MX_ADC2_Init();
 80017ec:	f7ff fc22 	bl	8001034 <MX_ADC2_Init>
  MX_OPAMP1_Init();
 80017f0:	f000 f8c6 	bl	8001980 <MX_OPAMP1_Init>
  MX_OPAMP2_Init();
 80017f4:	f000 f8ec 	bl	80019d0 <MX_OPAMP2_Init>
  MX_OPAMP3_Init();
 80017f8:	f000 f912 	bl	8001a20 <MX_OPAMP3_Init>
  MX_TIM1_Init();
 80017fc:	f000 fb0e 	bl	8001e1c <MX_TIM1_Init>
  MX_COMP1_Init();
 8001800:	f7ff fd80 	bl	8001304 <MX_COMP1_Init>
  MX_DAC1_Init();
 8001804:	f7ff fde0 	bl	80013c8 <MX_DAC1_Init>
  MX_DAC3_Init();
 8001808:	f7ff fe18 	bl	800143c <MX_DAC3_Init>
  MX_FDCAN1_Init();
 800180c:	f7ff fecc 	bl	80015a8 <MX_FDCAN1_Init>
  MX_TIM4_Init();
 8001810:	f000 fbf8 	bl	8002004 <MX_TIM4_Init>
  MX_SPI1_Init();
 8001814:	f000 f9a2 	bl	8001b5c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_OPAMP_Start(&hopamp1);
 8001818:	4826      	ldr	r0, [pc, #152]	@ (80018b4 <main+0xe4>)
 800181a:	f005 fa8d 	bl	8006d38 <HAL_OPAMP_Start>
  HAL_OPAMP_Start(&hopamp2);
 800181e:	4826      	ldr	r0, [pc, #152]	@ (80018b8 <main+0xe8>)
 8001820:	f005 fa8a 	bl	8006d38 <HAL_OPAMP_Start>
  HAL_OPAMP_Start(&hopamp3);
 8001824:	4825      	ldr	r0, [pc, #148]	@ (80018bc <main+0xec>)
 8001826:	f005 fa87 	bl	8006d38 <HAL_OPAMP_Start>
  // HAL_UART_Receive_IT(&huart3, (uint8_t *)&aRxBuffer, 1);
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800182a:	217f      	movs	r1, #127	@ 0x7f
 800182c:	4824      	ldr	r0, [pc, #144]	@ (80018c0 <main+0xf0>)
 800182e:	f002 fb2d 	bl	8003e8c <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8001832:	217f      	movs	r1, #127	@ 0x7f
 8001834:	4823      	ldr	r0, [pc, #140]	@ (80018c4 <main+0xf4>)
 8001836:	f002 fb29 	bl	8003e8c <HAL_ADCEx_Calibration_Start>
  __HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_JEOC);
 800183a:	4b21      	ldr	r3, [pc, #132]	@ (80018c0 <main+0xf0>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	2220      	movs	r2, #32
 8001840:	601a      	str	r2, [r3, #0]
  __HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_EOC);
 8001842:	4b1f      	ldr	r3, [pc, #124]	@ (80018c0 <main+0xf0>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2204      	movs	r2, #4
 8001848:	601a      	str	r2, [r3, #0]
  __HAL_ADC_CLEAR_FLAG(&hadc2, ADC_FLAG_JEOC);
 800184a:	4b1e      	ldr	r3, [pc, #120]	@ (80018c4 <main+0xf4>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	2220      	movs	r2, #32
 8001850:	601a      	str	r2, [r3, #0]
  HAL_ADCEx_InjectedStart_IT(&hadc1);
 8001852:	481b      	ldr	r0, [pc, #108]	@ (80018c0 <main+0xf0>)
 8001854:	f002 fc2c 	bl	80040b0 <HAL_ADCEx_InjectedStart_IT>
  HAL_ADCEx_InjectedStart(&hadc2);
 8001858:	481a      	ldr	r0, [pc, #104]	@ (80018c4 <main+0xf4>)
 800185a:	f002 fb79 	bl	8003f50 <HAL_ADCEx_InjectedStart>
  TIM1->ARR = 8000 - 1;
 800185e:	4b1a      	ldr	r3, [pc, #104]	@ (80018c8 <main+0xf8>)
 8001860:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001864:	62da      	str	r2, [r3, #44]	@ 0x2c
  TIM1->CCR4 = 8000 - 2;
 8001866:	4b18      	ldr	r3, [pc, #96]	@ (80018c8 <main+0xf8>)
 8001868:	f641 723e 	movw	r2, #7998	@ 0x1f3e
 800186c:	641a      	str	r2, [r3, #64]	@ 0x40
  HAL_TIM_Base_Start(&htim1);
 800186e:	4817      	ldr	r0, [pc, #92]	@ (80018cc <main+0xfc>)
 8001870:	f006 fefe 	bl	8008670 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001874:	210c      	movs	r1, #12
 8001876:	4815      	ldr	r0, [pc, #84]	@ (80018cc <main+0xfc>)
 8001878:	f006 ffbe 	bl	80087f8 <HAL_TIM_PWM_Start>
  HAL_DAC_SetValue(&hdac3, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 3000);
 800187c:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8001880:	2200      	movs	r2, #0
 8001882:	2100      	movs	r1, #0
 8001884:	4812      	ldr	r0, [pc, #72]	@ (80018d0 <main+0x100>)
 8001886:	f003 fe6b 	bl	8005560 <HAL_DAC_SetValue>
  HAL_DAC_Start(&hdac3, DAC_CHANNEL_1);
 800188a:	2100      	movs	r1, #0
 800188c:	4810      	ldr	r0, [pc, #64]	@ (80018d0 <main+0x100>)
 800188e:	f003 fdfb 	bl	8005488 <HAL_DAC_Start>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8001892:	2100      	movs	r1, #0
 8001894:	480f      	ldr	r0, [pc, #60]	@ (80018d4 <main+0x104>)
 8001896:	f003 fdf7 	bl	8005488 <HAL_DAC_Start>
  HAL_COMP_Start(&hcomp1);
 800189a:	480f      	ldr	r0, [pc, #60]	@ (80018d8 <main+0x108>)
 800189c:	f003 fc34 	bl	8005108 <HAL_COMP_Start>
  HAL_TIMEx_HallSensor_Start_IT(&htim4);
 80018a0:	480e      	ldr	r0, [pc, #56]	@ (80018dc <main+0x10c>)
 80018a2:	f008 fa39 	bl	8009d18 <HAL_TIMEx_HallSensor_Start_IT>
  FDCAN_Config();
 80018a6:	f00a fd65 	bl	800c374 <FDCAN_Config>
  appInit();
 80018aa:	f00a f971 	bl	800bb90 <appInit>
    //    HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData);
    //    HAL_Delay(10);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    userMain();
 80018ae:	f00a fbbf 	bl	800c030 <userMain>
 80018b2:	e7fc      	b.n	80018ae <main+0xde>
 80018b4:	200002a0 	.word	0x200002a0
 80018b8:	200002dc 	.word	0x200002dc
 80018bc:	20000318 	.word	0x20000318
 80018c0:	20000114 	.word	0x20000114
 80018c4:	20000180 	.word	0x20000180
 80018c8:	40012c00 	.word	0x40012c00
 80018cc:	200003b8 	.word	0x200003b8
 80018d0:	20000228 	.word	0x20000228
 80018d4:	20000214 	.word	0x20000214
 80018d8:	200001f0 	.word	0x200001f0
 80018dc:	20000404 	.word	0x20000404

080018e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b094      	sub	sp, #80	@ 0x50
 80018e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018e6:	f107 0318 	add.w	r3, r7, #24
 80018ea:	2238      	movs	r2, #56	@ 0x38
 80018ec:	2100      	movs	r1, #0
 80018ee:	4618      	mov	r0, r3
 80018f0:	f00b f86e 	bl	800c9d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018f4:	1d3b      	adds	r3, r7, #4
 80018f6:	2200      	movs	r2, #0
 80018f8:	601a      	str	r2, [r3, #0]
 80018fa:	605a      	str	r2, [r3, #4]
 80018fc:	609a      	str	r2, [r3, #8]
 80018fe:	60da      	str	r2, [r3, #12]
 8001900:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001902:	2000      	movs	r0, #0
 8001904:	f005 fa4a 	bl	8006d9c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001908:	2301      	movs	r3, #1
 800190a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800190c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001910:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001912:	2302      	movs	r3, #2
 8001914:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001916:	2303      	movs	r3, #3
 8001918:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV3;
 800191a:	2303      	movs	r3, #3
 800191c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 40;
 800191e:	2328      	movs	r3, #40	@ 0x28
 8001920:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001922:	2302      	movs	r3, #2
 8001924:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001926:	2302      	movs	r3, #2
 8001928:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800192a:	2302      	movs	r3, #2
 800192c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800192e:	f107 0318 	add.w	r3, r7, #24
 8001932:	4618      	mov	r0, r3
 8001934:	f005 fae6 	bl	8006f04 <HAL_RCC_OscConfig>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800193e:	f000 f818 	bl	8001972 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001942:	230f      	movs	r3, #15
 8001944:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001946:	2303      	movs	r3, #3
 8001948:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800194a:	2300      	movs	r3, #0
 800194c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800194e:	2300      	movs	r3, #0
 8001950:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001952:	2300      	movs	r3, #0
 8001954:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001956:	1d3b      	adds	r3, r7, #4
 8001958:	2104      	movs	r1, #4
 800195a:	4618      	mov	r0, r3
 800195c:	f005 fde4 	bl	8007528 <HAL_RCC_ClockConfig>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001966:	f000 f804 	bl	8001972 <Error_Handler>
  }
}
 800196a:	bf00      	nop
 800196c:	3750      	adds	r7, #80	@ 0x50
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001972:	b480      	push	{r7}
 8001974:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001976:	b672      	cpsid	i
}
 8001978:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800197a:	bf00      	nop
 800197c:	e7fd      	b.n	800197a <Error_Handler+0x8>
	...

08001980 <MX_OPAMP1_Init>:
OPAMP_HandleTypeDef hopamp2;
OPAMP_HandleTypeDef hopamp3;

/* OPAMP1 init function */
void MX_OPAMP1_Init(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8001984:	4b10      	ldr	r3, [pc, #64]	@ (80019c8 <MX_OPAMP1_Init+0x48>)
 8001986:	4a11      	ldr	r2, [pc, #68]	@ (80019cc <MX_OPAMP1_Init+0x4c>)
 8001988:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 800198a:	4b0f      	ldr	r3, [pc, #60]	@ (80019c8 <MX_OPAMP1_Init+0x48>)
 800198c:	2200      	movs	r2, #0
 800198e:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_STANDALONE_MODE;
 8001990:	4b0d      	ldr	r3, [pc, #52]	@ (80019c8 <MX_OPAMP1_Init+0x48>)
 8001992:	2200      	movs	r2, #0
 8001994:	609a      	str	r2, [r3, #8]
  hopamp1.Init.InvertingInput = OPAMP_INVERTINGINPUT_IO0;
 8001996:	4b0c      	ldr	r3, [pc, #48]	@ (80019c8 <MX_OPAMP1_Init+0x48>)
 8001998:	2200      	movs	r2, #0
 800199a:	60da      	str	r2, [r3, #12]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 800199c:	4b0a      	ldr	r3, [pc, #40]	@ (80019c8 <MX_OPAMP1_Init+0x48>)
 800199e:	2200      	movs	r2, #0
 80019a0:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = DISABLE;
 80019a2:	4b09      	ldr	r3, [pc, #36]	@ (80019c8 <MX_OPAMP1_Init+0x48>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80019a8:	4b07      	ldr	r3, [pc, #28]	@ (80019c8 <MX_OPAMP1_Init+0x48>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	619a      	str	r2, [r3, #24]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80019ae:	4b06      	ldr	r3, [pc, #24]	@ (80019c8 <MX_OPAMP1_Init+0x48>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 80019b4:	4804      	ldr	r0, [pc, #16]	@ (80019c8 <MX_OPAMP1_Init+0x48>)
 80019b6:	f005 f8ef 	bl	8006b98 <HAL_OPAMP_Init>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <MX_OPAMP1_Init+0x44>
  {
    Error_Handler();
 80019c0:	f7ff ffd7 	bl	8001972 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 80019c4:	bf00      	nop
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	200002a0 	.word	0x200002a0
 80019cc:	40010300 	.word	0x40010300

080019d0 <MX_OPAMP2_Init>:
/* OPAMP2 init function */
void MX_OPAMP2_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP2_Init 0 */

  /* USER CODE BEGIN OPAMP2_Init 1 */

  /* USER CODE END OPAMP2_Init 1 */
  hopamp2.Instance = OPAMP2;
 80019d4:	4b10      	ldr	r3, [pc, #64]	@ (8001a18 <MX_OPAMP2_Init+0x48>)
 80019d6:	4a11      	ldr	r2, [pc, #68]	@ (8001a1c <MX_OPAMP2_Init+0x4c>)
 80019d8:	601a      	str	r2, [r3, #0]
  hopamp2.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 80019da:	4b0f      	ldr	r3, [pc, #60]	@ (8001a18 <MX_OPAMP2_Init+0x48>)
 80019dc:	2200      	movs	r2, #0
 80019de:	605a      	str	r2, [r3, #4]
  hopamp2.Init.Mode = OPAMP_STANDALONE_MODE;
 80019e0:	4b0d      	ldr	r3, [pc, #52]	@ (8001a18 <MX_OPAMP2_Init+0x48>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	609a      	str	r2, [r3, #8]
  hopamp2.Init.InvertingInput = OPAMP_INVERTINGINPUT_IO0;
 80019e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001a18 <MX_OPAMP2_Init+0x48>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	60da      	str	r2, [r3, #12]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 80019ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001a18 <MX_OPAMP2_Init+0x48>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	611a      	str	r2, [r3, #16]
  hopamp2.Init.InternalOutput = DISABLE;
 80019f2:	4b09      	ldr	r3, [pc, #36]	@ (8001a18 <MX_OPAMP2_Init+0x48>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	751a      	strb	r2, [r3, #20]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80019f8:	4b07      	ldr	r3, [pc, #28]	@ (8001a18 <MX_OPAMP2_Init+0x48>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	619a      	str	r2, [r3, #24]
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80019fe:	4b06      	ldr	r3, [pc, #24]	@ (8001a18 <MX_OPAMP2_Init+0x48>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 8001a04:	4804      	ldr	r0, [pc, #16]	@ (8001a18 <MX_OPAMP2_Init+0x48>)
 8001a06:	f005 f8c7 	bl	8006b98 <HAL_OPAMP_Init>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <MX_OPAMP2_Init+0x44>
  {
    Error_Handler();
 8001a10:	f7ff ffaf 	bl	8001972 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP2_Init 2 */

  /* USER CODE END OPAMP2_Init 2 */

}
 8001a14:	bf00      	nop
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	200002dc 	.word	0x200002dc
 8001a1c:	40010304 	.word	0x40010304

08001a20 <MX_OPAMP3_Init>:
/* OPAMP3 init function */
void MX_OPAMP3_Init(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP3_Init 0 */

  /* USER CODE BEGIN OPAMP3_Init 1 */

  /* USER CODE END OPAMP3_Init 1 */
  hopamp3.Instance = OPAMP3;
 8001a24:	4b10      	ldr	r3, [pc, #64]	@ (8001a68 <MX_OPAMP3_Init+0x48>)
 8001a26:	4a11      	ldr	r2, [pc, #68]	@ (8001a6c <MX_OPAMP3_Init+0x4c>)
 8001a28:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8001a2a:	4b0f      	ldr	r3, [pc, #60]	@ (8001a68 <MX_OPAMP3_Init+0x48>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_STANDALONE_MODE;
 8001a30:	4b0d      	ldr	r3, [pc, #52]	@ (8001a68 <MX_OPAMP3_Init+0x48>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	609a      	str	r2, [r3, #8]
  hopamp3.Init.InvertingInput = OPAMP_INVERTINGINPUT_IO0;
 8001a36:	4b0c      	ldr	r3, [pc, #48]	@ (8001a68 <MX_OPAMP3_Init+0x48>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	60da      	str	r2, [r3, #12]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8001a3c:	4b0a      	ldr	r3, [pc, #40]	@ (8001a68 <MX_OPAMP3_Init+0x48>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = DISABLE;
 8001a42:	4b09      	ldr	r3, [pc, #36]	@ (8001a68 <MX_OPAMP3_Init+0x48>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001a48:	4b07      	ldr	r3, [pc, #28]	@ (8001a68 <MX_OPAMP3_Init+0x48>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	619a      	str	r2, [r3, #24]
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001a4e:	4b06      	ldr	r3, [pc, #24]	@ (8001a68 <MX_OPAMP3_Init+0x48>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 8001a54:	4804      	ldr	r0, [pc, #16]	@ (8001a68 <MX_OPAMP3_Init+0x48>)
 8001a56:	f005 f89f 	bl	8006b98 <HAL_OPAMP_Init>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <MX_OPAMP3_Init+0x44>
  {
    Error_Handler();
 8001a60:	f7ff ff87 	bl	8001972 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP3_Init 2 */

  /* USER CODE END OPAMP3_Init 2 */

}
 8001a64:	bf00      	nop
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	20000318 	.word	0x20000318
 8001a6c:	40010308 	.word	0x40010308

08001a70 <HAL_OPAMP_MspInit>:

void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* opampHandle)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b08a      	sub	sp, #40	@ 0x28
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a78:	f107 0314 	add.w	r3, r7, #20
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	605a      	str	r2, [r3, #4]
 8001a82:	609a      	str	r2, [r3, #8]
 8001a84:	60da      	str	r2, [r3, #12]
 8001a86:	611a      	str	r2, [r3, #16]
  if(opampHandle->Instance==OPAMP1)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a2e      	ldr	r2, [pc, #184]	@ (8001b48 <HAL_OPAMP_MspInit+0xd8>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d119      	bne.n	8001ac6 <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a92:	4b2e      	ldr	r3, [pc, #184]	@ (8001b4c <HAL_OPAMP_MspInit+0xdc>)
 8001a94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a96:	4a2d      	ldr	r2, [pc, #180]	@ (8001b4c <HAL_OPAMP_MspInit+0xdc>)
 8001a98:	f043 0301 	orr.w	r3, r3, #1
 8001a9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a9e:	4b2b      	ldr	r3, [pc, #172]	@ (8001b4c <HAL_OPAMP_MspInit+0xdc>)
 8001aa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	613b      	str	r3, [r7, #16]
 8001aa8:	693b      	ldr	r3, [r7, #16]
    /**OPAMP1 GPIO Configuration
    PA1     ------> OPAMP1_VINP
    PA2     ------> OPAMP1_VOUT
    PA3     ------> OPAMP1_VINM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001aaa:	230e      	movs	r3, #14
 8001aac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab6:	f107 0314 	add.w	r3, r7, #20
 8001aba:	4619      	mov	r1, r3
 8001abc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ac0:	f004 feb8 	bl	8006834 <HAL_GPIO_Init>

  /* USER CODE BEGIN OPAMP3_MspInit 1 */

  /* USER CODE END OPAMP3_MspInit 1 */
  }
}
 8001ac4:	e03b      	b.n	8001b3e <HAL_OPAMP_MspInit+0xce>
  else if(opampHandle->Instance==OPAMP2)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a21      	ldr	r2, [pc, #132]	@ (8001b50 <HAL_OPAMP_MspInit+0xe0>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d119      	bne.n	8001b04 <HAL_OPAMP_MspInit+0x94>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad0:	4b1e      	ldr	r3, [pc, #120]	@ (8001b4c <HAL_OPAMP_MspInit+0xdc>)
 8001ad2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ad4:	4a1d      	ldr	r2, [pc, #116]	@ (8001b4c <HAL_OPAMP_MspInit+0xdc>)
 8001ad6:	f043 0301 	orr.w	r3, r3, #1
 8001ada:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001adc:	4b1b      	ldr	r3, [pc, #108]	@ (8001b4c <HAL_OPAMP_MspInit+0xdc>)
 8001ade:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ae0:	f003 0301 	and.w	r3, r3, #1
 8001ae4:	60fb      	str	r3, [r7, #12]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001ae8:	23e0      	movs	r3, #224	@ 0xe0
 8001aea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001aec:	2303      	movs	r3, #3
 8001aee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af0:	2300      	movs	r3, #0
 8001af2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af4:	f107 0314 	add.w	r3, r7, #20
 8001af8:	4619      	mov	r1, r3
 8001afa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001afe:	f004 fe99 	bl	8006834 <HAL_GPIO_Init>
}
 8001b02:	e01c      	b.n	8001b3e <HAL_OPAMP_MspInit+0xce>
  else if(opampHandle->Instance==OPAMP3)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a12      	ldr	r2, [pc, #72]	@ (8001b54 <HAL_OPAMP_MspInit+0xe4>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d117      	bne.n	8001b3e <HAL_OPAMP_MspInit+0xce>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b0e:	4b0f      	ldr	r3, [pc, #60]	@ (8001b4c <HAL_OPAMP_MspInit+0xdc>)
 8001b10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b12:	4a0e      	ldr	r2, [pc, #56]	@ (8001b4c <HAL_OPAMP_MspInit+0xdc>)
 8001b14:	f043 0302 	orr.w	r3, r3, #2
 8001b18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b1a:	4b0c      	ldr	r3, [pc, #48]	@ (8001b4c <HAL_OPAMP_MspInit+0xdc>)
 8001b1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b1e:	f003 0302 	and.w	r3, r3, #2
 8001b22:	60bb      	str	r3, [r7, #8]
 8001b24:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001b26:	2307      	movs	r3, #7
 8001b28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b32:	f107 0314 	add.w	r3, r7, #20
 8001b36:	4619      	mov	r1, r3
 8001b38:	4807      	ldr	r0, [pc, #28]	@ (8001b58 <HAL_OPAMP_MspInit+0xe8>)
 8001b3a:	f004 fe7b 	bl	8006834 <HAL_GPIO_Init>
}
 8001b3e:	bf00      	nop
 8001b40:	3728      	adds	r7, #40	@ 0x28
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	40010300 	.word	0x40010300
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	40010304 	.word	0x40010304
 8001b54:	40010308 	.word	0x40010308
 8001b58:	48000400 	.word	0x48000400

08001b5c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001b60:	4b1b      	ldr	r3, [pc, #108]	@ (8001bd0 <MX_SPI1_Init+0x74>)
 8001b62:	4a1c      	ldr	r2, [pc, #112]	@ (8001bd4 <MX_SPI1_Init+0x78>)
 8001b64:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b66:	4b1a      	ldr	r3, [pc, #104]	@ (8001bd0 <MX_SPI1_Init+0x74>)
 8001b68:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001b6c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b6e:	4b18      	ldr	r3, [pc, #96]	@ (8001bd0 <MX_SPI1_Init+0x74>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001b74:	4b16      	ldr	r3, [pc, #88]	@ (8001bd0 <MX_SPI1_Init+0x74>)
 8001b76:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 8001b7a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b7c:	4b14      	ldr	r3, [pc, #80]	@ (8001bd0 <MX_SPI1_Init+0x74>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001b82:	4b13      	ldr	r3, [pc, #76]	@ (8001bd0 <MX_SPI1_Init+0x74>)
 8001b84:	2201      	movs	r2, #1
 8001b86:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b88:	4b11      	ldr	r3, [pc, #68]	@ (8001bd0 <MX_SPI1_Init+0x74>)
 8001b8a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b8e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001b90:	4b0f      	ldr	r3, [pc, #60]	@ (8001bd0 <MX_SPI1_Init+0x74>)
 8001b92:	2218      	movs	r2, #24
 8001b94:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b96:	4b0e      	ldr	r3, [pc, #56]	@ (8001bd0 <MX_SPI1_Init+0x74>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b9c:	4b0c      	ldr	r3, [pc, #48]	@ (8001bd0 <MX_SPI1_Init+0x74>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ba2:	4b0b      	ldr	r3, [pc, #44]	@ (8001bd0 <MX_SPI1_Init+0x74>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001ba8:	4b09      	ldr	r3, [pc, #36]	@ (8001bd0 <MX_SPI1_Init+0x74>)
 8001baa:	2207      	movs	r2, #7
 8001bac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001bae:	4b08      	ldr	r3, [pc, #32]	@ (8001bd0 <MX_SPI1_Init+0x74>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001bb4:	4b06      	ldr	r3, [pc, #24]	@ (8001bd0 <MX_SPI1_Init+0x74>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001bba:	4805      	ldr	r0, [pc, #20]	@ (8001bd0 <MX_SPI1_Init+0x74>)
 8001bbc:	f006 f8c0 	bl	8007d40 <HAL_SPI_Init>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001bc6:	f7ff fed4 	bl	8001972 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001bca:	bf00      	nop
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	20000354 	.word	0x20000354
 8001bd4:	40013000 	.word	0x40013000

08001bd8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b08a      	sub	sp, #40	@ 0x28
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be0:	f107 0314 	add.w	r3, r7, #20
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	605a      	str	r2, [r3, #4]
 8001bea:	609a      	str	r2, [r3, #8]
 8001bec:	60da      	str	r2, [r3, #12]
 8001bee:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a17      	ldr	r2, [pc, #92]	@ (8001c54 <HAL_SPI_MspInit+0x7c>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d127      	bne.n	8001c4a <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001bfa:	4b17      	ldr	r3, [pc, #92]	@ (8001c58 <HAL_SPI_MspInit+0x80>)
 8001bfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bfe:	4a16      	ldr	r2, [pc, #88]	@ (8001c58 <HAL_SPI_MspInit+0x80>)
 8001c00:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c04:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c06:	4b14      	ldr	r3, [pc, #80]	@ (8001c58 <HAL_SPI_MspInit+0x80>)
 8001c08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c0a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c0e:	613b      	str	r3, [r7, #16]
 8001c10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c12:	4b11      	ldr	r3, [pc, #68]	@ (8001c58 <HAL_SPI_MspInit+0x80>)
 8001c14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c16:	4a10      	ldr	r2, [pc, #64]	@ (8001c58 <HAL_SPI_MspInit+0x80>)
 8001c18:	f043 0302 	orr.w	r3, r3, #2
 8001c1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c1e:	4b0e      	ldr	r3, [pc, #56]	@ (8001c58 <HAL_SPI_MspInit+0x80>)
 8001c20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	60fb      	str	r3, [r7, #12]
 8001c28:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001c2a:	2338      	movs	r3, #56	@ 0x38
 8001c2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2e:	2302      	movs	r3, #2
 8001c30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c32:	2300      	movs	r3, #0
 8001c34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c36:	2300      	movs	r3, #0
 8001c38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c3a:	2305      	movs	r3, #5
 8001c3c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c3e:	f107 0314 	add.w	r3, r7, #20
 8001c42:	4619      	mov	r1, r3
 8001c44:	4805      	ldr	r0, [pc, #20]	@ (8001c5c <HAL_SPI_MspInit+0x84>)
 8001c46:	f004 fdf5 	bl	8006834 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001c4a:	bf00      	nop
 8001c4c:	3728      	adds	r7, #40	@ 0x28
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	40013000 	.word	0x40013000
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	48000400 	.word	0x48000400

08001c60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c66:	4b0f      	ldr	r3, [pc, #60]	@ (8001ca4 <HAL_MspInit+0x44>)
 8001c68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c6a:	4a0e      	ldr	r2, [pc, #56]	@ (8001ca4 <HAL_MspInit+0x44>)
 8001c6c:	f043 0301 	orr.w	r3, r3, #1
 8001c70:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c72:	4b0c      	ldr	r3, [pc, #48]	@ (8001ca4 <HAL_MspInit+0x44>)
 8001c74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c76:	f003 0301 	and.w	r3, r3, #1
 8001c7a:	607b      	str	r3, [r7, #4]
 8001c7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c7e:	4b09      	ldr	r3, [pc, #36]	@ (8001ca4 <HAL_MspInit+0x44>)
 8001c80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c82:	4a08      	ldr	r2, [pc, #32]	@ (8001ca4 <HAL_MspInit+0x44>)
 8001c84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c88:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c8a:	4b06      	ldr	r3, [pc, #24]	@ (8001ca4 <HAL_MspInit+0x44>)
 8001c8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c92:	603b      	str	r3, [r7, #0]
 8001c94:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001c96:	f005 f925 	bl	8006ee4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c9a:	bf00      	nop
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	40021000 	.word	0x40021000

08001ca8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cac:	bf00      	nop
 8001cae:	e7fd      	b.n	8001cac <NMI_Handler+0x4>

08001cb0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cb4:	bf00      	nop
 8001cb6:	e7fd      	b.n	8001cb4 <HardFault_Handler+0x4>

08001cb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cbc:	bf00      	nop
 8001cbe:	e7fd      	b.n	8001cbc <MemManage_Handler+0x4>

08001cc0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cc4:	bf00      	nop
 8001cc6:	e7fd      	b.n	8001cc4 <BusFault_Handler+0x4>

08001cc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ccc:	bf00      	nop
 8001cce:	e7fd      	b.n	8001ccc <UsageFault_Handler+0x4>

08001cd0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cd4:	bf00      	nop
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr

08001cde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ce2:	bf00      	nop
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cf0:	bf00      	nop
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr

08001cfa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cfe:	f000 fc1f 	bl	8002540 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d02:	bf00      	nop
 8001d04:	bd80      	pop	{r7, pc}
	...

08001d08 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001d0c:	4802      	ldr	r0, [pc, #8]	@ (8001d18 <DMA1_Channel1_IRQHandler+0x10>)
 8001d0e:	f003 fff0 	bl	8005cf2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001d12:	bf00      	nop
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	200004e4 	.word	0x200004e4

08001d1c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001d20:	4803      	ldr	r0, [pc, #12]	@ (8001d30 <ADC1_2_IRQHandler+0x14>)
 8001d22:	f001 f801 	bl	8002d28 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001d26:	4803      	ldr	r0, [pc, #12]	@ (8001d34 <ADC1_2_IRQHandler+0x18>)
 8001d28:	f000 fffe 	bl	8002d28 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001d2c:	bf00      	nop
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	20000114 	.word	0x20000114
 8001d34:	20000180 	.word	0x20000180

08001d38 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001d3c:	4805      	ldr	r0, [pc, #20]	@ (8001d54 <FDCAN1_IT0_IRQHandler+0x1c>)
 8001d3e:	f004 fb89 	bl	8006454 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */
	HAL_FDCAN_GetRxMessage(&hfdcan1,FDCAN_RX_FIFO0,&RxHeader,RxData);
 8001d42:	4b05      	ldr	r3, [pc, #20]	@ (8001d58 <FDCAN1_IT0_IRQHandler+0x20>)
 8001d44:	4a05      	ldr	r2, [pc, #20]	@ (8001d5c <FDCAN1_IT0_IRQHandler+0x24>)
 8001d46:	2140      	movs	r1, #64	@ 0x40
 8001d48:	4802      	ldr	r0, [pc, #8]	@ (8001d54 <FDCAN1_IT0_IRQHandler+0x1c>)
 8001d4a:	f004 fa7b 	bl	8006244 <HAL_FDCAN_GetRxMessage>
  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001d4e:	bf00      	nop
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	2000023c 	.word	0x2000023c
 8001d58:	20000654 	.word	0x20000654
 8001d5c:	2000062c 	.word	0x2000062c

08001d60 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001d64:	4802      	ldr	r0, [pc, #8]	@ (8001d70 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8001d66:	f006 fedd 	bl	8008b24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8001d6a:	bf00      	nop
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	200003b8 	.word	0x200003b8

08001d74 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001d78:	4802      	ldr	r0, [pc, #8]	@ (8001d84 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001d7a:	f006 fed3 	bl	8008b24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001d7e:	bf00      	nop
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	200003b8 	.word	0x200003b8

08001d88 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001d8c:	4802      	ldr	r0, [pc, #8]	@ (8001d98 <TIM1_CC_IRQHandler+0x10>)
 8001d8e:	f006 fec9 	bl	8008b24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001d92:	bf00      	nop
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	200003b8 	.word	0x200003b8

08001d9c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001da0:	4802      	ldr	r0, [pc, #8]	@ (8001dac <TIM4_IRQHandler+0x10>)
 8001da2:	f006 febf 	bl	8008b24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001da6:	bf00      	nop
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	20000404 	.word	0x20000404

08001db0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001db4:	4802      	ldr	r0, [pc, #8]	@ (8001dc0 <USART3_IRQHandler+0x10>)
 8001db6:	f008 fc73 	bl	800a6a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001dba:	bf00      	nop
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	20000450 	.word	0x20000450

08001dc4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button1_Pin);
 8001dc8:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001dcc:	f004 fecc 	bl	8006b68 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Button2_Pin);
 8001dd0:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001dd4:	f004 fec8 	bl	8006b68 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Button3_Pin);
 8001dd8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001ddc:	f004 fec4 	bl	8006b68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001de0:	bf00      	nop
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <COMP1_2_3_IRQHandler>:

/**
  * @brief This function handles COMP1, COMP2 and COMP3 interrupts through EXTI lines 21, 22 and 29.
  */
void COMP1_2_3_IRQHandler(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP1_2_3_IRQn 0 */

  /* USER CODE END COMP1_2_3_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp1);
 8001de8:	4802      	ldr	r0, [pc, #8]	@ (8001df4 <COMP1_2_3_IRQHandler+0x10>)
 8001dea:	f003 f9d5 	bl	8005198 <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP1_2_3_IRQn 1 */

  /* USER CODE END COMP1_2_3_IRQn 1 */
}
 8001dee:	bf00      	nop
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	200001f0 	.word	0x200001f0

08001df8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001dfc:	4b06      	ldr	r3, [pc, #24]	@ (8001e18 <SystemInit+0x20>)
 8001dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e02:	4a05      	ldr	r2, [pc, #20]	@ (8001e18 <SystemInit+0x20>)
 8001e04:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e08:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e0c:	bf00      	nop
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	e000ed00 	.word	0xe000ed00

08001e1c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b09e      	sub	sp, #120	@ 0x78
 8001e20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e22:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001e26:	2200      	movs	r2, #0
 8001e28:	601a      	str	r2, [r3, #0]
 8001e2a:	605a      	str	r2, [r3, #4]
 8001e2c:	609a      	str	r2, [r3, #8]
 8001e2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e30:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]
 8001e38:	605a      	str	r2, [r3, #4]
 8001e3a:	609a      	str	r2, [r3, #8]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8001e3c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	605a      	str	r2, [r3, #4]
 8001e46:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e48:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]
 8001e50:	605a      	str	r2, [r3, #4]
 8001e52:	609a      	str	r2, [r3, #8]
 8001e54:	60da      	str	r2, [r3, #12]
 8001e56:	611a      	str	r2, [r3, #16]
 8001e58:	615a      	str	r2, [r3, #20]
 8001e5a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e5c:	463b      	mov	r3, r7
 8001e5e:	2234      	movs	r2, #52	@ 0x34
 8001e60:	2100      	movs	r1, #0
 8001e62:	4618      	mov	r0, r3
 8001e64:	f00a fdb4 	bl	800c9d0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e68:	4b64      	ldr	r3, [pc, #400]	@ (8001ffc <MX_TIM1_Init+0x1e0>)
 8001e6a:	4a65      	ldr	r2, [pc, #404]	@ (8002000 <MX_TIM1_Init+0x1e4>)
 8001e6c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1-1;
 8001e6e:	4b63      	ldr	r3, [pc, #396]	@ (8001ffc <MX_TIM1_Init+0x1e0>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001e74:	4b61      	ldr	r3, [pc, #388]	@ (8001ffc <MX_TIM1_Init+0x1e0>)
 8001e76:	2220      	movs	r2, #32
 8001e78:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7999;
 8001e7a:	4b60      	ldr	r3, [pc, #384]	@ (8001ffc <MX_TIM1_Init+0x1e0>)
 8001e7c:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001e80:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001e82:	4b5e      	ldr	r3, [pc, #376]	@ (8001ffc <MX_TIM1_Init+0x1e0>)
 8001e84:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e88:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 8001e8a:	4b5c      	ldr	r3, [pc, #368]	@ (8001ffc <MX_TIM1_Init+0x1e0>)
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e90:	4b5a      	ldr	r3, [pc, #360]	@ (8001ffc <MX_TIM1_Init+0x1e0>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001e96:	4859      	ldr	r0, [pc, #356]	@ (8001ffc <MX_TIM1_Init+0x1e0>)
 8001e98:	f006 fb92 	bl	80085c0 <HAL_TIM_Base_Init>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001ea2:	f7ff fd66 	bl	8001972 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ea6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001eaa:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001eac:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	4852      	ldr	r0, [pc, #328]	@ (8001ffc <MX_TIM1_Init+0x1e0>)
 8001eb4:	f007 f89a 	bl	8008fec <HAL_TIM_ConfigClockSource>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001ebe:	f7ff fd58 	bl	8001972 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001ec2:	484e      	ldr	r0, [pc, #312]	@ (8001ffc <MX_TIM1_Init+0x1e0>)
 8001ec4:	f006 fc36 	bl	8008734 <HAL_TIM_PWM_Init>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8001ece:	f7ff fd50 	bl	8001972 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8001ed2:	2370      	movs	r3, #112	@ 0x70
 8001ed4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	663b      	str	r3, [r7, #96]	@ 0x60
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eda:	2300      	movs	r3, #0
 8001edc:	667b      	str	r3, [r7, #100]	@ 0x64
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ede:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	4845      	ldr	r0, [pc, #276]	@ (8001ffc <MX_TIM1_Init+0x1e0>)
 8001ee6:	f008 f8b9 	bl	800a05c <HAL_TIMEx_MasterConfigSynchronization>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 8001ef0:	f7ff fd3f 	bl	8001972 <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP1;
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	653b      	str	r3, [r7, #80]	@ 0x50
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	657b      	str	r3, [r7, #84]	@ 0x54
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8001efc:	2300      	movs	r3, #0
 8001efe:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8001f00:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001f04:	461a      	mov	r2, r3
 8001f06:	2101      	movs	r1, #1
 8001f08:	483c      	ldr	r0, [pc, #240]	@ (8001ffc <MX_TIM1_Init+0x1e0>)
 8001f0a:	f008 f9b5 	bl	800a278 <HAL_TIMEx_ConfigBreakInput>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d001      	beq.n	8001f18 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001f14:	f7ff fd2d 	bl	8001972 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f18:	2360      	movs	r3, #96	@ 0x60
 8001f1a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f20:	2300      	movs	r3, #0
 8001f22:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001f24:	2300      	movs	r3, #0
 8001f26:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f30:	2300      	movs	r3, #0
 8001f32:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f34:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001f38:	2200      	movs	r2, #0
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	482f      	ldr	r0, [pc, #188]	@ (8001ffc <MX_TIM1_Init+0x1e0>)
 8001f3e:	f006 ff41 	bl	8008dc4 <HAL_TIM_PWM_ConfigChannel>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d001      	beq.n	8001f4c <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 8001f48:	f7ff fd13 	bl	8001972 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f4c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001f50:	2204      	movs	r2, #4
 8001f52:	4619      	mov	r1, r3
 8001f54:	4829      	ldr	r0, [pc, #164]	@ (8001ffc <MX_TIM1_Init+0x1e0>)
 8001f56:	f006 ff35 	bl	8008dc4 <HAL_TIM_PWM_ConfigChannel>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 8001f60:	f7ff fd07 	bl	8001972 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f64:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001f68:	2208      	movs	r2, #8
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	4823      	ldr	r0, [pc, #140]	@ (8001ffc <MX_TIM1_Init+0x1e0>)
 8001f6e:	f006 ff29 	bl	8008dc4 <HAL_TIM_PWM_ConfigChannel>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <MX_TIM1_Init+0x160>
  {
    Error_Handler();
 8001f78:	f7ff fcfb 	bl	8001972 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001f7c:	2370      	movs	r3, #112	@ 0x70
 8001f7e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 7998;
 8001f80:	f641 733e 	movw	r3, #7998	@ 0x1f3e
 8001f84:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001f86:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001f8a:	220c      	movs	r2, #12
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	481b      	ldr	r0, [pc, #108]	@ (8001ffc <MX_TIM1_Init+0x1e0>)
 8001f90:	f006 ff18 	bl	8008dc4 <HAL_TIM_PWM_ConfigChannel>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <MX_TIM1_Init+0x182>
  {
    Error_Handler();
 8001f9a:	f7ff fcea 	bl	8001972 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 120;
 8001faa:	2378      	movs	r3, #120	@ 0x78
 8001fac:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8001fae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fb2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001fb4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001fb8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 2;
 8001fba:	2302      	movs	r3, #2
 8001fbc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001fc6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001fca:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001fd8:	463b      	mov	r3, r7
 8001fda:	4619      	mov	r1, r3
 8001fdc:	4807      	ldr	r0, [pc, #28]	@ (8001ffc <MX_TIM1_Init+0x1e0>)
 8001fde:	f008 f8bf 	bl	800a160 <HAL_TIMEx_ConfigBreakDeadTime>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <MX_TIM1_Init+0x1d0>
  {
    Error_Handler();
 8001fe8:	f7ff fcc3 	bl	8001972 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001fec:	4803      	ldr	r0, [pc, #12]	@ (8001ffc <MX_TIM1_Init+0x1e0>)
 8001fee:	f000 f8e9 	bl	80021c4 <HAL_TIM_MspPostInit>

}
 8001ff2:	bf00      	nop
 8001ff4:	3778      	adds	r7, #120	@ 0x78
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	200003b8 	.word	0x200003b8
 8002000:	40012c00 	.word	0x40012c00

08002004 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b08c      	sub	sp, #48	@ 0x30
 8002008:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800200a:	f107 0320 	add.w	r3, r7, #32
 800200e:	2200      	movs	r2, #0
 8002010:	601a      	str	r2, [r3, #0]
 8002012:	605a      	str	r2, [r3, #4]
 8002014:	609a      	str	r2, [r3, #8]
 8002016:	60da      	str	r2, [r3, #12]
  TIM_HallSensor_InitTypeDef sConfig = {0};
 8002018:	f107 0310 	add.w	r3, r7, #16
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]
 8002020:	605a      	str	r2, [r3, #4]
 8002022:	609a      	str	r2, [r3, #8]
 8002024:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002026:	1d3b      	adds	r3, r7, #4
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]
 800202c:	605a      	str	r2, [r3, #4]
 800202e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002030:	4b26      	ldr	r3, [pc, #152]	@ (80020cc <MX_TIM4_Init+0xc8>)
 8002032:	4a27      	ldr	r2, [pc, #156]	@ (80020d0 <MX_TIM4_Init+0xcc>)
 8002034:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16-1;
 8002036:	4b25      	ldr	r3, [pc, #148]	@ (80020cc <MX_TIM4_Init+0xc8>)
 8002038:	220f      	movs	r2, #15
 800203a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800203c:	4b23      	ldr	r3, [pc, #140]	@ (80020cc <MX_TIM4_Init+0xc8>)
 800203e:	2200      	movs	r2, #0
 8002040:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002042:	4b22      	ldr	r3, [pc, #136]	@ (80020cc <MX_TIM4_Init+0xc8>)
 8002044:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002048:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800204a:	4b20      	ldr	r3, [pc, #128]	@ (80020cc <MX_TIM4_Init+0xc8>)
 800204c:	2200      	movs	r2, #0
 800204e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002050:	4b1e      	ldr	r3, [pc, #120]	@ (80020cc <MX_TIM4_Init+0xc8>)
 8002052:	2200      	movs	r2, #0
 8002054:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002056:	481d      	ldr	r0, [pc, #116]	@ (80020cc <MX_TIM4_Init+0xc8>)
 8002058:	f006 fab2 	bl	80085c0 <HAL_TIM_Base_Init>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 8002062:	f7ff fc86 	bl	8001972 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002066:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800206a:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800206c:	f107 0320 	add.w	r3, r7, #32
 8002070:	4619      	mov	r1, r3
 8002072:	4816      	ldr	r0, [pc, #88]	@ (80020cc <MX_TIM4_Init+0xc8>)
 8002074:	f006 ffba 	bl	8008fec <HAL_TIM_ConfigClockSource>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800207e:	f7ff fc78 	bl	8001972 <Error_Handler>
  }
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002082:	2300      	movs	r3, #0
 8002084:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002086:	2300      	movs	r3, #0
 8002088:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 10;
 800208a:	230a      	movs	r3, #10
 800208c:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 5;
 800208e:	2305      	movs	r3, #5
 8002090:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim4, &sConfig) != HAL_OK)
 8002092:	f107 0310 	add.w	r3, r7, #16
 8002096:	4619      	mov	r1, r3
 8002098:	480c      	ldr	r0, [pc, #48]	@ (80020cc <MX_TIM4_Init+0xc8>)
 800209a:	f007 fd84 	bl	8009ba6 <HAL_TIMEx_HallSensor_Init>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d001      	beq.n	80020a8 <MX_TIM4_Init+0xa4>
  {
    Error_Handler();
 80020a4:	f7ff fc65 	bl	8001972 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 80020a8:	2350      	movs	r3, #80	@ 0x50
 80020aa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020ac:	2300      	movs	r3, #0
 80020ae:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80020b0:	1d3b      	adds	r3, r7, #4
 80020b2:	4619      	mov	r1, r3
 80020b4:	4805      	ldr	r0, [pc, #20]	@ (80020cc <MX_TIM4_Init+0xc8>)
 80020b6:	f007 ffd1 	bl	800a05c <HAL_TIMEx_MasterConfigSynchronization>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <MX_TIM4_Init+0xc0>
  {
    Error_Handler();
 80020c0:	f7ff fc57 	bl	8001972 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80020c4:	bf00      	nop
 80020c6:	3730      	adds	r7, #48	@ 0x30
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	20000404 	.word	0x20000404
 80020d0:	40000800 	.word	0x40000800

080020d4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b08a      	sub	sp, #40	@ 0x28
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020dc:	f107 0314 	add.w	r3, r7, #20
 80020e0:	2200      	movs	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]
 80020e4:	605a      	str	r2, [r3, #4]
 80020e6:	609a      	str	r2, [r3, #8]
 80020e8:	60da      	str	r2, [r3, #12]
 80020ea:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a30      	ldr	r2, [pc, #192]	@ (80021b4 <HAL_TIM_Base_MspInit+0xe0>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d124      	bne.n	8002140 <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80020f6:	4b30      	ldr	r3, [pc, #192]	@ (80021b8 <HAL_TIM_Base_MspInit+0xe4>)
 80020f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020fa:	4a2f      	ldr	r2, [pc, #188]	@ (80021b8 <HAL_TIM_Base_MspInit+0xe4>)
 80020fc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002100:	6613      	str	r3, [r2, #96]	@ 0x60
 8002102:	4b2d      	ldr	r3, [pc, #180]	@ (80021b8 <HAL_TIM_Base_MspInit+0xe4>)
 8002104:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002106:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800210a:	613b      	str	r3, [r7, #16]
 800210c:	693b      	ldr	r3, [r7, #16]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800210e:	2200      	movs	r2, #0
 8002110:	2100      	movs	r1, #0
 8002112:	2018      	movs	r0, #24
 8002114:	f003 f961 	bl	80053da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002118:	2018      	movs	r0, #24
 800211a:	f003 f978 	bl	800540e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800211e:	2200      	movs	r2, #0
 8002120:	2100      	movs	r1, #0
 8002122:	2019      	movs	r0, #25
 8002124:	f003 f959 	bl	80053da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002128:	2019      	movs	r0, #25
 800212a:	f003 f970 	bl	800540e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800212e:	2200      	movs	r2, #0
 8002130:	2100      	movs	r1, #0
 8002132:	201b      	movs	r0, #27
 8002134:	f003 f951 	bl	80053da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002138:	201b      	movs	r0, #27
 800213a:	f003 f968 	bl	800540e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800213e:	e035      	b.n	80021ac <HAL_TIM_Base_MspInit+0xd8>
  else if(tim_baseHandle->Instance==TIM4)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a1d      	ldr	r2, [pc, #116]	@ (80021bc <HAL_TIM_Base_MspInit+0xe8>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d130      	bne.n	80021ac <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800214a:	4b1b      	ldr	r3, [pc, #108]	@ (80021b8 <HAL_TIM_Base_MspInit+0xe4>)
 800214c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800214e:	4a1a      	ldr	r2, [pc, #104]	@ (80021b8 <HAL_TIM_Base_MspInit+0xe4>)
 8002150:	f043 0304 	orr.w	r3, r3, #4
 8002154:	6593      	str	r3, [r2, #88]	@ 0x58
 8002156:	4b18      	ldr	r3, [pc, #96]	@ (80021b8 <HAL_TIM_Base_MspInit+0xe4>)
 8002158:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800215a:	f003 0304 	and.w	r3, r3, #4
 800215e:	60fb      	str	r3, [r7, #12]
 8002160:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002162:	4b15      	ldr	r3, [pc, #84]	@ (80021b8 <HAL_TIM_Base_MspInit+0xe4>)
 8002164:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002166:	4a14      	ldr	r2, [pc, #80]	@ (80021b8 <HAL_TIM_Base_MspInit+0xe4>)
 8002168:	f043 0302 	orr.w	r3, r3, #2
 800216c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800216e:	4b12      	ldr	r3, [pc, #72]	@ (80021b8 <HAL_TIM_Base_MspInit+0xe4>)
 8002170:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	60bb      	str	r3, [r7, #8]
 8002178:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 800217a:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 800217e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002180:	2302      	movs	r3, #2
 8002182:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002184:	2300      	movs	r3, #0
 8002186:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002188:	2300      	movs	r3, #0
 800218a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800218c:	2302      	movs	r3, #2
 800218e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002190:	f107 0314 	add.w	r3, r7, #20
 8002194:	4619      	mov	r1, r3
 8002196:	480a      	ldr	r0, [pc, #40]	@ (80021c0 <HAL_TIM_Base_MspInit+0xec>)
 8002198:	f004 fb4c 	bl	8006834 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800219c:	2200      	movs	r2, #0
 800219e:	2100      	movs	r1, #0
 80021a0:	201e      	movs	r0, #30
 80021a2:	f003 f91a 	bl	80053da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80021a6:	201e      	movs	r0, #30
 80021a8:	f003 f931 	bl	800540e <HAL_NVIC_EnableIRQ>
}
 80021ac:	bf00      	nop
 80021ae:	3728      	adds	r7, #40	@ 0x28
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	40012c00 	.word	0x40012c00
 80021b8:	40021000 	.word	0x40021000
 80021bc:	40000800 	.word	0x40000800
 80021c0:	48000400 	.word	0x48000400

080021c4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b08a      	sub	sp, #40	@ 0x28
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021cc:	f107 0314 	add.w	r3, r7, #20
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]
 80021d4:	605a      	str	r2, [r3, #4]
 80021d6:	609a      	str	r2, [r3, #8]
 80021d8:	60da      	str	r2, [r3, #12]
 80021da:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a29      	ldr	r2, [pc, #164]	@ (8002288 <HAL_TIM_MspPostInit+0xc4>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d14b      	bne.n	800227e <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021e6:	4b29      	ldr	r3, [pc, #164]	@ (800228c <HAL_TIM_MspPostInit+0xc8>)
 80021e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021ea:	4a28      	ldr	r2, [pc, #160]	@ (800228c <HAL_TIM_MspPostInit+0xc8>)
 80021ec:	f043 0302 	orr.w	r3, r3, #2
 80021f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021f2:	4b26      	ldr	r3, [pc, #152]	@ (800228c <HAL_TIM_MspPostInit+0xc8>)
 80021f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021f6:	f003 0302 	and.w	r3, r3, #2
 80021fa:	613b      	str	r3, [r7, #16]
 80021fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021fe:	4b23      	ldr	r3, [pc, #140]	@ (800228c <HAL_TIM_MspPostInit+0xc8>)
 8002200:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002202:	4a22      	ldr	r2, [pc, #136]	@ (800228c <HAL_TIM_MspPostInit+0xc8>)
 8002204:	f043 0301 	orr.w	r3, r3, #1
 8002208:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800220a:	4b20      	ldr	r3, [pc, #128]	@ (800228c <HAL_TIM_MspPostInit+0xc8>)
 800220c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	60fb      	str	r3, [r7, #12]
 8002214:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002216:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800221a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800221c:	2302      	movs	r3, #2
 800221e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002220:	2300      	movs	r3, #0
 8002222:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002224:	2300      	movs	r3, #0
 8002226:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002228:	2306      	movs	r3, #6
 800222a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800222c:	f107 0314 	add.w	r3, r7, #20
 8002230:	4619      	mov	r1, r3
 8002232:	4817      	ldr	r0, [pc, #92]	@ (8002290 <HAL_TIM_MspPostInit+0xcc>)
 8002234:	f004 fafe 	bl	8006834 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002238:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800223c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800223e:	2302      	movs	r3, #2
 8002240:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002242:	2300      	movs	r3, #0
 8002244:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002246:	2300      	movs	r3, #0
 8002248:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 800224a:	2304      	movs	r3, #4
 800224c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800224e:	f107 0314 	add.w	r3, r7, #20
 8002252:	4619      	mov	r1, r3
 8002254:	480e      	ldr	r0, [pc, #56]	@ (8002290 <HAL_TIM_MspPostInit+0xcc>)
 8002256:	f004 faed 	bl	8006834 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800225a:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 800225e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002260:	2302      	movs	r3, #2
 8002262:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002264:	2300      	movs	r3, #0
 8002266:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002268:	2300      	movs	r3, #0
 800226a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800226c:	2306      	movs	r3, #6
 800226e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002270:	f107 0314 	add.w	r3, r7, #20
 8002274:	4619      	mov	r1, r3
 8002276:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800227a:	f004 fadb 	bl	8006834 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800227e:	bf00      	nop
 8002280:	3728      	adds	r7, #40	@ 0x28
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	40012c00 	.word	0x40012c00
 800228c:	40021000 	.word	0x40021000
 8002290:	48000400 	.word	0x48000400

08002294 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002298:	4b22      	ldr	r3, [pc, #136]	@ (8002324 <MX_USART3_UART_Init+0x90>)
 800229a:	4a23      	ldr	r2, [pc, #140]	@ (8002328 <MX_USART3_UART_Init+0x94>)
 800229c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 800229e:	4b21      	ldr	r3, [pc, #132]	@ (8002324 <MX_USART3_UART_Init+0x90>)
 80022a0:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 80022a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80022a6:	4b1f      	ldr	r3, [pc, #124]	@ (8002324 <MX_USART3_UART_Init+0x90>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80022ac:	4b1d      	ldr	r3, [pc, #116]	@ (8002324 <MX_USART3_UART_Init+0x90>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80022b2:	4b1c      	ldr	r3, [pc, #112]	@ (8002324 <MX_USART3_UART_Init+0x90>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80022b8:	4b1a      	ldr	r3, [pc, #104]	@ (8002324 <MX_USART3_UART_Init+0x90>)
 80022ba:	220c      	movs	r2, #12
 80022bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022be:	4b19      	ldr	r3, [pc, #100]	@ (8002324 <MX_USART3_UART_Init+0x90>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80022c4:	4b17      	ldr	r3, [pc, #92]	@ (8002324 <MX_USART3_UART_Init+0x90>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022ca:	4b16      	ldr	r3, [pc, #88]	@ (8002324 <MX_USART3_UART_Init+0x90>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80022d0:	4b14      	ldr	r3, [pc, #80]	@ (8002324 <MX_USART3_UART_Init+0x90>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022d6:	4b13      	ldr	r3, [pc, #76]	@ (8002324 <MX_USART3_UART_Init+0x90>)
 80022d8:	2200      	movs	r2, #0
 80022da:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80022dc:	4811      	ldr	r0, [pc, #68]	@ (8002324 <MX_USART3_UART_Init+0x90>)
 80022de:	f008 f90e 	bl	800a4fe <HAL_UART_Init>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80022e8:	f7ff fb43 	bl	8001972 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80022ec:	2100      	movs	r1, #0
 80022ee:	480d      	ldr	r0, [pc, #52]	@ (8002324 <MX_USART3_UART_Init+0x90>)
 80022f0:	f009 fb83 	bl	800b9fa <HAL_UARTEx_SetTxFifoThreshold>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80022fa:	f7ff fb3a 	bl	8001972 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80022fe:	2100      	movs	r1, #0
 8002300:	4808      	ldr	r0, [pc, #32]	@ (8002324 <MX_USART3_UART_Init+0x90>)
 8002302:	f009 fbb8 	bl	800ba76 <HAL_UARTEx_SetRxFifoThreshold>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d001      	beq.n	8002310 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800230c:	f7ff fb31 	bl	8001972 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002310:	4804      	ldr	r0, [pc, #16]	@ (8002324 <MX_USART3_UART_Init+0x90>)
 8002312:	f009 fb39 	bl	800b988 <HAL_UARTEx_DisableFifoMode>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800231c:	f7ff fb29 	bl	8001972 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002320:	bf00      	nop
 8002322:	bd80      	pop	{r7, pc}
 8002324:	20000450 	.word	0x20000450
 8002328:	40004800 	.word	0x40004800

0800232c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b09a      	sub	sp, #104	@ 0x68
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002334:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002338:	2200      	movs	r2, #0
 800233a:	601a      	str	r2, [r3, #0]
 800233c:	605a      	str	r2, [r3, #4]
 800233e:	609a      	str	r2, [r3, #8]
 8002340:	60da      	str	r2, [r3, #12]
 8002342:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002344:	f107 0310 	add.w	r3, r7, #16
 8002348:	2244      	movs	r2, #68	@ 0x44
 800234a:	2100      	movs	r1, #0
 800234c:	4618      	mov	r0, r3
 800234e:	f00a fb3f 	bl	800c9d0 <memset>
  if(uartHandle->Instance==USART3)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a37      	ldr	r2, [pc, #220]	@ (8002434 <HAL_UART_MspInit+0x108>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d167      	bne.n	800242c <HAL_UART_MspInit+0x100>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800235c:	2304      	movs	r3, #4
 800235e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002360:	2300      	movs	r3, #0
 8002362:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002364:	f107 0310 	add.w	r3, r7, #16
 8002368:	4618      	mov	r0, r3
 800236a:	f005 faf9 	bl	8007960 <HAL_RCCEx_PeriphCLKConfig>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002374:	f7ff fafd 	bl	8001972 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002378:	4b2f      	ldr	r3, [pc, #188]	@ (8002438 <HAL_UART_MspInit+0x10c>)
 800237a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800237c:	4a2e      	ldr	r2, [pc, #184]	@ (8002438 <HAL_UART_MspInit+0x10c>)
 800237e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002382:	6593      	str	r3, [r2, #88]	@ 0x58
 8002384:	4b2c      	ldr	r3, [pc, #176]	@ (8002438 <HAL_UART_MspInit+0x10c>)
 8002386:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002388:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800238c:	60fb      	str	r3, [r7, #12]
 800238e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002390:	4b29      	ldr	r3, [pc, #164]	@ (8002438 <HAL_UART_MspInit+0x10c>)
 8002392:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002394:	4a28      	ldr	r2, [pc, #160]	@ (8002438 <HAL_UART_MspInit+0x10c>)
 8002396:	f043 0302 	orr.w	r3, r3, #2
 800239a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800239c:	4b26      	ldr	r3, [pc, #152]	@ (8002438 <HAL_UART_MspInit+0x10c>)
 800239e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023a0:	f003 0302 	and.w	r3, r3, #2
 80023a4:	60bb      	str	r3, [r7, #8]
 80023a6:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80023a8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80023ac:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ae:	2302      	movs	r3, #2
 80023b0:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b2:	2300      	movs	r3, #0
 80023b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b6:	2300      	movs	r3, #0
 80023b8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80023ba:	2307      	movs	r3, #7
 80023bc:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023be:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80023c2:	4619      	mov	r1, r3
 80023c4:	481d      	ldr	r0, [pc, #116]	@ (800243c <HAL_UART_MspInit+0x110>)
 80023c6:	f004 fa35 	bl	8006834 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel1;
 80023ca:	4b1d      	ldr	r3, [pc, #116]	@ (8002440 <HAL_UART_MspInit+0x114>)
 80023cc:	4a1d      	ldr	r2, [pc, #116]	@ (8002444 <HAL_UART_MspInit+0x118>)
 80023ce:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80023d0:	4b1b      	ldr	r3, [pc, #108]	@ (8002440 <HAL_UART_MspInit+0x114>)
 80023d2:	221d      	movs	r2, #29
 80023d4:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80023d6:	4b1a      	ldr	r3, [pc, #104]	@ (8002440 <HAL_UART_MspInit+0x114>)
 80023d8:	2210      	movs	r2, #16
 80023da:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023dc:	4b18      	ldr	r3, [pc, #96]	@ (8002440 <HAL_UART_MspInit+0x114>)
 80023de:	2200      	movs	r2, #0
 80023e0:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80023e2:	4b17      	ldr	r3, [pc, #92]	@ (8002440 <HAL_UART_MspInit+0x114>)
 80023e4:	2280      	movs	r2, #128	@ 0x80
 80023e6:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023e8:	4b15      	ldr	r3, [pc, #84]	@ (8002440 <HAL_UART_MspInit+0x114>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023ee:	4b14      	ldr	r3, [pc, #80]	@ (8002440 <HAL_UART_MspInit+0x114>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80023f4:	4b12      	ldr	r3, [pc, #72]	@ (8002440 <HAL_UART_MspInit+0x114>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80023fa:	4b11      	ldr	r3, [pc, #68]	@ (8002440 <HAL_UART_MspInit+0x114>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002400:	480f      	ldr	r0, [pc, #60]	@ (8002440 <HAL_UART_MspInit+0x114>)
 8002402:	f003 fa93 	bl	800592c <HAL_DMA_Init>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d001      	beq.n	8002410 <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 800240c:	f7ff fab1 	bl	8001972 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	4a0b      	ldr	r2, [pc, #44]	@ (8002440 <HAL_UART_MspInit+0x114>)
 8002414:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002416:	4a0a      	ldr	r2, [pc, #40]	@ (8002440 <HAL_UART_MspInit+0x114>)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800241c:	2200      	movs	r2, #0
 800241e:	2100      	movs	r1, #0
 8002420:	2027      	movs	r0, #39	@ 0x27
 8002422:	f002 ffda 	bl	80053da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002426:	2027      	movs	r0, #39	@ 0x27
 8002428:	f002 fff1 	bl	800540e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800242c:	bf00      	nop
 800242e:	3768      	adds	r7, #104	@ 0x68
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	40004800 	.word	0x40004800
 8002438:	40021000 	.word	0x40021000
 800243c:	48000400 	.word	0x48000400
 8002440:	200004e4 	.word	0x200004e4
 8002444:	40020008 	.word	0x40020008

08002448 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002448:	480d      	ldr	r0, [pc, #52]	@ (8002480 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800244a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800244c:	f7ff fcd4 	bl	8001df8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002450:	480c      	ldr	r0, [pc, #48]	@ (8002484 <LoopForever+0x6>)
  ldr r1, =_edata
 8002452:	490d      	ldr	r1, [pc, #52]	@ (8002488 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002454:	4a0d      	ldr	r2, [pc, #52]	@ (800248c <LoopForever+0xe>)
  movs r3, #0
 8002456:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002458:	e002      	b.n	8002460 <LoopCopyDataInit>

0800245a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800245a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800245c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800245e:	3304      	adds	r3, #4

08002460 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002460:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002462:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002464:	d3f9      	bcc.n	800245a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002466:	4a0a      	ldr	r2, [pc, #40]	@ (8002490 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002468:	4c0a      	ldr	r4, [pc, #40]	@ (8002494 <LoopForever+0x16>)
  movs r3, #0
 800246a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800246c:	e001      	b.n	8002472 <LoopFillZerobss>

0800246e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800246e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002470:	3204      	adds	r2, #4

08002472 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002472:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002474:	d3fb      	bcc.n	800246e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8002476:	f00a fab9 	bl	800c9ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800247a:	f7ff f9a9 	bl	80017d0 <main>

0800247e <LoopForever>:

LoopForever:
    b LoopForever
 800247e:	e7fe      	b.n	800247e <LoopForever>
  ldr   r0, =_estack
 8002480:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002484:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002488:	200000f8 	.word	0x200000f8
  ldr r2, =_sidata
 800248c:	0800cd50 	.word	0x0800cd50
  ldr r2, =_sbss
 8002490:	200000f8 	.word	0x200000f8
  ldr r4, =_ebss
 8002494:	200007b8 	.word	0x200007b8

08002498 <COMP4_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002498:	e7fe      	b.n	8002498 <COMP4_IRQHandler>

0800249a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800249a:	b580      	push	{r7, lr}
 800249c:	b082      	sub	sp, #8
 800249e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80024a0:	2300      	movs	r3, #0
 80024a2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024a4:	2003      	movs	r0, #3
 80024a6:	f002 ff8d 	bl	80053c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024aa:	200f      	movs	r0, #15
 80024ac:	f000 f80e 	bl	80024cc <HAL_InitTick>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d002      	beq.n	80024bc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	71fb      	strb	r3, [r7, #7]
 80024ba:	e001      	b.n	80024c0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80024bc:	f7ff fbd0 	bl	8001c60 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80024c0:	79fb      	ldrb	r3, [r7, #7]

}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
	...

080024cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80024d4:	2300      	movs	r3, #0
 80024d6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80024d8:	4b16      	ldr	r3, [pc, #88]	@ (8002534 <HAL_InitTick+0x68>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d022      	beq.n	8002526 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80024e0:	4b15      	ldr	r3, [pc, #84]	@ (8002538 <HAL_InitTick+0x6c>)
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	4b13      	ldr	r3, [pc, #76]	@ (8002534 <HAL_InitTick+0x68>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80024ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80024f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80024f4:	4618      	mov	r0, r3
 80024f6:	f002 ff98 	bl	800542a <HAL_SYSTICK_Config>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d10f      	bne.n	8002520 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2b0f      	cmp	r3, #15
 8002504:	d809      	bhi.n	800251a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002506:	2200      	movs	r2, #0
 8002508:	6879      	ldr	r1, [r7, #4]
 800250a:	f04f 30ff 	mov.w	r0, #4294967295
 800250e:	f002 ff64 	bl	80053da <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002512:	4a0a      	ldr	r2, [pc, #40]	@ (800253c <HAL_InitTick+0x70>)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6013      	str	r3, [r2, #0]
 8002518:	e007      	b.n	800252a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	73fb      	strb	r3, [r7, #15]
 800251e:	e004      	b.n	800252a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	73fb      	strb	r3, [r7, #15]
 8002524:	e001      	b.n	800252a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800252a:	7bfb      	ldrb	r3, [r7, #15]
}
 800252c:	4618      	mov	r0, r3
 800252e:	3710      	adds	r7, #16
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	20000008 	.word	0x20000008
 8002538:	20000000 	.word	0x20000000
 800253c:	20000004 	.word	0x20000004

08002540 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002544:	4b05      	ldr	r3, [pc, #20]	@ (800255c <HAL_IncTick+0x1c>)
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	4b05      	ldr	r3, [pc, #20]	@ (8002560 <HAL_IncTick+0x20>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4413      	add	r3, r2
 800254e:	4a03      	ldr	r2, [pc, #12]	@ (800255c <HAL_IncTick+0x1c>)
 8002550:	6013      	str	r3, [r2, #0]
}
 8002552:	bf00      	nop
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr
 800255c:	20000544 	.word	0x20000544
 8002560:	20000008 	.word	0x20000008

08002564 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  return uwTick;
 8002568:	4b03      	ldr	r3, [pc, #12]	@ (8002578 <HAL_GetTick+0x14>)
 800256a:	681b      	ldr	r3, [r3, #0]
}
 800256c:	4618      	mov	r0, r3
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	20000544 	.word	0x20000544

0800257c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	431a      	orrs	r2, r3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	609a      	str	r2, [r3, #8]
}
 8002596:	bf00      	nop
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr

080025a2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80025a2:	b480      	push	{r7}
 80025a4:	b083      	sub	sp, #12
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	6078      	str	r0, [r7, #4]
 80025aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	431a      	orrs	r2, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	609a      	str	r2, [r3, #8]
}
 80025bc:	bf00      	nop
 80025be:	370c      	adds	r7, #12
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80025d8:	4618      	mov	r0, r3
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b087      	sub	sp, #28
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	607a      	str	r2, [r7, #4]
 80025f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	3360      	adds	r3, #96	@ 0x60
 80025f6:	461a      	mov	r2, r3
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	4413      	add	r3, r2
 80025fe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	4b08      	ldr	r3, [pc, #32]	@ (8002628 <LL_ADC_SetOffset+0x44>)
 8002606:	4013      	ands	r3, r2
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800260e:	683a      	ldr	r2, [r7, #0]
 8002610:	430a      	orrs	r2, r1
 8002612:	4313      	orrs	r3, r2
 8002614:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800261c:	bf00      	nop
 800261e:	371c      	adds	r7, #28
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr
 8002628:	03fff000 	.word	0x03fff000

0800262c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800262c:	b480      	push	{r7}
 800262e:	b085      	sub	sp, #20
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	3360      	adds	r3, #96	@ 0x60
 800263a:	461a      	mov	r2, r3
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	4413      	add	r3, r2
 8002642:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800264c:	4618      	mov	r0, r3
 800264e:	3714      	adds	r7, #20
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002658:	b480      	push	{r7}
 800265a:	b087      	sub	sp, #28
 800265c:	af00      	add	r7, sp, #0
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	60b9      	str	r1, [r7, #8]
 8002662:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	3360      	adds	r3, #96	@ 0x60
 8002668:	461a      	mov	r2, r3
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	4413      	add	r3, r2
 8002670:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	431a      	orrs	r2, r3
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002682:	bf00      	nop
 8002684:	371c      	adds	r7, #28
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr

0800268e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800268e:	b480      	push	{r7}
 8002690:	b087      	sub	sp, #28
 8002692:	af00      	add	r7, sp, #0
 8002694:	60f8      	str	r0, [r7, #12]
 8002696:	60b9      	str	r1, [r7, #8]
 8002698:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	3360      	adds	r3, #96	@ 0x60
 800269e:	461a      	mov	r2, r3
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	4413      	add	r3, r2
 80026a6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	431a      	orrs	r2, r3
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80026b8:	bf00      	nop
 80026ba:	371c      	adds	r7, #28
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b087      	sub	sp, #28
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	3360      	adds	r3, #96	@ 0x60
 80026d4:	461a      	mov	r2, r3
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	4413      	add	r3, r2
 80026dc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	431a      	orrs	r2, r3
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80026ee:	bf00      	nop
 80026f0:	371c      	adds	r7, #28
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr

080026fa <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80026fa:	b480      	push	{r7}
 80026fc:	b083      	sub	sp, #12
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
 8002702:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	695b      	ldr	r3, [r3, #20]
 8002708:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	431a      	orrs	r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	615a      	str	r2, [r3, #20]
}
 8002714:	bf00      	nop
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002730:	2b00      	cmp	r3, #0
 8002732:	d101      	bne.n	8002738 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002734:	2301      	movs	r3, #1
 8002736:	e000      	b.n	800273a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002738:	2300      	movs	r3, #0
}
 800273a:	4618      	mov	r0, r3
 800273c:	370c      	adds	r7, #12
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr

08002746 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002746:	b480      	push	{r7}
 8002748:	b087      	sub	sp, #28
 800274a:	af00      	add	r7, sp, #0
 800274c:	60f8      	str	r0, [r7, #12]
 800274e:	60b9      	str	r1, [r7, #8]
 8002750:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	3330      	adds	r3, #48	@ 0x30
 8002756:	461a      	mov	r2, r3
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	0a1b      	lsrs	r3, r3, #8
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	f003 030c 	and.w	r3, r3, #12
 8002762:	4413      	add	r3, r2
 8002764:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	f003 031f 	and.w	r3, r3, #31
 8002770:	211f      	movs	r1, #31
 8002772:	fa01 f303 	lsl.w	r3, r1, r3
 8002776:	43db      	mvns	r3, r3
 8002778:	401a      	ands	r2, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	0e9b      	lsrs	r3, r3, #26
 800277e:	f003 011f 	and.w	r1, r3, #31
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	f003 031f 	and.w	r3, r3, #31
 8002788:	fa01 f303 	lsl.w	r3, r1, r3
 800278c:	431a      	orrs	r2, r3
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002792:	bf00      	nop
 8002794:	371c      	adds	r7, #28
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr

0800279e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800279e:	b480      	push	{r7}
 80027a0:	b083      	sub	sp, #12
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027aa:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d101      	bne.n	80027b6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80027b2:	2301      	movs	r3, #1
 80027b4:	e000      	b.n	80027b8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80027b6:	2300      	movs	r3, #0
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	370c      	adds	r7, #12
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b087      	sub	sp, #28
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	3314      	adds	r3, #20
 80027d4:	461a      	mov	r2, r3
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	0e5b      	lsrs	r3, r3, #25
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	f003 0304 	and.w	r3, r3, #4
 80027e0:	4413      	add	r3, r2
 80027e2:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	0d1b      	lsrs	r3, r3, #20
 80027ec:	f003 031f 	and.w	r3, r3, #31
 80027f0:	2107      	movs	r1, #7
 80027f2:	fa01 f303 	lsl.w	r3, r1, r3
 80027f6:	43db      	mvns	r3, r3
 80027f8:	401a      	ands	r2, r3
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	0d1b      	lsrs	r3, r3, #20
 80027fe:	f003 031f 	and.w	r3, r3, #31
 8002802:	6879      	ldr	r1, [r7, #4]
 8002804:	fa01 f303 	lsl.w	r3, r1, r3
 8002808:	431a      	orrs	r2, r3
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800280e:	bf00      	nop
 8002810:	371c      	adds	r7, #28
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
	...

0800281c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800281c:	b480      	push	{r7}
 800281e:	b085      	sub	sp, #20
 8002820:	af00      	add	r7, sp, #0
 8002822:	60f8      	str	r0, [r7, #12]
 8002824:	60b9      	str	r1, [r7, #8]
 8002826:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002834:	43db      	mvns	r3, r3
 8002836:	401a      	ands	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f003 0318 	and.w	r3, r3, #24
 800283e:	4908      	ldr	r1, [pc, #32]	@ (8002860 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002840:	40d9      	lsrs	r1, r3
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	400b      	ands	r3, r1
 8002846:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800284a:	431a      	orrs	r2, r3
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002852:	bf00      	nop
 8002854:	3714      	adds	r7, #20
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	0007ffff 	.word	0x0007ffff

08002864 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	f003 031f 	and.w	r3, r3, #31
}
 8002874:	4618      	mov	r0, r3
 8002876:	370c      	adds	r7, #12
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr

08002880 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002890:	4618      	mov	r0, r3
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80028ac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	6093      	str	r3, [r2, #8]
}
 80028b4:	bf00      	nop
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80028d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80028d4:	d101      	bne.n	80028da <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80028d6:	2301      	movs	r3, #1
 80028d8:	e000      	b.n	80028dc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80028da:	2300      	movs	r3, #0
}
 80028dc:	4618      	mov	r0, r3
 80028de:	370c      	adds	r7, #12
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80028f8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80028fc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002904:	bf00      	nop
 8002906:	370c      	adds	r7, #12
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr

08002910 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002920:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002924:	d101      	bne.n	800292a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002926:	2301      	movs	r3, #1
 8002928:	e000      	b.n	800292c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800292a:	2300      	movs	r3, #0
}
 800292c:	4618      	mov	r0, r3
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002948:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800294c:	f043 0201 	orr.w	r2, r3, #1
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002954:	bf00      	nop
 8002956:	370c      	adds	r7, #12
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr

08002960 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002970:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002974:	f043 0202 	orr.w	r2, r3, #2
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800297c:	bf00      	nop
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr

08002988 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f003 0301 	and.w	r3, r3, #1
 8002998:	2b01      	cmp	r3, #1
 800299a:	d101      	bne.n	80029a0 <LL_ADC_IsEnabled+0x18>
 800299c:	2301      	movs	r3, #1
 800299e:	e000      	b.n	80029a2 <LL_ADC_IsEnabled+0x1a>
 80029a0:	2300      	movs	r3, #0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	370c      	adds	r7, #12
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr

080029ae <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80029ae:	b480      	push	{r7}
 80029b0:	b083      	sub	sp, #12
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f003 0302 	and.w	r3, r3, #2
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d101      	bne.n	80029c6 <LL_ADC_IsDisableOngoing+0x18>
 80029c2:	2301      	movs	r3, #1
 80029c4:	e000      	b.n	80029c8 <LL_ADC_IsDisableOngoing+0x1a>
 80029c6:	2300      	movs	r3, #0
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	370c      	adds	r7, #12
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr

080029d4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	f003 0304 	and.w	r3, r3, #4
 80029e4:	2b04      	cmp	r3, #4
 80029e6:	d101      	bne.n	80029ec <LL_ADC_REG_IsConversionOngoing+0x18>
 80029e8:	2301      	movs	r3, #1
 80029ea:	e000      	b.n	80029ee <LL_ADC_REG_IsConversionOngoing+0x1a>
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	370c      	adds	r7, #12
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr

080029fa <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80029fa:	b480      	push	{r7}
 80029fc:	b083      	sub	sp, #12
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	f003 0308 	and.w	r3, r3, #8
 8002a0a:	2b08      	cmp	r3, #8
 8002a0c:	d101      	bne.n	8002a12 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e000      	b.n	8002a14 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002a12:	2300      	movs	r3, #0
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	370c      	adds	r7, #12
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr

08002a20 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002a20:	b590      	push	{r4, r7, lr}
 8002a22:	b089      	sub	sp, #36	@ 0x24
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d101      	bne.n	8002a3a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e167      	b.n	8002d0a <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	695b      	ldr	r3, [r3, #20]
 8002a3e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d109      	bne.n	8002a5c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f7fe fb8b 	bl	8001164 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7ff ff2d 	bl	80028c0 <LL_ADC_IsDeepPowerDownEnabled>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d004      	beq.n	8002a76 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7ff ff13 	bl	800289c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7ff ff48 	bl	8002910 <LL_ADC_IsInternalRegulatorEnabled>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d115      	bne.n	8002ab2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f7ff ff2c 	bl	80028e8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a90:	4ba0      	ldr	r3, [pc, #640]	@ (8002d14 <HAL_ADC_Init+0x2f4>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	099b      	lsrs	r3, r3, #6
 8002a96:	4aa0      	ldr	r2, [pc, #640]	@ (8002d18 <HAL_ADC_Init+0x2f8>)
 8002a98:	fba2 2303 	umull	r2, r3, r2, r3
 8002a9c:	099b      	lsrs	r3, r3, #6
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	005b      	lsls	r3, r3, #1
 8002aa2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002aa4:	e002      	b.n	8002aac <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	3b01      	subs	r3, #1
 8002aaa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d1f9      	bne.n	8002aa6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7ff ff2a 	bl	8002910 <LL_ADC_IsInternalRegulatorEnabled>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d10d      	bne.n	8002ade <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ac6:	f043 0210 	orr.w	r2, r3, #16
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ad2:	f043 0201 	orr.w	r2, r3, #1
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7ff ff76 	bl	80029d4 <LL_ADC_REG_IsConversionOngoing>
 8002ae8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aee:	f003 0310 	and.w	r3, r3, #16
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	f040 8100 	bne.w	8002cf8 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	f040 80fc 	bne.w	8002cf8 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b04:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002b08:	f043 0202 	orr.w	r2, r3, #2
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7ff ff37 	bl	8002988 <LL_ADC_IsEnabled>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d111      	bne.n	8002b44 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b20:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002b24:	f7ff ff30 	bl	8002988 <LL_ADC_IsEnabled>
 8002b28:	4604      	mov	r4, r0
 8002b2a:	487c      	ldr	r0, [pc, #496]	@ (8002d1c <HAL_ADC_Init+0x2fc>)
 8002b2c:	f7ff ff2c 	bl	8002988 <LL_ADC_IsEnabled>
 8002b30:	4603      	mov	r3, r0
 8002b32:	4323      	orrs	r3, r4
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d105      	bne.n	8002b44 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	4878      	ldr	r0, [pc, #480]	@ (8002d20 <HAL_ADC_Init+0x300>)
 8002b40:	f7ff fd1c 	bl	800257c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	7f5b      	ldrb	r3, [r3, #29]
 8002b48:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002b4e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002b54:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002b5a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002b62:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002b64:	4313      	orrs	r3, r2
 8002b66:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d106      	bne.n	8002b80 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b76:	3b01      	subs	r3, #1
 8002b78:	045b      	lsls	r3, r3, #17
 8002b7a:	69ba      	ldr	r2, [r7, #24]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d009      	beq.n	8002b9c <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b8c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b94:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002b96:	69ba      	ldr	r2, [r7, #24]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	68da      	ldr	r2, [r3, #12]
 8002ba2:	4b60      	ldr	r3, [pc, #384]	@ (8002d24 <HAL_ADC_Init+0x304>)
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	6812      	ldr	r2, [r2, #0]
 8002baa:	69b9      	ldr	r1, [r7, #24]
 8002bac:	430b      	orrs	r3, r1
 8002bae:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7ff ff15 	bl	80029fa <LL_ADC_INJ_IsConversionOngoing>
 8002bd0:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d16d      	bne.n	8002cb4 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d16a      	bne.n	8002cb4 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002be2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002bea:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002bec:	4313      	orrs	r3, r2
 8002bee:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002bfa:	f023 0302 	bic.w	r3, r3, #2
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	6812      	ldr	r2, [r2, #0]
 8002c02:	69b9      	ldr	r1, [r7, #24]
 8002c04:	430b      	orrs	r3, r1
 8002c06:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	691b      	ldr	r3, [r3, #16]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d017      	beq.n	8002c40 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	691a      	ldr	r2, [r3, #16]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002c1e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002c28:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002c2c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	6911      	ldr	r1, [r2, #16]
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	6812      	ldr	r2, [r2, #0]
 8002c38:	430b      	orrs	r3, r1
 8002c3a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002c3e:	e013      	b.n	8002c68 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	691a      	ldr	r2, [r3, #16]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002c4e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	6812      	ldr	r2, [r2, #0]
 8002c5c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002c60:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002c64:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d118      	bne.n	8002ca4 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	691b      	ldr	r3, [r3, #16]
 8002c78:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002c7c:	f023 0304 	bic.w	r3, r3, #4
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002c88:	4311      	orrs	r1, r2
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002c8e:	4311      	orrs	r1, r2
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002c94:	430a      	orrs	r2, r1
 8002c96:	431a      	orrs	r2, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f042 0201 	orr.w	r2, r2, #1
 8002ca0:	611a      	str	r2, [r3, #16]
 8002ca2:	e007      	b.n	8002cb4 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	691a      	ldr	r2, [r3, #16]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f022 0201 	bic.w	r2, r2, #1
 8002cb2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	695b      	ldr	r3, [r3, #20]
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d10c      	bne.n	8002cd6 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cc2:	f023 010f 	bic.w	r1, r3, #15
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6a1b      	ldr	r3, [r3, #32]
 8002cca:	1e5a      	subs	r2, r3, #1
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	430a      	orrs	r2, r1
 8002cd2:	631a      	str	r2, [r3, #48]	@ 0x30
 8002cd4:	e007      	b.n	8002ce6 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f022 020f 	bic.w	r2, r2, #15
 8002ce4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cea:	f023 0303 	bic.w	r3, r3, #3
 8002cee:	f043 0201 	orr.w	r2, r3, #1
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002cf6:	e007      	b.n	8002d08 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cfc:	f043 0210 	orr.w	r2, r3, #16
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002d08:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3724      	adds	r7, #36	@ 0x24
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd90      	pop	{r4, r7, pc}
 8002d12:	bf00      	nop
 8002d14:	20000000 	.word	0x20000000
 8002d18:	053e2d63 	.word	0x053e2d63
 8002d1c:	50000100 	.word	0x50000100
 8002d20:	50000300 	.word	0x50000300
 8002d24:	fff04007 	.word	0xfff04007

08002d28 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b08a      	sub	sp, #40	@ 0x28
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002d30:	2300      	movs	r3, #0
 8002d32:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d44:	4883      	ldr	r0, [pc, #524]	@ (8002f54 <HAL_ADC_IRQHandler+0x22c>)
 8002d46:	f7ff fd8d 	bl	8002864 <LL_ADC_GetMultimode>
 8002d4a:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d017      	beq.n	8002d86 <HAL_ADC_IRQHandler+0x5e>
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	f003 0302 	and.w	r3, r3, #2
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d012      	beq.n	8002d86 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d64:	f003 0310 	and.w	r3, r3, #16
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d105      	bne.n	8002d78 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d70:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f001 fa9d 	bl	80042b8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	2202      	movs	r2, #2
 8002d84:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	f003 0304 	and.w	r3, r3, #4
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d004      	beq.n	8002d9a <HAL_ADC_IRQHandler+0x72>
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	f003 0304 	and.w	r3, r3, #4
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d10a      	bne.n	8002db0 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	f000 8085 	beq.w	8002eb0 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	f003 0308 	and.w	r3, r3, #8
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d07f      	beq.n	8002eb0 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002db4:	f003 0310 	and.w	r3, r3, #16
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d105      	bne.n	8002dc8 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dc0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7ff fca7 	bl	8002720 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d064      	beq.n	8002ea2 <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a5e      	ldr	r2, [pc, #376]	@ (8002f58 <HAL_ADC_IRQHandler+0x230>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d002      	beq.n	8002de8 <HAL_ADC_IRQHandler+0xc0>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	e001      	b.n	8002dec <HAL_ADC_IRQHandler+0xc4>
 8002de8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	6812      	ldr	r2, [r2, #0]
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d008      	beq.n	8002e06 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d005      	beq.n	8002e06 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	2b05      	cmp	r3, #5
 8002dfe:	d002      	beq.n	8002e06 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	2b09      	cmp	r3, #9
 8002e04:	d104      	bne.n	8002e10 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	623b      	str	r3, [r7, #32]
 8002e0e:	e00d      	b.n	8002e2c <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a50      	ldr	r2, [pc, #320]	@ (8002f58 <HAL_ADC_IRQHandler+0x230>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d002      	beq.n	8002e20 <HAL_ADC_IRQHandler+0xf8>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	e001      	b.n	8002e24 <HAL_ADC_IRQHandler+0xfc>
 8002e20:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002e24:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002e2c:	6a3b      	ldr	r3, [r7, #32]
 8002e2e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d135      	bne.n	8002ea2 <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0308 	and.w	r3, r3, #8
 8002e40:	2b08      	cmp	r3, #8
 8002e42:	d12e      	bne.n	8002ea2 <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7ff fdc3 	bl	80029d4 <LL_ADC_REG_IsConversionOngoing>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d11a      	bne.n	8002e8a <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	685a      	ldr	r2, [r3, #4]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f022 020c 	bic.w	r2, r2, #12
 8002e62:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e68:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e74:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d112      	bne.n	8002ea2 <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e80:	f043 0201 	orr.w	r2, r3, #1
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002e88:	e00b      	b.n	8002ea2 <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e8e:	f043 0210 	orr.w	r2, r3, #16
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e9a:	f043 0201 	orr.w	r2, r3, #1
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f000 f95a 	bl	800315c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	220c      	movs	r2, #12
 8002eae:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	f003 0320 	and.w	r3, r3, #32
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d004      	beq.n	8002ec4 <HAL_ADC_IRQHandler+0x19c>
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	f003 0320 	and.w	r3, r3, #32
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d10b      	bne.n	8002edc <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	f000 809e 	beq.w	800300c <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	f000 8098 	beq.w	800300c <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ee0:	f003 0310 	and.w	r3, r3, #16
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d105      	bne.n	8002ef4 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eec:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f7ff fc50 	bl	800279e <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002efe:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4618      	mov	r0, r3
 8002f06:	f7ff fc0b 	bl	8002720 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002f0a:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a11      	ldr	r2, [pc, #68]	@ (8002f58 <HAL_ADC_IRQHandler+0x230>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d002      	beq.n	8002f1c <HAL_ADC_IRQHandler+0x1f4>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	e001      	b.n	8002f20 <HAL_ADC_IRQHandler+0x1f8>
 8002f1c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	6812      	ldr	r2, [r2, #0]
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d008      	beq.n	8002f3a <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d005      	beq.n	8002f3a <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	2b06      	cmp	r3, #6
 8002f32:	d002      	beq.n	8002f3a <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	2b07      	cmp	r3, #7
 8002f38:	d104      	bne.n	8002f44 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	623b      	str	r3, [r7, #32]
 8002f42:	e011      	b.n	8002f68 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a03      	ldr	r2, [pc, #12]	@ (8002f58 <HAL_ADC_IRQHandler+0x230>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d006      	beq.n	8002f5c <HAL_ADC_IRQHandler+0x234>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	e005      	b.n	8002f60 <HAL_ADC_IRQHandler+0x238>
 8002f54:	50000300 	.word	0x50000300
 8002f58:	50000100 	.word	0x50000100
 8002f5c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002f60:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d047      	beq.n	8002ffe <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002f6e:	6a3b      	ldr	r3, [r7, #32]
 8002f70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d007      	beq.n	8002f88 <HAL_ADC_IRQHandler+0x260>
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d03f      	beq.n	8002ffe <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002f7e:	6a3b      	ldr	r3, [r7, #32]
 8002f80:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d13a      	bne.n	8002ffe <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f92:	2b40      	cmp	r3, #64	@ 0x40
 8002f94:	d133      	bne.n	8002ffe <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002f96:	6a3b      	ldr	r3, [r7, #32]
 8002f98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d12e      	bne.n	8002ffe <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7ff fd28 	bl	80029fa <LL_ADC_INJ_IsConversionOngoing>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d11a      	bne.n	8002fe6 <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	685a      	ldr	r2, [r3, #4]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002fbe:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fc4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d112      	bne.n	8002ffe <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fdc:	f043 0201 	orr.w	r2, r3, #1
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002fe4:	e00b      	b.n	8002ffe <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fea:	f043 0210 	orr.w	r2, r3, #16
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ff6:	f043 0201 	orr.w	r2, r3, #1
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f009 f86e 	bl	800c0e0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2260      	movs	r2, #96	@ 0x60
 800300a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003012:	2b00      	cmp	r3, #0
 8003014:	d011      	beq.n	800303a <HAL_ADC_IRQHandler+0x312>
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800301c:	2b00      	cmp	r3, #0
 800301e:	d00c      	beq.n	800303a <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003024:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f000 f89f 	bl	8003170 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2280      	movs	r2, #128	@ 0x80
 8003038:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003040:	2b00      	cmp	r3, #0
 8003042:	d012      	beq.n	800306a <HAL_ADC_IRQHandler+0x342>
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800304a:	2b00      	cmp	r3, #0
 800304c:	d00d      	beq.n	800306a <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003052:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f001 f918 	bl	8004290 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003068:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003070:	2b00      	cmp	r3, #0
 8003072:	d012      	beq.n	800309a <HAL_ADC_IRQHandler+0x372>
 8003074:	69bb      	ldr	r3, [r7, #24]
 8003076:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800307a:	2b00      	cmp	r3, #0
 800307c:	d00d      	beq.n	800309a <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003082:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f001 f90a 	bl	80042a4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003098:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	f003 0310 	and.w	r3, r3, #16
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d036      	beq.n	8003112 <HAL_ADC_IRQHandler+0x3ea>
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	f003 0310 	and.w	r3, r3, #16
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d031      	beq.n	8003112 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d102      	bne.n	80030bc <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 80030b6:	2301      	movs	r3, #1
 80030b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80030ba:	e014      	b.n	80030e6 <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d008      	beq.n	80030d4 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80030c2:	4825      	ldr	r0, [pc, #148]	@ (8003158 <HAL_ADC_IRQHandler+0x430>)
 80030c4:	f7ff fbdc 	bl	8002880 <LL_ADC_GetMultiDMATransfer>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d00b      	beq.n	80030e6 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 80030ce:	2301      	movs	r3, #1
 80030d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80030d2:	e008      	b.n	80030e6 <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	f003 0301 	and.w	r3, r3, #1
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d001      	beq.n	80030e6 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 80030e2:	2301      	movs	r3, #1
 80030e4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80030e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d10e      	bne.n	800310a <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030f0:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030fc:	f043 0202 	orr.w	r2, r3, #2
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f000 f83d 	bl	8003184 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2210      	movs	r2, #16
 8003110:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003118:	2b00      	cmp	r3, #0
 800311a:	d018      	beq.n	800314e <HAL_ADC_IRQHandler+0x426>
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003122:	2b00      	cmp	r3, #0
 8003124:	d013      	beq.n	800314e <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800312a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003136:	f043 0208 	orr.w	r2, r3, #8
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003146:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f001 f897 	bl	800427c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800314e:	bf00      	nop
 8003150:	3728      	adds	r7, #40	@ 0x28
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	50000300 	.word	0x50000300

0800315c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003164:	bf00      	nop
 8003166:	370c      	adds	r7, #12
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr

08003170 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003178:	bf00      	nop
 800317a:	370c      	adds	r7, #12
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr

08003184 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800318c:	bf00      	nop
 800318e:	370c      	adds	r7, #12
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr

08003198 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b0b6      	sub	sp, #216	@ 0xd8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031a2:	2300      	movs	r3, #0
 80031a4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80031a8:	2300      	movs	r3, #0
 80031aa:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d101      	bne.n	80031ba <HAL_ADC_ConfigChannel+0x22>
 80031b6:	2302      	movs	r3, #2
 80031b8:	e3c8      	b.n	800394c <HAL_ADC_ConfigChannel+0x7b4>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2201      	movs	r2, #1
 80031be:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7ff fc04 	bl	80029d4 <LL_ADC_REG_IsConversionOngoing>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	f040 83ad 	bne.w	800392e <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6818      	ldr	r0, [r3, #0]
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	6859      	ldr	r1, [r3, #4]
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	461a      	mov	r2, r3
 80031e2:	f7ff fab0 	bl	8002746 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4618      	mov	r0, r3
 80031ec:	f7ff fbf2 	bl	80029d4 <LL_ADC_REG_IsConversionOngoing>
 80031f0:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7ff fbfe 	bl	80029fa <LL_ADC_INJ_IsConversionOngoing>
 80031fe:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003202:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003206:	2b00      	cmp	r3, #0
 8003208:	f040 81d9 	bne.w	80035be <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800320c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003210:	2b00      	cmp	r3, #0
 8003212:	f040 81d4 	bne.w	80035be <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800321e:	d10f      	bne.n	8003240 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6818      	ldr	r0, [r3, #0]
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2200      	movs	r2, #0
 800322a:	4619      	mov	r1, r3
 800322c:	f7ff faca 	bl	80027c4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003238:	4618      	mov	r0, r3
 800323a:	f7ff fa5e 	bl	80026fa <LL_ADC_SetSamplingTimeCommonConfig>
 800323e:	e00e      	b.n	800325e <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6818      	ldr	r0, [r3, #0]
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	6819      	ldr	r1, [r3, #0]
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	461a      	mov	r2, r3
 800324e:	f7ff fab9 	bl	80027c4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2100      	movs	r1, #0
 8003258:	4618      	mov	r0, r3
 800325a:	f7ff fa4e 	bl	80026fa <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	695a      	ldr	r2, [r3, #20]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	08db      	lsrs	r3, r3, #3
 800326a:	f003 0303 	and.w	r3, r3, #3
 800326e:	005b      	lsls	r3, r3, #1
 8003270:	fa02 f303 	lsl.w	r3, r2, r3
 8003274:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	691b      	ldr	r3, [r3, #16]
 800327c:	2b04      	cmp	r3, #4
 800327e:	d022      	beq.n	80032c6 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6818      	ldr	r0, [r3, #0]
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	6919      	ldr	r1, [r3, #16]
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003290:	f7ff f9a8 	bl	80025e4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6818      	ldr	r0, [r3, #0]
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	6919      	ldr	r1, [r3, #16]
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	699b      	ldr	r3, [r3, #24]
 80032a0:	461a      	mov	r2, r3
 80032a2:	f7ff f9f4 	bl	800268e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6818      	ldr	r0, [r3, #0]
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d102      	bne.n	80032bc <HAL_ADC_ConfigChannel+0x124>
 80032b6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80032ba:	e000      	b.n	80032be <HAL_ADC_ConfigChannel+0x126>
 80032bc:	2300      	movs	r3, #0
 80032be:	461a      	mov	r2, r3
 80032c0:	f7ff fa00 	bl	80026c4 <LL_ADC_SetOffsetSaturation>
 80032c4:	e17b      	b.n	80035be <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2100      	movs	r1, #0
 80032cc:	4618      	mov	r0, r3
 80032ce:	f7ff f9ad 	bl	800262c <LL_ADC_GetOffsetChannel>
 80032d2:	4603      	mov	r3, r0
 80032d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d10a      	bne.n	80032f2 <HAL_ADC_ConfigChannel+0x15a>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2100      	movs	r1, #0
 80032e2:	4618      	mov	r0, r3
 80032e4:	f7ff f9a2 	bl	800262c <LL_ADC_GetOffsetChannel>
 80032e8:	4603      	mov	r3, r0
 80032ea:	0e9b      	lsrs	r3, r3, #26
 80032ec:	f003 021f 	and.w	r2, r3, #31
 80032f0:	e01e      	b.n	8003330 <HAL_ADC_ConfigChannel+0x198>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2100      	movs	r1, #0
 80032f8:	4618      	mov	r0, r3
 80032fa:	f7ff f997 	bl	800262c <LL_ADC_GetOffsetChannel>
 80032fe:	4603      	mov	r3, r0
 8003300:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003304:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003308:	fa93 f3a3 	rbit	r3, r3
 800330c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003310:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003314:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003318:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d101      	bne.n	8003324 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8003320:	2320      	movs	r3, #32
 8003322:	e004      	b.n	800332e <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8003324:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003328:	fab3 f383 	clz	r3, r3
 800332c:	b2db      	uxtb	r3, r3
 800332e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003338:	2b00      	cmp	r3, #0
 800333a:	d105      	bne.n	8003348 <HAL_ADC_ConfigChannel+0x1b0>
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	0e9b      	lsrs	r3, r3, #26
 8003342:	f003 031f 	and.w	r3, r3, #31
 8003346:	e018      	b.n	800337a <HAL_ADC_ConfigChannel+0x1e2>
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003350:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003354:	fa93 f3a3 	rbit	r3, r3
 8003358:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800335c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003360:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003364:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003368:	2b00      	cmp	r3, #0
 800336a:	d101      	bne.n	8003370 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 800336c:	2320      	movs	r3, #32
 800336e:	e004      	b.n	800337a <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8003370:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003374:	fab3 f383 	clz	r3, r3
 8003378:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800337a:	429a      	cmp	r2, r3
 800337c:	d106      	bne.n	800338c <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	2200      	movs	r2, #0
 8003384:	2100      	movs	r1, #0
 8003386:	4618      	mov	r0, r3
 8003388:	f7ff f966 	bl	8002658 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	2101      	movs	r1, #1
 8003392:	4618      	mov	r0, r3
 8003394:	f7ff f94a 	bl	800262c <LL_ADC_GetOffsetChannel>
 8003398:	4603      	mov	r3, r0
 800339a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d10a      	bne.n	80033b8 <HAL_ADC_ConfigChannel+0x220>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2101      	movs	r1, #1
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7ff f93f 	bl	800262c <LL_ADC_GetOffsetChannel>
 80033ae:	4603      	mov	r3, r0
 80033b0:	0e9b      	lsrs	r3, r3, #26
 80033b2:	f003 021f 	and.w	r2, r3, #31
 80033b6:	e01e      	b.n	80033f6 <HAL_ADC_ConfigChannel+0x25e>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2101      	movs	r1, #1
 80033be:	4618      	mov	r0, r3
 80033c0:	f7ff f934 	bl	800262c <LL_ADC_GetOffsetChannel>
 80033c4:	4603      	mov	r3, r0
 80033c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80033ce:	fa93 f3a3 	rbit	r3, r3
 80033d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80033d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80033da:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80033de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d101      	bne.n	80033ea <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80033e6:	2320      	movs	r3, #32
 80033e8:	e004      	b.n	80033f4 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80033ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80033ee:	fab3 f383 	clz	r3, r3
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d105      	bne.n	800340e <HAL_ADC_ConfigChannel+0x276>
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	0e9b      	lsrs	r3, r3, #26
 8003408:	f003 031f 	and.w	r3, r3, #31
 800340c:	e018      	b.n	8003440 <HAL_ADC_ConfigChannel+0x2a8>
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003416:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800341a:	fa93 f3a3 	rbit	r3, r3
 800341e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003422:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003426:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800342a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800342e:	2b00      	cmp	r3, #0
 8003430:	d101      	bne.n	8003436 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8003432:	2320      	movs	r3, #32
 8003434:	e004      	b.n	8003440 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8003436:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800343a:	fab3 f383 	clz	r3, r3
 800343e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003440:	429a      	cmp	r2, r3
 8003442:	d106      	bne.n	8003452 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2200      	movs	r2, #0
 800344a:	2101      	movs	r1, #1
 800344c:	4618      	mov	r0, r3
 800344e:	f7ff f903 	bl	8002658 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2102      	movs	r1, #2
 8003458:	4618      	mov	r0, r3
 800345a:	f7ff f8e7 	bl	800262c <LL_ADC_GetOffsetChannel>
 800345e:	4603      	mov	r3, r0
 8003460:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003464:	2b00      	cmp	r3, #0
 8003466:	d10a      	bne.n	800347e <HAL_ADC_ConfigChannel+0x2e6>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2102      	movs	r1, #2
 800346e:	4618      	mov	r0, r3
 8003470:	f7ff f8dc 	bl	800262c <LL_ADC_GetOffsetChannel>
 8003474:	4603      	mov	r3, r0
 8003476:	0e9b      	lsrs	r3, r3, #26
 8003478:	f003 021f 	and.w	r2, r3, #31
 800347c:	e01e      	b.n	80034bc <HAL_ADC_ConfigChannel+0x324>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	2102      	movs	r1, #2
 8003484:	4618      	mov	r0, r3
 8003486:	f7ff f8d1 	bl	800262c <LL_ADC_GetOffsetChannel>
 800348a:	4603      	mov	r3, r0
 800348c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003490:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003494:	fa93 f3a3 	rbit	r3, r3
 8003498:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800349c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80034a0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80034a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d101      	bne.n	80034b0 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80034ac:	2320      	movs	r3, #32
 80034ae:	e004      	b.n	80034ba <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80034b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80034b4:	fab3 f383 	clz	r3, r3
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d105      	bne.n	80034d4 <HAL_ADC_ConfigChannel+0x33c>
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	0e9b      	lsrs	r3, r3, #26
 80034ce:	f003 031f 	and.w	r3, r3, #31
 80034d2:	e016      	b.n	8003502 <HAL_ADC_ConfigChannel+0x36a>
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80034e0:	fa93 f3a3 	rbit	r3, r3
 80034e4:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80034e6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80034e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80034ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d101      	bne.n	80034f8 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80034f4:	2320      	movs	r3, #32
 80034f6:	e004      	b.n	8003502 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80034f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80034fc:	fab3 f383 	clz	r3, r3
 8003500:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003502:	429a      	cmp	r2, r3
 8003504:	d106      	bne.n	8003514 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	2200      	movs	r2, #0
 800350c:	2102      	movs	r1, #2
 800350e:	4618      	mov	r0, r3
 8003510:	f7ff f8a2 	bl	8002658 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	2103      	movs	r1, #3
 800351a:	4618      	mov	r0, r3
 800351c:	f7ff f886 	bl	800262c <LL_ADC_GetOffsetChannel>
 8003520:	4603      	mov	r3, r0
 8003522:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003526:	2b00      	cmp	r3, #0
 8003528:	d10a      	bne.n	8003540 <HAL_ADC_ConfigChannel+0x3a8>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2103      	movs	r1, #3
 8003530:	4618      	mov	r0, r3
 8003532:	f7ff f87b 	bl	800262c <LL_ADC_GetOffsetChannel>
 8003536:	4603      	mov	r3, r0
 8003538:	0e9b      	lsrs	r3, r3, #26
 800353a:	f003 021f 	and.w	r2, r3, #31
 800353e:	e017      	b.n	8003570 <HAL_ADC_ConfigChannel+0x3d8>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2103      	movs	r1, #3
 8003546:	4618      	mov	r0, r3
 8003548:	f7ff f870 	bl	800262c <LL_ADC_GetOffsetChannel>
 800354c:	4603      	mov	r3, r0
 800354e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003550:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003552:	fa93 f3a3 	rbit	r3, r3
 8003556:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003558:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800355a:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800355c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800355e:	2b00      	cmp	r3, #0
 8003560:	d101      	bne.n	8003566 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8003562:	2320      	movs	r3, #32
 8003564:	e003      	b.n	800356e <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8003566:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003568:	fab3 f383 	clz	r3, r3
 800356c:	b2db      	uxtb	r3, r3
 800356e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003578:	2b00      	cmp	r3, #0
 800357a:	d105      	bne.n	8003588 <HAL_ADC_ConfigChannel+0x3f0>
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	0e9b      	lsrs	r3, r3, #26
 8003582:	f003 031f 	and.w	r3, r3, #31
 8003586:	e011      	b.n	80035ac <HAL_ADC_ConfigChannel+0x414>
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800358e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003590:	fa93 f3a3 	rbit	r3, r3
 8003594:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003596:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003598:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800359a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800359c:	2b00      	cmp	r3, #0
 800359e:	d101      	bne.n	80035a4 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80035a0:	2320      	movs	r3, #32
 80035a2:	e003      	b.n	80035ac <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80035a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80035a6:	fab3 f383 	clz	r3, r3
 80035aa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d106      	bne.n	80035be <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2200      	movs	r2, #0
 80035b6:	2103      	movs	r1, #3
 80035b8:	4618      	mov	r0, r3
 80035ba:	f7ff f84d 	bl	8002658 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4618      	mov	r0, r3
 80035c4:	f7ff f9e0 	bl	8002988 <LL_ADC_IsEnabled>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	f040 8140 	bne.w	8003850 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6818      	ldr	r0, [r3, #0]
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	6819      	ldr	r1, [r3, #0]
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	461a      	mov	r2, r3
 80035de:	f7ff f91d 	bl	800281c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	4a8f      	ldr	r2, [pc, #572]	@ (8003824 <HAL_ADC_ConfigChannel+0x68c>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	f040 8131 	bne.w	8003850 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d10b      	bne.n	8003616 <HAL_ADC_ConfigChannel+0x47e>
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	0e9b      	lsrs	r3, r3, #26
 8003604:	3301      	adds	r3, #1
 8003606:	f003 031f 	and.w	r3, r3, #31
 800360a:	2b09      	cmp	r3, #9
 800360c:	bf94      	ite	ls
 800360e:	2301      	movls	r3, #1
 8003610:	2300      	movhi	r3, #0
 8003612:	b2db      	uxtb	r3, r3
 8003614:	e019      	b.n	800364a <HAL_ADC_ConfigChannel+0x4b2>
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800361c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800361e:	fa93 f3a3 	rbit	r3, r3
 8003622:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003624:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003626:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003628:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800362a:	2b00      	cmp	r3, #0
 800362c:	d101      	bne.n	8003632 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 800362e:	2320      	movs	r3, #32
 8003630:	e003      	b.n	800363a <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8003632:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003634:	fab3 f383 	clz	r3, r3
 8003638:	b2db      	uxtb	r3, r3
 800363a:	3301      	adds	r3, #1
 800363c:	f003 031f 	and.w	r3, r3, #31
 8003640:	2b09      	cmp	r3, #9
 8003642:	bf94      	ite	ls
 8003644:	2301      	movls	r3, #1
 8003646:	2300      	movhi	r3, #0
 8003648:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800364a:	2b00      	cmp	r3, #0
 800364c:	d079      	beq.n	8003742 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003656:	2b00      	cmp	r3, #0
 8003658:	d107      	bne.n	800366a <HAL_ADC_ConfigChannel+0x4d2>
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	0e9b      	lsrs	r3, r3, #26
 8003660:	3301      	adds	r3, #1
 8003662:	069b      	lsls	r3, r3, #26
 8003664:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003668:	e015      	b.n	8003696 <HAL_ADC_ConfigChannel+0x4fe>
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003670:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003672:	fa93 f3a3 	rbit	r3, r3
 8003676:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003678:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800367a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800367c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800367e:	2b00      	cmp	r3, #0
 8003680:	d101      	bne.n	8003686 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8003682:	2320      	movs	r3, #32
 8003684:	e003      	b.n	800368e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8003686:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003688:	fab3 f383 	clz	r3, r3
 800368c:	b2db      	uxtb	r3, r3
 800368e:	3301      	adds	r3, #1
 8003690:	069b      	lsls	r3, r3, #26
 8003692:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d109      	bne.n	80036b6 <HAL_ADC_ConfigChannel+0x51e>
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	0e9b      	lsrs	r3, r3, #26
 80036a8:	3301      	adds	r3, #1
 80036aa:	f003 031f 	and.w	r3, r3, #31
 80036ae:	2101      	movs	r1, #1
 80036b0:	fa01 f303 	lsl.w	r3, r1, r3
 80036b4:	e017      	b.n	80036e6 <HAL_ADC_ConfigChannel+0x54e>
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036be:	fa93 f3a3 	rbit	r3, r3
 80036c2:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80036c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80036c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d101      	bne.n	80036d2 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80036ce:	2320      	movs	r3, #32
 80036d0:	e003      	b.n	80036da <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80036d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80036d4:	fab3 f383 	clz	r3, r3
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	3301      	adds	r3, #1
 80036dc:	f003 031f 	and.w	r3, r3, #31
 80036e0:	2101      	movs	r1, #1
 80036e2:	fa01 f303 	lsl.w	r3, r1, r3
 80036e6:	ea42 0103 	orr.w	r1, r2, r3
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d10a      	bne.n	800370c <HAL_ADC_ConfigChannel+0x574>
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	0e9b      	lsrs	r3, r3, #26
 80036fc:	3301      	adds	r3, #1
 80036fe:	f003 021f 	and.w	r2, r3, #31
 8003702:	4613      	mov	r3, r2
 8003704:	005b      	lsls	r3, r3, #1
 8003706:	4413      	add	r3, r2
 8003708:	051b      	lsls	r3, r3, #20
 800370a:	e018      	b.n	800373e <HAL_ADC_ConfigChannel+0x5a6>
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003712:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003714:	fa93 f3a3 	rbit	r3, r3
 8003718:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800371a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800371c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800371e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003720:	2b00      	cmp	r3, #0
 8003722:	d101      	bne.n	8003728 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8003724:	2320      	movs	r3, #32
 8003726:	e003      	b.n	8003730 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8003728:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800372a:	fab3 f383 	clz	r3, r3
 800372e:	b2db      	uxtb	r3, r3
 8003730:	3301      	adds	r3, #1
 8003732:	f003 021f 	and.w	r2, r3, #31
 8003736:	4613      	mov	r3, r2
 8003738:	005b      	lsls	r3, r3, #1
 800373a:	4413      	add	r3, r2
 800373c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800373e:	430b      	orrs	r3, r1
 8003740:	e081      	b.n	8003846 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800374a:	2b00      	cmp	r3, #0
 800374c:	d107      	bne.n	800375e <HAL_ADC_ConfigChannel+0x5c6>
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	0e9b      	lsrs	r3, r3, #26
 8003754:	3301      	adds	r3, #1
 8003756:	069b      	lsls	r3, r3, #26
 8003758:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800375c:	e015      	b.n	800378a <HAL_ADC_ConfigChannel+0x5f2>
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003764:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003766:	fa93 f3a3 	rbit	r3, r3
 800376a:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800376c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800376e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003772:	2b00      	cmp	r3, #0
 8003774:	d101      	bne.n	800377a <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8003776:	2320      	movs	r3, #32
 8003778:	e003      	b.n	8003782 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 800377a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800377c:	fab3 f383 	clz	r3, r3
 8003780:	b2db      	uxtb	r3, r3
 8003782:	3301      	adds	r3, #1
 8003784:	069b      	lsls	r3, r3, #26
 8003786:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003792:	2b00      	cmp	r3, #0
 8003794:	d109      	bne.n	80037aa <HAL_ADC_ConfigChannel+0x612>
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	0e9b      	lsrs	r3, r3, #26
 800379c:	3301      	adds	r3, #1
 800379e:	f003 031f 	and.w	r3, r3, #31
 80037a2:	2101      	movs	r1, #1
 80037a4:	fa01 f303 	lsl.w	r3, r1, r3
 80037a8:	e017      	b.n	80037da <HAL_ADC_ConfigChannel+0x642>
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b0:	6a3b      	ldr	r3, [r7, #32]
 80037b2:	fa93 f3a3 	rbit	r3, r3
 80037b6:	61fb      	str	r3, [r7, #28]
  return result;
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80037bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d101      	bne.n	80037c6 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80037c2:	2320      	movs	r3, #32
 80037c4:	e003      	b.n	80037ce <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80037c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037c8:	fab3 f383 	clz	r3, r3
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	3301      	adds	r3, #1
 80037d0:	f003 031f 	and.w	r3, r3, #31
 80037d4:	2101      	movs	r1, #1
 80037d6:	fa01 f303 	lsl.w	r3, r1, r3
 80037da:	ea42 0103 	orr.w	r1, r2, r3
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d10d      	bne.n	8003806 <HAL_ADC_ConfigChannel+0x66e>
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	0e9b      	lsrs	r3, r3, #26
 80037f0:	3301      	adds	r3, #1
 80037f2:	f003 021f 	and.w	r2, r3, #31
 80037f6:	4613      	mov	r3, r2
 80037f8:	005b      	lsls	r3, r3, #1
 80037fa:	4413      	add	r3, r2
 80037fc:	3b1e      	subs	r3, #30
 80037fe:	051b      	lsls	r3, r3, #20
 8003800:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003804:	e01e      	b.n	8003844 <HAL_ADC_ConfigChannel+0x6ac>
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	fa93 f3a3 	rbit	r3, r3
 8003812:	613b      	str	r3, [r7, #16]
  return result;
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d104      	bne.n	8003828 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 800381e:	2320      	movs	r3, #32
 8003820:	e006      	b.n	8003830 <HAL_ADC_ConfigChannel+0x698>
 8003822:	bf00      	nop
 8003824:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003828:	69bb      	ldr	r3, [r7, #24]
 800382a:	fab3 f383 	clz	r3, r3
 800382e:	b2db      	uxtb	r3, r3
 8003830:	3301      	adds	r3, #1
 8003832:	f003 021f 	and.w	r2, r3, #31
 8003836:	4613      	mov	r3, r2
 8003838:	005b      	lsls	r3, r3, #1
 800383a:	4413      	add	r3, r2
 800383c:	3b1e      	subs	r3, #30
 800383e:	051b      	lsls	r3, r3, #20
 8003840:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003844:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003846:	683a      	ldr	r2, [r7, #0]
 8003848:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800384a:	4619      	mov	r1, r3
 800384c:	f7fe ffba 	bl	80027c4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	4b3f      	ldr	r3, [pc, #252]	@ (8003954 <HAL_ADC_ConfigChannel+0x7bc>)
 8003856:	4013      	ands	r3, r2
 8003858:	2b00      	cmp	r3, #0
 800385a:	d071      	beq.n	8003940 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800385c:	483e      	ldr	r0, [pc, #248]	@ (8003958 <HAL_ADC_ConfigChannel+0x7c0>)
 800385e:	f7fe feb3 	bl	80025c8 <LL_ADC_GetCommonPathInternalCh>
 8003862:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a3c      	ldr	r2, [pc, #240]	@ (800395c <HAL_ADC_ConfigChannel+0x7c4>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d004      	beq.n	800387a <HAL_ADC_ConfigChannel+0x6e2>
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a3a      	ldr	r2, [pc, #232]	@ (8003960 <HAL_ADC_ConfigChannel+0x7c8>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d127      	bne.n	80038ca <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800387a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800387e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d121      	bne.n	80038ca <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800388e:	d157      	bne.n	8003940 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003890:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003894:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003898:	4619      	mov	r1, r3
 800389a:	482f      	ldr	r0, [pc, #188]	@ (8003958 <HAL_ADC_ConfigChannel+0x7c0>)
 800389c:	f7fe fe81 	bl	80025a2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80038a0:	4b30      	ldr	r3, [pc, #192]	@ (8003964 <HAL_ADC_ConfigChannel+0x7cc>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	099b      	lsrs	r3, r3, #6
 80038a6:	4a30      	ldr	r2, [pc, #192]	@ (8003968 <HAL_ADC_ConfigChannel+0x7d0>)
 80038a8:	fba2 2303 	umull	r2, r3, r2, r3
 80038ac:	099b      	lsrs	r3, r3, #6
 80038ae:	1c5a      	adds	r2, r3, #1
 80038b0:	4613      	mov	r3, r2
 80038b2:	005b      	lsls	r3, r3, #1
 80038b4:	4413      	add	r3, r2
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80038ba:	e002      	b.n	80038c2 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	3b01      	subs	r3, #1
 80038c0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d1f9      	bne.n	80038bc <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80038c8:	e03a      	b.n	8003940 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a27      	ldr	r2, [pc, #156]	@ (800396c <HAL_ADC_ConfigChannel+0x7d4>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d113      	bne.n	80038fc <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80038d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80038d8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d10d      	bne.n	80038fc <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a22      	ldr	r2, [pc, #136]	@ (8003970 <HAL_ADC_ConfigChannel+0x7d8>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d02a      	beq.n	8003940 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80038ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80038ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80038f2:	4619      	mov	r1, r3
 80038f4:	4818      	ldr	r0, [pc, #96]	@ (8003958 <HAL_ADC_ConfigChannel+0x7c0>)
 80038f6:	f7fe fe54 	bl	80025a2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80038fa:	e021      	b.n	8003940 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a1c      	ldr	r2, [pc, #112]	@ (8003974 <HAL_ADC_ConfigChannel+0x7dc>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d11c      	bne.n	8003940 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003906:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800390a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d116      	bne.n	8003940 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a16      	ldr	r2, [pc, #88]	@ (8003970 <HAL_ADC_ConfigChannel+0x7d8>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d011      	beq.n	8003940 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800391c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003920:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003924:	4619      	mov	r1, r3
 8003926:	480c      	ldr	r0, [pc, #48]	@ (8003958 <HAL_ADC_ConfigChannel+0x7c0>)
 8003928:	f7fe fe3b 	bl	80025a2 <LL_ADC_SetCommonPathInternalCh>
 800392c:	e008      	b.n	8003940 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003932:	f043 0220 	orr.w	r2, r3, #32
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003948:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800394c:	4618      	mov	r0, r3
 800394e:	37d8      	adds	r7, #216	@ 0xd8
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	80080000 	.word	0x80080000
 8003958:	50000300 	.word	0x50000300
 800395c:	c3210000 	.word	0xc3210000
 8003960:	90c00010 	.word	0x90c00010
 8003964:	20000000 	.word	0x20000000
 8003968:	053e2d63 	.word	0x053e2d63
 800396c:	c7520000 	.word	0xc7520000
 8003970:	50000100 	.word	0x50000100
 8003974:	cb840000 	.word	0xcb840000

08003978 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003980:	2300      	movs	r3, #0
 8003982:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4618      	mov	r0, r3
 800398a:	f7fe fffd 	bl	8002988 <LL_ADC_IsEnabled>
 800398e:	4603      	mov	r3, r0
 8003990:	2b00      	cmp	r3, #0
 8003992:	d169      	bne.n	8003a68 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	689a      	ldr	r2, [r3, #8]
 800399a:	4b36      	ldr	r3, [pc, #216]	@ (8003a74 <ADC_Enable+0xfc>)
 800399c:	4013      	ands	r3, r2
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00d      	beq.n	80039be <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039a6:	f043 0210 	orr.w	r2, r3, #16
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039b2:	f043 0201 	orr.w	r2, r3, #1
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e055      	b.n	8003a6a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4618      	mov	r0, r3
 80039c4:	f7fe ffb8 	bl	8002938 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80039c8:	482b      	ldr	r0, [pc, #172]	@ (8003a78 <ADC_Enable+0x100>)
 80039ca:	f7fe fdfd 	bl	80025c8 <LL_ADC_GetCommonPathInternalCh>
 80039ce:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80039d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d013      	beq.n	8003a00 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80039d8:	4b28      	ldr	r3, [pc, #160]	@ (8003a7c <ADC_Enable+0x104>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	099b      	lsrs	r3, r3, #6
 80039de:	4a28      	ldr	r2, [pc, #160]	@ (8003a80 <ADC_Enable+0x108>)
 80039e0:	fba2 2303 	umull	r2, r3, r2, r3
 80039e4:	099b      	lsrs	r3, r3, #6
 80039e6:	1c5a      	adds	r2, r3, #1
 80039e8:	4613      	mov	r3, r2
 80039ea:	005b      	lsls	r3, r3, #1
 80039ec:	4413      	add	r3, r2
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80039f2:	e002      	b.n	80039fa <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	3b01      	subs	r3, #1
 80039f8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d1f9      	bne.n	80039f4 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003a00:	f7fe fdb0 	bl	8002564 <HAL_GetTick>
 8003a04:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a06:	e028      	b.n	8003a5a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f7fe ffbb 	bl	8002988 <LL_ADC_IsEnabled>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d104      	bne.n	8003a22 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f7fe ff8b 	bl	8002938 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003a22:	f7fe fd9f 	bl	8002564 <HAL_GetTick>
 8003a26:	4602      	mov	r2, r0
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	d914      	bls.n	8003a5a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0301 	and.w	r3, r3, #1
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d00d      	beq.n	8003a5a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a42:	f043 0210 	orr.w	r2, r3, #16
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a4e:	f043 0201 	orr.w	r2, r3, #1
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e007      	b.n	8003a6a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0301 	and.w	r3, r3, #1
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d1cf      	bne.n	8003a08 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3710      	adds	r7, #16
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	8000003f 	.word	0x8000003f
 8003a78:	50000300 	.word	0x50000300
 8003a7c:	20000000 	.word	0x20000000
 8003a80:	053e2d63 	.word	0x053e2d63

08003a84 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4618      	mov	r0, r3
 8003a92:	f7fe ff8c 	bl	80029ae <LL_ADC_IsDisableOngoing>
 8003a96:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f7fe ff73 	bl	8002988 <LL_ADC_IsEnabled>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d047      	beq.n	8003b38 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d144      	bne.n	8003b38 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	f003 030d 	and.w	r3, r3, #13
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d10c      	bne.n	8003ad6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f7fe ff4d 	bl	8002960 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	2203      	movs	r2, #3
 8003acc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003ace:	f7fe fd49 	bl	8002564 <HAL_GetTick>
 8003ad2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003ad4:	e029      	b.n	8003b2a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ada:	f043 0210 	orr.w	r2, r3, #16
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ae6:	f043 0201 	orr.w	r2, r3, #1
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e023      	b.n	8003b3a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003af2:	f7fe fd37 	bl	8002564 <HAL_GetTick>
 8003af6:	4602      	mov	r2, r0
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d914      	bls.n	8003b2a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f003 0301 	and.w	r3, r3, #1
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d00d      	beq.n	8003b2a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b12:	f043 0210 	orr.w	r2, r3, #16
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b1e:	f043 0201 	orr.w	r2, r3, #1
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e007      	b.n	8003b3a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f003 0301 	and.w	r3, r3, #1
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d1dc      	bne.n	8003af2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3710      	adds	r7, #16
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}

08003b42 <LL_ADC_SetCommonPathInternalCh>:
{
 8003b42:	b480      	push	{r7}
 8003b44:	b083      	sub	sp, #12
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	6078      	str	r0, [r7, #4]
 8003b4a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	431a      	orrs	r2, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	609a      	str	r2, [r3, #8]
}
 8003b5c:	bf00      	nop
 8003b5e:	370c      	adds	r7, #12
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <LL_ADC_GetCommonPathInternalCh>:
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	370c      	adds	r7, #12
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <LL_ADC_SetOffset>:
{
 8003b84:	b480      	push	{r7}
 8003b86:	b087      	sub	sp, #28
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	60b9      	str	r1, [r7, #8]
 8003b8e:	607a      	str	r2, [r7, #4]
 8003b90:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	3360      	adds	r3, #96	@ 0x60
 8003b96:	461a      	mov	r2, r3
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	4413      	add	r3, r2
 8003b9e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	4b08      	ldr	r3, [pc, #32]	@ (8003bc8 <LL_ADC_SetOffset+0x44>)
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8003bae:	683a      	ldr	r2, [r7, #0]
 8003bb0:	430a      	orrs	r2, r1
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	601a      	str	r2, [r3, #0]
}
 8003bbc:	bf00      	nop
 8003bbe:	371c      	adds	r7, #28
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr
 8003bc8:	03fff000 	.word	0x03fff000

08003bcc <LL_ADC_GetOffsetChannel>:
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b085      	sub	sp, #20
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	3360      	adds	r3, #96	@ 0x60
 8003bda:	461a      	mov	r2, r3
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	4413      	add	r3, r2
 8003be2:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3714      	adds	r7, #20
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <LL_ADC_SetOffsetState>:
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b087      	sub	sp, #28
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	3360      	adds	r3, #96	@ 0x60
 8003c08:	461a      	mov	r2, r3
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	4413      	add	r3, r2
 8003c10:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	431a      	orrs	r2, r3
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	601a      	str	r2, [r3, #0]
}
 8003c22:	bf00      	nop
 8003c24:	371c      	adds	r7, #28
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr

08003c2e <LL_ADC_SetOffsetSign>:
{
 8003c2e:	b480      	push	{r7}
 8003c30:	b087      	sub	sp, #28
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	60f8      	str	r0, [r7, #12]
 8003c36:	60b9      	str	r1, [r7, #8]
 8003c38:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	3360      	adds	r3, #96	@ 0x60
 8003c3e:	461a      	mov	r2, r3
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	4413      	add	r3, r2
 8003c46:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	431a      	orrs	r2, r3
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	601a      	str	r2, [r3, #0]
}
 8003c58:	bf00      	nop
 8003c5a:	371c      	adds	r7, #28
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr

08003c64 <LL_ADC_SetOffsetSaturation>:
{
 8003c64:	b480      	push	{r7}
 8003c66:	b087      	sub	sp, #28
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	60b9      	str	r1, [r7, #8]
 8003c6e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	3360      	adds	r3, #96	@ 0x60
 8003c74:	461a      	mov	r2, r3
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	4413      	add	r3, r2
 8003c7c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	431a      	orrs	r2, r3
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	601a      	str	r2, [r3, #0]
}
 8003c8e:	bf00      	nop
 8003c90:	371c      	adds	r7, #28
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr

08003c9a <LL_ADC_SetSamplingTimeCommonConfig>:
{
 8003c9a:	b480      	push	{r7}
 8003c9c:	b083      	sub	sp, #12
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
 8003ca2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	695b      	ldr	r3, [r3, #20]
 8003ca8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	431a      	orrs	r2, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	615a      	str	r2, [r3, #20]
}
 8003cb4:	bf00      	nop
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <LL_ADC_INJ_GetTrigAuto>:
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <LL_ADC_SetChannelSamplingTime>:
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b087      	sub	sp, #28
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	60f8      	str	r0, [r7, #12]
 8003ce4:	60b9      	str	r1, [r7, #8]
 8003ce6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	3314      	adds	r3, #20
 8003cec:	461a      	mov	r2, r3
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	0e5b      	lsrs	r3, r3, #25
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	f003 0304 	and.w	r3, r3, #4
 8003cf8:	4413      	add	r3, r2
 8003cfa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	0d1b      	lsrs	r3, r3, #20
 8003d04:	f003 031f 	and.w	r3, r3, #31
 8003d08:	2107      	movs	r1, #7
 8003d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d0e:	43db      	mvns	r3, r3
 8003d10:	401a      	ands	r2, r3
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	0d1b      	lsrs	r3, r3, #20
 8003d16:	f003 031f 	and.w	r3, r3, #31
 8003d1a:	6879      	ldr	r1, [r7, #4]
 8003d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d20:	431a      	orrs	r2, r3
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	601a      	str	r2, [r3, #0]
}
 8003d26:	bf00      	nop
 8003d28:	371c      	adds	r7, #28
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr
	...

08003d34 <LL_ADC_SetChannelSingleDiff>:
{
 8003d34:	b480      	push	{r7}
 8003d36:	b085      	sub	sp, #20
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	60b9      	str	r1, [r7, #8]
 8003d3e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d4c:	43db      	mvns	r3, r3
 8003d4e:	401a      	ands	r2, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f003 0318 	and.w	r3, r3, #24
 8003d56:	4908      	ldr	r1, [pc, #32]	@ (8003d78 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003d58:	40d9      	lsrs	r1, r3
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	400b      	ands	r3, r1
 8003d5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d62:	431a      	orrs	r2, r3
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 8003d6a:	bf00      	nop
 8003d6c:	3714      	adds	r7, #20
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr
 8003d76:	bf00      	nop
 8003d78:	0007ffff 	.word	0x0007ffff

08003d7c <LL_ADC_GetMultimode>:
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	f003 031f 	and.w	r3, r3, #31
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	370c      	adds	r7, #12
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr

08003d98 <LL_ADC_IsEnabled>:
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	f003 0301 	and.w	r3, r3, #1
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d101      	bne.n	8003db0 <LL_ADC_IsEnabled+0x18>
 8003dac:	2301      	movs	r3, #1
 8003dae:	e000      	b.n	8003db2 <LL_ADC_IsEnabled+0x1a>
 8003db0:	2300      	movs	r3, #0
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	370c      	adds	r7, #12
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr

08003dbe <LL_ADC_StartCalibration>:
{
 8003dbe:	b480      	push	{r7}
 8003dc0:	b083      	sub	sp, #12
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
 8003dc6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8003dd0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003dd4:	683a      	ldr	r2, [r7, #0]
 8003dd6:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	609a      	str	r2, [r3, #8]
}
 8003de4:	bf00      	nop
 8003de6:	370c      	adds	r7, #12
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr

08003df0 <LL_ADC_IsCalibrationOnGoing>:
{
 8003df0:	b480      	push	{r7}
 8003df2:	b083      	sub	sp, #12
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003e00:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003e04:	d101      	bne.n	8003e0a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003e06:	2301      	movs	r3, #1
 8003e08:	e000      	b.n	8003e0c <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003e0a:	2300      	movs	r3, #0
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	370c      	adds	r7, #12
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <LL_ADC_REG_IsConversionOngoing>:
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	f003 0304 	and.w	r3, r3, #4
 8003e28:	2b04      	cmp	r3, #4
 8003e2a:	d101      	bne.n	8003e30 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e000      	b.n	8003e32 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003e30:	2300      	movs	r3, #0
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	370c      	adds	r7, #12
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr

08003e3e <LL_ADC_INJ_StartConversion>:
{
 8003e3e:	b480      	push	{r7}
 8003e40:	b083      	sub	sp, #12
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003e4e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003e52:	f043 0208 	orr.w	r2, r3, #8
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	609a      	str	r2, [r3, #8]
}
 8003e5a:	bf00      	nop
 8003e5c:	370c      	adds	r7, #12
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr

08003e66 <LL_ADC_INJ_IsConversionOngoing>:
{
 8003e66:	b480      	push	{r7}
 8003e68:	b083      	sub	sp, #12
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f003 0308 	and.w	r3, r3, #8
 8003e76:	2b08      	cmp	r3, #8
 8003e78:	d101      	bne.n	8003e7e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e000      	b.n	8003e80 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003e7e:	2300      	movs	r3, #0
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b084      	sub	sp, #16
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003e96:	2300      	movs	r3, #0
 8003e98:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d101      	bne.n	8003ea8 <HAL_ADCEx_Calibration_Start+0x1c>
 8003ea4:	2302      	movs	r3, #2
 8003ea6:	e04d      	b.n	8003f44 <HAL_ADCEx_Calibration_Start+0xb8>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f7ff fde7 	bl	8003a84 <ADC_Disable>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003eba:	7bfb      	ldrb	r3, [r7, #15]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d136      	bne.n	8003f2e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ec4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003ec8:	f023 0302 	bic.w	r3, r3, #2
 8003ecc:	f043 0202 	orr.w	r2, r3, #2
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	6839      	ldr	r1, [r7, #0]
 8003eda:	4618      	mov	r0, r3
 8003edc:	f7ff ff6f 	bl	8003dbe <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003ee0:	e014      	b.n	8003f0c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	3301      	adds	r3, #1
 8003ee6:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	4a18      	ldr	r2, [pc, #96]	@ (8003f4c <HAL_ADCEx_Calibration_Start+0xc0>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d90d      	bls.n	8003f0c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ef4:	f023 0312 	bic.w	r3, r3, #18
 8003ef8:	f043 0210 	orr.w	r2, r3, #16
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e01b      	b.n	8003f44 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4618      	mov	r0, r3
 8003f12:	f7ff ff6d 	bl	8003df0 <LL_ADC_IsCalibrationOnGoing>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d1e2      	bne.n	8003ee2 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f20:	f023 0303 	bic.w	r3, r3, #3
 8003f24:	f043 0201 	orr.w	r2, r3, #1
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003f2c:	e005      	b.n	8003f3a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f32:	f043 0210 	orr.w	r2, r3, #16
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3710      	adds	r7, #16
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	0004de01 	.word	0x0004de01

08003f50 <HAL_ADCEx_InjectedStart>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef *hadc)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b086      	sub	sp, #24
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003f58:	4853      	ldr	r0, [pc, #332]	@ (80040a8 <HAL_ADCEx_InjectedStart+0x158>)
 8003f5a:	f7ff ff0f 	bl	8003d7c <LL_ADC_GetMultimode>
 8003f5e:	6178      	str	r0, [r7, #20]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4618      	mov	r0, r3
 8003f66:	f7ff ff7e 	bl	8003e66 <LL_ADC_INJ_IsConversionOngoing>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d001      	beq.n	8003f74 <HAL_ADCEx_InjectedStart+0x24>
  {
    return HAL_BUSY;
 8003f70:	2302      	movs	r3, #2
 8003f72:	e094      	b.n	800409e <HAL_ADCEx_InjectedStart+0x14e>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003f7e:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f86:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d10a      	bne.n	8003fa4 <HAL_ADCEx_InjectedStart+0x54>
        && (tmp_config_injected_queue == 0UL)
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d107      	bne.n	8003fa4 <HAL_ADCEx_InjectedStart+0x54>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f98:	f043 0220 	orr.w	r2, r3, #32
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e07c      	b.n	800409e <HAL_ADCEx_InjectedStart+0x14e>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d101      	bne.n	8003fb2 <HAL_ADCEx_InjectedStart+0x62>
 8003fae:	2302      	movs	r3, #2
 8003fb0:	e075      	b.n	800409e <HAL_ADCEx_InjectedStart+0x14e>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f7ff fcdc 	bl	8003978 <ADC_Enable>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003fc4:	7bfb      	ldrb	r3, [r7, #15]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d164      	bne.n	8004094 <HAL_ADCEx_InjectedStart+0x144>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d006      	beq.n	8003fe4 <HAL_ADCEx_InjectedStart+0x94>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fda:	f023 0208 	bic.w	r2, r3, #8
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	661a      	str	r2, [r3, #96]	@ 0x60
 8003fe2:	e002      	b.n	8003fea <HAL_ADCEx_InjectedStart+0x9a>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fee:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003ff2:	f023 0301 	bic.w	r3, r3, #1
 8003ff6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a2a      	ldr	r2, [pc, #168]	@ (80040ac <HAL_ADCEx_InjectedStart+0x15c>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d002      	beq.n	800400e <HAL_ADCEx_InjectedStart+0xbe>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	e001      	b.n	8004012 <HAL_ADCEx_InjectedStart+0xc2>
 800400e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	6812      	ldr	r2, [r2, #0]
 8004016:	4293      	cmp	r3, r2
 8004018:	d002      	beq.n	8004020 <HAL_ADCEx_InjectedStart+0xd0>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d105      	bne.n	800402c <HAL_ADCEx_InjectedStart+0xdc>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004024:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2260      	movs	r2, #96	@ 0x60
 8004032:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a1a      	ldr	r2, [pc, #104]	@ (80040ac <HAL_ADCEx_InjectedStart+0x15c>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d002      	beq.n	800404c <HAL_ADCEx_InjectedStart+0xfc>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	e001      	b.n	8004050 <HAL_ADCEx_InjectedStart+0x100>
 800404c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	6812      	ldr	r2, [r2, #0]
 8004054:	4293      	cmp	r3, r2
 8004056:	d008      	beq.n	800406a <HAL_ADCEx_InjectedStart+0x11a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d005      	beq.n	800406a <HAL_ADCEx_InjectedStart+0x11a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	2b06      	cmp	r3, #6
 8004062:	d002      	beq.n	800406a <HAL_ADCEx_InjectedStart+0x11a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	2b07      	cmp	r3, #7
 8004068:	d10d      	bne.n	8004086 <HAL_ADCEx_InjectedStart+0x136>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4618      	mov	r0, r3
 8004070:	f7ff fe26 	bl	8003cc0 <LL_ADC_INJ_GetTrigAuto>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d110      	bne.n	800409c <HAL_ADCEx_InjectedStart+0x14c>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4618      	mov	r0, r3
 8004080:	f7ff fedd 	bl	8003e3e <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8004084:	e00a      	b.n	800409c <HAL_ADCEx_InjectedStart+0x14c>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800408a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004092:	e003      	b.n	800409c <HAL_ADCEx_InjectedStart+0x14c>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 800409c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3718      	adds	r7, #24
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	50000300 	.word	0x50000300
 80040ac:	50000100 	.word	0x50000100

080040b0 <HAL_ADCEx_InjectedStart_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef *hadc)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b086      	sub	sp, #24
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80040b8:	486e      	ldr	r0, [pc, #440]	@ (8004274 <HAL_ADCEx_InjectedStart_IT+0x1c4>)
 80040ba:	f7ff fe5f 	bl	8003d7c <LL_ADC_GetMultimode>
 80040be:	6178      	str	r0, [r7, #20]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4618      	mov	r0, r3
 80040c6:	f7ff fece 	bl	8003e66 <LL_ADC_INJ_IsConversionOngoing>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d001      	beq.n	80040d4 <HAL_ADCEx_InjectedStart_IT+0x24>
  {
    return HAL_BUSY;
 80040d0:	2302      	movs	r3, #2
 80040d2:	e0ca      	b.n	800426a <HAL_ADCEx_InjectedStart_IT+0x1ba>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80040de:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040e6:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d10a      	bne.n	8004104 <HAL_ADCEx_InjectedStart_IT+0x54>
        && (tmp_config_injected_queue == 0UL)
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d107      	bne.n	8004104 <HAL_ADCEx_InjectedStart_IT+0x54>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040f8:	f043 0220 	orr.w	r2, r3, #32
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e0b2      	b.n	800426a <HAL_ADCEx_InjectedStart_IT+0x1ba>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800410a:	2b01      	cmp	r3, #1
 800410c:	d101      	bne.n	8004112 <HAL_ADCEx_InjectedStart_IT+0x62>
 800410e:	2302      	movs	r3, #2
 8004110:	e0ab      	b.n	800426a <HAL_ADCEx_InjectedStart_IT+0x1ba>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2201      	movs	r2, #1
 8004116:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f7ff fc2c 	bl	8003978 <ADC_Enable>
 8004120:	4603      	mov	r3, r0
 8004122:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004124:	7bfb      	ldrb	r3, [r7, #15]
 8004126:	2b00      	cmp	r3, #0
 8004128:	f040 809a 	bne.w	8004260 <HAL_ADCEx_InjectedStart_IT+0x1b0>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004130:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004134:	2b00      	cmp	r3, #0
 8004136:	d006      	beq.n	8004146 <HAL_ADCEx_InjectedStart_IT+0x96>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800413c:	f023 0208 	bic.w	r2, r3, #8
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	661a      	str	r2, [r3, #96]	@ 0x60
 8004144:	e002      	b.n	800414c <HAL_ADCEx_InjectedStart_IT+0x9c>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004150:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004154:	f023 0301 	bic.w	r3, r3, #1
 8004158:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a44      	ldr	r2, [pc, #272]	@ (8004278 <HAL_ADCEx_InjectedStart_IT+0x1c8>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d002      	beq.n	8004170 <HAL_ADCEx_InjectedStart_IT+0xc0>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	e001      	b.n	8004174 <HAL_ADCEx_InjectedStart_IT+0xc4>
 8004170:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	6812      	ldr	r2, [r2, #0]
 8004178:	4293      	cmp	r3, r2
 800417a:	d002      	beq.n	8004182 <HAL_ADCEx_InjectedStart_IT+0xd2>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d105      	bne.n	800418e <HAL_ADCEx_InjectedStart_IT+0xde>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004186:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	2260      	movs	r2, #96	@ 0x60
 8004194:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2200      	movs	r2, #0
 800419a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      /* Enable ADC Injected context queue overflow interrupt if this feature   */
      /* is enabled.                                                            */
      if ((hadc->Instance->CFGR & ADC_CFGR_JQM) != 0UL)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d007      	beq.n	80041bc <HAL_ADCEx_InjectedStart_IT+0x10c>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_FLAG_JQOVF);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	685a      	ldr	r2, [r3, #4]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80041ba:	605a      	str	r2, [r3, #4]
      }

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	699b      	ldr	r3, [r3, #24]
 80041c0:	2b08      	cmp	r3, #8
 80041c2:	d110      	bne.n	80041e6 <HAL_ADCEx_InjectedStart_IT+0x136>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	685a      	ldr	r2, [r3, #4]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f022 0220 	bic.w	r2, r2, #32
 80041d2:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	685a      	ldr	r2, [r3, #4]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80041e2:	605a      	str	r2, [r3, #4]
          break;
 80041e4:	e010      	b.n	8004208 <HAL_ADCEx_InjectedStart_IT+0x158>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	685a      	ldr	r2, [r3, #4]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80041f4:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	685a      	ldr	r2, [r3, #4]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f042 0220 	orr.w	r2, r2, #32
 8004204:	605a      	str	r2, [r3, #4]
          break;
 8004206:	bf00      	nop
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a1a      	ldr	r2, [pc, #104]	@ (8004278 <HAL_ADCEx_InjectedStart_IT+0x1c8>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d002      	beq.n	8004218 <HAL_ADCEx_InjectedStart_IT+0x168>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	e001      	b.n	800421c <HAL_ADCEx_InjectedStart_IT+0x16c>
 8004218:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	6812      	ldr	r2, [r2, #0]
 8004220:	4293      	cmp	r3, r2
 8004222:	d008      	beq.n	8004236 <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d005      	beq.n	8004236 <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	2b06      	cmp	r3, #6
 800422e:	d002      	beq.n	8004236 <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	2b07      	cmp	r3, #7
 8004234:	d10d      	bne.n	8004252 <HAL_ADCEx_InjectedStart_IT+0x1a2>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4618      	mov	r0, r3
 800423c:	f7ff fd40 	bl	8003cc0 <LL_ADC_INJ_GetTrigAuto>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d110      	bne.n	8004268 <HAL_ADCEx_InjectedStart_IT+0x1b8>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4618      	mov	r0, r3
 800424c:	f7ff fdf7 	bl	8003e3e <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8004250:	e00a      	b.n	8004268 <HAL_ADCEx_InjectedStart_IT+0x1b8>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004256:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800425e:	e003      	b.n	8004268 <HAL_ADCEx_InjectedStart_IT+0x1b8>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 8004268:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800426a:	4618      	mov	r0, r3
 800426c:	3718      	adds	r7, #24
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop
 8004274:	50000300 	.word	0x50000300
 8004278:	50000100 	.word	0x50000100

0800427c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004284:	bf00      	nop
 8004286:	370c      	adds	r7, #12
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr

08004290 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004298:	bf00      	nop
 800429a:	370c      	adds	r7, #12
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr

080042a4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b083      	sub	sp, #12
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80042ac:	bf00      	nop
 80042ae:	370c      	adds	r7, #12
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80042c0:	bf00      	nop
 80042c2:	370c      	adds	r7, #12
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <HAL_ADCEx_InjectedConfigChannel>:
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc,
                                                  const ADC_InjectionConfTypeDef *pConfigInjected)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b0b6      	sub	sp, #216	@ 0xd8
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042d6:	2300      	movs	r3, #0
 80042d8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 80042dc:	2300      	movs	r3, #0
 80042de:	60bb      	str	r3, [r7, #8]

  uint32_t tmp_jsqr_context_queue_being_built = 0U;
 80042e0:	2300      	movs	r3, #0
 80042e2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d102      	bne.n	80042f6 <HAL_ADCEx_InjectedConfigChannel+0x2a>
 80042f0:	2302      	movs	r3, #2
 80042f2:	f000 bcb5 	b.w	8004c60 <HAL_ADCEx_InjectedConfigChannel+0x994>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2201      	movs	r2, #1
 80042fa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	695b      	ldr	r3, [r3, #20]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d003      	beq.n	800430e <HAL_ADCEx_InjectedConfigChannel+0x42>
      (pConfigInjected->InjectedNbrOfConversion == 1U))
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	6a1b      	ldr	r3, [r3, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 800430a:	2b01      	cmp	r3, #1
 800430c:	d130      	bne.n	8004370 <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	2b09      	cmp	r3, #9
 8004314:	d179      	bne.n	800440a <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800431a:	2b00      	cmp	r3, #0
 800431c:	d010      	beq.n	8004340 <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	0e9b      	lsrs	r3, r3, #26
 8004324:	025b      	lsls	r3, r3, #9
 8004326:	f403 5278 	and.w	r2, r3, #15872	@ 0x3e00
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800432e:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 8004332:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8004338:	4313      	orrs	r3, r2
 800433a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800433e:	e007      	b.n	8004350 <HAL_ADCEx_InjectedConfigChannel+0x84>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	0e9b      	lsrs	r3, r3, #26
 8004346:	025b      	lsls	r3, r3, #9
 8004348:	f403 5378 	and.w	r3, r3, #15872	@ 0x3e00
 800434c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_jsqr_context_queue_being_built);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004356:	4b84      	ldr	r3, [pc, #528]	@ (8004568 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8004358:	4013      	ands	r3, r2
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	6812      	ldr	r2, [r2, #0]
 800435e:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8004362:	430b      	orrs	r3, r1
 8004364:	64d3      	str	r3, [r2, #76]	@ 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_jsqr_context_queue_being_built;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800436c:	665a      	str	r2, [r3, #100]	@ 0x64
    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 800436e:	e04c      	b.n	800440a <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004374:	2b00      	cmp	r3, #0
 8004376:	d11d      	bne.n	80043b4 <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = pConfigInjected->InjectedNbrOfConversion;
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	6a1a      	ldr	r2, [r3, #32]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	669a      	str	r2, [r3, #104]	@ 0x68
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800438a:	2b00      	cmp	r3, #0
 800438c:	d00d      	beq.n	80043aa <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	6a1b      	ldr	r3, [r3, #32]
 8004392:	1e5a      	subs	r2, r3, #1
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004398:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 800439c:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 80043a2:	4313      	orrs	r3, r2
 80043a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80043a8:	e004      	b.n	80043b4 <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U));
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	6a1b      	ldr	r3, [r3, #32]
 80043ae:	3b01      	subs	r3, #1
 80043b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, pConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built |= ADC_JSQR_RK(pConfigInjected->InjectedChannel, pConfigInjected->InjectedRank);
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	0e9b      	lsrs	r3, r3, #26
 80043ba:	f003 021f 	and.w	r2, r3, #31
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	f003 031f 	and.w	r3, r3, #31
 80043c6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80043ce:	4313      	orrs	r3, r2
 80043d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80043d8:	1e5a      	subs	r2, r3, #1
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	669a      	str	r2, [r3, #104]	@ 0x68

    /* 3. tmp_jsqr_context_queue_being_built is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80043e2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80043e6:	431a      	orrs	r2, r3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	665a      	str	r2, [r3, #100]	@ 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d10a      	bne.n	800440a <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80043fa:	4b5b      	ldr	r3, [pc, #364]	@ (8004568 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 80043fc:	4013      	ands	r3, r2
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	6e51      	ldr	r1, [r2, #100]	@ 0x64
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	6812      	ldr	r2, [r2, #0]
 8004406:	430b      	orrs	r3, r1
 8004408:	64d3      	str	r3, [r2, #76]	@ 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4618      	mov	r0, r3
 8004410:	f7ff fd29 	bl	8003e66 <LL_ADC_INJ_IsConversionOngoing>
 8004414:	4603      	mov	r3, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d124      	bne.n	8004464 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (pConfigInjected->AutoInjectedConv == DISABLE)
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004420:	2b00      	cmp	r3, #0
 8004422:	d112      	bne.n	800444a <HAL_ADCEx_InjectedConfigChannel+0x17e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8004434:	055a      	lsls	r2, r3, #21
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800443c:	051b      	lsls	r3, r3, #20
 800443e:	431a      	orrs	r2, r3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	430a      	orrs	r2, r1
 8004446:	60da      	str	r2, [r3, #12]
 8004448:	e00c      	b.n	8004464 <HAL_ADCEx_InjectedConfigChannel+0x198>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800445a:	055a      	lsls	r2, r3, #21
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	430a      	orrs	r2, r1
 8004462:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4618      	mov	r0, r3
 800446a:	f7ff fcd5 	bl	8003e18 <LL_ADC_REG_IsConversionOngoing>
 800446e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4618      	mov	r0, r3
 8004478:	f7ff fcf5 	bl	8003e66 <LL_ADC_INJ_IsConversionOngoing>
 800447c:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004480:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004484:	2b00      	cmp	r3, #0
 8004486:	f040 822e 	bne.w	80048e6 <HAL_ADCEx_InjectedConfigChannel+0x61a>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800448a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800448e:	2b00      	cmp	r3, #0
 8004490:	f040 8229 	bne.w	80048e6 <HAL_ADCEx_InjectedConfigChannel+0x61a>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((pConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004498:	2b00      	cmp	r3, #0
 800449a:	d003      	beq.n	80044a4 <HAL_ADCEx_InjectedConfigChannel+0x1d8>
        || (pConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d116      	bne.n	80044d2 <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d108      	bne.n	80044c0 <HAL_ADCEx_InjectedConfigChannel+0x1f4>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	68da      	ldr	r2, [r3, #12]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 80044bc:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 80044be:	e01f      	b.n	8004500 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	68da      	ldr	r2, [r3, #12]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 80044ce:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 80044d0:	e016      	b.n	8004500 <HAL_ADCEx_InjectedConfigChannel+0x234>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d109      	bne.n	80044f0 <HAL_ADCEx_InjectedConfigChannel+0x224>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044e0:	f043 0220 	orr.w	r2, r3, #32
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	65da      	str	r2, [r3, #92]	@ 0x5c

        tmp_hal_status = HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80044ee:	e007      	b.n	8004500 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	68da      	ldr	r2, [r3, #12]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 80044fe:	60da      	str	r2, [r3, #12]
      }
    }

    if (pConfigInjected->InjecOversamplingMode == ENABLE)
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004506:	2b01      	cmp	r3, #1
 8004508:	d110      	bne.n	800452c <HAL_ADCEx_InjectedConfigChannel+0x260>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	691b      	ldr	r3, [r3, #16]
 8004510:	f423 72ff 	bic.w	r2, r3, #510	@ 0x1fe
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800451c:	430b      	orrs	r3, r1
 800451e:	431a      	orrs	r2, r3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f042 0202 	orr.w	r2, r2, #2
 8004528:	611a      	str	r2, [r3, #16]
 800452a:	e007      	b.n	800453c <HAL_ADCEx_InjectedConfigChannel+0x270>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	691a      	ldr	r2, [r3, #16]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f022 0202 	bic.w	r2, r2, #2
 800453a:	611a      	str	r2, [r3, #16]
    }

    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (pConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004544:	d112      	bne.n	800456c <HAL_ADCEx_InjectedConfigChannel+0x2a0>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6818      	ldr	r0, [r3, #0]
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	2200      	movs	r2, #0
 8004550:	4619      	mov	r1, r3
 8004552:	f7ff fbc3 	bl	8003cdc <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800455e:	4618      	mov	r0, r3
 8004560:	f7ff fb9b 	bl	8003c9a <LL_ADC_SetSamplingTimeCommonConfig>
 8004564:	e011      	b.n	800458a <HAL_ADCEx_InjectedConfigChannel+0x2be>
 8004566:	bf00      	nop
 8004568:	04104000 	.word	0x04104000
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6818      	ldr	r0, [r3, #0]
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	6819      	ldr	r1, [r3, #0]
                                    pConfigInjected->InjectedSamplingTime);
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	689b      	ldr	r3, [r3, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 8004578:	461a      	mov	r2, r3
 800457a:	f7ff fbaf 	bl	8003cdc <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	2100      	movs	r1, #0
 8004584:	4618      	mov	r0, r3
 8004586:	f7ff fb88 	bl	8003c9a <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, pConfigInjected->InjectedOffset);
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	695a      	ldr	r2, [r3, #20]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	08db      	lsrs	r3, r3, #3
 8004596:	f003 0303 	and.w	r3, r3, #3
 800459a:	005b      	lsls	r3, r3, #1
 800459c:	fa02 f303 	lsl.w	r3, r2, r3
 80045a0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

    if (pConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	691b      	ldr	r3, [r3, #16]
 80045a8:	2b04      	cmp	r3, #4
 80045aa:	d022      	beq.n	80045f2 <HAL_ADCEx_InjectedConfigChannel+0x326>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedChannel,
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6818      	ldr	r0, [r3, #0]
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	6919      	ldr	r1, [r3, #16]
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80045bc:	f7ff fae2 	bl	8003b84 <LL_ADC_SetOffset>
                       tmp_offset_shifted);

      /* Set ADC selected offset sign & saturation */
      LL_ADC_SetOffsetSign(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedOffsetSign);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6818      	ldr	r0, [r3, #0]
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	6919      	ldr	r1, [r3, #16]
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	699b      	ldr	r3, [r3, #24]
 80045cc:	461a      	mov	r2, r3
 80045ce:	f7ff fb2e 	bl	8003c2e <LL_ADC_SetOffsetSign>
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6818      	ldr	r0, [r3, #0]
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	6919      	ldr	r1, [r3, #16]
                                 (pConfigInjected->InjectedOffsetSaturation == ENABLE) ?
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	7f1b      	ldrb	r3, [r3, #28]
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d102      	bne.n	80045e8 <HAL_ADCEx_InjectedConfigChannel+0x31c>
 80045e2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80045e6:	e000      	b.n	80045ea <HAL_ADCEx_InjectedConfigChannel+0x31e>
 80045e8:	2300      	movs	r3, #0
 80045ea:	461a      	mov	r2, r3
 80045ec:	f7ff fb3a 	bl	8003c64 <LL_ADC_SetOffsetSaturation>
 80045f0:	e179      	b.n	80048e6 <HAL_ADCEx_InjectedConfigChannel+0x61a>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	2100      	movs	r1, #0
 80045f8:	4618      	mov	r0, r3
 80045fa:	f7ff fae7 	bl	8003bcc <LL_ADC_GetOffsetChannel>
 80045fe:	4603      	mov	r3, r0
 8004600:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004604:	2b00      	cmp	r3, #0
 8004606:	d10a      	bne.n	800461e <HAL_ADCEx_InjectedConfigChannel+0x352>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	2100      	movs	r1, #0
 800460e:	4618      	mov	r0, r3
 8004610:	f7ff fadc 	bl	8003bcc <LL_ADC_GetOffsetChannel>
 8004614:	4603      	mov	r3, r0
 8004616:	0e9b      	lsrs	r3, r3, #26
 8004618:	f003 021f 	and.w	r2, r3, #31
 800461c:	e01e      	b.n	800465c <HAL_ADCEx_InjectedConfigChannel+0x390>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2100      	movs	r1, #0
 8004624:	4618      	mov	r0, r3
 8004626:	f7ff fad1 	bl	8003bcc <LL_ADC_GetOffsetChannel>
 800462a:	4603      	mov	r3, r0
 800462c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004630:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004634:	fa93 f3a3 	rbit	r3, r3
 8004638:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 800463c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004640:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8004644:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004648:	2b00      	cmp	r3, #0
 800464a:	d101      	bne.n	8004650 <HAL_ADCEx_InjectedConfigChannel+0x384>
    return 32U;
 800464c:	2320      	movs	r3, #32
 800464e:	e004      	b.n	800465a <HAL_ADCEx_InjectedConfigChannel+0x38e>
  return __builtin_clz(value);
 8004650:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004654:	fab3 f383 	clz	r3, r3
 8004658:	b2db      	uxtb	r3, r3
 800465a:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004664:	2b00      	cmp	r3, #0
 8004666:	d105      	bne.n	8004674 <HAL_ADCEx_InjectedConfigChannel+0x3a8>
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	0e9b      	lsrs	r3, r3, #26
 800466e:	f003 031f 	and.w	r3, r3, #31
 8004672:	e018      	b.n	80046a6 <HAL_ADCEx_InjectedConfigChannel+0x3da>
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800467c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004680:	fa93 f3a3 	rbit	r3, r3
 8004684:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8004688:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800468c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8004690:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004694:	2b00      	cmp	r3, #0
 8004696:	d101      	bne.n	800469c <HAL_ADCEx_InjectedConfigChannel+0x3d0>
    return 32U;
 8004698:	2320      	movs	r3, #32
 800469a:	e004      	b.n	80046a6 <HAL_ADCEx_InjectedConfigChannel+0x3da>
  return __builtin_clz(value);
 800469c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80046a0:	fab3 f383 	clz	r3, r3
 80046a4:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d106      	bne.n	80046b8 <HAL_ADCEx_InjectedConfigChannel+0x3ec>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	2200      	movs	r2, #0
 80046b0:	2100      	movs	r1, #0
 80046b2:	4618      	mov	r0, r3
 80046b4:	f7ff faa0 	bl	8003bf8 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	2101      	movs	r1, #1
 80046be:	4618      	mov	r0, r3
 80046c0:	f7ff fa84 	bl	8003bcc <LL_ADC_GetOffsetChannel>
 80046c4:	4603      	mov	r3, r0
 80046c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d10a      	bne.n	80046e4 <HAL_ADCEx_InjectedConfigChannel+0x418>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	2101      	movs	r1, #1
 80046d4:	4618      	mov	r0, r3
 80046d6:	f7ff fa79 	bl	8003bcc <LL_ADC_GetOffsetChannel>
 80046da:	4603      	mov	r3, r0
 80046dc:	0e9b      	lsrs	r3, r3, #26
 80046de:	f003 021f 	and.w	r2, r3, #31
 80046e2:	e01e      	b.n	8004722 <HAL_ADCEx_InjectedConfigChannel+0x456>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	2101      	movs	r1, #1
 80046ea:	4618      	mov	r0, r3
 80046ec:	f7ff fa6e 	bl	8003bcc <LL_ADC_GetOffsetChannel>
 80046f0:	4603      	mov	r3, r0
 80046f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80046fa:	fa93 f3a3 	rbit	r3, r3
 80046fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8004702:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004706:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800470a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800470e:	2b00      	cmp	r3, #0
 8004710:	d101      	bne.n	8004716 <HAL_ADCEx_InjectedConfigChannel+0x44a>
    return 32U;
 8004712:	2320      	movs	r3, #32
 8004714:	e004      	b.n	8004720 <HAL_ADCEx_InjectedConfigChannel+0x454>
  return __builtin_clz(value);
 8004716:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800471a:	fab3 f383 	clz	r3, r3
 800471e:	b2db      	uxtb	r3, r3
 8004720:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800472a:	2b00      	cmp	r3, #0
 800472c:	d105      	bne.n	800473a <HAL_ADCEx_InjectedConfigChannel+0x46e>
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	0e9b      	lsrs	r3, r3, #26
 8004734:	f003 031f 	and.w	r3, r3, #31
 8004738:	e018      	b.n	800476c <HAL_ADCEx_InjectedConfigChannel+0x4a0>
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004742:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004746:	fa93 f3a3 	rbit	r3, r3
 800474a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800474e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004752:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8004756:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800475a:	2b00      	cmp	r3, #0
 800475c:	d101      	bne.n	8004762 <HAL_ADCEx_InjectedConfigChannel+0x496>
    return 32U;
 800475e:	2320      	movs	r3, #32
 8004760:	e004      	b.n	800476c <HAL_ADCEx_InjectedConfigChannel+0x4a0>
  return __builtin_clz(value);
 8004762:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004766:	fab3 f383 	clz	r3, r3
 800476a:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800476c:	429a      	cmp	r2, r3
 800476e:	d106      	bne.n	800477e <HAL_ADCEx_InjectedConfigChannel+0x4b2>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2200      	movs	r2, #0
 8004776:	2101      	movs	r1, #1
 8004778:	4618      	mov	r0, r3
 800477a:	f7ff fa3d 	bl	8003bf8 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	2102      	movs	r1, #2
 8004784:	4618      	mov	r0, r3
 8004786:	f7ff fa21 	bl	8003bcc <LL_ADC_GetOffsetChannel>
 800478a:	4603      	mov	r3, r0
 800478c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004790:	2b00      	cmp	r3, #0
 8004792:	d10a      	bne.n	80047aa <HAL_ADCEx_InjectedConfigChannel+0x4de>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	2102      	movs	r1, #2
 800479a:	4618      	mov	r0, r3
 800479c:	f7ff fa16 	bl	8003bcc <LL_ADC_GetOffsetChannel>
 80047a0:	4603      	mov	r3, r0
 80047a2:	0e9b      	lsrs	r3, r3, #26
 80047a4:	f003 021f 	and.w	r2, r3, #31
 80047a8:	e01e      	b.n	80047e8 <HAL_ADCEx_InjectedConfigChannel+0x51c>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	2102      	movs	r1, #2
 80047b0:	4618      	mov	r0, r3
 80047b2:	f7ff fa0b 	bl	8003bcc <LL_ADC_GetOffsetChannel>
 80047b6:	4603      	mov	r3, r0
 80047b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80047c0:	fa93 f3a3 	rbit	r3, r3
 80047c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80047c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80047cc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80047d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d101      	bne.n	80047dc <HAL_ADCEx_InjectedConfigChannel+0x510>
    return 32U;
 80047d8:	2320      	movs	r3, #32
 80047da:	e004      	b.n	80047e6 <HAL_ADCEx_InjectedConfigChannel+0x51a>
  return __builtin_clz(value);
 80047dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80047e0:	fab3 f383 	clz	r3, r3
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d105      	bne.n	8004800 <HAL_ADCEx_InjectedConfigChannel+0x534>
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	0e9b      	lsrs	r3, r3, #26
 80047fa:	f003 031f 	and.w	r3, r3, #31
 80047fe:	e014      	b.n	800482a <HAL_ADCEx_InjectedConfigChannel+0x55e>
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004806:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004808:	fa93 f3a3 	rbit	r3, r3
 800480c:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800480e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004810:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8004814:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004818:	2b00      	cmp	r3, #0
 800481a:	d101      	bne.n	8004820 <HAL_ADCEx_InjectedConfigChannel+0x554>
    return 32U;
 800481c:	2320      	movs	r3, #32
 800481e:	e004      	b.n	800482a <HAL_ADCEx_InjectedConfigChannel+0x55e>
  return __builtin_clz(value);
 8004820:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004824:	fab3 f383 	clz	r3, r3
 8004828:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800482a:	429a      	cmp	r2, r3
 800482c:	d106      	bne.n	800483c <HAL_ADCEx_InjectedConfigChannel+0x570>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	2200      	movs	r2, #0
 8004834:	2102      	movs	r1, #2
 8004836:	4618      	mov	r0, r3
 8004838:	f7ff f9de 	bl	8003bf8 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	2103      	movs	r1, #3
 8004842:	4618      	mov	r0, r3
 8004844:	f7ff f9c2 	bl	8003bcc <LL_ADC_GetOffsetChannel>
 8004848:	4603      	mov	r3, r0
 800484a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800484e:	2b00      	cmp	r3, #0
 8004850:	d10a      	bne.n	8004868 <HAL_ADCEx_InjectedConfigChannel+0x59c>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	2103      	movs	r1, #3
 8004858:	4618      	mov	r0, r3
 800485a:	f7ff f9b7 	bl	8003bcc <LL_ADC_GetOffsetChannel>
 800485e:	4603      	mov	r3, r0
 8004860:	0e9b      	lsrs	r3, r3, #26
 8004862:	f003 021f 	and.w	r2, r3, #31
 8004866:	e017      	b.n	8004898 <HAL_ADCEx_InjectedConfigChannel+0x5cc>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	2103      	movs	r1, #3
 800486e:	4618      	mov	r0, r3
 8004870:	f7ff f9ac 	bl	8003bcc <LL_ADC_GetOffsetChannel>
 8004874:	4603      	mov	r3, r0
 8004876:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004878:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800487a:	fa93 f3a3 	rbit	r3, r3
 800487e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004880:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004882:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8004884:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004886:	2b00      	cmp	r3, #0
 8004888:	d101      	bne.n	800488e <HAL_ADCEx_InjectedConfigChannel+0x5c2>
    return 32U;
 800488a:	2320      	movs	r3, #32
 800488c:	e003      	b.n	8004896 <HAL_ADCEx_InjectedConfigChannel+0x5ca>
  return __builtin_clz(value);
 800488e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004890:	fab3 f383 	clz	r3, r3
 8004894:	b2db      	uxtb	r3, r3
 8004896:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d105      	bne.n	80048b0 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	0e9b      	lsrs	r3, r3, #26
 80048aa:	f003 031f 	and.w	r3, r3, #31
 80048ae:	e011      	b.n	80048d4 <HAL_ADCEx_InjectedConfigChannel+0x608>
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80048b8:	fa93 f3a3 	rbit	r3, r3
 80048bc:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80048be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80048c0:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80048c2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d101      	bne.n	80048cc <HAL_ADCEx_InjectedConfigChannel+0x600>
    return 32U;
 80048c8:	2320      	movs	r3, #32
 80048ca:	e003      	b.n	80048d4 <HAL_ADCEx_InjectedConfigChannel+0x608>
  return __builtin_clz(value);
 80048cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80048ce:	fab3 f383 	clz	r3, r3
 80048d2:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d106      	bne.n	80048e6 <HAL_ADCEx_InjectedConfigChannel+0x61a>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	2200      	movs	r2, #0
 80048de:	2103      	movs	r1, #3
 80048e0:	4618      	mov	r0, r3
 80048e2:	f7ff f989 	bl	8003bf8 <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4618      	mov	r0, r3
 80048ec:	f7ff fa54 	bl	8003d98 <LL_ADC_IsEnabled>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	f040 8140 	bne.w	8004b78 <HAL_ADCEx_InjectedConfigChannel+0x8ac>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6818      	ldr	r0, [r3, #0]
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	6819      	ldr	r1, [r3, #0]
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	461a      	mov	r2, r3
 8004906:	f7ff fa15 	bl	8003d34 <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (pConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	68db      	ldr	r3, [r3, #12]
 800490e:	4a8f      	ldr	r2, [pc, #572]	@ (8004b4c <HAL_ADCEx_InjectedConfigChannel+0x880>)
 8004910:	4293      	cmp	r3, r2
 8004912:	f040 8131 	bne.w	8004b78 <HAL_ADCEx_InjectedConfigChannel+0x8ac>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6818      	ldr	r0, [r3, #0]
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004922:	2b00      	cmp	r3, #0
 8004924:	d10b      	bne.n	800493e <HAL_ADCEx_InjectedConfigChannel+0x672>
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	0e9b      	lsrs	r3, r3, #26
 800492c:	3301      	adds	r3, #1
 800492e:	f003 031f 	and.w	r3, r3, #31
 8004932:	2b09      	cmp	r3, #9
 8004934:	bf94      	ite	ls
 8004936:	2301      	movls	r3, #1
 8004938:	2300      	movhi	r3, #0
 800493a:	b2db      	uxtb	r3, r3
 800493c:	e019      	b.n	8004972 <HAL_ADCEx_InjectedConfigChannel+0x6a6>
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004944:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004946:	fa93 f3a3 	rbit	r3, r3
 800494a:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800494c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800494e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8004950:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004952:	2b00      	cmp	r3, #0
 8004954:	d101      	bne.n	800495a <HAL_ADCEx_InjectedConfigChannel+0x68e>
    return 32U;
 8004956:	2320      	movs	r3, #32
 8004958:	e003      	b.n	8004962 <HAL_ADCEx_InjectedConfigChannel+0x696>
  return __builtin_clz(value);
 800495a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800495c:	fab3 f383 	clz	r3, r3
 8004960:	b2db      	uxtb	r3, r3
 8004962:	3301      	adds	r3, #1
 8004964:	f003 031f 	and.w	r3, r3, #31
 8004968:	2b09      	cmp	r3, #9
 800496a:	bf94      	ite	ls
 800496c:	2301      	movls	r3, #1
 800496e:	2300      	movhi	r3, #0
 8004970:	b2db      	uxtb	r3, r3
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004972:	2b00      	cmp	r3, #0
 8004974:	d079      	beq.n	8004a6a <HAL_ADCEx_InjectedConfigChannel+0x79e>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800497e:	2b00      	cmp	r3, #0
 8004980:	d107      	bne.n	8004992 <HAL_ADCEx_InjectedConfigChannel+0x6c6>
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	0e9b      	lsrs	r3, r3, #26
 8004988:	3301      	adds	r3, #1
 800498a:	069b      	lsls	r3, r3, #26
 800498c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004990:	e015      	b.n	80049be <HAL_ADCEx_InjectedConfigChannel+0x6f2>
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004998:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800499a:	fa93 f3a3 	rbit	r3, r3
 800499e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80049a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80049a2:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80049a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d101      	bne.n	80049ae <HAL_ADCEx_InjectedConfigChannel+0x6e2>
    return 32U;
 80049aa:	2320      	movs	r3, #32
 80049ac:	e003      	b.n	80049b6 <HAL_ADCEx_InjectedConfigChannel+0x6ea>
  return __builtin_clz(value);
 80049ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80049b0:	fab3 f383 	clz	r3, r3
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	3301      	adds	r3, #1
 80049b8:	069b      	lsls	r3, r3, #26
 80049ba:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d109      	bne.n	80049de <HAL_ADCEx_InjectedConfigChannel+0x712>
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	0e9b      	lsrs	r3, r3, #26
 80049d0:	3301      	adds	r3, #1
 80049d2:	f003 031f 	and.w	r3, r3, #31
 80049d6:	2101      	movs	r1, #1
 80049d8:	fa01 f303 	lsl.w	r3, r1, r3
 80049dc:	e017      	b.n	8004a0e <HAL_ADCEx_InjectedConfigChannel+0x742>
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80049e6:	fa93 f3a3 	rbit	r3, r3
 80049ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80049ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049ee:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80049f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d101      	bne.n	80049fa <HAL_ADCEx_InjectedConfigChannel+0x72e>
    return 32U;
 80049f6:	2320      	movs	r3, #32
 80049f8:	e003      	b.n	8004a02 <HAL_ADCEx_InjectedConfigChannel+0x736>
  return __builtin_clz(value);
 80049fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049fc:	fab3 f383 	clz	r3, r3
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	3301      	adds	r3, #1
 8004a04:	f003 031f 	and.w	r3, r3, #31
 8004a08:	2101      	movs	r1, #1
 8004a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a0e:	ea42 0103 	orr.w	r1, r2, r3
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d10a      	bne.n	8004a34 <HAL_ADCEx_InjectedConfigChannel+0x768>
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	0e9b      	lsrs	r3, r3, #26
 8004a24:	3301      	adds	r3, #1
 8004a26:	f003 021f 	and.w	r2, r3, #31
 8004a2a:	4613      	mov	r3, r2
 8004a2c:	005b      	lsls	r3, r3, #1
 8004a2e:	4413      	add	r3, r2
 8004a30:	051b      	lsls	r3, r3, #20
 8004a32:	e018      	b.n	8004a66 <HAL_ADCEx_InjectedConfigChannel+0x79a>
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a3c:	fa93 f3a3 	rbit	r3, r3
 8004a40:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8004a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a44:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8004a46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d101      	bne.n	8004a50 <HAL_ADCEx_InjectedConfigChannel+0x784>
    return 32U;
 8004a4c:	2320      	movs	r3, #32
 8004a4e:	e003      	b.n	8004a58 <HAL_ADCEx_InjectedConfigChannel+0x78c>
  return __builtin_clz(value);
 8004a50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a52:	fab3 f383 	clz	r3, r3
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	3301      	adds	r3, #1
 8004a5a:	f003 021f 	and.w	r2, r3, #31
 8004a5e:	4613      	mov	r3, r2
 8004a60:	005b      	lsls	r3, r3, #1
 8004a62:	4413      	add	r3, r2
 8004a64:	051b      	lsls	r3, r3, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a66:	430b      	orrs	r3, r1
 8004a68:	e081      	b.n	8004b6e <HAL_ADCEx_InjectedConfigChannel+0x8a2>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d107      	bne.n	8004a86 <HAL_ADCEx_InjectedConfigChannel+0x7ba>
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	0e9b      	lsrs	r3, r3, #26
 8004a7c:	3301      	adds	r3, #1
 8004a7e:	069b      	lsls	r3, r3, #26
 8004a80:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004a84:	e015      	b.n	8004ab2 <HAL_ADCEx_InjectedConfigChannel+0x7e6>
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a8e:	fa93 f3a3 	rbit	r3, r3
 8004a92:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8004a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8004a98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d101      	bne.n	8004aa2 <HAL_ADCEx_InjectedConfigChannel+0x7d6>
    return 32U;
 8004a9e:	2320      	movs	r3, #32
 8004aa0:	e003      	b.n	8004aaa <HAL_ADCEx_InjectedConfigChannel+0x7de>
  return __builtin_clz(value);
 8004aa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004aa4:	fab3 f383 	clz	r3, r3
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	3301      	adds	r3, #1
 8004aac:	069b      	lsls	r3, r3, #26
 8004aae:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d109      	bne.n	8004ad2 <HAL_ADCEx_InjectedConfigChannel+0x806>
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	0e9b      	lsrs	r3, r3, #26
 8004ac4:	3301      	adds	r3, #1
 8004ac6:	f003 031f 	and.w	r3, r3, #31
 8004aca:	2101      	movs	r1, #1
 8004acc:	fa01 f303 	lsl.w	r3, r1, r3
 8004ad0:	e017      	b.n	8004b02 <HAL_ADCEx_InjectedConfigChannel+0x836>
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ad8:	69fb      	ldr	r3, [r7, #28]
 8004ada:	fa93 f3a3 	rbit	r3, r3
 8004ade:	61bb      	str	r3, [r7, #24]
  return result;
 8004ae0:	69bb      	ldr	r3, [r7, #24]
 8004ae2:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004ae4:	6a3b      	ldr	r3, [r7, #32]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d101      	bne.n	8004aee <HAL_ADCEx_InjectedConfigChannel+0x822>
    return 32U;
 8004aea:	2320      	movs	r3, #32
 8004aec:	e003      	b.n	8004af6 <HAL_ADCEx_InjectedConfigChannel+0x82a>
  return __builtin_clz(value);
 8004aee:	6a3b      	ldr	r3, [r7, #32]
 8004af0:	fab3 f383 	clz	r3, r3
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	3301      	adds	r3, #1
 8004af8:	f003 031f 	and.w	r3, r3, #31
 8004afc:	2101      	movs	r1, #1
 8004afe:	fa01 f303 	lsl.w	r3, r1, r3
 8004b02:	ea42 0103 	orr.w	r1, r2, r3
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d10d      	bne.n	8004b2e <HAL_ADCEx_InjectedConfigChannel+0x862>
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	0e9b      	lsrs	r3, r3, #26
 8004b18:	3301      	adds	r3, #1
 8004b1a:	f003 021f 	and.w	r2, r3, #31
 8004b1e:	4613      	mov	r3, r2
 8004b20:	005b      	lsls	r3, r3, #1
 8004b22:	4413      	add	r3, r2
 8004b24:	3b1e      	subs	r3, #30
 8004b26:	051b      	lsls	r3, r3, #20
 8004b28:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004b2c:	e01e      	b.n	8004b6c <HAL_ADCEx_InjectedConfigChannel+0x8a0>
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	fa93 f3a3 	rbit	r3, r3
 8004b3a:	60fb      	str	r3, [r7, #12]
  return result;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d104      	bne.n	8004b50 <HAL_ADCEx_InjectedConfigChannel+0x884>
    return 32U;
 8004b46:	2320      	movs	r3, #32
 8004b48:	e006      	b.n	8004b58 <HAL_ADCEx_InjectedConfigChannel+0x88c>
 8004b4a:	bf00      	nop
 8004b4c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	fab3 f383 	clz	r3, r3
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	3301      	adds	r3, #1
 8004b5a:	f003 021f 	and.w	r2, r3, #31
 8004b5e:	4613      	mov	r3, r2
 8004b60:	005b      	lsls	r3, r3, #1
 8004b62:	4413      	add	r3, r2
 8004b64:	3b1e      	subs	r3, #30
 8004b66:	051b      	lsls	r3, r3, #20
 8004b68:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b6c:	430b      	orrs	r3, r1
                                                 (__LL_ADC_CHANNEL_TO_DECIMAL_NB(
                                                    (uint32_t)pConfigInjected->InjectedChannel)
                                                  + 1UL) & 0x1FUL)),
                                    pConfigInjected->InjectedSamplingTime);
 8004b6e:	683a      	ldr	r2, [r7, #0]
 8004b70:	6892      	ldr	r2, [r2, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b72:	4619      	mov	r1, r3
 8004b74:	f7ff f8b2 	bl	8003cdc <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfigInjected->InjectedChannel))
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	4b3a      	ldr	r3, [pc, #232]	@ (8004c68 <HAL_ADCEx_InjectedConfigChannel+0x99c>)
 8004b7e:	4013      	ands	r3, r2
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d067      	beq.n	8004c54 <HAL_ADCEx_InjectedConfigChannel+0x988>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004b84:	4839      	ldr	r0, [pc, #228]	@ (8004c6c <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8004b86:	f7fe ffef 	bl	8003b68 <LL_ADC_GetCommonPathInternalCh>
 8004b8a:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a37      	ldr	r2, [pc, #220]	@ (8004c70 <HAL_ADCEx_InjectedConfigChannel+0x9a4>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d004      	beq.n	8004ba2 <HAL_ADCEx_InjectedConfigChannel+0x8d6>
         || (pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a35      	ldr	r2, [pc, #212]	@ (8004c74 <HAL_ADCEx_InjectedConfigChannel+0x9a8>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d127      	bne.n	8004bf2 <HAL_ADCEx_InjectedConfigChannel+0x926>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004ba2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004ba6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d121      	bne.n	8004bf2 <HAL_ADCEx_InjectedConfigChannel+0x926>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004bb6:	d14d      	bne.n	8004c54 <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004bb8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004bbc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004bc0:	4619      	mov	r1, r3
 8004bc2:	482a      	ldr	r0, [pc, #168]	@ (8004c6c <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8004bc4:	f7fe ffbd 	bl	8003b42 <LL_ADC_SetCommonPathInternalCh>
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                           * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8004bc8:	4b2b      	ldr	r3, [pc, #172]	@ (8004c78 <HAL_ADCEx_InjectedConfigChannel+0x9ac>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	099b      	lsrs	r3, r3, #6
 8004bce:	4a2b      	ldr	r2, [pc, #172]	@ (8004c7c <HAL_ADCEx_InjectedConfigChannel+0x9b0>)
 8004bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8004bd4:	099a      	lsrs	r2, r3, #6
 8004bd6:	4613      	mov	r3, r2
 8004bd8:	005b      	lsls	r3, r3, #1
 8004bda:	4413      	add	r3, r2
 8004bdc:	009b      	lsls	r3, r3, #2
 8004bde:	3318      	adds	r3, #24
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 8004be0:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8004be2:	e002      	b.n	8004bea <HAL_ADCEx_InjectedConfigChannel+0x91e>
        {
          wait_loop_index--;
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	3b01      	subs	r3, #1
 8004be8:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d1f9      	bne.n	8004be4 <HAL_ADCEx_InjectedConfigChannel+0x918>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004bf0:	e030      	b.n	8004c54 <HAL_ADCEx_InjectedConfigChannel+0x988>
        }
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a22      	ldr	r2, [pc, #136]	@ (8004c80 <HAL_ADCEx_InjectedConfigChannel+0x9b4>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d113      	bne.n	8004c24 <HAL_ADCEx_InjectedConfigChannel+0x958>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004bfc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004c00:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d10d      	bne.n	8004c24 <HAL_ADCEx_InjectedConfigChannel+0x958>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a1d      	ldr	r2, [pc, #116]	@ (8004c84 <HAL_ADCEx_InjectedConfigChannel+0x9b8>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d020      	beq.n	8004c54 <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004c12:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004c16:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	4813      	ldr	r0, [pc, #76]	@ (8004c6c <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8004c1e:	f7fe ff90 	bl	8003b42 <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004c22:	e017      	b.n	8004c54 <HAL_ADCEx_InjectedConfigChannel+0x988>
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a17      	ldr	r2, [pc, #92]	@ (8004c88 <HAL_ADCEx_InjectedConfigChannel+0x9bc>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d112      	bne.n	8004c54 <HAL_ADCEx_InjectedConfigChannel+0x988>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004c2e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004c32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d10c      	bne.n	8004c54 <HAL_ADCEx_InjectedConfigChannel+0x988>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a11      	ldr	r2, [pc, #68]	@ (8004c84 <HAL_ADCEx_InjectedConfigChannel+0x9b8>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d007      	beq.n	8004c54 <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004c44:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004c48:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004c4c:	4619      	mov	r1, r3
 8004c4e:	4807      	ldr	r0, [pc, #28]	@ (8004c6c <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8004c50:	f7fe ff77 	bl	8003b42 <LL_ADC_SetCommonPathInternalCh>
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004c5c:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	37d8      	adds	r7, #216	@ 0xd8
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}
 8004c68:	80080000 	.word	0x80080000
 8004c6c:	50000300 	.word	0x50000300
 8004c70:	c3210000 	.word	0xc3210000
 8004c74:	90c00010 	.word	0x90c00010
 8004c78:	20000000 	.word	0x20000000
 8004c7c:	053e2d63 	.word	0x053e2d63
 8004c80:	c7520000 	.word	0xc7520000
 8004c84:	50000100 	.word	0x50000100
 8004c88:	cb840000 	.word	0xcb840000

08004c8c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004c8c:	b590      	push	{r4, r7, lr}
 8004c8e:	b0a1      	sub	sp, #132	@ 0x84
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c96:	2300      	movs	r3, #0
 8004c98:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d101      	bne.n	8004caa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004ca6:	2302      	movs	r3, #2
 8004ca8:	e08b      	b.n	8004dc2 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2201      	movs	r2, #1
 8004cae:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004cc2:	d102      	bne.n	8004cca <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004cc4:	4b41      	ldr	r3, [pc, #260]	@ (8004dcc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004cc6:	60bb      	str	r3, [r7, #8]
 8004cc8:	e001      	b.n	8004cce <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004cca:	2300      	movs	r3, #0
 8004ccc:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d10b      	bne.n	8004cec <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cd8:	f043 0220 	orr.w	r2, r3, #32
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e06a      	b.n	8004dc2 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f7ff f892 	bl	8003e18 <LL_ADC_REG_IsConversionOngoing>
 8004cf4:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f7ff f88c 	bl	8003e18 <LL_ADC_REG_IsConversionOngoing>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d14c      	bne.n	8004da0 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004d06:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d149      	bne.n	8004da0 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004d0c:	4b30      	ldr	r3, [pc, #192]	@ (8004dd0 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8004d0e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d028      	beq.n	8004d6a <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004d18:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	6859      	ldr	r1, [r3, #4]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004d2a:	035b      	lsls	r3, r3, #13
 8004d2c:	430b      	orrs	r3, r1
 8004d2e:	431a      	orrs	r2, r3
 8004d30:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d32:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004d34:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004d38:	f7ff f82e 	bl	8003d98 <LL_ADC_IsEnabled>
 8004d3c:	4604      	mov	r4, r0
 8004d3e:	4823      	ldr	r0, [pc, #140]	@ (8004dcc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004d40:	f7ff f82a 	bl	8003d98 <LL_ADC_IsEnabled>
 8004d44:	4603      	mov	r3, r0
 8004d46:	4323      	orrs	r3, r4
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d133      	bne.n	8004db4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004d4c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004d54:	f023 030f 	bic.w	r3, r3, #15
 8004d58:	683a      	ldr	r2, [r7, #0]
 8004d5a:	6811      	ldr	r1, [r2, #0]
 8004d5c:	683a      	ldr	r2, [r7, #0]
 8004d5e:	6892      	ldr	r2, [r2, #8]
 8004d60:	430a      	orrs	r2, r1
 8004d62:	431a      	orrs	r2, r3
 8004d64:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d66:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004d68:	e024      	b.n	8004db4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004d6a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004d72:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d74:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004d76:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004d7a:	f7ff f80d 	bl	8003d98 <LL_ADC_IsEnabled>
 8004d7e:	4604      	mov	r4, r0
 8004d80:	4812      	ldr	r0, [pc, #72]	@ (8004dcc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004d82:	f7ff f809 	bl	8003d98 <LL_ADC_IsEnabled>
 8004d86:	4603      	mov	r3, r0
 8004d88:	4323      	orrs	r3, r4
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d112      	bne.n	8004db4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004d8e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004d96:	f023 030f 	bic.w	r3, r3, #15
 8004d9a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004d9c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004d9e:	e009      	b.n	8004db4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004da4:	f043 0220 	orr.w	r2, r3, #32
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004db2:	e000      	b.n	8004db6 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004db4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004dbe:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3784      	adds	r7, #132	@ 0x84
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd90      	pop	{r4, r7, pc}
 8004dca:	bf00      	nop
 8004dcc:	50000100 	.word	0x50000100
 8004dd0:	50000300 	.word	0x50000300

08004dd4 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b083      	sub	sp, #12
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8004ddc:	4b05      	ldr	r3, [pc, #20]	@ (8004df4 <LL_EXTI_EnableIT_0_31+0x20>)
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	4904      	ldr	r1, [pc, #16]	@ (8004df4 <LL_EXTI_EnableIT_0_31+0x20>)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4313      	orrs	r3, r2
 8004de6:	600b      	str	r3, [r1, #0]
}
 8004de8:	bf00      	nop
 8004dea:	370c      	adds	r7, #12
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr
 8004df4:	40010400 	.word	0x40010400

08004df8 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b083      	sub	sp, #12
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8004e00:	4b06      	ldr	r3, [pc, #24]	@ (8004e1c <LL_EXTI_DisableIT_0_31+0x24>)
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	43db      	mvns	r3, r3
 8004e08:	4904      	ldr	r1, [pc, #16]	@ (8004e1c <LL_EXTI_DisableIT_0_31+0x24>)
 8004e0a:	4013      	ands	r3, r2
 8004e0c:	600b      	str	r3, [r1, #0]
}
 8004e0e:	bf00      	nop
 8004e10:	370c      	adds	r7, #12
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr
 8004e1a:	bf00      	nop
 8004e1c:	40010400 	.word	0x40010400

08004e20 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b083      	sub	sp, #12
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8004e28:	4b05      	ldr	r3, [pc, #20]	@ (8004e40 <LL_EXTI_EnableEvent_0_31+0x20>)
 8004e2a:	685a      	ldr	r2, [r3, #4]
 8004e2c:	4904      	ldr	r1, [pc, #16]	@ (8004e40 <LL_EXTI_EnableEvent_0_31+0x20>)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4313      	orrs	r3, r2
 8004e32:	604b      	str	r3, [r1, #4]

}
 8004e34:	bf00      	nop
 8004e36:	370c      	adds	r7, #12
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr
 8004e40:	40010400 	.word	0x40010400

08004e44 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8004e4c:	4b06      	ldr	r3, [pc, #24]	@ (8004e68 <LL_EXTI_DisableEvent_0_31+0x24>)
 8004e4e:	685a      	ldr	r2, [r3, #4]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	43db      	mvns	r3, r3
 8004e54:	4904      	ldr	r1, [pc, #16]	@ (8004e68 <LL_EXTI_DisableEvent_0_31+0x24>)
 8004e56:	4013      	ands	r3, r2
 8004e58:	604b      	str	r3, [r1, #4]
}
 8004e5a:	bf00      	nop
 8004e5c:	370c      	adds	r7, #12
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr
 8004e66:	bf00      	nop
 8004e68:	40010400 	.word	0x40010400

08004e6c <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b083      	sub	sp, #12
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8004e74:	4b05      	ldr	r3, [pc, #20]	@ (8004e8c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8004e76:	689a      	ldr	r2, [r3, #8]
 8004e78:	4904      	ldr	r1, [pc, #16]	@ (8004e8c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	608b      	str	r3, [r1, #8]

}
 8004e80:	bf00      	nop
 8004e82:	370c      	adds	r7, #12
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr
 8004e8c:	40010400 	.word	0x40010400

08004e90 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b083      	sub	sp, #12
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8004e98:	4b06      	ldr	r3, [pc, #24]	@ (8004eb4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8004e9a:	689a      	ldr	r2, [r3, #8]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	43db      	mvns	r3, r3
 8004ea0:	4904      	ldr	r1, [pc, #16]	@ (8004eb4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	608b      	str	r3, [r1, #8]

}
 8004ea6:	bf00      	nop
 8004ea8:	370c      	adds	r7, #12
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr
 8004eb2:	bf00      	nop
 8004eb4:	40010400 	.word	0x40010400

08004eb8 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b083      	sub	sp, #12
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8004ec0:	4b05      	ldr	r3, [pc, #20]	@ (8004ed8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8004ec2:	68da      	ldr	r2, [r3, #12]
 8004ec4:	4904      	ldr	r1, [pc, #16]	@ (8004ed8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	60cb      	str	r3, [r1, #12]
}
 8004ecc:	bf00      	nop
 8004ece:	370c      	adds	r7, #12
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr
 8004ed8:	40010400 	.word	0x40010400

08004edc <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b083      	sub	sp, #12
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8004ee4:	4b06      	ldr	r3, [pc, #24]	@ (8004f00 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8004ee6:	68da      	ldr	r2, [r3, #12]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	43db      	mvns	r3, r3
 8004eec:	4904      	ldr	r1, [pc, #16]	@ (8004f00 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8004eee:	4013      	ands	r3, r2
 8004ef0:	60cb      	str	r3, [r1, #12]
}
 8004ef2:	bf00      	nop
 8004ef4:	370c      	adds	r7, #12
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr
 8004efe:	bf00      	nop
 8004f00:	40010400 	.word	0x40010400

08004f04 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b083      	sub	sp, #12
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8004f0c:	4b07      	ldr	r3, [pc, #28]	@ (8004f2c <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8004f0e:	695a      	ldr	r2, [r3, #20]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	4013      	ands	r3, r2
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d101      	bne.n	8004f1e <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e000      	b.n	8004f20 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8004f1e:	2300      	movs	r3, #0
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	370c      	adds	r7, #12
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr
 8004f2c:	40010400 	.word	0x40010400

08004f30 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b083      	sub	sp, #12
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8004f38:	4a04      	ldr	r2, [pc, #16]	@ (8004f4c <LL_EXTI_ClearFlag_0_31+0x1c>)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6153      	str	r3, [r2, #20]
}
 8004f3e:	bf00      	nop
 8004f40:	370c      	adds	r7, #12
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr
 8004f4a:	bf00      	nop
 8004f4c:	40010400 	.word	0x40010400

08004f50 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b088      	sub	sp, #32
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d102      	bne.n	8004f6c <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	77fb      	strb	r3, [r7, #31]
 8004f6a:	e0bc      	b.n	80050e6 <HAL_COMP_Init+0x196>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004f76:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004f7a:	d102      	bne.n	8004f82 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	77fb      	strb	r3, [r7, #31]
 8004f80:	e0b1      	b.n	80050e6 <HAL_COMP_Init+0x196>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if (hcomp->State == HAL_COMP_STATE_RESET)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	7f5b      	ldrb	r3, [r3, #29]
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d108      	bne.n	8004f9e <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2200      	movs	r2, #0
 8004f96:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f7fc f9d9 	bl	8001350 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004fa8:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.InputMinus
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	695b      	ldr	r3, [r3, #20]
 8004fb8:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	68db      	ldr	r3, [r3, #12]
 8004fbe:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (hcomp->Init.InputMinus
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	4b48      	ldr	r3, [pc, #288]	@ (80050f0 <HAL_COMP_Init+0x1a0>)
 8004fd0:	4013      	ands	r3, r2
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	6812      	ldr	r2, [r2, #0]
 8004fd6:	6979      	ldr	r1, [r7, #20]
 8004fd8:	430b      	orrs	r3, r1
 8004fda:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d016      	beq.n	8005018 <HAL_COMP_Init+0xc8>
 8004fea:	69bb      	ldr	r3, [r7, #24]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d113      	bne.n	8005018 <HAL_COMP_Init+0xc8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004ff0:	4b40      	ldr	r3, [pc, #256]	@ (80050f4 <HAL_COMP_Init+0x1a4>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	099b      	lsrs	r3, r3, #6
 8004ff6:	4a40      	ldr	r2, [pc, #256]	@ (80050f8 <HAL_COMP_Init+0x1a8>)
 8004ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8004ffc:	099b      	lsrs	r3, r3, #6
 8004ffe:	1c5a      	adds	r2, r3, #1
 8005000:	4613      	mov	r3, r2
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	4413      	add	r3, r2
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 800500a:	e002      	b.n	8005012 <HAL_COMP_Init+0xc2>
      {
        wait_loop_index--;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	3b01      	subs	r3, #1
 8005010:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d1f9      	bne.n	800500c <HAL_COMP_Init+0xbc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a37      	ldr	r2, [pc, #220]	@ (80050fc <HAL_COMP_Init+0x1ac>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d012      	beq.n	8005048 <HAL_COMP_Init+0xf8>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a36      	ldr	r2, [pc, #216]	@ (8005100 <HAL_COMP_Init+0x1b0>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d00a      	beq.n	8005042 <HAL_COMP_Init+0xf2>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a34      	ldr	r2, [pc, #208]	@ (8005104 <HAL_COMP_Init+0x1b4>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d102      	bne.n	800503c <HAL_COMP_Init+0xec>
 8005036:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800503a:	e007      	b.n	800504c <HAL_COMP_Init+0xfc>
 800503c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005040:	e004      	b.n	800504c <HAL_COMP_Init+0xfc>
 8005042:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005046:	e001      	b.n	800504c <HAL_COMP_Init+0xfc>
 8005048:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800504c:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	699b      	ldr	r3, [r3, #24]
 8005052:	f003 0303 	and.w	r3, r3, #3
 8005056:	2b00      	cmp	r3, #0
 8005058:	d037      	beq.n	80050ca <HAL_COMP_Init+0x17a>
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	699b      	ldr	r3, [r3, #24]
 800505e:	f003 0310 	and.w	r3, r3, #16
 8005062:	2b00      	cmp	r3, #0
 8005064:	d003      	beq.n	800506e <HAL_COMP_Init+0x11e>
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8005066:	6938      	ldr	r0, [r7, #16]
 8005068:	f7ff ff00 	bl	8004e6c <LL_EXTI_EnableRisingTrig_0_31>
 800506c:	e002      	b.n	8005074 <HAL_COMP_Init+0x124>
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 800506e:	6938      	ldr	r0, [r7, #16]
 8005070:	f7ff ff0e 	bl	8004e90 <LL_EXTI_DisableRisingTrig_0_31>
#endif /* COMP7 */
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	699b      	ldr	r3, [r3, #24]
 8005078:	f003 0320 	and.w	r3, r3, #32
 800507c:	2b00      	cmp	r3, #0
 800507e:	d003      	beq.n	8005088 <HAL_COMP_Init+0x138>
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8005080:	6938      	ldr	r0, [r7, #16]
 8005082:	f7ff ff19 	bl	8004eb8 <LL_EXTI_EnableFallingTrig_0_31>
 8005086:	e002      	b.n	800508e <HAL_COMP_Init+0x13e>
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8005088:	6938      	ldr	r0, [r7, #16]
 800508a:	f7ff ff27 	bl	8004edc <LL_EXTI_DisableFallingTrig_0_31>
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
      }
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
 800508e:	6938      	ldr	r0, [r7, #16]
 8005090:	f7ff ff4e 	bl	8004f30 <LL_EXTI_ClearFlag_0_31>
#endif /* COMP7 */

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	699b      	ldr	r3, [r3, #24]
 8005098:	f003 0302 	and.w	r3, r3, #2
 800509c:	2b00      	cmp	r3, #0
 800509e:	d003      	beq.n	80050a8 <HAL_COMP_Init+0x158>
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
        }
#else
        LL_EXTI_EnableEvent_0_31(exti_line);
 80050a0:	6938      	ldr	r0, [r7, #16]
 80050a2:	f7ff febd 	bl	8004e20 <LL_EXTI_EnableEvent_0_31>
 80050a6:	e002      	b.n	80050ae <HAL_COMP_Init+0x15e>
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
        }
#else
        LL_EXTI_DisableEvent_0_31(exti_line);
 80050a8:	6938      	ldr	r0, [r7, #16]
 80050aa:	f7ff fecb 	bl	8004e44 <LL_EXTI_DisableEvent_0_31>
#endif /* COMP7 */
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	699b      	ldr	r3, [r3, #24]
 80050b2:	f003 0301 	and.w	r3, r3, #1
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d003      	beq.n	80050c2 <HAL_COMP_Init+0x172>
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
        }
#else
        LL_EXTI_EnableIT_0_31(exti_line);
 80050ba:	6938      	ldr	r0, [r7, #16]
 80050bc:	f7ff fe8a 	bl	8004dd4 <LL_EXTI_EnableIT_0_31>
 80050c0:	e009      	b.n	80050d6 <HAL_COMP_Init+0x186>
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
        }
#else
        LL_EXTI_DisableIT_0_31(exti_line);
 80050c2:	6938      	ldr	r0, [r7, #16]
 80050c4:	f7ff fe98 	bl	8004df8 <LL_EXTI_DisableIT_0_31>
 80050c8:	e005      	b.n	80050d6 <HAL_COMP_Init+0x186>
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
      }
#else
      LL_EXTI_DisableEvent_0_31(exti_line);
 80050ca:	6938      	ldr	r0, [r7, #16]
 80050cc:	f7ff feba 	bl	8004e44 <LL_EXTI_DisableEvent_0_31>
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
      }
#else
      LL_EXTI_DisableIT_0_31(exti_line);
 80050d0:	6938      	ldr	r0, [r7, #16]
 80050d2:	f7ff fe91 	bl	8004df8 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	7f5b      	ldrb	r3, [r3, #29]
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d102      	bne.n	80050e6 <HAL_COMP_Init+0x196>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 80050e6:	7ffb      	ldrb	r3, [r7, #31]
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3720      	adds	r7, #32
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}
 80050f0:	ff007e0f 	.word	0xff007e0f
 80050f4:	20000000 	.word	0x20000000
 80050f8:	053e2d63 	.word	0x053e2d63
 80050fc:	40010200 	.word	0x40010200
 8005100:	40010204 	.word	0x40010204
 8005104:	40010208 	.word	0x40010208

08005108 <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 8005108:	b480      	push	{r7}
 800510a:	b085      	sub	sp, #20
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 8005110:	2300      	movs	r3, #0
 8005112:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005114:	2300      	movs	r3, #0
 8005116:	73fb      	strb	r3, [r7, #15]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d102      	bne.n	8005124 <HAL_COMP_Start+0x1c>
  {
    status = HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	73fb      	strb	r3, [r7, #15]
 8005122:	e02e      	b.n	8005182 <HAL_COMP_Start+0x7a>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800512e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005132:	d102      	bne.n	800513a <HAL_COMP_Start+0x32>
  {
    status = HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	73fb      	strb	r3, [r7, #15]
 8005138:	e023      	b.n	8005182 <HAL_COMP_Start+0x7a>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if (hcomp->State == HAL_COMP_STATE_READY)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	7f5b      	ldrb	r3, [r3, #29]
 800513e:	b2db      	uxtb	r3, r3
 8005140:	2b01      	cmp	r3, #1
 8005142:	d11c      	bne.n	800517e <HAL_COMP_Start+0x76>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f042 0201 	orr.w	r2, r2, #1
 8005152:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2202      	movs	r2, #2
 8005158:	775a      	strb	r2, [r3, #29]
      /* Note: Variable divided by 2 to compensate partially                  */
      /*       CPU processing cycles.                                         */
      /* Note: In case of system low frequency (below 1Mhz), short delay      */
      /*       of startup time (few us) is within CPU processing cycles       */
      /*       of following instructions.                                     */
      wait_loop_index = (COMP_DELAY_STARTUP_US * (SystemCoreClock / (1000000UL * 2UL)));
 800515a:	4b0d      	ldr	r3, [pc, #52]	@ (8005190 <HAL_COMP_Start+0x88>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a0d      	ldr	r2, [pc, #52]	@ (8005194 <HAL_COMP_Start+0x8c>)
 8005160:	fba2 2303 	umull	r2, r3, r2, r3
 8005164:	0cda      	lsrs	r2, r3, #19
 8005166:	4613      	mov	r3, r2
 8005168:	009b      	lsls	r3, r3, #2
 800516a:	4413      	add	r3, r2
 800516c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800516e:	e002      	b.n	8005176 <HAL_COMP_Start+0x6e>
      {
        wait_loop_index--;
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	3b01      	subs	r3, #1
 8005174:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d1f9      	bne.n	8005170 <HAL_COMP_Start+0x68>
 800517c:	e001      	b.n	8005182 <HAL_COMP_Start+0x7a>
      }
    }
    else
    {
      status = HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005182:	7bfb      	ldrb	r3, [r7, #15]
}
 8005184:	4618      	mov	r0, r3
 8005186:	3714      	adds	r7, #20
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr
 8005190:	20000000 	.word	0x20000000
 8005194:	431bde83 	.word	0x431bde83

08005198 <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ handler.
  * @param  hcomp  COMP handle
  * @retval None
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b084      	sub	sp, #16
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a17      	ldr	r2, [pc, #92]	@ (8005204 <HAL_COMP_IRQHandler+0x6c>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d012      	beq.n	80051d0 <HAL_COMP_IRQHandler+0x38>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a16      	ldr	r2, [pc, #88]	@ (8005208 <HAL_COMP_IRQHandler+0x70>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d00a      	beq.n	80051ca <HAL_COMP_IRQHandler+0x32>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a14      	ldr	r2, [pc, #80]	@ (800520c <HAL_COMP_IRQHandler+0x74>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d102      	bne.n	80051c4 <HAL_COMP_IRQHandler+0x2c>
 80051be:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80051c2:	e007      	b.n	80051d4 <HAL_COMP_IRQHandler+0x3c>
 80051c4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80051c8:	e004      	b.n	80051d4 <HAL_COMP_IRQHandler+0x3c>
 80051ca:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80051ce:	e001      	b.n	80051d4 <HAL_COMP_IRQHandler+0x3c>
 80051d0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80051d4:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_comp_exti_flag_set = 0UL;
 80051d6:	2300      	movs	r3, #0
 80051d8:	60fb      	str	r3, [r7, #12]
    {
      tmp_comp_exti_flag_set = 1UL;
    }
  }
#else
  if (LL_EXTI_IsActiveFlag_0_31(exti_line) != 0UL)
 80051da:	68b8      	ldr	r0, [r7, #8]
 80051dc:	f7ff fe92 	bl	8004f04 <LL_EXTI_IsActiveFlag_0_31>
 80051e0:	4603      	mov	r3, r0
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d001      	beq.n	80051ea <HAL_COMP_IRQHandler+0x52>
  {
    tmp_comp_exti_flag_set = 1UL;
 80051e6:	2301      	movs	r3, #1
 80051e8:	60fb      	str	r3, [r7, #12]
  }
#endif /* COMP7 */

  if (tmp_comp_exti_flag_set != 0UL)
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d005      	beq.n	80051fc <HAL_COMP_IRQHandler+0x64>
    else
    {
      LL_EXTI_ClearFlag_0_31(exti_line);
    }
#else
    LL_EXTI_ClearFlag_0_31(exti_line);
 80051f0:	68b8      	ldr	r0, [r7, #8]
 80051f2:	f7ff fe9d 	bl	8004f30 <LL_EXTI_ClearFlag_0_31>

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f000 f80a 	bl	8005210 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }
}
 80051fc:	bf00      	nop
 80051fe:	3710      	adds	r7, #16
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}
 8005204:	40010200 	.word	0x40010200
 8005208:	40010204 	.word	0x40010204
 800520c:	40010208 	.word	0x40010208

08005210 <HAL_COMP_TriggerCallback>:
  * @brief  Comparator trigger callback.
  * @param  hcomp  COMP handle
  * @retval None
  */
__weak void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp)
{
 8005210:	b480      	push	{r7}
 8005212:	b083      	sub	sp, #12
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  UNUSED(hcomp);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_COMP_TriggerCallback should be implemented in the user file
   */
}
 8005218:	bf00      	nop
 800521a:	370c      	adds	r7, #12
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr

08005224 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005224:	b480      	push	{r7}
 8005226:	b085      	sub	sp, #20
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f003 0307 	and.w	r3, r3, #7
 8005232:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005234:	4b0c      	ldr	r3, [pc, #48]	@ (8005268 <__NVIC_SetPriorityGrouping+0x44>)
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800523a:	68ba      	ldr	r2, [r7, #8]
 800523c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005240:	4013      	ands	r3, r2
 8005242:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800524c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005250:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005254:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005256:	4a04      	ldr	r2, [pc, #16]	@ (8005268 <__NVIC_SetPriorityGrouping+0x44>)
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	60d3      	str	r3, [r2, #12]
}
 800525c:	bf00      	nop
 800525e:	3714      	adds	r7, #20
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr
 8005268:	e000ed00 	.word	0xe000ed00

0800526c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800526c:	b480      	push	{r7}
 800526e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005270:	4b04      	ldr	r3, [pc, #16]	@ (8005284 <__NVIC_GetPriorityGrouping+0x18>)
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	0a1b      	lsrs	r3, r3, #8
 8005276:	f003 0307 	and.w	r3, r3, #7
}
 800527a:	4618      	mov	r0, r3
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr
 8005284:	e000ed00 	.word	0xe000ed00

08005288 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005288:	b480      	push	{r7}
 800528a:	b083      	sub	sp, #12
 800528c:	af00      	add	r7, sp, #0
 800528e:	4603      	mov	r3, r0
 8005290:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005296:	2b00      	cmp	r3, #0
 8005298:	db0b      	blt.n	80052b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800529a:	79fb      	ldrb	r3, [r7, #7]
 800529c:	f003 021f 	and.w	r2, r3, #31
 80052a0:	4907      	ldr	r1, [pc, #28]	@ (80052c0 <__NVIC_EnableIRQ+0x38>)
 80052a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052a6:	095b      	lsrs	r3, r3, #5
 80052a8:	2001      	movs	r0, #1
 80052aa:	fa00 f202 	lsl.w	r2, r0, r2
 80052ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80052b2:	bf00      	nop
 80052b4:	370c      	adds	r7, #12
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr
 80052be:	bf00      	nop
 80052c0:	e000e100 	.word	0xe000e100

080052c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b083      	sub	sp, #12
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	4603      	mov	r3, r0
 80052cc:	6039      	str	r1, [r7, #0]
 80052ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80052d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	db0a      	blt.n	80052ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	b2da      	uxtb	r2, r3
 80052dc:	490c      	ldr	r1, [pc, #48]	@ (8005310 <__NVIC_SetPriority+0x4c>)
 80052de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052e2:	0112      	lsls	r2, r2, #4
 80052e4:	b2d2      	uxtb	r2, r2
 80052e6:	440b      	add	r3, r1
 80052e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80052ec:	e00a      	b.n	8005304 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	b2da      	uxtb	r2, r3
 80052f2:	4908      	ldr	r1, [pc, #32]	@ (8005314 <__NVIC_SetPriority+0x50>)
 80052f4:	79fb      	ldrb	r3, [r7, #7]
 80052f6:	f003 030f 	and.w	r3, r3, #15
 80052fa:	3b04      	subs	r3, #4
 80052fc:	0112      	lsls	r2, r2, #4
 80052fe:	b2d2      	uxtb	r2, r2
 8005300:	440b      	add	r3, r1
 8005302:	761a      	strb	r2, [r3, #24]
}
 8005304:	bf00      	nop
 8005306:	370c      	adds	r7, #12
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr
 8005310:	e000e100 	.word	0xe000e100
 8005314:	e000ed00 	.word	0xe000ed00

08005318 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005318:	b480      	push	{r7}
 800531a:	b089      	sub	sp, #36	@ 0x24
 800531c:	af00      	add	r7, sp, #0
 800531e:	60f8      	str	r0, [r7, #12]
 8005320:	60b9      	str	r1, [r7, #8]
 8005322:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f003 0307 	and.w	r3, r3, #7
 800532a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800532c:	69fb      	ldr	r3, [r7, #28]
 800532e:	f1c3 0307 	rsb	r3, r3, #7
 8005332:	2b04      	cmp	r3, #4
 8005334:	bf28      	it	cs
 8005336:	2304      	movcs	r3, #4
 8005338:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800533a:	69fb      	ldr	r3, [r7, #28]
 800533c:	3304      	adds	r3, #4
 800533e:	2b06      	cmp	r3, #6
 8005340:	d902      	bls.n	8005348 <NVIC_EncodePriority+0x30>
 8005342:	69fb      	ldr	r3, [r7, #28]
 8005344:	3b03      	subs	r3, #3
 8005346:	e000      	b.n	800534a <NVIC_EncodePriority+0x32>
 8005348:	2300      	movs	r3, #0
 800534a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800534c:	f04f 32ff 	mov.w	r2, #4294967295
 8005350:	69bb      	ldr	r3, [r7, #24]
 8005352:	fa02 f303 	lsl.w	r3, r2, r3
 8005356:	43da      	mvns	r2, r3
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	401a      	ands	r2, r3
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005360:	f04f 31ff 	mov.w	r1, #4294967295
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	fa01 f303 	lsl.w	r3, r1, r3
 800536a:	43d9      	mvns	r1, r3
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005370:	4313      	orrs	r3, r2
         );
}
 8005372:	4618      	mov	r0, r3
 8005374:	3724      	adds	r7, #36	@ 0x24
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr
	...

08005380 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b082      	sub	sp, #8
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	3b01      	subs	r3, #1
 800538c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005390:	d301      	bcc.n	8005396 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005392:	2301      	movs	r3, #1
 8005394:	e00f      	b.n	80053b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005396:	4a0a      	ldr	r2, [pc, #40]	@ (80053c0 <SysTick_Config+0x40>)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	3b01      	subs	r3, #1
 800539c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800539e:	210f      	movs	r1, #15
 80053a0:	f04f 30ff 	mov.w	r0, #4294967295
 80053a4:	f7ff ff8e 	bl	80052c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80053a8:	4b05      	ldr	r3, [pc, #20]	@ (80053c0 <SysTick_Config+0x40>)
 80053aa:	2200      	movs	r2, #0
 80053ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80053ae:	4b04      	ldr	r3, [pc, #16]	@ (80053c0 <SysTick_Config+0x40>)
 80053b0:	2207      	movs	r2, #7
 80053b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80053b4:	2300      	movs	r3, #0
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3708      	adds	r7, #8
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}
 80053be:	bf00      	nop
 80053c0:	e000e010 	.word	0xe000e010

080053c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b082      	sub	sp, #8
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f7ff ff29 	bl	8005224 <__NVIC_SetPriorityGrouping>
}
 80053d2:	bf00      	nop
 80053d4:	3708      	adds	r7, #8
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}

080053da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80053da:	b580      	push	{r7, lr}
 80053dc:	b086      	sub	sp, #24
 80053de:	af00      	add	r7, sp, #0
 80053e0:	4603      	mov	r3, r0
 80053e2:	60b9      	str	r1, [r7, #8]
 80053e4:	607a      	str	r2, [r7, #4]
 80053e6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80053e8:	f7ff ff40 	bl	800526c <__NVIC_GetPriorityGrouping>
 80053ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	68b9      	ldr	r1, [r7, #8]
 80053f2:	6978      	ldr	r0, [r7, #20]
 80053f4:	f7ff ff90 	bl	8005318 <NVIC_EncodePriority>
 80053f8:	4602      	mov	r2, r0
 80053fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80053fe:	4611      	mov	r1, r2
 8005400:	4618      	mov	r0, r3
 8005402:	f7ff ff5f 	bl	80052c4 <__NVIC_SetPriority>
}
 8005406:	bf00      	nop
 8005408:	3718      	adds	r7, #24
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}

0800540e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800540e:	b580      	push	{r7, lr}
 8005410:	b082      	sub	sp, #8
 8005412:	af00      	add	r7, sp, #0
 8005414:	4603      	mov	r3, r0
 8005416:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005418:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800541c:	4618      	mov	r0, r3
 800541e:	f7ff ff33 	bl	8005288 <__NVIC_EnableIRQ>
}
 8005422:	bf00      	nop
 8005424:	3708      	adds	r7, #8
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}

0800542a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800542a:	b580      	push	{r7, lr}
 800542c:	b082      	sub	sp, #8
 800542e:	af00      	add	r7, sp, #0
 8005430:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f7ff ffa4 	bl	8005380 <SysTick_Config>
 8005438:	4603      	mov	r3, r0
}
 800543a:	4618      	mov	r0, r3
 800543c:	3708      	adds	r7, #8
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}

08005442 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005442:	b580      	push	{r7, lr}
 8005444:	b082      	sub	sp, #8
 8005446:	af00      	add	r7, sp, #0
 8005448:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d101      	bne.n	8005454 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	e014      	b.n	800547e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	791b      	ldrb	r3, [r3, #4]
 8005458:	b2db      	uxtb	r3, r3
 800545a:	2b00      	cmp	r3, #0
 800545c:	d105      	bne.n	800546a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f7fc f823 	bl	80014b0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2202      	movs	r2, #2
 800546e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2201      	movs	r2, #1
 800547a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800547c:	2300      	movs	r3, #0
}
 800547e:	4618      	mov	r0, r3
 8005480:	3708      	adds	r7, #8
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
	...

08005488 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005488:	b480      	push	{r7}
 800548a:	b085      	sub	sp, #20
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
 8005490:	6039      	str	r1, [r7, #0]
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d101      	bne.n	800549c <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	e056      	b.n	800554a <HAL_DAC_Start+0xc2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	795b      	ldrb	r3, [r3, #5]
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d101      	bne.n	80054a8 <HAL_DAC_Start+0x20>
 80054a4:	2302      	movs	r3, #2
 80054a6:	e050      	b.n	800554a <HAL_DAC_Start+0xc2>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2201      	movs	r2, #1
 80054ac:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2202      	movs	r2, #2
 80054b2:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	6819      	ldr	r1, [r3, #0]
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	f003 0310 	and.w	r3, r3, #16
 80054c0:	2201      	movs	r2, #1
 80054c2:	409a      	lsls	r2, r3
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	430a      	orrs	r2, r1
 80054ca:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  /* Wait loop initialization and execution */
  /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed 32 */
  /*       bits register capacity and handle low frequency. */
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80054cc:	4b22      	ldr	r3, [pc, #136]	@ (8005558 <HAL_DAC_Start+0xd0>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	099b      	lsrs	r3, r3, #6
 80054d2:	4a22      	ldr	r2, [pc, #136]	@ (800555c <HAL_DAC_Start+0xd4>)
 80054d4:	fba2 2303 	umull	r2, r3, r2, r3
 80054d8:	099b      	lsrs	r3, r3, #6
 80054da:	3301      	adds	r3, #1
 80054dc:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 80054de:	e002      	b.n	80054e6 <HAL_DAC_Start+0x5e>
  {
    wait_loop_index--;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	3b01      	subs	r3, #1
 80054e4:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d1f9      	bne.n	80054e0 <HAL_DAC_Start+0x58>
  }

  if (Channel == DAC_CHANNEL_1)
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d10f      	bne.n	8005512 <HAL_DAC_Start+0x8a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80054fc:	2b02      	cmp	r3, #2
 80054fe:	d11d      	bne.n	800553c <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	685a      	ldr	r2, [r3, #4]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f042 0201 	orr.w	r2, r2, #1
 800550e:	605a      	str	r2, [r3, #4]
 8005510:	e014      	b.n	800553c <HAL_DAC_Start+0xb4>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	f003 0310 	and.w	r3, r3, #16
 8005522:	2102      	movs	r1, #2
 8005524:	fa01 f303 	lsl.w	r3, r1, r3
 8005528:	429a      	cmp	r2, r3
 800552a:	d107      	bne.n	800553c <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	685a      	ldr	r2, [r3, #4]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f042 0202 	orr.w	r2, r2, #2
 800553a:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2201      	movs	r2, #1
 8005540:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005548:	2300      	movs	r3, #0
}
 800554a:	4618      	mov	r0, r3
 800554c:	3714      	adds	r7, #20
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr
 8005556:	bf00      	nop
 8005558:	20000000 	.word	0x20000000
 800555c:	053e2d63 	.word	0x053e2d63

08005560 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8005560:	b480      	push	{r7}
 8005562:	b087      	sub	sp, #28
 8005564:	af00      	add	r7, sp, #0
 8005566:	60f8      	str	r0, [r7, #12]
 8005568:	60b9      	str	r1, [r7, #8]
 800556a:	607a      	str	r2, [r7, #4]
 800556c:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800556e:	2300      	movs	r3, #0
 8005570:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d101      	bne.n	800557c <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	e018      	b.n	80055ae <HAL_DAC_SetValue+0x4e>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d105      	bne.n	800559a <HAL_DAC_SetValue+0x3a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800558e:	697a      	ldr	r2, [r7, #20]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	4413      	add	r3, r2
 8005594:	3308      	adds	r3, #8
 8005596:	617b      	str	r3, [r7, #20]
 8005598:	e004      	b.n	80055a4 <HAL_DAC_SetValue+0x44>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800559a:	697a      	ldr	r2, [r7, #20]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	4413      	add	r3, r2
 80055a0:	3314      	adds	r3, #20
 80055a2:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	461a      	mov	r2, r3
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80055ac:	2300      	movs	r3, #0
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	371c      	adds	r7, #28
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr
	...

080055bc <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b08a      	sub	sp, #40	@ 0x28
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	60f8      	str	r0, [r7, #12]
 80055c4:	60b9      	str	r1, [r7, #8]
 80055c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055c8:	2300      	movs	r3, #0
 80055ca:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d002      	beq.n	80055d8 <HAL_DAC_ConfigChannel+0x1c>
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d101      	bne.n	80055dc <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	e19e      	b.n	800591a <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	795b      	ldrb	r3, [r3, #5]
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d101      	bne.n	80055e8 <HAL_DAC_ConfigChannel+0x2c>
 80055e4:	2302      	movs	r3, #2
 80055e6:	e198      	b.n	800591a <HAL_DAC_ConfigChannel+0x35e>
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2201      	movs	r2, #1
 80055ec:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2202      	movs	r2, #2
 80055f2:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	2b04      	cmp	r3, #4
 80055fa:	d17a      	bne.n	80056f2 <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80055fc:	f7fc ffb2 	bl	8002564 <HAL_GetTick>
 8005600:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d13d      	bne.n	8005684 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005608:	e018      	b.n	800563c <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800560a:	f7fc ffab 	bl	8002564 <HAL_GetTick>
 800560e:	4602      	mov	r2, r0
 8005610:	69bb      	ldr	r3, [r7, #24]
 8005612:	1ad3      	subs	r3, r2, r3
 8005614:	2b01      	cmp	r3, #1
 8005616:	d911      	bls.n	800563c <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800561e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005622:	2b00      	cmp	r3, #0
 8005624:	d00a      	beq.n	800563c <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	691b      	ldr	r3, [r3, #16]
 800562a:	f043 0208 	orr.w	r2, r3, #8
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2203      	movs	r2, #3
 8005636:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005638:	2303      	movs	r3, #3
 800563a:	e16e      	b.n	800591a <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005642:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005646:	2b00      	cmp	r3, #0
 8005648:	d1df      	bne.n	800560a <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	68ba      	ldr	r2, [r7, #8]
 8005650:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005652:	641a      	str	r2, [r3, #64]	@ 0x40
 8005654:	e020      	b.n	8005698 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005656:	f7fc ff85 	bl	8002564 <HAL_GetTick>
 800565a:	4602      	mov	r2, r0
 800565c:	69bb      	ldr	r3, [r7, #24]
 800565e:	1ad3      	subs	r3, r2, r3
 8005660:	2b01      	cmp	r3, #1
 8005662:	d90f      	bls.n	8005684 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800566a:	2b00      	cmp	r3, #0
 800566c:	da0a      	bge.n	8005684 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	f043 0208 	orr.w	r2, r3, #8
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2203      	movs	r2, #3
 800567e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005680:	2303      	movs	r3, #3
 8005682:	e14a      	b.n	800591a <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800568a:	2b00      	cmp	r3, #0
 800568c:	dbe3      	blt.n	8005656 <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	68ba      	ldr	r2, [r7, #8]
 8005694:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005696:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f003 0310 	and.w	r3, r3, #16
 80056a4:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80056a8:	fa01 f303 	lsl.w	r3, r1, r3
 80056ac:	43db      	mvns	r3, r3
 80056ae:	ea02 0103 	and.w	r1, r2, r3
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f003 0310 	and.w	r3, r3, #16
 80056bc:	409a      	lsls	r2, r3
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	430a      	orrs	r2, r1
 80056c4:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f003 0310 	and.w	r3, r3, #16
 80056d2:	21ff      	movs	r1, #255	@ 0xff
 80056d4:	fa01 f303 	lsl.w	r3, r1, r3
 80056d8:	43db      	mvns	r3, r3
 80056da:	ea02 0103 	and.w	r1, r2, r3
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f003 0310 	and.w	r3, r3, #16
 80056e8:	409a      	lsls	r2, r3
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	430a      	orrs	r2, r1
 80056f0:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	69db      	ldr	r3, [r3, #28]
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d11d      	bne.n	8005736 <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005700:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f003 0310 	and.w	r3, r3, #16
 8005708:	221f      	movs	r2, #31
 800570a:	fa02 f303 	lsl.w	r3, r2, r3
 800570e:	43db      	mvns	r3, r3
 8005710:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005712:	4013      	ands	r3, r2
 8005714:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	6a1b      	ldr	r3, [r3, #32]
 800571a:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f003 0310 	and.w	r3, r3, #16
 8005722:	697a      	ldr	r2, [r7, #20]
 8005724:	fa02 f303 	lsl.w	r3, r2, r3
 8005728:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800572a:	4313      	orrs	r3, r2
 800572c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005734:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800573c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f003 0310 	and.w	r3, r3, #16
 8005744:	2207      	movs	r2, #7
 8005746:	fa02 f303 	lsl.w	r3, r2, r3
 800574a:	43db      	mvns	r3, r3
 800574c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800574e:	4013      	ands	r3, r2
 8005750:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	699b      	ldr	r3, [r3, #24]
 8005756:	2b01      	cmp	r3, #1
 8005758:	d102      	bne.n	8005760 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 800575a:	2300      	movs	r3, #0
 800575c:	623b      	str	r3, [r7, #32]
 800575e:	e00f      	b.n	8005780 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	699b      	ldr	r3, [r3, #24]
 8005764:	2b02      	cmp	r3, #2
 8005766:	d102      	bne.n	800576e <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8005768:	2301      	movs	r3, #1
 800576a:	623b      	str	r3, [r7, #32]
 800576c:	e008      	b.n	8005780 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	695b      	ldr	r3, [r3, #20]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d102      	bne.n	800577c <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8005776:	2301      	movs	r3, #1
 8005778:	623b      	str	r3, [r7, #32]
 800577a:	e001      	b.n	8005780 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800577c:	2300      	movs	r3, #0
 800577e:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	689a      	ldr	r2, [r3, #8]
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	695b      	ldr	r3, [r3, #20]
 8005788:	4313      	orrs	r3, r2
 800578a:	6a3a      	ldr	r2, [r7, #32]
 800578c:	4313      	orrs	r3, r2
 800578e:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f003 0310 	and.w	r3, r3, #16
 8005796:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800579a:	fa02 f303 	lsl.w	r3, r2, r3
 800579e:	43db      	mvns	r3, r3
 80057a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057a2:	4013      	ands	r3, r2
 80057a4:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	791b      	ldrb	r3, [r3, #4]
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d102      	bne.n	80057b4 <HAL_DAC_ConfigChannel+0x1f8>
 80057ae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80057b2:	e000      	b.n	80057b6 <HAL_DAC_ConfigChannel+0x1fa>
 80057b4:	2300      	movs	r3, #0
 80057b6:	697a      	ldr	r2, [r7, #20]
 80057b8:	4313      	orrs	r3, r2
 80057ba:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f003 0310 	and.w	r3, r3, #16
 80057c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80057c6:	fa02 f303 	lsl.w	r3, r2, r3
 80057ca:	43db      	mvns	r3, r3
 80057cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057ce:	4013      	ands	r3, r2
 80057d0:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	795b      	ldrb	r3, [r3, #5]
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	d102      	bne.n	80057e0 <HAL_DAC_ConfigChannel+0x224>
 80057da:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80057de:	e000      	b.n	80057e2 <HAL_DAC_ConfigChannel+0x226>
 80057e0:	2300      	movs	r3, #0
 80057e2:	697a      	ldr	r2, [r7, #20]
 80057e4:	4313      	orrs	r3, r2
 80057e6:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80057e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ea:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80057ee:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	2b02      	cmp	r3, #2
 80057f6:	d114      	bne.n	8005822 <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80057f8:	f002 f834 	bl	8007864 <HAL_RCC_GetHCLKFreq>
 80057fc:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	4a48      	ldr	r2, [pc, #288]	@ (8005924 <HAL_DAC_ConfigChannel+0x368>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d904      	bls.n	8005810 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8005806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005808:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800580c:	627b      	str	r3, [r7, #36]	@ 0x24
 800580e:	e00f      	b.n	8005830 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	4a45      	ldr	r2, [pc, #276]	@ (8005928 <HAL_DAC_ConfigChannel+0x36c>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d90a      	bls.n	800582e <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8005818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800581a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800581e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005820:	e006      	b.n	8005830 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005828:	4313      	orrs	r3, r2
 800582a:	627b      	str	r3, [r7, #36]	@ 0x24
 800582c:	e000      	b.n	8005830 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 800582e:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f003 0310 	and.w	r3, r3, #16
 8005836:	697a      	ldr	r2, [r7, #20]
 8005838:	fa02 f303 	lsl.w	r3, r2, r3
 800583c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800583e:	4313      	orrs	r3, r2
 8005840:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005848:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	6819      	ldr	r1, [r3, #0]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f003 0310 	and.w	r3, r3, #16
 8005856:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800585a:	fa02 f303 	lsl.w	r3, r2, r3
 800585e:	43da      	mvns	r2, r3
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	400a      	ands	r2, r1
 8005866:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f003 0310 	and.w	r3, r3, #16
 8005876:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800587a:	fa02 f303 	lsl.w	r3, r2, r3
 800587e:	43db      	mvns	r3, r3
 8005880:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005882:	4013      	ands	r3, r2
 8005884:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	68db      	ldr	r3, [r3, #12]
 800588a:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f003 0310 	and.w	r3, r3, #16
 8005892:	697a      	ldr	r2, [r7, #20]
 8005894:	fa02 f303 	lsl.w	r3, r2, r3
 8005898:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800589a:	4313      	orrs	r3, r2
 800589c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058a4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	6819      	ldr	r1, [r3, #0]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f003 0310 	and.w	r3, r3, #16
 80058b2:	22c0      	movs	r2, #192	@ 0xc0
 80058b4:	fa02 f303 	lsl.w	r3, r2, r3
 80058b8:	43da      	mvns	r2, r3
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	400a      	ands	r2, r1
 80058c0:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	68db      	ldr	r3, [r3, #12]
 80058c6:	089b      	lsrs	r3, r3, #2
 80058c8:	f003 030f 	and.w	r3, r3, #15
 80058cc:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	691b      	ldr	r3, [r3, #16]
 80058d2:	089b      	lsrs	r3, r3, #2
 80058d4:	021b      	lsls	r3, r3, #8
 80058d6:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80058da:	697a      	ldr	r2, [r7, #20]
 80058dc:	4313      	orrs	r3, r2
 80058de:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f003 0310 	and.w	r3, r3, #16
 80058ec:	f640 710f 	movw	r1, #3855	@ 0xf0f
 80058f0:	fa01 f303 	lsl.w	r3, r1, r3
 80058f4:	43db      	mvns	r3, r3
 80058f6:	ea02 0103 	and.w	r1, r2, r3
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f003 0310 	and.w	r3, r3, #16
 8005900:	697a      	ldr	r2, [r7, #20]
 8005902:	409a      	lsls	r2, r3
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	430a      	orrs	r2, r1
 800590a:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2201      	movs	r2, #1
 8005910:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2200      	movs	r2, #0
 8005916:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8005918:	7ffb      	ldrb	r3, [r7, #31]
}
 800591a:	4618      	mov	r0, r3
 800591c:	3728      	adds	r7, #40	@ 0x28
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}
 8005922:	bf00      	nop
 8005924:	09896800 	.word	0x09896800
 8005928:	04c4b400 	.word	0x04c4b400

0800592c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b084      	sub	sp, #16
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d101      	bne.n	800593e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e08d      	b.n	8005a5a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	461a      	mov	r2, r3
 8005944:	4b47      	ldr	r3, [pc, #284]	@ (8005a64 <HAL_DMA_Init+0x138>)
 8005946:	429a      	cmp	r2, r3
 8005948:	d80f      	bhi.n	800596a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	461a      	mov	r2, r3
 8005950:	4b45      	ldr	r3, [pc, #276]	@ (8005a68 <HAL_DMA_Init+0x13c>)
 8005952:	4413      	add	r3, r2
 8005954:	4a45      	ldr	r2, [pc, #276]	@ (8005a6c <HAL_DMA_Init+0x140>)
 8005956:	fba2 2303 	umull	r2, r3, r2, r3
 800595a:	091b      	lsrs	r3, r3, #4
 800595c:	009a      	lsls	r2, r3, #2
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	4a42      	ldr	r2, [pc, #264]	@ (8005a70 <HAL_DMA_Init+0x144>)
 8005966:	641a      	str	r2, [r3, #64]	@ 0x40
 8005968:	e00e      	b.n	8005988 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	461a      	mov	r2, r3
 8005970:	4b40      	ldr	r3, [pc, #256]	@ (8005a74 <HAL_DMA_Init+0x148>)
 8005972:	4413      	add	r3, r2
 8005974:	4a3d      	ldr	r2, [pc, #244]	@ (8005a6c <HAL_DMA_Init+0x140>)
 8005976:	fba2 2303 	umull	r2, r3, r2, r3
 800597a:	091b      	lsrs	r3, r3, #4
 800597c:	009a      	lsls	r2, r3, #2
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4a3c      	ldr	r2, [pc, #240]	@ (8005a78 <HAL_DMA_Init+0x14c>)
 8005986:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2202      	movs	r2, #2
 800598c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800599e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059a2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80059ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	691b      	ldr	r3, [r3, #16]
 80059b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	699b      	ldr	r3, [r3, #24]
 80059be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80059c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6a1b      	ldr	r3, [r3, #32]
 80059ca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80059cc:	68fa      	ldr	r2, [r7, #12]
 80059ce:	4313      	orrs	r3, r2
 80059d0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	68fa      	ldr	r2, [r7, #12]
 80059d8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f000 fa76 	bl	8005ecc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80059e8:	d102      	bne.n	80059f0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2200      	movs	r2, #0
 80059ee:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	685a      	ldr	r2, [r3, #4]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059f8:	b2d2      	uxtb	r2, r2
 80059fa:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005a04:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d010      	beq.n	8005a30 <HAL_DMA_Init+0x104>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	2b04      	cmp	r3, #4
 8005a14:	d80c      	bhi.n	8005a30 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f000 fa96 	bl	8005f48 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a20:	2200      	movs	r2, #0
 8005a22:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a28:	687a      	ldr	r2, [r7, #4]
 8005a2a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005a2c:	605a      	str	r2, [r3, #4]
 8005a2e:	e008      	b.n	8005a42 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2200      	movs	r2, #0
 8005a34:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2200      	movs	r2, #0
 8005a46:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2200      	movs	r2, #0
 8005a54:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005a58:	2300      	movs	r3, #0
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3710      	adds	r7, #16
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}
 8005a62:	bf00      	nop
 8005a64:	40020407 	.word	0x40020407
 8005a68:	bffdfff8 	.word	0xbffdfff8
 8005a6c:	cccccccd 	.word	0xcccccccd
 8005a70:	40020000 	.word	0x40020000
 8005a74:	bffdfbf8 	.word	0xbffdfbf8
 8005a78:	40020400 	.word	0x40020400

08005a7c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b086      	sub	sp, #24
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	60f8      	str	r0, [r7, #12]
 8005a84:	60b9      	str	r1, [r7, #8]
 8005a86:	607a      	str	r2, [r7, #4]
 8005a88:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d101      	bne.n	8005a9c <HAL_DMA_Start_IT+0x20>
 8005a98:	2302      	movs	r3, #2
 8005a9a:	e066      	b.n	8005b6a <HAL_DMA_Start_IT+0xee>
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005aaa:	b2db      	uxtb	r3, r3
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d155      	bne.n	8005b5c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2202      	movs	r2, #2
 8005ab4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2200      	movs	r2, #0
 8005abc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f022 0201 	bic.w	r2, r2, #1
 8005acc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	687a      	ldr	r2, [r7, #4]
 8005ad2:	68b9      	ldr	r1, [r7, #8]
 8005ad4:	68f8      	ldr	r0, [r7, #12]
 8005ad6:	f000 f9bb 	bl	8005e50 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d008      	beq.n	8005af4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f042 020e 	orr.w	r2, r2, #14
 8005af0:	601a      	str	r2, [r3, #0]
 8005af2:	e00f      	b.n	8005b14 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f022 0204 	bic.w	r2, r2, #4
 8005b02:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f042 020a 	orr.w	r2, r2, #10
 8005b12:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d007      	beq.n	8005b32 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b2c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005b30:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d007      	beq.n	8005b4a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b44:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005b48:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f042 0201 	orr.w	r2, r2, #1
 8005b58:	601a      	str	r2, [r3, #0]
 8005b5a:	e005      	b.n	8005b68 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005b64:	2302      	movs	r3, #2
 8005b66:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005b68:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3718      	adds	r7, #24
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}

08005b72 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005b72:	b480      	push	{r7}
 8005b74:	b085      	sub	sp, #20
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005b84:	b2db      	uxtb	r3, r3
 8005b86:	2b02      	cmp	r3, #2
 8005b88:	d005      	beq.n	8005b96 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2204      	movs	r2, #4
 8005b8e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	73fb      	strb	r3, [r7, #15]
 8005b94:	e037      	b.n	8005c06 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f022 020e 	bic.w	r2, r2, #14
 8005ba4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bb0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005bb4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f022 0201 	bic.w	r2, r2, #1
 8005bc4:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bca:	f003 021f 	and.w	r2, r3, #31
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bd2:	2101      	movs	r1, #1
 8005bd4:	fa01 f202 	lsl.w	r2, r1, r2
 8005bd8:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bde:	687a      	ldr	r2, [r7, #4]
 8005be0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005be2:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d00c      	beq.n	8005c06 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bf6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005bfa:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005c04:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2201      	movs	r2, #1
 8005c0a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2200      	movs	r2, #0
 8005c12:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8005c16:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3714      	adds	r7, #20
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr

08005c24 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b084      	sub	sp, #16
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005c36:	b2db      	uxtb	r3, r3
 8005c38:	2b02      	cmp	r3, #2
 8005c3a:	d00d      	beq.n	8005c58 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2204      	movs	r2, #4
 8005c40:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2201      	movs	r2, #1
 8005c46:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	73fb      	strb	r3, [r7, #15]
 8005c56:	e047      	b.n	8005ce8 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f022 020e 	bic.w	r2, r2, #14
 8005c66:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f022 0201 	bic.w	r2, r2, #1
 8005c76:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c82:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005c86:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c8c:	f003 021f 	and.w	r2, r3, #31
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c94:	2101      	movs	r1, #1
 8005c96:	fa01 f202 	lsl.w	r2, r1, r2
 8005c9a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ca0:	687a      	ldr	r2, [r7, #4]
 8005ca2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005ca4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d00c      	beq.n	8005cc8 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cb8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005cbc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cc2:	687a      	ldr	r2, [r7, #4]
 8005cc4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005cc6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d003      	beq.n	8005ce8 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	4798      	blx	r3
    }
  }
  return status;
 8005ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3710      	adds	r7, #16
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}

08005cf2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005cf2:	b580      	push	{r7, lr}
 8005cf4:	b084      	sub	sp, #16
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d0e:	f003 031f 	and.w	r3, r3, #31
 8005d12:	2204      	movs	r2, #4
 8005d14:	409a      	lsls	r2, r3
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	4013      	ands	r3, r2
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d026      	beq.n	8005d6c <HAL_DMA_IRQHandler+0x7a>
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	f003 0304 	and.w	r3, r3, #4
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d021      	beq.n	8005d6c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f003 0320 	and.w	r3, r3, #32
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d107      	bne.n	8005d46 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f022 0204 	bic.w	r2, r2, #4
 8005d44:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d4a:	f003 021f 	and.w	r2, r3, #31
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d52:	2104      	movs	r1, #4
 8005d54:	fa01 f202 	lsl.w	r2, r1, r2
 8005d58:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d071      	beq.n	8005e46 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005d6a:	e06c      	b.n	8005e46 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d70:	f003 031f 	and.w	r3, r3, #31
 8005d74:	2202      	movs	r2, #2
 8005d76:	409a      	lsls	r2, r3
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	4013      	ands	r3, r2
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d02e      	beq.n	8005dde <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	f003 0302 	and.w	r3, r3, #2
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d029      	beq.n	8005dde <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f003 0320 	and.w	r3, r3, #32
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d10b      	bne.n	8005db0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f022 020a 	bic.w	r2, r2, #10
 8005da6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2201      	movs	r2, #1
 8005dac:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005db4:	f003 021f 	and.w	r2, r3, #31
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dbc:	2102      	movs	r1, #2
 8005dbe:	fa01 f202 	lsl.w	r2, r1, r2
 8005dc2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d038      	beq.n	8005e46 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005ddc:	e033      	b.n	8005e46 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005de2:	f003 031f 	and.w	r3, r3, #31
 8005de6:	2208      	movs	r2, #8
 8005de8:	409a      	lsls	r2, r3
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	4013      	ands	r3, r2
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d02a      	beq.n	8005e48 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	f003 0308 	and.w	r3, r3, #8
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d025      	beq.n	8005e48 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f022 020e 	bic.w	r2, r2, #14
 8005e0a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e10:	f003 021f 	and.w	r2, r3, #31
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e18:	2101      	movs	r1, #1
 8005e1a:	fa01 f202 	lsl.w	r2, r1, r2
 8005e1e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2201      	movs	r2, #1
 8005e24:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2201      	movs	r2, #1
 8005e2a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2200      	movs	r2, #0
 8005e32:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d004      	beq.n	8005e48 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005e46:	bf00      	nop
 8005e48:	bf00      	nop
}
 8005e4a:	3710      	adds	r7, #16
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}

08005e50 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b085      	sub	sp, #20
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	60f8      	str	r0, [r7, #12]
 8005e58:	60b9      	str	r1, [r7, #8]
 8005e5a:	607a      	str	r2, [r7, #4]
 8005e5c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e62:	68fa      	ldr	r2, [r7, #12]
 8005e64:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005e66:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d004      	beq.n	8005e7a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e74:	68fa      	ldr	r2, [r7, #12]
 8005e76:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005e78:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e7e:	f003 021f 	and.w	r2, r3, #31
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e86:	2101      	movs	r1, #1
 8005e88:	fa01 f202 	lsl.w	r2, r1, r2
 8005e8c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	683a      	ldr	r2, [r7, #0]
 8005e94:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	689b      	ldr	r3, [r3, #8]
 8005e9a:	2b10      	cmp	r3, #16
 8005e9c:	d108      	bne.n	8005eb0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	687a      	ldr	r2, [r7, #4]
 8005ea4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	68ba      	ldr	r2, [r7, #8]
 8005eac:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005eae:	e007      	b.n	8005ec0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	68ba      	ldr	r2, [r7, #8]
 8005eb6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	687a      	ldr	r2, [r7, #4]
 8005ebe:	60da      	str	r2, [r3, #12]
}
 8005ec0:	bf00      	nop
 8005ec2:	3714      	adds	r7, #20
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr

08005ecc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b087      	sub	sp, #28
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	461a      	mov	r2, r3
 8005eda:	4b16      	ldr	r3, [pc, #88]	@ (8005f34 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d802      	bhi.n	8005ee6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005ee0:	4b15      	ldr	r3, [pc, #84]	@ (8005f38 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005ee2:	617b      	str	r3, [r7, #20]
 8005ee4:	e001      	b.n	8005eea <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8005ee6:	4b15      	ldr	r3, [pc, #84]	@ (8005f3c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005ee8:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	b2db      	uxtb	r3, r3
 8005ef4:	3b08      	subs	r3, #8
 8005ef6:	4a12      	ldr	r2, [pc, #72]	@ (8005f40 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8005efc:	091b      	lsrs	r3, r3, #4
 8005efe:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f04:	089b      	lsrs	r3, r3, #2
 8005f06:	009a      	lsls	r2, r3, #2
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	4413      	add	r3, r2
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	4a0b      	ldr	r2, [pc, #44]	@ (8005f44 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005f16:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f003 031f 	and.w	r3, r3, #31
 8005f1e:	2201      	movs	r2, #1
 8005f20:	409a      	lsls	r2, r3
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005f26:	bf00      	nop
 8005f28:	371c      	adds	r7, #28
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr
 8005f32:	bf00      	nop
 8005f34:	40020407 	.word	0x40020407
 8005f38:	40020800 	.word	0x40020800
 8005f3c:	40020820 	.word	0x40020820
 8005f40:	cccccccd 	.word	0xcccccccd
 8005f44:	40020880 	.word	0x40020880

08005f48 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b085      	sub	sp, #20
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005f58:	68fa      	ldr	r2, [r7, #12]
 8005f5a:	4b0b      	ldr	r3, [pc, #44]	@ (8005f88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005f5c:	4413      	add	r3, r2
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	461a      	mov	r2, r3
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	4a08      	ldr	r2, [pc, #32]	@ (8005f8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005f6a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	3b01      	subs	r3, #1
 8005f70:	f003 031f 	and.w	r3, r3, #31
 8005f74:	2201      	movs	r2, #1
 8005f76:	409a      	lsls	r2, r3
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8005f7c:	bf00      	nop
 8005f7e:	3714      	adds	r7, #20
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr
 8005f88:	1000823f 	.word	0x1000823f
 8005f8c:	40020940 	.word	0x40020940

08005f90 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b084      	sub	sp, #16
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d101      	bne.n	8005fa2 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e147      	b.n	8006232 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005fa8:	b2db      	uxtb	r3, r3
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d106      	bne.n	8005fbc <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f7fb fb3c 	bl	8001634 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	699a      	ldr	r2, [r3, #24]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f022 0210 	bic.w	r2, r2, #16
 8005fca:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005fcc:	f7fc faca 	bl	8002564 <HAL_GetTick>
 8005fd0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005fd2:	e012      	b.n	8005ffa <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005fd4:	f7fc fac6 	bl	8002564 <HAL_GetTick>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	1ad3      	subs	r3, r2, r3
 8005fde:	2b0a      	cmp	r3, #10
 8005fe0:	d90b      	bls.n	8005ffa <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fe6:	f043 0201 	orr.w	r2, r3, #1
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2203      	movs	r2, #3
 8005ff2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e11b      	b.n	8006232 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	699b      	ldr	r3, [r3, #24]
 8006000:	f003 0308 	and.w	r3, r3, #8
 8006004:	2b08      	cmp	r3, #8
 8006006:	d0e5      	beq.n	8005fd4 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	699a      	ldr	r2, [r3, #24]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f042 0201 	orr.w	r2, r2, #1
 8006016:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006018:	f7fc faa4 	bl	8002564 <HAL_GetTick>
 800601c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800601e:	e012      	b.n	8006046 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006020:	f7fc faa0 	bl	8002564 <HAL_GetTick>
 8006024:	4602      	mov	r2, r0
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	1ad3      	subs	r3, r2, r3
 800602a:	2b0a      	cmp	r3, #10
 800602c:	d90b      	bls.n	8006046 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006032:	f043 0201 	orr.w	r2, r3, #1
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2203      	movs	r2, #3
 800603e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	e0f5      	b.n	8006232 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	699b      	ldr	r3, [r3, #24]
 800604c:	f003 0301 	and.w	r3, r3, #1
 8006050:	2b00      	cmp	r3, #0
 8006052:	d0e5      	beq.n	8006020 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	699a      	ldr	r2, [r3, #24]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f042 0202 	orr.w	r2, r2, #2
 8006062:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a74      	ldr	r2, [pc, #464]	@ (800623c <HAL_FDCAN_Init+0x2ac>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d103      	bne.n	8006076 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800606e:	4a74      	ldr	r2, [pc, #464]	@ (8006240 <HAL_FDCAN_Init+0x2b0>)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	7c1b      	ldrb	r3, [r3, #16]
 800607a:	2b01      	cmp	r3, #1
 800607c:	d108      	bne.n	8006090 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	699a      	ldr	r2, [r3, #24]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800608c:	619a      	str	r2, [r3, #24]
 800608e:	e007      	b.n	80060a0 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	699a      	ldr	r2, [r3, #24]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800609e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	7c5b      	ldrb	r3, [r3, #17]
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d108      	bne.n	80060ba <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	699a      	ldr	r2, [r3, #24]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80060b6:	619a      	str	r2, [r3, #24]
 80060b8:	e007      	b.n	80060ca <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	699a      	ldr	r2, [r3, #24]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80060c8:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	7c9b      	ldrb	r3, [r3, #18]
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d108      	bne.n	80060e4 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	699a      	ldr	r2, [r3, #24]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80060e0:	619a      	str	r2, [r3, #24]
 80060e2:	e007      	b.n	80060f4 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	699a      	ldr	r2, [r3, #24]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80060f2:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	699b      	ldr	r3, [r3, #24]
 80060fa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	689a      	ldr	r2, [r3, #8]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	430a      	orrs	r2, r1
 8006108:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	699a      	ldr	r2, [r3, #24]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8006118:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	691a      	ldr	r2, [r3, #16]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f022 0210 	bic.w	r2, r2, #16
 8006128:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	68db      	ldr	r3, [r3, #12]
 800612e:	2b01      	cmp	r3, #1
 8006130:	d108      	bne.n	8006144 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	699a      	ldr	r2, [r3, #24]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f042 0204 	orr.w	r2, r2, #4
 8006140:	619a      	str	r2, [r3, #24]
 8006142:	e02c      	b.n	800619e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	68db      	ldr	r3, [r3, #12]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d028      	beq.n	800619e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	68db      	ldr	r3, [r3, #12]
 8006150:	2b02      	cmp	r3, #2
 8006152:	d01c      	beq.n	800618e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	699a      	ldr	r2, [r3, #24]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006162:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	691a      	ldr	r2, [r3, #16]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f042 0210 	orr.w	r2, r2, #16
 8006172:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	68db      	ldr	r3, [r3, #12]
 8006178:	2b03      	cmp	r3, #3
 800617a:	d110      	bne.n	800619e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	699a      	ldr	r2, [r3, #24]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f042 0220 	orr.w	r2, r2, #32
 800618a:	619a      	str	r2, [r3, #24]
 800618c:	e007      	b.n	800619e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	699a      	ldr	r2, [r3, #24]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f042 0220 	orr.w	r2, r2, #32
 800619c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	699b      	ldr	r3, [r3, #24]
 80061a2:	3b01      	subs	r3, #1
 80061a4:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	69db      	ldr	r3, [r3, #28]
 80061aa:	3b01      	subs	r3, #1
 80061ac:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80061ae:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6a1b      	ldr	r3, [r3, #32]
 80061b4:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80061b6:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	695b      	ldr	r3, [r3, #20]
 80061be:	3b01      	subs	r3, #1
 80061c0:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80061c6:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80061c8:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80061d2:	d115      	bne.n	8006200 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061d8:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061de:	3b01      	subs	r3, #1
 80061e0:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80061e2:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061e8:	3b01      	subs	r3, #1
 80061ea:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80061ec:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061f4:	3b01      	subs	r3, #1
 80061f6:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80061fc:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80061fe:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	430a      	orrs	r2, r1
 8006212:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f000 fab6 	bl	8006788 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2200      	movs	r2, #0
 8006220:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2200      	movs	r2, #0
 8006226:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2201      	movs	r2, #1
 800622c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8006230:	2300      	movs	r3, #0
}
 8006232:	4618      	mov	r0, r3
 8006234:	3710      	adds	r7, #16
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}
 800623a:	bf00      	nop
 800623c:	40006400 	.word	0x40006400
 8006240:	40006500 	.word	0x40006500

08006244 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8006244:	b480      	push	{r7}
 8006246:	b08b      	sub	sp, #44	@ 0x2c
 8006248:	af00      	add	r7, sp, #0
 800624a:	60f8      	str	r0, [r7, #12]
 800624c:	60b9      	str	r1, [r7, #8]
 800624e:	607a      	str	r2, [r7, #4]
 8006250:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8006252:	2300      	movs	r3, #0
 8006254:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800625c:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 800625e:	7efb      	ldrb	r3, [r7, #27]
 8006260:	2b02      	cmp	r3, #2
 8006262:	f040 80e8 	bne.w	8006436 <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	2b40      	cmp	r3, #64	@ 0x40
 800626a:	d137      	bne.n	80062dc <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006274:	f003 030f 	and.w	r3, r3, #15
 8006278:	2b00      	cmp	r3, #0
 800627a:	d107      	bne.n	800628c <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006280:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8006288:	2301      	movs	r3, #1
 800628a:	e0db      	b.n	8006444 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006294:	0e1b      	lsrs	r3, r3, #24
 8006296:	f003 0301 	and.w	r3, r3, #1
 800629a:	2b01      	cmp	r3, #1
 800629c:	d10a      	bne.n	80062b4 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80062a6:	0a5b      	lsrs	r3, r3, #9
 80062a8:	f003 0301 	and.w	r3, r3, #1
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d101      	bne.n	80062b4 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80062b0:	2301      	movs	r3, #1
 80062b2:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062bc:	0a1b      	lsrs	r3, r3, #8
 80062be:	f003 0303 	and.w	r3, r3, #3
 80062c2:	69fa      	ldr	r2, [r7, #28]
 80062c4:	4413      	add	r3, r2
 80062c6:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 80062cc:	69fa      	ldr	r2, [r7, #28]
 80062ce:	4613      	mov	r3, r2
 80062d0:	00db      	lsls	r3, r3, #3
 80062d2:	4413      	add	r3, r2
 80062d4:	00db      	lsls	r3, r3, #3
 80062d6:	440b      	add	r3, r1
 80062d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80062da:	e036      	b.n	800634a <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80062e4:	f003 030f 	and.w	r3, r3, #15
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d107      	bne.n	80062fc <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062f0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80062f8:	2301      	movs	r3, #1
 80062fa:	e0a3      	b.n	8006444 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006304:	0e1b      	lsrs	r3, r3, #24
 8006306:	f003 0301 	and.w	r3, r3, #1
 800630a:	2b01      	cmp	r3, #1
 800630c:	d10a      	bne.n	8006324 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006316:	0a1b      	lsrs	r3, r3, #8
 8006318:	f003 0301 	and.w	r3, r3, #1
 800631c:	2b01      	cmp	r3, #1
 800631e:	d101      	bne.n	8006324 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8006320:	2301      	movs	r3, #1
 8006322:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800632c:	0a1b      	lsrs	r3, r3, #8
 800632e:	f003 0303 	and.w	r3, r3, #3
 8006332:	69fa      	ldr	r2, [r7, #28]
 8006334:	4413      	add	r3, r2
 8006336:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800633c:	69fa      	ldr	r2, [r7, #28]
 800633e:	4613      	mov	r3, r2
 8006340:	00db      	lsls	r3, r3, #3
 8006342:	4413      	add	r3, r2
 8006344:	00db      	lsls	r3, r3, #3
 8006346:	440b      	add	r3, r1
 8006348:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800634a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d107      	bne.n	800636e <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 800635e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	0c9b      	lsrs	r3, r3, #18
 8006364:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	601a      	str	r2, [r3, #0]
 800636c:	e005      	b.n	800637a <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800636e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800637a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8006386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8006392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006394:	3304      	adds	r3, #4
 8006396:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8006398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	b29a      	uxth	r2, r3
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 80063a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	0c1b      	lsrs	r3, r3, #16
 80063a8:	f003 020f 	and.w	r2, r3, #15
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80063b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80063bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80063c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	0e1b      	lsrs	r3, r3, #24
 80063ce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80063d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	0fda      	lsrs	r2, r3, #31
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80063e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063e2:	3304      	adds	r3, #4
 80063e4:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80063e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063e8:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80063ea:	2300      	movs	r3, #0
 80063ec:	623b      	str	r3, [r7, #32]
 80063ee:	e00a      	b.n	8006406 <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80063f0:	697a      	ldr	r2, [r7, #20]
 80063f2:	6a3b      	ldr	r3, [r7, #32]
 80063f4:	441a      	add	r2, r3
 80063f6:	6839      	ldr	r1, [r7, #0]
 80063f8:	6a3b      	ldr	r3, [r7, #32]
 80063fa:	440b      	add	r3, r1
 80063fc:	7812      	ldrb	r2, [r2, #0]
 80063fe:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8006400:	6a3b      	ldr	r3, [r7, #32]
 8006402:	3301      	adds	r3, #1
 8006404:	623b      	str	r3, [r7, #32]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	68db      	ldr	r3, [r3, #12]
 800640a:	4a11      	ldr	r2, [pc, #68]	@ (8006450 <HAL_FDCAN_GetRxMessage+0x20c>)
 800640c:	5cd3      	ldrb	r3, [r2, r3]
 800640e:	461a      	mov	r2, r3
 8006410:	6a3b      	ldr	r3, [r7, #32]
 8006412:	4293      	cmp	r3, r2
 8006414:	d3ec      	bcc.n	80063f0 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	2b40      	cmp	r3, #64	@ 0x40
 800641a:	d105      	bne.n	8006428 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	69fa      	ldr	r2, [r7, #28]
 8006422:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8006426:	e004      	b.n	8006432 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	69fa      	ldr	r2, [r7, #28]
 800642e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8006432:	2300      	movs	r3, #0
 8006434:	e006      	b.n	8006444 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800643a:	f043 0208 	orr.w	r2, r3, #8
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8006442:	2301      	movs	r3, #1
  }
}
 8006444:	4618      	mov	r0, r3
 8006446:	372c      	adds	r7, #44	@ 0x2c
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr
 8006450:	0800ccf0 	.word	0x0800ccf0

08006454 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b08c      	sub	sp, #48	@ 0x30
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006462:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8006466:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800646e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006470:	4013      	ands	r3, r2
 8006472:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800647a:	f003 0307 	and.w	r3, r3, #7
 800647e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006486:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006488:	4013      	ands	r3, r2
 800648a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006492:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006496:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800649e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064a0:	4013      	ands	r3, r2
 80064a2:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064aa:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 80064ae:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064b6:	6a3a      	ldr	r2, [r7, #32]
 80064b8:	4013      	ands	r3, r2
 80064ba:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064c2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80064c6:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064ce:	69fa      	ldr	r2, [r7, #28]
 80064d0:	4013      	ands	r3, r2
 80064d2:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064da:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064e2:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d00b      	beq.n	8006506 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80064ee:	69bb      	ldr	r3, [r7, #24]
 80064f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d006      	beq.n	8006506 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	2240      	movs	r2, #64	@ 0x40
 80064fe:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f000 f921 	bl	8006748 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800650c:	2b00      	cmp	r3, #0
 800650e:	d019      	beq.n	8006544 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8006510:	69bb      	ldr	r3, [r7, #24]
 8006512:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006516:	2b00      	cmp	r3, #0
 8006518:	d014      	beq.n	8006544 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006522:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800652c:	693a      	ldr	r2, [r7, #16]
 800652e:	4013      	ands	r3, r2
 8006530:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800653a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800653c:	6939      	ldr	r1, [r7, #16]
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f000 f8e3 	bl	800670a <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8006544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006546:	2b00      	cmp	r3, #0
 8006548:	d007      	beq.n	800655a <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006550:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8006552:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f000 f8a2 	bl	800669e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800655a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800655c:	2b00      	cmp	r3, #0
 800655e:	d007      	beq.n	8006570 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006566:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8006568:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 f8a2 	bl	80066b4 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8006570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006572:	2b00      	cmp	r3, #0
 8006574:	d007      	beq.n	8006586 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800657c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800657e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f000 f8a2 	bl	80066ca <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800658c:	2b00      	cmp	r3, #0
 800658e:	d00c      	beq.n	80065aa <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8006590:	69bb      	ldr	r3, [r7, #24]
 8006592:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006596:	2b00      	cmp	r3, #0
 8006598:	d007      	beq.n	80065aa <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80065a2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f000 f89b 	bl	80066e0 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d018      	beq.n	80065e6 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 80065b4:	69bb      	ldr	r3, [r7, #24]
 80065b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d013      	beq.n	80065e6 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80065c6:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80065d0:	68fa      	ldr	r2, [r7, #12]
 80065d2:	4013      	ands	r3, r2
 80065d4:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	2280      	movs	r2, #128	@ 0x80
 80065dc:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80065de:	68f9      	ldr	r1, [r7, #12]
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f000 f887 	bl	80066f4 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d00c      	beq.n	800660a <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80065f0:	69bb      	ldr	r3, [r7, #24]
 80065f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d007      	beq.n	800660a <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006602:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f000 f88b 	bl	8006720 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006610:	2b00      	cmp	r3, #0
 8006612:	d00c      	beq.n	800662e <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8006614:	69bb      	ldr	r3, [r7, #24]
 8006616:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800661a:	2b00      	cmp	r3, #0
 800661c:	d007      	beq.n	800662e <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8006626:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f000 f883 	bl	8006734 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006634:	2b00      	cmp	r3, #0
 8006636:	d00f      	beq.n	8006658 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8006638:	69bb      	ldr	r3, [r7, #24]
 800663a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800663e:	2b00      	cmp	r3, #0
 8006640:	d00a      	beq.n	8006658 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800664a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006650:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8006658:	69fb      	ldr	r3, [r7, #28]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d007      	beq.n	800666e <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	69fa      	ldr	r2, [r7, #28]
 8006664:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8006666:	69f9      	ldr	r1, [r7, #28]
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f000 f881 	bl	8006770 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800666e:	6a3b      	ldr	r3, [r7, #32]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d009      	beq.n	8006688 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	6a3a      	ldr	r2, [r7, #32]
 800667a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006680:	6a3b      	ldr	r3, [r7, #32]
 8006682:	431a      	orrs	r2, r3
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800668c:	2b00      	cmp	r3, #0
 800668e:	d002      	beq.n	8006696 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f000 f863 	bl	800675c <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8006696:	bf00      	nop
 8006698:	3730      	adds	r7, #48	@ 0x30
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}

0800669e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800669e:	b480      	push	{r7}
 80066a0:	b083      	sub	sp, #12
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	6078      	str	r0, [r7, #4]
 80066a6:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80066a8:	bf00      	nop
 80066aa:	370c      	adds	r7, #12
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr

080066b4 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b083      	sub	sp, #12
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 80066be:	bf00      	nop
 80066c0:	370c      	adds	r7, #12
 80066c2:	46bd      	mov	sp, r7
 80066c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c8:	4770      	bx	lr

080066ca <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80066ca:	b480      	push	{r7}
 80066cc:	b083      	sub	sp, #12
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	6078      	str	r0, [r7, #4]
 80066d2:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80066d4:	bf00      	nop
 80066d6:	370c      	adds	r7, #12
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr

080066e0 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b083      	sub	sp, #12
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80066e8:	bf00      	nop
 80066ea:	370c      	adds	r7, #12
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr

080066f4 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b083      	sub	sp, #12
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
 80066fc:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80066fe:	bf00      	nop
 8006700:	370c      	adds	r7, #12
 8006702:	46bd      	mov	sp, r7
 8006704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006708:	4770      	bx	lr

0800670a <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800670a:	b480      	push	{r7}
 800670c:	b083      	sub	sp, #12
 800670e:	af00      	add	r7, sp, #0
 8006710:	6078      	str	r0, [r7, #4]
 8006712:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8006714:	bf00      	nop
 8006716:	370c      	adds	r7, #12
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr

08006720 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006720:	b480      	push	{r7}
 8006722:	b083      	sub	sp, #12
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8006728:	bf00      	nop
 800672a:	370c      	adds	r7, #12
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr

08006734 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006734:	b480      	push	{r7}
 8006736:	b083      	sub	sp, #12
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800673c:	bf00      	nop
 800673e:	370c      	adds	r7, #12
 8006740:	46bd      	mov	sp, r7
 8006742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006746:	4770      	bx	lr

08006748 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006748:	b480      	push	{r7}
 800674a:	b083      	sub	sp, #12
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8006750:	bf00      	nop
 8006752:	370c      	adds	r7, #12
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr

0800675c <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800675c:	b480      	push	{r7}
 800675e:	b083      	sub	sp, #12
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8006764:	bf00      	nop
 8006766:	370c      	adds	r7, #12
 8006768:	46bd      	mov	sp, r7
 800676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676e:	4770      	bx	lr

08006770 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8006770:	b480      	push	{r7}
 8006772:	b083      	sub	sp, #12
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800677a:	bf00      	nop
 800677c:	370c      	adds	r7, #12
 800677e:	46bd      	mov	sp, r7
 8006780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006784:	4770      	bx	lr
	...

08006788 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8006788:	b480      	push	{r7}
 800678a:	b085      	sub	sp, #20
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8006790:	4b27      	ldr	r3, [pc, #156]	@ (8006830 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8006792:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	68ba      	ldr	r2, [r7, #8]
 8006798:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067a2:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067aa:	041a      	lsls	r2, r3, #16
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	430a      	orrs	r2, r1
 80067b2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067c8:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067d0:	061a      	lsls	r2, r3, #24
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	430a      	orrs	r2, r1
 80067d8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	60fb      	str	r3, [r7, #12]
 8006808:	e005      	b.n	8006816 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2200      	movs	r2, #0
 800680e:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	3304      	adds	r3, #4
 8006814:	60fb      	str	r3, [r7, #12]
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800681c:	68fa      	ldr	r2, [r7, #12]
 800681e:	429a      	cmp	r2, r3
 8006820:	d3f3      	bcc.n	800680a <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8006822:	bf00      	nop
 8006824:	bf00      	nop
 8006826:	3714      	adds	r7, #20
 8006828:	46bd      	mov	sp, r7
 800682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682e:	4770      	bx	lr
 8006830:	4000a400 	.word	0x4000a400

08006834 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006834:	b480      	push	{r7}
 8006836:	b087      	sub	sp, #28
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800683e:	2300      	movs	r3, #0
 8006840:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006842:	e15a      	b.n	8006afa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	681a      	ldr	r2, [r3, #0]
 8006848:	2101      	movs	r1, #1
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	fa01 f303 	lsl.w	r3, r1, r3
 8006850:	4013      	ands	r3, r2
 8006852:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2b00      	cmp	r3, #0
 8006858:	f000 814c 	beq.w	8006af4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	f003 0303 	and.w	r3, r3, #3
 8006864:	2b01      	cmp	r3, #1
 8006866:	d005      	beq.n	8006874 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006870:	2b02      	cmp	r3, #2
 8006872:	d130      	bne.n	80068d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	005b      	lsls	r3, r3, #1
 800687e:	2203      	movs	r2, #3
 8006880:	fa02 f303 	lsl.w	r3, r2, r3
 8006884:	43db      	mvns	r3, r3
 8006886:	693a      	ldr	r2, [r7, #16]
 8006888:	4013      	ands	r3, r2
 800688a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	68da      	ldr	r2, [r3, #12]
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	005b      	lsls	r3, r3, #1
 8006894:	fa02 f303 	lsl.w	r3, r2, r3
 8006898:	693a      	ldr	r2, [r7, #16]
 800689a:	4313      	orrs	r3, r2
 800689c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	693a      	ldr	r2, [r7, #16]
 80068a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80068aa:	2201      	movs	r2, #1
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	fa02 f303 	lsl.w	r3, r2, r3
 80068b2:	43db      	mvns	r3, r3
 80068b4:	693a      	ldr	r2, [r7, #16]
 80068b6:	4013      	ands	r3, r2
 80068b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	091b      	lsrs	r3, r3, #4
 80068c0:	f003 0201 	and.w	r2, r3, #1
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	fa02 f303 	lsl.w	r3, r2, r3
 80068ca:	693a      	ldr	r2, [r7, #16]
 80068cc:	4313      	orrs	r3, r2
 80068ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	693a      	ldr	r2, [r7, #16]
 80068d4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	f003 0303 	and.w	r3, r3, #3
 80068de:	2b03      	cmp	r3, #3
 80068e0:	d017      	beq.n	8006912 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	68db      	ldr	r3, [r3, #12]
 80068e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	005b      	lsls	r3, r3, #1
 80068ec:	2203      	movs	r2, #3
 80068ee:	fa02 f303 	lsl.w	r3, r2, r3
 80068f2:	43db      	mvns	r3, r3
 80068f4:	693a      	ldr	r2, [r7, #16]
 80068f6:	4013      	ands	r3, r2
 80068f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	689a      	ldr	r2, [r3, #8]
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	005b      	lsls	r3, r3, #1
 8006902:	fa02 f303 	lsl.w	r3, r2, r3
 8006906:	693a      	ldr	r2, [r7, #16]
 8006908:	4313      	orrs	r3, r2
 800690a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	693a      	ldr	r2, [r7, #16]
 8006910:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	f003 0303 	and.w	r3, r3, #3
 800691a:	2b02      	cmp	r3, #2
 800691c:	d123      	bne.n	8006966 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	08da      	lsrs	r2, r3, #3
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	3208      	adds	r2, #8
 8006926:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800692a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	f003 0307 	and.w	r3, r3, #7
 8006932:	009b      	lsls	r3, r3, #2
 8006934:	220f      	movs	r2, #15
 8006936:	fa02 f303 	lsl.w	r3, r2, r3
 800693a:	43db      	mvns	r3, r3
 800693c:	693a      	ldr	r2, [r7, #16]
 800693e:	4013      	ands	r3, r2
 8006940:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	691a      	ldr	r2, [r3, #16]
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	f003 0307 	and.w	r3, r3, #7
 800694c:	009b      	lsls	r3, r3, #2
 800694e:	fa02 f303 	lsl.w	r3, r2, r3
 8006952:	693a      	ldr	r2, [r7, #16]
 8006954:	4313      	orrs	r3, r2
 8006956:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	08da      	lsrs	r2, r3, #3
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	3208      	adds	r2, #8
 8006960:	6939      	ldr	r1, [r7, #16]
 8006962:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	005b      	lsls	r3, r3, #1
 8006970:	2203      	movs	r2, #3
 8006972:	fa02 f303 	lsl.w	r3, r2, r3
 8006976:	43db      	mvns	r3, r3
 8006978:	693a      	ldr	r2, [r7, #16]
 800697a:	4013      	ands	r3, r2
 800697c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	f003 0203 	and.w	r2, r3, #3
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	005b      	lsls	r3, r3, #1
 800698a:	fa02 f303 	lsl.w	r3, r2, r3
 800698e:	693a      	ldr	r2, [r7, #16]
 8006990:	4313      	orrs	r3, r2
 8006992:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	693a      	ldr	r2, [r7, #16]
 8006998:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	f000 80a6 	beq.w	8006af4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80069a8:	4b5b      	ldr	r3, [pc, #364]	@ (8006b18 <HAL_GPIO_Init+0x2e4>)
 80069aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80069ac:	4a5a      	ldr	r2, [pc, #360]	@ (8006b18 <HAL_GPIO_Init+0x2e4>)
 80069ae:	f043 0301 	orr.w	r3, r3, #1
 80069b2:	6613      	str	r3, [r2, #96]	@ 0x60
 80069b4:	4b58      	ldr	r3, [pc, #352]	@ (8006b18 <HAL_GPIO_Init+0x2e4>)
 80069b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80069b8:	f003 0301 	and.w	r3, r3, #1
 80069bc:	60bb      	str	r3, [r7, #8]
 80069be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80069c0:	4a56      	ldr	r2, [pc, #344]	@ (8006b1c <HAL_GPIO_Init+0x2e8>)
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	089b      	lsrs	r3, r3, #2
 80069c6:	3302      	adds	r3, #2
 80069c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	f003 0303 	and.w	r3, r3, #3
 80069d4:	009b      	lsls	r3, r3, #2
 80069d6:	220f      	movs	r2, #15
 80069d8:	fa02 f303 	lsl.w	r3, r2, r3
 80069dc:	43db      	mvns	r3, r3
 80069de:	693a      	ldr	r2, [r7, #16]
 80069e0:	4013      	ands	r3, r2
 80069e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80069ea:	d01f      	beq.n	8006a2c <HAL_GPIO_Init+0x1f8>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	4a4c      	ldr	r2, [pc, #304]	@ (8006b20 <HAL_GPIO_Init+0x2ec>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d019      	beq.n	8006a28 <HAL_GPIO_Init+0x1f4>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	4a4b      	ldr	r2, [pc, #300]	@ (8006b24 <HAL_GPIO_Init+0x2f0>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d013      	beq.n	8006a24 <HAL_GPIO_Init+0x1f0>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	4a4a      	ldr	r2, [pc, #296]	@ (8006b28 <HAL_GPIO_Init+0x2f4>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d00d      	beq.n	8006a20 <HAL_GPIO_Init+0x1ec>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	4a49      	ldr	r2, [pc, #292]	@ (8006b2c <HAL_GPIO_Init+0x2f8>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d007      	beq.n	8006a1c <HAL_GPIO_Init+0x1e8>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	4a48      	ldr	r2, [pc, #288]	@ (8006b30 <HAL_GPIO_Init+0x2fc>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d101      	bne.n	8006a18 <HAL_GPIO_Init+0x1e4>
 8006a14:	2305      	movs	r3, #5
 8006a16:	e00a      	b.n	8006a2e <HAL_GPIO_Init+0x1fa>
 8006a18:	2306      	movs	r3, #6
 8006a1a:	e008      	b.n	8006a2e <HAL_GPIO_Init+0x1fa>
 8006a1c:	2304      	movs	r3, #4
 8006a1e:	e006      	b.n	8006a2e <HAL_GPIO_Init+0x1fa>
 8006a20:	2303      	movs	r3, #3
 8006a22:	e004      	b.n	8006a2e <HAL_GPIO_Init+0x1fa>
 8006a24:	2302      	movs	r3, #2
 8006a26:	e002      	b.n	8006a2e <HAL_GPIO_Init+0x1fa>
 8006a28:	2301      	movs	r3, #1
 8006a2a:	e000      	b.n	8006a2e <HAL_GPIO_Init+0x1fa>
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	697a      	ldr	r2, [r7, #20]
 8006a30:	f002 0203 	and.w	r2, r2, #3
 8006a34:	0092      	lsls	r2, r2, #2
 8006a36:	4093      	lsls	r3, r2
 8006a38:	693a      	ldr	r2, [r7, #16]
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006a3e:	4937      	ldr	r1, [pc, #220]	@ (8006b1c <HAL_GPIO_Init+0x2e8>)
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	089b      	lsrs	r3, r3, #2
 8006a44:	3302      	adds	r3, #2
 8006a46:	693a      	ldr	r2, [r7, #16]
 8006a48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006a4c:	4b39      	ldr	r3, [pc, #228]	@ (8006b34 <HAL_GPIO_Init+0x300>)
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	43db      	mvns	r3, r3
 8006a56:	693a      	ldr	r2, [r7, #16]
 8006a58:	4013      	ands	r3, r2
 8006a5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d003      	beq.n	8006a70 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8006a68:	693a      	ldr	r2, [r7, #16]
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006a70:	4a30      	ldr	r2, [pc, #192]	@ (8006b34 <HAL_GPIO_Init+0x300>)
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006a76:	4b2f      	ldr	r3, [pc, #188]	@ (8006b34 <HAL_GPIO_Init+0x300>)
 8006a78:	68db      	ldr	r3, [r3, #12]
 8006a7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	43db      	mvns	r3, r3
 8006a80:	693a      	ldr	r2, [r7, #16]
 8006a82:	4013      	ands	r3, r2
 8006a84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d003      	beq.n	8006a9a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8006a92:	693a      	ldr	r2, [r7, #16]
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	4313      	orrs	r3, r2
 8006a98:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006a9a:	4a26      	ldr	r2, [pc, #152]	@ (8006b34 <HAL_GPIO_Init+0x300>)
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006aa0:	4b24      	ldr	r3, [pc, #144]	@ (8006b34 <HAL_GPIO_Init+0x300>)
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	43db      	mvns	r3, r3
 8006aaa:	693a      	ldr	r2, [r7, #16]
 8006aac:	4013      	ands	r3, r2
 8006aae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d003      	beq.n	8006ac4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006abc:	693a      	ldr	r2, [r7, #16]
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006ac4:	4a1b      	ldr	r2, [pc, #108]	@ (8006b34 <HAL_GPIO_Init+0x300>)
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006aca:	4b1a      	ldr	r3, [pc, #104]	@ (8006b34 <HAL_GPIO_Init+0x300>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	43db      	mvns	r3, r3
 8006ad4:	693a      	ldr	r2, [r7, #16]
 8006ad6:	4013      	ands	r3, r2
 8006ad8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d003      	beq.n	8006aee <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8006ae6:	693a      	ldr	r2, [r7, #16]
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	4313      	orrs	r3, r2
 8006aec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006aee:	4a11      	ldr	r2, [pc, #68]	@ (8006b34 <HAL_GPIO_Init+0x300>)
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	3301      	adds	r3, #1
 8006af8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	681a      	ldr	r2, [r3, #0]
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	fa22 f303 	lsr.w	r3, r2, r3
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	f47f ae9d 	bne.w	8006844 <HAL_GPIO_Init+0x10>
  }
}
 8006b0a:	bf00      	nop
 8006b0c:	bf00      	nop
 8006b0e:	371c      	adds	r7, #28
 8006b10:	46bd      	mov	sp, r7
 8006b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b16:	4770      	bx	lr
 8006b18:	40021000 	.word	0x40021000
 8006b1c:	40010000 	.word	0x40010000
 8006b20:	48000400 	.word	0x48000400
 8006b24:	48000800 	.word	0x48000800
 8006b28:	48000c00 	.word	0x48000c00
 8006b2c:	48001000 	.word	0x48001000
 8006b30:	48001400 	.word	0x48001400
 8006b34:	40010400 	.word	0x40010400

08006b38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b083      	sub	sp, #12
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	460b      	mov	r3, r1
 8006b42:	807b      	strh	r3, [r7, #2]
 8006b44:	4613      	mov	r3, r2
 8006b46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006b48:	787b      	ldrb	r3, [r7, #1]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d003      	beq.n	8006b56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006b4e:	887a      	ldrh	r2, [r7, #2]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006b54:	e002      	b.n	8006b5c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006b56:	887a      	ldrh	r2, [r7, #2]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006b5c:	bf00      	nop
 8006b5e:	370c      	adds	r7, #12
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr

08006b68 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b082      	sub	sp, #8
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	4603      	mov	r3, r0
 8006b70:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006b72:	4b08      	ldr	r3, [pc, #32]	@ (8006b94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006b74:	695a      	ldr	r2, [r3, #20]
 8006b76:	88fb      	ldrh	r3, [r7, #6]
 8006b78:	4013      	ands	r3, r2
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d006      	beq.n	8006b8c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006b7e:	4a05      	ldr	r2, [pc, #20]	@ (8006b94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006b80:	88fb      	ldrh	r3, [r7, #6]
 8006b82:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006b84:	88fb      	ldrh	r3, [r7, #6]
 8006b86:	4618      	mov	r0, r3
 8006b88:	f005 fa5e 	bl	800c048 <HAL_GPIO_EXTI_Callback>
  }
}
 8006b8c:	bf00      	nop
 8006b8e:	3708      	adds	r7, #8
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}
 8006b94:	40010400 	.word	0x40010400

08006b98 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b084      	sub	sp, #16
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d101      	bne.n	8006bae <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 8006baa:	2301      	movs	r3, #1
 8006bac:	e0bb      	b.n	8006d26 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8006bb4:	b2db      	uxtb	r3, r3
 8006bb6:	2b05      	cmp	r3, #5
 8006bb8:	d101      	bne.n	8006bbe <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	e0b3      	b.n	8006d26 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8006bc4:	b2db      	uxtb	r3, r3
 8006bc6:	2b02      	cmp	r3, #2
 8006bc8:	d101      	bne.n	8006bce <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8006bca:	2301      	movs	r3, #1
 8006bcc:	e0ab      	b.n	8006d26 <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006bce:	4b58      	ldr	r3, [pc, #352]	@ (8006d30 <HAL_OPAMP_Init+0x198>)
 8006bd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006bd2:	4a57      	ldr	r2, [pc, #348]	@ (8006d30 <HAL_OPAMP_Init+0x198>)
 8006bd4:	f043 0301 	orr.w	r3, r3, #1
 8006bd8:	6613      	str	r3, [r2, #96]	@ 0x60
 8006bda:	4b55      	ldr	r3, [pc, #340]	@ (8006d30 <HAL_OPAMP_Init+0x198>)
 8006bdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006bde:	f003 0301 	and.w	r3, r3, #1
 8006be2:	60bb      	str	r3, [r7, #8]
 8006be4:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8006bec:	b2db      	uxtb	r3, r3
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d103      	bne.n	8006bfa <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f7fa ff38 	bl	8001a70 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	689b      	ldr	r3, [r3, #8]
 8006c04:	2b40      	cmp	r3, #64	@ 0x40
 8006c06:	d003      	beq.n	8006c10 <HAL_OPAMP_Init+0x78>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	689b      	ldr	r3, [r3, #8]
 8006c0c:	2b60      	cmp	r3, #96	@ 0x60
 8006c0e:	d133      	bne.n	8006c78 <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f023 0110 	bic.w	r1, r3, #16
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	430a      	orrs	r2, r1
 8006c24:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	681a      	ldr	r2, [r3, #0]
 8006c2c:	4b41      	ldr	r3, [pc, #260]	@ (8006d34 <HAL_OPAMP_Init+0x19c>)
 8006c2e:	4013      	ands	r3, r2
 8006c30:	687a      	ldr	r2, [r7, #4]
 8006c32:	6851      	ldr	r1, [r2, #4]
 8006c34:	687a      	ldr	r2, [r7, #4]
 8006c36:	6892      	ldr	r2, [r2, #8]
 8006c38:	4311      	orrs	r1, r2
 8006c3a:	687a      	ldr	r2, [r7, #4]
 8006c3c:	6912      	ldr	r2, [r2, #16]
 8006c3e:	430a      	orrs	r2, r1
 8006c40:	6879      	ldr	r1, [r7, #4]
 8006c42:	7d09      	ldrb	r1, [r1, #20]
 8006c44:	2901      	cmp	r1, #1
 8006c46:	d102      	bne.n	8006c4e <HAL_OPAMP_Init+0xb6>
 8006c48:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006c4c:	e000      	b.n	8006c50 <HAL_OPAMP_Init+0xb8>
 8006c4e:	2100      	movs	r1, #0
 8006c50:	4311      	orrs	r1, r2
 8006c52:	687a      	ldr	r2, [r7, #4]
 8006c54:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006c56:	4311      	orrs	r1, r2
 8006c58:	687a      	ldr	r2, [r7, #4]
 8006c5a:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006c5c:	4311      	orrs	r1, r2
 8006c5e:	687a      	ldr	r2, [r7, #4]
 8006c60:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006c62:	04d2      	lsls	r2, r2, #19
 8006c64:	4311      	orrs	r1, r2
 8006c66:	687a      	ldr	r2, [r7, #4]
 8006c68:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006c6a:	0612      	lsls	r2, r2, #24
 8006c6c:	4311      	orrs	r1, r2
 8006c6e:	687a      	ldr	r2, [r7, #4]
 8006c70:	6812      	ldr	r2, [r2, #0]
 8006c72:	430b      	orrs	r3, r1
 8006c74:	6013      	str	r3, [r2, #0]
 8006c76:	e035      	b.n	8006ce4 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f023 0110 	bic.w	r1, r3, #16
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	430a      	orrs	r2, r1
 8006c8c:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	681a      	ldr	r2, [r3, #0]
 8006c94:	4b27      	ldr	r3, [pc, #156]	@ (8006d34 <HAL_OPAMP_Init+0x19c>)
 8006c96:	4013      	ands	r3, r2
 8006c98:	687a      	ldr	r2, [r7, #4]
 8006c9a:	6851      	ldr	r1, [r2, #4]
 8006c9c:	687a      	ldr	r2, [r7, #4]
 8006c9e:	6892      	ldr	r2, [r2, #8]
 8006ca0:	4311      	orrs	r1, r2
 8006ca2:	687a      	ldr	r2, [r7, #4]
 8006ca4:	68d2      	ldr	r2, [r2, #12]
 8006ca6:	4311      	orrs	r1, r2
 8006ca8:	687a      	ldr	r2, [r7, #4]
 8006caa:	6912      	ldr	r2, [r2, #16]
 8006cac:	430a      	orrs	r2, r1
 8006cae:	6879      	ldr	r1, [r7, #4]
 8006cb0:	7d09      	ldrb	r1, [r1, #20]
 8006cb2:	2901      	cmp	r1, #1
 8006cb4:	d102      	bne.n	8006cbc <HAL_OPAMP_Init+0x124>
 8006cb6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006cba:	e000      	b.n	8006cbe <HAL_OPAMP_Init+0x126>
 8006cbc:	2100      	movs	r1, #0
 8006cbe:	4311      	orrs	r1, r2
 8006cc0:	687a      	ldr	r2, [r7, #4]
 8006cc2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006cc4:	4311      	orrs	r1, r2
 8006cc6:	687a      	ldr	r2, [r7, #4]
 8006cc8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006cca:	4311      	orrs	r1, r2
 8006ccc:	687a      	ldr	r2, [r7, #4]
 8006cce:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006cd0:	04d2      	lsls	r2, r2, #19
 8006cd2:	4311      	orrs	r1, r2
 8006cd4:	687a      	ldr	r2, [r7, #4]
 8006cd6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006cd8:	0612      	lsls	r2, r2, #24
 8006cda:	4311      	orrs	r1, r2
 8006cdc:	687a      	ldr	r2, [r7, #4]
 8006cde:	6812      	ldr	r2, [r2, #0]
 8006ce0:	430b      	orrs	r3, r1
 8006ce2:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	699b      	ldr	r3, [r3, #24]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	db10      	blt.n	8006d10 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	699b      	ldr	r3, [r3, #24]
 8006cf4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	699a      	ldr	r2, [r3, #24]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	69db      	ldr	r3, [r3, #28]
 8006d00:	431a      	orrs	r2, r3
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6a1b      	ldr	r3, [r3, #32]
 8006d06:	431a      	orrs	r2, r3
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	430a      	orrs	r2, r1
 8006d0e:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8006d16:	b2db      	uxtb	r3, r3
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d103      	bne.n	8006d24 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2201      	movs	r2, #1
 8006d20:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8006d24:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3710      	adds	r7, #16
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}
 8006d2e:	bf00      	nop
 8006d30:	40021000 	.word	0x40021000
 8006d34:	e0003e11 	.word	0xe0003e11

08006d38 <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b085      	sub	sp, #20
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d40:	2300      	movs	r3, #0
 8006d42:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d102      	bne.n	8006d50 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	73fb      	strb	r3, [r7, #15]
 8006d4e:	e01d      	b.n	8006d8c <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8006d56:	b2db      	uxtb	r3, r3
 8006d58:	2b05      	cmp	r3, #5
 8006d5a:	d102      	bne.n	8006d62 <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	73fb      	strb	r3, [r7, #15]
 8006d60:	e014      	b.n	8006d8c <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8006d68:	b2db      	uxtb	r3, r3
 8006d6a:	2b01      	cmp	r3, #1
 8006d6c:	d10c      	bne.n	8006d88 <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	681a      	ldr	r2, [r3, #0]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f042 0201 	orr.w	r2, r2, #1
 8006d7c:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2204      	movs	r2, #4
 8006d82:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8006d86:	e001      	b.n	8006d8c <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 8006d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3714      	adds	r7, #20
 8006d92:	46bd      	mov	sp, r7
 8006d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d98:	4770      	bx	lr
	...

08006d9c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b085      	sub	sp, #20
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d141      	bne.n	8006e2e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006daa:	4b4b      	ldr	r3, [pc, #300]	@ (8006ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006db2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006db6:	d131      	bne.n	8006e1c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006db8:	4b47      	ldr	r3, [pc, #284]	@ (8006ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006dba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006dbe:	4a46      	ldr	r2, [pc, #280]	@ (8006ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006dc0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006dc4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006dc8:	4b43      	ldr	r3, [pc, #268]	@ (8006ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006dd0:	4a41      	ldr	r2, [pc, #260]	@ (8006ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006dd2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006dd6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006dd8:	4b40      	ldr	r3, [pc, #256]	@ (8006edc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	2232      	movs	r2, #50	@ 0x32
 8006dde:	fb02 f303 	mul.w	r3, r2, r3
 8006de2:	4a3f      	ldr	r2, [pc, #252]	@ (8006ee0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006de4:	fba2 2303 	umull	r2, r3, r2, r3
 8006de8:	0c9b      	lsrs	r3, r3, #18
 8006dea:	3301      	adds	r3, #1
 8006dec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006dee:	e002      	b.n	8006df6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	3b01      	subs	r3, #1
 8006df4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006df6:	4b38      	ldr	r3, [pc, #224]	@ (8006ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006df8:	695b      	ldr	r3, [r3, #20]
 8006dfa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006dfe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e02:	d102      	bne.n	8006e0a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d1f2      	bne.n	8006df0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006e0a:	4b33      	ldr	r3, [pc, #204]	@ (8006ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e0c:	695b      	ldr	r3, [r3, #20]
 8006e0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e16:	d158      	bne.n	8006eca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006e18:	2303      	movs	r3, #3
 8006e1a:	e057      	b.n	8006ecc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006e1c:	4b2e      	ldr	r3, [pc, #184]	@ (8006ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e22:	4a2d      	ldr	r2, [pc, #180]	@ (8006ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e28:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006e2c:	e04d      	b.n	8006eca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e34:	d141      	bne.n	8006eba <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006e36:	4b28      	ldr	r3, [pc, #160]	@ (8006ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006e3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e42:	d131      	bne.n	8006ea8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006e44:	4b24      	ldr	r3, [pc, #144]	@ (8006ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e4a:	4a23      	ldr	r2, [pc, #140]	@ (8006ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e50:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006e54:	4b20      	ldr	r3, [pc, #128]	@ (8006ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006e5c:	4a1e      	ldr	r2, [pc, #120]	@ (8006ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e5e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006e62:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006e64:	4b1d      	ldr	r3, [pc, #116]	@ (8006edc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	2232      	movs	r2, #50	@ 0x32
 8006e6a:	fb02 f303 	mul.w	r3, r2, r3
 8006e6e:	4a1c      	ldr	r2, [pc, #112]	@ (8006ee0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006e70:	fba2 2303 	umull	r2, r3, r2, r3
 8006e74:	0c9b      	lsrs	r3, r3, #18
 8006e76:	3301      	adds	r3, #1
 8006e78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006e7a:	e002      	b.n	8006e82 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	3b01      	subs	r3, #1
 8006e80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006e82:	4b15      	ldr	r3, [pc, #84]	@ (8006ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e84:	695b      	ldr	r3, [r3, #20]
 8006e86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e8e:	d102      	bne.n	8006e96 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d1f2      	bne.n	8006e7c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006e96:	4b10      	ldr	r3, [pc, #64]	@ (8006ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e98:	695b      	ldr	r3, [r3, #20]
 8006e9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ea2:	d112      	bne.n	8006eca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006ea4:	2303      	movs	r3, #3
 8006ea6:	e011      	b.n	8006ecc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006ea8:	4b0b      	ldr	r3, [pc, #44]	@ (8006ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006eaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006eae:	4a0a      	ldr	r2, [pc, #40]	@ (8006ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006eb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006eb4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006eb8:	e007      	b.n	8006eca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006eba:	4b07      	ldr	r3, [pc, #28]	@ (8006ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006ec2:	4a05      	ldr	r2, [pc, #20]	@ (8006ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ec4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006ec8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006eca:	2300      	movs	r3, #0
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	3714      	adds	r7, #20
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr
 8006ed8:	40007000 	.word	0x40007000
 8006edc:	20000000 	.word	0x20000000
 8006ee0:	431bde83 	.word	0x431bde83

08006ee4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006ee8:	4b05      	ldr	r3, [pc, #20]	@ (8006f00 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006eea:	689b      	ldr	r3, [r3, #8]
 8006eec:	4a04      	ldr	r2, [pc, #16]	@ (8006f00 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006eee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006ef2:	6093      	str	r3, [r2, #8]
}
 8006ef4:	bf00      	nop
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efc:	4770      	bx	lr
 8006efe:	bf00      	nop
 8006f00:	40007000 	.word	0x40007000

08006f04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b088      	sub	sp, #32
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d101      	bne.n	8006f16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006f12:	2301      	movs	r3, #1
 8006f14:	e2fe      	b.n	8007514 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f003 0301 	and.w	r3, r3, #1
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d075      	beq.n	800700e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006f22:	4b97      	ldr	r3, [pc, #604]	@ (8007180 <HAL_RCC_OscConfig+0x27c>)
 8006f24:	689b      	ldr	r3, [r3, #8]
 8006f26:	f003 030c 	and.w	r3, r3, #12
 8006f2a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006f2c:	4b94      	ldr	r3, [pc, #592]	@ (8007180 <HAL_RCC_OscConfig+0x27c>)
 8006f2e:	68db      	ldr	r3, [r3, #12]
 8006f30:	f003 0303 	and.w	r3, r3, #3
 8006f34:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006f36:	69bb      	ldr	r3, [r7, #24]
 8006f38:	2b0c      	cmp	r3, #12
 8006f3a:	d102      	bne.n	8006f42 <HAL_RCC_OscConfig+0x3e>
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	2b03      	cmp	r3, #3
 8006f40:	d002      	beq.n	8006f48 <HAL_RCC_OscConfig+0x44>
 8006f42:	69bb      	ldr	r3, [r7, #24]
 8006f44:	2b08      	cmp	r3, #8
 8006f46:	d10b      	bne.n	8006f60 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f48:	4b8d      	ldr	r3, [pc, #564]	@ (8007180 <HAL_RCC_OscConfig+0x27c>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d05b      	beq.n	800700c <HAL_RCC_OscConfig+0x108>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d157      	bne.n	800700c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	e2d9      	b.n	8007514 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f68:	d106      	bne.n	8006f78 <HAL_RCC_OscConfig+0x74>
 8006f6a:	4b85      	ldr	r3, [pc, #532]	@ (8007180 <HAL_RCC_OscConfig+0x27c>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a84      	ldr	r2, [pc, #528]	@ (8007180 <HAL_RCC_OscConfig+0x27c>)
 8006f70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f74:	6013      	str	r3, [r2, #0]
 8006f76:	e01d      	b.n	8006fb4 <HAL_RCC_OscConfig+0xb0>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006f80:	d10c      	bne.n	8006f9c <HAL_RCC_OscConfig+0x98>
 8006f82:	4b7f      	ldr	r3, [pc, #508]	@ (8007180 <HAL_RCC_OscConfig+0x27c>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a7e      	ldr	r2, [pc, #504]	@ (8007180 <HAL_RCC_OscConfig+0x27c>)
 8006f88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006f8c:	6013      	str	r3, [r2, #0]
 8006f8e:	4b7c      	ldr	r3, [pc, #496]	@ (8007180 <HAL_RCC_OscConfig+0x27c>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a7b      	ldr	r2, [pc, #492]	@ (8007180 <HAL_RCC_OscConfig+0x27c>)
 8006f94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f98:	6013      	str	r3, [r2, #0]
 8006f9a:	e00b      	b.n	8006fb4 <HAL_RCC_OscConfig+0xb0>
 8006f9c:	4b78      	ldr	r3, [pc, #480]	@ (8007180 <HAL_RCC_OscConfig+0x27c>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a77      	ldr	r2, [pc, #476]	@ (8007180 <HAL_RCC_OscConfig+0x27c>)
 8006fa2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006fa6:	6013      	str	r3, [r2, #0]
 8006fa8:	4b75      	ldr	r3, [pc, #468]	@ (8007180 <HAL_RCC_OscConfig+0x27c>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a74      	ldr	r2, [pc, #464]	@ (8007180 <HAL_RCC_OscConfig+0x27c>)
 8006fae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006fb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d013      	beq.n	8006fe4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fbc:	f7fb fad2 	bl	8002564 <HAL_GetTick>
 8006fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006fc2:	e008      	b.n	8006fd6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006fc4:	f7fb face 	bl	8002564 <HAL_GetTick>
 8006fc8:	4602      	mov	r2, r0
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	1ad3      	subs	r3, r2, r3
 8006fce:	2b64      	cmp	r3, #100	@ 0x64
 8006fd0:	d901      	bls.n	8006fd6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006fd2:	2303      	movs	r3, #3
 8006fd4:	e29e      	b.n	8007514 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006fd6:	4b6a      	ldr	r3, [pc, #424]	@ (8007180 <HAL_RCC_OscConfig+0x27c>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d0f0      	beq.n	8006fc4 <HAL_RCC_OscConfig+0xc0>
 8006fe2:	e014      	b.n	800700e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fe4:	f7fb fabe 	bl	8002564 <HAL_GetTick>
 8006fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006fea:	e008      	b.n	8006ffe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006fec:	f7fb faba 	bl	8002564 <HAL_GetTick>
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	1ad3      	subs	r3, r2, r3
 8006ff6:	2b64      	cmp	r3, #100	@ 0x64
 8006ff8:	d901      	bls.n	8006ffe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006ffa:	2303      	movs	r3, #3
 8006ffc:	e28a      	b.n	8007514 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006ffe:	4b60      	ldr	r3, [pc, #384]	@ (8007180 <HAL_RCC_OscConfig+0x27c>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007006:	2b00      	cmp	r3, #0
 8007008:	d1f0      	bne.n	8006fec <HAL_RCC_OscConfig+0xe8>
 800700a:	e000      	b.n	800700e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800700c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f003 0302 	and.w	r3, r3, #2
 8007016:	2b00      	cmp	r3, #0
 8007018:	d075      	beq.n	8007106 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800701a:	4b59      	ldr	r3, [pc, #356]	@ (8007180 <HAL_RCC_OscConfig+0x27c>)
 800701c:	689b      	ldr	r3, [r3, #8]
 800701e:	f003 030c 	and.w	r3, r3, #12
 8007022:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007024:	4b56      	ldr	r3, [pc, #344]	@ (8007180 <HAL_RCC_OscConfig+0x27c>)
 8007026:	68db      	ldr	r3, [r3, #12]
 8007028:	f003 0303 	and.w	r3, r3, #3
 800702c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800702e:	69bb      	ldr	r3, [r7, #24]
 8007030:	2b0c      	cmp	r3, #12
 8007032:	d102      	bne.n	800703a <HAL_RCC_OscConfig+0x136>
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	2b02      	cmp	r3, #2
 8007038:	d002      	beq.n	8007040 <HAL_RCC_OscConfig+0x13c>
 800703a:	69bb      	ldr	r3, [r7, #24]
 800703c:	2b04      	cmp	r3, #4
 800703e:	d11f      	bne.n	8007080 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007040:	4b4f      	ldr	r3, [pc, #316]	@ (8007180 <HAL_RCC_OscConfig+0x27c>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007048:	2b00      	cmp	r3, #0
 800704a:	d005      	beq.n	8007058 <HAL_RCC_OscConfig+0x154>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	68db      	ldr	r3, [r3, #12]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d101      	bne.n	8007058 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8007054:	2301      	movs	r3, #1
 8007056:	e25d      	b.n	8007514 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007058:	4b49      	ldr	r3, [pc, #292]	@ (8007180 <HAL_RCC_OscConfig+0x27c>)
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	691b      	ldr	r3, [r3, #16]
 8007064:	061b      	lsls	r3, r3, #24
 8007066:	4946      	ldr	r1, [pc, #280]	@ (8007180 <HAL_RCC_OscConfig+0x27c>)
 8007068:	4313      	orrs	r3, r2
 800706a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800706c:	4b45      	ldr	r3, [pc, #276]	@ (8007184 <HAL_RCC_OscConfig+0x280>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4618      	mov	r0, r3
 8007072:	f7fb fa2b 	bl	80024cc <HAL_InitTick>
 8007076:	4603      	mov	r3, r0
 8007078:	2b00      	cmp	r3, #0
 800707a:	d043      	beq.n	8007104 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800707c:	2301      	movs	r3, #1
 800707e:	e249      	b.n	8007514 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	68db      	ldr	r3, [r3, #12]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d023      	beq.n	80070d0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007088:	4b3d      	ldr	r3, [pc, #244]	@ (8007180 <HAL_RCC_OscConfig+0x27c>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a3c      	ldr	r2, [pc, #240]	@ (8007180 <HAL_RCC_OscConfig+0x27c>)
 800708e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007092:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007094:	f7fb fa66 	bl	8002564 <HAL_GetTick>
 8007098:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800709a:	e008      	b.n	80070ae <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800709c:	f7fb fa62 	bl	8002564 <HAL_GetTick>
 80070a0:	4602      	mov	r2, r0
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	1ad3      	subs	r3, r2, r3
 80070a6:	2b02      	cmp	r3, #2
 80070a8:	d901      	bls.n	80070ae <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80070aa:	2303      	movs	r3, #3
 80070ac:	e232      	b.n	8007514 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80070ae:	4b34      	ldr	r3, [pc, #208]	@ (8007180 <HAL_RCC_OscConfig+0x27c>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d0f0      	beq.n	800709c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070ba:	4b31      	ldr	r3, [pc, #196]	@ (8007180 <HAL_RCC_OscConfig+0x27c>)
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	691b      	ldr	r3, [r3, #16]
 80070c6:	061b      	lsls	r3, r3, #24
 80070c8:	492d      	ldr	r1, [pc, #180]	@ (8007180 <HAL_RCC_OscConfig+0x27c>)
 80070ca:	4313      	orrs	r3, r2
 80070cc:	604b      	str	r3, [r1, #4]
 80070ce:	e01a      	b.n	8007106 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80070d0:	4b2b      	ldr	r3, [pc, #172]	@ (8007180 <HAL_RCC_OscConfig+0x27c>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a2a      	ldr	r2, [pc, #168]	@ (8007180 <HAL_RCC_OscConfig+0x27c>)
 80070d6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80070da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070dc:	f7fb fa42 	bl	8002564 <HAL_GetTick>
 80070e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80070e2:	e008      	b.n	80070f6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80070e4:	f7fb fa3e 	bl	8002564 <HAL_GetTick>
 80070e8:	4602      	mov	r2, r0
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	1ad3      	subs	r3, r2, r3
 80070ee:	2b02      	cmp	r3, #2
 80070f0:	d901      	bls.n	80070f6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80070f2:	2303      	movs	r3, #3
 80070f4:	e20e      	b.n	8007514 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80070f6:	4b22      	ldr	r3, [pc, #136]	@ (8007180 <HAL_RCC_OscConfig+0x27c>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d1f0      	bne.n	80070e4 <HAL_RCC_OscConfig+0x1e0>
 8007102:	e000      	b.n	8007106 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007104:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f003 0308 	and.w	r3, r3, #8
 800710e:	2b00      	cmp	r3, #0
 8007110:	d041      	beq.n	8007196 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	695b      	ldr	r3, [r3, #20]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d01c      	beq.n	8007154 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800711a:	4b19      	ldr	r3, [pc, #100]	@ (8007180 <HAL_RCC_OscConfig+0x27c>)
 800711c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007120:	4a17      	ldr	r2, [pc, #92]	@ (8007180 <HAL_RCC_OscConfig+0x27c>)
 8007122:	f043 0301 	orr.w	r3, r3, #1
 8007126:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800712a:	f7fb fa1b 	bl	8002564 <HAL_GetTick>
 800712e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007130:	e008      	b.n	8007144 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007132:	f7fb fa17 	bl	8002564 <HAL_GetTick>
 8007136:	4602      	mov	r2, r0
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	1ad3      	subs	r3, r2, r3
 800713c:	2b02      	cmp	r3, #2
 800713e:	d901      	bls.n	8007144 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007140:	2303      	movs	r3, #3
 8007142:	e1e7      	b.n	8007514 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007144:	4b0e      	ldr	r3, [pc, #56]	@ (8007180 <HAL_RCC_OscConfig+0x27c>)
 8007146:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800714a:	f003 0302 	and.w	r3, r3, #2
 800714e:	2b00      	cmp	r3, #0
 8007150:	d0ef      	beq.n	8007132 <HAL_RCC_OscConfig+0x22e>
 8007152:	e020      	b.n	8007196 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007154:	4b0a      	ldr	r3, [pc, #40]	@ (8007180 <HAL_RCC_OscConfig+0x27c>)
 8007156:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800715a:	4a09      	ldr	r2, [pc, #36]	@ (8007180 <HAL_RCC_OscConfig+0x27c>)
 800715c:	f023 0301 	bic.w	r3, r3, #1
 8007160:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007164:	f7fb f9fe 	bl	8002564 <HAL_GetTick>
 8007168:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800716a:	e00d      	b.n	8007188 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800716c:	f7fb f9fa 	bl	8002564 <HAL_GetTick>
 8007170:	4602      	mov	r2, r0
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	1ad3      	subs	r3, r2, r3
 8007176:	2b02      	cmp	r3, #2
 8007178:	d906      	bls.n	8007188 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800717a:	2303      	movs	r3, #3
 800717c:	e1ca      	b.n	8007514 <HAL_RCC_OscConfig+0x610>
 800717e:	bf00      	nop
 8007180:	40021000 	.word	0x40021000
 8007184:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007188:	4b8c      	ldr	r3, [pc, #560]	@ (80073bc <HAL_RCC_OscConfig+0x4b8>)
 800718a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800718e:	f003 0302 	and.w	r3, r3, #2
 8007192:	2b00      	cmp	r3, #0
 8007194:	d1ea      	bne.n	800716c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f003 0304 	and.w	r3, r3, #4
 800719e:	2b00      	cmp	r3, #0
 80071a0:	f000 80a6 	beq.w	80072f0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80071a4:	2300      	movs	r3, #0
 80071a6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80071a8:	4b84      	ldr	r3, [pc, #528]	@ (80073bc <HAL_RCC_OscConfig+0x4b8>)
 80071aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d101      	bne.n	80071b8 <HAL_RCC_OscConfig+0x2b4>
 80071b4:	2301      	movs	r3, #1
 80071b6:	e000      	b.n	80071ba <HAL_RCC_OscConfig+0x2b6>
 80071b8:	2300      	movs	r3, #0
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d00d      	beq.n	80071da <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80071be:	4b7f      	ldr	r3, [pc, #508]	@ (80073bc <HAL_RCC_OscConfig+0x4b8>)
 80071c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071c2:	4a7e      	ldr	r2, [pc, #504]	@ (80073bc <HAL_RCC_OscConfig+0x4b8>)
 80071c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80071c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80071ca:	4b7c      	ldr	r3, [pc, #496]	@ (80073bc <HAL_RCC_OscConfig+0x4b8>)
 80071cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80071d2:	60fb      	str	r3, [r7, #12]
 80071d4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80071d6:	2301      	movs	r3, #1
 80071d8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80071da:	4b79      	ldr	r3, [pc, #484]	@ (80073c0 <HAL_RCC_OscConfig+0x4bc>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d118      	bne.n	8007218 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80071e6:	4b76      	ldr	r3, [pc, #472]	@ (80073c0 <HAL_RCC_OscConfig+0x4bc>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a75      	ldr	r2, [pc, #468]	@ (80073c0 <HAL_RCC_OscConfig+0x4bc>)
 80071ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80071f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80071f2:	f7fb f9b7 	bl	8002564 <HAL_GetTick>
 80071f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80071f8:	e008      	b.n	800720c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071fa:	f7fb f9b3 	bl	8002564 <HAL_GetTick>
 80071fe:	4602      	mov	r2, r0
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	1ad3      	subs	r3, r2, r3
 8007204:	2b02      	cmp	r3, #2
 8007206:	d901      	bls.n	800720c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8007208:	2303      	movs	r3, #3
 800720a:	e183      	b.n	8007514 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800720c:	4b6c      	ldr	r3, [pc, #432]	@ (80073c0 <HAL_RCC_OscConfig+0x4bc>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007214:	2b00      	cmp	r3, #0
 8007216:	d0f0      	beq.n	80071fa <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	689b      	ldr	r3, [r3, #8]
 800721c:	2b01      	cmp	r3, #1
 800721e:	d108      	bne.n	8007232 <HAL_RCC_OscConfig+0x32e>
 8007220:	4b66      	ldr	r3, [pc, #408]	@ (80073bc <HAL_RCC_OscConfig+0x4b8>)
 8007222:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007226:	4a65      	ldr	r2, [pc, #404]	@ (80073bc <HAL_RCC_OscConfig+0x4b8>)
 8007228:	f043 0301 	orr.w	r3, r3, #1
 800722c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007230:	e024      	b.n	800727c <HAL_RCC_OscConfig+0x378>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	689b      	ldr	r3, [r3, #8]
 8007236:	2b05      	cmp	r3, #5
 8007238:	d110      	bne.n	800725c <HAL_RCC_OscConfig+0x358>
 800723a:	4b60      	ldr	r3, [pc, #384]	@ (80073bc <HAL_RCC_OscConfig+0x4b8>)
 800723c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007240:	4a5e      	ldr	r2, [pc, #376]	@ (80073bc <HAL_RCC_OscConfig+0x4b8>)
 8007242:	f043 0304 	orr.w	r3, r3, #4
 8007246:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800724a:	4b5c      	ldr	r3, [pc, #368]	@ (80073bc <HAL_RCC_OscConfig+0x4b8>)
 800724c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007250:	4a5a      	ldr	r2, [pc, #360]	@ (80073bc <HAL_RCC_OscConfig+0x4b8>)
 8007252:	f043 0301 	orr.w	r3, r3, #1
 8007256:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800725a:	e00f      	b.n	800727c <HAL_RCC_OscConfig+0x378>
 800725c:	4b57      	ldr	r3, [pc, #348]	@ (80073bc <HAL_RCC_OscConfig+0x4b8>)
 800725e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007262:	4a56      	ldr	r2, [pc, #344]	@ (80073bc <HAL_RCC_OscConfig+0x4b8>)
 8007264:	f023 0301 	bic.w	r3, r3, #1
 8007268:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800726c:	4b53      	ldr	r3, [pc, #332]	@ (80073bc <HAL_RCC_OscConfig+0x4b8>)
 800726e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007272:	4a52      	ldr	r2, [pc, #328]	@ (80073bc <HAL_RCC_OscConfig+0x4b8>)
 8007274:	f023 0304 	bic.w	r3, r3, #4
 8007278:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	689b      	ldr	r3, [r3, #8]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d016      	beq.n	80072b2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007284:	f7fb f96e 	bl	8002564 <HAL_GetTick>
 8007288:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800728a:	e00a      	b.n	80072a2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800728c:	f7fb f96a 	bl	8002564 <HAL_GetTick>
 8007290:	4602      	mov	r2, r0
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	1ad3      	subs	r3, r2, r3
 8007296:	f241 3288 	movw	r2, #5000	@ 0x1388
 800729a:	4293      	cmp	r3, r2
 800729c:	d901      	bls.n	80072a2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800729e:	2303      	movs	r3, #3
 80072a0:	e138      	b.n	8007514 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80072a2:	4b46      	ldr	r3, [pc, #280]	@ (80073bc <HAL_RCC_OscConfig+0x4b8>)
 80072a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072a8:	f003 0302 	and.w	r3, r3, #2
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d0ed      	beq.n	800728c <HAL_RCC_OscConfig+0x388>
 80072b0:	e015      	b.n	80072de <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072b2:	f7fb f957 	bl	8002564 <HAL_GetTick>
 80072b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80072b8:	e00a      	b.n	80072d0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072ba:	f7fb f953 	bl	8002564 <HAL_GetTick>
 80072be:	4602      	mov	r2, r0
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	1ad3      	subs	r3, r2, r3
 80072c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d901      	bls.n	80072d0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80072cc:	2303      	movs	r3, #3
 80072ce:	e121      	b.n	8007514 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80072d0:	4b3a      	ldr	r3, [pc, #232]	@ (80073bc <HAL_RCC_OscConfig+0x4b8>)
 80072d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072d6:	f003 0302 	and.w	r3, r3, #2
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d1ed      	bne.n	80072ba <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80072de:	7ffb      	ldrb	r3, [r7, #31]
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d105      	bne.n	80072f0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80072e4:	4b35      	ldr	r3, [pc, #212]	@ (80073bc <HAL_RCC_OscConfig+0x4b8>)
 80072e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072e8:	4a34      	ldr	r2, [pc, #208]	@ (80073bc <HAL_RCC_OscConfig+0x4b8>)
 80072ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80072ee:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f003 0320 	and.w	r3, r3, #32
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d03c      	beq.n	8007376 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	699b      	ldr	r3, [r3, #24]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d01c      	beq.n	800733e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007304:	4b2d      	ldr	r3, [pc, #180]	@ (80073bc <HAL_RCC_OscConfig+0x4b8>)
 8007306:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800730a:	4a2c      	ldr	r2, [pc, #176]	@ (80073bc <HAL_RCC_OscConfig+0x4b8>)
 800730c:	f043 0301 	orr.w	r3, r3, #1
 8007310:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007314:	f7fb f926 	bl	8002564 <HAL_GetTick>
 8007318:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800731a:	e008      	b.n	800732e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800731c:	f7fb f922 	bl	8002564 <HAL_GetTick>
 8007320:	4602      	mov	r2, r0
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	1ad3      	subs	r3, r2, r3
 8007326:	2b02      	cmp	r3, #2
 8007328:	d901      	bls.n	800732e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800732a:	2303      	movs	r3, #3
 800732c:	e0f2      	b.n	8007514 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800732e:	4b23      	ldr	r3, [pc, #140]	@ (80073bc <HAL_RCC_OscConfig+0x4b8>)
 8007330:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007334:	f003 0302 	and.w	r3, r3, #2
 8007338:	2b00      	cmp	r3, #0
 800733a:	d0ef      	beq.n	800731c <HAL_RCC_OscConfig+0x418>
 800733c:	e01b      	b.n	8007376 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800733e:	4b1f      	ldr	r3, [pc, #124]	@ (80073bc <HAL_RCC_OscConfig+0x4b8>)
 8007340:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007344:	4a1d      	ldr	r2, [pc, #116]	@ (80073bc <HAL_RCC_OscConfig+0x4b8>)
 8007346:	f023 0301 	bic.w	r3, r3, #1
 800734a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800734e:	f7fb f909 	bl	8002564 <HAL_GetTick>
 8007352:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007354:	e008      	b.n	8007368 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007356:	f7fb f905 	bl	8002564 <HAL_GetTick>
 800735a:	4602      	mov	r2, r0
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	1ad3      	subs	r3, r2, r3
 8007360:	2b02      	cmp	r3, #2
 8007362:	d901      	bls.n	8007368 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8007364:	2303      	movs	r3, #3
 8007366:	e0d5      	b.n	8007514 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007368:	4b14      	ldr	r3, [pc, #80]	@ (80073bc <HAL_RCC_OscConfig+0x4b8>)
 800736a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800736e:	f003 0302 	and.w	r3, r3, #2
 8007372:	2b00      	cmp	r3, #0
 8007374:	d1ef      	bne.n	8007356 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	69db      	ldr	r3, [r3, #28]
 800737a:	2b00      	cmp	r3, #0
 800737c:	f000 80c9 	beq.w	8007512 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007380:	4b0e      	ldr	r3, [pc, #56]	@ (80073bc <HAL_RCC_OscConfig+0x4b8>)
 8007382:	689b      	ldr	r3, [r3, #8]
 8007384:	f003 030c 	and.w	r3, r3, #12
 8007388:	2b0c      	cmp	r3, #12
 800738a:	f000 8083 	beq.w	8007494 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	69db      	ldr	r3, [r3, #28]
 8007392:	2b02      	cmp	r3, #2
 8007394:	d15e      	bne.n	8007454 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007396:	4b09      	ldr	r3, [pc, #36]	@ (80073bc <HAL_RCC_OscConfig+0x4b8>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a08      	ldr	r2, [pc, #32]	@ (80073bc <HAL_RCC_OscConfig+0x4b8>)
 800739c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80073a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073a2:	f7fb f8df 	bl	8002564 <HAL_GetTick>
 80073a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80073a8:	e00c      	b.n	80073c4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073aa:	f7fb f8db 	bl	8002564 <HAL_GetTick>
 80073ae:	4602      	mov	r2, r0
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	1ad3      	subs	r3, r2, r3
 80073b4:	2b02      	cmp	r3, #2
 80073b6:	d905      	bls.n	80073c4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80073b8:	2303      	movs	r3, #3
 80073ba:	e0ab      	b.n	8007514 <HAL_RCC_OscConfig+0x610>
 80073bc:	40021000 	.word	0x40021000
 80073c0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80073c4:	4b55      	ldr	r3, [pc, #340]	@ (800751c <HAL_RCC_OscConfig+0x618>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d1ec      	bne.n	80073aa <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80073d0:	4b52      	ldr	r3, [pc, #328]	@ (800751c <HAL_RCC_OscConfig+0x618>)
 80073d2:	68da      	ldr	r2, [r3, #12]
 80073d4:	4b52      	ldr	r3, [pc, #328]	@ (8007520 <HAL_RCC_OscConfig+0x61c>)
 80073d6:	4013      	ands	r3, r2
 80073d8:	687a      	ldr	r2, [r7, #4]
 80073da:	6a11      	ldr	r1, [r2, #32]
 80073dc:	687a      	ldr	r2, [r7, #4]
 80073de:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80073e0:	3a01      	subs	r2, #1
 80073e2:	0112      	lsls	r2, r2, #4
 80073e4:	4311      	orrs	r1, r2
 80073e6:	687a      	ldr	r2, [r7, #4]
 80073e8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80073ea:	0212      	lsls	r2, r2, #8
 80073ec:	4311      	orrs	r1, r2
 80073ee:	687a      	ldr	r2, [r7, #4]
 80073f0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80073f2:	0852      	lsrs	r2, r2, #1
 80073f4:	3a01      	subs	r2, #1
 80073f6:	0552      	lsls	r2, r2, #21
 80073f8:	4311      	orrs	r1, r2
 80073fa:	687a      	ldr	r2, [r7, #4]
 80073fc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80073fe:	0852      	lsrs	r2, r2, #1
 8007400:	3a01      	subs	r2, #1
 8007402:	0652      	lsls	r2, r2, #25
 8007404:	4311      	orrs	r1, r2
 8007406:	687a      	ldr	r2, [r7, #4]
 8007408:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800740a:	06d2      	lsls	r2, r2, #27
 800740c:	430a      	orrs	r2, r1
 800740e:	4943      	ldr	r1, [pc, #268]	@ (800751c <HAL_RCC_OscConfig+0x618>)
 8007410:	4313      	orrs	r3, r2
 8007412:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007414:	4b41      	ldr	r3, [pc, #260]	@ (800751c <HAL_RCC_OscConfig+0x618>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a40      	ldr	r2, [pc, #256]	@ (800751c <HAL_RCC_OscConfig+0x618>)
 800741a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800741e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007420:	4b3e      	ldr	r3, [pc, #248]	@ (800751c <HAL_RCC_OscConfig+0x618>)
 8007422:	68db      	ldr	r3, [r3, #12]
 8007424:	4a3d      	ldr	r2, [pc, #244]	@ (800751c <HAL_RCC_OscConfig+0x618>)
 8007426:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800742a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800742c:	f7fb f89a 	bl	8002564 <HAL_GetTick>
 8007430:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007432:	e008      	b.n	8007446 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007434:	f7fb f896 	bl	8002564 <HAL_GetTick>
 8007438:	4602      	mov	r2, r0
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	1ad3      	subs	r3, r2, r3
 800743e:	2b02      	cmp	r3, #2
 8007440:	d901      	bls.n	8007446 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8007442:	2303      	movs	r3, #3
 8007444:	e066      	b.n	8007514 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007446:	4b35      	ldr	r3, [pc, #212]	@ (800751c <HAL_RCC_OscConfig+0x618>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800744e:	2b00      	cmp	r3, #0
 8007450:	d0f0      	beq.n	8007434 <HAL_RCC_OscConfig+0x530>
 8007452:	e05e      	b.n	8007512 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007454:	4b31      	ldr	r3, [pc, #196]	@ (800751c <HAL_RCC_OscConfig+0x618>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4a30      	ldr	r2, [pc, #192]	@ (800751c <HAL_RCC_OscConfig+0x618>)
 800745a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800745e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007460:	f7fb f880 	bl	8002564 <HAL_GetTick>
 8007464:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007466:	e008      	b.n	800747a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007468:	f7fb f87c 	bl	8002564 <HAL_GetTick>
 800746c:	4602      	mov	r2, r0
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	1ad3      	subs	r3, r2, r3
 8007472:	2b02      	cmp	r3, #2
 8007474:	d901      	bls.n	800747a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8007476:	2303      	movs	r3, #3
 8007478:	e04c      	b.n	8007514 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800747a:	4b28      	ldr	r3, [pc, #160]	@ (800751c <HAL_RCC_OscConfig+0x618>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007482:	2b00      	cmp	r3, #0
 8007484:	d1f0      	bne.n	8007468 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8007486:	4b25      	ldr	r3, [pc, #148]	@ (800751c <HAL_RCC_OscConfig+0x618>)
 8007488:	68da      	ldr	r2, [r3, #12]
 800748a:	4924      	ldr	r1, [pc, #144]	@ (800751c <HAL_RCC_OscConfig+0x618>)
 800748c:	4b25      	ldr	r3, [pc, #148]	@ (8007524 <HAL_RCC_OscConfig+0x620>)
 800748e:	4013      	ands	r3, r2
 8007490:	60cb      	str	r3, [r1, #12]
 8007492:	e03e      	b.n	8007512 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	69db      	ldr	r3, [r3, #28]
 8007498:	2b01      	cmp	r3, #1
 800749a:	d101      	bne.n	80074a0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800749c:	2301      	movs	r3, #1
 800749e:	e039      	b.n	8007514 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80074a0:	4b1e      	ldr	r3, [pc, #120]	@ (800751c <HAL_RCC_OscConfig+0x618>)
 80074a2:	68db      	ldr	r3, [r3, #12]
 80074a4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	f003 0203 	and.w	r2, r3, #3
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6a1b      	ldr	r3, [r3, #32]
 80074b0:	429a      	cmp	r2, r3
 80074b2:	d12c      	bne.n	800750e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074be:	3b01      	subs	r3, #1
 80074c0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80074c2:	429a      	cmp	r2, r3
 80074c4:	d123      	bne.n	800750e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074d0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80074d2:	429a      	cmp	r2, r3
 80074d4:	d11b      	bne.n	800750e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074e0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80074e2:	429a      	cmp	r2, r3
 80074e4:	d113      	bne.n	800750e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074f0:	085b      	lsrs	r3, r3, #1
 80074f2:	3b01      	subs	r3, #1
 80074f4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80074f6:	429a      	cmp	r2, r3
 80074f8:	d109      	bne.n	800750e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007504:	085b      	lsrs	r3, r3, #1
 8007506:	3b01      	subs	r3, #1
 8007508:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800750a:	429a      	cmp	r2, r3
 800750c:	d001      	beq.n	8007512 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800750e:	2301      	movs	r3, #1
 8007510:	e000      	b.n	8007514 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8007512:	2300      	movs	r3, #0
}
 8007514:	4618      	mov	r0, r3
 8007516:	3720      	adds	r7, #32
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}
 800751c:	40021000 	.word	0x40021000
 8007520:	019f800c 	.word	0x019f800c
 8007524:	feeefffc 	.word	0xfeeefffc

08007528 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b086      	sub	sp, #24
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
 8007530:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007532:	2300      	movs	r3, #0
 8007534:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d101      	bne.n	8007540 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800753c:	2301      	movs	r3, #1
 800753e:	e11e      	b.n	800777e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007540:	4b91      	ldr	r3, [pc, #580]	@ (8007788 <HAL_RCC_ClockConfig+0x260>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f003 030f 	and.w	r3, r3, #15
 8007548:	683a      	ldr	r2, [r7, #0]
 800754a:	429a      	cmp	r2, r3
 800754c:	d910      	bls.n	8007570 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800754e:	4b8e      	ldr	r3, [pc, #568]	@ (8007788 <HAL_RCC_ClockConfig+0x260>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f023 020f 	bic.w	r2, r3, #15
 8007556:	498c      	ldr	r1, [pc, #560]	@ (8007788 <HAL_RCC_ClockConfig+0x260>)
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	4313      	orrs	r3, r2
 800755c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800755e:	4b8a      	ldr	r3, [pc, #552]	@ (8007788 <HAL_RCC_ClockConfig+0x260>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f003 030f 	and.w	r3, r3, #15
 8007566:	683a      	ldr	r2, [r7, #0]
 8007568:	429a      	cmp	r2, r3
 800756a:	d001      	beq.n	8007570 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800756c:	2301      	movs	r3, #1
 800756e:	e106      	b.n	800777e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f003 0301 	and.w	r3, r3, #1
 8007578:	2b00      	cmp	r3, #0
 800757a:	d073      	beq.n	8007664 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	685b      	ldr	r3, [r3, #4]
 8007580:	2b03      	cmp	r3, #3
 8007582:	d129      	bne.n	80075d8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007584:	4b81      	ldr	r3, [pc, #516]	@ (800778c <HAL_RCC_ClockConfig+0x264>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800758c:	2b00      	cmp	r3, #0
 800758e:	d101      	bne.n	8007594 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8007590:	2301      	movs	r3, #1
 8007592:	e0f4      	b.n	800777e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007594:	f000 f99e 	bl	80078d4 <RCC_GetSysClockFreqFromPLLSource>
 8007598:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800759a:	693b      	ldr	r3, [r7, #16]
 800759c:	4a7c      	ldr	r2, [pc, #496]	@ (8007790 <HAL_RCC_ClockConfig+0x268>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d93f      	bls.n	8007622 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80075a2:	4b7a      	ldr	r3, [pc, #488]	@ (800778c <HAL_RCC_ClockConfig+0x264>)
 80075a4:	689b      	ldr	r3, [r3, #8]
 80075a6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d009      	beq.n	80075c2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d033      	beq.n	8007622 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d12f      	bne.n	8007622 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80075c2:	4b72      	ldr	r3, [pc, #456]	@ (800778c <HAL_RCC_ClockConfig+0x264>)
 80075c4:	689b      	ldr	r3, [r3, #8]
 80075c6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80075ca:	4a70      	ldr	r2, [pc, #448]	@ (800778c <HAL_RCC_ClockConfig+0x264>)
 80075cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80075d0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80075d2:	2380      	movs	r3, #128	@ 0x80
 80075d4:	617b      	str	r3, [r7, #20]
 80075d6:	e024      	b.n	8007622 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	2b02      	cmp	r3, #2
 80075de:	d107      	bne.n	80075f0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80075e0:	4b6a      	ldr	r3, [pc, #424]	@ (800778c <HAL_RCC_ClockConfig+0x264>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d109      	bne.n	8007600 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80075ec:	2301      	movs	r3, #1
 80075ee:	e0c6      	b.n	800777e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80075f0:	4b66      	ldr	r3, [pc, #408]	@ (800778c <HAL_RCC_ClockConfig+0x264>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d101      	bne.n	8007600 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80075fc:	2301      	movs	r3, #1
 80075fe:	e0be      	b.n	800777e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8007600:	f000 f8ce 	bl	80077a0 <HAL_RCC_GetSysClockFreq>
 8007604:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	4a61      	ldr	r2, [pc, #388]	@ (8007790 <HAL_RCC_ClockConfig+0x268>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d909      	bls.n	8007622 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800760e:	4b5f      	ldr	r3, [pc, #380]	@ (800778c <HAL_RCC_ClockConfig+0x264>)
 8007610:	689b      	ldr	r3, [r3, #8]
 8007612:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007616:	4a5d      	ldr	r2, [pc, #372]	@ (800778c <HAL_RCC_ClockConfig+0x264>)
 8007618:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800761c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800761e:	2380      	movs	r3, #128	@ 0x80
 8007620:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007622:	4b5a      	ldr	r3, [pc, #360]	@ (800778c <HAL_RCC_ClockConfig+0x264>)
 8007624:	689b      	ldr	r3, [r3, #8]
 8007626:	f023 0203 	bic.w	r2, r3, #3
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	685b      	ldr	r3, [r3, #4]
 800762e:	4957      	ldr	r1, [pc, #348]	@ (800778c <HAL_RCC_ClockConfig+0x264>)
 8007630:	4313      	orrs	r3, r2
 8007632:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007634:	f7fa ff96 	bl	8002564 <HAL_GetTick>
 8007638:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800763a:	e00a      	b.n	8007652 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800763c:	f7fa ff92 	bl	8002564 <HAL_GetTick>
 8007640:	4602      	mov	r2, r0
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	1ad3      	subs	r3, r2, r3
 8007646:	f241 3288 	movw	r2, #5000	@ 0x1388
 800764a:	4293      	cmp	r3, r2
 800764c:	d901      	bls.n	8007652 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800764e:	2303      	movs	r3, #3
 8007650:	e095      	b.n	800777e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007652:	4b4e      	ldr	r3, [pc, #312]	@ (800778c <HAL_RCC_ClockConfig+0x264>)
 8007654:	689b      	ldr	r3, [r3, #8]
 8007656:	f003 020c 	and.w	r2, r3, #12
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	009b      	lsls	r3, r3, #2
 8007660:	429a      	cmp	r2, r3
 8007662:	d1eb      	bne.n	800763c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f003 0302 	and.w	r3, r3, #2
 800766c:	2b00      	cmp	r3, #0
 800766e:	d023      	beq.n	80076b8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f003 0304 	and.w	r3, r3, #4
 8007678:	2b00      	cmp	r3, #0
 800767a:	d005      	beq.n	8007688 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800767c:	4b43      	ldr	r3, [pc, #268]	@ (800778c <HAL_RCC_ClockConfig+0x264>)
 800767e:	689b      	ldr	r3, [r3, #8]
 8007680:	4a42      	ldr	r2, [pc, #264]	@ (800778c <HAL_RCC_ClockConfig+0x264>)
 8007682:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007686:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f003 0308 	and.w	r3, r3, #8
 8007690:	2b00      	cmp	r3, #0
 8007692:	d007      	beq.n	80076a4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007694:	4b3d      	ldr	r3, [pc, #244]	@ (800778c <HAL_RCC_ClockConfig+0x264>)
 8007696:	689b      	ldr	r3, [r3, #8]
 8007698:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800769c:	4a3b      	ldr	r2, [pc, #236]	@ (800778c <HAL_RCC_ClockConfig+0x264>)
 800769e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80076a2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80076a4:	4b39      	ldr	r3, [pc, #228]	@ (800778c <HAL_RCC_ClockConfig+0x264>)
 80076a6:	689b      	ldr	r3, [r3, #8]
 80076a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	689b      	ldr	r3, [r3, #8]
 80076b0:	4936      	ldr	r1, [pc, #216]	@ (800778c <HAL_RCC_ClockConfig+0x264>)
 80076b2:	4313      	orrs	r3, r2
 80076b4:	608b      	str	r3, [r1, #8]
 80076b6:	e008      	b.n	80076ca <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	2b80      	cmp	r3, #128	@ 0x80
 80076bc:	d105      	bne.n	80076ca <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80076be:	4b33      	ldr	r3, [pc, #204]	@ (800778c <HAL_RCC_ClockConfig+0x264>)
 80076c0:	689b      	ldr	r3, [r3, #8]
 80076c2:	4a32      	ldr	r2, [pc, #200]	@ (800778c <HAL_RCC_ClockConfig+0x264>)
 80076c4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80076c8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80076ca:	4b2f      	ldr	r3, [pc, #188]	@ (8007788 <HAL_RCC_ClockConfig+0x260>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f003 030f 	and.w	r3, r3, #15
 80076d2:	683a      	ldr	r2, [r7, #0]
 80076d4:	429a      	cmp	r2, r3
 80076d6:	d21d      	bcs.n	8007714 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076d8:	4b2b      	ldr	r3, [pc, #172]	@ (8007788 <HAL_RCC_ClockConfig+0x260>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f023 020f 	bic.w	r2, r3, #15
 80076e0:	4929      	ldr	r1, [pc, #164]	@ (8007788 <HAL_RCC_ClockConfig+0x260>)
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	4313      	orrs	r3, r2
 80076e6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80076e8:	f7fa ff3c 	bl	8002564 <HAL_GetTick>
 80076ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80076ee:	e00a      	b.n	8007706 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80076f0:	f7fa ff38 	bl	8002564 <HAL_GetTick>
 80076f4:	4602      	mov	r2, r0
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	1ad3      	subs	r3, r2, r3
 80076fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80076fe:	4293      	cmp	r3, r2
 8007700:	d901      	bls.n	8007706 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8007702:	2303      	movs	r3, #3
 8007704:	e03b      	b.n	800777e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007706:	4b20      	ldr	r3, [pc, #128]	@ (8007788 <HAL_RCC_ClockConfig+0x260>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f003 030f 	and.w	r3, r3, #15
 800770e:	683a      	ldr	r2, [r7, #0]
 8007710:	429a      	cmp	r2, r3
 8007712:	d1ed      	bne.n	80076f0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f003 0304 	and.w	r3, r3, #4
 800771c:	2b00      	cmp	r3, #0
 800771e:	d008      	beq.n	8007732 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007720:	4b1a      	ldr	r3, [pc, #104]	@ (800778c <HAL_RCC_ClockConfig+0x264>)
 8007722:	689b      	ldr	r3, [r3, #8]
 8007724:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	68db      	ldr	r3, [r3, #12]
 800772c:	4917      	ldr	r1, [pc, #92]	@ (800778c <HAL_RCC_ClockConfig+0x264>)
 800772e:	4313      	orrs	r3, r2
 8007730:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f003 0308 	and.w	r3, r3, #8
 800773a:	2b00      	cmp	r3, #0
 800773c:	d009      	beq.n	8007752 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800773e:	4b13      	ldr	r3, [pc, #76]	@ (800778c <HAL_RCC_ClockConfig+0x264>)
 8007740:	689b      	ldr	r3, [r3, #8]
 8007742:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	691b      	ldr	r3, [r3, #16]
 800774a:	00db      	lsls	r3, r3, #3
 800774c:	490f      	ldr	r1, [pc, #60]	@ (800778c <HAL_RCC_ClockConfig+0x264>)
 800774e:	4313      	orrs	r3, r2
 8007750:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007752:	f000 f825 	bl	80077a0 <HAL_RCC_GetSysClockFreq>
 8007756:	4602      	mov	r2, r0
 8007758:	4b0c      	ldr	r3, [pc, #48]	@ (800778c <HAL_RCC_ClockConfig+0x264>)
 800775a:	689b      	ldr	r3, [r3, #8]
 800775c:	091b      	lsrs	r3, r3, #4
 800775e:	f003 030f 	and.w	r3, r3, #15
 8007762:	490c      	ldr	r1, [pc, #48]	@ (8007794 <HAL_RCC_ClockConfig+0x26c>)
 8007764:	5ccb      	ldrb	r3, [r1, r3]
 8007766:	f003 031f 	and.w	r3, r3, #31
 800776a:	fa22 f303 	lsr.w	r3, r2, r3
 800776e:	4a0a      	ldr	r2, [pc, #40]	@ (8007798 <HAL_RCC_ClockConfig+0x270>)
 8007770:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007772:	4b0a      	ldr	r3, [pc, #40]	@ (800779c <HAL_RCC_ClockConfig+0x274>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4618      	mov	r0, r3
 8007778:	f7fa fea8 	bl	80024cc <HAL_InitTick>
 800777c:	4603      	mov	r3, r0
}
 800777e:	4618      	mov	r0, r3
 8007780:	3718      	adds	r7, #24
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}
 8007786:	bf00      	nop
 8007788:	40022000 	.word	0x40022000
 800778c:	40021000 	.word	0x40021000
 8007790:	04c4b400 	.word	0x04c4b400
 8007794:	0800ccd8 	.word	0x0800ccd8
 8007798:	20000000 	.word	0x20000000
 800779c:	20000004 	.word	0x20000004

080077a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b087      	sub	sp, #28
 80077a4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80077a6:	4b2c      	ldr	r3, [pc, #176]	@ (8007858 <HAL_RCC_GetSysClockFreq+0xb8>)
 80077a8:	689b      	ldr	r3, [r3, #8]
 80077aa:	f003 030c 	and.w	r3, r3, #12
 80077ae:	2b04      	cmp	r3, #4
 80077b0:	d102      	bne.n	80077b8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80077b2:	4b2a      	ldr	r3, [pc, #168]	@ (800785c <HAL_RCC_GetSysClockFreq+0xbc>)
 80077b4:	613b      	str	r3, [r7, #16]
 80077b6:	e047      	b.n	8007848 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80077b8:	4b27      	ldr	r3, [pc, #156]	@ (8007858 <HAL_RCC_GetSysClockFreq+0xb8>)
 80077ba:	689b      	ldr	r3, [r3, #8]
 80077bc:	f003 030c 	and.w	r3, r3, #12
 80077c0:	2b08      	cmp	r3, #8
 80077c2:	d102      	bne.n	80077ca <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80077c4:	4b26      	ldr	r3, [pc, #152]	@ (8007860 <HAL_RCC_GetSysClockFreq+0xc0>)
 80077c6:	613b      	str	r3, [r7, #16]
 80077c8:	e03e      	b.n	8007848 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80077ca:	4b23      	ldr	r3, [pc, #140]	@ (8007858 <HAL_RCC_GetSysClockFreq+0xb8>)
 80077cc:	689b      	ldr	r3, [r3, #8]
 80077ce:	f003 030c 	and.w	r3, r3, #12
 80077d2:	2b0c      	cmp	r3, #12
 80077d4:	d136      	bne.n	8007844 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80077d6:	4b20      	ldr	r3, [pc, #128]	@ (8007858 <HAL_RCC_GetSysClockFreq+0xb8>)
 80077d8:	68db      	ldr	r3, [r3, #12]
 80077da:	f003 0303 	and.w	r3, r3, #3
 80077de:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80077e0:	4b1d      	ldr	r3, [pc, #116]	@ (8007858 <HAL_RCC_GetSysClockFreq+0xb8>)
 80077e2:	68db      	ldr	r3, [r3, #12]
 80077e4:	091b      	lsrs	r3, r3, #4
 80077e6:	f003 030f 	and.w	r3, r3, #15
 80077ea:	3301      	adds	r3, #1
 80077ec:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	2b03      	cmp	r3, #3
 80077f2:	d10c      	bne.n	800780e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80077f4:	4a1a      	ldr	r2, [pc, #104]	@ (8007860 <HAL_RCC_GetSysClockFreq+0xc0>)
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80077fc:	4a16      	ldr	r2, [pc, #88]	@ (8007858 <HAL_RCC_GetSysClockFreq+0xb8>)
 80077fe:	68d2      	ldr	r2, [r2, #12]
 8007800:	0a12      	lsrs	r2, r2, #8
 8007802:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007806:	fb02 f303 	mul.w	r3, r2, r3
 800780a:	617b      	str	r3, [r7, #20]
      break;
 800780c:	e00c      	b.n	8007828 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800780e:	4a13      	ldr	r2, [pc, #76]	@ (800785c <HAL_RCC_GetSysClockFreq+0xbc>)
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	fbb2 f3f3 	udiv	r3, r2, r3
 8007816:	4a10      	ldr	r2, [pc, #64]	@ (8007858 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007818:	68d2      	ldr	r2, [r2, #12]
 800781a:	0a12      	lsrs	r2, r2, #8
 800781c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007820:	fb02 f303 	mul.w	r3, r2, r3
 8007824:	617b      	str	r3, [r7, #20]
      break;
 8007826:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007828:	4b0b      	ldr	r3, [pc, #44]	@ (8007858 <HAL_RCC_GetSysClockFreq+0xb8>)
 800782a:	68db      	ldr	r3, [r3, #12]
 800782c:	0e5b      	lsrs	r3, r3, #25
 800782e:	f003 0303 	and.w	r3, r3, #3
 8007832:	3301      	adds	r3, #1
 8007834:	005b      	lsls	r3, r3, #1
 8007836:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007838:	697a      	ldr	r2, [r7, #20]
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007840:	613b      	str	r3, [r7, #16]
 8007842:	e001      	b.n	8007848 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007844:	2300      	movs	r3, #0
 8007846:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007848:	693b      	ldr	r3, [r7, #16]
}
 800784a:	4618      	mov	r0, r3
 800784c:	371c      	adds	r7, #28
 800784e:	46bd      	mov	sp, r7
 8007850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007854:	4770      	bx	lr
 8007856:	bf00      	nop
 8007858:	40021000 	.word	0x40021000
 800785c:	00f42400 	.word	0x00f42400
 8007860:	016e3600 	.word	0x016e3600

08007864 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007864:	b480      	push	{r7}
 8007866:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007868:	4b03      	ldr	r3, [pc, #12]	@ (8007878 <HAL_RCC_GetHCLKFreq+0x14>)
 800786a:	681b      	ldr	r3, [r3, #0]
}
 800786c:	4618      	mov	r0, r3
 800786e:	46bd      	mov	sp, r7
 8007870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007874:	4770      	bx	lr
 8007876:	bf00      	nop
 8007878:	20000000 	.word	0x20000000

0800787c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007880:	f7ff fff0 	bl	8007864 <HAL_RCC_GetHCLKFreq>
 8007884:	4602      	mov	r2, r0
 8007886:	4b06      	ldr	r3, [pc, #24]	@ (80078a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007888:	689b      	ldr	r3, [r3, #8]
 800788a:	0a1b      	lsrs	r3, r3, #8
 800788c:	f003 0307 	and.w	r3, r3, #7
 8007890:	4904      	ldr	r1, [pc, #16]	@ (80078a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007892:	5ccb      	ldrb	r3, [r1, r3]
 8007894:	f003 031f 	and.w	r3, r3, #31
 8007898:	fa22 f303 	lsr.w	r3, r2, r3
}
 800789c:	4618      	mov	r0, r3
 800789e:	bd80      	pop	{r7, pc}
 80078a0:	40021000 	.word	0x40021000
 80078a4:	0800cce8 	.word	0x0800cce8

080078a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80078ac:	f7ff ffda 	bl	8007864 <HAL_RCC_GetHCLKFreq>
 80078b0:	4602      	mov	r2, r0
 80078b2:	4b06      	ldr	r3, [pc, #24]	@ (80078cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80078b4:	689b      	ldr	r3, [r3, #8]
 80078b6:	0adb      	lsrs	r3, r3, #11
 80078b8:	f003 0307 	and.w	r3, r3, #7
 80078bc:	4904      	ldr	r1, [pc, #16]	@ (80078d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80078be:	5ccb      	ldrb	r3, [r1, r3]
 80078c0:	f003 031f 	and.w	r3, r3, #31
 80078c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80078c8:	4618      	mov	r0, r3
 80078ca:	bd80      	pop	{r7, pc}
 80078cc:	40021000 	.word	0x40021000
 80078d0:	0800cce8 	.word	0x0800cce8

080078d4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b087      	sub	sp, #28
 80078d8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80078da:	4b1e      	ldr	r3, [pc, #120]	@ (8007954 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80078dc:	68db      	ldr	r3, [r3, #12]
 80078de:	f003 0303 	and.w	r3, r3, #3
 80078e2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80078e4:	4b1b      	ldr	r3, [pc, #108]	@ (8007954 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80078e6:	68db      	ldr	r3, [r3, #12]
 80078e8:	091b      	lsrs	r3, r3, #4
 80078ea:	f003 030f 	and.w	r3, r3, #15
 80078ee:	3301      	adds	r3, #1
 80078f0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80078f2:	693b      	ldr	r3, [r7, #16]
 80078f4:	2b03      	cmp	r3, #3
 80078f6:	d10c      	bne.n	8007912 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80078f8:	4a17      	ldr	r2, [pc, #92]	@ (8007958 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007900:	4a14      	ldr	r2, [pc, #80]	@ (8007954 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007902:	68d2      	ldr	r2, [r2, #12]
 8007904:	0a12      	lsrs	r2, r2, #8
 8007906:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800790a:	fb02 f303 	mul.w	r3, r2, r3
 800790e:	617b      	str	r3, [r7, #20]
    break;
 8007910:	e00c      	b.n	800792c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007912:	4a12      	ldr	r2, [pc, #72]	@ (800795c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	fbb2 f3f3 	udiv	r3, r2, r3
 800791a:	4a0e      	ldr	r2, [pc, #56]	@ (8007954 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800791c:	68d2      	ldr	r2, [r2, #12]
 800791e:	0a12      	lsrs	r2, r2, #8
 8007920:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007924:	fb02 f303 	mul.w	r3, r2, r3
 8007928:	617b      	str	r3, [r7, #20]
    break;
 800792a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800792c:	4b09      	ldr	r3, [pc, #36]	@ (8007954 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800792e:	68db      	ldr	r3, [r3, #12]
 8007930:	0e5b      	lsrs	r3, r3, #25
 8007932:	f003 0303 	and.w	r3, r3, #3
 8007936:	3301      	adds	r3, #1
 8007938:	005b      	lsls	r3, r3, #1
 800793a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800793c:	697a      	ldr	r2, [r7, #20]
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	fbb2 f3f3 	udiv	r3, r2, r3
 8007944:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007946:	687b      	ldr	r3, [r7, #4]
}
 8007948:	4618      	mov	r0, r3
 800794a:	371c      	adds	r7, #28
 800794c:	46bd      	mov	sp, r7
 800794e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007952:	4770      	bx	lr
 8007954:	40021000 	.word	0x40021000
 8007958:	016e3600 	.word	0x016e3600
 800795c:	00f42400 	.word	0x00f42400

08007960 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b086      	sub	sp, #24
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007968:	2300      	movs	r3, #0
 800796a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800796c:	2300      	movs	r3, #0
 800796e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007978:	2b00      	cmp	r3, #0
 800797a:	f000 8098 	beq.w	8007aae <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800797e:	2300      	movs	r3, #0
 8007980:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007982:	4b43      	ldr	r3, [pc, #268]	@ (8007a90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007984:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007986:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800798a:	2b00      	cmp	r3, #0
 800798c:	d10d      	bne.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800798e:	4b40      	ldr	r3, [pc, #256]	@ (8007a90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007990:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007992:	4a3f      	ldr	r2, [pc, #252]	@ (8007a90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007994:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007998:	6593      	str	r3, [r2, #88]	@ 0x58
 800799a:	4b3d      	ldr	r3, [pc, #244]	@ (8007a90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800799c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800799e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80079a2:	60bb      	str	r3, [r7, #8]
 80079a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80079a6:	2301      	movs	r3, #1
 80079a8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80079aa:	4b3a      	ldr	r3, [pc, #232]	@ (8007a94 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	4a39      	ldr	r2, [pc, #228]	@ (8007a94 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80079b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80079b4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80079b6:	f7fa fdd5 	bl	8002564 <HAL_GetTick>
 80079ba:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80079bc:	e009      	b.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80079be:	f7fa fdd1 	bl	8002564 <HAL_GetTick>
 80079c2:	4602      	mov	r2, r0
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	1ad3      	subs	r3, r2, r3
 80079c8:	2b02      	cmp	r3, #2
 80079ca:	d902      	bls.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80079cc:	2303      	movs	r3, #3
 80079ce:	74fb      	strb	r3, [r7, #19]
        break;
 80079d0:	e005      	b.n	80079de <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80079d2:	4b30      	ldr	r3, [pc, #192]	@ (8007a94 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d0ef      	beq.n	80079be <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80079de:	7cfb      	ldrb	r3, [r7, #19]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d159      	bne.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80079e4:	4b2a      	ldr	r3, [pc, #168]	@ (8007a90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80079e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80079ee:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d01e      	beq.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079fa:	697a      	ldr	r2, [r7, #20]
 80079fc:	429a      	cmp	r2, r3
 80079fe:	d019      	beq.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007a00:	4b23      	ldr	r3, [pc, #140]	@ (8007a90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a0a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007a0c:	4b20      	ldr	r3, [pc, #128]	@ (8007a90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a12:	4a1f      	ldr	r2, [pc, #124]	@ (8007a90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007a1c:	4b1c      	ldr	r3, [pc, #112]	@ (8007a90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a22:	4a1b      	ldr	r2, [pc, #108]	@ (8007a90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007a28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007a2c:	4a18      	ldr	r2, [pc, #96]	@ (8007a90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	f003 0301 	and.w	r3, r3, #1
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d016      	beq.n	8007a6c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a3e:	f7fa fd91 	bl	8002564 <HAL_GetTick>
 8007a42:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007a44:	e00b      	b.n	8007a5e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a46:	f7fa fd8d 	bl	8002564 <HAL_GetTick>
 8007a4a:	4602      	mov	r2, r0
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	1ad3      	subs	r3, r2, r3
 8007a50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d902      	bls.n	8007a5e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007a58:	2303      	movs	r3, #3
 8007a5a:	74fb      	strb	r3, [r7, #19]
            break;
 8007a5c:	e006      	b.n	8007a6c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007a5e:	4b0c      	ldr	r3, [pc, #48]	@ (8007a90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a64:	f003 0302 	and.w	r3, r3, #2
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d0ec      	beq.n	8007a46 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007a6c:	7cfb      	ldrb	r3, [r7, #19]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d10b      	bne.n	8007a8a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007a72:	4b07      	ldr	r3, [pc, #28]	@ (8007a90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a78:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a80:	4903      	ldr	r1, [pc, #12]	@ (8007a90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a82:	4313      	orrs	r3, r2
 8007a84:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007a88:	e008      	b.n	8007a9c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007a8a:	7cfb      	ldrb	r3, [r7, #19]
 8007a8c:	74bb      	strb	r3, [r7, #18]
 8007a8e:	e005      	b.n	8007a9c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007a90:	40021000 	.word	0x40021000
 8007a94:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a98:	7cfb      	ldrb	r3, [r7, #19]
 8007a9a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007a9c:	7c7b      	ldrb	r3, [r7, #17]
 8007a9e:	2b01      	cmp	r3, #1
 8007aa0:	d105      	bne.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007aa2:	4ba6      	ldr	r3, [pc, #664]	@ (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007aa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007aa6:	4aa5      	ldr	r2, [pc, #660]	@ (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007aa8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007aac:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f003 0301 	and.w	r3, r3, #1
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d00a      	beq.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007aba:	4ba0      	ldr	r3, [pc, #640]	@ (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ac0:	f023 0203 	bic.w	r2, r3, #3
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	499c      	ldr	r1, [pc, #624]	@ (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007aca:	4313      	orrs	r3, r2
 8007acc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f003 0302 	and.w	r3, r3, #2
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d00a      	beq.n	8007af2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007adc:	4b97      	ldr	r3, [pc, #604]	@ (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ae2:	f023 020c 	bic.w	r2, r3, #12
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	689b      	ldr	r3, [r3, #8]
 8007aea:	4994      	ldr	r1, [pc, #592]	@ (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007aec:	4313      	orrs	r3, r2
 8007aee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f003 0304 	and.w	r3, r3, #4
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d00a      	beq.n	8007b14 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007afe:	4b8f      	ldr	r3, [pc, #572]	@ (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b04:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	68db      	ldr	r3, [r3, #12]
 8007b0c:	498b      	ldr	r1, [pc, #556]	@ (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b0e:	4313      	orrs	r3, r2
 8007b10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f003 0308 	and.w	r3, r3, #8
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d00a      	beq.n	8007b36 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007b20:	4b86      	ldr	r3, [pc, #536]	@ (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b26:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	691b      	ldr	r3, [r3, #16]
 8007b2e:	4983      	ldr	r1, [pc, #524]	@ (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b30:	4313      	orrs	r3, r2
 8007b32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f003 0320 	and.w	r3, r3, #32
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d00a      	beq.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007b42:	4b7e      	ldr	r3, [pc, #504]	@ (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b48:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	695b      	ldr	r3, [r3, #20]
 8007b50:	497a      	ldr	r1, [pc, #488]	@ (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b52:	4313      	orrs	r3, r2
 8007b54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d00a      	beq.n	8007b7a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007b64:	4b75      	ldr	r3, [pc, #468]	@ (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b6a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	699b      	ldr	r3, [r3, #24]
 8007b72:	4972      	ldr	r1, [pc, #456]	@ (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b74:	4313      	orrs	r3, r2
 8007b76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d00a      	beq.n	8007b9c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007b86:	4b6d      	ldr	r3, [pc, #436]	@ (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b8c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	69db      	ldr	r3, [r3, #28]
 8007b94:	4969      	ldr	r1, [pc, #420]	@ (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b96:	4313      	orrs	r3, r2
 8007b98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d00a      	beq.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007ba8:	4b64      	ldr	r3, [pc, #400]	@ (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bae:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6a1b      	ldr	r3, [r3, #32]
 8007bb6:	4961      	ldr	r1, [pc, #388]	@ (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007bb8:	4313      	orrs	r3, r2
 8007bba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d00a      	beq.n	8007be0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007bca:	4b5c      	ldr	r3, [pc, #368]	@ (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bd0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bd8:	4958      	ldr	r1, [pc, #352]	@ (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d015      	beq.n	8007c18 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007bec:	4b53      	ldr	r3, [pc, #332]	@ (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bf2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bfa:	4950      	ldr	r1, [pc, #320]	@ (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c06:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007c0a:	d105      	bne.n	8007c18 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007c0c:	4b4b      	ldr	r3, [pc, #300]	@ (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007c0e:	68db      	ldr	r3, [r3, #12]
 8007c10:	4a4a      	ldr	r2, [pc, #296]	@ (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007c12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007c16:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d015      	beq.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007c24:	4b45      	ldr	r3, [pc, #276]	@ (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c2a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c32:	4942      	ldr	r1, [pc, #264]	@ (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007c34:	4313      	orrs	r3, r2
 8007c36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c3e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007c42:	d105      	bne.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007c44:	4b3d      	ldr	r3, [pc, #244]	@ (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007c46:	68db      	ldr	r3, [r3, #12]
 8007c48:	4a3c      	ldr	r2, [pc, #240]	@ (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007c4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007c4e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d015      	beq.n	8007c88 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007c5c:	4b37      	ldr	r3, [pc, #220]	@ (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c62:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c6a:	4934      	ldr	r1, [pc, #208]	@ (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007c6c:	4313      	orrs	r3, r2
 8007c6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c76:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007c7a:	d105      	bne.n	8007c88 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007c7c:	4b2f      	ldr	r3, [pc, #188]	@ (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007c7e:	68db      	ldr	r3, [r3, #12]
 8007c80:	4a2e      	ldr	r2, [pc, #184]	@ (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007c82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007c86:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d015      	beq.n	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007c94:	4b29      	ldr	r3, [pc, #164]	@ (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c9a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ca2:	4926      	ldr	r1, [pc, #152]	@ (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007cae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007cb2:	d105      	bne.n	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007cb4:	4b21      	ldr	r3, [pc, #132]	@ (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007cb6:	68db      	ldr	r3, [r3, #12]
 8007cb8:	4a20      	ldr	r2, [pc, #128]	@ (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007cba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007cbe:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d015      	beq.n	8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007ccc:	4b1b      	ldr	r3, [pc, #108]	@ (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cd2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cda:	4918      	ldr	r1, [pc, #96]	@ (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007cdc:	4313      	orrs	r3, r2
 8007cde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ce6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007cea:	d105      	bne.n	8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007cec:	4b13      	ldr	r3, [pc, #76]	@ (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007cee:	68db      	ldr	r3, [r3, #12]
 8007cf0:	4a12      	ldr	r2, [pc, #72]	@ (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007cf2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007cf6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d015      	beq.n	8007d30 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007d04:	4b0d      	ldr	r3, [pc, #52]	@ (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d0a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d12:	490a      	ldr	r1, [pc, #40]	@ (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d14:	4313      	orrs	r3, r2
 8007d16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d1e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007d22:	d105      	bne.n	8007d30 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007d24:	4b05      	ldr	r3, [pc, #20]	@ (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d26:	68db      	ldr	r3, [r3, #12]
 8007d28:	4a04      	ldr	r2, [pc, #16]	@ (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d2e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007d30:	7cbb      	ldrb	r3, [r7, #18]
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	3718      	adds	r7, #24
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd80      	pop	{r7, pc}
 8007d3a:	bf00      	nop
 8007d3c:	40021000 	.word	0x40021000

08007d40 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b084      	sub	sp, #16
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d101      	bne.n	8007d52 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007d4e:	2301      	movs	r3, #1
 8007d50:	e09d      	b.n	8007e8e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d108      	bne.n	8007d6c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	685b      	ldr	r3, [r3, #4]
 8007d5e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007d62:	d009      	beq.n	8007d78 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2200      	movs	r2, #0
 8007d68:	61da      	str	r2, [r3, #28]
 8007d6a:	e005      	b.n	8007d78 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2200      	movs	r2, #0
 8007d76:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007d84:	b2db      	uxtb	r3, r3
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d106      	bne.n	8007d98 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f7f9 ff20 	bl	8001bd8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2202      	movs	r2, #2
 8007d9c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	681a      	ldr	r2, [r3, #0]
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007dae:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	68db      	ldr	r3, [r3, #12]
 8007db4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007db8:	d902      	bls.n	8007dc0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	60fb      	str	r3, [r7, #12]
 8007dbe:	e002      	b.n	8007dc6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007dc0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007dc4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	68db      	ldr	r3, [r3, #12]
 8007dca:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8007dce:	d007      	beq.n	8007de0 <HAL_SPI_Init+0xa0>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	68db      	ldr	r3, [r3, #12]
 8007dd4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007dd8:	d002      	beq.n	8007de0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2200      	movs	r2, #0
 8007dde:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	685b      	ldr	r3, [r3, #4]
 8007de4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	689b      	ldr	r3, [r3, #8]
 8007dec:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007df0:	431a      	orrs	r2, r3
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	691b      	ldr	r3, [r3, #16]
 8007df6:	f003 0302 	and.w	r3, r3, #2
 8007dfa:	431a      	orrs	r2, r3
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	695b      	ldr	r3, [r3, #20]
 8007e00:	f003 0301 	and.w	r3, r3, #1
 8007e04:	431a      	orrs	r2, r3
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	699b      	ldr	r3, [r3, #24]
 8007e0a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007e0e:	431a      	orrs	r2, r3
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	69db      	ldr	r3, [r3, #28]
 8007e14:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007e18:	431a      	orrs	r2, r3
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6a1b      	ldr	r3, [r3, #32]
 8007e1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e22:	ea42 0103 	orr.w	r1, r2, r3
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e2a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	430a      	orrs	r2, r1
 8007e34:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	699b      	ldr	r3, [r3, #24]
 8007e3a:	0c1b      	lsrs	r3, r3, #16
 8007e3c:	f003 0204 	and.w	r2, r3, #4
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e44:	f003 0310 	and.w	r3, r3, #16
 8007e48:	431a      	orrs	r2, r3
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e4e:	f003 0308 	and.w	r3, r3, #8
 8007e52:	431a      	orrs	r2, r3
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	68db      	ldr	r3, [r3, #12]
 8007e58:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007e5c:	ea42 0103 	orr.w	r1, r2, r3
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	430a      	orrs	r2, r1
 8007e6c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	69da      	ldr	r2, [r3, #28]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007e7c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2200      	movs	r2, #0
 8007e82:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2201      	movs	r2, #1
 8007e88:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8007e8c:	2300      	movs	r3, #0
}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	3710      	adds	r7, #16
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}

08007e96 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007e96:	b580      	push	{r7, lr}
 8007e98:	b08a      	sub	sp, #40	@ 0x28
 8007e9a:	af00      	add	r7, sp, #0
 8007e9c:	60f8      	str	r0, [r7, #12]
 8007e9e:	60b9      	str	r1, [r7, #8]
 8007ea0:	607a      	str	r2, [r7, #4]
 8007ea2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007eb4:	2b01      	cmp	r3, #1
 8007eb6:	d101      	bne.n	8007ebc <HAL_SPI_TransmitReceive+0x26>
 8007eb8:	2302      	movs	r3, #2
 8007eba:	e20a      	b.n	80082d2 <HAL_SPI_TransmitReceive+0x43c>
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007ec4:	f7fa fb4e 	bl	8002564 <HAL_GetTick>
 8007ec8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007ed0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	685b      	ldr	r3, [r3, #4]
 8007ed6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007ed8:	887b      	ldrh	r3, [r7, #2]
 8007eda:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8007edc:	887b      	ldrh	r3, [r7, #2]
 8007ede:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007ee0:	7efb      	ldrb	r3, [r7, #27]
 8007ee2:	2b01      	cmp	r3, #1
 8007ee4:	d00e      	beq.n	8007f04 <HAL_SPI_TransmitReceive+0x6e>
 8007ee6:	697b      	ldr	r3, [r7, #20]
 8007ee8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007eec:	d106      	bne.n	8007efc <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	689b      	ldr	r3, [r3, #8]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d102      	bne.n	8007efc <HAL_SPI_TransmitReceive+0x66>
 8007ef6:	7efb      	ldrb	r3, [r7, #27]
 8007ef8:	2b04      	cmp	r3, #4
 8007efa:	d003      	beq.n	8007f04 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007efc:	2302      	movs	r3, #2
 8007efe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8007f02:	e1e0      	b.n	80082c6 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d005      	beq.n	8007f16 <HAL_SPI_TransmitReceive+0x80>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d002      	beq.n	8007f16 <HAL_SPI_TransmitReceive+0x80>
 8007f10:	887b      	ldrh	r3, [r7, #2]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d103      	bne.n	8007f1e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8007f16:	2301      	movs	r3, #1
 8007f18:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8007f1c:	e1d3      	b.n	80082c6 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007f24:	b2db      	uxtb	r3, r3
 8007f26:	2b04      	cmp	r3, #4
 8007f28:	d003      	beq.n	8007f32 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	2205      	movs	r2, #5
 8007f2e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	2200      	movs	r2, #0
 8007f36:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	687a      	ldr	r2, [r7, #4]
 8007f3c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	887a      	ldrh	r2, [r7, #2]
 8007f42:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	887a      	ldrh	r2, [r7, #2]
 8007f4a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	68ba      	ldr	r2, [r7, #8]
 8007f52:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	887a      	ldrh	r2, [r7, #2]
 8007f58:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	887a      	ldrh	r2, [r7, #2]
 8007f5e:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	2200      	movs	r2, #0
 8007f64:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	2200      	movs	r2, #0
 8007f6a:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	68db      	ldr	r3, [r3, #12]
 8007f70:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007f74:	d802      	bhi.n	8007f7c <HAL_SPI_TransmitReceive+0xe6>
 8007f76:	8a3b      	ldrh	r3, [r7, #16]
 8007f78:	2b01      	cmp	r3, #1
 8007f7a:	d908      	bls.n	8007f8e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	685a      	ldr	r2, [r3, #4]
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007f8a:	605a      	str	r2, [r3, #4]
 8007f8c:	e007      	b.n	8007f9e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	685a      	ldr	r2, [r3, #4]
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007f9c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fa8:	2b40      	cmp	r3, #64	@ 0x40
 8007faa:	d007      	beq.n	8007fbc <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	681a      	ldr	r2, [r3, #0]
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007fba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	68db      	ldr	r3, [r3, #12]
 8007fc0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007fc4:	f240 8081 	bls.w	80080ca <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	685b      	ldr	r3, [r3, #4]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d002      	beq.n	8007fd6 <HAL_SPI_TransmitReceive+0x140>
 8007fd0:	8a7b      	ldrh	r3, [r7, #18]
 8007fd2:	2b01      	cmp	r3, #1
 8007fd4:	d16d      	bne.n	80080b2 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fda:	881a      	ldrh	r2, [r3, #0]
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fe6:	1c9a      	adds	r2, r3, #2
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ff0:	b29b      	uxth	r3, r3
 8007ff2:	3b01      	subs	r3, #1
 8007ff4:	b29a      	uxth	r2, r3
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ffa:	e05a      	b.n	80080b2 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	689b      	ldr	r3, [r3, #8]
 8008002:	f003 0302 	and.w	r3, r3, #2
 8008006:	2b02      	cmp	r3, #2
 8008008:	d11b      	bne.n	8008042 <HAL_SPI_TransmitReceive+0x1ac>
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800800e:	b29b      	uxth	r3, r3
 8008010:	2b00      	cmp	r3, #0
 8008012:	d016      	beq.n	8008042 <HAL_SPI_TransmitReceive+0x1ac>
 8008014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008016:	2b01      	cmp	r3, #1
 8008018:	d113      	bne.n	8008042 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800801e:	881a      	ldrh	r2, [r3, #0]
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800802a:	1c9a      	adds	r2, r3, #2
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008034:	b29b      	uxth	r3, r3
 8008036:	3b01      	subs	r3, #1
 8008038:	b29a      	uxth	r2, r3
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800803e:	2300      	movs	r3, #0
 8008040:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	689b      	ldr	r3, [r3, #8]
 8008048:	f003 0301 	and.w	r3, r3, #1
 800804c:	2b01      	cmp	r3, #1
 800804e:	d11c      	bne.n	800808a <HAL_SPI_TransmitReceive+0x1f4>
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008056:	b29b      	uxth	r3, r3
 8008058:	2b00      	cmp	r3, #0
 800805a:	d016      	beq.n	800808a <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	68da      	ldr	r2, [r3, #12]
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008066:	b292      	uxth	r2, r2
 8008068:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800806e:	1c9a      	adds	r2, r3, #2
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800807a:	b29b      	uxth	r3, r3
 800807c:	3b01      	subs	r3, #1
 800807e:	b29a      	uxth	r2, r3
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008086:	2301      	movs	r3, #1
 8008088:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800808a:	f7fa fa6b 	bl	8002564 <HAL_GetTick>
 800808e:	4602      	mov	r2, r0
 8008090:	69fb      	ldr	r3, [r7, #28]
 8008092:	1ad3      	subs	r3, r2, r3
 8008094:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008096:	429a      	cmp	r2, r3
 8008098:	d80b      	bhi.n	80080b2 <HAL_SPI_TransmitReceive+0x21c>
 800809a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800809c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080a0:	d007      	beq.n	80080b2 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80080a2:	2303      	movs	r3, #3
 80080a4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	2201      	movs	r2, #1
 80080ac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80080b0:	e109      	b.n	80082c6 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80080b6:	b29b      	uxth	r3, r3
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d19f      	bne.n	8007ffc <HAL_SPI_TransmitReceive+0x166>
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80080c2:	b29b      	uxth	r3, r3
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d199      	bne.n	8007ffc <HAL_SPI_TransmitReceive+0x166>
 80080c8:	e0e3      	b.n	8008292 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d003      	beq.n	80080da <HAL_SPI_TransmitReceive+0x244>
 80080d2:	8a7b      	ldrh	r3, [r7, #18]
 80080d4:	2b01      	cmp	r3, #1
 80080d6:	f040 80cf 	bne.w	8008278 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80080de:	b29b      	uxth	r3, r3
 80080e0:	2b01      	cmp	r3, #1
 80080e2:	d912      	bls.n	800810a <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080e8:	881a      	ldrh	r2, [r3, #0]
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080f4:	1c9a      	adds	r2, r3, #2
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80080fe:	b29b      	uxth	r3, r3
 8008100:	3b02      	subs	r3, #2
 8008102:	b29a      	uxth	r2, r3
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008108:	e0b6      	b.n	8008278 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	330c      	adds	r3, #12
 8008114:	7812      	ldrb	r2, [r2, #0]
 8008116:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800811c:	1c5a      	adds	r2, r3, #1
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008126:	b29b      	uxth	r3, r3
 8008128:	3b01      	subs	r3, #1
 800812a:	b29a      	uxth	r2, r3
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008130:	e0a2      	b.n	8008278 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	689b      	ldr	r3, [r3, #8]
 8008138:	f003 0302 	and.w	r3, r3, #2
 800813c:	2b02      	cmp	r3, #2
 800813e:	d134      	bne.n	80081aa <HAL_SPI_TransmitReceive+0x314>
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008144:	b29b      	uxth	r3, r3
 8008146:	2b00      	cmp	r3, #0
 8008148:	d02f      	beq.n	80081aa <HAL_SPI_TransmitReceive+0x314>
 800814a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800814c:	2b01      	cmp	r3, #1
 800814e:	d12c      	bne.n	80081aa <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008154:	b29b      	uxth	r3, r3
 8008156:	2b01      	cmp	r3, #1
 8008158:	d912      	bls.n	8008180 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800815e:	881a      	ldrh	r2, [r3, #0]
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800816a:	1c9a      	adds	r2, r3, #2
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008174:	b29b      	uxth	r3, r3
 8008176:	3b02      	subs	r3, #2
 8008178:	b29a      	uxth	r2, r3
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800817e:	e012      	b.n	80081a6 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	330c      	adds	r3, #12
 800818a:	7812      	ldrb	r2, [r2, #0]
 800818c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008192:	1c5a      	adds	r2, r3, #1
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800819c:	b29b      	uxth	r3, r3
 800819e:	3b01      	subs	r3, #1
 80081a0:	b29a      	uxth	r2, r3
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80081a6:	2300      	movs	r3, #0
 80081a8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	689b      	ldr	r3, [r3, #8]
 80081b0:	f003 0301 	and.w	r3, r3, #1
 80081b4:	2b01      	cmp	r3, #1
 80081b6:	d148      	bne.n	800824a <HAL_SPI_TransmitReceive+0x3b4>
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80081be:	b29b      	uxth	r3, r3
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d042      	beq.n	800824a <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80081ca:	b29b      	uxth	r3, r3
 80081cc:	2b01      	cmp	r3, #1
 80081ce:	d923      	bls.n	8008218 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	68da      	ldr	r2, [r3, #12]
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081da:	b292      	uxth	r2, r2
 80081dc:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081e2:	1c9a      	adds	r2, r3, #2
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80081ee:	b29b      	uxth	r3, r3
 80081f0:	3b02      	subs	r3, #2
 80081f2:	b29a      	uxth	r2, r3
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008200:	b29b      	uxth	r3, r3
 8008202:	2b01      	cmp	r3, #1
 8008204:	d81f      	bhi.n	8008246 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	685a      	ldr	r2, [r3, #4]
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008214:	605a      	str	r2, [r3, #4]
 8008216:	e016      	b.n	8008246 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f103 020c 	add.w	r2, r3, #12
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008224:	7812      	ldrb	r2, [r2, #0]
 8008226:	b2d2      	uxtb	r2, r2
 8008228:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800822e:	1c5a      	adds	r2, r3, #1
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800823a:	b29b      	uxth	r3, r3
 800823c:	3b01      	subs	r3, #1
 800823e:	b29a      	uxth	r2, r3
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008246:	2301      	movs	r3, #1
 8008248:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800824a:	f7fa f98b 	bl	8002564 <HAL_GetTick>
 800824e:	4602      	mov	r2, r0
 8008250:	69fb      	ldr	r3, [r7, #28]
 8008252:	1ad3      	subs	r3, r2, r3
 8008254:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008256:	429a      	cmp	r2, r3
 8008258:	d803      	bhi.n	8008262 <HAL_SPI_TransmitReceive+0x3cc>
 800825a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800825c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008260:	d102      	bne.n	8008268 <HAL_SPI_TransmitReceive+0x3d2>
 8008262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008264:	2b00      	cmp	r3, #0
 8008266:	d107      	bne.n	8008278 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8008268:	2303      	movs	r3, #3
 800826a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	2201      	movs	r2, #1
 8008272:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8008276:	e026      	b.n	80082c6 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800827c:	b29b      	uxth	r3, r3
 800827e:	2b00      	cmp	r3, #0
 8008280:	f47f af57 	bne.w	8008132 <HAL_SPI_TransmitReceive+0x29c>
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800828a:	b29b      	uxth	r3, r3
 800828c:	2b00      	cmp	r3, #0
 800828e:	f47f af50 	bne.w	8008132 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008292:	69fa      	ldr	r2, [r7, #28]
 8008294:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008296:	68f8      	ldr	r0, [r7, #12]
 8008298:	f000 f94c 	bl	8008534 <SPI_EndRxTxTransaction>
 800829c:	4603      	mov	r3, r0
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d005      	beq.n	80082ae <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80082a2:	2301      	movs	r3, #1
 80082a4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	2220      	movs	r2, #32
 80082ac:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d003      	beq.n	80082be <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80082b6:	2301      	movs	r3, #1
 80082b8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80082bc:	e003      	b.n	80082c6 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	2201      	movs	r2, #1
 80082c2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	2200      	movs	r2, #0
 80082ca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80082ce:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	3728      	adds	r7, #40	@ 0x28
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}

080082da <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80082da:	b480      	push	{r7}
 80082dc:	b083      	sub	sp, #12
 80082de:	af00      	add	r7, sp, #0
 80082e0:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80082e8:	b2db      	uxtb	r3, r3
}
 80082ea:	4618      	mov	r0, r3
 80082ec:	370c      	adds	r7, #12
 80082ee:	46bd      	mov	sp, r7
 80082f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f4:	4770      	bx	lr
	...

080082f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b088      	sub	sp, #32
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	60f8      	str	r0, [r7, #12]
 8008300:	60b9      	str	r1, [r7, #8]
 8008302:	603b      	str	r3, [r7, #0]
 8008304:	4613      	mov	r3, r2
 8008306:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008308:	f7fa f92c 	bl	8002564 <HAL_GetTick>
 800830c:	4602      	mov	r2, r0
 800830e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008310:	1a9b      	subs	r3, r3, r2
 8008312:	683a      	ldr	r2, [r7, #0]
 8008314:	4413      	add	r3, r2
 8008316:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008318:	f7fa f924 	bl	8002564 <HAL_GetTick>
 800831c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800831e:	4b39      	ldr	r3, [pc, #228]	@ (8008404 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	015b      	lsls	r3, r3, #5
 8008324:	0d1b      	lsrs	r3, r3, #20
 8008326:	69fa      	ldr	r2, [r7, #28]
 8008328:	fb02 f303 	mul.w	r3, r2, r3
 800832c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800832e:	e054      	b.n	80083da <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008336:	d050      	beq.n	80083da <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008338:	f7fa f914 	bl	8002564 <HAL_GetTick>
 800833c:	4602      	mov	r2, r0
 800833e:	69bb      	ldr	r3, [r7, #24]
 8008340:	1ad3      	subs	r3, r2, r3
 8008342:	69fa      	ldr	r2, [r7, #28]
 8008344:	429a      	cmp	r2, r3
 8008346:	d902      	bls.n	800834e <SPI_WaitFlagStateUntilTimeout+0x56>
 8008348:	69fb      	ldr	r3, [r7, #28]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d13d      	bne.n	80083ca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	685a      	ldr	r2, [r3, #4]
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800835c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	685b      	ldr	r3, [r3, #4]
 8008362:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008366:	d111      	bne.n	800838c <SPI_WaitFlagStateUntilTimeout+0x94>
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	689b      	ldr	r3, [r3, #8]
 800836c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008370:	d004      	beq.n	800837c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	689b      	ldr	r3, [r3, #8]
 8008376:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800837a:	d107      	bne.n	800838c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	681a      	ldr	r2, [r3, #0]
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800838a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008390:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008394:	d10f      	bne.n	80083b6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	681a      	ldr	r2, [r3, #0]
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80083a4:	601a      	str	r2, [r3, #0]
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	681a      	ldr	r2, [r3, #0]
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80083b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	2201      	movs	r2, #1
 80083ba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	2200      	movs	r2, #0
 80083c2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80083c6:	2303      	movs	r3, #3
 80083c8:	e017      	b.n	80083fa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80083ca:	697b      	ldr	r3, [r7, #20]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d101      	bne.n	80083d4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80083d0:	2300      	movs	r3, #0
 80083d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	3b01      	subs	r3, #1
 80083d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	689a      	ldr	r2, [r3, #8]
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	4013      	ands	r3, r2
 80083e4:	68ba      	ldr	r2, [r7, #8]
 80083e6:	429a      	cmp	r2, r3
 80083e8:	bf0c      	ite	eq
 80083ea:	2301      	moveq	r3, #1
 80083ec:	2300      	movne	r3, #0
 80083ee:	b2db      	uxtb	r3, r3
 80083f0:	461a      	mov	r2, r3
 80083f2:	79fb      	ldrb	r3, [r7, #7]
 80083f4:	429a      	cmp	r2, r3
 80083f6:	d19b      	bne.n	8008330 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80083f8:	2300      	movs	r3, #0
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3720      	adds	r7, #32
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}
 8008402:	bf00      	nop
 8008404:	20000000 	.word	0x20000000

08008408 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b08a      	sub	sp, #40	@ 0x28
 800840c:	af00      	add	r7, sp, #0
 800840e:	60f8      	str	r0, [r7, #12]
 8008410:	60b9      	str	r1, [r7, #8]
 8008412:	607a      	str	r2, [r7, #4]
 8008414:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008416:	2300      	movs	r3, #0
 8008418:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800841a:	f7fa f8a3 	bl	8002564 <HAL_GetTick>
 800841e:	4602      	mov	r2, r0
 8008420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008422:	1a9b      	subs	r3, r3, r2
 8008424:	683a      	ldr	r2, [r7, #0]
 8008426:	4413      	add	r3, r2
 8008428:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800842a:	f7fa f89b 	bl	8002564 <HAL_GetTick>
 800842e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	330c      	adds	r3, #12
 8008436:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008438:	4b3d      	ldr	r3, [pc, #244]	@ (8008530 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800843a:	681a      	ldr	r2, [r3, #0]
 800843c:	4613      	mov	r3, r2
 800843e:	009b      	lsls	r3, r3, #2
 8008440:	4413      	add	r3, r2
 8008442:	00da      	lsls	r2, r3, #3
 8008444:	1ad3      	subs	r3, r2, r3
 8008446:	0d1b      	lsrs	r3, r3, #20
 8008448:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800844a:	fb02 f303 	mul.w	r3, r2, r3
 800844e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008450:	e060      	b.n	8008514 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008458:	d107      	bne.n	800846a <SPI_WaitFifoStateUntilTimeout+0x62>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d104      	bne.n	800846a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008460:	69fb      	ldr	r3, [r7, #28]
 8008462:	781b      	ldrb	r3, [r3, #0]
 8008464:	b2db      	uxtb	r3, r3
 8008466:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008468:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008470:	d050      	beq.n	8008514 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008472:	f7fa f877 	bl	8002564 <HAL_GetTick>
 8008476:	4602      	mov	r2, r0
 8008478:	6a3b      	ldr	r3, [r7, #32]
 800847a:	1ad3      	subs	r3, r2, r3
 800847c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800847e:	429a      	cmp	r2, r3
 8008480:	d902      	bls.n	8008488 <SPI_WaitFifoStateUntilTimeout+0x80>
 8008482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008484:	2b00      	cmp	r3, #0
 8008486:	d13d      	bne.n	8008504 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	685a      	ldr	r2, [r3, #4]
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008496:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	685b      	ldr	r3, [r3, #4]
 800849c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80084a0:	d111      	bne.n	80084c6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	689b      	ldr	r3, [r3, #8]
 80084a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80084aa:	d004      	beq.n	80084b6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	689b      	ldr	r3, [r3, #8]
 80084b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80084b4:	d107      	bne.n	80084c6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	681a      	ldr	r2, [r3, #0]
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80084c4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80084ce:	d10f      	bne.n	80084f0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	681a      	ldr	r2, [r3, #0]
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80084de:	601a      	str	r2, [r3, #0]
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	681a      	ldr	r2, [r3, #0]
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80084ee:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	2201      	movs	r2, #1
 80084f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	2200      	movs	r2, #0
 80084fc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8008500:	2303      	movs	r3, #3
 8008502:	e010      	b.n	8008526 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008504:	69bb      	ldr	r3, [r7, #24]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d101      	bne.n	800850e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800850a:	2300      	movs	r3, #0
 800850c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800850e:	69bb      	ldr	r3, [r7, #24]
 8008510:	3b01      	subs	r3, #1
 8008512:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	689a      	ldr	r2, [r3, #8]
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	4013      	ands	r3, r2
 800851e:	687a      	ldr	r2, [r7, #4]
 8008520:	429a      	cmp	r2, r3
 8008522:	d196      	bne.n	8008452 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8008524:	2300      	movs	r3, #0
}
 8008526:	4618      	mov	r0, r3
 8008528:	3728      	adds	r7, #40	@ 0x28
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}
 800852e:	bf00      	nop
 8008530:	20000000 	.word	0x20000000

08008534 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b086      	sub	sp, #24
 8008538:	af02      	add	r7, sp, #8
 800853a:	60f8      	str	r0, [r7, #12]
 800853c:	60b9      	str	r1, [r7, #8]
 800853e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	9300      	str	r3, [sp, #0]
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	2200      	movs	r2, #0
 8008548:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800854c:	68f8      	ldr	r0, [r7, #12]
 800854e:	f7ff ff5b 	bl	8008408 <SPI_WaitFifoStateUntilTimeout>
 8008552:	4603      	mov	r3, r0
 8008554:	2b00      	cmp	r3, #0
 8008556:	d007      	beq.n	8008568 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800855c:	f043 0220 	orr.w	r2, r3, #32
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008564:	2303      	movs	r3, #3
 8008566:	e027      	b.n	80085b8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	9300      	str	r3, [sp, #0]
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	2200      	movs	r2, #0
 8008570:	2180      	movs	r1, #128	@ 0x80
 8008572:	68f8      	ldr	r0, [r7, #12]
 8008574:	f7ff fec0 	bl	80082f8 <SPI_WaitFlagStateUntilTimeout>
 8008578:	4603      	mov	r3, r0
 800857a:	2b00      	cmp	r3, #0
 800857c:	d007      	beq.n	800858e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008582:	f043 0220 	orr.w	r2, r3, #32
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800858a:	2303      	movs	r3, #3
 800858c:	e014      	b.n	80085b8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	9300      	str	r3, [sp, #0]
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	2200      	movs	r2, #0
 8008596:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800859a:	68f8      	ldr	r0, [r7, #12]
 800859c:	f7ff ff34 	bl	8008408 <SPI_WaitFifoStateUntilTimeout>
 80085a0:	4603      	mov	r3, r0
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d007      	beq.n	80085b6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80085aa:	f043 0220 	orr.w	r2, r3, #32
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80085b2:	2303      	movs	r3, #3
 80085b4:	e000      	b.n	80085b8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80085b6:	2300      	movs	r3, #0
}
 80085b8:	4618      	mov	r0, r3
 80085ba:	3710      	adds	r7, #16
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}

080085c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b082      	sub	sp, #8
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d101      	bne.n	80085d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80085ce:	2301      	movs	r3, #1
 80085d0:	e049      	b.n	8008666 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80085d8:	b2db      	uxtb	r3, r3
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d106      	bne.n	80085ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2200      	movs	r2, #0
 80085e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	f7f9 fd74 	bl	80020d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2202      	movs	r2, #2
 80085f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681a      	ldr	r2, [r3, #0]
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	3304      	adds	r3, #4
 80085fc:	4619      	mov	r1, r3
 80085fe:	4610      	mov	r0, r2
 8008600:	f000 fe16 	bl	8009230 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2201      	movs	r2, #1
 8008608:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2201      	movs	r2, #1
 8008610:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2201      	movs	r2, #1
 8008618:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2201      	movs	r2, #1
 8008620:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2201      	movs	r2, #1
 8008628:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2201      	movs	r2, #1
 8008630:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2201      	movs	r2, #1
 8008638:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2201      	movs	r2, #1
 8008640:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2201      	movs	r2, #1
 8008648:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2201      	movs	r2, #1
 8008650:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2201      	movs	r2, #1
 8008658:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2201      	movs	r2, #1
 8008660:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008664:	2300      	movs	r3, #0
}
 8008666:	4618      	mov	r0, r3
 8008668:	3708      	adds	r7, #8
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}
	...

08008670 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008670:	b480      	push	{r7}
 8008672:	b085      	sub	sp, #20
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800867e:	b2db      	uxtb	r3, r3
 8008680:	2b01      	cmp	r3, #1
 8008682:	d001      	beq.n	8008688 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008684:	2301      	movs	r3, #1
 8008686:	e042      	b.n	800870e <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2202      	movs	r2, #2
 800868c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4a21      	ldr	r2, [pc, #132]	@ (800871c <HAL_TIM_Base_Start+0xac>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d018      	beq.n	80086cc <HAL_TIM_Base_Start+0x5c>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086a2:	d013      	beq.n	80086cc <HAL_TIM_Base_Start+0x5c>
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	4a1d      	ldr	r2, [pc, #116]	@ (8008720 <HAL_TIM_Base_Start+0xb0>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d00e      	beq.n	80086cc <HAL_TIM_Base_Start+0x5c>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	4a1c      	ldr	r2, [pc, #112]	@ (8008724 <HAL_TIM_Base_Start+0xb4>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d009      	beq.n	80086cc <HAL_TIM_Base_Start+0x5c>
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	4a1a      	ldr	r2, [pc, #104]	@ (8008728 <HAL_TIM_Base_Start+0xb8>)
 80086be:	4293      	cmp	r3, r2
 80086c0:	d004      	beq.n	80086cc <HAL_TIM_Base_Start+0x5c>
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	4a19      	ldr	r2, [pc, #100]	@ (800872c <HAL_TIM_Base_Start+0xbc>)
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d115      	bne.n	80086f8 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	689a      	ldr	r2, [r3, #8]
 80086d2:	4b17      	ldr	r3, [pc, #92]	@ (8008730 <HAL_TIM_Base_Start+0xc0>)
 80086d4:	4013      	ands	r3, r2
 80086d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	2b06      	cmp	r3, #6
 80086dc:	d015      	beq.n	800870a <HAL_TIM_Base_Start+0x9a>
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80086e4:	d011      	beq.n	800870a <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	681a      	ldr	r2, [r3, #0]
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f042 0201 	orr.w	r2, r2, #1
 80086f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086f6:	e008      	b.n	800870a <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	681a      	ldr	r2, [r3, #0]
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f042 0201 	orr.w	r2, r2, #1
 8008706:	601a      	str	r2, [r3, #0]
 8008708:	e000      	b.n	800870c <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800870a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800870c:	2300      	movs	r3, #0
}
 800870e:	4618      	mov	r0, r3
 8008710:	3714      	adds	r7, #20
 8008712:	46bd      	mov	sp, r7
 8008714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008718:	4770      	bx	lr
 800871a:	bf00      	nop
 800871c:	40012c00 	.word	0x40012c00
 8008720:	40000400 	.word	0x40000400
 8008724:	40000800 	.word	0x40000800
 8008728:	40013400 	.word	0x40013400
 800872c:	40014000 	.word	0x40014000
 8008730:	00010007 	.word	0x00010007

08008734 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b082      	sub	sp, #8
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d101      	bne.n	8008746 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008742:	2301      	movs	r3, #1
 8008744:	e049      	b.n	80087da <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800874c:	b2db      	uxtb	r3, r3
 800874e:	2b00      	cmp	r3, #0
 8008750:	d106      	bne.n	8008760 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2200      	movs	r2, #0
 8008756:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f000 f841 	bl	80087e2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2202      	movs	r2, #2
 8008764:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681a      	ldr	r2, [r3, #0]
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	3304      	adds	r3, #4
 8008770:	4619      	mov	r1, r3
 8008772:	4610      	mov	r0, r2
 8008774:	f000 fd5c 	bl	8009230 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2201      	movs	r2, #1
 800877c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2201      	movs	r2, #1
 8008784:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2201      	movs	r2, #1
 800878c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2201      	movs	r2, #1
 8008794:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2201      	movs	r2, #1
 800879c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2201      	movs	r2, #1
 80087a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2201      	movs	r2, #1
 80087ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2201      	movs	r2, #1
 80087b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2201      	movs	r2, #1
 80087bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2201      	movs	r2, #1
 80087c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2201      	movs	r2, #1
 80087cc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2201      	movs	r2, #1
 80087d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80087d8:	2300      	movs	r3, #0
}
 80087da:	4618      	mov	r0, r3
 80087dc:	3708      	adds	r7, #8
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}

080087e2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80087e2:	b480      	push	{r7}
 80087e4:	b083      	sub	sp, #12
 80087e6:	af00      	add	r7, sp, #0
 80087e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80087ea:	bf00      	nop
 80087ec:	370c      	adds	r7, #12
 80087ee:	46bd      	mov	sp, r7
 80087f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f4:	4770      	bx	lr
	...

080087f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b084      	sub	sp, #16
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
 8008800:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d109      	bne.n	800881c <HAL_TIM_PWM_Start+0x24>
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800880e:	b2db      	uxtb	r3, r3
 8008810:	2b01      	cmp	r3, #1
 8008812:	bf14      	ite	ne
 8008814:	2301      	movne	r3, #1
 8008816:	2300      	moveq	r3, #0
 8008818:	b2db      	uxtb	r3, r3
 800881a:	e03c      	b.n	8008896 <HAL_TIM_PWM_Start+0x9e>
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	2b04      	cmp	r3, #4
 8008820:	d109      	bne.n	8008836 <HAL_TIM_PWM_Start+0x3e>
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008828:	b2db      	uxtb	r3, r3
 800882a:	2b01      	cmp	r3, #1
 800882c:	bf14      	ite	ne
 800882e:	2301      	movne	r3, #1
 8008830:	2300      	moveq	r3, #0
 8008832:	b2db      	uxtb	r3, r3
 8008834:	e02f      	b.n	8008896 <HAL_TIM_PWM_Start+0x9e>
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	2b08      	cmp	r3, #8
 800883a:	d109      	bne.n	8008850 <HAL_TIM_PWM_Start+0x58>
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008842:	b2db      	uxtb	r3, r3
 8008844:	2b01      	cmp	r3, #1
 8008846:	bf14      	ite	ne
 8008848:	2301      	movne	r3, #1
 800884a:	2300      	moveq	r3, #0
 800884c:	b2db      	uxtb	r3, r3
 800884e:	e022      	b.n	8008896 <HAL_TIM_PWM_Start+0x9e>
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	2b0c      	cmp	r3, #12
 8008854:	d109      	bne.n	800886a <HAL_TIM_PWM_Start+0x72>
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800885c:	b2db      	uxtb	r3, r3
 800885e:	2b01      	cmp	r3, #1
 8008860:	bf14      	ite	ne
 8008862:	2301      	movne	r3, #1
 8008864:	2300      	moveq	r3, #0
 8008866:	b2db      	uxtb	r3, r3
 8008868:	e015      	b.n	8008896 <HAL_TIM_PWM_Start+0x9e>
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	2b10      	cmp	r3, #16
 800886e:	d109      	bne.n	8008884 <HAL_TIM_PWM_Start+0x8c>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008876:	b2db      	uxtb	r3, r3
 8008878:	2b01      	cmp	r3, #1
 800887a:	bf14      	ite	ne
 800887c:	2301      	movne	r3, #1
 800887e:	2300      	moveq	r3, #0
 8008880:	b2db      	uxtb	r3, r3
 8008882:	e008      	b.n	8008896 <HAL_TIM_PWM_Start+0x9e>
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800888a:	b2db      	uxtb	r3, r3
 800888c:	2b01      	cmp	r3, #1
 800888e:	bf14      	ite	ne
 8008890:	2301      	movne	r3, #1
 8008892:	2300      	moveq	r3, #0
 8008894:	b2db      	uxtb	r3, r3
 8008896:	2b00      	cmp	r3, #0
 8008898:	d001      	beq.n	800889e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800889a:	2301      	movs	r3, #1
 800889c:	e097      	b.n	80089ce <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d104      	bne.n	80088ae <HAL_TIM_PWM_Start+0xb6>
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2202      	movs	r2, #2
 80088a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80088ac:	e023      	b.n	80088f6 <HAL_TIM_PWM_Start+0xfe>
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	2b04      	cmp	r3, #4
 80088b2:	d104      	bne.n	80088be <HAL_TIM_PWM_Start+0xc6>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2202      	movs	r2, #2
 80088b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80088bc:	e01b      	b.n	80088f6 <HAL_TIM_PWM_Start+0xfe>
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	2b08      	cmp	r3, #8
 80088c2:	d104      	bne.n	80088ce <HAL_TIM_PWM_Start+0xd6>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2202      	movs	r2, #2
 80088c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80088cc:	e013      	b.n	80088f6 <HAL_TIM_PWM_Start+0xfe>
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	2b0c      	cmp	r3, #12
 80088d2:	d104      	bne.n	80088de <HAL_TIM_PWM_Start+0xe6>
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2202      	movs	r2, #2
 80088d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80088dc:	e00b      	b.n	80088f6 <HAL_TIM_PWM_Start+0xfe>
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	2b10      	cmp	r3, #16
 80088e2:	d104      	bne.n	80088ee <HAL_TIM_PWM_Start+0xf6>
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2202      	movs	r2, #2
 80088e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80088ec:	e003      	b.n	80088f6 <HAL_TIM_PWM_Start+0xfe>
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2202      	movs	r2, #2
 80088f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	2201      	movs	r2, #1
 80088fc:	6839      	ldr	r1, [r7, #0]
 80088fe:	4618      	mov	r0, r3
 8008900:	f001 f92c 	bl	8009b5c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	4a33      	ldr	r2, [pc, #204]	@ (80089d8 <HAL_TIM_PWM_Start+0x1e0>)
 800890a:	4293      	cmp	r3, r2
 800890c:	d013      	beq.n	8008936 <HAL_TIM_PWM_Start+0x13e>
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	4a32      	ldr	r2, [pc, #200]	@ (80089dc <HAL_TIM_PWM_Start+0x1e4>)
 8008914:	4293      	cmp	r3, r2
 8008916:	d00e      	beq.n	8008936 <HAL_TIM_PWM_Start+0x13e>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	4a30      	ldr	r2, [pc, #192]	@ (80089e0 <HAL_TIM_PWM_Start+0x1e8>)
 800891e:	4293      	cmp	r3, r2
 8008920:	d009      	beq.n	8008936 <HAL_TIM_PWM_Start+0x13e>
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	4a2f      	ldr	r2, [pc, #188]	@ (80089e4 <HAL_TIM_PWM_Start+0x1ec>)
 8008928:	4293      	cmp	r3, r2
 800892a:	d004      	beq.n	8008936 <HAL_TIM_PWM_Start+0x13e>
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	4a2d      	ldr	r2, [pc, #180]	@ (80089e8 <HAL_TIM_PWM_Start+0x1f0>)
 8008932:	4293      	cmp	r3, r2
 8008934:	d101      	bne.n	800893a <HAL_TIM_PWM_Start+0x142>
 8008936:	2301      	movs	r3, #1
 8008938:	e000      	b.n	800893c <HAL_TIM_PWM_Start+0x144>
 800893a:	2300      	movs	r3, #0
 800893c:	2b00      	cmp	r3, #0
 800893e:	d007      	beq.n	8008950 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800894e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	4a20      	ldr	r2, [pc, #128]	@ (80089d8 <HAL_TIM_PWM_Start+0x1e0>)
 8008956:	4293      	cmp	r3, r2
 8008958:	d018      	beq.n	800898c <HAL_TIM_PWM_Start+0x194>
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008962:	d013      	beq.n	800898c <HAL_TIM_PWM_Start+0x194>
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	4a20      	ldr	r2, [pc, #128]	@ (80089ec <HAL_TIM_PWM_Start+0x1f4>)
 800896a:	4293      	cmp	r3, r2
 800896c:	d00e      	beq.n	800898c <HAL_TIM_PWM_Start+0x194>
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	4a1f      	ldr	r2, [pc, #124]	@ (80089f0 <HAL_TIM_PWM_Start+0x1f8>)
 8008974:	4293      	cmp	r3, r2
 8008976:	d009      	beq.n	800898c <HAL_TIM_PWM_Start+0x194>
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	4a17      	ldr	r2, [pc, #92]	@ (80089dc <HAL_TIM_PWM_Start+0x1e4>)
 800897e:	4293      	cmp	r3, r2
 8008980:	d004      	beq.n	800898c <HAL_TIM_PWM_Start+0x194>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	4a16      	ldr	r2, [pc, #88]	@ (80089e0 <HAL_TIM_PWM_Start+0x1e8>)
 8008988:	4293      	cmp	r3, r2
 800898a:	d115      	bne.n	80089b8 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	689a      	ldr	r2, [r3, #8]
 8008992:	4b18      	ldr	r3, [pc, #96]	@ (80089f4 <HAL_TIM_PWM_Start+0x1fc>)
 8008994:	4013      	ands	r3, r2
 8008996:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	2b06      	cmp	r3, #6
 800899c:	d015      	beq.n	80089ca <HAL_TIM_PWM_Start+0x1d2>
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80089a4:	d011      	beq.n	80089ca <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	681a      	ldr	r2, [r3, #0]
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f042 0201 	orr.w	r2, r2, #1
 80089b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089b6:	e008      	b.n	80089ca <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	681a      	ldr	r2, [r3, #0]
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f042 0201 	orr.w	r2, r2, #1
 80089c6:	601a      	str	r2, [r3, #0]
 80089c8:	e000      	b.n	80089cc <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089ca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80089cc:	2300      	movs	r3, #0
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	3710      	adds	r7, #16
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bd80      	pop	{r7, pc}
 80089d6:	bf00      	nop
 80089d8:	40012c00 	.word	0x40012c00
 80089dc:	40013400 	.word	0x40013400
 80089e0:	40014000 	.word	0x40014000
 80089e4:	40014400 	.word	0x40014400
 80089e8:	40014800 	.word	0x40014800
 80089ec:	40000400 	.word	0x40000400
 80089f0:	40000800 	.word	0x40000800
 80089f4:	00010007 	.word	0x00010007

080089f8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b082      	sub	sp, #8
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
 8008a00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	2200      	movs	r2, #0
 8008a08:	6839      	ldr	r1, [r7, #0]
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f001 f8a6 	bl	8009b5c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	4a3e      	ldr	r2, [pc, #248]	@ (8008b10 <HAL_TIM_PWM_Stop+0x118>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d013      	beq.n	8008a42 <HAL_TIM_PWM_Stop+0x4a>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	4a3d      	ldr	r2, [pc, #244]	@ (8008b14 <HAL_TIM_PWM_Stop+0x11c>)
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d00e      	beq.n	8008a42 <HAL_TIM_PWM_Stop+0x4a>
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	4a3b      	ldr	r2, [pc, #236]	@ (8008b18 <HAL_TIM_PWM_Stop+0x120>)
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	d009      	beq.n	8008a42 <HAL_TIM_PWM_Stop+0x4a>
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	4a3a      	ldr	r2, [pc, #232]	@ (8008b1c <HAL_TIM_PWM_Stop+0x124>)
 8008a34:	4293      	cmp	r3, r2
 8008a36:	d004      	beq.n	8008a42 <HAL_TIM_PWM_Stop+0x4a>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	4a38      	ldr	r2, [pc, #224]	@ (8008b20 <HAL_TIM_PWM_Stop+0x128>)
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d101      	bne.n	8008a46 <HAL_TIM_PWM_Stop+0x4e>
 8008a42:	2301      	movs	r3, #1
 8008a44:	e000      	b.n	8008a48 <HAL_TIM_PWM_Stop+0x50>
 8008a46:	2300      	movs	r3, #0
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d017      	beq.n	8008a7c <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	6a1a      	ldr	r2, [r3, #32]
 8008a52:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008a56:	4013      	ands	r3, r2
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d10f      	bne.n	8008a7c <HAL_TIM_PWM_Stop+0x84>
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	6a1a      	ldr	r2, [r3, #32]
 8008a62:	f244 4344 	movw	r3, #17476	@ 0x4444
 8008a66:	4013      	ands	r3, r2
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d107      	bne.n	8008a7c <HAL_TIM_PWM_Stop+0x84>
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008a7a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	6a1a      	ldr	r2, [r3, #32]
 8008a82:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008a86:	4013      	ands	r3, r2
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d10f      	bne.n	8008aac <HAL_TIM_PWM_Stop+0xb4>
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	6a1a      	ldr	r2, [r3, #32]
 8008a92:	f244 4344 	movw	r3, #17476	@ 0x4444
 8008a96:	4013      	ands	r3, r2
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d107      	bne.n	8008aac <HAL_TIM_PWM_Stop+0xb4>
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	681a      	ldr	r2, [r3, #0]
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f022 0201 	bic.w	r2, r2, #1
 8008aaa:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d104      	bne.n	8008abc <HAL_TIM_PWM_Stop+0xc4>
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2201      	movs	r2, #1
 8008ab6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008aba:	e023      	b.n	8008b04 <HAL_TIM_PWM_Stop+0x10c>
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	2b04      	cmp	r3, #4
 8008ac0:	d104      	bne.n	8008acc <HAL_TIM_PWM_Stop+0xd4>
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2201      	movs	r2, #1
 8008ac6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008aca:	e01b      	b.n	8008b04 <HAL_TIM_PWM_Stop+0x10c>
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	2b08      	cmp	r3, #8
 8008ad0:	d104      	bne.n	8008adc <HAL_TIM_PWM_Stop+0xe4>
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2201      	movs	r2, #1
 8008ad6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008ada:	e013      	b.n	8008b04 <HAL_TIM_PWM_Stop+0x10c>
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	2b0c      	cmp	r3, #12
 8008ae0:	d104      	bne.n	8008aec <HAL_TIM_PWM_Stop+0xf4>
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2201      	movs	r2, #1
 8008ae6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008aea:	e00b      	b.n	8008b04 <HAL_TIM_PWM_Stop+0x10c>
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	2b10      	cmp	r3, #16
 8008af0:	d104      	bne.n	8008afc <HAL_TIM_PWM_Stop+0x104>
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2201      	movs	r2, #1
 8008af6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008afa:	e003      	b.n	8008b04 <HAL_TIM_PWM_Stop+0x10c>
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2201      	movs	r2, #1
 8008b00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8008b04:	2300      	movs	r3, #0
}
 8008b06:	4618      	mov	r0, r3
 8008b08:	3708      	adds	r7, #8
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bd80      	pop	{r7, pc}
 8008b0e:	bf00      	nop
 8008b10:	40012c00 	.word	0x40012c00
 8008b14:	40013400 	.word	0x40013400
 8008b18:	40014000 	.word	0x40014000
 8008b1c:	40014400 	.word	0x40014400
 8008b20:	40014800 	.word	0x40014800

08008b24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b084      	sub	sp, #16
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	68db      	ldr	r3, [r3, #12]
 8008b32:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	691b      	ldr	r3, [r3, #16]
 8008b3a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	f003 0302 	and.w	r3, r3, #2
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d020      	beq.n	8008b88 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	f003 0302 	and.w	r3, r3, #2
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d01b      	beq.n	8008b88 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f06f 0202 	mvn.w	r2, #2
 8008b58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2201      	movs	r2, #1
 8008b5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	699b      	ldr	r3, [r3, #24]
 8008b66:	f003 0303 	and.w	r3, r3, #3
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d003      	beq.n	8008b76 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f003 fbf6 	bl	800c360 <HAL_TIM_IC_CaptureCallback>
 8008b74:	e005      	b.n	8008b82 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f000 fb3c 	bl	80091f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f000 fb43 	bl	8009208 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2200      	movs	r2, #0
 8008b86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	f003 0304 	and.w	r3, r3, #4
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d020      	beq.n	8008bd4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	f003 0304 	and.w	r3, r3, #4
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d01b      	beq.n	8008bd4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f06f 0204 	mvn.w	r2, #4
 8008ba4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2202      	movs	r2, #2
 8008baa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	699b      	ldr	r3, [r3, #24]
 8008bb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d003      	beq.n	8008bc2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f003 fbd0 	bl	800c360 <HAL_TIM_IC_CaptureCallback>
 8008bc0:	e005      	b.n	8008bce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f000 fb16 	bl	80091f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f000 fb1d 	bl	8009208 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	f003 0308 	and.w	r3, r3, #8
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d020      	beq.n	8008c20 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	f003 0308 	and.w	r3, r3, #8
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d01b      	beq.n	8008c20 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f06f 0208 	mvn.w	r2, #8
 8008bf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2204      	movs	r2, #4
 8008bf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	69db      	ldr	r3, [r3, #28]
 8008bfe:	f003 0303 	and.w	r3, r3, #3
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d003      	beq.n	8008c0e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f003 fbaa 	bl	800c360 <HAL_TIM_IC_CaptureCallback>
 8008c0c:	e005      	b.n	8008c1a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f000 faf0 	bl	80091f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c14:	6878      	ldr	r0, [r7, #4]
 8008c16:	f000 faf7 	bl	8009208 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	f003 0310 	and.w	r3, r3, #16
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d020      	beq.n	8008c6c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	f003 0310 	and.w	r3, r3, #16
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d01b      	beq.n	8008c6c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f06f 0210 	mvn.w	r2, #16
 8008c3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2208      	movs	r2, #8
 8008c42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	69db      	ldr	r3, [r3, #28]
 8008c4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d003      	beq.n	8008c5a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f003 fb84 	bl	800c360 <HAL_TIM_IC_CaptureCallback>
 8008c58:	e005      	b.n	8008c66 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f000 faca 	bl	80091f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f000 fad1 	bl	8009208 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2200      	movs	r2, #0
 8008c6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	f003 0301 	and.w	r3, r3, #1
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d00c      	beq.n	8008c90 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	f003 0301 	and.w	r3, r3, #1
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d007      	beq.n	8008c90 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f06f 0201 	mvn.w	r2, #1
 8008c88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f000 faa8 	bl	80091e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d104      	bne.n	8008ca4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d00c      	beq.n	8008cbe <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d007      	beq.n	8008cbe <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008cb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f001 fbbf 	bl	800a43c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d00c      	beq.n	8008ce2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d007      	beq.n	8008ce2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008cda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f001 fbb7 	bl	800a450 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008ce2:	68bb      	ldr	r3, [r7, #8]
 8008ce4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d00c      	beq.n	8008d06 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d007      	beq.n	8008d06 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008cfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f000 fa8b 	bl	800921c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008d06:	68bb      	ldr	r3, [r7, #8]
 8008d08:	f003 0320 	and.w	r3, r3, #32
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d00c      	beq.n	8008d2a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	f003 0320 	and.w	r3, r3, #32
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d007      	beq.n	8008d2a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f06f 0220 	mvn.w	r2, #32
 8008d22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	f001 fb7f 	bl	800a428 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8008d2a:	68bb      	ldr	r3, [r7, #8]
 8008d2c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d00c      	beq.n	8008d4e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d007      	beq.n	8008d4e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8008d46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	f001 fb8b 	bl	800a464 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8008d4e:	68bb      	ldr	r3, [r7, #8]
 8008d50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d00c      	beq.n	8008d72 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d007      	beq.n	8008d72 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8008d6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008d6c:	6878      	ldr	r0, [r7, #4]
 8008d6e:	f001 fb83 	bl	800a478 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d00c      	beq.n	8008d96 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d007      	beq.n	8008d96 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8008d8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f001 fb7b 	bl	800a48c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d00c      	beq.n	8008dba <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d007      	beq.n	8008dba <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8008db2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f001 fb73 	bl	800a4a0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008dba:	bf00      	nop
 8008dbc:	3710      	adds	r7, #16
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}
	...

08008dc4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b086      	sub	sp, #24
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	60f8      	str	r0, [r7, #12]
 8008dcc:	60b9      	str	r1, [r7, #8]
 8008dce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008dda:	2b01      	cmp	r3, #1
 8008ddc:	d101      	bne.n	8008de2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008dde:	2302      	movs	r3, #2
 8008de0:	e0ff      	b.n	8008fe2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	2201      	movs	r2, #1
 8008de6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2b14      	cmp	r3, #20
 8008dee:	f200 80f0 	bhi.w	8008fd2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008df2:	a201      	add	r2, pc, #4	@ (adr r2, 8008df8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008df8:	08008e4d 	.word	0x08008e4d
 8008dfc:	08008fd3 	.word	0x08008fd3
 8008e00:	08008fd3 	.word	0x08008fd3
 8008e04:	08008fd3 	.word	0x08008fd3
 8008e08:	08008e8d 	.word	0x08008e8d
 8008e0c:	08008fd3 	.word	0x08008fd3
 8008e10:	08008fd3 	.word	0x08008fd3
 8008e14:	08008fd3 	.word	0x08008fd3
 8008e18:	08008ecf 	.word	0x08008ecf
 8008e1c:	08008fd3 	.word	0x08008fd3
 8008e20:	08008fd3 	.word	0x08008fd3
 8008e24:	08008fd3 	.word	0x08008fd3
 8008e28:	08008f0f 	.word	0x08008f0f
 8008e2c:	08008fd3 	.word	0x08008fd3
 8008e30:	08008fd3 	.word	0x08008fd3
 8008e34:	08008fd3 	.word	0x08008fd3
 8008e38:	08008f51 	.word	0x08008f51
 8008e3c:	08008fd3 	.word	0x08008fd3
 8008e40:	08008fd3 	.word	0x08008fd3
 8008e44:	08008fd3 	.word	0x08008fd3
 8008e48:	08008f91 	.word	0x08008f91
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	68b9      	ldr	r1, [r7, #8]
 8008e52:	4618      	mov	r0, r3
 8008e54:	f000 fa88 	bl	8009368 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	699a      	ldr	r2, [r3, #24]
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f042 0208 	orr.w	r2, r2, #8
 8008e66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	699a      	ldr	r2, [r3, #24]
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f022 0204 	bic.w	r2, r2, #4
 8008e76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	6999      	ldr	r1, [r3, #24]
 8008e7e:	68bb      	ldr	r3, [r7, #8]
 8008e80:	691a      	ldr	r2, [r3, #16]
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	430a      	orrs	r2, r1
 8008e88:	619a      	str	r2, [r3, #24]
      break;
 8008e8a:	e0a5      	b.n	8008fd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	68b9      	ldr	r1, [r7, #8]
 8008e92:	4618      	mov	r0, r3
 8008e94:	f000 faf8 	bl	8009488 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	699a      	ldr	r2, [r3, #24]
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008ea6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	699a      	ldr	r2, [r3, #24]
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008eb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	6999      	ldr	r1, [r3, #24]
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	691b      	ldr	r3, [r3, #16]
 8008ec2:	021a      	lsls	r2, r3, #8
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	430a      	orrs	r2, r1
 8008eca:	619a      	str	r2, [r3, #24]
      break;
 8008ecc:	e084      	b.n	8008fd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	68b9      	ldr	r1, [r7, #8]
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	f000 fb61 	bl	800959c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	69da      	ldr	r2, [r3, #28]
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f042 0208 	orr.w	r2, r2, #8
 8008ee8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	69da      	ldr	r2, [r3, #28]
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f022 0204 	bic.w	r2, r2, #4
 8008ef8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	69d9      	ldr	r1, [r3, #28]
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	691a      	ldr	r2, [r3, #16]
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	430a      	orrs	r2, r1
 8008f0a:	61da      	str	r2, [r3, #28]
      break;
 8008f0c:	e064      	b.n	8008fd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	68b9      	ldr	r1, [r7, #8]
 8008f14:	4618      	mov	r0, r3
 8008f16:	f000 fbc9 	bl	80096ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	69da      	ldr	r2, [r3, #28]
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008f28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	69da      	ldr	r2, [r3, #28]
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008f38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	69d9      	ldr	r1, [r3, #28]
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	691b      	ldr	r3, [r3, #16]
 8008f44:	021a      	lsls	r2, r3, #8
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	430a      	orrs	r2, r1
 8008f4c:	61da      	str	r2, [r3, #28]
      break;
 8008f4e:	e043      	b.n	8008fd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	68b9      	ldr	r1, [r7, #8]
 8008f56:	4618      	mov	r0, r3
 8008f58:	f000 fc32 	bl	80097c0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	f042 0208 	orr.w	r2, r2, #8
 8008f6a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f022 0204 	bic.w	r2, r2, #4
 8008f7a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	691a      	ldr	r2, [r3, #16]
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	430a      	orrs	r2, r1
 8008f8c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008f8e:	e023      	b.n	8008fd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	68b9      	ldr	r1, [r7, #8]
 8008f96:	4618      	mov	r0, r3
 8008f98:	f000 fc76 	bl	8009888 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008faa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008fba:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008fc2:	68bb      	ldr	r3, [r7, #8]
 8008fc4:	691b      	ldr	r3, [r3, #16]
 8008fc6:	021a      	lsls	r2, r3, #8
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	430a      	orrs	r2, r1
 8008fce:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008fd0:	e002      	b.n	8008fd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	75fb      	strb	r3, [r7, #23]
      break;
 8008fd6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	2200      	movs	r2, #0
 8008fdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008fe0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	3718      	adds	r7, #24
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}
 8008fea:	bf00      	nop

08008fec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b084      	sub	sp, #16
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
 8008ff4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009000:	2b01      	cmp	r3, #1
 8009002:	d101      	bne.n	8009008 <HAL_TIM_ConfigClockSource+0x1c>
 8009004:	2302      	movs	r3, #2
 8009006:	e0de      	b.n	80091c6 <HAL_TIM_ConfigClockSource+0x1da>
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2201      	movs	r2, #1
 800900c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2202      	movs	r2, #2
 8009014:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	689b      	ldr	r3, [r3, #8]
 800901e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8009026:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800902a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800902c:	68bb      	ldr	r3, [r7, #8]
 800902e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009032:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	68ba      	ldr	r2, [r7, #8]
 800903a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	4a63      	ldr	r2, [pc, #396]	@ (80091d0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009042:	4293      	cmp	r3, r2
 8009044:	f000 80a9 	beq.w	800919a <HAL_TIM_ConfigClockSource+0x1ae>
 8009048:	4a61      	ldr	r2, [pc, #388]	@ (80091d0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800904a:	4293      	cmp	r3, r2
 800904c:	f200 80ae 	bhi.w	80091ac <HAL_TIM_ConfigClockSource+0x1c0>
 8009050:	4a60      	ldr	r2, [pc, #384]	@ (80091d4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009052:	4293      	cmp	r3, r2
 8009054:	f000 80a1 	beq.w	800919a <HAL_TIM_ConfigClockSource+0x1ae>
 8009058:	4a5e      	ldr	r2, [pc, #376]	@ (80091d4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800905a:	4293      	cmp	r3, r2
 800905c:	f200 80a6 	bhi.w	80091ac <HAL_TIM_ConfigClockSource+0x1c0>
 8009060:	4a5d      	ldr	r2, [pc, #372]	@ (80091d8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009062:	4293      	cmp	r3, r2
 8009064:	f000 8099 	beq.w	800919a <HAL_TIM_ConfigClockSource+0x1ae>
 8009068:	4a5b      	ldr	r2, [pc, #364]	@ (80091d8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800906a:	4293      	cmp	r3, r2
 800906c:	f200 809e 	bhi.w	80091ac <HAL_TIM_ConfigClockSource+0x1c0>
 8009070:	4a5a      	ldr	r2, [pc, #360]	@ (80091dc <HAL_TIM_ConfigClockSource+0x1f0>)
 8009072:	4293      	cmp	r3, r2
 8009074:	f000 8091 	beq.w	800919a <HAL_TIM_ConfigClockSource+0x1ae>
 8009078:	4a58      	ldr	r2, [pc, #352]	@ (80091dc <HAL_TIM_ConfigClockSource+0x1f0>)
 800907a:	4293      	cmp	r3, r2
 800907c:	f200 8096 	bhi.w	80091ac <HAL_TIM_ConfigClockSource+0x1c0>
 8009080:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009084:	f000 8089 	beq.w	800919a <HAL_TIM_ConfigClockSource+0x1ae>
 8009088:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800908c:	f200 808e 	bhi.w	80091ac <HAL_TIM_ConfigClockSource+0x1c0>
 8009090:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009094:	d03e      	beq.n	8009114 <HAL_TIM_ConfigClockSource+0x128>
 8009096:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800909a:	f200 8087 	bhi.w	80091ac <HAL_TIM_ConfigClockSource+0x1c0>
 800909e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80090a2:	f000 8086 	beq.w	80091b2 <HAL_TIM_ConfigClockSource+0x1c6>
 80090a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80090aa:	d87f      	bhi.n	80091ac <HAL_TIM_ConfigClockSource+0x1c0>
 80090ac:	2b70      	cmp	r3, #112	@ 0x70
 80090ae:	d01a      	beq.n	80090e6 <HAL_TIM_ConfigClockSource+0xfa>
 80090b0:	2b70      	cmp	r3, #112	@ 0x70
 80090b2:	d87b      	bhi.n	80091ac <HAL_TIM_ConfigClockSource+0x1c0>
 80090b4:	2b60      	cmp	r3, #96	@ 0x60
 80090b6:	d050      	beq.n	800915a <HAL_TIM_ConfigClockSource+0x16e>
 80090b8:	2b60      	cmp	r3, #96	@ 0x60
 80090ba:	d877      	bhi.n	80091ac <HAL_TIM_ConfigClockSource+0x1c0>
 80090bc:	2b50      	cmp	r3, #80	@ 0x50
 80090be:	d03c      	beq.n	800913a <HAL_TIM_ConfigClockSource+0x14e>
 80090c0:	2b50      	cmp	r3, #80	@ 0x50
 80090c2:	d873      	bhi.n	80091ac <HAL_TIM_ConfigClockSource+0x1c0>
 80090c4:	2b40      	cmp	r3, #64	@ 0x40
 80090c6:	d058      	beq.n	800917a <HAL_TIM_ConfigClockSource+0x18e>
 80090c8:	2b40      	cmp	r3, #64	@ 0x40
 80090ca:	d86f      	bhi.n	80091ac <HAL_TIM_ConfigClockSource+0x1c0>
 80090cc:	2b30      	cmp	r3, #48	@ 0x30
 80090ce:	d064      	beq.n	800919a <HAL_TIM_ConfigClockSource+0x1ae>
 80090d0:	2b30      	cmp	r3, #48	@ 0x30
 80090d2:	d86b      	bhi.n	80091ac <HAL_TIM_ConfigClockSource+0x1c0>
 80090d4:	2b20      	cmp	r3, #32
 80090d6:	d060      	beq.n	800919a <HAL_TIM_ConfigClockSource+0x1ae>
 80090d8:	2b20      	cmp	r3, #32
 80090da:	d867      	bhi.n	80091ac <HAL_TIM_ConfigClockSource+0x1c0>
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d05c      	beq.n	800919a <HAL_TIM_ConfigClockSource+0x1ae>
 80090e0:	2b10      	cmp	r3, #16
 80090e2:	d05a      	beq.n	800919a <HAL_TIM_ConfigClockSource+0x1ae>
 80090e4:	e062      	b.n	80091ac <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80090f6:	f000 fd11 	bl	8009b1c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	689b      	ldr	r3, [r3, #8]
 8009100:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009108:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	68ba      	ldr	r2, [r7, #8]
 8009110:	609a      	str	r2, [r3, #8]
      break;
 8009112:	e04f      	b.n	80091b4 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009124:	f000 fcfa 	bl	8009b1c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	689a      	ldr	r2, [r3, #8]
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009136:	609a      	str	r2, [r3, #8]
      break;
 8009138:	e03c      	b.n	80091b4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009146:	461a      	mov	r2, r3
 8009148:	f000 fc6c 	bl	8009a24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	2150      	movs	r1, #80	@ 0x50
 8009152:	4618      	mov	r0, r3
 8009154:	f000 fcc5 	bl	8009ae2 <TIM_ITRx_SetConfig>
      break;
 8009158:	e02c      	b.n	80091b4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009166:	461a      	mov	r2, r3
 8009168:	f000 fc8b 	bl	8009a82 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	2160      	movs	r1, #96	@ 0x60
 8009172:	4618      	mov	r0, r3
 8009174:	f000 fcb5 	bl	8009ae2 <TIM_ITRx_SetConfig>
      break;
 8009178:	e01c      	b.n	80091b4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009186:	461a      	mov	r2, r3
 8009188:	f000 fc4c 	bl	8009a24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	2140      	movs	r1, #64	@ 0x40
 8009192:	4618      	mov	r0, r3
 8009194:	f000 fca5 	bl	8009ae2 <TIM_ITRx_SetConfig>
      break;
 8009198:	e00c      	b.n	80091b4 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681a      	ldr	r2, [r3, #0]
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	4619      	mov	r1, r3
 80091a4:	4610      	mov	r0, r2
 80091a6:	f000 fc9c 	bl	8009ae2 <TIM_ITRx_SetConfig>
      break;
 80091aa:	e003      	b.n	80091b4 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80091ac:	2301      	movs	r3, #1
 80091ae:	73fb      	strb	r3, [r7, #15]
      break;
 80091b0:	e000      	b.n	80091b4 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80091b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2201      	movs	r2, #1
 80091b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2200      	movs	r2, #0
 80091c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80091c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80091c6:	4618      	mov	r0, r3
 80091c8:	3710      	adds	r7, #16
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd80      	pop	{r7, pc}
 80091ce:	bf00      	nop
 80091d0:	00100070 	.word	0x00100070
 80091d4:	00100040 	.word	0x00100040
 80091d8:	00100030 	.word	0x00100030
 80091dc:	00100020 	.word	0x00100020

080091e0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80091e0:	b480      	push	{r7}
 80091e2:	b083      	sub	sp, #12
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80091e8:	bf00      	nop
 80091ea:	370c      	adds	r7, #12
 80091ec:	46bd      	mov	sp, r7
 80091ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f2:	4770      	bx	lr

080091f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80091f4:	b480      	push	{r7}
 80091f6:	b083      	sub	sp, #12
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80091fc:	bf00      	nop
 80091fe:	370c      	adds	r7, #12
 8009200:	46bd      	mov	sp, r7
 8009202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009206:	4770      	bx	lr

08009208 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009208:	b480      	push	{r7}
 800920a:	b083      	sub	sp, #12
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009210:	bf00      	nop
 8009212:	370c      	adds	r7, #12
 8009214:	46bd      	mov	sp, r7
 8009216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921a:	4770      	bx	lr

0800921c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800921c:	b480      	push	{r7}
 800921e:	b083      	sub	sp, #12
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009224:	bf00      	nop
 8009226:	370c      	adds	r7, #12
 8009228:	46bd      	mov	sp, r7
 800922a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922e:	4770      	bx	lr

08009230 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009230:	b480      	push	{r7}
 8009232:	b085      	sub	sp, #20
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
 8009238:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	4a42      	ldr	r2, [pc, #264]	@ (800934c <TIM_Base_SetConfig+0x11c>)
 8009244:	4293      	cmp	r3, r2
 8009246:	d00f      	beq.n	8009268 <TIM_Base_SetConfig+0x38>
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800924e:	d00b      	beq.n	8009268 <TIM_Base_SetConfig+0x38>
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	4a3f      	ldr	r2, [pc, #252]	@ (8009350 <TIM_Base_SetConfig+0x120>)
 8009254:	4293      	cmp	r3, r2
 8009256:	d007      	beq.n	8009268 <TIM_Base_SetConfig+0x38>
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	4a3e      	ldr	r2, [pc, #248]	@ (8009354 <TIM_Base_SetConfig+0x124>)
 800925c:	4293      	cmp	r3, r2
 800925e:	d003      	beq.n	8009268 <TIM_Base_SetConfig+0x38>
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	4a3d      	ldr	r2, [pc, #244]	@ (8009358 <TIM_Base_SetConfig+0x128>)
 8009264:	4293      	cmp	r3, r2
 8009266:	d108      	bne.n	800927a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800926e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	685b      	ldr	r3, [r3, #4]
 8009274:	68fa      	ldr	r2, [r7, #12]
 8009276:	4313      	orrs	r3, r2
 8009278:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	4a33      	ldr	r2, [pc, #204]	@ (800934c <TIM_Base_SetConfig+0x11c>)
 800927e:	4293      	cmp	r3, r2
 8009280:	d01b      	beq.n	80092ba <TIM_Base_SetConfig+0x8a>
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009288:	d017      	beq.n	80092ba <TIM_Base_SetConfig+0x8a>
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	4a30      	ldr	r2, [pc, #192]	@ (8009350 <TIM_Base_SetConfig+0x120>)
 800928e:	4293      	cmp	r3, r2
 8009290:	d013      	beq.n	80092ba <TIM_Base_SetConfig+0x8a>
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	4a2f      	ldr	r2, [pc, #188]	@ (8009354 <TIM_Base_SetConfig+0x124>)
 8009296:	4293      	cmp	r3, r2
 8009298:	d00f      	beq.n	80092ba <TIM_Base_SetConfig+0x8a>
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	4a2e      	ldr	r2, [pc, #184]	@ (8009358 <TIM_Base_SetConfig+0x128>)
 800929e:	4293      	cmp	r3, r2
 80092a0:	d00b      	beq.n	80092ba <TIM_Base_SetConfig+0x8a>
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	4a2d      	ldr	r2, [pc, #180]	@ (800935c <TIM_Base_SetConfig+0x12c>)
 80092a6:	4293      	cmp	r3, r2
 80092a8:	d007      	beq.n	80092ba <TIM_Base_SetConfig+0x8a>
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	4a2c      	ldr	r2, [pc, #176]	@ (8009360 <TIM_Base_SetConfig+0x130>)
 80092ae:	4293      	cmp	r3, r2
 80092b0:	d003      	beq.n	80092ba <TIM_Base_SetConfig+0x8a>
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	4a2b      	ldr	r2, [pc, #172]	@ (8009364 <TIM_Base_SetConfig+0x134>)
 80092b6:	4293      	cmp	r3, r2
 80092b8:	d108      	bne.n	80092cc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80092c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	68db      	ldr	r3, [r3, #12]
 80092c6:	68fa      	ldr	r2, [r7, #12]
 80092c8:	4313      	orrs	r3, r2
 80092ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	695b      	ldr	r3, [r3, #20]
 80092d6:	4313      	orrs	r3, r2
 80092d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	68fa      	ldr	r2, [r7, #12]
 80092de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	689a      	ldr	r2, [r3, #8]
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	681a      	ldr	r2, [r3, #0]
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	4a16      	ldr	r2, [pc, #88]	@ (800934c <TIM_Base_SetConfig+0x11c>)
 80092f4:	4293      	cmp	r3, r2
 80092f6:	d00f      	beq.n	8009318 <TIM_Base_SetConfig+0xe8>
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	4a17      	ldr	r2, [pc, #92]	@ (8009358 <TIM_Base_SetConfig+0x128>)
 80092fc:	4293      	cmp	r3, r2
 80092fe:	d00b      	beq.n	8009318 <TIM_Base_SetConfig+0xe8>
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	4a16      	ldr	r2, [pc, #88]	@ (800935c <TIM_Base_SetConfig+0x12c>)
 8009304:	4293      	cmp	r3, r2
 8009306:	d007      	beq.n	8009318 <TIM_Base_SetConfig+0xe8>
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	4a15      	ldr	r2, [pc, #84]	@ (8009360 <TIM_Base_SetConfig+0x130>)
 800930c:	4293      	cmp	r3, r2
 800930e:	d003      	beq.n	8009318 <TIM_Base_SetConfig+0xe8>
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	4a14      	ldr	r2, [pc, #80]	@ (8009364 <TIM_Base_SetConfig+0x134>)
 8009314:	4293      	cmp	r3, r2
 8009316:	d103      	bne.n	8009320 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	691a      	ldr	r2, [r3, #16]
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2201      	movs	r2, #1
 8009324:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	691b      	ldr	r3, [r3, #16]
 800932a:	f003 0301 	and.w	r3, r3, #1
 800932e:	2b01      	cmp	r3, #1
 8009330:	d105      	bne.n	800933e <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	691b      	ldr	r3, [r3, #16]
 8009336:	f023 0201 	bic.w	r2, r3, #1
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	611a      	str	r2, [r3, #16]
  }
}
 800933e:	bf00      	nop
 8009340:	3714      	adds	r7, #20
 8009342:	46bd      	mov	sp, r7
 8009344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009348:	4770      	bx	lr
 800934a:	bf00      	nop
 800934c:	40012c00 	.word	0x40012c00
 8009350:	40000400 	.word	0x40000400
 8009354:	40000800 	.word	0x40000800
 8009358:	40013400 	.word	0x40013400
 800935c:	40014000 	.word	0x40014000
 8009360:	40014400 	.word	0x40014400
 8009364:	40014800 	.word	0x40014800

08009368 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009368:	b480      	push	{r7}
 800936a:	b087      	sub	sp, #28
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
 8009370:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6a1b      	ldr	r3, [r3, #32]
 8009376:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6a1b      	ldr	r3, [r3, #32]
 800937c:	f023 0201 	bic.w	r2, r3, #1
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	685b      	ldr	r3, [r3, #4]
 8009388:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	699b      	ldr	r3, [r3, #24]
 800938e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009396:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800939a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	f023 0303 	bic.w	r3, r3, #3
 80093a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	68fa      	ldr	r2, [r7, #12]
 80093aa:	4313      	orrs	r3, r2
 80093ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80093ae:	697b      	ldr	r3, [r7, #20]
 80093b0:	f023 0302 	bic.w	r3, r3, #2
 80093b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	689b      	ldr	r3, [r3, #8]
 80093ba:	697a      	ldr	r2, [r7, #20]
 80093bc:	4313      	orrs	r3, r2
 80093be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	4a2c      	ldr	r2, [pc, #176]	@ (8009474 <TIM_OC1_SetConfig+0x10c>)
 80093c4:	4293      	cmp	r3, r2
 80093c6:	d00f      	beq.n	80093e8 <TIM_OC1_SetConfig+0x80>
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	4a2b      	ldr	r2, [pc, #172]	@ (8009478 <TIM_OC1_SetConfig+0x110>)
 80093cc:	4293      	cmp	r3, r2
 80093ce:	d00b      	beq.n	80093e8 <TIM_OC1_SetConfig+0x80>
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	4a2a      	ldr	r2, [pc, #168]	@ (800947c <TIM_OC1_SetConfig+0x114>)
 80093d4:	4293      	cmp	r3, r2
 80093d6:	d007      	beq.n	80093e8 <TIM_OC1_SetConfig+0x80>
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	4a29      	ldr	r2, [pc, #164]	@ (8009480 <TIM_OC1_SetConfig+0x118>)
 80093dc:	4293      	cmp	r3, r2
 80093de:	d003      	beq.n	80093e8 <TIM_OC1_SetConfig+0x80>
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	4a28      	ldr	r2, [pc, #160]	@ (8009484 <TIM_OC1_SetConfig+0x11c>)
 80093e4:	4293      	cmp	r3, r2
 80093e6:	d10c      	bne.n	8009402 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80093e8:	697b      	ldr	r3, [r7, #20]
 80093ea:	f023 0308 	bic.w	r3, r3, #8
 80093ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	68db      	ldr	r3, [r3, #12]
 80093f4:	697a      	ldr	r2, [r7, #20]
 80093f6:	4313      	orrs	r3, r2
 80093f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80093fa:	697b      	ldr	r3, [r7, #20]
 80093fc:	f023 0304 	bic.w	r3, r3, #4
 8009400:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	4a1b      	ldr	r2, [pc, #108]	@ (8009474 <TIM_OC1_SetConfig+0x10c>)
 8009406:	4293      	cmp	r3, r2
 8009408:	d00f      	beq.n	800942a <TIM_OC1_SetConfig+0xc2>
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	4a1a      	ldr	r2, [pc, #104]	@ (8009478 <TIM_OC1_SetConfig+0x110>)
 800940e:	4293      	cmp	r3, r2
 8009410:	d00b      	beq.n	800942a <TIM_OC1_SetConfig+0xc2>
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	4a19      	ldr	r2, [pc, #100]	@ (800947c <TIM_OC1_SetConfig+0x114>)
 8009416:	4293      	cmp	r3, r2
 8009418:	d007      	beq.n	800942a <TIM_OC1_SetConfig+0xc2>
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	4a18      	ldr	r2, [pc, #96]	@ (8009480 <TIM_OC1_SetConfig+0x118>)
 800941e:	4293      	cmp	r3, r2
 8009420:	d003      	beq.n	800942a <TIM_OC1_SetConfig+0xc2>
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	4a17      	ldr	r2, [pc, #92]	@ (8009484 <TIM_OC1_SetConfig+0x11c>)
 8009426:	4293      	cmp	r3, r2
 8009428:	d111      	bne.n	800944e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800942a:	693b      	ldr	r3, [r7, #16]
 800942c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009430:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009432:	693b      	ldr	r3, [r7, #16]
 8009434:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009438:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	695b      	ldr	r3, [r3, #20]
 800943e:	693a      	ldr	r2, [r7, #16]
 8009440:	4313      	orrs	r3, r2
 8009442:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	699b      	ldr	r3, [r3, #24]
 8009448:	693a      	ldr	r2, [r7, #16]
 800944a:	4313      	orrs	r3, r2
 800944c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	693a      	ldr	r2, [r7, #16]
 8009452:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	68fa      	ldr	r2, [r7, #12]
 8009458:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	685a      	ldr	r2, [r3, #4]
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	697a      	ldr	r2, [r7, #20]
 8009466:	621a      	str	r2, [r3, #32]
}
 8009468:	bf00      	nop
 800946a:	371c      	adds	r7, #28
 800946c:	46bd      	mov	sp, r7
 800946e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009472:	4770      	bx	lr
 8009474:	40012c00 	.word	0x40012c00
 8009478:	40013400 	.word	0x40013400
 800947c:	40014000 	.word	0x40014000
 8009480:	40014400 	.word	0x40014400
 8009484:	40014800 	.word	0x40014800

08009488 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009488:	b480      	push	{r7}
 800948a:	b087      	sub	sp, #28
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
 8009490:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6a1b      	ldr	r3, [r3, #32]
 8009496:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	6a1b      	ldr	r3, [r3, #32]
 800949c:	f023 0210 	bic.w	r2, r3, #16
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	685b      	ldr	r3, [r3, #4]
 80094a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	699b      	ldr	r3, [r3, #24]
 80094ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80094b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80094ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80094c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	021b      	lsls	r3, r3, #8
 80094ca:	68fa      	ldr	r2, [r7, #12]
 80094cc:	4313      	orrs	r3, r2
 80094ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80094d0:	697b      	ldr	r3, [r7, #20]
 80094d2:	f023 0320 	bic.w	r3, r3, #32
 80094d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	689b      	ldr	r3, [r3, #8]
 80094dc:	011b      	lsls	r3, r3, #4
 80094de:	697a      	ldr	r2, [r7, #20]
 80094e0:	4313      	orrs	r3, r2
 80094e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	4a28      	ldr	r2, [pc, #160]	@ (8009588 <TIM_OC2_SetConfig+0x100>)
 80094e8:	4293      	cmp	r3, r2
 80094ea:	d003      	beq.n	80094f4 <TIM_OC2_SetConfig+0x6c>
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	4a27      	ldr	r2, [pc, #156]	@ (800958c <TIM_OC2_SetConfig+0x104>)
 80094f0:	4293      	cmp	r3, r2
 80094f2:	d10d      	bne.n	8009510 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80094f4:	697b      	ldr	r3, [r7, #20]
 80094f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80094fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	68db      	ldr	r3, [r3, #12]
 8009500:	011b      	lsls	r3, r3, #4
 8009502:	697a      	ldr	r2, [r7, #20]
 8009504:	4313      	orrs	r3, r2
 8009506:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009508:	697b      	ldr	r3, [r7, #20]
 800950a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800950e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	4a1d      	ldr	r2, [pc, #116]	@ (8009588 <TIM_OC2_SetConfig+0x100>)
 8009514:	4293      	cmp	r3, r2
 8009516:	d00f      	beq.n	8009538 <TIM_OC2_SetConfig+0xb0>
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	4a1c      	ldr	r2, [pc, #112]	@ (800958c <TIM_OC2_SetConfig+0x104>)
 800951c:	4293      	cmp	r3, r2
 800951e:	d00b      	beq.n	8009538 <TIM_OC2_SetConfig+0xb0>
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	4a1b      	ldr	r2, [pc, #108]	@ (8009590 <TIM_OC2_SetConfig+0x108>)
 8009524:	4293      	cmp	r3, r2
 8009526:	d007      	beq.n	8009538 <TIM_OC2_SetConfig+0xb0>
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	4a1a      	ldr	r2, [pc, #104]	@ (8009594 <TIM_OC2_SetConfig+0x10c>)
 800952c:	4293      	cmp	r3, r2
 800952e:	d003      	beq.n	8009538 <TIM_OC2_SetConfig+0xb0>
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	4a19      	ldr	r2, [pc, #100]	@ (8009598 <TIM_OC2_SetConfig+0x110>)
 8009534:	4293      	cmp	r3, r2
 8009536:	d113      	bne.n	8009560 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009538:	693b      	ldr	r3, [r7, #16]
 800953a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800953e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009540:	693b      	ldr	r3, [r7, #16]
 8009542:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009546:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	695b      	ldr	r3, [r3, #20]
 800954c:	009b      	lsls	r3, r3, #2
 800954e:	693a      	ldr	r2, [r7, #16]
 8009550:	4313      	orrs	r3, r2
 8009552:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	699b      	ldr	r3, [r3, #24]
 8009558:	009b      	lsls	r3, r3, #2
 800955a:	693a      	ldr	r2, [r7, #16]
 800955c:	4313      	orrs	r3, r2
 800955e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	693a      	ldr	r2, [r7, #16]
 8009564:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	68fa      	ldr	r2, [r7, #12]
 800956a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	685a      	ldr	r2, [r3, #4]
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	697a      	ldr	r2, [r7, #20]
 8009578:	621a      	str	r2, [r3, #32]
}
 800957a:	bf00      	nop
 800957c:	371c      	adds	r7, #28
 800957e:	46bd      	mov	sp, r7
 8009580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009584:	4770      	bx	lr
 8009586:	bf00      	nop
 8009588:	40012c00 	.word	0x40012c00
 800958c:	40013400 	.word	0x40013400
 8009590:	40014000 	.word	0x40014000
 8009594:	40014400 	.word	0x40014400
 8009598:	40014800 	.word	0x40014800

0800959c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800959c:	b480      	push	{r7}
 800959e:	b087      	sub	sp, #28
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
 80095a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6a1b      	ldr	r3, [r3, #32]
 80095aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	6a1b      	ldr	r3, [r3, #32]
 80095b0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	685b      	ldr	r3, [r3, #4]
 80095bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	69db      	ldr	r3, [r3, #28]
 80095c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80095ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80095ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	f023 0303 	bic.w	r3, r3, #3
 80095d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	68fa      	ldr	r2, [r7, #12]
 80095de:	4313      	orrs	r3, r2
 80095e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80095e2:	697b      	ldr	r3, [r7, #20]
 80095e4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80095e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	689b      	ldr	r3, [r3, #8]
 80095ee:	021b      	lsls	r3, r3, #8
 80095f0:	697a      	ldr	r2, [r7, #20]
 80095f2:	4313      	orrs	r3, r2
 80095f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	4a27      	ldr	r2, [pc, #156]	@ (8009698 <TIM_OC3_SetConfig+0xfc>)
 80095fa:	4293      	cmp	r3, r2
 80095fc:	d003      	beq.n	8009606 <TIM_OC3_SetConfig+0x6a>
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	4a26      	ldr	r2, [pc, #152]	@ (800969c <TIM_OC3_SetConfig+0x100>)
 8009602:	4293      	cmp	r3, r2
 8009604:	d10d      	bne.n	8009622 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009606:	697b      	ldr	r3, [r7, #20]
 8009608:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800960c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	68db      	ldr	r3, [r3, #12]
 8009612:	021b      	lsls	r3, r3, #8
 8009614:	697a      	ldr	r2, [r7, #20]
 8009616:	4313      	orrs	r3, r2
 8009618:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800961a:	697b      	ldr	r3, [r7, #20]
 800961c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009620:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	4a1c      	ldr	r2, [pc, #112]	@ (8009698 <TIM_OC3_SetConfig+0xfc>)
 8009626:	4293      	cmp	r3, r2
 8009628:	d00f      	beq.n	800964a <TIM_OC3_SetConfig+0xae>
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	4a1b      	ldr	r2, [pc, #108]	@ (800969c <TIM_OC3_SetConfig+0x100>)
 800962e:	4293      	cmp	r3, r2
 8009630:	d00b      	beq.n	800964a <TIM_OC3_SetConfig+0xae>
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	4a1a      	ldr	r2, [pc, #104]	@ (80096a0 <TIM_OC3_SetConfig+0x104>)
 8009636:	4293      	cmp	r3, r2
 8009638:	d007      	beq.n	800964a <TIM_OC3_SetConfig+0xae>
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	4a19      	ldr	r2, [pc, #100]	@ (80096a4 <TIM_OC3_SetConfig+0x108>)
 800963e:	4293      	cmp	r3, r2
 8009640:	d003      	beq.n	800964a <TIM_OC3_SetConfig+0xae>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	4a18      	ldr	r2, [pc, #96]	@ (80096a8 <TIM_OC3_SetConfig+0x10c>)
 8009646:	4293      	cmp	r3, r2
 8009648:	d113      	bne.n	8009672 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800964a:	693b      	ldr	r3, [r7, #16]
 800964c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009650:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009652:	693b      	ldr	r3, [r7, #16]
 8009654:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009658:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	695b      	ldr	r3, [r3, #20]
 800965e:	011b      	lsls	r3, r3, #4
 8009660:	693a      	ldr	r2, [r7, #16]
 8009662:	4313      	orrs	r3, r2
 8009664:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	699b      	ldr	r3, [r3, #24]
 800966a:	011b      	lsls	r3, r3, #4
 800966c:	693a      	ldr	r2, [r7, #16]
 800966e:	4313      	orrs	r3, r2
 8009670:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	693a      	ldr	r2, [r7, #16]
 8009676:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	68fa      	ldr	r2, [r7, #12]
 800967c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	685a      	ldr	r2, [r3, #4]
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	697a      	ldr	r2, [r7, #20]
 800968a:	621a      	str	r2, [r3, #32]
}
 800968c:	bf00      	nop
 800968e:	371c      	adds	r7, #28
 8009690:	46bd      	mov	sp, r7
 8009692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009696:	4770      	bx	lr
 8009698:	40012c00 	.word	0x40012c00
 800969c:	40013400 	.word	0x40013400
 80096a0:	40014000 	.word	0x40014000
 80096a4:	40014400 	.word	0x40014400
 80096a8:	40014800 	.word	0x40014800

080096ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80096ac:	b480      	push	{r7}
 80096ae:	b087      	sub	sp, #28
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
 80096b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6a1b      	ldr	r3, [r3, #32]
 80096ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6a1b      	ldr	r3, [r3, #32]
 80096c0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	685b      	ldr	r3, [r3, #4]
 80096cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	69db      	ldr	r3, [r3, #28]
 80096d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80096da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80096de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80096e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	021b      	lsls	r3, r3, #8
 80096ee:	68fa      	ldr	r2, [r7, #12]
 80096f0:	4313      	orrs	r3, r2
 80096f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80096f4:	697b      	ldr	r3, [r7, #20]
 80096f6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80096fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	689b      	ldr	r3, [r3, #8]
 8009700:	031b      	lsls	r3, r3, #12
 8009702:	697a      	ldr	r2, [r7, #20]
 8009704:	4313      	orrs	r3, r2
 8009706:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	4a28      	ldr	r2, [pc, #160]	@ (80097ac <TIM_OC4_SetConfig+0x100>)
 800970c:	4293      	cmp	r3, r2
 800970e:	d003      	beq.n	8009718 <TIM_OC4_SetConfig+0x6c>
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	4a27      	ldr	r2, [pc, #156]	@ (80097b0 <TIM_OC4_SetConfig+0x104>)
 8009714:	4293      	cmp	r3, r2
 8009716:	d10d      	bne.n	8009734 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8009718:	697b      	ldr	r3, [r7, #20]
 800971a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800971e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	68db      	ldr	r3, [r3, #12]
 8009724:	031b      	lsls	r3, r3, #12
 8009726:	697a      	ldr	r2, [r7, #20]
 8009728:	4313      	orrs	r3, r2
 800972a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800972c:	697b      	ldr	r3, [r7, #20]
 800972e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009732:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	4a1d      	ldr	r2, [pc, #116]	@ (80097ac <TIM_OC4_SetConfig+0x100>)
 8009738:	4293      	cmp	r3, r2
 800973a:	d00f      	beq.n	800975c <TIM_OC4_SetConfig+0xb0>
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	4a1c      	ldr	r2, [pc, #112]	@ (80097b0 <TIM_OC4_SetConfig+0x104>)
 8009740:	4293      	cmp	r3, r2
 8009742:	d00b      	beq.n	800975c <TIM_OC4_SetConfig+0xb0>
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	4a1b      	ldr	r2, [pc, #108]	@ (80097b4 <TIM_OC4_SetConfig+0x108>)
 8009748:	4293      	cmp	r3, r2
 800974a:	d007      	beq.n	800975c <TIM_OC4_SetConfig+0xb0>
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	4a1a      	ldr	r2, [pc, #104]	@ (80097b8 <TIM_OC4_SetConfig+0x10c>)
 8009750:	4293      	cmp	r3, r2
 8009752:	d003      	beq.n	800975c <TIM_OC4_SetConfig+0xb0>
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	4a19      	ldr	r2, [pc, #100]	@ (80097bc <TIM_OC4_SetConfig+0x110>)
 8009758:	4293      	cmp	r3, r2
 800975a:	d113      	bne.n	8009784 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800975c:	693b      	ldr	r3, [r7, #16]
 800975e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009762:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8009764:	693b      	ldr	r3, [r7, #16]
 8009766:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800976a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	695b      	ldr	r3, [r3, #20]
 8009770:	019b      	lsls	r3, r3, #6
 8009772:	693a      	ldr	r2, [r7, #16]
 8009774:	4313      	orrs	r3, r2
 8009776:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	699b      	ldr	r3, [r3, #24]
 800977c:	019b      	lsls	r3, r3, #6
 800977e:	693a      	ldr	r2, [r7, #16]
 8009780:	4313      	orrs	r3, r2
 8009782:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	693a      	ldr	r2, [r7, #16]
 8009788:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	68fa      	ldr	r2, [r7, #12]
 800978e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	685a      	ldr	r2, [r3, #4]
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	697a      	ldr	r2, [r7, #20]
 800979c:	621a      	str	r2, [r3, #32]
}
 800979e:	bf00      	nop
 80097a0:	371c      	adds	r7, #28
 80097a2:	46bd      	mov	sp, r7
 80097a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a8:	4770      	bx	lr
 80097aa:	bf00      	nop
 80097ac:	40012c00 	.word	0x40012c00
 80097b0:	40013400 	.word	0x40013400
 80097b4:	40014000 	.word	0x40014000
 80097b8:	40014400 	.word	0x40014400
 80097bc:	40014800 	.word	0x40014800

080097c0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80097c0:	b480      	push	{r7}
 80097c2:	b087      	sub	sp, #28
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
 80097c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6a1b      	ldr	r3, [r3, #32]
 80097ce:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	6a1b      	ldr	r3, [r3, #32]
 80097d4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	685b      	ldr	r3, [r3, #4]
 80097e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80097e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80097ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80097f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	68fa      	ldr	r2, [r7, #12]
 80097fa:	4313      	orrs	r3, r2
 80097fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80097fe:	693b      	ldr	r3, [r7, #16]
 8009800:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009804:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	689b      	ldr	r3, [r3, #8]
 800980a:	041b      	lsls	r3, r3, #16
 800980c:	693a      	ldr	r2, [r7, #16]
 800980e:	4313      	orrs	r3, r2
 8009810:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	4a17      	ldr	r2, [pc, #92]	@ (8009874 <TIM_OC5_SetConfig+0xb4>)
 8009816:	4293      	cmp	r3, r2
 8009818:	d00f      	beq.n	800983a <TIM_OC5_SetConfig+0x7a>
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	4a16      	ldr	r2, [pc, #88]	@ (8009878 <TIM_OC5_SetConfig+0xb8>)
 800981e:	4293      	cmp	r3, r2
 8009820:	d00b      	beq.n	800983a <TIM_OC5_SetConfig+0x7a>
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	4a15      	ldr	r2, [pc, #84]	@ (800987c <TIM_OC5_SetConfig+0xbc>)
 8009826:	4293      	cmp	r3, r2
 8009828:	d007      	beq.n	800983a <TIM_OC5_SetConfig+0x7a>
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	4a14      	ldr	r2, [pc, #80]	@ (8009880 <TIM_OC5_SetConfig+0xc0>)
 800982e:	4293      	cmp	r3, r2
 8009830:	d003      	beq.n	800983a <TIM_OC5_SetConfig+0x7a>
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	4a13      	ldr	r2, [pc, #76]	@ (8009884 <TIM_OC5_SetConfig+0xc4>)
 8009836:	4293      	cmp	r3, r2
 8009838:	d109      	bne.n	800984e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800983a:	697b      	ldr	r3, [r7, #20]
 800983c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009840:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	695b      	ldr	r3, [r3, #20]
 8009846:	021b      	lsls	r3, r3, #8
 8009848:	697a      	ldr	r2, [r7, #20]
 800984a:	4313      	orrs	r3, r2
 800984c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	697a      	ldr	r2, [r7, #20]
 8009852:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	68fa      	ldr	r2, [r7, #12]
 8009858:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	685a      	ldr	r2, [r3, #4]
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	693a      	ldr	r2, [r7, #16]
 8009866:	621a      	str	r2, [r3, #32]
}
 8009868:	bf00      	nop
 800986a:	371c      	adds	r7, #28
 800986c:	46bd      	mov	sp, r7
 800986e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009872:	4770      	bx	lr
 8009874:	40012c00 	.word	0x40012c00
 8009878:	40013400 	.word	0x40013400
 800987c:	40014000 	.word	0x40014000
 8009880:	40014400 	.word	0x40014400
 8009884:	40014800 	.word	0x40014800

08009888 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009888:	b480      	push	{r7}
 800988a:	b087      	sub	sp, #28
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
 8009890:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	6a1b      	ldr	r3, [r3, #32]
 8009896:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	6a1b      	ldr	r3, [r3, #32]
 800989c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	685b      	ldr	r3, [r3, #4]
 80098a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80098ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80098b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80098ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	021b      	lsls	r3, r3, #8
 80098c2:	68fa      	ldr	r2, [r7, #12]
 80098c4:	4313      	orrs	r3, r2
 80098c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80098c8:	693b      	ldr	r3, [r7, #16]
 80098ca:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80098ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	689b      	ldr	r3, [r3, #8]
 80098d4:	051b      	lsls	r3, r3, #20
 80098d6:	693a      	ldr	r2, [r7, #16]
 80098d8:	4313      	orrs	r3, r2
 80098da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	4a18      	ldr	r2, [pc, #96]	@ (8009940 <TIM_OC6_SetConfig+0xb8>)
 80098e0:	4293      	cmp	r3, r2
 80098e2:	d00f      	beq.n	8009904 <TIM_OC6_SetConfig+0x7c>
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	4a17      	ldr	r2, [pc, #92]	@ (8009944 <TIM_OC6_SetConfig+0xbc>)
 80098e8:	4293      	cmp	r3, r2
 80098ea:	d00b      	beq.n	8009904 <TIM_OC6_SetConfig+0x7c>
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	4a16      	ldr	r2, [pc, #88]	@ (8009948 <TIM_OC6_SetConfig+0xc0>)
 80098f0:	4293      	cmp	r3, r2
 80098f2:	d007      	beq.n	8009904 <TIM_OC6_SetConfig+0x7c>
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	4a15      	ldr	r2, [pc, #84]	@ (800994c <TIM_OC6_SetConfig+0xc4>)
 80098f8:	4293      	cmp	r3, r2
 80098fa:	d003      	beq.n	8009904 <TIM_OC6_SetConfig+0x7c>
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	4a14      	ldr	r2, [pc, #80]	@ (8009950 <TIM_OC6_SetConfig+0xc8>)
 8009900:	4293      	cmp	r3, r2
 8009902:	d109      	bne.n	8009918 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009904:	697b      	ldr	r3, [r7, #20]
 8009906:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800990a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	695b      	ldr	r3, [r3, #20]
 8009910:	029b      	lsls	r3, r3, #10
 8009912:	697a      	ldr	r2, [r7, #20]
 8009914:	4313      	orrs	r3, r2
 8009916:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	697a      	ldr	r2, [r7, #20]
 800991c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	68fa      	ldr	r2, [r7, #12]
 8009922:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	685a      	ldr	r2, [r3, #4]
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	693a      	ldr	r2, [r7, #16]
 8009930:	621a      	str	r2, [r3, #32]
}
 8009932:	bf00      	nop
 8009934:	371c      	adds	r7, #28
 8009936:	46bd      	mov	sp, r7
 8009938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993c:	4770      	bx	lr
 800993e:	bf00      	nop
 8009940:	40012c00 	.word	0x40012c00
 8009944:	40013400 	.word	0x40013400
 8009948:	40014000 	.word	0x40014000
 800994c:	40014400 	.word	0x40014400
 8009950:	40014800 	.word	0x40014800

08009954 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8009954:	b480      	push	{r7}
 8009956:	b087      	sub	sp, #28
 8009958:	af00      	add	r7, sp, #0
 800995a:	60f8      	str	r0, [r7, #12]
 800995c:	60b9      	str	r1, [r7, #8]
 800995e:	607a      	str	r2, [r7, #4]
 8009960:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	6a1b      	ldr	r3, [r3, #32]
 8009966:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	6a1b      	ldr	r3, [r3, #32]
 800996c:	f023 0201 	bic.w	r2, r3, #1
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	699b      	ldr	r3, [r3, #24]
 8009978:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	4a24      	ldr	r2, [pc, #144]	@ (8009a10 <TIM_TI1_SetConfig+0xbc>)
 800997e:	4293      	cmp	r3, r2
 8009980:	d013      	beq.n	80099aa <TIM_TI1_SetConfig+0x56>
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009988:	d00f      	beq.n	80099aa <TIM_TI1_SetConfig+0x56>
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	4a21      	ldr	r2, [pc, #132]	@ (8009a14 <TIM_TI1_SetConfig+0xc0>)
 800998e:	4293      	cmp	r3, r2
 8009990:	d00b      	beq.n	80099aa <TIM_TI1_SetConfig+0x56>
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	4a20      	ldr	r2, [pc, #128]	@ (8009a18 <TIM_TI1_SetConfig+0xc4>)
 8009996:	4293      	cmp	r3, r2
 8009998:	d007      	beq.n	80099aa <TIM_TI1_SetConfig+0x56>
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	4a1f      	ldr	r2, [pc, #124]	@ (8009a1c <TIM_TI1_SetConfig+0xc8>)
 800999e:	4293      	cmp	r3, r2
 80099a0:	d003      	beq.n	80099aa <TIM_TI1_SetConfig+0x56>
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	4a1e      	ldr	r2, [pc, #120]	@ (8009a20 <TIM_TI1_SetConfig+0xcc>)
 80099a6:	4293      	cmp	r3, r2
 80099a8:	d101      	bne.n	80099ae <TIM_TI1_SetConfig+0x5a>
 80099aa:	2301      	movs	r3, #1
 80099ac:	e000      	b.n	80099b0 <TIM_TI1_SetConfig+0x5c>
 80099ae:	2300      	movs	r3, #0
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d008      	beq.n	80099c6 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80099b4:	697b      	ldr	r3, [r7, #20]
 80099b6:	f023 0303 	bic.w	r3, r3, #3
 80099ba:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80099bc:	697a      	ldr	r2, [r7, #20]
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	4313      	orrs	r3, r2
 80099c2:	617b      	str	r3, [r7, #20]
 80099c4:	e003      	b.n	80099ce <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80099c6:	697b      	ldr	r3, [r7, #20]
 80099c8:	f043 0301 	orr.w	r3, r3, #1
 80099cc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80099ce:	697b      	ldr	r3, [r7, #20]
 80099d0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80099d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	011b      	lsls	r3, r3, #4
 80099da:	b2db      	uxtb	r3, r3
 80099dc:	697a      	ldr	r2, [r7, #20]
 80099de:	4313      	orrs	r3, r2
 80099e0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80099e2:	693b      	ldr	r3, [r7, #16]
 80099e4:	f023 030a 	bic.w	r3, r3, #10
 80099e8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80099ea:	68bb      	ldr	r3, [r7, #8]
 80099ec:	f003 030a 	and.w	r3, r3, #10
 80099f0:	693a      	ldr	r2, [r7, #16]
 80099f2:	4313      	orrs	r3, r2
 80099f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	697a      	ldr	r2, [r7, #20]
 80099fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	693a      	ldr	r2, [r7, #16]
 8009a00:	621a      	str	r2, [r3, #32]
}
 8009a02:	bf00      	nop
 8009a04:	371c      	adds	r7, #28
 8009a06:	46bd      	mov	sp, r7
 8009a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0c:	4770      	bx	lr
 8009a0e:	bf00      	nop
 8009a10:	40012c00 	.word	0x40012c00
 8009a14:	40000400 	.word	0x40000400
 8009a18:	40000800 	.word	0x40000800
 8009a1c:	40013400 	.word	0x40013400
 8009a20:	40014000 	.word	0x40014000

08009a24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009a24:	b480      	push	{r7}
 8009a26:	b087      	sub	sp, #28
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	60f8      	str	r0, [r7, #12]
 8009a2c:	60b9      	str	r1, [r7, #8]
 8009a2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	6a1b      	ldr	r3, [r3, #32]
 8009a34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	6a1b      	ldr	r3, [r3, #32]
 8009a3a:	f023 0201 	bic.w	r2, r3, #1
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	699b      	ldr	r3, [r3, #24]
 8009a46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009a48:	693b      	ldr	r3, [r7, #16]
 8009a4a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009a4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	011b      	lsls	r3, r3, #4
 8009a54:	693a      	ldr	r2, [r7, #16]
 8009a56:	4313      	orrs	r3, r2
 8009a58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009a5a:	697b      	ldr	r3, [r7, #20]
 8009a5c:	f023 030a 	bic.w	r3, r3, #10
 8009a60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009a62:	697a      	ldr	r2, [r7, #20]
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	4313      	orrs	r3, r2
 8009a68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	693a      	ldr	r2, [r7, #16]
 8009a6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	697a      	ldr	r2, [r7, #20]
 8009a74:	621a      	str	r2, [r3, #32]
}
 8009a76:	bf00      	nop
 8009a78:	371c      	adds	r7, #28
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a80:	4770      	bx	lr

08009a82 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009a82:	b480      	push	{r7}
 8009a84:	b087      	sub	sp, #28
 8009a86:	af00      	add	r7, sp, #0
 8009a88:	60f8      	str	r0, [r7, #12]
 8009a8a:	60b9      	str	r1, [r7, #8]
 8009a8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	6a1b      	ldr	r3, [r3, #32]
 8009a92:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	6a1b      	ldr	r3, [r3, #32]
 8009a98:	f023 0210 	bic.w	r2, r3, #16
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	699b      	ldr	r3, [r3, #24]
 8009aa4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009aa6:	693b      	ldr	r3, [r7, #16]
 8009aa8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009aac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	031b      	lsls	r3, r3, #12
 8009ab2:	693a      	ldr	r2, [r7, #16]
 8009ab4:	4313      	orrs	r3, r2
 8009ab6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009ab8:	697b      	ldr	r3, [r7, #20]
 8009aba:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009abe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	011b      	lsls	r3, r3, #4
 8009ac4:	697a      	ldr	r2, [r7, #20]
 8009ac6:	4313      	orrs	r3, r2
 8009ac8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	693a      	ldr	r2, [r7, #16]
 8009ace:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	697a      	ldr	r2, [r7, #20]
 8009ad4:	621a      	str	r2, [r3, #32]
}
 8009ad6:	bf00      	nop
 8009ad8:	371c      	adds	r7, #28
 8009ada:	46bd      	mov	sp, r7
 8009adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae0:	4770      	bx	lr

08009ae2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009ae2:	b480      	push	{r7}
 8009ae4:	b085      	sub	sp, #20
 8009ae6:	af00      	add	r7, sp, #0
 8009ae8:	6078      	str	r0, [r7, #4]
 8009aea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	689b      	ldr	r3, [r3, #8]
 8009af0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8009af8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009afc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009afe:	683a      	ldr	r2, [r7, #0]
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	4313      	orrs	r3, r2
 8009b04:	f043 0307 	orr.w	r3, r3, #7
 8009b08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	68fa      	ldr	r2, [r7, #12]
 8009b0e:	609a      	str	r2, [r3, #8]
}
 8009b10:	bf00      	nop
 8009b12:	3714      	adds	r7, #20
 8009b14:	46bd      	mov	sp, r7
 8009b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1a:	4770      	bx	lr

08009b1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009b1c:	b480      	push	{r7}
 8009b1e:	b087      	sub	sp, #28
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	60f8      	str	r0, [r7, #12]
 8009b24:	60b9      	str	r1, [r7, #8]
 8009b26:	607a      	str	r2, [r7, #4]
 8009b28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	689b      	ldr	r3, [r3, #8]
 8009b2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009b30:	697b      	ldr	r3, [r7, #20]
 8009b32:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009b36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	021a      	lsls	r2, r3, #8
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	431a      	orrs	r2, r3
 8009b40:	68bb      	ldr	r3, [r7, #8]
 8009b42:	4313      	orrs	r3, r2
 8009b44:	697a      	ldr	r2, [r7, #20]
 8009b46:	4313      	orrs	r3, r2
 8009b48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	697a      	ldr	r2, [r7, #20]
 8009b4e:	609a      	str	r2, [r3, #8]
}
 8009b50:	bf00      	nop
 8009b52:	371c      	adds	r7, #28
 8009b54:	46bd      	mov	sp, r7
 8009b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5a:	4770      	bx	lr

08009b5c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009b5c:	b480      	push	{r7}
 8009b5e:	b087      	sub	sp, #28
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	60f8      	str	r0, [r7, #12]
 8009b64:	60b9      	str	r1, [r7, #8]
 8009b66:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009b68:	68bb      	ldr	r3, [r7, #8]
 8009b6a:	f003 031f 	and.w	r3, r3, #31
 8009b6e:	2201      	movs	r2, #1
 8009b70:	fa02 f303 	lsl.w	r3, r2, r3
 8009b74:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	6a1a      	ldr	r2, [r3, #32]
 8009b7a:	697b      	ldr	r3, [r7, #20]
 8009b7c:	43db      	mvns	r3, r3
 8009b7e:	401a      	ands	r2, r3
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	6a1a      	ldr	r2, [r3, #32]
 8009b88:	68bb      	ldr	r3, [r7, #8]
 8009b8a:	f003 031f 	and.w	r3, r3, #31
 8009b8e:	6879      	ldr	r1, [r7, #4]
 8009b90:	fa01 f303 	lsl.w	r3, r1, r3
 8009b94:	431a      	orrs	r2, r3
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	621a      	str	r2, [r3, #32]
}
 8009b9a:	bf00      	nop
 8009b9c:	371c      	adds	r7, #28
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba4:	4770      	bx	lr

08009ba6 <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, const TIM_HallSensor_InitTypeDef *sConfig)
{
 8009ba6:	b580      	push	{r7, lr}
 8009ba8:	b08a      	sub	sp, #40	@ 0x28
 8009baa:	af00      	add	r7, sp, #0
 8009bac:	6078      	str	r0, [r7, #4]
 8009bae:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d101      	bne.n	8009bba <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	e0a0      	b.n	8009cfc <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009bc0:	b2db      	uxtb	r3, r3
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d106      	bne.n	8009bd4 <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2200      	movs	r2, #0
 8009bca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 8009bce:	6878      	ldr	r0, [r7, #4]
 8009bd0:	f000 f898 	bl	8009d04 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2202      	movs	r2, #2
 8009bd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681a      	ldr	r2, [r3, #0]
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	3304      	adds	r3, #4
 8009be4:	4619      	mov	r1, r3
 8009be6:	4610      	mov	r0, r2
 8009be8:	f7ff fb22 	bl	8009230 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	6818      	ldr	r0, [r3, #0]
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	6819      	ldr	r1, [r3, #0]
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	689b      	ldr	r3, [r3, #8]
 8009bf8:	2203      	movs	r2, #3
 8009bfa:	f7ff feab 	bl	8009954 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	699a      	ldr	r2, [r3, #24]
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	f022 020c 	bic.w	r2, r2, #12
 8009c0c:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	6999      	ldr	r1, [r3, #24]
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	685a      	ldr	r2, [r3, #4]
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	430a      	orrs	r2, r1
 8009c1e:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	685a      	ldr	r2, [r3, #4]
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009c2e:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	689b      	ldr	r3, [r3, #8]
 8009c36:	687a      	ldr	r2, [r7, #4]
 8009c38:	6812      	ldr	r2, [r2, #0]
 8009c3a:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8009c3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c42:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	689a      	ldr	r2, [r3, #8]
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009c52:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	689b      	ldr	r3, [r3, #8]
 8009c5a:	687a      	ldr	r2, [r7, #4]
 8009c5c:	6812      	ldr	r2, [r2, #0]
 8009c5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009c62:	f023 0307 	bic.w	r3, r3, #7
 8009c66:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	689a      	ldr	r2, [r3, #8]
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	f042 0204 	orr.w	r2, r2, #4
 8009c76:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8009c78:	2300      	movs	r3, #0
 8009c7a:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8009c80:	2370      	movs	r3, #112	@ 0x70
 8009c82:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8009c84:	2300      	movs	r3, #0
 8009c86:	627b      	str	r3, [r7, #36]	@ 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8009c88:	2300      	movs	r3, #0
 8009c8a:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	68db      	ldr	r3, [r3, #12]
 8009c94:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	f107 020c 	add.w	r2, r7, #12
 8009c9e:	4611      	mov	r1, r2
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	f7ff fbf1 	bl	8009488 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	685b      	ldr	r3, [r3, #4]
 8009cac:	687a      	ldr	r2, [r7, #4]
 8009cae:	6812      	ldr	r2, [r2, #0]
 8009cb0:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009cb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009cb8:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	685a      	ldr	r2, [r3, #4]
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 8009cc8:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	2201      	movs	r2, #1
 8009cce:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	2201      	movs	r2, #1
 8009cd6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2201      	movs	r2, #1
 8009cde:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	2201      	movs	r2, #1
 8009ce6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	2201      	movs	r2, #1
 8009cee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	2201      	movs	r2, #1
 8009cf6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009cfa:	2300      	movs	r3, #0
}
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	3728      	adds	r7, #40	@ 0x28
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}

08009d04 <HAL_TIMEx_HallSensor_MspInit>:
  * @brief  Initializes the TIM Hall Sensor MSP.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval None
  */
__weak void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef *htim)
{
 8009d04:	b480      	push	{r7}
 8009d06:	b083      	sub	sp, #12
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
   */
}
 8009d0c:	bf00      	nop
 8009d0e:	370c      	adds	r7, #12
 8009d10:	46bd      	mov	sp, r7
 8009d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d16:	4770      	bx	lr

08009d18 <HAL_TIMEx_HallSensor_Start_IT>:
  * @brief  Starts the TIM Hall Sensor Interface in interrupt mode.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start_IT(TIM_HandleTypeDef *htim)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b084      	sub	sp, #16
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009d26:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009d2e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009d36:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009d3e:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(htim->Instance));

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009d40:	7bfb      	ldrb	r3, [r7, #15]
 8009d42:	2b01      	cmp	r3, #1
 8009d44:	d108      	bne.n	8009d58 <HAL_TIMEx_HallSensor_Start_IT+0x40>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009d46:	7bbb      	ldrb	r3, [r7, #14]
 8009d48:	2b01      	cmp	r3, #1
 8009d4a:	d105      	bne.n	8009d58 <HAL_TIMEx_HallSensor_Start_IT+0x40>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009d4c:	7b7b      	ldrb	r3, [r7, #13]
 8009d4e:	2b01      	cmp	r3, #1
 8009d50:	d102      	bne.n	8009d58 <HAL_TIMEx_HallSensor_Start_IT+0x40>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009d52:	7b3b      	ldrb	r3, [r7, #12]
 8009d54:	2b01      	cmp	r3, #1
 8009d56:	d001      	beq.n	8009d5c <HAL_TIMEx_HallSensor_Start_IT+0x44>
  {
    return HAL_ERROR;
 8009d58:	2301      	movs	r3, #1
 8009d5a:	e05d      	b.n	8009e18 <HAL_TIMEx_HallSensor_Start_IT+0x100>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2202      	movs	r2, #2
 8009d60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2202      	movs	r2, #2
 8009d68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2202      	movs	r2, #2
 8009d70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2202      	movs	r2, #2
 8009d78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Enable the capture compare Interrupts 1 event */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	68da      	ldr	r2, [r3, #12]
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	f042 0202 	orr.w	r2, r2, #2
 8009d8a:	60da      	str	r2, [r3, #12]

  /* Enable the Input Capture channel 1
  (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1,
  TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	2201      	movs	r2, #1
 8009d92:	2100      	movs	r1, #0
 8009d94:	4618      	mov	r0, r3
 8009d96:	f7ff fee1 	bl	8009b5c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	4a20      	ldr	r2, [pc, #128]	@ (8009e20 <HAL_TIMEx_HallSensor_Start_IT+0x108>)
 8009da0:	4293      	cmp	r3, r2
 8009da2:	d018      	beq.n	8009dd6 <HAL_TIMEx_HallSensor_Start_IT+0xbe>
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009dac:	d013      	beq.n	8009dd6 <HAL_TIMEx_HallSensor_Start_IT+0xbe>
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	4a1c      	ldr	r2, [pc, #112]	@ (8009e24 <HAL_TIMEx_HallSensor_Start_IT+0x10c>)
 8009db4:	4293      	cmp	r3, r2
 8009db6:	d00e      	beq.n	8009dd6 <HAL_TIMEx_HallSensor_Start_IT+0xbe>
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	4a1a      	ldr	r2, [pc, #104]	@ (8009e28 <HAL_TIMEx_HallSensor_Start_IT+0x110>)
 8009dbe:	4293      	cmp	r3, r2
 8009dc0:	d009      	beq.n	8009dd6 <HAL_TIMEx_HallSensor_Start_IT+0xbe>
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	4a19      	ldr	r2, [pc, #100]	@ (8009e2c <HAL_TIMEx_HallSensor_Start_IT+0x114>)
 8009dc8:	4293      	cmp	r3, r2
 8009dca:	d004      	beq.n	8009dd6 <HAL_TIMEx_HallSensor_Start_IT+0xbe>
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	4a17      	ldr	r2, [pc, #92]	@ (8009e30 <HAL_TIMEx_HallSensor_Start_IT+0x118>)
 8009dd2:	4293      	cmp	r3, r2
 8009dd4:	d115      	bne.n	8009e02 <HAL_TIMEx_HallSensor_Start_IT+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	689a      	ldr	r2, [r3, #8]
 8009ddc:	4b15      	ldr	r3, [pc, #84]	@ (8009e34 <HAL_TIMEx_HallSensor_Start_IT+0x11c>)
 8009dde:	4013      	ands	r3, r2
 8009de0:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009de2:	68bb      	ldr	r3, [r7, #8]
 8009de4:	2b06      	cmp	r3, #6
 8009de6:	d015      	beq.n	8009e14 <HAL_TIMEx_HallSensor_Start_IT+0xfc>
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009dee:	d011      	beq.n	8009e14 <HAL_TIMEx_HallSensor_Start_IT+0xfc>
    {
      __HAL_TIM_ENABLE(htim);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	681a      	ldr	r2, [r3, #0]
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	f042 0201 	orr.w	r2, r2, #1
 8009dfe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e00:	e008      	b.n	8009e14 <HAL_TIMEx_HallSensor_Start_IT+0xfc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	681a      	ldr	r2, [r3, #0]
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	f042 0201 	orr.w	r2, r2, #1
 8009e10:	601a      	str	r2, [r3, #0]
 8009e12:	e000      	b.n	8009e16 <HAL_TIMEx_HallSensor_Start_IT+0xfe>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e14:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009e16:	2300      	movs	r3, #0
}
 8009e18:	4618      	mov	r0, r3
 8009e1a:	3710      	adds	r7, #16
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bd80      	pop	{r7, pc}
 8009e20:	40012c00 	.word	0x40012c00
 8009e24:	40000400 	.word	0x40000400
 8009e28:	40000800 	.word	0x40000800
 8009e2c:	40013400 	.word	0x40013400
 8009e30:	40014000 	.word	0x40014000
 8009e34:	00010007 	.word	0x00010007

08009e38 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b084      	sub	sp, #16
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
 8009e40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009e42:	683b      	ldr	r3, [r7, #0]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d109      	bne.n	8009e5c <HAL_TIMEx_PWMN_Start+0x24>
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009e4e:	b2db      	uxtb	r3, r3
 8009e50:	2b01      	cmp	r3, #1
 8009e52:	bf14      	ite	ne
 8009e54:	2301      	movne	r3, #1
 8009e56:	2300      	moveq	r3, #0
 8009e58:	b2db      	uxtb	r3, r3
 8009e5a:	e022      	b.n	8009ea2 <HAL_TIMEx_PWMN_Start+0x6a>
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	2b04      	cmp	r3, #4
 8009e60:	d109      	bne.n	8009e76 <HAL_TIMEx_PWMN_Start+0x3e>
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009e68:	b2db      	uxtb	r3, r3
 8009e6a:	2b01      	cmp	r3, #1
 8009e6c:	bf14      	ite	ne
 8009e6e:	2301      	movne	r3, #1
 8009e70:	2300      	moveq	r3, #0
 8009e72:	b2db      	uxtb	r3, r3
 8009e74:	e015      	b.n	8009ea2 <HAL_TIMEx_PWMN_Start+0x6a>
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	2b08      	cmp	r3, #8
 8009e7a:	d109      	bne.n	8009e90 <HAL_TIMEx_PWMN_Start+0x58>
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8009e82:	b2db      	uxtb	r3, r3
 8009e84:	2b01      	cmp	r3, #1
 8009e86:	bf14      	ite	ne
 8009e88:	2301      	movne	r3, #1
 8009e8a:	2300      	moveq	r3, #0
 8009e8c:	b2db      	uxtb	r3, r3
 8009e8e:	e008      	b.n	8009ea2 <HAL_TIMEx_PWMN_Start+0x6a>
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8009e96:	b2db      	uxtb	r3, r3
 8009e98:	2b01      	cmp	r3, #1
 8009e9a:	bf14      	ite	ne
 8009e9c:	2301      	movne	r3, #1
 8009e9e:	2300      	moveq	r3, #0
 8009ea0:	b2db      	uxtb	r3, r3
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d001      	beq.n	8009eaa <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8009ea6:	2301      	movs	r3, #1
 8009ea8:	e069      	b.n	8009f7e <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d104      	bne.n	8009eba <HAL_TIMEx_PWMN_Start+0x82>
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2202      	movs	r2, #2
 8009eb4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009eb8:	e013      	b.n	8009ee2 <HAL_TIMEx_PWMN_Start+0xaa>
 8009eba:	683b      	ldr	r3, [r7, #0]
 8009ebc:	2b04      	cmp	r3, #4
 8009ebe:	d104      	bne.n	8009eca <HAL_TIMEx_PWMN_Start+0x92>
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2202      	movs	r2, #2
 8009ec4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009ec8:	e00b      	b.n	8009ee2 <HAL_TIMEx_PWMN_Start+0xaa>
 8009eca:	683b      	ldr	r3, [r7, #0]
 8009ecc:	2b08      	cmp	r3, #8
 8009ece:	d104      	bne.n	8009eda <HAL_TIMEx_PWMN_Start+0xa2>
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2202      	movs	r2, #2
 8009ed4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009ed8:	e003      	b.n	8009ee2 <HAL_TIMEx_PWMN_Start+0xaa>
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2202      	movs	r2, #2
 8009ede:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	2204      	movs	r2, #4
 8009ee8:	6839      	ldr	r1, [r7, #0]
 8009eea:	4618      	mov	r0, r3
 8009eec:	f000 fae2 	bl	800a4b4 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009efe:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	4a20      	ldr	r2, [pc, #128]	@ (8009f88 <HAL_TIMEx_PWMN_Start+0x150>)
 8009f06:	4293      	cmp	r3, r2
 8009f08:	d018      	beq.n	8009f3c <HAL_TIMEx_PWMN_Start+0x104>
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f12:	d013      	beq.n	8009f3c <HAL_TIMEx_PWMN_Start+0x104>
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	4a1c      	ldr	r2, [pc, #112]	@ (8009f8c <HAL_TIMEx_PWMN_Start+0x154>)
 8009f1a:	4293      	cmp	r3, r2
 8009f1c:	d00e      	beq.n	8009f3c <HAL_TIMEx_PWMN_Start+0x104>
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	4a1b      	ldr	r2, [pc, #108]	@ (8009f90 <HAL_TIMEx_PWMN_Start+0x158>)
 8009f24:	4293      	cmp	r3, r2
 8009f26:	d009      	beq.n	8009f3c <HAL_TIMEx_PWMN_Start+0x104>
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	4a19      	ldr	r2, [pc, #100]	@ (8009f94 <HAL_TIMEx_PWMN_Start+0x15c>)
 8009f2e:	4293      	cmp	r3, r2
 8009f30:	d004      	beq.n	8009f3c <HAL_TIMEx_PWMN_Start+0x104>
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	4a18      	ldr	r2, [pc, #96]	@ (8009f98 <HAL_TIMEx_PWMN_Start+0x160>)
 8009f38:	4293      	cmp	r3, r2
 8009f3a:	d115      	bne.n	8009f68 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	689a      	ldr	r2, [r3, #8]
 8009f42:	4b16      	ldr	r3, [pc, #88]	@ (8009f9c <HAL_TIMEx_PWMN_Start+0x164>)
 8009f44:	4013      	ands	r3, r2
 8009f46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	2b06      	cmp	r3, #6
 8009f4c:	d015      	beq.n	8009f7a <HAL_TIMEx_PWMN_Start+0x142>
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009f54:	d011      	beq.n	8009f7a <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	681a      	ldr	r2, [r3, #0]
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	f042 0201 	orr.w	r2, r2, #1
 8009f64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f66:	e008      	b.n	8009f7a <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	681a      	ldr	r2, [r3, #0]
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	f042 0201 	orr.w	r2, r2, #1
 8009f76:	601a      	str	r2, [r3, #0]
 8009f78:	e000      	b.n	8009f7c <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f7a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009f7c:	2300      	movs	r3, #0
}
 8009f7e:	4618      	mov	r0, r3
 8009f80:	3710      	adds	r7, #16
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bd80      	pop	{r7, pc}
 8009f86:	bf00      	nop
 8009f88:	40012c00 	.word	0x40012c00
 8009f8c:	40000400 	.word	0x40000400
 8009f90:	40000800 	.word	0x40000800
 8009f94:	40013400 	.word	0x40013400
 8009f98:	40014000 	.word	0x40014000
 8009f9c:	00010007 	.word	0x00010007

08009fa0 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b082      	sub	sp, #8
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
 8009fa8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	2200      	movs	r2, #0
 8009fb0:	6839      	ldr	r1, [r7, #0]
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	f000 fa7e 	bl	800a4b4 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	6a1a      	ldr	r2, [r3, #32]
 8009fbe:	f241 1311 	movw	r3, #4369	@ 0x1111
 8009fc2:	4013      	ands	r3, r2
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d10f      	bne.n	8009fe8 <HAL_TIMEx_PWMN_Stop+0x48>
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	6a1a      	ldr	r2, [r3, #32]
 8009fce:	f244 4344 	movw	r3, #17476	@ 0x4444
 8009fd2:	4013      	ands	r3, r2
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d107      	bne.n	8009fe8 <HAL_TIMEx_PWMN_Stop+0x48>
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009fe6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	6a1a      	ldr	r2, [r3, #32]
 8009fee:	f241 1311 	movw	r3, #4369	@ 0x1111
 8009ff2:	4013      	ands	r3, r2
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d10f      	bne.n	800a018 <HAL_TIMEx_PWMN_Stop+0x78>
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	6a1a      	ldr	r2, [r3, #32]
 8009ffe:	f244 4344 	movw	r3, #17476	@ 0x4444
 800a002:	4013      	ands	r3, r2
 800a004:	2b00      	cmp	r3, #0
 800a006:	d107      	bne.n	800a018 <HAL_TIMEx_PWMN_Stop+0x78>
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	681a      	ldr	r2, [r3, #0]
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	f022 0201 	bic.w	r2, r2, #1
 800a016:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d104      	bne.n	800a028 <HAL_TIMEx_PWMN_Stop+0x88>
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	2201      	movs	r2, #1
 800a022:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a026:	e013      	b.n	800a050 <HAL_TIMEx_PWMN_Stop+0xb0>
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	2b04      	cmp	r3, #4
 800a02c:	d104      	bne.n	800a038 <HAL_TIMEx_PWMN_Stop+0x98>
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	2201      	movs	r2, #1
 800a032:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a036:	e00b      	b.n	800a050 <HAL_TIMEx_PWMN_Stop+0xb0>
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	2b08      	cmp	r3, #8
 800a03c:	d104      	bne.n	800a048 <HAL_TIMEx_PWMN_Stop+0xa8>
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	2201      	movs	r2, #1
 800a042:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a046:	e003      	b.n	800a050 <HAL_TIMEx_PWMN_Stop+0xb0>
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2201      	movs	r2, #1
 800a04c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 800a050:	2300      	movs	r3, #0
}
 800a052:	4618      	mov	r0, r3
 800a054:	3708      	adds	r7, #8
 800a056:	46bd      	mov	sp, r7
 800a058:	bd80      	pop	{r7, pc}
	...

0800a05c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a05c:	b480      	push	{r7}
 800a05e:	b085      	sub	sp, #20
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
 800a064:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a06c:	2b01      	cmp	r3, #1
 800a06e:	d101      	bne.n	800a074 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a070:	2302      	movs	r3, #2
 800a072:	e065      	b.n	800a140 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2201      	movs	r2, #1
 800a078:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2202      	movs	r2, #2
 800a080:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	685b      	ldr	r3, [r3, #4]
 800a08a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	689b      	ldr	r3, [r3, #8]
 800a092:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	4a2c      	ldr	r2, [pc, #176]	@ (800a14c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a09a:	4293      	cmp	r3, r2
 800a09c:	d004      	beq.n	800a0a8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	4a2b      	ldr	r2, [pc, #172]	@ (800a150 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a0a4:	4293      	cmp	r3, r2
 800a0a6:	d108      	bne.n	800a0ba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a0ae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	685b      	ldr	r3, [r3, #4]
 800a0b4:	68fa      	ldr	r2, [r7, #12]
 800a0b6:	4313      	orrs	r3, r2
 800a0b8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800a0c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a0c4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	68fa      	ldr	r2, [r7, #12]
 800a0cc:	4313      	orrs	r3, r2
 800a0ce:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	68fa      	ldr	r2, [r7, #12]
 800a0d6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	4a1b      	ldr	r2, [pc, #108]	@ (800a14c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a0de:	4293      	cmp	r3, r2
 800a0e0:	d018      	beq.n	800a114 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a0ea:	d013      	beq.n	800a114 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	4a18      	ldr	r2, [pc, #96]	@ (800a154 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a0f2:	4293      	cmp	r3, r2
 800a0f4:	d00e      	beq.n	800a114 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	4a17      	ldr	r2, [pc, #92]	@ (800a158 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a0fc:	4293      	cmp	r3, r2
 800a0fe:	d009      	beq.n	800a114 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	4a12      	ldr	r2, [pc, #72]	@ (800a150 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a106:	4293      	cmp	r3, r2
 800a108:	d004      	beq.n	800a114 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	4a13      	ldr	r2, [pc, #76]	@ (800a15c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a110:	4293      	cmp	r3, r2
 800a112:	d10c      	bne.n	800a12e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a114:	68bb      	ldr	r3, [r7, #8]
 800a116:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a11a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	689b      	ldr	r3, [r3, #8]
 800a120:	68ba      	ldr	r2, [r7, #8]
 800a122:	4313      	orrs	r3, r2
 800a124:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	68ba      	ldr	r2, [r7, #8]
 800a12c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2201      	movs	r2, #1
 800a132:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	2200      	movs	r2, #0
 800a13a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a13e:	2300      	movs	r3, #0
}
 800a140:	4618      	mov	r0, r3
 800a142:	3714      	adds	r7, #20
 800a144:	46bd      	mov	sp, r7
 800a146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14a:	4770      	bx	lr
 800a14c:	40012c00 	.word	0x40012c00
 800a150:	40013400 	.word	0x40013400
 800a154:	40000400 	.word	0x40000400
 800a158:	40000800 	.word	0x40000800
 800a15c:	40014000 	.word	0x40014000

0800a160 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a160:	b480      	push	{r7}
 800a162:	b085      	sub	sp, #20
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
 800a168:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a16a:	2300      	movs	r3, #0
 800a16c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a174:	2b01      	cmp	r3, #1
 800a176:	d101      	bne.n	800a17c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a178:	2302      	movs	r3, #2
 800a17a:	e073      	b.n	800a264 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2201      	movs	r2, #1
 800a180:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	68db      	ldr	r3, [r3, #12]
 800a18e:	4313      	orrs	r3, r2
 800a190:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	689b      	ldr	r3, [r3, #8]
 800a19c:	4313      	orrs	r3, r2
 800a19e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	685b      	ldr	r3, [r3, #4]
 800a1aa:	4313      	orrs	r3, r2
 800a1ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	4313      	orrs	r3, r2
 800a1ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	691b      	ldr	r3, [r3, #16]
 800a1c6:	4313      	orrs	r3, r2
 800a1c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	695b      	ldr	r3, [r3, #20]
 800a1d4:	4313      	orrs	r3, r2
 800a1d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800a1de:	683b      	ldr	r3, [r7, #0]
 800a1e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a1e2:	4313      	orrs	r3, r2
 800a1e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800a1ec:	683b      	ldr	r3, [r7, #0]
 800a1ee:	699b      	ldr	r3, [r3, #24]
 800a1f0:	041b      	lsls	r3, r3, #16
 800a1f2:	4313      	orrs	r3, r2
 800a1f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	69db      	ldr	r3, [r3, #28]
 800a200:	4313      	orrs	r3, r2
 800a202:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	4a19      	ldr	r2, [pc, #100]	@ (800a270 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800a20a:	4293      	cmp	r3, r2
 800a20c:	d004      	beq.n	800a218 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	4a18      	ldr	r2, [pc, #96]	@ (800a274 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800a214:	4293      	cmp	r3, r2
 800a216:	d11c      	bne.n	800a252 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a222:	051b      	lsls	r3, r3, #20
 800a224:	4313      	orrs	r3, r2
 800a226:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	6a1b      	ldr	r3, [r3, #32]
 800a232:	4313      	orrs	r3, r2
 800a234:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a240:	4313      	orrs	r3, r2
 800a242:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a24e:	4313      	orrs	r3, r2
 800a250:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	68fa      	ldr	r2, [r7, #12]
 800a258:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	2200      	movs	r2, #0
 800a25e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a262:	2300      	movs	r3, #0
}
 800a264:	4618      	mov	r0, r3
 800a266:	3714      	adds	r7, #20
 800a268:	46bd      	mov	sp, r7
 800a26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26e:	4770      	bx	lr
 800a270:	40012c00 	.word	0x40012c00
 800a274:	40013400 	.word	0x40013400

0800a278 <HAL_TIMEx_ConfigBreakInput>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             const TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)
{
 800a278:	b480      	push	{r7}
 800a27a:	b08b      	sub	sp, #44	@ 0x2c
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	60f8      	str	r0, [r7, #12]
 800a280:	60b9      	str	r1, [r7, #8]
 800a282:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a284:	2300      	movs	r3, #0
 800a286:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a290:	2b01      	cmp	r3, #1
 800a292:	d101      	bne.n	800a298 <HAL_TIMEx_ConfigBreakInput+0x20>
 800a294:	2302      	movs	r3, #2
 800a296:	e0c1      	b.n	800a41c <HAL_TIMEx_ConfigBreakInput+0x1a4>
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	2201      	movs	r2, #1
 800a29c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (sBreakInputConfig->Source)
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	3b01      	subs	r3, #1
 800a2a6:	2b0f      	cmp	r3, #15
 800a2a8:	d854      	bhi.n	800a354 <HAL_TIMEx_ConfigBreakInput+0xdc>
 800a2aa:	a201      	add	r2, pc, #4	@ (adr r2, 800a2b0 <HAL_TIMEx_ConfigBreakInput+0x38>)
 800a2ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2b0:	0800a2f1 	.word	0x0800a2f1
 800a2b4:	0800a305 	.word	0x0800a305
 800a2b8:	0800a355 	.word	0x0800a355
 800a2bc:	0800a319 	.word	0x0800a319
 800a2c0:	0800a355 	.word	0x0800a355
 800a2c4:	0800a355 	.word	0x0800a355
 800a2c8:	0800a355 	.word	0x0800a355
 800a2cc:	0800a32d 	.word	0x0800a32d
 800a2d0:	0800a355 	.word	0x0800a355
 800a2d4:	0800a355 	.word	0x0800a355
 800a2d8:	0800a355 	.word	0x0800a355
 800a2dc:	0800a355 	.word	0x0800a355
 800a2e0:	0800a355 	.word	0x0800a355
 800a2e4:	0800a355 	.word	0x0800a355
 800a2e8:	0800a355 	.word	0x0800a355
 800a2ec:	0800a341 	.word	0x0800a341
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_AF1_BKINE;
 800a2f0:	2301      	movs	r3, #1
 800a2f2:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKINP;
 800a2f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a2fc:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 800a2fe:	2309      	movs	r3, #9
 800a300:	617b      	str	r3, [r7, #20]
      break;
 800a302:	e030      	b.n	800a366 <HAL_TIMEx_ConfigBreakInput+0xee>
    }
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP1E;
 800a304:	2302      	movs	r3, #2
 800a306:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP1E_Pos;
 800a308:	2301      	movs	r3, #1
 800a30a:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP1P;
 800a30c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a310:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP1P_Pos;
 800a312:	230a      	movs	r3, #10
 800a314:	617b      	str	r3, [r7, #20]
      break;
 800a316:	e026      	b.n	800a366 <HAL_TIMEx_ConfigBreakInput+0xee>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP2E;
 800a318:	2304      	movs	r3, #4
 800a31a:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 800a31c:	2302      	movs	r3, #2
 800a31e:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 800a320:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a324:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 800a326:	230b      	movs	r3, #11
 800a328:	617b      	str	r3, [r7, #20]
      break;
 800a32a:	e01c      	b.n	800a366 <HAL_TIMEx_ConfigBreakInput+0xee>
    }
    case TIM_BREAKINPUTSOURCE_COMP3:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP3E;
 800a32c:	2308      	movs	r3, #8
 800a32e:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP3E_Pos;
 800a330:	2303      	movs	r3, #3
 800a332:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP3P;
 800a334:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a338:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP3P_Pos;
 800a33a:	230c      	movs	r3, #12
 800a33c:	617b      	str	r3, [r7, #20]
      break;
 800a33e:	e012      	b.n	800a366 <HAL_TIMEx_ConfigBreakInput+0xee>
    }
    case TIM_BREAKINPUTSOURCE_COMP4:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP4E;
 800a340:	2310      	movs	r3, #16
 800a342:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP4E_Pos;
 800a344:	2304      	movs	r3, #4
 800a346:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP4P;
 800a348:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a34c:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP4P_Pos;
 800a34e:	230d      	movs	r3, #13
 800a350:	617b      	str	r3, [r7, #20]
      break;
 800a352:	e008      	b.n	800a366 <HAL_TIMEx_ConfigBreakInput+0xee>
    }
#endif /* COMP7 */

    default:
    {
      bkin_enable_mask = 0U;
 800a354:	2300      	movs	r3, #0
 800a356:	623b      	str	r3, [r7, #32]
      bkin_polarity_mask = 0U;
 800a358:	2300      	movs	r3, #0
 800a35a:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = 0U;
 800a35c:	2300      	movs	r3, #0
 800a35e:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = 0U;
 800a360:	2300      	movs	r3, #0
 800a362:	617b      	str	r3, [r7, #20]
      break;
 800a364:	bf00      	nop
    }
  }

  switch (BreakInput)
 800a366:	68bb      	ldr	r3, [r7, #8]
 800a368:	2b01      	cmp	r3, #1
 800a36a:	d003      	beq.n	800a374 <HAL_TIMEx_ConfigBreakInput+0xfc>
 800a36c:	68bb      	ldr	r3, [r7, #8]
 800a36e:	2b02      	cmp	r3, #2
 800a370:	d025      	beq.n	800a3be <HAL_TIMEx_ConfigBreakInput+0x146>
 800a372:	e049      	b.n	800a408 <HAL_TIMEx_ConfigBreakInput+0x190>
  {
    case TIM_BREAKINPUT_BRK:
    {
      /* Get the TIMx_AF1 register value */
      tmporx = htim->Instance->AF1;
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a37a:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800a37c:	6a3b      	ldr	r3, [r7, #32]
 800a37e:	43db      	mvns	r3, r3
 800a380:	693a      	ldr	r2, [r7, #16]
 800a382:	4013      	ands	r3, r2
 800a384:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	685a      	ldr	r2, [r3, #4]
 800a38a:	69bb      	ldr	r3, [r7, #24]
 800a38c:	409a      	lsls	r2, r3
 800a38e:	6a3b      	ldr	r3, [r7, #32]
 800a390:	4013      	ands	r3, r2
 800a392:	693a      	ldr	r2, [r7, #16]
 800a394:	4313      	orrs	r3, r2
 800a396:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 800a398:	69fb      	ldr	r3, [r7, #28]
 800a39a:	43db      	mvns	r3, r3
 800a39c:	693a      	ldr	r2, [r7, #16]
 800a39e:	4013      	ands	r3, r2
 800a3a0:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	689a      	ldr	r2, [r3, #8]
 800a3a6:	697b      	ldr	r3, [r7, #20]
 800a3a8:	409a      	lsls	r2, r3
 800a3aa:	69fb      	ldr	r3, [r7, #28]
 800a3ac:	4013      	ands	r3, r2
 800a3ae:	693a      	ldr	r2, [r7, #16]
 800a3b0:	4313      	orrs	r3, r2
 800a3b2:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF1 */
      htim->Instance->AF1 = tmporx;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	693a      	ldr	r2, [r7, #16]
 800a3ba:	661a      	str	r2, [r3, #96]	@ 0x60
      break;
 800a3bc:	e028      	b.n	800a410 <HAL_TIMEx_ConfigBreakInput+0x198>
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_AF2 register value */
      tmporx = htim->Instance->AF2;
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a3c4:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800a3c6:	6a3b      	ldr	r3, [r7, #32]
 800a3c8:	43db      	mvns	r3, r3
 800a3ca:	693a      	ldr	r2, [r7, #16]
 800a3cc:	4013      	ands	r3, r2
 800a3ce:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	685a      	ldr	r2, [r3, #4]
 800a3d4:	69bb      	ldr	r3, [r7, #24]
 800a3d6:	409a      	lsls	r2, r3
 800a3d8:	6a3b      	ldr	r3, [r7, #32]
 800a3da:	4013      	ands	r3, r2
 800a3dc:	693a      	ldr	r2, [r7, #16]
 800a3de:	4313      	orrs	r3, r2
 800a3e0:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 800a3e2:	69fb      	ldr	r3, [r7, #28]
 800a3e4:	43db      	mvns	r3, r3
 800a3e6:	693a      	ldr	r2, [r7, #16]
 800a3e8:	4013      	ands	r3, r2
 800a3ea:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	689a      	ldr	r2, [r3, #8]
 800a3f0:	697b      	ldr	r3, [r7, #20]
 800a3f2:	409a      	lsls	r2, r3
 800a3f4:	69fb      	ldr	r3, [r7, #28]
 800a3f6:	4013      	ands	r3, r2
 800a3f8:	693a      	ldr	r2, [r7, #16]
 800a3fa:	4313      	orrs	r3, r2
 800a3fc:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	693a      	ldr	r2, [r7, #16]
 800a404:	665a      	str	r2, [r3, #100]	@ 0x64
      break;
 800a406:	e003      	b.n	800a410 <HAL_TIMEx_ConfigBreakInput+0x198>
    }
    default:
      status = HAL_ERROR;
 800a408:	2301      	movs	r3, #1
 800a40a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800a40e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	2200      	movs	r2, #0
 800a414:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a418:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800a41c:	4618      	mov	r0, r3
 800a41e:	372c      	adds	r7, #44	@ 0x2c
 800a420:	46bd      	mov	sp, r7
 800a422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a426:	4770      	bx	lr

0800a428 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a428:	b480      	push	{r7}
 800a42a:	b083      	sub	sp, #12
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a430:	bf00      	nop
 800a432:	370c      	adds	r7, #12
 800a434:	46bd      	mov	sp, r7
 800a436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43a:	4770      	bx	lr

0800a43c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a43c:	b480      	push	{r7}
 800a43e:	b083      	sub	sp, #12
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a444:	bf00      	nop
 800a446:	370c      	adds	r7, #12
 800a448:	46bd      	mov	sp, r7
 800a44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44e:	4770      	bx	lr

0800a450 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a450:	b480      	push	{r7}
 800a452:	b083      	sub	sp, #12
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a458:	bf00      	nop
 800a45a:	370c      	adds	r7, #12
 800a45c:	46bd      	mov	sp, r7
 800a45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a462:	4770      	bx	lr

0800a464 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800a464:	b480      	push	{r7}
 800a466:	b083      	sub	sp, #12
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a46c:	bf00      	nop
 800a46e:	370c      	adds	r7, #12
 800a470:	46bd      	mov	sp, r7
 800a472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a476:	4770      	bx	lr

0800a478 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a478:	b480      	push	{r7}
 800a47a:	b083      	sub	sp, #12
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a480:	bf00      	nop
 800a482:	370c      	adds	r7, #12
 800a484:	46bd      	mov	sp, r7
 800a486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48a:	4770      	bx	lr

0800a48c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a48c:	b480      	push	{r7}
 800a48e:	b083      	sub	sp, #12
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a494:	bf00      	nop
 800a496:	370c      	adds	r7, #12
 800a498:	46bd      	mov	sp, r7
 800a49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49e:	4770      	bx	lr

0800a4a0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a4a0:	b480      	push	{r7}
 800a4a2:	b083      	sub	sp, #12
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a4a8:	bf00      	nop
 800a4aa:	370c      	adds	r7, #12
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b2:	4770      	bx	lr

0800a4b4 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800a4b4:	b480      	push	{r7}
 800a4b6:	b087      	sub	sp, #28
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	60f8      	str	r0, [r7, #12]
 800a4bc:	60b9      	str	r1, [r7, #8]
 800a4be:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 800a4c0:	68bb      	ldr	r3, [r7, #8]
 800a4c2:	f003 030f 	and.w	r3, r3, #15
 800a4c6:	2204      	movs	r2, #4
 800a4c8:	fa02 f303 	lsl.w	r3, r2, r3
 800a4cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	6a1a      	ldr	r2, [r3, #32]
 800a4d2:	697b      	ldr	r3, [r7, #20]
 800a4d4:	43db      	mvns	r3, r3
 800a4d6:	401a      	ands	r2, r3
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	6a1a      	ldr	r2, [r3, #32]
 800a4e0:	68bb      	ldr	r3, [r7, #8]
 800a4e2:	f003 030f 	and.w	r3, r3, #15
 800a4e6:	6879      	ldr	r1, [r7, #4]
 800a4e8:	fa01 f303 	lsl.w	r3, r1, r3
 800a4ec:	431a      	orrs	r2, r3
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	621a      	str	r2, [r3, #32]
}
 800a4f2:	bf00      	nop
 800a4f4:	371c      	adds	r7, #28
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fc:	4770      	bx	lr

0800a4fe <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a4fe:	b580      	push	{r7, lr}
 800a500:	b082      	sub	sp, #8
 800a502:	af00      	add	r7, sp, #0
 800a504:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d101      	bne.n	800a510 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a50c:	2301      	movs	r3, #1
 800a50e:	e042      	b.n	800a596 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a516:	2b00      	cmp	r3, #0
 800a518:	d106      	bne.n	800a528 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	2200      	movs	r2, #0
 800a51e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a522:	6878      	ldr	r0, [r7, #4]
 800a524:	f7f7 ff02 	bl	800232c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2224      	movs	r2, #36	@ 0x24
 800a52c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	681a      	ldr	r2, [r3, #0]
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	f022 0201 	bic.w	r2, r2, #1
 800a53e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a544:	2b00      	cmp	r3, #0
 800a546:	d002      	beq.n	800a54e <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a548:	6878      	ldr	r0, [r7, #4]
 800a54a:	f000 fec3 	bl	800b2d4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a54e:	6878      	ldr	r0, [r7, #4]
 800a550:	f000 fbf4 	bl	800ad3c <UART_SetConfig>
 800a554:	4603      	mov	r3, r0
 800a556:	2b01      	cmp	r3, #1
 800a558:	d101      	bne.n	800a55e <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a55a:	2301      	movs	r3, #1
 800a55c:	e01b      	b.n	800a596 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	685a      	ldr	r2, [r3, #4]
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a56c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	689a      	ldr	r2, [r3, #8]
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a57c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	681a      	ldr	r2, [r3, #0]
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	f042 0201 	orr.w	r2, r2, #1
 800a58c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a58e:	6878      	ldr	r0, [r7, #4]
 800a590:	f000 ff42 	bl	800b418 <UART_CheckIdleState>
 800a594:	4603      	mov	r3, r0
}
 800a596:	4618      	mov	r0, r3
 800a598:	3708      	adds	r7, #8
 800a59a:	46bd      	mov	sp, r7
 800a59c:	bd80      	pop	{r7, pc}
	...

0800a5a0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b08a      	sub	sp, #40	@ 0x28
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	60f8      	str	r0, [r7, #12]
 800a5a8:	60b9      	str	r1, [r7, #8]
 800a5aa:	4613      	mov	r3, r2
 800a5ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a5b4:	2b20      	cmp	r3, #32
 800a5b6:	d167      	bne.n	800a688 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800a5b8:	68bb      	ldr	r3, [r7, #8]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d002      	beq.n	800a5c4 <HAL_UART_Transmit_DMA+0x24>
 800a5be:	88fb      	ldrh	r3, [r7, #6]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d101      	bne.n	800a5c8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800a5c4:	2301      	movs	r3, #1
 800a5c6:	e060      	b.n	800a68a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	68ba      	ldr	r2, [r7, #8]
 800a5cc:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	88fa      	ldrh	r2, [r7, #6]
 800a5d2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	88fa      	ldrh	r2, [r7, #6]
 800a5da:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	2221      	movs	r2, #33	@ 0x21
 800a5ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d028      	beq.n	800a648 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a5fa:	4a26      	ldr	r2, [pc, #152]	@ (800a694 <HAL_UART_Transmit_DMA+0xf4>)
 800a5fc:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a602:	4a25      	ldr	r2, [pc, #148]	@ (800a698 <HAL_UART_Transmit_DMA+0xf8>)
 800a604:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a60a:	4a24      	ldr	r2, [pc, #144]	@ (800a69c <HAL_UART_Transmit_DMA+0xfc>)
 800a60c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a612:	2200      	movs	r2, #0
 800a614:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a61e:	4619      	mov	r1, r3
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	3328      	adds	r3, #40	@ 0x28
 800a626:	461a      	mov	r2, r3
 800a628:	88fb      	ldrh	r3, [r7, #6]
 800a62a:	f7fb fa27 	bl	8005a7c <HAL_DMA_Start_IT>
 800a62e:	4603      	mov	r3, r0
 800a630:	2b00      	cmp	r3, #0
 800a632:	d009      	beq.n	800a648 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	2210      	movs	r2, #16
 800a638:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	2220      	movs	r2, #32
 800a640:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800a644:	2301      	movs	r3, #1
 800a646:	e020      	b.n	800a68a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	2240      	movs	r2, #64	@ 0x40
 800a64e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	3308      	adds	r3, #8
 800a656:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a658:	697b      	ldr	r3, [r7, #20]
 800a65a:	e853 3f00 	ldrex	r3, [r3]
 800a65e:	613b      	str	r3, [r7, #16]
   return(result);
 800a660:	693b      	ldr	r3, [r7, #16]
 800a662:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a666:	627b      	str	r3, [r7, #36]	@ 0x24
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	3308      	adds	r3, #8
 800a66e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a670:	623a      	str	r2, [r7, #32]
 800a672:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a674:	69f9      	ldr	r1, [r7, #28]
 800a676:	6a3a      	ldr	r2, [r7, #32]
 800a678:	e841 2300 	strex	r3, r2, [r1]
 800a67c:	61bb      	str	r3, [r7, #24]
   return(result);
 800a67e:	69bb      	ldr	r3, [r7, #24]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d1e5      	bne.n	800a650 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800a684:	2300      	movs	r3, #0
 800a686:	e000      	b.n	800a68a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800a688:	2302      	movs	r3, #2
  }
}
 800a68a:	4618      	mov	r0, r3
 800a68c:	3728      	adds	r7, #40	@ 0x28
 800a68e:	46bd      	mov	sp, r7
 800a690:	bd80      	pop	{r7, pc}
 800a692:	bf00      	nop
 800a694:	0800b795 	.word	0x0800b795
 800a698:	0800b82f 	.word	0x0800b82f
 800a69c:	0800b84b 	.word	0x0800b84b

0800a6a0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b0ba      	sub	sp, #232	@ 0xe8
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	69db      	ldr	r3, [r3, #28]
 800a6ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	689b      	ldr	r3, [r3, #8]
 800a6c2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a6c6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800a6ca:	f640 030f 	movw	r3, #2063	@ 0x80f
 800a6ce:	4013      	ands	r3, r2
 800a6d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800a6d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d11b      	bne.n	800a714 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a6dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a6e0:	f003 0320 	and.w	r3, r3, #32
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d015      	beq.n	800a714 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a6e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a6ec:	f003 0320 	and.w	r3, r3, #32
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d105      	bne.n	800a700 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a6f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a6f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d009      	beq.n	800a714 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a704:	2b00      	cmp	r3, #0
 800a706:	f000 82e3 	beq.w	800acd0 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a70e:	6878      	ldr	r0, [r7, #4]
 800a710:	4798      	blx	r3
      }
      return;
 800a712:	e2dd      	b.n	800acd0 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a714:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a718:	2b00      	cmp	r3, #0
 800a71a:	f000 8123 	beq.w	800a964 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a71e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a722:	4b8d      	ldr	r3, [pc, #564]	@ (800a958 <HAL_UART_IRQHandler+0x2b8>)
 800a724:	4013      	ands	r3, r2
 800a726:	2b00      	cmp	r3, #0
 800a728:	d106      	bne.n	800a738 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a72a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800a72e:	4b8b      	ldr	r3, [pc, #556]	@ (800a95c <HAL_UART_IRQHandler+0x2bc>)
 800a730:	4013      	ands	r3, r2
 800a732:	2b00      	cmp	r3, #0
 800a734:	f000 8116 	beq.w	800a964 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a738:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a73c:	f003 0301 	and.w	r3, r3, #1
 800a740:	2b00      	cmp	r3, #0
 800a742:	d011      	beq.n	800a768 <HAL_UART_IRQHandler+0xc8>
 800a744:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a748:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d00b      	beq.n	800a768 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	2201      	movs	r2, #1
 800a756:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a75e:	f043 0201 	orr.w	r2, r3, #1
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a768:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a76c:	f003 0302 	and.w	r3, r3, #2
 800a770:	2b00      	cmp	r3, #0
 800a772:	d011      	beq.n	800a798 <HAL_UART_IRQHandler+0xf8>
 800a774:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a778:	f003 0301 	and.w	r3, r3, #1
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d00b      	beq.n	800a798 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	2202      	movs	r2, #2
 800a786:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a78e:	f043 0204 	orr.w	r2, r3, #4
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a798:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a79c:	f003 0304 	and.w	r3, r3, #4
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d011      	beq.n	800a7c8 <HAL_UART_IRQHandler+0x128>
 800a7a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a7a8:	f003 0301 	and.w	r3, r3, #1
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d00b      	beq.n	800a7c8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	2204      	movs	r2, #4
 800a7b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a7be:	f043 0202 	orr.w	r2, r3, #2
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a7c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a7cc:	f003 0308 	and.w	r3, r3, #8
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d017      	beq.n	800a804 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a7d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a7d8:	f003 0320 	and.w	r3, r3, #32
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d105      	bne.n	800a7ec <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a7e0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a7e4:	4b5c      	ldr	r3, [pc, #368]	@ (800a958 <HAL_UART_IRQHandler+0x2b8>)
 800a7e6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d00b      	beq.n	800a804 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	2208      	movs	r2, #8
 800a7f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a7fa:	f043 0208 	orr.w	r2, r3, #8
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a804:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a808:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d012      	beq.n	800a836 <HAL_UART_IRQHandler+0x196>
 800a810:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a814:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d00c      	beq.n	800a836 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a824:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a82c:	f043 0220 	orr.w	r2, r3, #32
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	f000 8249 	beq.w	800acd4 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a842:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a846:	f003 0320 	and.w	r3, r3, #32
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d013      	beq.n	800a876 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a84e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a852:	f003 0320 	and.w	r3, r3, #32
 800a856:	2b00      	cmp	r3, #0
 800a858:	d105      	bne.n	800a866 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a85a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a85e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a862:	2b00      	cmp	r3, #0
 800a864:	d007      	beq.n	800a876 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d003      	beq.n	800a876 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a872:	6878      	ldr	r0, [r7, #4]
 800a874:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a87c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	689b      	ldr	r3, [r3, #8]
 800a886:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a88a:	2b40      	cmp	r3, #64	@ 0x40
 800a88c:	d005      	beq.n	800a89a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a88e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a892:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a896:	2b00      	cmp	r3, #0
 800a898:	d054      	beq.n	800a944 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a89a:	6878      	ldr	r0, [r7, #4]
 800a89c:	f000 ff14 	bl	800b6c8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	689b      	ldr	r3, [r3, #8]
 800a8a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a8aa:	2b40      	cmp	r3, #64	@ 0x40
 800a8ac:	d146      	bne.n	800a93c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	3308      	adds	r3, #8
 800a8b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a8bc:	e853 3f00 	ldrex	r3, [r3]
 800a8c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a8c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a8c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a8cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	3308      	adds	r3, #8
 800a8d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a8da:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a8de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a8e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a8ea:	e841 2300 	strex	r3, r2, [r1]
 800a8ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a8f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d1d9      	bne.n	800a8ae <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a900:	2b00      	cmp	r3, #0
 800a902:	d017      	beq.n	800a934 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a90a:	4a15      	ldr	r2, [pc, #84]	@ (800a960 <HAL_UART_IRQHandler+0x2c0>)
 800a90c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a914:	4618      	mov	r0, r3
 800a916:	f7fb f985 	bl	8005c24 <HAL_DMA_Abort_IT>
 800a91a:	4603      	mov	r3, r0
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d019      	beq.n	800a954 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a926:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a928:	687a      	ldr	r2, [r7, #4]
 800a92a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800a92e:	4610      	mov	r0, r2
 800a930:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a932:	e00f      	b.n	800a954 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a934:	6878      	ldr	r0, [r7, #4]
 800a936:	f000 f9eb 	bl	800ad10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a93a:	e00b      	b.n	800a954 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a93c:	6878      	ldr	r0, [r7, #4]
 800a93e:	f000 f9e7 	bl	800ad10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a942:	e007      	b.n	800a954 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a944:	6878      	ldr	r0, [r7, #4]
 800a946:	f000 f9e3 	bl	800ad10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	2200      	movs	r2, #0
 800a94e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800a952:	e1bf      	b.n	800acd4 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a954:	bf00      	nop
    return;
 800a956:	e1bd      	b.n	800acd4 <HAL_UART_IRQHandler+0x634>
 800a958:	10000001 	.word	0x10000001
 800a95c:	04000120 	.word	0x04000120
 800a960:	0800b8cb 	.word	0x0800b8cb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a968:	2b01      	cmp	r3, #1
 800a96a:	f040 8153 	bne.w	800ac14 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a96e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a972:	f003 0310 	and.w	r3, r3, #16
 800a976:	2b00      	cmp	r3, #0
 800a978:	f000 814c 	beq.w	800ac14 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a97c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a980:	f003 0310 	and.w	r3, r3, #16
 800a984:	2b00      	cmp	r3, #0
 800a986:	f000 8145 	beq.w	800ac14 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	2210      	movs	r2, #16
 800a990:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	689b      	ldr	r3, [r3, #8]
 800a998:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a99c:	2b40      	cmp	r3, #64	@ 0x40
 800a99e:	f040 80bb 	bne.w	800ab18 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	685b      	ldr	r3, [r3, #4]
 800a9ac:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a9b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	f000 818f 	beq.w	800acd8 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a9c0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a9c4:	429a      	cmp	r2, r3
 800a9c6:	f080 8187 	bcs.w	800acd8 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a9d0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	f003 0320 	and.w	r3, r3, #32
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	f040 8087 	bne.w	800aaf6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a9f4:	e853 3f00 	ldrex	r3, [r3]
 800a9f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a9fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800aa00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aa04:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	461a      	mov	r2, r3
 800aa0e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800aa12:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800aa16:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa1a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800aa1e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800aa22:	e841 2300 	strex	r3, r2, [r1]
 800aa26:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800aa2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d1da      	bne.n	800a9e8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	3308      	adds	r3, #8
 800aa38:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa3a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800aa3c:	e853 3f00 	ldrex	r3, [r3]
 800aa40:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800aa42:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800aa44:	f023 0301 	bic.w	r3, r3, #1
 800aa48:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	3308      	adds	r3, #8
 800aa52:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800aa56:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800aa5a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa5c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800aa5e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800aa62:	e841 2300 	strex	r3, r2, [r1]
 800aa66:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800aa68:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d1e1      	bne.n	800aa32 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	3308      	adds	r3, #8
 800aa74:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa76:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800aa78:	e853 3f00 	ldrex	r3, [r3]
 800aa7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800aa7e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800aa80:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aa84:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	3308      	adds	r3, #8
 800aa8e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800aa92:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800aa94:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa96:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800aa98:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800aa9a:	e841 2300 	strex	r3, r2, [r1]
 800aa9e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800aaa0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d1e3      	bne.n	800aa6e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	2220      	movs	r2, #32
 800aaaa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	2200      	movs	r2, #0
 800aab2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aabc:	e853 3f00 	ldrex	r3, [r3]
 800aac0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800aac2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aac4:	f023 0310 	bic.w	r3, r3, #16
 800aac8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	461a      	mov	r2, r3
 800aad2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800aad6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800aad8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aada:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800aadc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800aade:	e841 2300 	strex	r3, r2, [r1]
 800aae2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800aae4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d1e4      	bne.n	800aab4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	f7fb f83e 	bl	8005b72 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	2202      	movs	r2, #2
 800aafa:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ab08:	b29b      	uxth	r3, r3
 800ab0a:	1ad3      	subs	r3, r2, r3
 800ab0c:	b29b      	uxth	r3, r3
 800ab0e:	4619      	mov	r1, r3
 800ab10:	6878      	ldr	r0, [r7, #4]
 800ab12:	f000 f907 	bl	800ad24 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ab16:	e0df      	b.n	800acd8 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ab24:	b29b      	uxth	r3, r3
 800ab26:	1ad3      	subs	r3, r2, r3
 800ab28:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ab32:	b29b      	uxth	r3, r3
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	f000 80d1 	beq.w	800acdc <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800ab3a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	f000 80cc 	beq.w	800acdc <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab4c:	e853 3f00 	ldrex	r3, [r3]
 800ab50:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ab52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab54:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ab58:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	461a      	mov	r2, r3
 800ab62:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ab66:	647b      	str	r3, [r7, #68]	@ 0x44
 800ab68:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab6a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ab6c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ab6e:	e841 2300 	strex	r3, r2, [r1]
 800ab72:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ab74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d1e4      	bne.n	800ab44 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	3308      	adds	r3, #8
 800ab80:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab84:	e853 3f00 	ldrex	r3, [r3]
 800ab88:	623b      	str	r3, [r7, #32]
   return(result);
 800ab8a:	6a3b      	ldr	r3, [r7, #32]
 800ab8c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ab90:	f023 0301 	bic.w	r3, r3, #1
 800ab94:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	3308      	adds	r3, #8
 800ab9e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800aba2:	633a      	str	r2, [r7, #48]	@ 0x30
 800aba4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aba6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aba8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800abaa:	e841 2300 	strex	r3, r2, [r1]
 800abae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800abb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d1e1      	bne.n	800ab7a <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	2220      	movs	r2, #32
 800abba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	2200      	movs	r2, #0
 800abc2:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	2200      	movs	r2, #0
 800abc8:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abd0:	693b      	ldr	r3, [r7, #16]
 800abd2:	e853 3f00 	ldrex	r3, [r3]
 800abd6:	60fb      	str	r3, [r7, #12]
   return(result);
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	f023 0310 	bic.w	r3, r3, #16
 800abde:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	461a      	mov	r2, r3
 800abe8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800abec:	61fb      	str	r3, [r7, #28]
 800abee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abf0:	69b9      	ldr	r1, [r7, #24]
 800abf2:	69fa      	ldr	r2, [r7, #28]
 800abf4:	e841 2300 	strex	r3, r2, [r1]
 800abf8:	617b      	str	r3, [r7, #20]
   return(result);
 800abfa:	697b      	ldr	r3, [r7, #20]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d1e4      	bne.n	800abca <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	2202      	movs	r2, #2
 800ac04:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ac06:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ac0a:	4619      	mov	r1, r3
 800ac0c:	6878      	ldr	r0, [r7, #4]
 800ac0e:	f000 f889 	bl	800ad24 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ac12:	e063      	b.n	800acdc <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ac14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ac18:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d00e      	beq.n	800ac3e <HAL_UART_IRQHandler+0x59e>
 800ac20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ac24:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d008      	beq.n	800ac3e <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800ac34:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ac36:	6878      	ldr	r0, [r7, #4]
 800ac38:	f000 fe88 	bl	800b94c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ac3c:	e051      	b.n	800ace2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ac3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ac42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d014      	beq.n	800ac74 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ac4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ac4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d105      	bne.n	800ac62 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ac56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ac5a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d008      	beq.n	800ac74 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d03a      	beq.n	800ace0 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ac6e:	6878      	ldr	r0, [r7, #4]
 800ac70:	4798      	blx	r3
    }
    return;
 800ac72:	e035      	b.n	800ace0 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ac74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ac78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d009      	beq.n	800ac94 <HAL_UART_IRQHandler+0x5f4>
 800ac80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ac84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d003      	beq.n	800ac94 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800ac8c:	6878      	ldr	r0, [r7, #4]
 800ac8e:	f000 fe32 	bl	800b8f6 <UART_EndTransmit_IT>
    return;
 800ac92:	e026      	b.n	800ace2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800ac94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ac98:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d009      	beq.n	800acb4 <HAL_UART_IRQHandler+0x614>
 800aca0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aca4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d003      	beq.n	800acb4 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800acac:	6878      	ldr	r0, [r7, #4]
 800acae:	f000 fe61 	bl	800b974 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800acb2:	e016      	b.n	800ace2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800acb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800acb8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d010      	beq.n	800ace2 <HAL_UART_IRQHandler+0x642>
 800acc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	da0c      	bge.n	800ace2 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800acc8:	6878      	ldr	r0, [r7, #4]
 800acca:	f000 fe49 	bl	800b960 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800acce:	e008      	b.n	800ace2 <HAL_UART_IRQHandler+0x642>
      return;
 800acd0:	bf00      	nop
 800acd2:	e006      	b.n	800ace2 <HAL_UART_IRQHandler+0x642>
    return;
 800acd4:	bf00      	nop
 800acd6:	e004      	b.n	800ace2 <HAL_UART_IRQHandler+0x642>
      return;
 800acd8:	bf00      	nop
 800acda:	e002      	b.n	800ace2 <HAL_UART_IRQHandler+0x642>
      return;
 800acdc:	bf00      	nop
 800acde:	e000      	b.n	800ace2 <HAL_UART_IRQHandler+0x642>
    return;
 800ace0:	bf00      	nop
  }
}
 800ace2:	37e8      	adds	r7, #232	@ 0xe8
 800ace4:	46bd      	mov	sp, r7
 800ace6:	bd80      	pop	{r7, pc}

0800ace8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ace8:	b480      	push	{r7}
 800acea:	b083      	sub	sp, #12
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800acf0:	bf00      	nop
 800acf2:	370c      	adds	r7, #12
 800acf4:	46bd      	mov	sp, r7
 800acf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfa:	4770      	bx	lr

0800acfc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800acfc:	b480      	push	{r7}
 800acfe:	b083      	sub	sp, #12
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800ad04:	bf00      	nop
 800ad06:	370c      	adds	r7, #12
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0e:	4770      	bx	lr

0800ad10 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ad10:	b480      	push	{r7}
 800ad12:	b083      	sub	sp, #12
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ad18:	bf00      	nop
 800ad1a:	370c      	adds	r7, #12
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad22:	4770      	bx	lr

0800ad24 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ad24:	b480      	push	{r7}
 800ad26:	b083      	sub	sp, #12
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
 800ad2c:	460b      	mov	r3, r1
 800ad2e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ad30:	bf00      	nop
 800ad32:	370c      	adds	r7, #12
 800ad34:	46bd      	mov	sp, r7
 800ad36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3a:	4770      	bx	lr

0800ad3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ad3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ad40:	b08c      	sub	sp, #48	@ 0x30
 800ad42:	af00      	add	r7, sp, #0
 800ad44:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ad46:	2300      	movs	r3, #0
 800ad48:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ad4c:	697b      	ldr	r3, [r7, #20]
 800ad4e:	689a      	ldr	r2, [r3, #8]
 800ad50:	697b      	ldr	r3, [r7, #20]
 800ad52:	691b      	ldr	r3, [r3, #16]
 800ad54:	431a      	orrs	r2, r3
 800ad56:	697b      	ldr	r3, [r7, #20]
 800ad58:	695b      	ldr	r3, [r3, #20]
 800ad5a:	431a      	orrs	r2, r3
 800ad5c:	697b      	ldr	r3, [r7, #20]
 800ad5e:	69db      	ldr	r3, [r3, #28]
 800ad60:	4313      	orrs	r3, r2
 800ad62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ad64:	697b      	ldr	r3, [r7, #20]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	681a      	ldr	r2, [r3, #0]
 800ad6a:	4bab      	ldr	r3, [pc, #684]	@ (800b018 <UART_SetConfig+0x2dc>)
 800ad6c:	4013      	ands	r3, r2
 800ad6e:	697a      	ldr	r2, [r7, #20]
 800ad70:	6812      	ldr	r2, [r2, #0]
 800ad72:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ad74:	430b      	orrs	r3, r1
 800ad76:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ad78:	697b      	ldr	r3, [r7, #20]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	685b      	ldr	r3, [r3, #4]
 800ad7e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ad82:	697b      	ldr	r3, [r7, #20]
 800ad84:	68da      	ldr	r2, [r3, #12]
 800ad86:	697b      	ldr	r3, [r7, #20]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	430a      	orrs	r2, r1
 800ad8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ad8e:	697b      	ldr	r3, [r7, #20]
 800ad90:	699b      	ldr	r3, [r3, #24]
 800ad92:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ad94:	697b      	ldr	r3, [r7, #20]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	4aa0      	ldr	r2, [pc, #640]	@ (800b01c <UART_SetConfig+0x2e0>)
 800ad9a:	4293      	cmp	r3, r2
 800ad9c:	d004      	beq.n	800ada8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ad9e:	697b      	ldr	r3, [r7, #20]
 800ada0:	6a1b      	ldr	r3, [r3, #32]
 800ada2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ada4:	4313      	orrs	r3, r2
 800ada6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ada8:	697b      	ldr	r3, [r7, #20]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	689b      	ldr	r3, [r3, #8]
 800adae:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800adb2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800adb6:	697a      	ldr	r2, [r7, #20]
 800adb8:	6812      	ldr	r2, [r2, #0]
 800adba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800adbc:	430b      	orrs	r3, r1
 800adbe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800adc0:	697b      	ldr	r3, [r7, #20]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adc6:	f023 010f 	bic.w	r1, r3, #15
 800adca:	697b      	ldr	r3, [r7, #20]
 800adcc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800adce:	697b      	ldr	r3, [r7, #20]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	430a      	orrs	r2, r1
 800add4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800add6:	697b      	ldr	r3, [r7, #20]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	4a91      	ldr	r2, [pc, #580]	@ (800b020 <UART_SetConfig+0x2e4>)
 800addc:	4293      	cmp	r3, r2
 800adde:	d125      	bne.n	800ae2c <UART_SetConfig+0xf0>
 800ade0:	4b90      	ldr	r3, [pc, #576]	@ (800b024 <UART_SetConfig+0x2e8>)
 800ade2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ade6:	f003 0303 	and.w	r3, r3, #3
 800adea:	2b03      	cmp	r3, #3
 800adec:	d81a      	bhi.n	800ae24 <UART_SetConfig+0xe8>
 800adee:	a201      	add	r2, pc, #4	@ (adr r2, 800adf4 <UART_SetConfig+0xb8>)
 800adf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adf4:	0800ae05 	.word	0x0800ae05
 800adf8:	0800ae15 	.word	0x0800ae15
 800adfc:	0800ae0d 	.word	0x0800ae0d
 800ae00:	0800ae1d 	.word	0x0800ae1d
 800ae04:	2301      	movs	r3, #1
 800ae06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae0a:	e0d6      	b.n	800afba <UART_SetConfig+0x27e>
 800ae0c:	2302      	movs	r3, #2
 800ae0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae12:	e0d2      	b.n	800afba <UART_SetConfig+0x27e>
 800ae14:	2304      	movs	r3, #4
 800ae16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae1a:	e0ce      	b.n	800afba <UART_SetConfig+0x27e>
 800ae1c:	2308      	movs	r3, #8
 800ae1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae22:	e0ca      	b.n	800afba <UART_SetConfig+0x27e>
 800ae24:	2310      	movs	r3, #16
 800ae26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae2a:	e0c6      	b.n	800afba <UART_SetConfig+0x27e>
 800ae2c:	697b      	ldr	r3, [r7, #20]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	4a7d      	ldr	r2, [pc, #500]	@ (800b028 <UART_SetConfig+0x2ec>)
 800ae32:	4293      	cmp	r3, r2
 800ae34:	d138      	bne.n	800aea8 <UART_SetConfig+0x16c>
 800ae36:	4b7b      	ldr	r3, [pc, #492]	@ (800b024 <UART_SetConfig+0x2e8>)
 800ae38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ae3c:	f003 030c 	and.w	r3, r3, #12
 800ae40:	2b0c      	cmp	r3, #12
 800ae42:	d82d      	bhi.n	800aea0 <UART_SetConfig+0x164>
 800ae44:	a201      	add	r2, pc, #4	@ (adr r2, 800ae4c <UART_SetConfig+0x110>)
 800ae46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae4a:	bf00      	nop
 800ae4c:	0800ae81 	.word	0x0800ae81
 800ae50:	0800aea1 	.word	0x0800aea1
 800ae54:	0800aea1 	.word	0x0800aea1
 800ae58:	0800aea1 	.word	0x0800aea1
 800ae5c:	0800ae91 	.word	0x0800ae91
 800ae60:	0800aea1 	.word	0x0800aea1
 800ae64:	0800aea1 	.word	0x0800aea1
 800ae68:	0800aea1 	.word	0x0800aea1
 800ae6c:	0800ae89 	.word	0x0800ae89
 800ae70:	0800aea1 	.word	0x0800aea1
 800ae74:	0800aea1 	.word	0x0800aea1
 800ae78:	0800aea1 	.word	0x0800aea1
 800ae7c:	0800ae99 	.word	0x0800ae99
 800ae80:	2300      	movs	r3, #0
 800ae82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae86:	e098      	b.n	800afba <UART_SetConfig+0x27e>
 800ae88:	2302      	movs	r3, #2
 800ae8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae8e:	e094      	b.n	800afba <UART_SetConfig+0x27e>
 800ae90:	2304      	movs	r3, #4
 800ae92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae96:	e090      	b.n	800afba <UART_SetConfig+0x27e>
 800ae98:	2308      	movs	r3, #8
 800ae9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae9e:	e08c      	b.n	800afba <UART_SetConfig+0x27e>
 800aea0:	2310      	movs	r3, #16
 800aea2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aea6:	e088      	b.n	800afba <UART_SetConfig+0x27e>
 800aea8:	697b      	ldr	r3, [r7, #20]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	4a5f      	ldr	r2, [pc, #380]	@ (800b02c <UART_SetConfig+0x2f0>)
 800aeae:	4293      	cmp	r3, r2
 800aeb0:	d125      	bne.n	800aefe <UART_SetConfig+0x1c2>
 800aeb2:	4b5c      	ldr	r3, [pc, #368]	@ (800b024 <UART_SetConfig+0x2e8>)
 800aeb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aeb8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800aebc:	2b30      	cmp	r3, #48	@ 0x30
 800aebe:	d016      	beq.n	800aeee <UART_SetConfig+0x1b2>
 800aec0:	2b30      	cmp	r3, #48	@ 0x30
 800aec2:	d818      	bhi.n	800aef6 <UART_SetConfig+0x1ba>
 800aec4:	2b20      	cmp	r3, #32
 800aec6:	d00a      	beq.n	800aede <UART_SetConfig+0x1a2>
 800aec8:	2b20      	cmp	r3, #32
 800aeca:	d814      	bhi.n	800aef6 <UART_SetConfig+0x1ba>
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d002      	beq.n	800aed6 <UART_SetConfig+0x19a>
 800aed0:	2b10      	cmp	r3, #16
 800aed2:	d008      	beq.n	800aee6 <UART_SetConfig+0x1aa>
 800aed4:	e00f      	b.n	800aef6 <UART_SetConfig+0x1ba>
 800aed6:	2300      	movs	r3, #0
 800aed8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aedc:	e06d      	b.n	800afba <UART_SetConfig+0x27e>
 800aede:	2302      	movs	r3, #2
 800aee0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aee4:	e069      	b.n	800afba <UART_SetConfig+0x27e>
 800aee6:	2304      	movs	r3, #4
 800aee8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aeec:	e065      	b.n	800afba <UART_SetConfig+0x27e>
 800aeee:	2308      	movs	r3, #8
 800aef0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aef4:	e061      	b.n	800afba <UART_SetConfig+0x27e>
 800aef6:	2310      	movs	r3, #16
 800aef8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aefc:	e05d      	b.n	800afba <UART_SetConfig+0x27e>
 800aefe:	697b      	ldr	r3, [r7, #20]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	4a4b      	ldr	r2, [pc, #300]	@ (800b030 <UART_SetConfig+0x2f4>)
 800af04:	4293      	cmp	r3, r2
 800af06:	d125      	bne.n	800af54 <UART_SetConfig+0x218>
 800af08:	4b46      	ldr	r3, [pc, #280]	@ (800b024 <UART_SetConfig+0x2e8>)
 800af0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800af0e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800af12:	2bc0      	cmp	r3, #192	@ 0xc0
 800af14:	d016      	beq.n	800af44 <UART_SetConfig+0x208>
 800af16:	2bc0      	cmp	r3, #192	@ 0xc0
 800af18:	d818      	bhi.n	800af4c <UART_SetConfig+0x210>
 800af1a:	2b80      	cmp	r3, #128	@ 0x80
 800af1c:	d00a      	beq.n	800af34 <UART_SetConfig+0x1f8>
 800af1e:	2b80      	cmp	r3, #128	@ 0x80
 800af20:	d814      	bhi.n	800af4c <UART_SetConfig+0x210>
 800af22:	2b00      	cmp	r3, #0
 800af24:	d002      	beq.n	800af2c <UART_SetConfig+0x1f0>
 800af26:	2b40      	cmp	r3, #64	@ 0x40
 800af28:	d008      	beq.n	800af3c <UART_SetConfig+0x200>
 800af2a:	e00f      	b.n	800af4c <UART_SetConfig+0x210>
 800af2c:	2300      	movs	r3, #0
 800af2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af32:	e042      	b.n	800afba <UART_SetConfig+0x27e>
 800af34:	2302      	movs	r3, #2
 800af36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af3a:	e03e      	b.n	800afba <UART_SetConfig+0x27e>
 800af3c:	2304      	movs	r3, #4
 800af3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af42:	e03a      	b.n	800afba <UART_SetConfig+0x27e>
 800af44:	2308      	movs	r3, #8
 800af46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af4a:	e036      	b.n	800afba <UART_SetConfig+0x27e>
 800af4c:	2310      	movs	r3, #16
 800af4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af52:	e032      	b.n	800afba <UART_SetConfig+0x27e>
 800af54:	697b      	ldr	r3, [r7, #20]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	4a30      	ldr	r2, [pc, #192]	@ (800b01c <UART_SetConfig+0x2e0>)
 800af5a:	4293      	cmp	r3, r2
 800af5c:	d12a      	bne.n	800afb4 <UART_SetConfig+0x278>
 800af5e:	4b31      	ldr	r3, [pc, #196]	@ (800b024 <UART_SetConfig+0x2e8>)
 800af60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800af64:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800af68:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800af6c:	d01a      	beq.n	800afa4 <UART_SetConfig+0x268>
 800af6e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800af72:	d81b      	bhi.n	800afac <UART_SetConfig+0x270>
 800af74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800af78:	d00c      	beq.n	800af94 <UART_SetConfig+0x258>
 800af7a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800af7e:	d815      	bhi.n	800afac <UART_SetConfig+0x270>
 800af80:	2b00      	cmp	r3, #0
 800af82:	d003      	beq.n	800af8c <UART_SetConfig+0x250>
 800af84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800af88:	d008      	beq.n	800af9c <UART_SetConfig+0x260>
 800af8a:	e00f      	b.n	800afac <UART_SetConfig+0x270>
 800af8c:	2300      	movs	r3, #0
 800af8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af92:	e012      	b.n	800afba <UART_SetConfig+0x27e>
 800af94:	2302      	movs	r3, #2
 800af96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af9a:	e00e      	b.n	800afba <UART_SetConfig+0x27e>
 800af9c:	2304      	movs	r3, #4
 800af9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800afa2:	e00a      	b.n	800afba <UART_SetConfig+0x27e>
 800afa4:	2308      	movs	r3, #8
 800afa6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800afaa:	e006      	b.n	800afba <UART_SetConfig+0x27e>
 800afac:	2310      	movs	r3, #16
 800afae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800afb2:	e002      	b.n	800afba <UART_SetConfig+0x27e>
 800afb4:	2310      	movs	r3, #16
 800afb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800afba:	697b      	ldr	r3, [r7, #20]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	4a17      	ldr	r2, [pc, #92]	@ (800b01c <UART_SetConfig+0x2e0>)
 800afc0:	4293      	cmp	r3, r2
 800afc2:	f040 80a8 	bne.w	800b116 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800afc6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800afca:	2b08      	cmp	r3, #8
 800afcc:	d834      	bhi.n	800b038 <UART_SetConfig+0x2fc>
 800afce:	a201      	add	r2, pc, #4	@ (adr r2, 800afd4 <UART_SetConfig+0x298>)
 800afd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afd4:	0800aff9 	.word	0x0800aff9
 800afd8:	0800b039 	.word	0x0800b039
 800afdc:	0800b001 	.word	0x0800b001
 800afe0:	0800b039 	.word	0x0800b039
 800afe4:	0800b007 	.word	0x0800b007
 800afe8:	0800b039 	.word	0x0800b039
 800afec:	0800b039 	.word	0x0800b039
 800aff0:	0800b039 	.word	0x0800b039
 800aff4:	0800b00f 	.word	0x0800b00f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aff8:	f7fc fc40 	bl	800787c <HAL_RCC_GetPCLK1Freq>
 800affc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800affe:	e021      	b.n	800b044 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b000:	4b0c      	ldr	r3, [pc, #48]	@ (800b034 <UART_SetConfig+0x2f8>)
 800b002:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b004:	e01e      	b.n	800b044 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b006:	f7fc fbcb 	bl	80077a0 <HAL_RCC_GetSysClockFreq>
 800b00a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b00c:	e01a      	b.n	800b044 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b00e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b012:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b014:	e016      	b.n	800b044 <UART_SetConfig+0x308>
 800b016:	bf00      	nop
 800b018:	cfff69f3 	.word	0xcfff69f3
 800b01c:	40008000 	.word	0x40008000
 800b020:	40013800 	.word	0x40013800
 800b024:	40021000 	.word	0x40021000
 800b028:	40004400 	.word	0x40004400
 800b02c:	40004800 	.word	0x40004800
 800b030:	40004c00 	.word	0x40004c00
 800b034:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800b038:	2300      	movs	r3, #0
 800b03a:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b03c:	2301      	movs	r3, #1
 800b03e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b042:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b046:	2b00      	cmp	r3, #0
 800b048:	f000 812a 	beq.w	800b2a0 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b04c:	697b      	ldr	r3, [r7, #20]
 800b04e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b050:	4a9e      	ldr	r2, [pc, #632]	@ (800b2cc <UART_SetConfig+0x590>)
 800b052:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b056:	461a      	mov	r2, r3
 800b058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b05a:	fbb3 f3f2 	udiv	r3, r3, r2
 800b05e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b060:	697b      	ldr	r3, [r7, #20]
 800b062:	685a      	ldr	r2, [r3, #4]
 800b064:	4613      	mov	r3, r2
 800b066:	005b      	lsls	r3, r3, #1
 800b068:	4413      	add	r3, r2
 800b06a:	69ba      	ldr	r2, [r7, #24]
 800b06c:	429a      	cmp	r2, r3
 800b06e:	d305      	bcc.n	800b07c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b070:	697b      	ldr	r3, [r7, #20]
 800b072:	685b      	ldr	r3, [r3, #4]
 800b074:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b076:	69ba      	ldr	r2, [r7, #24]
 800b078:	429a      	cmp	r2, r3
 800b07a:	d903      	bls.n	800b084 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800b07c:	2301      	movs	r3, #1
 800b07e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b082:	e10d      	b.n	800b2a0 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b086:	2200      	movs	r2, #0
 800b088:	60bb      	str	r3, [r7, #8]
 800b08a:	60fa      	str	r2, [r7, #12]
 800b08c:	697b      	ldr	r3, [r7, #20]
 800b08e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b090:	4a8e      	ldr	r2, [pc, #568]	@ (800b2cc <UART_SetConfig+0x590>)
 800b092:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b096:	b29b      	uxth	r3, r3
 800b098:	2200      	movs	r2, #0
 800b09a:	603b      	str	r3, [r7, #0]
 800b09c:	607a      	str	r2, [r7, #4]
 800b09e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b0a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b0a6:	f7f5 fd93 	bl	8000bd0 <__aeabi_uldivmod>
 800b0aa:	4602      	mov	r2, r0
 800b0ac:	460b      	mov	r3, r1
 800b0ae:	4610      	mov	r0, r2
 800b0b0:	4619      	mov	r1, r3
 800b0b2:	f04f 0200 	mov.w	r2, #0
 800b0b6:	f04f 0300 	mov.w	r3, #0
 800b0ba:	020b      	lsls	r3, r1, #8
 800b0bc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b0c0:	0202      	lsls	r2, r0, #8
 800b0c2:	6979      	ldr	r1, [r7, #20]
 800b0c4:	6849      	ldr	r1, [r1, #4]
 800b0c6:	0849      	lsrs	r1, r1, #1
 800b0c8:	2000      	movs	r0, #0
 800b0ca:	460c      	mov	r4, r1
 800b0cc:	4605      	mov	r5, r0
 800b0ce:	eb12 0804 	adds.w	r8, r2, r4
 800b0d2:	eb43 0905 	adc.w	r9, r3, r5
 800b0d6:	697b      	ldr	r3, [r7, #20]
 800b0d8:	685b      	ldr	r3, [r3, #4]
 800b0da:	2200      	movs	r2, #0
 800b0dc:	469a      	mov	sl, r3
 800b0de:	4693      	mov	fp, r2
 800b0e0:	4652      	mov	r2, sl
 800b0e2:	465b      	mov	r3, fp
 800b0e4:	4640      	mov	r0, r8
 800b0e6:	4649      	mov	r1, r9
 800b0e8:	f7f5 fd72 	bl	8000bd0 <__aeabi_uldivmod>
 800b0ec:	4602      	mov	r2, r0
 800b0ee:	460b      	mov	r3, r1
 800b0f0:	4613      	mov	r3, r2
 800b0f2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b0f4:	6a3b      	ldr	r3, [r7, #32]
 800b0f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b0fa:	d308      	bcc.n	800b10e <UART_SetConfig+0x3d2>
 800b0fc:	6a3b      	ldr	r3, [r7, #32]
 800b0fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b102:	d204      	bcs.n	800b10e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800b104:	697b      	ldr	r3, [r7, #20]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	6a3a      	ldr	r2, [r7, #32]
 800b10a:	60da      	str	r2, [r3, #12]
 800b10c:	e0c8      	b.n	800b2a0 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800b10e:	2301      	movs	r3, #1
 800b110:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b114:	e0c4      	b.n	800b2a0 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b116:	697b      	ldr	r3, [r7, #20]
 800b118:	69db      	ldr	r3, [r3, #28]
 800b11a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b11e:	d167      	bne.n	800b1f0 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800b120:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b124:	2b08      	cmp	r3, #8
 800b126:	d828      	bhi.n	800b17a <UART_SetConfig+0x43e>
 800b128:	a201      	add	r2, pc, #4	@ (adr r2, 800b130 <UART_SetConfig+0x3f4>)
 800b12a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b12e:	bf00      	nop
 800b130:	0800b155 	.word	0x0800b155
 800b134:	0800b15d 	.word	0x0800b15d
 800b138:	0800b165 	.word	0x0800b165
 800b13c:	0800b17b 	.word	0x0800b17b
 800b140:	0800b16b 	.word	0x0800b16b
 800b144:	0800b17b 	.word	0x0800b17b
 800b148:	0800b17b 	.word	0x0800b17b
 800b14c:	0800b17b 	.word	0x0800b17b
 800b150:	0800b173 	.word	0x0800b173
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b154:	f7fc fb92 	bl	800787c <HAL_RCC_GetPCLK1Freq>
 800b158:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b15a:	e014      	b.n	800b186 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b15c:	f7fc fba4 	bl	80078a8 <HAL_RCC_GetPCLK2Freq>
 800b160:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b162:	e010      	b.n	800b186 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b164:	4b5a      	ldr	r3, [pc, #360]	@ (800b2d0 <UART_SetConfig+0x594>)
 800b166:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b168:	e00d      	b.n	800b186 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b16a:	f7fc fb19 	bl	80077a0 <HAL_RCC_GetSysClockFreq>
 800b16e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b170:	e009      	b.n	800b186 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b172:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b176:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b178:	e005      	b.n	800b186 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800b17a:	2300      	movs	r3, #0
 800b17c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b17e:	2301      	movs	r3, #1
 800b180:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b184:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b188:	2b00      	cmp	r3, #0
 800b18a:	f000 8089 	beq.w	800b2a0 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b18e:	697b      	ldr	r3, [r7, #20]
 800b190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b192:	4a4e      	ldr	r2, [pc, #312]	@ (800b2cc <UART_SetConfig+0x590>)
 800b194:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b198:	461a      	mov	r2, r3
 800b19a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b19c:	fbb3 f3f2 	udiv	r3, r3, r2
 800b1a0:	005a      	lsls	r2, r3, #1
 800b1a2:	697b      	ldr	r3, [r7, #20]
 800b1a4:	685b      	ldr	r3, [r3, #4]
 800b1a6:	085b      	lsrs	r3, r3, #1
 800b1a8:	441a      	add	r2, r3
 800b1aa:	697b      	ldr	r3, [r7, #20]
 800b1ac:	685b      	ldr	r3, [r3, #4]
 800b1ae:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1b2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b1b4:	6a3b      	ldr	r3, [r7, #32]
 800b1b6:	2b0f      	cmp	r3, #15
 800b1b8:	d916      	bls.n	800b1e8 <UART_SetConfig+0x4ac>
 800b1ba:	6a3b      	ldr	r3, [r7, #32]
 800b1bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b1c0:	d212      	bcs.n	800b1e8 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b1c2:	6a3b      	ldr	r3, [r7, #32]
 800b1c4:	b29b      	uxth	r3, r3
 800b1c6:	f023 030f 	bic.w	r3, r3, #15
 800b1ca:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b1cc:	6a3b      	ldr	r3, [r7, #32]
 800b1ce:	085b      	lsrs	r3, r3, #1
 800b1d0:	b29b      	uxth	r3, r3
 800b1d2:	f003 0307 	and.w	r3, r3, #7
 800b1d6:	b29a      	uxth	r2, r3
 800b1d8:	8bfb      	ldrh	r3, [r7, #30]
 800b1da:	4313      	orrs	r3, r2
 800b1dc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800b1de:	697b      	ldr	r3, [r7, #20]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	8bfa      	ldrh	r2, [r7, #30]
 800b1e4:	60da      	str	r2, [r3, #12]
 800b1e6:	e05b      	b.n	800b2a0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800b1e8:	2301      	movs	r3, #1
 800b1ea:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b1ee:	e057      	b.n	800b2a0 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b1f0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b1f4:	2b08      	cmp	r3, #8
 800b1f6:	d828      	bhi.n	800b24a <UART_SetConfig+0x50e>
 800b1f8:	a201      	add	r2, pc, #4	@ (adr r2, 800b200 <UART_SetConfig+0x4c4>)
 800b1fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1fe:	bf00      	nop
 800b200:	0800b225 	.word	0x0800b225
 800b204:	0800b22d 	.word	0x0800b22d
 800b208:	0800b235 	.word	0x0800b235
 800b20c:	0800b24b 	.word	0x0800b24b
 800b210:	0800b23b 	.word	0x0800b23b
 800b214:	0800b24b 	.word	0x0800b24b
 800b218:	0800b24b 	.word	0x0800b24b
 800b21c:	0800b24b 	.word	0x0800b24b
 800b220:	0800b243 	.word	0x0800b243
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b224:	f7fc fb2a 	bl	800787c <HAL_RCC_GetPCLK1Freq>
 800b228:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b22a:	e014      	b.n	800b256 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b22c:	f7fc fb3c 	bl	80078a8 <HAL_RCC_GetPCLK2Freq>
 800b230:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b232:	e010      	b.n	800b256 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b234:	4b26      	ldr	r3, [pc, #152]	@ (800b2d0 <UART_SetConfig+0x594>)
 800b236:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b238:	e00d      	b.n	800b256 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b23a:	f7fc fab1 	bl	80077a0 <HAL_RCC_GetSysClockFreq>
 800b23e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b240:	e009      	b.n	800b256 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b242:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b246:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b248:	e005      	b.n	800b256 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800b24a:	2300      	movs	r3, #0
 800b24c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b24e:	2301      	movs	r3, #1
 800b250:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b254:	bf00      	nop
    }

    if (pclk != 0U)
 800b256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d021      	beq.n	800b2a0 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b25c:	697b      	ldr	r3, [r7, #20]
 800b25e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b260:	4a1a      	ldr	r2, [pc, #104]	@ (800b2cc <UART_SetConfig+0x590>)
 800b262:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b266:	461a      	mov	r2, r3
 800b268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b26a:	fbb3 f2f2 	udiv	r2, r3, r2
 800b26e:	697b      	ldr	r3, [r7, #20]
 800b270:	685b      	ldr	r3, [r3, #4]
 800b272:	085b      	lsrs	r3, r3, #1
 800b274:	441a      	add	r2, r3
 800b276:	697b      	ldr	r3, [r7, #20]
 800b278:	685b      	ldr	r3, [r3, #4]
 800b27a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b27e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b280:	6a3b      	ldr	r3, [r7, #32]
 800b282:	2b0f      	cmp	r3, #15
 800b284:	d909      	bls.n	800b29a <UART_SetConfig+0x55e>
 800b286:	6a3b      	ldr	r3, [r7, #32]
 800b288:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b28c:	d205      	bcs.n	800b29a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b28e:	6a3b      	ldr	r3, [r7, #32]
 800b290:	b29a      	uxth	r2, r3
 800b292:	697b      	ldr	r3, [r7, #20]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	60da      	str	r2, [r3, #12]
 800b298:	e002      	b.n	800b2a0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800b29a:	2301      	movs	r3, #1
 800b29c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b2a0:	697b      	ldr	r3, [r7, #20]
 800b2a2:	2201      	movs	r2, #1
 800b2a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b2a8:	697b      	ldr	r3, [r7, #20]
 800b2aa:	2201      	movs	r2, #1
 800b2ac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b2b0:	697b      	ldr	r3, [r7, #20]
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b2b6:	697b      	ldr	r3, [r7, #20]
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b2bc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	3730      	adds	r7, #48	@ 0x30
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b2ca:	bf00      	nop
 800b2cc:	0800cd00 	.word	0x0800cd00
 800b2d0:	00f42400 	.word	0x00f42400

0800b2d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b2d4:	b480      	push	{r7}
 800b2d6:	b083      	sub	sp, #12
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2e0:	f003 0308 	and.w	r3, r3, #8
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d00a      	beq.n	800b2fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	685b      	ldr	r3, [r3, #4]
 800b2ee:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	430a      	orrs	r2, r1
 800b2fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b302:	f003 0301 	and.w	r3, r3, #1
 800b306:	2b00      	cmp	r3, #0
 800b308:	d00a      	beq.n	800b320 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	685b      	ldr	r3, [r3, #4]
 800b310:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	430a      	orrs	r2, r1
 800b31e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b324:	f003 0302 	and.w	r3, r3, #2
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d00a      	beq.n	800b342 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	685b      	ldr	r3, [r3, #4]
 800b332:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	430a      	orrs	r2, r1
 800b340:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b346:	f003 0304 	and.w	r3, r3, #4
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d00a      	beq.n	800b364 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	685b      	ldr	r3, [r3, #4]
 800b354:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	430a      	orrs	r2, r1
 800b362:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b368:	f003 0310 	and.w	r3, r3, #16
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d00a      	beq.n	800b386 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	689b      	ldr	r3, [r3, #8]
 800b376:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	430a      	orrs	r2, r1
 800b384:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b38a:	f003 0320 	and.w	r3, r3, #32
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d00a      	beq.n	800b3a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	689b      	ldr	r3, [r3, #8]
 800b398:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	430a      	orrs	r2, r1
 800b3a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d01a      	beq.n	800b3ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	685b      	ldr	r3, [r3, #4]
 800b3ba:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	430a      	orrs	r2, r1
 800b3c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b3ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b3d2:	d10a      	bne.n	800b3ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	685b      	ldr	r3, [r3, #4]
 800b3da:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	430a      	orrs	r2, r1
 800b3e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d00a      	beq.n	800b40c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	685b      	ldr	r3, [r3, #4]
 800b3fc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	430a      	orrs	r2, r1
 800b40a:	605a      	str	r2, [r3, #4]
  }
}
 800b40c:	bf00      	nop
 800b40e:	370c      	adds	r7, #12
 800b410:	46bd      	mov	sp, r7
 800b412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b416:	4770      	bx	lr

0800b418 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b418:	b580      	push	{r7, lr}
 800b41a:	b098      	sub	sp, #96	@ 0x60
 800b41c:	af02      	add	r7, sp, #8
 800b41e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	2200      	movs	r2, #0
 800b424:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b428:	f7f7 f89c 	bl	8002564 <HAL_GetTick>
 800b42c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	f003 0308 	and.w	r3, r3, #8
 800b438:	2b08      	cmp	r3, #8
 800b43a:	d12f      	bne.n	800b49c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b43c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b440:	9300      	str	r3, [sp, #0]
 800b442:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b444:	2200      	movs	r2, #0
 800b446:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b44a:	6878      	ldr	r0, [r7, #4]
 800b44c:	f000 f88e 	bl	800b56c <UART_WaitOnFlagUntilTimeout>
 800b450:	4603      	mov	r3, r0
 800b452:	2b00      	cmp	r3, #0
 800b454:	d022      	beq.n	800b49c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b45c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b45e:	e853 3f00 	ldrex	r3, [r3]
 800b462:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b464:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b466:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b46a:	653b      	str	r3, [r7, #80]	@ 0x50
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	461a      	mov	r2, r3
 800b472:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b474:	647b      	str	r3, [r7, #68]	@ 0x44
 800b476:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b478:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b47a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b47c:	e841 2300 	strex	r3, r2, [r1]
 800b480:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b482:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b484:	2b00      	cmp	r3, #0
 800b486:	d1e6      	bne.n	800b456 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	2220      	movs	r2, #32
 800b48c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	2200      	movs	r2, #0
 800b494:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b498:	2303      	movs	r3, #3
 800b49a:	e063      	b.n	800b564 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	f003 0304 	and.w	r3, r3, #4
 800b4a6:	2b04      	cmp	r3, #4
 800b4a8:	d149      	bne.n	800b53e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b4aa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b4ae:	9300      	str	r3, [sp, #0]
 800b4b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b4b8:	6878      	ldr	r0, [r7, #4]
 800b4ba:	f000 f857 	bl	800b56c <UART_WaitOnFlagUntilTimeout>
 800b4be:	4603      	mov	r3, r0
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d03c      	beq.n	800b53e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4cc:	e853 3f00 	ldrex	r3, [r3]
 800b4d0:	623b      	str	r3, [r7, #32]
   return(result);
 800b4d2:	6a3b      	ldr	r3, [r7, #32]
 800b4d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b4d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	461a      	mov	r2, r3
 800b4e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b4e2:	633b      	str	r3, [r7, #48]	@ 0x30
 800b4e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b4e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b4ea:	e841 2300 	strex	r3, r2, [r1]
 800b4ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b4f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d1e6      	bne.n	800b4c4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	3308      	adds	r3, #8
 800b4fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4fe:	693b      	ldr	r3, [r7, #16]
 800b500:	e853 3f00 	ldrex	r3, [r3]
 800b504:	60fb      	str	r3, [r7, #12]
   return(result);
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	f023 0301 	bic.w	r3, r3, #1
 800b50c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	3308      	adds	r3, #8
 800b514:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b516:	61fa      	str	r2, [r7, #28]
 800b518:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b51a:	69b9      	ldr	r1, [r7, #24]
 800b51c:	69fa      	ldr	r2, [r7, #28]
 800b51e:	e841 2300 	strex	r3, r2, [r1]
 800b522:	617b      	str	r3, [r7, #20]
   return(result);
 800b524:	697b      	ldr	r3, [r7, #20]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d1e5      	bne.n	800b4f6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	2220      	movs	r2, #32
 800b52e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	2200      	movs	r2, #0
 800b536:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b53a:	2303      	movs	r3, #3
 800b53c:	e012      	b.n	800b564 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	2220      	movs	r2, #32
 800b542:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	2220      	movs	r2, #32
 800b54a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	2200      	movs	r2, #0
 800b552:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	2200      	movs	r2, #0
 800b558:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	2200      	movs	r2, #0
 800b55e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b562:	2300      	movs	r3, #0
}
 800b564:	4618      	mov	r0, r3
 800b566:	3758      	adds	r7, #88	@ 0x58
 800b568:	46bd      	mov	sp, r7
 800b56a:	bd80      	pop	{r7, pc}

0800b56c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b084      	sub	sp, #16
 800b570:	af00      	add	r7, sp, #0
 800b572:	60f8      	str	r0, [r7, #12]
 800b574:	60b9      	str	r1, [r7, #8]
 800b576:	603b      	str	r3, [r7, #0]
 800b578:	4613      	mov	r3, r2
 800b57a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b57c:	e04f      	b.n	800b61e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b57e:	69bb      	ldr	r3, [r7, #24]
 800b580:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b584:	d04b      	beq.n	800b61e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b586:	f7f6 ffed 	bl	8002564 <HAL_GetTick>
 800b58a:	4602      	mov	r2, r0
 800b58c:	683b      	ldr	r3, [r7, #0]
 800b58e:	1ad3      	subs	r3, r2, r3
 800b590:	69ba      	ldr	r2, [r7, #24]
 800b592:	429a      	cmp	r2, r3
 800b594:	d302      	bcc.n	800b59c <UART_WaitOnFlagUntilTimeout+0x30>
 800b596:	69bb      	ldr	r3, [r7, #24]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d101      	bne.n	800b5a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b59c:	2303      	movs	r3, #3
 800b59e:	e04e      	b.n	800b63e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	f003 0304 	and.w	r3, r3, #4
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d037      	beq.n	800b61e <UART_WaitOnFlagUntilTimeout+0xb2>
 800b5ae:	68bb      	ldr	r3, [r7, #8]
 800b5b0:	2b80      	cmp	r3, #128	@ 0x80
 800b5b2:	d034      	beq.n	800b61e <UART_WaitOnFlagUntilTimeout+0xb2>
 800b5b4:	68bb      	ldr	r3, [r7, #8]
 800b5b6:	2b40      	cmp	r3, #64	@ 0x40
 800b5b8:	d031      	beq.n	800b61e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	69db      	ldr	r3, [r3, #28]
 800b5c0:	f003 0308 	and.w	r3, r3, #8
 800b5c4:	2b08      	cmp	r3, #8
 800b5c6:	d110      	bne.n	800b5ea <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	2208      	movs	r2, #8
 800b5ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b5d0:	68f8      	ldr	r0, [r7, #12]
 800b5d2:	f000 f879 	bl	800b6c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	2208      	movs	r2, #8
 800b5da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b5e6:	2301      	movs	r3, #1
 800b5e8:	e029      	b.n	800b63e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	69db      	ldr	r3, [r3, #28]
 800b5f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b5f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b5f8:	d111      	bne.n	800b61e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b602:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b604:	68f8      	ldr	r0, [r7, #12]
 800b606:	f000 f85f 	bl	800b6c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	2220      	movs	r2, #32
 800b60e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	2200      	movs	r2, #0
 800b616:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b61a:	2303      	movs	r3, #3
 800b61c:	e00f      	b.n	800b63e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	69da      	ldr	r2, [r3, #28]
 800b624:	68bb      	ldr	r3, [r7, #8]
 800b626:	4013      	ands	r3, r2
 800b628:	68ba      	ldr	r2, [r7, #8]
 800b62a:	429a      	cmp	r2, r3
 800b62c:	bf0c      	ite	eq
 800b62e:	2301      	moveq	r3, #1
 800b630:	2300      	movne	r3, #0
 800b632:	b2db      	uxtb	r3, r3
 800b634:	461a      	mov	r2, r3
 800b636:	79fb      	ldrb	r3, [r7, #7]
 800b638:	429a      	cmp	r2, r3
 800b63a:	d0a0      	beq.n	800b57e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b63c:	2300      	movs	r3, #0
}
 800b63e:	4618      	mov	r0, r3
 800b640:	3710      	adds	r7, #16
 800b642:	46bd      	mov	sp, r7
 800b644:	bd80      	pop	{r7, pc}

0800b646 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b646:	b480      	push	{r7}
 800b648:	b08f      	sub	sp, #60	@ 0x3c
 800b64a:	af00      	add	r7, sp, #0
 800b64c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b654:	6a3b      	ldr	r3, [r7, #32]
 800b656:	e853 3f00 	ldrex	r3, [r3]
 800b65a:	61fb      	str	r3, [r7, #28]
   return(result);
 800b65c:	69fb      	ldr	r3, [r7, #28]
 800b65e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b662:	637b      	str	r3, [r7, #52]	@ 0x34
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	461a      	mov	r2, r3
 800b66a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b66c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b66e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b670:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b672:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b674:	e841 2300 	strex	r3, r2, [r1]
 800b678:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b67a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d1e6      	bne.n	800b64e <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	3308      	adds	r3, #8
 800b686:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	e853 3f00 	ldrex	r3, [r3]
 800b68e:	60bb      	str	r3, [r7, #8]
   return(result);
 800b690:	68bb      	ldr	r3, [r7, #8]
 800b692:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800b696:	633b      	str	r3, [r7, #48]	@ 0x30
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	3308      	adds	r3, #8
 800b69e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b6a0:	61ba      	str	r2, [r7, #24]
 800b6a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6a4:	6979      	ldr	r1, [r7, #20]
 800b6a6:	69ba      	ldr	r2, [r7, #24]
 800b6a8:	e841 2300 	strex	r3, r2, [r1]
 800b6ac:	613b      	str	r3, [r7, #16]
   return(result);
 800b6ae:	693b      	ldr	r3, [r7, #16]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d1e5      	bne.n	800b680 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	2220      	movs	r2, #32
 800b6b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800b6bc:	bf00      	nop
 800b6be:	373c      	adds	r7, #60	@ 0x3c
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c6:	4770      	bx	lr

0800b6c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b6c8:	b480      	push	{r7}
 800b6ca:	b095      	sub	sp, #84	@ 0x54
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6d8:	e853 3f00 	ldrex	r3, [r3]
 800b6dc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b6de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b6e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	461a      	mov	r2, r3
 800b6ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b6ee:	643b      	str	r3, [r7, #64]	@ 0x40
 800b6f0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6f2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b6f4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b6f6:	e841 2300 	strex	r3, r2, [r1]
 800b6fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b6fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d1e6      	bne.n	800b6d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	3308      	adds	r3, #8
 800b708:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b70a:	6a3b      	ldr	r3, [r7, #32]
 800b70c:	e853 3f00 	ldrex	r3, [r3]
 800b710:	61fb      	str	r3, [r7, #28]
   return(result);
 800b712:	69fb      	ldr	r3, [r7, #28]
 800b714:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b718:	f023 0301 	bic.w	r3, r3, #1
 800b71c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	3308      	adds	r3, #8
 800b724:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b726:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b728:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b72a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b72c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b72e:	e841 2300 	strex	r3, r2, [r1]
 800b732:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b736:	2b00      	cmp	r3, #0
 800b738:	d1e3      	bne.n	800b702 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b73e:	2b01      	cmp	r3, #1
 800b740:	d118      	bne.n	800b774 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	e853 3f00 	ldrex	r3, [r3]
 800b74e:	60bb      	str	r3, [r7, #8]
   return(result);
 800b750:	68bb      	ldr	r3, [r7, #8]
 800b752:	f023 0310 	bic.w	r3, r3, #16
 800b756:	647b      	str	r3, [r7, #68]	@ 0x44
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	461a      	mov	r2, r3
 800b75e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b760:	61bb      	str	r3, [r7, #24]
 800b762:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b764:	6979      	ldr	r1, [r7, #20]
 800b766:	69ba      	ldr	r2, [r7, #24]
 800b768:	e841 2300 	strex	r3, r2, [r1]
 800b76c:	613b      	str	r3, [r7, #16]
   return(result);
 800b76e:	693b      	ldr	r3, [r7, #16]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d1e6      	bne.n	800b742 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	2220      	movs	r2, #32
 800b778:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	2200      	movs	r2, #0
 800b780:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	2200      	movs	r2, #0
 800b786:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b788:	bf00      	nop
 800b78a:	3754      	adds	r7, #84	@ 0x54
 800b78c:	46bd      	mov	sp, r7
 800b78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b792:	4770      	bx	lr

0800b794 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b794:	b580      	push	{r7, lr}
 800b796:	b090      	sub	sp, #64	@ 0x40
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7a0:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	f003 0320 	and.w	r3, r3, #32
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d137      	bne.n	800b820 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800b7b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b7b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	3308      	adds	r3, #8
 800b7be:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7c2:	e853 3f00 	ldrex	r3, [r3]
 800b7c6:	623b      	str	r3, [r7, #32]
   return(result);
 800b7c8:	6a3b      	ldr	r3, [r7, #32]
 800b7ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b7ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b7d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	3308      	adds	r3, #8
 800b7d6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b7d8:	633a      	str	r2, [r7, #48]	@ 0x30
 800b7da:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7dc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b7de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b7e0:	e841 2300 	strex	r3, r2, [r1]
 800b7e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b7e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d1e5      	bne.n	800b7b8 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b7ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7f2:	693b      	ldr	r3, [r7, #16]
 800b7f4:	e853 3f00 	ldrex	r3, [r3]
 800b7f8:	60fb      	str	r3, [r7, #12]
   return(result);
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b800:	637b      	str	r3, [r7, #52]	@ 0x34
 800b802:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	461a      	mov	r2, r3
 800b808:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b80a:	61fb      	str	r3, [r7, #28]
 800b80c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b80e:	69b9      	ldr	r1, [r7, #24]
 800b810:	69fa      	ldr	r2, [r7, #28]
 800b812:	e841 2300 	strex	r3, r2, [r1]
 800b816:	617b      	str	r3, [r7, #20]
   return(result);
 800b818:	697b      	ldr	r3, [r7, #20]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d1e6      	bne.n	800b7ec <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b81e:	e002      	b.n	800b826 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800b820:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800b822:	f7ff fa61 	bl	800ace8 <HAL_UART_TxCpltCallback>
}
 800b826:	bf00      	nop
 800b828:	3740      	adds	r7, #64	@ 0x40
 800b82a:	46bd      	mov	sp, r7
 800b82c:	bd80      	pop	{r7, pc}

0800b82e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b82e:	b580      	push	{r7, lr}
 800b830:	b084      	sub	sp, #16
 800b832:	af00      	add	r7, sp, #0
 800b834:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b83a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800b83c:	68f8      	ldr	r0, [r7, #12]
 800b83e:	f7ff fa5d 	bl	800acfc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b842:	bf00      	nop
 800b844:	3710      	adds	r7, #16
 800b846:	46bd      	mov	sp, r7
 800b848:	bd80      	pop	{r7, pc}

0800b84a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b84a:	b580      	push	{r7, lr}
 800b84c:	b086      	sub	sp, #24
 800b84e:	af00      	add	r7, sp, #0
 800b850:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b856:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b858:	697b      	ldr	r3, [r7, #20]
 800b85a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b85e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b860:	697b      	ldr	r3, [r7, #20]
 800b862:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b866:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b868:	697b      	ldr	r3, [r7, #20]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	689b      	ldr	r3, [r3, #8]
 800b86e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b872:	2b80      	cmp	r3, #128	@ 0x80
 800b874:	d109      	bne.n	800b88a <UART_DMAError+0x40>
 800b876:	693b      	ldr	r3, [r7, #16]
 800b878:	2b21      	cmp	r3, #33	@ 0x21
 800b87a:	d106      	bne.n	800b88a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b87c:	697b      	ldr	r3, [r7, #20]
 800b87e:	2200      	movs	r2, #0
 800b880:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800b884:	6978      	ldr	r0, [r7, #20]
 800b886:	f7ff fede 	bl	800b646 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b88a:	697b      	ldr	r3, [r7, #20]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	689b      	ldr	r3, [r3, #8]
 800b890:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b894:	2b40      	cmp	r3, #64	@ 0x40
 800b896:	d109      	bne.n	800b8ac <UART_DMAError+0x62>
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	2b22      	cmp	r3, #34	@ 0x22
 800b89c:	d106      	bne.n	800b8ac <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b89e:	697b      	ldr	r3, [r7, #20]
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800b8a6:	6978      	ldr	r0, [r7, #20]
 800b8a8:	f7ff ff0e 	bl	800b6c8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b8ac:	697b      	ldr	r3, [r7, #20]
 800b8ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b8b2:	f043 0210 	orr.w	r2, r3, #16
 800b8b6:	697b      	ldr	r3, [r7, #20]
 800b8b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b8bc:	6978      	ldr	r0, [r7, #20]
 800b8be:	f7ff fa27 	bl	800ad10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b8c2:	bf00      	nop
 800b8c4:	3718      	adds	r7, #24
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	bd80      	pop	{r7, pc}

0800b8ca <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b8ca:	b580      	push	{r7, lr}
 800b8cc:	b084      	sub	sp, #16
 800b8ce:	af00      	add	r7, sp, #0
 800b8d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	2200      	movs	r2, #0
 800b8dc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	2200      	movs	r2, #0
 800b8e4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b8e8:	68f8      	ldr	r0, [r7, #12]
 800b8ea:	f7ff fa11 	bl	800ad10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b8ee:	bf00      	nop
 800b8f0:	3710      	adds	r7, #16
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bd80      	pop	{r7, pc}

0800b8f6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b8f6:	b580      	push	{r7, lr}
 800b8f8:	b088      	sub	sp, #32
 800b8fa:	af00      	add	r7, sp, #0
 800b8fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	e853 3f00 	ldrex	r3, [r3]
 800b90a:	60bb      	str	r3, [r7, #8]
   return(result);
 800b90c:	68bb      	ldr	r3, [r7, #8]
 800b90e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b912:	61fb      	str	r3, [r7, #28]
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	461a      	mov	r2, r3
 800b91a:	69fb      	ldr	r3, [r7, #28]
 800b91c:	61bb      	str	r3, [r7, #24]
 800b91e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b920:	6979      	ldr	r1, [r7, #20]
 800b922:	69ba      	ldr	r2, [r7, #24]
 800b924:	e841 2300 	strex	r3, r2, [r1]
 800b928:	613b      	str	r3, [r7, #16]
   return(result);
 800b92a:	693b      	ldr	r3, [r7, #16]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d1e6      	bne.n	800b8fe <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	2220      	movs	r2, #32
 800b934:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	2200      	movs	r2, #0
 800b93c:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b93e:	6878      	ldr	r0, [r7, #4]
 800b940:	f7ff f9d2 	bl	800ace8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b944:	bf00      	nop
 800b946:	3720      	adds	r7, #32
 800b948:	46bd      	mov	sp, r7
 800b94a:	bd80      	pop	{r7, pc}

0800b94c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b94c:	b480      	push	{r7}
 800b94e:	b083      	sub	sp, #12
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b954:	bf00      	nop
 800b956:	370c      	adds	r7, #12
 800b958:	46bd      	mov	sp, r7
 800b95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95e:	4770      	bx	lr

0800b960 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b960:	b480      	push	{r7}
 800b962:	b083      	sub	sp, #12
 800b964:	af00      	add	r7, sp, #0
 800b966:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b968:	bf00      	nop
 800b96a:	370c      	adds	r7, #12
 800b96c:	46bd      	mov	sp, r7
 800b96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b972:	4770      	bx	lr

0800b974 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b974:	b480      	push	{r7}
 800b976:	b083      	sub	sp, #12
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b97c:	bf00      	nop
 800b97e:	370c      	adds	r7, #12
 800b980:	46bd      	mov	sp, r7
 800b982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b986:	4770      	bx	lr

0800b988 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b988:	b480      	push	{r7}
 800b98a:	b085      	sub	sp, #20
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b996:	2b01      	cmp	r3, #1
 800b998:	d101      	bne.n	800b99e <HAL_UARTEx_DisableFifoMode+0x16>
 800b99a:	2302      	movs	r3, #2
 800b99c:	e027      	b.n	800b9ee <HAL_UARTEx_DisableFifoMode+0x66>
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	2201      	movs	r2, #1
 800b9a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	2224      	movs	r2, #36	@ 0x24
 800b9aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	681a      	ldr	r2, [r3, #0]
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	f022 0201 	bic.w	r2, r2, #1
 800b9c4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b9cc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	68fa      	ldr	r2, [r7, #12]
 800b9da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	2220      	movs	r2, #32
 800b9e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b9ec:	2300      	movs	r3, #0
}
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	3714      	adds	r7, #20
 800b9f2:	46bd      	mov	sp, r7
 800b9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f8:	4770      	bx	lr

0800b9fa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b9fa:	b580      	push	{r7, lr}
 800b9fc:	b084      	sub	sp, #16
 800b9fe:	af00      	add	r7, sp, #0
 800ba00:	6078      	str	r0, [r7, #4]
 800ba02:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ba0a:	2b01      	cmp	r3, #1
 800ba0c:	d101      	bne.n	800ba12 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ba0e:	2302      	movs	r3, #2
 800ba10:	e02d      	b.n	800ba6e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	2201      	movs	r2, #1
 800ba16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	2224      	movs	r2, #36	@ 0x24
 800ba1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	681a      	ldr	r2, [r3, #0]
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	f022 0201 	bic.w	r2, r2, #1
 800ba38:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	689b      	ldr	r3, [r3, #8]
 800ba40:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	683a      	ldr	r2, [r7, #0]
 800ba4a:	430a      	orrs	r2, r1
 800ba4c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ba4e:	6878      	ldr	r0, [r7, #4]
 800ba50:	f000 f850 	bl	800baf4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	68fa      	ldr	r2, [r7, #12]
 800ba5a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	2220      	movs	r2, #32
 800ba60:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	2200      	movs	r2, #0
 800ba68:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ba6c:	2300      	movs	r3, #0
}
 800ba6e:	4618      	mov	r0, r3
 800ba70:	3710      	adds	r7, #16
 800ba72:	46bd      	mov	sp, r7
 800ba74:	bd80      	pop	{r7, pc}

0800ba76 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ba76:	b580      	push	{r7, lr}
 800ba78:	b084      	sub	sp, #16
 800ba7a:	af00      	add	r7, sp, #0
 800ba7c:	6078      	str	r0, [r7, #4]
 800ba7e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ba86:	2b01      	cmp	r3, #1
 800ba88:	d101      	bne.n	800ba8e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ba8a:	2302      	movs	r3, #2
 800ba8c:	e02d      	b.n	800baea <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	2201      	movs	r2, #1
 800ba92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	2224      	movs	r2, #36	@ 0x24
 800ba9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	681a      	ldr	r2, [r3, #0]
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	f022 0201 	bic.w	r2, r2, #1
 800bab4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	689b      	ldr	r3, [r3, #8]
 800babc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	683a      	ldr	r2, [r7, #0]
 800bac6:	430a      	orrs	r2, r1
 800bac8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800baca:	6878      	ldr	r0, [r7, #4]
 800bacc:	f000 f812 	bl	800baf4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	68fa      	ldr	r2, [r7, #12]
 800bad6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	2220      	movs	r2, #32
 800badc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	2200      	movs	r2, #0
 800bae4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bae8:	2300      	movs	r3, #0
}
 800baea:	4618      	mov	r0, r3
 800baec:	3710      	adds	r7, #16
 800baee:	46bd      	mov	sp, r7
 800baf0:	bd80      	pop	{r7, pc}
	...

0800baf4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800baf4:	b480      	push	{r7}
 800baf6:	b085      	sub	sp, #20
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d108      	bne.n	800bb16 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	2201      	movs	r2, #1
 800bb08:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	2201      	movs	r2, #1
 800bb10:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bb14:	e031      	b.n	800bb7a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bb16:	2308      	movs	r3, #8
 800bb18:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bb1a:	2308      	movs	r3, #8
 800bb1c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	689b      	ldr	r3, [r3, #8]
 800bb24:	0e5b      	lsrs	r3, r3, #25
 800bb26:	b2db      	uxtb	r3, r3
 800bb28:	f003 0307 	and.w	r3, r3, #7
 800bb2c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	689b      	ldr	r3, [r3, #8]
 800bb34:	0f5b      	lsrs	r3, r3, #29
 800bb36:	b2db      	uxtb	r3, r3
 800bb38:	f003 0307 	and.w	r3, r3, #7
 800bb3c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bb3e:	7bbb      	ldrb	r3, [r7, #14]
 800bb40:	7b3a      	ldrb	r2, [r7, #12]
 800bb42:	4911      	ldr	r1, [pc, #68]	@ (800bb88 <UARTEx_SetNbDataToProcess+0x94>)
 800bb44:	5c8a      	ldrb	r2, [r1, r2]
 800bb46:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bb4a:	7b3a      	ldrb	r2, [r7, #12]
 800bb4c:	490f      	ldr	r1, [pc, #60]	@ (800bb8c <UARTEx_SetNbDataToProcess+0x98>)
 800bb4e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bb50:	fb93 f3f2 	sdiv	r3, r3, r2
 800bb54:	b29a      	uxth	r2, r3
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bb5c:	7bfb      	ldrb	r3, [r7, #15]
 800bb5e:	7b7a      	ldrb	r2, [r7, #13]
 800bb60:	4909      	ldr	r1, [pc, #36]	@ (800bb88 <UARTEx_SetNbDataToProcess+0x94>)
 800bb62:	5c8a      	ldrb	r2, [r1, r2]
 800bb64:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bb68:	7b7a      	ldrb	r2, [r7, #13]
 800bb6a:	4908      	ldr	r1, [pc, #32]	@ (800bb8c <UARTEx_SetNbDataToProcess+0x98>)
 800bb6c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bb6e:	fb93 f3f2 	sdiv	r3, r3, r2
 800bb72:	b29a      	uxth	r2, r3
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800bb7a:	bf00      	nop
 800bb7c:	3714      	adds	r7, #20
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb84:	4770      	bx	lr
 800bb86:	bf00      	nop
 800bb88:	0800cd18 	.word	0x0800cd18
 800bb8c:	0800cd20 	.word	0x0800cd20

0800bb90 <appInit>:
#endif
/*
deal per 100ms
*/
void appInit()
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	af00      	add	r7, sp, #0
    motorInit();
 800bb94:	f000 f88e 	bl	800bcb4 <motorInit>
}
 800bb98:	bf00      	nop
 800bb9a:	bd80      	pop	{r7, pc}

0800bb9c <appRunning>:

void appRunning()
{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	af00      	add	r7, sp, #0
#if KEY_ENABLE
    getKeyState(&keyState);
#endif

#if NEED_COMMUNICATION
    uartRxProcess();
 800bba0:	f000 f83e 	bl	800bc20 <uartRxProcess>
            errNo = ntcErr;
        }
    }
#endif

    _1s = getOneSecFlag();
 800bba4:	f000 fcaa 	bl	800c4fc <getOneSecFlag>
 800bba8:	4603      	mov	r3, r0
 800bbaa:	461a      	mov	r2, r3
 800bbac:	4b1a      	ldr	r3, [pc, #104]	@ (800bc18 <appRunning+0x7c>)
 800bbae:	701a      	strb	r2, [r3, #0]

    switch (devState)
 800bbb0:	4b1a      	ldr	r3, [pc, #104]	@ (800bc1c <appRunning+0x80>)
 800bbb2:	781b      	ldrb	r3, [r3, #0]
 800bbb4:	2b06      	cmp	r3, #6
 800bbb6:	d823      	bhi.n	800bc00 <appRunning+0x64>
 800bbb8:	a201      	add	r2, pc, #4	@ (adr r2, 800bbc0 <appRunning+0x24>)
 800bbba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbbe:	bf00      	nop
 800bbc0:	0800bbdd 	.word	0x0800bbdd
 800bbc4:	0800bbe9 	.word	0x0800bbe9
 800bbc8:	0800bbe3 	.word	0x0800bbe3
 800bbcc:	0800bc01 	.word	0x0800bc01
 800bbd0:	0800bbef 	.word	0x0800bbef
 800bbd4:	0800bbf5 	.word	0x0800bbf5
 800bbd8:	0800bbfb 	.word	0x0800bbfb
    {
    case POWER_ON:
        poweringOn();
 800bbdc:	f000 f82e 	bl	800bc3c <poweringOn>
        break;
 800bbe0:	e00e      	b.n	800bc00 <appRunning+0x64>

    case STANDBY:
        standingby();
 800bbe2:	f000 f843 	bl	800bc6c <standingby>
        break;
 800bbe6:	e00b      	b.n	800bc00 <appRunning+0x64>

    case SET:
        setting();
 800bbe8:	f000 f847 	bl	800bc7a <setting>
        break;
 800bbec:	e008      	b.n	800bc00 <appRunning+0x64>

    case WORK:
        working();
 800bbee:	f000 f84b 	bl	800bc88 <working>
        break;
 800bbf2:	e005      	b.n	800bc00 <appRunning+0x64>

    case TEST:
        testing();
 800bbf4:	f000 f84f 	bl	800bc96 <testing>
        break;
 800bbf8:	e002      	b.n	800bc00 <appRunning+0x64>

    case FAULT:
        faulting();
 800bbfa:	f000 f853 	bl	800bca4 <faulting>
        break;
 800bbfe:	bf00      	nop
#if DISPLAY_ENABLE
    displayDataUpdate();
#endif

#if NEED_COMMUNICATION
    uartTxProcess();
 800bc00:	f000 f815 	bl	800bc2e <uartTxProcess>
#endif
    if (_1s)
 800bc04:	4b04      	ldr	r3, [pc, #16]	@ (800bc18 <appRunning+0x7c>)
 800bc06:	781b      	ldrb	r3, [r3, #0]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d002      	beq.n	800bc12 <appRunning+0x76>
//            errNo = 3;
//            FAULT_INIT;
//        }
#endif
        // beepOnce();
        _1s = 0;
 800bc0c:	4b02      	ldr	r3, [pc, #8]	@ (800bc18 <appRunning+0x7c>)
 800bc0e:	2200      	movs	r2, #0
 800bc10:	701a      	strb	r2, [r3, #0]
    }
}
 800bc12:	bf00      	nop
 800bc14:	bd80      	pop	{r7, pc}
 800bc16:	bf00      	nop
 800bc18:	20000549 	.word	0x20000549
 800bc1c:	20000548 	.word	0x20000548

0800bc20 <uartRxProcess>:

#if NEED_COMMUNICATION

static void uartRxProcess()
{
 800bc20:	b480      	push	{r7}
 800bc22:	af00      	add	r7, sp, #0
    //        }
    //
    //        rxUart.len = 0;
    //        rxUart.toProcessData = 0;
    //    }
}
 800bc24:	bf00      	nop
 800bc26:	46bd      	mov	sp, r7
 800bc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2c:	4770      	bx	lr

0800bc2e <uartTxProcess>:
static void uartTxProcess()
{
 800bc2e:	b480      	push	{r7}
 800bc30:	af00      	add	r7, sp, #0
#if SHOW_WAVE == 0
    sprintf(tempData, "K%d%dX\n", (int)devState);
#endif
}
 800bc32:	bf00      	nop
 800bc34:	46bd      	mov	sp, r7
 800bc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3a:	4770      	bx	lr

0800bc3c <poweringOn>:
#endif
#if DEBUG_DISPLAY
uchar i;
#endif
static void poweringOn()
{
 800bc3c:	b480      	push	{r7}
 800bc3e:	af00      	add	r7, sp, #0
    // for (i = 0; i < NUM_OF_COM; i++)
    // {
    //     displayDataBuf[i].byte = 0xFF;
    // }

    if (++cnt >= 10)
 800bc40:	4b08      	ldr	r3, [pc, #32]	@ (800bc64 <poweringOn+0x28>)
 800bc42:	781b      	ldrb	r3, [r3, #0]
 800bc44:	3301      	adds	r3, #1
 800bc46:	b2da      	uxtb	r2, r3
 800bc48:	4b06      	ldr	r3, [pc, #24]	@ (800bc64 <poweringOn+0x28>)
 800bc4a:	701a      	strb	r2, [r3, #0]
 800bc4c:	4b05      	ldr	r3, [pc, #20]	@ (800bc64 <poweringOn+0x28>)
 800bc4e:	781b      	ldrb	r3, [r3, #0]
 800bc50:	2b09      	cmp	r3, #9
 800bc52:	d902      	bls.n	800bc5a <poweringOn+0x1e>
                STANDBY_INIT;
        }
        else
            STANDBY_INIT;
#else
        STANDBY_INIT;
 800bc54:	4b04      	ldr	r3, [pc, #16]	@ (800bc68 <poweringOn+0x2c>)
 800bc56:	2202      	movs	r2, #2
 800bc58:	701a      	strb	r2, [r3, #0]
#endif
    }

#endif
}
 800bc5a:	bf00      	nop
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc62:	4770      	bx	lr
 800bc64:	2000054a 	.word	0x2000054a
 800bc68:	20000548 	.word	0x20000548

0800bc6c <standingby>:

static void standingby()
{
 800bc6c:	b480      	push	{r7}
 800bc6e:	af00      	add	r7, sp, #0
}
 800bc70:	bf00      	nop
 800bc72:	46bd      	mov	sp, r7
 800bc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc78:	4770      	bx	lr

0800bc7a <setting>:
static void setting()
{
 800bc7a:	b480      	push	{r7}
 800bc7c:	af00      	add	r7, sp, #0
}
 800bc7e:	bf00      	nop
 800bc80:	46bd      	mov	sp, r7
 800bc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc86:	4770      	bx	lr

0800bc88 <working>:
static void working()
{
 800bc88:	b480      	push	{r7}
 800bc8a:	af00      	add	r7, sp, #0
}
 800bc8c:	bf00      	nop
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc94:	4770      	bx	lr

0800bc96 <testing>:

static void testing()
{
 800bc96:	b480      	push	{r7}
 800bc98:	af00      	add	r7, sp, #0
}
 800bc9a:	bf00      	nop
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca2:	4770      	bx	lr

0800bca4 <faulting>:

static void faulting()
{
 800bca4:	b480      	push	{r7}
 800bca6:	af00      	add	r7, sp, #0
}
 800bca8:	bf00      	nop
 800bcaa:	46bd      	mov	sp, r7
 800bcac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb0:	4770      	bx	lr
	...

0800bcb4 <motorInit>:

static void setPwm1(unsigned short int a, unsigned short int b, unsigned short int c);
static float getElecAngle1(FocParameters *fp);

void motorInit()
{
 800bcb4:	b480      	push	{r7}
 800bcb6:	af00      	add	r7, sp, #0
    fp1.pole_pairs = 7;
 800bcb8:	4b09      	ldr	r3, [pc, #36]	@ (800bce0 <motorInit+0x2c>)
 800bcba:	2207      	movs	r2, #7
 800bcbc:	721a      	strb	r2, [r3, #8]
    fp1.setPwm = setPwm1;
 800bcbe:	4b08      	ldr	r3, [pc, #32]	@ (800bce0 <motorInit+0x2c>)
 800bcc0:	4a08      	ldr	r2, [pc, #32]	@ (800bce4 <motorInit+0x30>)
 800bcc2:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
   fp1.getElecAngle = getElecAngle1;
 800bcc6:	4b06      	ldr	r3, [pc, #24]	@ (800bce0 <motorInit+0x2c>)
 800bcc8:	4a07      	ldr	r2, [pc, #28]	@ (800bce8 <motorInit+0x34>)
 800bcca:	611a      	str	r2, [r3, #16]
    fp1.zeroElectricAngleOffSet = 0;
 800bccc:	4b04      	ldr	r3, [pc, #16]	@ (800bce0 <motorInit+0x2c>)
 800bcce:	f04f 0200 	mov.w	r2, #0
 800bcd2:	605a      	str	r2, [r3, #4]
}
 800bcd4:	bf00      	nop
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcdc:	4770      	bx	lr
 800bcde:	bf00      	nop
 800bce0:	2000054c 	.word	0x2000054c
 800bce4:	0800bced 	.word	0x0800bced
 800bce8:	0800bd21 	.word	0x0800bd21

0800bcec <setPwm1>:

static void setPwm1(unsigned short int a, unsigned short int b, unsigned short int c)
{
 800bcec:	b480      	push	{r7}
 800bcee:	b083      	sub	sp, #12
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	4603      	mov	r3, r0
 800bcf4:	80fb      	strh	r3, [r7, #6]
 800bcf6:	460b      	mov	r3, r1
 800bcf8:	80bb      	strh	r3, [r7, #4]
 800bcfa:	4613      	mov	r3, r2
 800bcfc:	807b      	strh	r3, [r7, #2]
    TIM1->CCR1 = a;
 800bcfe:	4a07      	ldr	r2, [pc, #28]	@ (800bd1c <setPwm1+0x30>)
 800bd00:	88fb      	ldrh	r3, [r7, #6]
 800bd02:	6353      	str	r3, [r2, #52]	@ 0x34
    TIM1->CCR2 = b;
 800bd04:	4a05      	ldr	r2, [pc, #20]	@ (800bd1c <setPwm1+0x30>)
 800bd06:	88bb      	ldrh	r3, [r7, #4]
 800bd08:	6393      	str	r3, [r2, #56]	@ 0x38
    TIM1->CCR3 = c;
 800bd0a:	4a04      	ldr	r2, [pc, #16]	@ (800bd1c <setPwm1+0x30>)
 800bd0c:	887b      	ldrh	r3, [r7, #2]
 800bd0e:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800bd10:	bf00      	nop
 800bd12:	370c      	adds	r7, #12
 800bd14:	46bd      	mov	sp, r7
 800bd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1a:	4770      	bx	lr
 800bd1c:	40012c00 	.word	0x40012c00

0800bd20 <getElecAngle1>:


static float getElecAngle1(FocParameters *fp)
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	ed2d 8b02 	vpush	{d8}
 800bd26:	b082      	sub	sp, #8
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	6078      	str	r0, [r7, #4]
    fp->angle_el = _normalizeAngle(fp->pole_pairs * MT6701_GetRawAngle() - fp->zeroElectricAngleOffSet);
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	7a1b      	ldrb	r3, [r3, #8]
 800bd30:	ee07 3a90 	vmov	s15, r3
 800bd34:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800bd38:	f000 f95c 	bl	800bff4 <MT6701_GetRawAngle>
 800bd3c:	eef0 7a40 	vmov.f32	s15, s0
 800bd40:	ee28 7a27 	vmul.f32	s14, s16, s15
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	edd3 7a01 	vldr	s15, [r3, #4]
 800bd4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bd4e:	eeb0 0a67 	vmov.f32	s0, s15
 800bd52:	f000 f8dd 	bl	800bf10 <_normalizeAngle>
 800bd56:	eef0 7a40 	vmov.f32	s15, s0
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	edc3 7a03 	vstr	s15, [r3, #12]
}
 800bd60:	bf00      	nop
 800bd62:	eeb0 0a67 	vmov.f32	s0, s15
 800bd66:	3708      	adds	r7, #8
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	ecbd 8b02 	vpop	{d8}
 800bd6e:	bd80      	pop	{r7, pc}

0800bd70 <_sin>:

// function approximating the sine calculation by using fixed size array
// uses a 65 element lookup table and interpolation
// thanks to @dekutree for his work on optimizing this
__attribute__((weak)) float _sin(float a)
{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b086      	sub	sp, #24
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	ed87 0a01 	vstr	s0, [r7, #4]
  // 16bit integer array for sine lookup. interpolation is used for better precision
  // 16 bit precision on sine value, 8 bit fractional value for interpolation, 6bit LUT size
  // resulting precision compared to stdlib sine is 0.00006480 (RMS difference in range -PI,PI for 3217 steps)
  static uint16_t sine_array[65] = {0, 804, 1608, 2411, 3212, 4011, 4808, 5602, 6393, 7180, 7962, 8740, 9512, 10279, 11039, 11793, 12540, 13279, 14010, 14733, 15447, 16151, 16846, 17531, 18205, 18868, 19520, 20160, 20788, 21403, 22006, 22595, 23170, 23732, 24279, 24812, 25330, 25833, 26320, 26791, 27246, 27684, 28106, 28511, 28899, 29269, 29622, 29957, 30274, 30572, 30853, 31114, 31357, 31581, 31786, 31972, 32138, 32286, 32413, 32522, 32610, 32679, 32729, 32758, 32768};
  unsigned int i = (unsigned int)(a * (64 * 4 * 256.0 / _2PI));
 800bd7a:	6878      	ldr	r0, [r7, #4]
 800bd7c:	f7f4 fbb0 	bl	80004e0 <__aeabi_f2d>
 800bd80:	a339      	add	r3, pc, #228	@ (adr r3, 800be68 <_sin+0xf8>)
 800bd82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd86:	f7f4 fc03 	bl	8000590 <__aeabi_dmul>
 800bd8a:	4602      	mov	r2, r0
 800bd8c:	460b      	mov	r3, r1
 800bd8e:	4610      	mov	r0, r2
 800bd90:	4619      	mov	r1, r3
 800bd92:	f7f4 fead 	bl	8000af0 <__aeabi_d2uiz>
 800bd96:	4603      	mov	r3, r0
 800bd98:	60fb      	str	r3, [r7, #12]
  int t1, t2, frac = i & 0xff;
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	b2db      	uxtb	r3, r3
 800bd9e:	60bb      	str	r3, [r7, #8]
  i = (i >> 8) & 0xff;
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	0a1b      	lsrs	r3, r3, #8
 800bda4:	b2db      	uxtb	r3, r3
 800bda6:	60fb      	str	r3, [r7, #12]
  if (i < 64)
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	2b3f      	cmp	r3, #63	@ 0x3f
 800bdac:	d80b      	bhi.n	800bdc6 <_sin+0x56>
  {
    t1 = sine_array[i];
 800bdae:	4a2c      	ldr	r2, [pc, #176]	@ (800be60 <_sin+0xf0>)
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bdb6:	617b      	str	r3, [r7, #20]
    t2 = sine_array[i + 1];
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	3301      	adds	r3, #1
 800bdbc:	4a28      	ldr	r2, [pc, #160]	@ (800be60 <_sin+0xf0>)
 800bdbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bdc2:	613b      	str	r3, [r7, #16]
 800bdc4:	e033      	b.n	800be2e <_sin+0xbe>
  }
  else if (i < 128)
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	2b7f      	cmp	r3, #127	@ 0x7f
 800bdca:	d80e      	bhi.n	800bdea <_sin+0x7a>
  {
    t1 = sine_array[128 - i];
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 800bdd2:	4a23      	ldr	r2, [pc, #140]	@ (800be60 <_sin+0xf0>)
 800bdd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bdd8:	617b      	str	r3, [r7, #20]
    t2 = sine_array[127 - i];
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 800bde0:	4a1f      	ldr	r2, [pc, #124]	@ (800be60 <_sin+0xf0>)
 800bde2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bde6:	613b      	str	r3, [r7, #16]
 800bde8:	e021      	b.n	800be2e <_sin+0xbe>
  }
  else if (i < 192)
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	2bbf      	cmp	r3, #191	@ 0xbf
 800bdee:	d80e      	bhi.n	800be0e <_sin+0x9e>
  {
    t1 = -sine_array[-128 + i];
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	3b80      	subs	r3, #128	@ 0x80
 800bdf4:	4a1a      	ldr	r2, [pc, #104]	@ (800be60 <_sin+0xf0>)
 800bdf6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bdfa:	425b      	negs	r3, r3
 800bdfc:	617b      	str	r3, [r7, #20]
    t2 = -sine_array[-127 + i];
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	3b7f      	subs	r3, #127	@ 0x7f
 800be02:	4a17      	ldr	r2, [pc, #92]	@ (800be60 <_sin+0xf0>)
 800be04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800be08:	425b      	negs	r3, r3
 800be0a:	613b      	str	r3, [r7, #16]
 800be0c:	e00f      	b.n	800be2e <_sin+0xbe>
  }
  else
  {
    t1 = -sine_array[256 - i];
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 800be14:	4a12      	ldr	r2, [pc, #72]	@ (800be60 <_sin+0xf0>)
 800be16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800be1a:	425b      	negs	r3, r3
 800be1c:	617b      	str	r3, [r7, #20]
    t2 = -sine_array[255 - i];
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 800be24:	4a0e      	ldr	r2, [pc, #56]	@ (800be60 <_sin+0xf0>)
 800be26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800be2a:	425b      	negs	r3, r3
 800be2c:	613b      	str	r3, [r7, #16]
  }
  return (1.0f / 32768.0f) * (t1 + (((t2 - t1) * frac) >> 8));
 800be2e:	693a      	ldr	r2, [r7, #16]
 800be30:	697b      	ldr	r3, [r7, #20]
 800be32:	1ad3      	subs	r3, r2, r3
 800be34:	68ba      	ldr	r2, [r7, #8]
 800be36:	fb02 f303 	mul.w	r3, r2, r3
 800be3a:	121a      	asrs	r2, r3, #8
 800be3c:	697b      	ldr	r3, [r7, #20]
 800be3e:	4413      	add	r3, r2
 800be40:	ee07 3a90 	vmov	s15, r3
 800be44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800be48:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 800be64 <_sin+0xf4>
 800be4c:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800be50:	eeb0 0a67 	vmov.f32	s0, s15
 800be54:	3718      	adds	r7, #24
 800be56:	46bd      	mov	sp, r7
 800be58:	bd80      	pop	{r7, pc}
 800be5a:	bf00      	nop
 800be5c:	f3af 8000 	nop.w
 800be60:	20000024 	.word	0x20000024
 800be64:	38000000 	.word	0x38000000
 800be68:	6446f9b4 	.word	0x6446f9b4
 800be6c:	40c45f30 	.word	0x40c45f30

0800be70 <_cos>:
// ~55us (float array)
// ~56us (int array)
// precision +-0.005
// it has to receive an angle in between 0 and 2PI
__attribute__((weak)) float _cos(float a)
{
 800be70:	b580      	push	{r7, lr}
 800be72:	b084      	sub	sp, #16
 800be74:	af00      	add	r7, sp, #0
 800be76:	ed87 0a01 	vstr	s0, [r7, #4]
  float a_sin = a + _PI_2;
 800be7a:	edd7 7a01 	vldr	s15, [r7, #4]
 800be7e:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 800bec8 <_cos+0x58>
 800be82:	ee77 7a87 	vadd.f32	s15, s15, s14
 800be86:	edc7 7a03 	vstr	s15, [r7, #12]
  a_sin = a_sin > _2PI ? a_sin - _2PI : a_sin;
 800be8a:	edd7 7a03 	vldr	s15, [r7, #12]
 800be8e:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800becc <_cos+0x5c>
 800be92:	eef4 7ac7 	vcmpe.f32	s15, s14
 800be96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be9a:	dd06      	ble.n	800beaa <_cos+0x3a>
 800be9c:	edd7 7a03 	vldr	s15, [r7, #12]
 800bea0:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 800becc <_cos+0x5c>
 800bea4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bea8:	e001      	b.n	800beae <_cos+0x3e>
 800beaa:	edd7 7a03 	vldr	s15, [r7, #12]
 800beae:	edc7 7a03 	vstr	s15, [r7, #12]
  return _sin(a_sin);
 800beb2:	ed97 0a03 	vldr	s0, [r7, #12]
 800beb6:	f7ff ff5b 	bl	800bd70 <_sin>
 800beba:	eef0 7a40 	vmov.f32	s15, s0
}
 800bebe:	eeb0 0a67 	vmov.f32	s0, s15
 800bec2:	3710      	adds	r7, #16
 800bec4:	46bd      	mov	sp, r7
 800bec6:	bd80      	pop	{r7, pc}
 800bec8:	3fc90fdb 	.word	0x3fc90fdb
 800becc:	40c90fdb 	.word	0x40c90fdb

0800bed0 <_sincos>:

__attribute__((weak)) void _sincos(float a, float *s, float *c)
{
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b084      	sub	sp, #16
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	ed87 0a03 	vstr	s0, [r7, #12]
 800beda:	60b8      	str	r0, [r7, #8]
 800bedc:	6079      	str	r1, [r7, #4]
  *s = _sin(a);
 800bede:	ed97 0a03 	vldr	s0, [r7, #12]
 800bee2:	f7ff ff45 	bl	800bd70 <_sin>
 800bee6:	eef0 7a40 	vmov.f32	s15, s0
 800beea:	68bb      	ldr	r3, [r7, #8]
 800beec:	edc3 7a00 	vstr	s15, [r3]
  *c = _cos(a);
 800bef0:	ed97 0a03 	vldr	s0, [r7, #12]
 800bef4:	f7ff ffbc 	bl	800be70 <_cos>
 800bef8:	eef0 7a40 	vmov.f32	s15, s0
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	edc3 7a00 	vstr	s15, [r3]
}
 800bf02:	bf00      	nop
 800bf04:	3710      	adds	r7, #16
 800bf06:	46bd      	mov	sp, r7
 800bf08:	bd80      	pop	{r7, pc}
 800bf0a:	0000      	movs	r0, r0
 800bf0c:	0000      	movs	r0, r0
	...

0800bf10 <_normalizeAngle>:
  return r;
}

// normalizing radian angle to [0,2PI]
__attribute__((weak)) float _normalizeAngle(float angle)
{
 800bf10:	b580      	push	{r7, lr}
 800bf12:	b084      	sub	sp, #16
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	ed87 0a01 	vstr	s0, [r7, #4]
  float a = fmod(angle, _2PI);
 800bf1a:	6878      	ldr	r0, [r7, #4]
 800bf1c:	f7f4 fae0 	bl	80004e0 <__aeabi_f2d>
 800bf20:	4602      	mov	r2, r0
 800bf22:	460b      	mov	r3, r1
 800bf24:	ed9f 1b12 	vldr	d1, [pc, #72]	@ 800bf70 <_normalizeAngle+0x60>
 800bf28:	ec43 2b10 	vmov	d0, r2, r3
 800bf2c:	f000 fd90 	bl	800ca50 <fmod>
 800bf30:	ec53 2b10 	vmov	r2, r3, d0
 800bf34:	4610      	mov	r0, r2
 800bf36:	4619      	mov	r1, r3
 800bf38:	f7f4 fdfa 	bl	8000b30 <__aeabi_d2f>
 800bf3c:	4603      	mov	r3, r0
 800bf3e:	60fb      	str	r3, [r7, #12]
  return a >= 0 ? a : (a + _2PI);
 800bf40:	edd7 7a03 	vldr	s15, [r7, #12]
 800bf44:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bf48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf4c:	db02      	blt.n	800bf54 <_normalizeAngle+0x44>
 800bf4e:	edd7 7a03 	vldr	s15, [r7, #12]
 800bf52:	e005      	b.n	800bf60 <_normalizeAngle+0x50>
 800bf54:	edd7 7a03 	vldr	s15, [r7, #12]
 800bf58:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800bf78 <_normalizeAngle+0x68>
 800bf5c:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 800bf60:	eeb0 0a67 	vmov.f32	s0, s15
 800bf64:	3710      	adds	r7, #16
 800bf66:	46bd      	mov	sp, r7
 800bf68:	bd80      	pop	{r7, pc}
 800bf6a:	bf00      	nop
 800bf6c:	f3af 8000 	nop.w
 800bf70:	60000000 	.word	0x60000000
 800bf74:	401921fb 	.word	0x401921fb
 800bf78:	40c90fdb 	.word	0x40c90fdb

0800bf7c <MT6701_GetRawData>:
#include "foc_utils.h"

static unsigned int rotationCount, rotationCount_Last;

uint16_t MT6701_GetRawData(void)
{
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	b084      	sub	sp, #16
 800bf80:	af02      	add	r7, sp, #8
    uint16_t rawData;
    uint16_t txData = 0xFFFF;
 800bf82:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800bf86:	803b      	strh	r3, [r7, #0]
    uint16_t timeOut = 200;
 800bf88:	23c8      	movs	r3, #200	@ 0xc8
 800bf8a:	80fb      	strh	r3, [r7, #6]

    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY)
 800bf8c:	e006      	b.n	800bf9c <MT6701_GetRawData+0x20>
    {
        if (timeOut-- == 0)
 800bf8e:	88fb      	ldrh	r3, [r7, #6]
 800bf90:	1e5a      	subs	r2, r3, #1
 800bf92:	80fa      	strh	r2, [r7, #6]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d101      	bne.n	800bf9c <MT6701_GetRawData+0x20>
        {
            //   FOC_log("SPI state error!\r\n");
            return 0; // 在超时时直接返回，避免继续执行后续代码
 800bf98:	2300      	movs	r3, #0
 800bf9a:	e025      	b.n	800bfe8 <MT6701_GetRawData+0x6c>
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY)
 800bf9c:	4814      	ldr	r0, [pc, #80]	@ (800bff0 <MT6701_GetRawData+0x74>)
 800bf9e:	f7fc f99c 	bl	80082da <HAL_SPI_GetState>
 800bfa2:	4603      	mov	r3, r0
 800bfa4:	2b01      	cmp	r3, #1
 800bfa6:	d1f2      	bne.n	800bf8e <MT6701_GetRawData+0x12>
        }
    }

    MT6701_CS_Enable;
 800bfa8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800bfac:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800bfb0:	619a      	str	r2, [r3, #24]

    HAL_StatusTypeDef spiStatus = HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)&txData, (uint8_t *)&rawData, 1, HAL_MAX_DELAY);
 800bfb2:	1cba      	adds	r2, r7, #2
 800bfb4:	4639      	mov	r1, r7
 800bfb6:	f04f 33ff 	mov.w	r3, #4294967295
 800bfba:	9300      	str	r3, [sp, #0]
 800bfbc:	2301      	movs	r3, #1
 800bfbe:	480c      	ldr	r0, [pc, #48]	@ (800bff0 <MT6701_GetRawData+0x74>)
 800bfc0:	f7fb ff69 	bl	8007e96 <HAL_SPI_TransmitReceive>
 800bfc4:	4603      	mov	r3, r0
 800bfc6:	717b      	strb	r3, [r7, #5]
    if (spiStatus != HAL_OK)
 800bfc8:	797b      	ldrb	r3, [r7, #5]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d005      	beq.n	800bfda <MT6701_GetRawData+0x5e>
    {
        MT6701_CS_Disable;
 800bfce:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800bfd2:	2210      	movs	r2, #16
 800bfd4:	619a      	str	r2, [r3, #24]
        //  FOC_log("MT6701 read data error!\r\n");
        return 0; // 在SPI传输错误时直接返回，避免继续执行后续代码
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	e006      	b.n	800bfe8 <MT6701_GetRawData+0x6c>
    }

    MT6701_CS_Disable;
 800bfda:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800bfde:	2210      	movs	r2, #16
 800bfe0:	619a      	str	r2, [r3, #24]

    return rawData >> 2; // 取高14位的角度数据
 800bfe2:	887b      	ldrh	r3, [r7, #2]
 800bfe4:	089b      	lsrs	r3, r3, #2
 800bfe6:	b29b      	uxth	r3, r3
}
 800bfe8:	4618      	mov	r0, r3
 800bfea:	3708      	adds	r7, #8
 800bfec:	46bd      	mov	sp, r7
 800bfee:	bd80      	pop	{r7, pc}
 800bff0:	20000354 	.word	0x20000354

0800bff4 <MT6701_GetRawAngle>:

// 将传感器原始数据转化为弧度
float MT6701_GetRawAngle(void)
{
 800bff4:	b580      	push	{r7, lr}
 800bff6:	b082      	sub	sp, #8
 800bff8:	af00      	add	r7, sp, #0
    uint16_t rawData = MT6701_GetRawData();
 800bffa:	f7ff ffbf 	bl	800bf7c <MT6701_GetRawData>
 800bffe:	4603      	mov	r3, r0
 800c000:	80fb      	strh	r3, [r7, #6]
    return (float)rawData / 16384.0f * _2PI;
 800c002:	88fb      	ldrh	r3, [r7, #6]
 800c004:	ee07 3a90 	vmov	s15, r3
 800c008:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c00c:	eddf 6a06 	vldr	s13, [pc, #24]	@ 800c028 <MT6701_GetRawAngle+0x34>
 800c010:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c014:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800c02c <MT6701_GetRawAngle+0x38>
 800c018:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800c01c:	eeb0 0a67 	vmov.f32	s0, s15
 800c020:	3708      	adds	r7, #8
 800c022:	46bd      	mov	sp, r7
 800c024:	bd80      	pop	{r7, pc}
 800c026:	bf00      	nop
 800c028:	46800000 	.word	0x46800000
 800c02c:	40c90fdb 	.word	0x40c90fdb

0800c030 <userMain>:
float HallTheta = 0;
float HallSpeed = 0;
uint8_t HallReadTemp = 0;
static bool powerLost;
void userMain(void)
{
 800c030:	b580      	push	{r7, lr}
 800c032:	af00      	add	r7, sp, #0
	// {
	// 	_30ms = 0;
	// 	sensoring();
	// }

	if (get100MsFlag())
 800c034:	f000 fa76 	bl	800c524 <get100MsFlag>
 800c038:	4603      	mov	r3, r0
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d001      	beq.n	800c042 <userMain+0x12>
	{
		appRunning();
 800c03e:	f7ff fdad 	bl	800bb9c <appRunning>
	}
}
 800c042:	bf00      	nop
 800c044:	bd80      	pop	{r7, pc}
	...

0800c048 <HAL_GPIO_EXTI_Callback>:
void setPowerLost()
{
	powerLost = 1;
}
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800c048:	b580      	push	{r7, lr}
 800c04a:	b082      	sub	sp, #8
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	4603      	mov	r3, r0
 800c050:	80fb      	strh	r3, [r7, #6]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(GPIO_Pin);
	if (Button3_Pin == GPIO_Pin)
 800c052:	88fb      	ldrh	r3, [r7, #6]
 800c054:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c058:	d13a      	bne.n	800c0d0 <HAL_GPIO_EXTI_Callback+0x88>
	{
		Motor_state = ~Motor_state;
 800c05a:	4b1f      	ldr	r3, [pc, #124]	@ (800c0d8 <HAL_GPIO_EXTI_Callback+0x90>)
 800c05c:	781b      	ldrb	r3, [r3, #0]
 800c05e:	43db      	mvns	r3, r3
 800c060:	b2da      	uxtb	r2, r3
 800c062:	4b1d      	ldr	r3, [pc, #116]	@ (800c0d8 <HAL_GPIO_EXTI_Callback+0x90>)
 800c064:	701a      	strb	r2, [r3, #0]
		if (0 == Motor_state)
 800c066:	4b1c      	ldr	r3, [pc, #112]	@ (800c0d8 <HAL_GPIO_EXTI_Callback+0x90>)
 800c068:	781b      	ldrb	r3, [r3, #0]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d118      	bne.n	800c0a0 <HAL_GPIO_EXTI_Callback+0x58>
		{
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800c06e:	2100      	movs	r1, #0
 800c070:	481a      	ldr	r0, [pc, #104]	@ (800c0dc <HAL_GPIO_EXTI_Callback+0x94>)
 800c072:	f7fc fcc1 	bl	80089f8 <HAL_TIM_PWM_Stop>
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 800c076:	2104      	movs	r1, #4
 800c078:	4818      	ldr	r0, [pc, #96]	@ (800c0dc <HAL_GPIO_EXTI_Callback+0x94>)
 800c07a:	f7fc fcbd 	bl	80089f8 <HAL_TIM_PWM_Stop>
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 800c07e:	2108      	movs	r1, #8
 800c080:	4816      	ldr	r0, [pc, #88]	@ (800c0dc <HAL_GPIO_EXTI_Callback+0x94>)
 800c082:	f7fc fcb9 	bl	80089f8 <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 800c086:	2100      	movs	r1, #0
 800c088:	4814      	ldr	r0, [pc, #80]	@ (800c0dc <HAL_GPIO_EXTI_Callback+0x94>)
 800c08a:	f7fd ff89 	bl	8009fa0 <HAL_TIMEx_PWMN_Stop>
			HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 800c08e:	2104      	movs	r1, #4
 800c090:	4812      	ldr	r0, [pc, #72]	@ (800c0dc <HAL_GPIO_EXTI_Callback+0x94>)
 800c092:	f7fd ff85 	bl	8009fa0 <HAL_TIMEx_PWMN_Stop>
			HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3);
 800c096:	2108      	movs	r1, #8
 800c098:	4810      	ldr	r0, [pc, #64]	@ (800c0dc <HAL_GPIO_EXTI_Callback+0x94>)
 800c09a:	f7fd ff81 	bl	8009fa0 <HAL_TIMEx_PWMN_Stop>
		}
	}
	/* NOTE: This function should not be modified, when the callback is needed,
			 the HAL_GPIO_EXTI_Callback could be implemented in the user file
	 */
}
 800c09e:	e017      	b.n	800c0d0 <HAL_GPIO_EXTI_Callback+0x88>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800c0a0:	2100      	movs	r1, #0
 800c0a2:	480e      	ldr	r0, [pc, #56]	@ (800c0dc <HAL_GPIO_EXTI_Callback+0x94>)
 800c0a4:	f7fc fba8 	bl	80087f8 <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800c0a8:	2104      	movs	r1, #4
 800c0aa:	480c      	ldr	r0, [pc, #48]	@ (800c0dc <HAL_GPIO_EXTI_Callback+0x94>)
 800c0ac:	f7fc fba4 	bl	80087f8 <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800c0b0:	2108      	movs	r1, #8
 800c0b2:	480a      	ldr	r0, [pc, #40]	@ (800c0dc <HAL_GPIO_EXTI_Callback+0x94>)
 800c0b4:	f7fc fba0 	bl	80087f8 <HAL_TIM_PWM_Start>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 800c0b8:	2100      	movs	r1, #0
 800c0ba:	4808      	ldr	r0, [pc, #32]	@ (800c0dc <HAL_GPIO_EXTI_Callback+0x94>)
 800c0bc:	f7fd febc 	bl	8009e38 <HAL_TIMEx_PWMN_Start>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 800c0c0:	2104      	movs	r1, #4
 800c0c2:	4806      	ldr	r0, [pc, #24]	@ (800c0dc <HAL_GPIO_EXTI_Callback+0x94>)
 800c0c4:	f7fd feb8 	bl	8009e38 <HAL_TIMEx_PWMN_Start>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 800c0c8:	2108      	movs	r1, #8
 800c0ca:	4804      	ldr	r0, [pc, #16]	@ (800c0dc <HAL_GPIO_EXTI_Callback+0x94>)
 800c0cc:	f7fd feb4 	bl	8009e38 <HAL_TIMEx_PWMN_Start>
}
 800c0d0:	bf00      	nop
 800c0d2:	3708      	adds	r7, #8
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	bd80      	pop	{r7, pc}
 800c0d8:	2000061c 	.word	0x2000061c
 800c0dc:	200003b8 	.word	0x200003b8

0800c0e0 <HAL_ADCEx_InjectedConvCpltCallback>:
	USART3->TDR = (uint8_t)ch;
	return ch;
}

void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800c0e0:	b580      	push	{r7, lr}
 800c0e2:	b082      	sub	sp, #8
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	6078      	str	r0, [r7, #4]
	static uint8_t cnt;
	/* Prevent unused argument(s) compilation warning */
	UNUSED(hadc);
	if (hadc == &hadc1)
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	4a87      	ldr	r2, [pc, #540]	@ (800c308 <HAL_ADCEx_InjectedConvCpltCallback+0x228>)
 800c0ec:	4293      	cmp	r3, r2
 800c0ee:	f040 8102 	bne.w	800c2f6 <HAL_ADCEx_InjectedConvCpltCallback+0x216>
	{
		if (ADC_offset == 0)
 800c0f2:	4b86      	ldr	r3, [pc, #536]	@ (800c30c <HAL_ADCEx_InjectedConvCpltCallback+0x22c>)
 800c0f4:	781b      	ldrb	r3, [r3, #0]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d156      	bne.n	800c1a8 <HAL_ADCEx_InjectedConvCpltCallback+0xc8>
		{
			cnt++;
 800c0fa:	4b85      	ldr	r3, [pc, #532]	@ (800c310 <HAL_ADCEx_InjectedConvCpltCallback+0x230>)
 800c0fc:	781b      	ldrb	r3, [r3, #0]
 800c0fe:	3301      	adds	r3, #1
 800c100:	b2da      	uxtb	r2, r3
 800c102:	4b83      	ldr	r3, [pc, #524]	@ (800c310 <HAL_ADCEx_InjectedConvCpltCallback+0x230>)
 800c104:	701a      	strb	r2, [r3, #0]
			adc1_in1 = hadc1.Instance->JDR1;
 800c106:	4b80      	ldr	r3, [pc, #512]	@ (800c308 <HAL_ADCEx_InjectedConvCpltCallback+0x228>)
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c10e:	b29a      	uxth	r2, r3
 800c110:	4b80      	ldr	r3, [pc, #512]	@ (800c314 <HAL_ADCEx_InjectedConvCpltCallback+0x234>)
 800c112:	801a      	strh	r2, [r3, #0]
			adc1_in2 = hadc2.Instance->JDR1;
 800c114:	4b80      	ldr	r3, [pc, #512]	@ (800c318 <HAL_ADCEx_InjectedConvCpltCallback+0x238>)
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c11c:	b29a      	uxth	r2, r3
 800c11e:	4b7f      	ldr	r3, [pc, #508]	@ (800c31c <HAL_ADCEx_InjectedConvCpltCallback+0x23c>)
 800c120:	801a      	strh	r2, [r3, #0]
			adc1_in3 = hadc1.Instance->JDR2;
 800c122:	4b79      	ldr	r3, [pc, #484]	@ (800c308 <HAL_ADCEx_InjectedConvCpltCallback+0x228>)
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c12a:	b29a      	uxth	r2, r3
 800c12c:	4b7c      	ldr	r3, [pc, #496]	@ (800c320 <HAL_ADCEx_InjectedConvCpltCallback+0x240>)
 800c12e:	801a      	strh	r2, [r3, #0]
			IA_Offset += adc1_in1;
 800c130:	4b7c      	ldr	r3, [pc, #496]	@ (800c324 <HAL_ADCEx_InjectedConvCpltCallback+0x244>)
 800c132:	881a      	ldrh	r2, [r3, #0]
 800c134:	4b77      	ldr	r3, [pc, #476]	@ (800c314 <HAL_ADCEx_InjectedConvCpltCallback+0x234>)
 800c136:	881b      	ldrh	r3, [r3, #0]
 800c138:	4413      	add	r3, r2
 800c13a:	b29a      	uxth	r2, r3
 800c13c:	4b79      	ldr	r3, [pc, #484]	@ (800c324 <HAL_ADCEx_InjectedConvCpltCallback+0x244>)
 800c13e:	801a      	strh	r2, [r3, #0]
			IB_Offset += adc1_in2;
 800c140:	4b79      	ldr	r3, [pc, #484]	@ (800c328 <HAL_ADCEx_InjectedConvCpltCallback+0x248>)
 800c142:	881a      	ldrh	r2, [r3, #0]
 800c144:	4b75      	ldr	r3, [pc, #468]	@ (800c31c <HAL_ADCEx_InjectedConvCpltCallback+0x23c>)
 800c146:	881b      	ldrh	r3, [r3, #0]
 800c148:	4413      	add	r3, r2
 800c14a:	b29a      	uxth	r2, r3
 800c14c:	4b76      	ldr	r3, [pc, #472]	@ (800c328 <HAL_ADCEx_InjectedConvCpltCallback+0x248>)
 800c14e:	801a      	strh	r2, [r3, #0]
			IC_Offset += adc1_in3;
 800c150:	4b76      	ldr	r3, [pc, #472]	@ (800c32c <HAL_ADCEx_InjectedConvCpltCallback+0x24c>)
 800c152:	881a      	ldrh	r2, [r3, #0]
 800c154:	4b72      	ldr	r3, [pc, #456]	@ (800c320 <HAL_ADCEx_InjectedConvCpltCallback+0x240>)
 800c156:	881b      	ldrh	r3, [r3, #0]
 800c158:	4413      	add	r3, r2
 800c15a:	b29a      	uxth	r2, r3
 800c15c:	4b73      	ldr	r3, [pc, #460]	@ (800c32c <HAL_ADCEx_InjectedConvCpltCallback+0x24c>)
 800c15e:	801a      	strh	r2, [r3, #0]
			if (cnt >= 10)
 800c160:	4b6b      	ldr	r3, [pc, #428]	@ (800c310 <HAL_ADCEx_InjectedConvCpltCallback+0x230>)
 800c162:	781b      	ldrb	r3, [r3, #0]
 800c164:	2b09      	cmp	r3, #9
 800c166:	f240 80c6 	bls.w	800c2f6 <HAL_ADCEx_InjectedConvCpltCallback+0x216>
			{
				ADC_offset = 1;
 800c16a:	4b68      	ldr	r3, [pc, #416]	@ (800c30c <HAL_ADCEx_InjectedConvCpltCallback+0x22c>)
 800c16c:	2201      	movs	r2, #1
 800c16e:	701a      	strb	r2, [r3, #0]
				IA_Offset = IA_Offset / 10;
 800c170:	4b6c      	ldr	r3, [pc, #432]	@ (800c324 <HAL_ADCEx_InjectedConvCpltCallback+0x244>)
 800c172:	881b      	ldrh	r3, [r3, #0]
 800c174:	4a6e      	ldr	r2, [pc, #440]	@ (800c330 <HAL_ADCEx_InjectedConvCpltCallback+0x250>)
 800c176:	fba2 2303 	umull	r2, r3, r2, r3
 800c17a:	08db      	lsrs	r3, r3, #3
 800c17c:	b29a      	uxth	r2, r3
 800c17e:	4b69      	ldr	r3, [pc, #420]	@ (800c324 <HAL_ADCEx_InjectedConvCpltCallback+0x244>)
 800c180:	801a      	strh	r2, [r3, #0]
				IB_Offset = IB_Offset / 10;
 800c182:	4b69      	ldr	r3, [pc, #420]	@ (800c328 <HAL_ADCEx_InjectedConvCpltCallback+0x248>)
 800c184:	881b      	ldrh	r3, [r3, #0]
 800c186:	4a6a      	ldr	r2, [pc, #424]	@ (800c330 <HAL_ADCEx_InjectedConvCpltCallback+0x250>)
 800c188:	fba2 2303 	umull	r2, r3, r2, r3
 800c18c:	08db      	lsrs	r3, r3, #3
 800c18e:	b29a      	uxth	r2, r3
 800c190:	4b65      	ldr	r3, [pc, #404]	@ (800c328 <HAL_ADCEx_InjectedConvCpltCallback+0x248>)
 800c192:	801a      	strh	r2, [r3, #0]
				IC_Offset = IC_Offset / 10;
 800c194:	4b65      	ldr	r3, [pc, #404]	@ (800c32c <HAL_ADCEx_InjectedConvCpltCallback+0x24c>)
 800c196:	881b      	ldrh	r3, [r3, #0]
 800c198:	4a65      	ldr	r2, [pc, #404]	@ (800c330 <HAL_ADCEx_InjectedConvCpltCallback+0x250>)
 800c19a:	fba2 2303 	umull	r2, r3, r2, r3
 800c19e:	08db      	lsrs	r3, r3, #3
 800c1a0:	b29a      	uxth	r2, r3
 800c1a2:	4b62      	ldr	r3, [pc, #392]	@ (800c32c <HAL_ADCEx_InjectedConvCpltCallback+0x24c>)
 800c1a4:	801a      	strh	r2, [r3, #0]
	}

	/* NOTE : This function should not be modified. When the callback is needed,
			  function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
	*/
}
 800c1a6:	e0a6      	b.n	800c2f6 <HAL_ADCEx_InjectedConvCpltCallback+0x216>
			adc1_in1 = hadc1.Instance->JDR1;
 800c1a8:	4b57      	ldr	r3, [pc, #348]	@ (800c308 <HAL_ADCEx_InjectedConvCpltCallback+0x228>)
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c1b0:	b29a      	uxth	r2, r3
 800c1b2:	4b58      	ldr	r3, [pc, #352]	@ (800c314 <HAL_ADCEx_InjectedConvCpltCallback+0x234>)
 800c1b4:	801a      	strh	r2, [r3, #0]
			adc1_in3 = hadc1.Instance->JDR2;
 800c1b6:	4b54      	ldr	r3, [pc, #336]	@ (800c308 <HAL_ADCEx_InjectedConvCpltCallback+0x228>)
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c1be:	b29a      	uxth	r2, r3
 800c1c0:	4b57      	ldr	r3, [pc, #348]	@ (800c320 <HAL_ADCEx_InjectedConvCpltCallback+0x240>)
 800c1c2:	801a      	strh	r2, [r3, #0]
			adc1_in2 = hadc2.Instance->JDR1;
 800c1c4:	4b54      	ldr	r3, [pc, #336]	@ (800c318 <HAL_ADCEx_InjectedConvCpltCallback+0x238>)
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c1cc:	b29a      	uxth	r2, r3
 800c1ce:	4b53      	ldr	r3, [pc, #332]	@ (800c31c <HAL_ADCEx_InjectedConvCpltCallback+0x23c>)
 800c1d0:	801a      	strh	r2, [r3, #0]
			Ia = (adc1_in1 - IA_Offset) * 0.02197f;
 800c1d2:	4b50      	ldr	r3, [pc, #320]	@ (800c314 <HAL_ADCEx_InjectedConvCpltCallback+0x234>)
 800c1d4:	881b      	ldrh	r3, [r3, #0]
 800c1d6:	461a      	mov	r2, r3
 800c1d8:	4b52      	ldr	r3, [pc, #328]	@ (800c324 <HAL_ADCEx_InjectedConvCpltCallback+0x244>)
 800c1da:	881b      	ldrh	r3, [r3, #0]
 800c1dc:	1ad3      	subs	r3, r2, r3
 800c1de:	ee07 3a90 	vmov	s15, r3
 800c1e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c1e6:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 800c334 <HAL_ADCEx_InjectedConvCpltCallback+0x254>
 800c1ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c1ee:	4b52      	ldr	r3, [pc, #328]	@ (800c338 <HAL_ADCEx_InjectedConvCpltCallback+0x258>)
 800c1f0:	edc3 7a00 	vstr	s15, [r3]
			Ib = (adc1_in2 - IB_Offset) * 0.02197f;
 800c1f4:	4b49      	ldr	r3, [pc, #292]	@ (800c31c <HAL_ADCEx_InjectedConvCpltCallback+0x23c>)
 800c1f6:	881b      	ldrh	r3, [r3, #0]
 800c1f8:	461a      	mov	r2, r3
 800c1fa:	4b4b      	ldr	r3, [pc, #300]	@ (800c328 <HAL_ADCEx_InjectedConvCpltCallback+0x248>)
 800c1fc:	881b      	ldrh	r3, [r3, #0]
 800c1fe:	1ad3      	subs	r3, r2, r3
 800c200:	ee07 3a90 	vmov	s15, r3
 800c204:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c208:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 800c334 <HAL_ADCEx_InjectedConvCpltCallback+0x254>
 800c20c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c210:	4b4a      	ldr	r3, [pc, #296]	@ (800c33c <HAL_ADCEx_InjectedConvCpltCallback+0x25c>)
 800c212:	edc3 7a00 	vstr	s15, [r3]
			Ic = (adc1_in3 - IC_Offset) * 0.02197f;
 800c216:	4b42      	ldr	r3, [pc, #264]	@ (800c320 <HAL_ADCEx_InjectedConvCpltCallback+0x240>)
 800c218:	881b      	ldrh	r3, [r3, #0]
 800c21a:	461a      	mov	r2, r3
 800c21c:	4b43      	ldr	r3, [pc, #268]	@ (800c32c <HAL_ADCEx_InjectedConvCpltCallback+0x24c>)
 800c21e:	881b      	ldrh	r3, [r3, #0]
 800c220:	1ad3      	subs	r3, r2, r3
 800c222:	ee07 3a90 	vmov	s15, r3
 800c226:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c22a:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 800c334 <HAL_ADCEx_InjectedConvCpltCallback+0x254>
 800c22e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c232:	4b43      	ldr	r3, [pc, #268]	@ (800c340 <HAL_ADCEx_InjectedConvCpltCallback+0x260>)
 800c234:	edc3 7a00 	vstr	s15, [r3]
			elecAngle += 0.01;
 800c238:	4b42      	ldr	r3, [pc, #264]	@ (800c344 <HAL_ADCEx_InjectedConvCpltCallback+0x264>)
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	4618      	mov	r0, r3
 800c23e:	f7f4 f94f 	bl	80004e0 <__aeabi_f2d>
 800c242:	a32f      	add	r3, pc, #188	@ (adr r3, 800c300 <HAL_ADCEx_InjectedConvCpltCallback+0x220>)
 800c244:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c248:	f7f3 ffec 	bl	8000224 <__adddf3>
 800c24c:	4602      	mov	r2, r0
 800c24e:	460b      	mov	r3, r1
 800c250:	4610      	mov	r0, r2
 800c252:	4619      	mov	r1, r3
 800c254:	f7f4 fc6c 	bl	8000b30 <__aeabi_d2f>
 800c258:	4603      	mov	r3, r0
 800c25a:	4a3a      	ldr	r2, [pc, #232]	@ (800c344 <HAL_ADCEx_InjectedConvCpltCallback+0x264>)
 800c25c:	6013      	str	r3, [r2, #0]
			if (elecAngle >= _2PI)
 800c25e:	4b39      	ldr	r3, [pc, #228]	@ (800c344 <HAL_ADCEx_InjectedConvCpltCallback+0x264>)
 800c260:	edd3 7a00 	vldr	s15, [r3]
 800c264:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800c348 <HAL_ADCEx_InjectedConvCpltCallback+0x268>
 800c268:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c26c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c270:	db03      	blt.n	800c27a <HAL_ADCEx_InjectedConvCpltCallback+0x19a>
				elecAngle = 0;
 800c272:	4b34      	ldr	r3, [pc, #208]	@ (800c344 <HAL_ADCEx_InjectedConvCpltCallback+0x264>)
 800c274:	f04f 0200 	mov.w	r2, #0
 800c278:	601a      	str	r2, [r3, #0]
			setPhaseVoltage(&fp1, 2, 0, elecAngle);
 800c27a:	4b32      	ldr	r3, [pc, #200]	@ (800c344 <HAL_ADCEx_InjectedConvCpltCallback+0x264>)
 800c27c:	edd3 7a00 	vldr	s15, [r3]
 800c280:	eeb0 1a67 	vmov.f32	s2, s15
 800c284:	eddf 0a31 	vldr	s1, [pc, #196]	@ 800c34c <HAL_ADCEx_InjectedConvCpltCallback+0x26c>
 800c288:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 800c28c:	4830      	ldr	r0, [pc, #192]	@ (800c350 <HAL_ADCEx_InjectedConvCpltCallback+0x270>)
 800c28e:	f000 f95d 	bl	800c54c <setPhaseVoltage>
			dealPer100us();
 800c292:	f000 f877 	bl	800c384 <dealPer100us>
			load_data[0] = fp1.d1;
 800c296:	4b2e      	ldr	r3, [pc, #184]	@ (800c350 <HAL_ADCEx_InjectedConvCpltCallback+0x270>)
 800c298:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c29c:	ee07 3a90 	vmov	s15, r3
 800c2a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2a4:	4b2b      	ldr	r3, [pc, #172]	@ (800c354 <HAL_ADCEx_InjectedConvCpltCallback+0x274>)
 800c2a6:	edc3 7a00 	vstr	s15, [r3]
			load_data[1] = fp1.d2;
 800c2aa:	4b29      	ldr	r3, [pc, #164]	@ (800c350 <HAL_ADCEx_InjectedConvCpltCallback+0x270>)
 800c2ac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c2b0:	ee07 3a90 	vmov	s15, r3
 800c2b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2b8:	4b26      	ldr	r3, [pc, #152]	@ (800c354 <HAL_ADCEx_InjectedConvCpltCallback+0x274>)
 800c2ba:	edc3 7a01 	vstr	s15, [r3, #4]
			load_data[2] = fp1.d3;
 800c2be:	4b24      	ldr	r3, [pc, #144]	@ (800c350 <HAL_ADCEx_InjectedConvCpltCallback+0x270>)
 800c2c0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800c2c4:	ee07 3a90 	vmov	s15, r3
 800c2c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2cc:	4b21      	ldr	r3, [pc, #132]	@ (800c354 <HAL_ADCEx_InjectedConvCpltCallback+0x274>)
 800c2ce:	edc3 7a02 	vstr	s15, [r3, #8]
			load_data[3] = 0;
 800c2d2:	4b20      	ldr	r3, [pc, #128]	@ (800c354 <HAL_ADCEx_InjectedConvCpltCallback+0x274>)
 800c2d4:	f04f 0200 	mov.w	r2, #0
 800c2d8:	60da      	str	r2, [r3, #12]
			load_data[4] = 0;
 800c2da:	4b1e      	ldr	r3, [pc, #120]	@ (800c354 <HAL_ADCEx_InjectedConvCpltCallback+0x274>)
 800c2dc:	f04f 0200 	mov.w	r2, #0
 800c2e0:	611a      	str	r2, [r3, #16]
			memcpy(tempData, (uint8_t *)&load_data, sizeof(load_data));
 800c2e2:	2214      	movs	r2, #20
 800c2e4:	491b      	ldr	r1, [pc, #108]	@ (800c354 <HAL_ADCEx_InjectedConvCpltCallback+0x274>)
 800c2e6:	481c      	ldr	r0, [pc, #112]	@ (800c358 <HAL_ADCEx_InjectedConvCpltCallback+0x278>)
 800c2e8:	f000 fba4 	bl	800ca34 <memcpy>
			HAL_UART_Transmit_DMA(&huart3, (uint8_t *)tempData, 6 * 4);
 800c2ec:	2218      	movs	r2, #24
 800c2ee:	491a      	ldr	r1, [pc, #104]	@ (800c358 <HAL_ADCEx_InjectedConvCpltCallback+0x278>)
 800c2f0:	481a      	ldr	r0, [pc, #104]	@ (800c35c <HAL_ADCEx_InjectedConvCpltCallback+0x27c>)
 800c2f2:	f7fe f955 	bl	800a5a0 <HAL_UART_Transmit_DMA>
}
 800c2f6:	bf00      	nop
 800c2f8:	3708      	adds	r7, #8
 800c2fa:	46bd      	mov	sp, r7
 800c2fc:	bd80      	pop	{r7, pc}
 800c2fe:	bf00      	nop
 800c300:	47ae147b 	.word	0x47ae147b
 800c304:	3f847ae1 	.word	0x3f847ae1
 800c308:	20000114 	.word	0x20000114
 800c30c:	2000062a 	.word	0x2000062a
 800c310:	2000065c 	.word	0x2000065c
 800c314:	20000624 	.word	0x20000624
 800c318:	20000180 	.word	0x20000180
 800c31c:	20000626 	.word	0x20000626
 800c320:	20000628 	.word	0x20000628
 800c324:	2000061e 	.word	0x2000061e
 800c328:	20000620 	.word	0x20000620
 800c32c:	20000622 	.word	0x20000622
 800c330:	cccccccd 	.word	0xcccccccd
 800c334:	3cb3fa6e 	.word	0x3cb3fa6e
 800c338:	20000610 	.word	0x20000610
 800c33c:	20000614 	.word	0x20000614
 800c340:	20000618 	.word	0x20000618
 800c344:	20000660 	.word	0x20000660
 800c348:	40c90fdb 	.word	0x40c90fdb
 800c34c:	00000000 	.word	0x00000000
 800c350:	2000054c 	.word	0x2000054c
 800c354:	200005fc 	.word	0x200005fc
 800c358:	2000000c 	.word	0x2000000c
 800c35c:	20000450 	.word	0x20000450

0800c360 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c360:	b480      	push	{r7}
 800c362:	b083      	sub	sp, #12
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
	// }

	/* NOTE : This function should not be modified, when the callback is needed,
			  the HAL_TIM_IC_CaptureCallback could be implemented in the user file
	 */
}
 800c368:	bf00      	nop
 800c36a:	370c      	adds	r7, #12
 800c36c:	46bd      	mov	sp, r7
 800c36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c372:	4770      	bx	lr

0800c374 <FDCAN_Config>:

void FDCAN_Config(void)
{
 800c374:	b480      	push	{r7}
 800c376:	af00      	add	r7, sp, #0
	// TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
	// TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
	// TxHeader.MessageMarker = 0x52;

	// HAL_FDCAN_Start(&hfdcan1);
}
 800c378:	bf00      	nop
 800c37a:	46bd      	mov	sp, r7
 800c37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c380:	4770      	bx	lr
	...

0800c384 <dealPer100us>:
static uchar withoutZeroCnt, powerOnCnt;

static bool _5msFlag, _10msFlag, _20msFlag, _30msFlag, _100msFlag, _500msFlag;

void dealPer100us()
{
 800c384:	b580      	push	{r7, lr}
 800c386:	af00      	add	r7, sp, #0
    static unsigned char cnt;
    if (++cnt >= 10)
 800c388:	4b08      	ldr	r3, [pc, #32]	@ (800c3ac <dealPer100us+0x28>)
 800c38a:	781b      	ldrb	r3, [r3, #0]
 800c38c:	3301      	adds	r3, #1
 800c38e:	b2da      	uxtb	r2, r3
 800c390:	4b06      	ldr	r3, [pc, #24]	@ (800c3ac <dealPer100us+0x28>)
 800c392:	701a      	strb	r2, [r3, #0]
 800c394:	4b05      	ldr	r3, [pc, #20]	@ (800c3ac <dealPer100us+0x28>)
 800c396:	781b      	ldrb	r3, [r3, #0]
 800c398:	2b09      	cmp	r3, #9
 800c39a:	d904      	bls.n	800c3a6 <dealPer100us+0x22>
    {
        cnt = 0;
 800c39c:	4b03      	ldr	r3, [pc, #12]	@ (800c3ac <dealPer100us+0x28>)
 800c39e:	2200      	movs	r2, #0
 800c3a0:	701a      	strb	r2, [r3, #0]
        dealPerMs();
 800c3a2:	f000 f805 	bl	800c3b0 <dealPerMs>
    }

#if ZERO_POLL
    zeroPolling();
#endif
}
 800c3a6:	bf00      	nop
 800c3a8:	bd80      	pop	{r7, pc}
 800c3aa:	bf00      	nop
 800c3ac:	20000674 	.word	0x20000674

0800c3b0 <dealPerMs>:

// 定时器中断调用
 void dealPerMs()
{
 800c3b0:	b480      	push	{r7}
 800c3b2:	af00      	add	r7, sp, #0
    static unsigned char _5msCnt, _30msCnt, _20msCnt, _100msCnt, _10msCnt;
    static uint _500msCnt;
    if (++_5msCnt >= 5)
 800c3b4:	4b40      	ldr	r3, [pc, #256]	@ (800c4b8 <dealPerMs+0x108>)
 800c3b6:	781b      	ldrb	r3, [r3, #0]
 800c3b8:	3301      	adds	r3, #1
 800c3ba:	b2da      	uxtb	r2, r3
 800c3bc:	4b3e      	ldr	r3, [pc, #248]	@ (800c4b8 <dealPerMs+0x108>)
 800c3be:	701a      	strb	r2, [r3, #0]
 800c3c0:	4b3d      	ldr	r3, [pc, #244]	@ (800c4b8 <dealPerMs+0x108>)
 800c3c2:	781b      	ldrb	r3, [r3, #0]
 800c3c4:	2b04      	cmp	r3, #4
 800c3c6:	d905      	bls.n	800c3d4 <dealPerMs+0x24>
    {
        _5msCnt = 0;
 800c3c8:	4b3b      	ldr	r3, [pc, #236]	@ (800c4b8 <dealPerMs+0x108>)
 800c3ca:	2200      	movs	r2, #0
 800c3cc:	701a      	strb	r2, [r3, #0]
        _5msFlag = 1;
 800c3ce:	4b3b      	ldr	r3, [pc, #236]	@ (800c4bc <dealPerMs+0x10c>)
 800c3d0:	2201      	movs	r2, #1
 800c3d2:	701a      	strb	r2, [r3, #0]
    }

    if (++_10msCnt >= 10)
 800c3d4:	4b3a      	ldr	r3, [pc, #232]	@ (800c4c0 <dealPerMs+0x110>)
 800c3d6:	781b      	ldrb	r3, [r3, #0]
 800c3d8:	3301      	adds	r3, #1
 800c3da:	b2da      	uxtb	r2, r3
 800c3dc:	4b38      	ldr	r3, [pc, #224]	@ (800c4c0 <dealPerMs+0x110>)
 800c3de:	701a      	strb	r2, [r3, #0]
 800c3e0:	4b37      	ldr	r3, [pc, #220]	@ (800c4c0 <dealPerMs+0x110>)
 800c3e2:	781b      	ldrb	r3, [r3, #0]
 800c3e4:	2b09      	cmp	r3, #9
 800c3e6:	d905      	bls.n	800c3f4 <dealPerMs+0x44>
    {
        _10msCnt = 0;
 800c3e8:	4b35      	ldr	r3, [pc, #212]	@ (800c4c0 <dealPerMs+0x110>)
 800c3ea:	2200      	movs	r2, #0
 800c3ec:	701a      	strb	r2, [r3, #0]
        _10msFlag = 1;
 800c3ee:	4b35      	ldr	r3, [pc, #212]	@ (800c4c4 <dealPerMs+0x114>)
 800c3f0:	2201      	movs	r2, #1
 800c3f2:	701a      	strb	r2, [r3, #0]
    }

    if (++_20msCnt >= 20)
 800c3f4:	4b34      	ldr	r3, [pc, #208]	@ (800c4c8 <dealPerMs+0x118>)
 800c3f6:	781b      	ldrb	r3, [r3, #0]
 800c3f8:	3301      	adds	r3, #1
 800c3fa:	b2da      	uxtb	r2, r3
 800c3fc:	4b32      	ldr	r3, [pc, #200]	@ (800c4c8 <dealPerMs+0x118>)
 800c3fe:	701a      	strb	r2, [r3, #0]
 800c400:	4b31      	ldr	r3, [pc, #196]	@ (800c4c8 <dealPerMs+0x118>)
 800c402:	781b      	ldrb	r3, [r3, #0]
 800c404:	2b13      	cmp	r3, #19
 800c406:	d905      	bls.n	800c414 <dealPerMs+0x64>
    {
        _20msCnt = 0;
 800c408:	4b2f      	ldr	r3, [pc, #188]	@ (800c4c8 <dealPerMs+0x118>)
 800c40a:	2200      	movs	r2, #0
 800c40c:	701a      	strb	r2, [r3, #0]
        _20msFlag = 1;
 800c40e:	4b2f      	ldr	r3, [pc, #188]	@ (800c4cc <dealPerMs+0x11c>)
 800c410:	2201      	movs	r2, #1
 800c412:	701a      	strb	r2, [r3, #0]
    }

    if (++_30msCnt >= 30)
 800c414:	4b2e      	ldr	r3, [pc, #184]	@ (800c4d0 <dealPerMs+0x120>)
 800c416:	781b      	ldrb	r3, [r3, #0]
 800c418:	3301      	adds	r3, #1
 800c41a:	b2da      	uxtb	r2, r3
 800c41c:	4b2c      	ldr	r3, [pc, #176]	@ (800c4d0 <dealPerMs+0x120>)
 800c41e:	701a      	strb	r2, [r3, #0]
 800c420:	4b2b      	ldr	r3, [pc, #172]	@ (800c4d0 <dealPerMs+0x120>)
 800c422:	781b      	ldrb	r3, [r3, #0]
 800c424:	2b1d      	cmp	r3, #29
 800c426:	d905      	bls.n	800c434 <dealPerMs+0x84>
    {
        _30msCnt = 0;
 800c428:	4b29      	ldr	r3, [pc, #164]	@ (800c4d0 <dealPerMs+0x120>)
 800c42a:	2200      	movs	r2, #0
 800c42c:	701a      	strb	r2, [r3, #0]
        _30msFlag = 1;
 800c42e:	4b29      	ldr	r3, [pc, #164]	@ (800c4d4 <dealPerMs+0x124>)
 800c430:	2201      	movs	r2, #1
 800c432:	701a      	strb	r2, [r3, #0]
    }

    if (++_100msCnt >= 100)
 800c434:	4b28      	ldr	r3, [pc, #160]	@ (800c4d8 <dealPerMs+0x128>)
 800c436:	781b      	ldrb	r3, [r3, #0]
 800c438:	3301      	adds	r3, #1
 800c43a:	b2da      	uxtb	r2, r3
 800c43c:	4b26      	ldr	r3, [pc, #152]	@ (800c4d8 <dealPerMs+0x128>)
 800c43e:	701a      	strb	r2, [r3, #0]
 800c440:	4b25      	ldr	r3, [pc, #148]	@ (800c4d8 <dealPerMs+0x128>)
 800c442:	781b      	ldrb	r3, [r3, #0]
 800c444:	2b63      	cmp	r3, #99	@ 0x63
 800c446:	d905      	bls.n	800c454 <dealPerMs+0xa4>
    {
        _100msCnt = 0;
 800c448:	4b23      	ldr	r3, [pc, #140]	@ (800c4d8 <dealPerMs+0x128>)
 800c44a:	2200      	movs	r2, #0
 800c44c:	701a      	strb	r2, [r3, #0]
        _100msFlag = 1;
 800c44e:	4b23      	ldr	r3, [pc, #140]	@ (800c4dc <dealPerMs+0x12c>)
 800c450:	2201      	movs	r2, #1
 800c452:	701a      	strb	r2, [r3, #0]
    }

    if (++_500msCnt >= 500)
 800c454:	4b22      	ldr	r3, [pc, #136]	@ (800c4e0 <dealPerMs+0x130>)
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	3301      	adds	r3, #1
 800c45a:	4a21      	ldr	r2, [pc, #132]	@ (800c4e0 <dealPerMs+0x130>)
 800c45c:	6013      	str	r3, [r2, #0]
 800c45e:	4b20      	ldr	r3, [pc, #128]	@ (800c4e0 <dealPerMs+0x130>)
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800c466:	d305      	bcc.n	800c474 <dealPerMs+0xc4>
    {
        _500msCnt = 0;
 800c468:	4b1d      	ldr	r3, [pc, #116]	@ (800c4e0 <dealPerMs+0x130>)
 800c46a:	2200      	movs	r2, #0
 800c46c:	601a      	str	r2, [r3, #0]
        _500msFlag = 1;
 800c46e:	4b1d      	ldr	r3, [pc, #116]	@ (800c4e4 <dealPerMs+0x134>)
 800c470:	2201      	movs	r2, #1
 800c472:	701a      	strb	r2, [r3, #0]

        cnt = 0;
    }

#else
    frequence = 50;
 800c474:	4b1c      	ldr	r3, [pc, #112]	@ (800c4e8 <dealPerMs+0x138>)
 800c476:	2232      	movs	r2, #50	@ 0x32
 800c478:	701a      	strb	r2, [r3, #0]
            _1s = 1;
        }
    }
#else

    if (++_1msCnt >= 1000)
 800c47a:	4b1c      	ldr	r3, [pc, #112]	@ (800c4ec <dealPerMs+0x13c>)
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	3301      	adds	r3, #1
 800c480:	4a1a      	ldr	r2, [pc, #104]	@ (800c4ec <dealPerMs+0x13c>)
 800c482:	6013      	str	r3, [r2, #0]
 800c484:	4b19      	ldr	r3, [pc, #100]	@ (800c4ec <dealPerMs+0x13c>)
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c48c:	d305      	bcc.n	800c49a <dealPerMs+0xea>
    {
        _1msCnt = 0;
 800c48e:	4b17      	ldr	r3, [pc, #92]	@ (800c4ec <dealPerMs+0x13c>)
 800c490:	2200      	movs	r2, #0
 800c492:	601a      	str	r2, [r3, #0]
        _1s = 1;
 800c494:	4b16      	ldr	r3, [pc, #88]	@ (800c4f0 <dealPerMs+0x140>)
 800c496:	2201      	movs	r2, #1
 800c498:	701a      	strb	r2, [r3, #0]
    }
#endif
#if SPEED_UP
    _1s = 1;
#endif
    _1ms = 1;
 800c49a:	4b16      	ldr	r3, [pc, #88]	@ (800c4f4 <dealPerMs+0x144>)
 800c49c:	2201      	movs	r2, #1
 800c49e:	701a      	strb	r2, [r3, #0]
        memorize();
        // beepOnce();
    }
#else
    if (withoutZeroCnt < ZERO_ERR_TIME)
        withoutZeroCnt++;
 800c4a0:	4b15      	ldr	r3, [pc, #84]	@ (800c4f8 <dealPerMs+0x148>)
 800c4a2:	781b      	ldrb	r3, [r3, #0]
 800c4a4:	3301      	adds	r3, #1
 800c4a6:	b2da      	uxtb	r2, r3
 800c4a8:	4b13      	ldr	r3, [pc, #76]	@ (800c4f8 <dealPerMs+0x148>)
 800c4aa:	701a      	strb	r2, [r3, #0]
    //             }
    //         }
    //         //	else
    //     }
    // #endif
}
 800c4ac:	bf00      	nop
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b4:	4770      	bx	lr
 800c4b6:	bf00      	nop
 800c4b8:	20000675 	.word	0x20000675
 800c4bc:	2000066e 	.word	0x2000066e
 800c4c0:	20000676 	.word	0x20000676
 800c4c4:	2000066f 	.word	0x2000066f
 800c4c8:	20000677 	.word	0x20000677
 800c4cc:	20000670 	.word	0x20000670
 800c4d0:	20000678 	.word	0x20000678
 800c4d4:	20000671 	.word	0x20000671
 800c4d8:	20000679 	.word	0x20000679
 800c4dc:	20000672 	.word	0x20000672
 800c4e0:	2000067c 	.word	0x2000067c
 800c4e4:	20000673 	.word	0x20000673
 800c4e8:	2000066c 	.word	0x2000066c
 800c4ec:	20000668 	.word	0x20000668
 800c4f0:	20000664 	.word	0x20000664
 800c4f4:	20000665 	.word	0x20000665
 800c4f8:	2000066d 	.word	0x2000066d

0800c4fc <getOneSecFlag>:
    }
}
#endif

bool getOneSecFlag()
{
 800c4fc:	b480      	push	{r7}
 800c4fe:	af00      	add	r7, sp, #0
    if (_1s)
 800c500:	4b07      	ldr	r3, [pc, #28]	@ (800c520 <getOneSecFlag+0x24>)
 800c502:	781b      	ldrb	r3, [r3, #0]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d004      	beq.n	800c512 <getOneSecFlag+0x16>
    {
        _1s = 0;
 800c508:	4b05      	ldr	r3, [pc, #20]	@ (800c520 <getOneSecFlag+0x24>)
 800c50a:	2200      	movs	r2, #0
 800c50c:	701a      	strb	r2, [r3, #0]
        return 1;
 800c50e:	2301      	movs	r3, #1
 800c510:	e000      	b.n	800c514 <getOneSecFlag+0x18>
    }
    else
        return 0;
 800c512:	2300      	movs	r3, #0
}
 800c514:	4618      	mov	r0, r3
 800c516:	46bd      	mov	sp, r7
 800c518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c51c:	4770      	bx	lr
 800c51e:	bf00      	nop
 800c520:	20000664 	.word	0x20000664

0800c524 <get100MsFlag>:
        return 0;
    }
}

bool get100MsFlag()
{
 800c524:	b480      	push	{r7}
 800c526:	af00      	add	r7, sp, #0
    if (_100msFlag)
 800c528:	4b07      	ldr	r3, [pc, #28]	@ (800c548 <get100MsFlag+0x24>)
 800c52a:	781b      	ldrb	r3, [r3, #0]
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d004      	beq.n	800c53a <get100MsFlag+0x16>
    {
        _100msFlag = 0;
 800c530:	4b05      	ldr	r3, [pc, #20]	@ (800c548 <get100MsFlag+0x24>)
 800c532:	2200      	movs	r2, #0
 800c534:	701a      	strb	r2, [r3, #0]
        return 1;
 800c536:	2301      	movs	r3, #1
 800c538:	e000      	b.n	800c53c <get100MsFlag+0x18>
    }
    else
    {
        return 0;
 800c53a:	2300      	movs	r3, #0
    }
}
 800c53c:	4618      	mov	r0, r3
 800c53e:	46bd      	mov	sp, r7
 800c540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c544:	4770      	bx	lr
 800c546:	bf00      	nop
 800c548:	20000672 	.word	0x20000672

0800c54c <setPhaseVoltage>:
    fp->Ualpha = fp->Ud * _cos(fp->angle_el) - fp->Uq * _sin(fp->angle_el);
    fp->Ubeta = fp->Uq * _cos(fp->angle_el) + fp->Ud * _sin(fp->angle_el);
}

void setPhaseVoltage(FocParameters *fp, float Uq, float Ud, float angle_el)
{
 800c54c:	b580      	push	{r7, lr}
 800c54e:	b092      	sub	sp, #72	@ 0x48
 800c550:	af00      	add	r7, sp, #0
 800c552:	60f8      	str	r0, [r7, #12]
 800c554:	ed87 0a02 	vstr	s0, [r7, #8]
 800c558:	edc7 0a01 	vstr	s1, [r7, #4]
 800c55c:	ed87 1a00 	vstr	s2, [r7]

    Uq = _constrain(Uq, -UqMAX, UqMAX);
 800c560:	edd7 7a02 	vldr	s15, [r7, #8]
 800c564:	ed9f 7acc 	vldr	s14, [pc, #816]	@ 800c898 <setPhaseVoltage+0x34c>
 800c568:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c56c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c570:	d501      	bpl.n	800c576 <setPhaseVoltage+0x2a>
 800c572:	4bca      	ldr	r3, [pc, #808]	@ (800c89c <setPhaseVoltage+0x350>)
 800c574:	e00b      	b.n	800c58e <setPhaseVoltage+0x42>
 800c576:	edd7 7a02 	vldr	s15, [r7, #8]
 800c57a:	ed9f 7ac9 	vldr	s14, [pc, #804]	@ 800c8a0 <setPhaseVoltage+0x354>
 800c57e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c586:	dd01      	ble.n	800c58c <setPhaseVoltage+0x40>
 800c588:	4bc6      	ldr	r3, [pc, #792]	@ (800c8a4 <setPhaseVoltage+0x358>)
 800c58a:	e000      	b.n	800c58e <setPhaseVoltage+0x42>
 800c58c:	68bb      	ldr	r3, [r7, #8]
 800c58e:	60bb      	str	r3, [r7, #8]

    float ct;
    float st;
    _sincos(angle_el, &st, &ct);
 800c590:	f107 0214 	add.w	r2, r7, #20
 800c594:	f107 0310 	add.w	r3, r7, #16
 800c598:	4611      	mov	r1, r2
 800c59a:	4618      	mov	r0, r3
 800c59c:	ed97 0a00 	vldr	s0, [r7]
 800c5a0:	f7ff fc96 	bl	800bed0 <_sincos>
    // Park逆变换
    float Ualpha = -Uq * st + Ud * ct;
 800c5a4:	edd7 7a02 	vldr	s15, [r7, #8]
 800c5a8:	eeb1 7a67 	vneg.f32	s14, s15
 800c5ac:	edd7 7a04 	vldr	s15, [r7, #16]
 800c5b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c5b4:	edd7 6a05 	vldr	s13, [r7, #20]
 800c5b8:	edd7 7a01 	vldr	s15, [r7, #4]
 800c5bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c5c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c5c4:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    float Ubeta = Uq * ct + Ud * st;
 800c5c8:	ed97 7a05 	vldr	s14, [r7, #20]
 800c5cc:	edd7 7a02 	vldr	s15, [r7, #8]
 800c5d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c5d4:	edd7 6a04 	vldr	s13, [r7, #16]
 800c5d8:	edd7 7a01 	vldr	s15, [r7, #4]
 800c5dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c5e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c5e4:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    uint32_t d1, d2, d3;
    float tFirst = 0, tSecond = 0;
 800c5e8:	f04f 0300 	mov.w	r3, #0
 800c5ec:	633b      	str	r3, [r7, #48]	@ 0x30
 800c5ee:	f04f 0300 	mov.w	r3, #0
 800c5f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    float K = _SQRT3 * HALP_PWM_PERIOD / U_DC;
 800c5f4:	4bac      	ldr	r3, [pc, #688]	@ (800c8a8 <setPhaseVoltage+0x35c>)
 800c5f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    float X = K * Ubeta;
 800c5f8:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800c5fc:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800c600:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c604:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float Y = K * (_SQRT3 * Ualpha / 2.0f - Ubeta / 2.0f);
 800c608:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800c60c:	ed9f 7aa7 	vldr	s14, [pc, #668]	@ 800c8ac <setPhaseVoltage+0x360>
 800c610:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c614:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800c618:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800c61c:	edd7 6a0d 	vldr	s13, [r7, #52]	@ 0x34
 800c620:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800c624:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800c628:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c62c:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800c630:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c634:	edc7 7a08 	vstr	s15, [r7, #32]
    float Z = K * (-_SQRT3 * Ualpha / 2.0f - Ubeta / 2.0f);
 800c638:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800c63c:	ed9f 7a9c 	vldr	s14, [pc, #624]	@ 800c8b0 <setPhaseVoltage+0x364>
 800c640:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c644:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800c648:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800c64c:	edd7 6a0d 	vldr	s13, [r7, #52]	@ 0x34
 800c650:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800c654:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800c658:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c65c:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800c660:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c664:	edc7 7a07 	vstr	s15, [r7, #28]

    uint8_t sector = sectorRemap[(X > 0.0f) + ((Y > 0.0f) << 1) + ((Z > 0.0f) << 2)]; // sector = A + 2B + 4C
 800c668:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800c66c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c674:	bfcc      	ite	gt
 800c676:	2301      	movgt	r3, #1
 800c678:	2300      	movle	r3, #0
 800c67a:	b2db      	uxtb	r3, r3
 800c67c:	461a      	mov	r2, r3
 800c67e:	edd7 7a08 	vldr	s15, [r7, #32]
 800c682:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c68a:	dd01      	ble.n	800c690 <setPhaseVoltage+0x144>
 800c68c:	2302      	movs	r3, #2
 800c68e:	e000      	b.n	800c692 <setPhaseVoltage+0x146>
 800c690:	2300      	movs	r3, #0
 800c692:	4413      	add	r3, r2
 800c694:	edd7 7a07 	vldr	s15, [r7, #28]
 800c698:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c69c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6a0:	dd01      	ble.n	800c6a6 <setPhaseVoltage+0x15a>
 800c6a2:	2204      	movs	r2, #4
 800c6a4:	e000      	b.n	800c6a8 <setPhaseVoltage+0x15c>
 800c6a6:	2200      	movs	r2, #0
 800c6a8:	4413      	add	r3, r2
 800c6aa:	4a82      	ldr	r2, [pc, #520]	@ (800c8b4 <setPhaseVoltage+0x368>)
 800c6ac:	5cd3      	ldrb	r3, [r2, r3]
 800c6ae:	76fb      	strb	r3, [r7, #27]

    switch (sector)
 800c6b0:	7efb      	ldrb	r3, [r7, #27]
 800c6b2:	3b01      	subs	r3, #1
 800c6b4:	2b05      	cmp	r3, #5
 800c6b6:	f200 8171 	bhi.w	800c99c <setPhaseVoltage+0x450>
 800c6ba:	a201      	add	r2, pc, #4	@ (adr r2, 800c6c0 <setPhaseVoltage+0x174>)
 800c6bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6c0:	0800c6d9 	.word	0x0800c6d9
 800c6c4:	0800c741 	.word	0x0800c741
 800c6c8:	0800c7b9 	.word	0x0800c7b9
 800c6cc:	0800c821 	.word	0x0800c821
 800c6d0:	0800c8bd 	.word	0x0800c8bd
 800c6d4:	0800c925 	.word	0x0800c925
    {
    case 1:
        tFirst = Y;
 800c6d8:	6a3b      	ldr	r3, [r7, #32]
 800c6da:	633b      	str	r3, [r7, #48]	@ 0x30
        tSecond = X;
 800c6dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6de:	62fb      	str	r3, [r7, #44]	@ 0x2c
        d1 = (HALP_PWM_PERIOD - tFirst - tSecond) / 2.0f;
 800c6e0:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 800c8b8 <setPhaseVoltage+0x36c>
 800c6e4:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800c6e8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c6ec:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800c6f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c6f4:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800c6f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c6fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c700:	ee17 3a90 	vmov	r3, s15
 800c704:	647b      	str	r3, [r7, #68]	@ 0x44
        d2 = d1 + tFirst;
 800c706:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c708:	ee07 3a90 	vmov	s15, r3
 800c70c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c710:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800c714:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c718:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c71c:	ee17 3a90 	vmov	r3, s15
 800c720:	643b      	str	r3, [r7, #64]	@ 0x40
        d3 = d2 + tSecond;
 800c722:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c724:	ee07 3a90 	vmov	s15, r3
 800c728:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c72c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800c730:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c734:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c738:	ee17 3a90 	vmov	r3, s15
 800c73c:	63fb      	str	r3, [r7, #60]	@ 0x3c

        break;
 800c73e:	e12d      	b.n	800c99c <setPhaseVoltage+0x450>
    case 2:
        tFirst = -Y;
 800c740:	edd7 7a08 	vldr	s15, [r7, #32]
 800c744:	eef1 7a67 	vneg.f32	s15, s15
 800c748:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
        tSecond = -Z;
 800c74c:	edd7 7a07 	vldr	s15, [r7, #28]
 800c750:	eef1 7a67 	vneg.f32	s15, s15
 800c754:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        d2 = (HALP_PWM_PERIOD - tFirst - tSecond) / 2.0f;
 800c758:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 800c8b8 <setPhaseVoltage+0x36c>
 800c75c:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800c760:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c764:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800c768:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c76c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800c770:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c774:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c778:	ee17 3a90 	vmov	r3, s15
 800c77c:	643b      	str	r3, [r7, #64]	@ 0x40
        d1 = d2 + tFirst;
 800c77e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c780:	ee07 3a90 	vmov	s15, r3
 800c784:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c788:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800c78c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c790:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c794:	ee17 3a90 	vmov	r3, s15
 800c798:	647b      	str	r3, [r7, #68]	@ 0x44
        d3 = d1 + tSecond;
 800c79a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c79c:	ee07 3a90 	vmov	s15, r3
 800c7a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c7a4:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800c7a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c7ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c7b0:	ee17 3a90 	vmov	r3, s15
 800c7b4:	63fb      	str	r3, [r7, #60]	@ 0x3c

        break;
 800c7b6:	e0f1      	b.n	800c99c <setPhaseVoltage+0x450>
    case 3:
        tFirst = X;
 800c7b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7ba:	633b      	str	r3, [r7, #48]	@ 0x30
        tSecond = Z;
 800c7bc:	69fb      	ldr	r3, [r7, #28]
 800c7be:	62fb      	str	r3, [r7, #44]	@ 0x2c
        d2 = (HALP_PWM_PERIOD - tFirst - tSecond) / 2.0f;
 800c7c0:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 800c8b8 <setPhaseVoltage+0x36c>
 800c7c4:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800c7c8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c7cc:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800c7d0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c7d4:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800c7d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c7dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c7e0:	ee17 3a90 	vmov	r3, s15
 800c7e4:	643b      	str	r3, [r7, #64]	@ 0x40
        d3 = d2 + tFirst;
 800c7e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c7e8:	ee07 3a90 	vmov	s15, r3
 800c7ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c7f0:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800c7f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c7f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c7fc:	ee17 3a90 	vmov	r3, s15
 800c800:	63fb      	str	r3, [r7, #60]	@ 0x3c
        d1 = d3 + tSecond;
 800c802:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c804:	ee07 3a90 	vmov	s15, r3
 800c808:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c80c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800c810:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c814:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c818:	ee17 3a90 	vmov	r3, s15
 800c81c:	647b      	str	r3, [r7, #68]	@ 0x44

        break;
 800c81e:	e0bd      	b.n	800c99c <setPhaseVoltage+0x450>
    case 4:
        tFirst = -X;
 800c820:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800c824:	eef1 7a67 	vneg.f32	s15, s15
 800c828:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
        tSecond = -Y;
 800c82c:	edd7 7a08 	vldr	s15, [r7, #32]
 800c830:	eef1 7a67 	vneg.f32	s15, s15
 800c834:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        d3 = (HALP_PWM_PERIOD - tFirst - tSecond) / 2.0f;
 800c838:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 800c8b8 <setPhaseVoltage+0x36c>
 800c83c:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800c840:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c844:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800c848:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c84c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800c850:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c854:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c858:	ee17 3a90 	vmov	r3, s15
 800c85c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        d2 = d3 + tFirst;
 800c85e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c860:	ee07 3a90 	vmov	s15, r3
 800c864:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c868:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800c86c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c870:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c874:	ee17 3a90 	vmov	r3, s15
 800c878:	643b      	str	r3, [r7, #64]	@ 0x40
        d1 = d2 + tSecond;
 800c87a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c87c:	ee07 3a90 	vmov	s15, r3
 800c880:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c884:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800c888:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c88c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c890:	ee17 3a90 	vmov	r3, s15
 800c894:	647b      	str	r3, [r7, #68]	@ 0x44

        break;
 800c896:	e081      	b.n	800c99c <setPhaseVoltage+0x450>
 800c898:	c0ddb3d7 	.word	0xc0ddb3d7
 800c89c:	c0ddb3d7 	.word	0xc0ddb3d7
 800c8a0:	40ddb3d7 	.word	0x40ddb3d7
 800c8a4:	40ddb3d7 	.word	0x40ddb3d7
 800c8a8:	4490566b 	.word	0x4490566b
 800c8ac:	3fddb3d7 	.word	0x3fddb3d7
 800c8b0:	bfddb3d7 	.word	0xbfddb3d7
 800c8b4:	0800cd28 	.word	0x0800cd28
 800c8b8:	45fa0000 	.word	0x45fa0000

    case 5:
        tFirst = Z;
 800c8bc:	69fb      	ldr	r3, [r7, #28]
 800c8be:	633b      	str	r3, [r7, #48]	@ 0x30
        tSecond = Y;
 800c8c0:	6a3b      	ldr	r3, [r7, #32]
 800c8c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        d3 = (HALP_PWM_PERIOD - tFirst - tSecond) / 2.0f;
 800c8c4:	ed1f 7a04 	vldr	s14, [pc, #-16]	@ 800c8b8 <setPhaseVoltage+0x36c>
 800c8c8:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800c8cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c8d0:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800c8d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c8d8:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800c8dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c8e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c8e4:	ee17 3a90 	vmov	r3, s15
 800c8e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        d1 = d3 + tFirst;
 800c8ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c8ec:	ee07 3a90 	vmov	s15, r3
 800c8f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c8f4:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800c8f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c8fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c900:	ee17 3a90 	vmov	r3, s15
 800c904:	647b      	str	r3, [r7, #68]	@ 0x44
        d2 = d1 + tSecond;
 800c906:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c908:	ee07 3a90 	vmov	s15, r3
 800c90c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c910:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800c914:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c918:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c91c:	ee17 3a90 	vmov	r3, s15
 800c920:	643b      	str	r3, [r7, #64]	@ 0x40

        break;
 800c922:	e03b      	b.n	800c99c <setPhaseVoltage+0x450>

    case 6:
        tFirst = -Z;
 800c924:	edd7 7a07 	vldr	s15, [r7, #28]
 800c928:	eef1 7a67 	vneg.f32	s15, s15
 800c92c:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
        tSecond = -X;
 800c930:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800c934:	eef1 7a67 	vneg.f32	s15, s15
 800c938:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        d1 = (HALP_PWM_PERIOD - tFirst - tSecond) / 2.0f;
 800c93c:	ed1f 7a22 	vldr	s14, [pc, #-136]	@ 800c8b8 <setPhaseVoltage+0x36c>
 800c940:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800c944:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c948:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800c94c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c950:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800c954:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c958:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c95c:	ee17 3a90 	vmov	r3, s15
 800c960:	647b      	str	r3, [r7, #68]	@ 0x44
        d3 = d1 + tFirst;
 800c962:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c964:	ee07 3a90 	vmov	s15, r3
 800c968:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c96c:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800c970:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c974:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c978:	ee17 3a90 	vmov	r3, s15
 800c97c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        d2 = d3 + tSecond;
 800c97e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c980:	ee07 3a90 	vmov	s15, r3
 800c984:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c988:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800c98c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c990:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c994:	ee17 3a90 	vmov	r3, s15
 800c998:	643b      	str	r3, [r7, #64]	@ 0x40

        break;
 800c99a:	bf00      	nop
    }
#if SHOW_WAVE
    fp->d1 = d1;
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c9a0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
    fp->d2 = d2;
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c9a8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
    fp->d3 = d3;
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c9b0:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
#endif

    fp->setPwm(d1, d2, d3);
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800c9ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c9bc:	b290      	uxth	r0, r2
 800c9be:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c9c0:	b291      	uxth	r1, r2
 800c9c2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c9c4:	b292      	uxth	r2, r2
 800c9c6:	4798      	blx	r3
}
 800c9c8:	bf00      	nop
 800c9ca:	3748      	adds	r7, #72	@ 0x48
 800c9cc:	46bd      	mov	sp, r7
 800c9ce:	bd80      	pop	{r7, pc}

0800c9d0 <memset>:
 800c9d0:	4402      	add	r2, r0
 800c9d2:	4603      	mov	r3, r0
 800c9d4:	4293      	cmp	r3, r2
 800c9d6:	d100      	bne.n	800c9da <memset+0xa>
 800c9d8:	4770      	bx	lr
 800c9da:	f803 1b01 	strb.w	r1, [r3], #1
 800c9de:	e7f9      	b.n	800c9d4 <memset+0x4>

0800c9e0 <__errno>:
 800c9e0:	4b01      	ldr	r3, [pc, #4]	@ (800c9e8 <__errno+0x8>)
 800c9e2:	6818      	ldr	r0, [r3, #0]
 800c9e4:	4770      	bx	lr
 800c9e6:	bf00      	nop
 800c9e8:	200000a8 	.word	0x200000a8

0800c9ec <__libc_init_array>:
 800c9ec:	b570      	push	{r4, r5, r6, lr}
 800c9ee:	4d0d      	ldr	r5, [pc, #52]	@ (800ca24 <__libc_init_array+0x38>)
 800c9f0:	4c0d      	ldr	r4, [pc, #52]	@ (800ca28 <__libc_init_array+0x3c>)
 800c9f2:	1b64      	subs	r4, r4, r5
 800c9f4:	10a4      	asrs	r4, r4, #2
 800c9f6:	2600      	movs	r6, #0
 800c9f8:	42a6      	cmp	r6, r4
 800c9fa:	d109      	bne.n	800ca10 <__libc_init_array+0x24>
 800c9fc:	4d0b      	ldr	r5, [pc, #44]	@ (800ca2c <__libc_init_array+0x40>)
 800c9fe:	4c0c      	ldr	r4, [pc, #48]	@ (800ca30 <__libc_init_array+0x44>)
 800ca00:	f000 f95e 	bl	800ccc0 <_init>
 800ca04:	1b64      	subs	r4, r4, r5
 800ca06:	10a4      	asrs	r4, r4, #2
 800ca08:	2600      	movs	r6, #0
 800ca0a:	42a6      	cmp	r6, r4
 800ca0c:	d105      	bne.n	800ca1a <__libc_init_array+0x2e>
 800ca0e:	bd70      	pop	{r4, r5, r6, pc}
 800ca10:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca14:	4798      	blx	r3
 800ca16:	3601      	adds	r6, #1
 800ca18:	e7ee      	b.n	800c9f8 <__libc_init_array+0xc>
 800ca1a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca1e:	4798      	blx	r3
 800ca20:	3601      	adds	r6, #1
 800ca22:	e7f2      	b.n	800ca0a <__libc_init_array+0x1e>
 800ca24:	0800cd48 	.word	0x0800cd48
 800ca28:	0800cd48 	.word	0x0800cd48
 800ca2c:	0800cd48 	.word	0x0800cd48
 800ca30:	0800cd4c 	.word	0x0800cd4c

0800ca34 <memcpy>:
 800ca34:	440a      	add	r2, r1
 800ca36:	4291      	cmp	r1, r2
 800ca38:	f100 33ff 	add.w	r3, r0, #4294967295
 800ca3c:	d100      	bne.n	800ca40 <memcpy+0xc>
 800ca3e:	4770      	bx	lr
 800ca40:	b510      	push	{r4, lr}
 800ca42:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ca46:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ca4a:	4291      	cmp	r1, r2
 800ca4c:	d1f9      	bne.n	800ca42 <memcpy+0xe>
 800ca4e:	bd10      	pop	{r4, pc}

0800ca50 <fmod>:
 800ca50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca52:	ed2d 8b02 	vpush	{d8}
 800ca56:	ec57 6b10 	vmov	r6, r7, d0
 800ca5a:	ec55 4b11 	vmov	r4, r5, d1
 800ca5e:	f000 f825 	bl	800caac <__ieee754_fmod>
 800ca62:	4622      	mov	r2, r4
 800ca64:	462b      	mov	r3, r5
 800ca66:	4630      	mov	r0, r6
 800ca68:	4639      	mov	r1, r7
 800ca6a:	eeb0 8a40 	vmov.f32	s16, s0
 800ca6e:	eef0 8a60 	vmov.f32	s17, s1
 800ca72:	f7f4 f827 	bl	8000ac4 <__aeabi_dcmpun>
 800ca76:	b990      	cbnz	r0, 800ca9e <fmod+0x4e>
 800ca78:	2200      	movs	r2, #0
 800ca7a:	2300      	movs	r3, #0
 800ca7c:	4620      	mov	r0, r4
 800ca7e:	4629      	mov	r1, r5
 800ca80:	f7f3 ffee 	bl	8000a60 <__aeabi_dcmpeq>
 800ca84:	b158      	cbz	r0, 800ca9e <fmod+0x4e>
 800ca86:	f7ff ffab 	bl	800c9e0 <__errno>
 800ca8a:	2321      	movs	r3, #33	@ 0x21
 800ca8c:	6003      	str	r3, [r0, #0]
 800ca8e:	2200      	movs	r2, #0
 800ca90:	2300      	movs	r3, #0
 800ca92:	4610      	mov	r0, r2
 800ca94:	4619      	mov	r1, r3
 800ca96:	f7f3 fea5 	bl	80007e4 <__aeabi_ddiv>
 800ca9a:	ec41 0b18 	vmov	d8, r0, r1
 800ca9e:	eeb0 0a48 	vmov.f32	s0, s16
 800caa2:	eef0 0a68 	vmov.f32	s1, s17
 800caa6:	ecbd 8b02 	vpop	{d8}
 800caaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800caac <__ieee754_fmod>:
 800caac:	ec53 2b11 	vmov	r2, r3, d1
 800cab0:	f023 4c00 	bic.w	ip, r3, #2147483648	@ 0x80000000
 800cab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cab8:	ea52 040c 	orrs.w	r4, r2, ip
 800cabc:	ec51 0b10 	vmov	r0, r1, d0
 800cac0:	461e      	mov	r6, r3
 800cac2:	4617      	mov	r7, r2
 800cac4:	4696      	mov	lr, r2
 800cac6:	d00c      	beq.n	800cae2 <__ieee754_fmod+0x36>
 800cac8:	4c77      	ldr	r4, [pc, #476]	@ (800cca8 <__ieee754_fmod+0x1fc>)
 800caca:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 800cace:	45a0      	cmp	r8, r4
 800cad0:	4689      	mov	r9, r1
 800cad2:	d806      	bhi.n	800cae2 <__ieee754_fmod+0x36>
 800cad4:	4254      	negs	r4, r2
 800cad6:	4d75      	ldr	r5, [pc, #468]	@ (800ccac <__ieee754_fmod+0x200>)
 800cad8:	4314      	orrs	r4, r2
 800cada:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 800cade:	42ac      	cmp	r4, r5
 800cae0:	d909      	bls.n	800caf6 <__ieee754_fmod+0x4a>
 800cae2:	f7f3 fd55 	bl	8000590 <__aeabi_dmul>
 800cae6:	4602      	mov	r2, r0
 800cae8:	460b      	mov	r3, r1
 800caea:	f7f3 fe7b 	bl	80007e4 <__aeabi_ddiv>
 800caee:	ec41 0b10 	vmov	d0, r0, r1
 800caf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800caf6:	45e0      	cmp	r8, ip
 800caf8:	4682      	mov	sl, r0
 800cafa:	4604      	mov	r4, r0
 800cafc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800cb00:	dc09      	bgt.n	800cb16 <__ieee754_fmod+0x6a>
 800cb02:	dbf4      	blt.n	800caee <__ieee754_fmod+0x42>
 800cb04:	4282      	cmp	r2, r0
 800cb06:	d8f2      	bhi.n	800caee <__ieee754_fmod+0x42>
 800cb08:	d105      	bne.n	800cb16 <__ieee754_fmod+0x6a>
 800cb0a:	4b69      	ldr	r3, [pc, #420]	@ (800ccb0 <__ieee754_fmod+0x204>)
 800cb0c:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 800cb10:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cb14:	e7eb      	b.n	800caee <__ieee754_fmod+0x42>
 800cb16:	4a65      	ldr	r2, [pc, #404]	@ (800ccac <__ieee754_fmod+0x200>)
 800cb18:	ea19 0f02 	tst.w	r9, r2
 800cb1c:	d148      	bne.n	800cbb0 <__ieee754_fmod+0x104>
 800cb1e:	f1b8 0f00 	cmp.w	r8, #0
 800cb22:	d13d      	bne.n	800cba0 <__ieee754_fmod+0xf4>
 800cb24:	4963      	ldr	r1, [pc, #396]	@ (800ccb4 <__ieee754_fmod+0x208>)
 800cb26:	4653      	mov	r3, sl
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	dc36      	bgt.n	800cb9a <__ieee754_fmod+0xee>
 800cb2c:	4216      	tst	r6, r2
 800cb2e:	d14f      	bne.n	800cbd0 <__ieee754_fmod+0x124>
 800cb30:	f1bc 0f00 	cmp.w	ip, #0
 800cb34:	d144      	bne.n	800cbc0 <__ieee754_fmod+0x114>
 800cb36:	4a5f      	ldr	r2, [pc, #380]	@ (800ccb4 <__ieee754_fmod+0x208>)
 800cb38:	463b      	mov	r3, r7
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	dc3d      	bgt.n	800cbba <__ieee754_fmod+0x10e>
 800cb3e:	485e      	ldr	r0, [pc, #376]	@ (800ccb8 <__ieee754_fmod+0x20c>)
 800cb40:	4281      	cmp	r1, r0
 800cb42:	db4a      	blt.n	800cbda <__ieee754_fmod+0x12e>
 800cb44:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cb48:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cb4c:	485a      	ldr	r0, [pc, #360]	@ (800ccb8 <__ieee754_fmod+0x20c>)
 800cb4e:	4282      	cmp	r2, r0
 800cb50:	db57      	blt.n	800cc02 <__ieee754_fmod+0x156>
 800cb52:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800cb56:	f446 1680 	orr.w	r6, r6, #1048576	@ 0x100000
 800cb5a:	1a89      	subs	r1, r1, r2
 800cb5c:	1b98      	subs	r0, r3, r6
 800cb5e:	eba4 070e 	sub.w	r7, r4, lr
 800cb62:	2900      	cmp	r1, #0
 800cb64:	d162      	bne.n	800cc2c <__ieee754_fmod+0x180>
 800cb66:	4574      	cmp	r4, lr
 800cb68:	bf38      	it	cc
 800cb6a:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800cb6e:	2800      	cmp	r0, #0
 800cb70:	bfa4      	itt	ge
 800cb72:	463c      	movge	r4, r7
 800cb74:	4603      	movge	r3, r0
 800cb76:	ea53 0104 	orrs.w	r1, r3, r4
 800cb7a:	d0c6      	beq.n	800cb0a <__ieee754_fmod+0x5e>
 800cb7c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cb80:	db69      	blt.n	800cc56 <__ieee754_fmod+0x1aa>
 800cb82:	494d      	ldr	r1, [pc, #308]	@ (800ccb8 <__ieee754_fmod+0x20c>)
 800cb84:	428a      	cmp	r2, r1
 800cb86:	db6c      	blt.n	800cc62 <__ieee754_fmod+0x1b6>
 800cb88:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800cb8c:	432b      	orrs	r3, r5
 800cb8e:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 800cb92:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800cb96:	4620      	mov	r0, r4
 800cb98:	e7a9      	b.n	800caee <__ieee754_fmod+0x42>
 800cb9a:	3901      	subs	r1, #1
 800cb9c:	005b      	lsls	r3, r3, #1
 800cb9e:	e7c3      	b.n	800cb28 <__ieee754_fmod+0x7c>
 800cba0:	4945      	ldr	r1, [pc, #276]	@ (800ccb8 <__ieee754_fmod+0x20c>)
 800cba2:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	ddc0      	ble.n	800cb2c <__ieee754_fmod+0x80>
 800cbaa:	3901      	subs	r1, #1
 800cbac:	005b      	lsls	r3, r3, #1
 800cbae:	e7fa      	b.n	800cba6 <__ieee754_fmod+0xfa>
 800cbb0:	ea4f 5128 	mov.w	r1, r8, asr #20
 800cbb4:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800cbb8:	e7b8      	b.n	800cb2c <__ieee754_fmod+0x80>
 800cbba:	3a01      	subs	r2, #1
 800cbbc:	005b      	lsls	r3, r3, #1
 800cbbe:	e7bc      	b.n	800cb3a <__ieee754_fmod+0x8e>
 800cbc0:	4a3d      	ldr	r2, [pc, #244]	@ (800ccb8 <__ieee754_fmod+0x20c>)
 800cbc2:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	ddb9      	ble.n	800cb3e <__ieee754_fmod+0x92>
 800cbca:	3a01      	subs	r2, #1
 800cbcc:	005b      	lsls	r3, r3, #1
 800cbce:	e7fa      	b.n	800cbc6 <__ieee754_fmod+0x11a>
 800cbd0:	ea4f 522c 	mov.w	r2, ip, asr #20
 800cbd4:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800cbd8:	e7b1      	b.n	800cb3e <__ieee754_fmod+0x92>
 800cbda:	1a40      	subs	r0, r0, r1
 800cbdc:	281f      	cmp	r0, #31
 800cbde:	dc0a      	bgt.n	800cbf6 <__ieee754_fmod+0x14a>
 800cbe0:	f201 431e 	addw	r3, r1, #1054	@ 0x41e
 800cbe4:	fa08 f800 	lsl.w	r8, r8, r0
 800cbe8:	fa2a f303 	lsr.w	r3, sl, r3
 800cbec:	ea43 0308 	orr.w	r3, r3, r8
 800cbf0:	fa0a f400 	lsl.w	r4, sl, r0
 800cbf4:	e7aa      	b.n	800cb4c <__ieee754_fmod+0xa0>
 800cbf6:	4b31      	ldr	r3, [pc, #196]	@ (800ccbc <__ieee754_fmod+0x210>)
 800cbf8:	1a5b      	subs	r3, r3, r1
 800cbfa:	fa0a f303 	lsl.w	r3, sl, r3
 800cbfe:	2400      	movs	r4, #0
 800cc00:	e7a4      	b.n	800cb4c <__ieee754_fmod+0xa0>
 800cc02:	1a80      	subs	r0, r0, r2
 800cc04:	281f      	cmp	r0, #31
 800cc06:	dc0a      	bgt.n	800cc1e <__ieee754_fmod+0x172>
 800cc08:	f202 461e 	addw	r6, r2, #1054	@ 0x41e
 800cc0c:	fa0c fc00 	lsl.w	ip, ip, r0
 800cc10:	fa27 f606 	lsr.w	r6, r7, r6
 800cc14:	ea46 060c 	orr.w	r6, r6, ip
 800cc18:	fa07 fe00 	lsl.w	lr, r7, r0
 800cc1c:	e79d      	b.n	800cb5a <__ieee754_fmod+0xae>
 800cc1e:	4e27      	ldr	r6, [pc, #156]	@ (800ccbc <__ieee754_fmod+0x210>)
 800cc20:	1ab6      	subs	r6, r6, r2
 800cc22:	fa07 f606 	lsl.w	r6, r7, r6
 800cc26:	f04f 0e00 	mov.w	lr, #0
 800cc2a:	e796      	b.n	800cb5a <__ieee754_fmod+0xae>
 800cc2c:	4574      	cmp	r4, lr
 800cc2e:	bf38      	it	cc
 800cc30:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800cc34:	2800      	cmp	r0, #0
 800cc36:	da05      	bge.n	800cc44 <__ieee754_fmod+0x198>
 800cc38:	0fe0      	lsrs	r0, r4, #31
 800cc3a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800cc3e:	0064      	lsls	r4, r4, #1
 800cc40:	3901      	subs	r1, #1
 800cc42:	e78b      	b.n	800cb5c <__ieee754_fmod+0xb0>
 800cc44:	ea50 0307 	orrs.w	r3, r0, r7
 800cc48:	f43f af5f 	beq.w	800cb0a <__ieee754_fmod+0x5e>
 800cc4c:	0ffb      	lsrs	r3, r7, #31
 800cc4e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800cc52:	007c      	lsls	r4, r7, #1
 800cc54:	e7f4      	b.n	800cc40 <__ieee754_fmod+0x194>
 800cc56:	0fe1      	lsrs	r1, r4, #31
 800cc58:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800cc5c:	0064      	lsls	r4, r4, #1
 800cc5e:	3a01      	subs	r2, #1
 800cc60:	e78c      	b.n	800cb7c <__ieee754_fmod+0xd0>
 800cc62:	1a89      	subs	r1, r1, r2
 800cc64:	2914      	cmp	r1, #20
 800cc66:	dc0a      	bgt.n	800cc7e <__ieee754_fmod+0x1d2>
 800cc68:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 800cc6c:	fa03 f202 	lsl.w	r2, r3, r2
 800cc70:	40cc      	lsrs	r4, r1
 800cc72:	4322      	orrs	r2, r4
 800cc74:	410b      	asrs	r3, r1
 800cc76:	ea43 0105 	orr.w	r1, r3, r5
 800cc7a:	4610      	mov	r0, r2
 800cc7c:	e737      	b.n	800caee <__ieee754_fmod+0x42>
 800cc7e:	291f      	cmp	r1, #31
 800cc80:	dc07      	bgt.n	800cc92 <__ieee754_fmod+0x1e6>
 800cc82:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 800cc86:	40cc      	lsrs	r4, r1
 800cc88:	fa03 f202 	lsl.w	r2, r3, r2
 800cc8c:	4322      	orrs	r2, r4
 800cc8e:	462b      	mov	r3, r5
 800cc90:	e7f1      	b.n	800cc76 <__ieee754_fmod+0x1ca>
 800cc92:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 800cc96:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 800cc9a:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 800cc9e:	32e2      	adds	r2, #226	@ 0xe2
 800cca0:	fa43 f202 	asr.w	r2, r3, r2
 800cca4:	e7f3      	b.n	800cc8e <__ieee754_fmod+0x1e2>
 800cca6:	bf00      	nop
 800cca8:	7fefffff 	.word	0x7fefffff
 800ccac:	7ff00000 	.word	0x7ff00000
 800ccb0:	0800cd30 	.word	0x0800cd30
 800ccb4:	fffffbed 	.word	0xfffffbed
 800ccb8:	fffffc02 	.word	0xfffffc02
 800ccbc:	fffffbe2 	.word	0xfffffbe2

0800ccc0 <_init>:
 800ccc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccc2:	bf00      	nop
 800ccc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ccc6:	bc08      	pop	{r3}
 800ccc8:	469e      	mov	lr, r3
 800ccca:	4770      	bx	lr

0800cccc <_fini>:
 800cccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccce:	bf00      	nop
 800ccd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ccd2:	bc08      	pop	{r3}
 800ccd4:	469e      	mov	lr, r3
 800ccd6:	4770      	bx	lr
