
focTemplate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b144  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  0800b31c  0800b31c  0000c31c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b36c  0800b36c  0000d024  2**0
                  CONTENTS
  4 .ARM          00000008  0800b36c  0800b36c  0000c36c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b374  0800b374  0000d024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b374  0800b374  0000c374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b378  0800b378  0000c378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20000000  0800b37c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000510  20000024  0800b3a0  0000d024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000534  0800b3a0  0000d534  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d024  2**0
                  CONTENTS, READONLY
 12 .debug_info   000225b1  00000000  00000000  0000d054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000484f  00000000  00000000  0002f605  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b88  00000000  00000000  00033e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001519  00000000  00000000  000359e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024c81  00000000  00000000  00036ef9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023a77  00000000  00000000  0005bb7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ea1cb  00000000  00000000  0007f5f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001697bc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000741c  00000000  00000000  00169800  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  00170c1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000024 	.word	0x20000024
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800b304 	.word	0x0800b304

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000028 	.word	0x20000028
 8000214:	0800b304 	.word	0x0800b304

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_d2f>:
 8000590:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000594:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000598:	bf24      	itt	cs
 800059a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800059e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80005a2:	d90d      	bls.n	80005c0 <__aeabi_d2f+0x30>
 80005a4:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005a8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80005ac:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80005b0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80005b4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80005b8:	bf08      	it	eq
 80005ba:	f020 0001 	biceq.w	r0, r0, #1
 80005be:	4770      	bx	lr
 80005c0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80005c4:	d121      	bne.n	800060a <__aeabi_d2f+0x7a>
 80005c6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80005ca:	bfbc      	itt	lt
 80005cc:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80005d0:	4770      	bxlt	lr
 80005d2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005d6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80005da:	f1c2 0218 	rsb	r2, r2, #24
 80005de:	f1c2 0c20 	rsb	ip, r2, #32
 80005e2:	fa10 f30c 	lsls.w	r3, r0, ip
 80005e6:	fa20 f002 	lsr.w	r0, r0, r2
 80005ea:	bf18      	it	ne
 80005ec:	f040 0001 	orrne.w	r0, r0, #1
 80005f0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80005f4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80005f8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80005fc:	ea40 000c 	orr.w	r0, r0, ip
 8000600:	fa23 f302 	lsr.w	r3, r3, r2
 8000604:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000608:	e7cc      	b.n	80005a4 <__aeabi_d2f+0x14>
 800060a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800060e:	d107      	bne.n	8000620 <__aeabi_d2f+0x90>
 8000610:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000614:	bf1e      	ittt	ne
 8000616:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 800061a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800061e:	4770      	bxne	lr
 8000620:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000624:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000628:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop

08000630 <__aeabi_uldivmod>:
 8000630:	b953      	cbnz	r3, 8000648 <__aeabi_uldivmod+0x18>
 8000632:	b94a      	cbnz	r2, 8000648 <__aeabi_uldivmod+0x18>
 8000634:	2900      	cmp	r1, #0
 8000636:	bf08      	it	eq
 8000638:	2800      	cmpeq	r0, #0
 800063a:	bf1c      	itt	ne
 800063c:	f04f 31ff 	movne.w	r1, #4294967295
 8000640:	f04f 30ff 	movne.w	r0, #4294967295
 8000644:	f000 b96a 	b.w	800091c <__aeabi_idiv0>
 8000648:	f1ad 0c08 	sub.w	ip, sp, #8
 800064c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000650:	f000 f806 	bl	8000660 <__udivmoddi4>
 8000654:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000658:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800065c:	b004      	add	sp, #16
 800065e:	4770      	bx	lr

08000660 <__udivmoddi4>:
 8000660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000664:	9d08      	ldr	r5, [sp, #32]
 8000666:	460c      	mov	r4, r1
 8000668:	2b00      	cmp	r3, #0
 800066a:	d14e      	bne.n	800070a <__udivmoddi4+0xaa>
 800066c:	4694      	mov	ip, r2
 800066e:	458c      	cmp	ip, r1
 8000670:	4686      	mov	lr, r0
 8000672:	fab2 f282 	clz	r2, r2
 8000676:	d962      	bls.n	800073e <__udivmoddi4+0xde>
 8000678:	b14a      	cbz	r2, 800068e <__udivmoddi4+0x2e>
 800067a:	f1c2 0320 	rsb	r3, r2, #32
 800067e:	4091      	lsls	r1, r2
 8000680:	fa20 f303 	lsr.w	r3, r0, r3
 8000684:	fa0c fc02 	lsl.w	ip, ip, r2
 8000688:	4319      	orrs	r1, r3
 800068a:	fa00 fe02 	lsl.w	lr, r0, r2
 800068e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000692:	fa1f f68c 	uxth.w	r6, ip
 8000696:	fbb1 f4f7 	udiv	r4, r1, r7
 800069a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800069e:	fb07 1114 	mls	r1, r7, r4, r1
 80006a2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006a6:	fb04 f106 	mul.w	r1, r4, r6
 80006aa:	4299      	cmp	r1, r3
 80006ac:	d90a      	bls.n	80006c4 <__udivmoddi4+0x64>
 80006ae:	eb1c 0303 	adds.w	r3, ip, r3
 80006b2:	f104 30ff 	add.w	r0, r4, #4294967295
 80006b6:	f080 8112 	bcs.w	80008de <__udivmoddi4+0x27e>
 80006ba:	4299      	cmp	r1, r3
 80006bc:	f240 810f 	bls.w	80008de <__udivmoddi4+0x27e>
 80006c0:	3c02      	subs	r4, #2
 80006c2:	4463      	add	r3, ip
 80006c4:	1a59      	subs	r1, r3, r1
 80006c6:	fa1f f38e 	uxth.w	r3, lr
 80006ca:	fbb1 f0f7 	udiv	r0, r1, r7
 80006ce:	fb07 1110 	mls	r1, r7, r0, r1
 80006d2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006d6:	fb00 f606 	mul.w	r6, r0, r6
 80006da:	429e      	cmp	r6, r3
 80006dc:	d90a      	bls.n	80006f4 <__udivmoddi4+0x94>
 80006de:	eb1c 0303 	adds.w	r3, ip, r3
 80006e2:	f100 31ff 	add.w	r1, r0, #4294967295
 80006e6:	f080 80fc 	bcs.w	80008e2 <__udivmoddi4+0x282>
 80006ea:	429e      	cmp	r6, r3
 80006ec:	f240 80f9 	bls.w	80008e2 <__udivmoddi4+0x282>
 80006f0:	4463      	add	r3, ip
 80006f2:	3802      	subs	r0, #2
 80006f4:	1b9b      	subs	r3, r3, r6
 80006f6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80006fa:	2100      	movs	r1, #0
 80006fc:	b11d      	cbz	r5, 8000706 <__udivmoddi4+0xa6>
 80006fe:	40d3      	lsrs	r3, r2
 8000700:	2200      	movs	r2, #0
 8000702:	e9c5 3200 	strd	r3, r2, [r5]
 8000706:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800070a:	428b      	cmp	r3, r1
 800070c:	d905      	bls.n	800071a <__udivmoddi4+0xba>
 800070e:	b10d      	cbz	r5, 8000714 <__udivmoddi4+0xb4>
 8000710:	e9c5 0100 	strd	r0, r1, [r5]
 8000714:	2100      	movs	r1, #0
 8000716:	4608      	mov	r0, r1
 8000718:	e7f5      	b.n	8000706 <__udivmoddi4+0xa6>
 800071a:	fab3 f183 	clz	r1, r3
 800071e:	2900      	cmp	r1, #0
 8000720:	d146      	bne.n	80007b0 <__udivmoddi4+0x150>
 8000722:	42a3      	cmp	r3, r4
 8000724:	d302      	bcc.n	800072c <__udivmoddi4+0xcc>
 8000726:	4290      	cmp	r0, r2
 8000728:	f0c0 80f0 	bcc.w	800090c <__udivmoddi4+0x2ac>
 800072c:	1a86      	subs	r6, r0, r2
 800072e:	eb64 0303 	sbc.w	r3, r4, r3
 8000732:	2001      	movs	r0, #1
 8000734:	2d00      	cmp	r5, #0
 8000736:	d0e6      	beq.n	8000706 <__udivmoddi4+0xa6>
 8000738:	e9c5 6300 	strd	r6, r3, [r5]
 800073c:	e7e3      	b.n	8000706 <__udivmoddi4+0xa6>
 800073e:	2a00      	cmp	r2, #0
 8000740:	f040 8090 	bne.w	8000864 <__udivmoddi4+0x204>
 8000744:	eba1 040c 	sub.w	r4, r1, ip
 8000748:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800074c:	fa1f f78c 	uxth.w	r7, ip
 8000750:	2101      	movs	r1, #1
 8000752:	fbb4 f6f8 	udiv	r6, r4, r8
 8000756:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800075a:	fb08 4416 	mls	r4, r8, r6, r4
 800075e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000762:	fb07 f006 	mul.w	r0, r7, r6
 8000766:	4298      	cmp	r0, r3
 8000768:	d908      	bls.n	800077c <__udivmoddi4+0x11c>
 800076a:	eb1c 0303 	adds.w	r3, ip, r3
 800076e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000772:	d202      	bcs.n	800077a <__udivmoddi4+0x11a>
 8000774:	4298      	cmp	r0, r3
 8000776:	f200 80cd 	bhi.w	8000914 <__udivmoddi4+0x2b4>
 800077a:	4626      	mov	r6, r4
 800077c:	1a1c      	subs	r4, r3, r0
 800077e:	fa1f f38e 	uxth.w	r3, lr
 8000782:	fbb4 f0f8 	udiv	r0, r4, r8
 8000786:	fb08 4410 	mls	r4, r8, r0, r4
 800078a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800078e:	fb00 f707 	mul.w	r7, r0, r7
 8000792:	429f      	cmp	r7, r3
 8000794:	d908      	bls.n	80007a8 <__udivmoddi4+0x148>
 8000796:	eb1c 0303 	adds.w	r3, ip, r3
 800079a:	f100 34ff 	add.w	r4, r0, #4294967295
 800079e:	d202      	bcs.n	80007a6 <__udivmoddi4+0x146>
 80007a0:	429f      	cmp	r7, r3
 80007a2:	f200 80b0 	bhi.w	8000906 <__udivmoddi4+0x2a6>
 80007a6:	4620      	mov	r0, r4
 80007a8:	1bdb      	subs	r3, r3, r7
 80007aa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80007ae:	e7a5      	b.n	80006fc <__udivmoddi4+0x9c>
 80007b0:	f1c1 0620 	rsb	r6, r1, #32
 80007b4:	408b      	lsls	r3, r1
 80007b6:	fa22 f706 	lsr.w	r7, r2, r6
 80007ba:	431f      	orrs	r7, r3
 80007bc:	fa20 fc06 	lsr.w	ip, r0, r6
 80007c0:	fa04 f301 	lsl.w	r3, r4, r1
 80007c4:	ea43 030c 	orr.w	r3, r3, ip
 80007c8:	40f4      	lsrs	r4, r6
 80007ca:	fa00 f801 	lsl.w	r8, r0, r1
 80007ce:	0c38      	lsrs	r0, r7, #16
 80007d0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80007d4:	fbb4 fef0 	udiv	lr, r4, r0
 80007d8:	fa1f fc87 	uxth.w	ip, r7
 80007dc:	fb00 441e 	mls	r4, r0, lr, r4
 80007e0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80007e4:	fb0e f90c 	mul.w	r9, lr, ip
 80007e8:	45a1      	cmp	r9, r4
 80007ea:	fa02 f201 	lsl.w	r2, r2, r1
 80007ee:	d90a      	bls.n	8000806 <__udivmoddi4+0x1a6>
 80007f0:	193c      	adds	r4, r7, r4
 80007f2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80007f6:	f080 8084 	bcs.w	8000902 <__udivmoddi4+0x2a2>
 80007fa:	45a1      	cmp	r9, r4
 80007fc:	f240 8081 	bls.w	8000902 <__udivmoddi4+0x2a2>
 8000800:	f1ae 0e02 	sub.w	lr, lr, #2
 8000804:	443c      	add	r4, r7
 8000806:	eba4 0409 	sub.w	r4, r4, r9
 800080a:	fa1f f983 	uxth.w	r9, r3
 800080e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000812:	fb00 4413 	mls	r4, r0, r3, r4
 8000816:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800081a:	fb03 fc0c 	mul.w	ip, r3, ip
 800081e:	45a4      	cmp	ip, r4
 8000820:	d907      	bls.n	8000832 <__udivmoddi4+0x1d2>
 8000822:	193c      	adds	r4, r7, r4
 8000824:	f103 30ff 	add.w	r0, r3, #4294967295
 8000828:	d267      	bcs.n	80008fa <__udivmoddi4+0x29a>
 800082a:	45a4      	cmp	ip, r4
 800082c:	d965      	bls.n	80008fa <__udivmoddi4+0x29a>
 800082e:	3b02      	subs	r3, #2
 8000830:	443c      	add	r4, r7
 8000832:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000836:	fba0 9302 	umull	r9, r3, r0, r2
 800083a:	eba4 040c 	sub.w	r4, r4, ip
 800083e:	429c      	cmp	r4, r3
 8000840:	46ce      	mov	lr, r9
 8000842:	469c      	mov	ip, r3
 8000844:	d351      	bcc.n	80008ea <__udivmoddi4+0x28a>
 8000846:	d04e      	beq.n	80008e6 <__udivmoddi4+0x286>
 8000848:	b155      	cbz	r5, 8000860 <__udivmoddi4+0x200>
 800084a:	ebb8 030e 	subs.w	r3, r8, lr
 800084e:	eb64 040c 	sbc.w	r4, r4, ip
 8000852:	fa04 f606 	lsl.w	r6, r4, r6
 8000856:	40cb      	lsrs	r3, r1
 8000858:	431e      	orrs	r6, r3
 800085a:	40cc      	lsrs	r4, r1
 800085c:	e9c5 6400 	strd	r6, r4, [r5]
 8000860:	2100      	movs	r1, #0
 8000862:	e750      	b.n	8000706 <__udivmoddi4+0xa6>
 8000864:	f1c2 0320 	rsb	r3, r2, #32
 8000868:	fa20 f103 	lsr.w	r1, r0, r3
 800086c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000870:	fa24 f303 	lsr.w	r3, r4, r3
 8000874:	4094      	lsls	r4, r2
 8000876:	430c      	orrs	r4, r1
 8000878:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800087c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000880:	fa1f f78c 	uxth.w	r7, ip
 8000884:	fbb3 f0f8 	udiv	r0, r3, r8
 8000888:	fb08 3110 	mls	r1, r8, r0, r3
 800088c:	0c23      	lsrs	r3, r4, #16
 800088e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000892:	fb00 f107 	mul.w	r1, r0, r7
 8000896:	4299      	cmp	r1, r3
 8000898:	d908      	bls.n	80008ac <__udivmoddi4+0x24c>
 800089a:	eb1c 0303 	adds.w	r3, ip, r3
 800089e:	f100 36ff 	add.w	r6, r0, #4294967295
 80008a2:	d22c      	bcs.n	80008fe <__udivmoddi4+0x29e>
 80008a4:	4299      	cmp	r1, r3
 80008a6:	d92a      	bls.n	80008fe <__udivmoddi4+0x29e>
 80008a8:	3802      	subs	r0, #2
 80008aa:	4463      	add	r3, ip
 80008ac:	1a5b      	subs	r3, r3, r1
 80008ae:	b2a4      	uxth	r4, r4
 80008b0:	fbb3 f1f8 	udiv	r1, r3, r8
 80008b4:	fb08 3311 	mls	r3, r8, r1, r3
 80008b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008bc:	fb01 f307 	mul.w	r3, r1, r7
 80008c0:	42a3      	cmp	r3, r4
 80008c2:	d908      	bls.n	80008d6 <__udivmoddi4+0x276>
 80008c4:	eb1c 0404 	adds.w	r4, ip, r4
 80008c8:	f101 36ff 	add.w	r6, r1, #4294967295
 80008cc:	d213      	bcs.n	80008f6 <__udivmoddi4+0x296>
 80008ce:	42a3      	cmp	r3, r4
 80008d0:	d911      	bls.n	80008f6 <__udivmoddi4+0x296>
 80008d2:	3902      	subs	r1, #2
 80008d4:	4464      	add	r4, ip
 80008d6:	1ae4      	subs	r4, r4, r3
 80008d8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80008dc:	e739      	b.n	8000752 <__udivmoddi4+0xf2>
 80008de:	4604      	mov	r4, r0
 80008e0:	e6f0      	b.n	80006c4 <__udivmoddi4+0x64>
 80008e2:	4608      	mov	r0, r1
 80008e4:	e706      	b.n	80006f4 <__udivmoddi4+0x94>
 80008e6:	45c8      	cmp	r8, r9
 80008e8:	d2ae      	bcs.n	8000848 <__udivmoddi4+0x1e8>
 80008ea:	ebb9 0e02 	subs.w	lr, r9, r2
 80008ee:	eb63 0c07 	sbc.w	ip, r3, r7
 80008f2:	3801      	subs	r0, #1
 80008f4:	e7a8      	b.n	8000848 <__udivmoddi4+0x1e8>
 80008f6:	4631      	mov	r1, r6
 80008f8:	e7ed      	b.n	80008d6 <__udivmoddi4+0x276>
 80008fa:	4603      	mov	r3, r0
 80008fc:	e799      	b.n	8000832 <__udivmoddi4+0x1d2>
 80008fe:	4630      	mov	r0, r6
 8000900:	e7d4      	b.n	80008ac <__udivmoddi4+0x24c>
 8000902:	46d6      	mov	lr, sl
 8000904:	e77f      	b.n	8000806 <__udivmoddi4+0x1a6>
 8000906:	4463      	add	r3, ip
 8000908:	3802      	subs	r0, #2
 800090a:	e74d      	b.n	80007a8 <__udivmoddi4+0x148>
 800090c:	4606      	mov	r6, r0
 800090e:	4623      	mov	r3, r4
 8000910:	4608      	mov	r0, r1
 8000912:	e70f      	b.n	8000734 <__udivmoddi4+0xd4>
 8000914:	3e02      	subs	r6, #2
 8000916:	4463      	add	r3, ip
 8000918:	e730      	b.n	800077c <__udivmoddi4+0x11c>
 800091a:	bf00      	nop

0800091c <__aeabi_idiv0>:
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop

08000920 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b09a      	sub	sp, #104	@ 0x68
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000926:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	605a      	str	r2, [r3, #4]
 8000930:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000932:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000936:	2220      	movs	r2, #32
 8000938:	2100      	movs	r1, #0
 800093a:	4618      	mov	r0, r3
 800093c:	f00a fcb6 	bl	800b2ac <memset>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000940:	463b      	mov	r3, r7
 8000942:	223c      	movs	r2, #60	@ 0x3c
 8000944:	2100      	movs	r1, #0
 8000946:	4618      	mov	r0, r3
 8000948:	f00a fcb0 	bl	800b2ac <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800094c:	4b4d      	ldr	r3, [pc, #308]	@ (8000a84 <MX_ADC1_Init+0x164>)
 800094e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000952:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000954:	4b4b      	ldr	r3, [pc, #300]	@ (8000a84 <MX_ADC1_Init+0x164>)
 8000956:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800095a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800095c:	4b49      	ldr	r3, [pc, #292]	@ (8000a84 <MX_ADC1_Init+0x164>)
 800095e:	2200      	movs	r2, #0
 8000960:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000962:	4b48      	ldr	r3, [pc, #288]	@ (8000a84 <MX_ADC1_Init+0x164>)
 8000964:	2200      	movs	r2, #0
 8000966:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000968:	4b46      	ldr	r3, [pc, #280]	@ (8000a84 <MX_ADC1_Init+0x164>)
 800096a:	2200      	movs	r2, #0
 800096c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800096e:	4b45      	ldr	r3, [pc, #276]	@ (8000a84 <MX_ADC1_Init+0x164>)
 8000970:	2201      	movs	r2, #1
 8000972:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000974:	4b43      	ldr	r3, [pc, #268]	@ (8000a84 <MX_ADC1_Init+0x164>)
 8000976:	2204      	movs	r2, #4
 8000978:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800097a:	4b42      	ldr	r3, [pc, #264]	@ (8000a84 <MX_ADC1_Init+0x164>)
 800097c:	2200      	movs	r2, #0
 800097e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000980:	4b40      	ldr	r3, [pc, #256]	@ (8000a84 <MX_ADC1_Init+0x164>)
 8000982:	2200      	movs	r2, #0
 8000984:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000986:	4b3f      	ldr	r3, [pc, #252]	@ (8000a84 <MX_ADC1_Init+0x164>)
 8000988:	2201      	movs	r2, #1
 800098a:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800098c:	4b3d      	ldr	r3, [pc, #244]	@ (8000a84 <MX_ADC1_Init+0x164>)
 800098e:	2200      	movs	r2, #0
 8000990:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000994:	4b3b      	ldr	r3, [pc, #236]	@ (8000a84 <MX_ADC1_Init+0x164>)
 8000996:	2200      	movs	r2, #0
 8000998:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800099a:	4b3a      	ldr	r3, [pc, #232]	@ (8000a84 <MX_ADC1_Init+0x164>)
 800099c:	2200      	movs	r2, #0
 800099e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80009a0:	4b38      	ldr	r3, [pc, #224]	@ (8000a84 <MX_ADC1_Init+0x164>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009a8:	4b36      	ldr	r3, [pc, #216]	@ (8000a84 <MX_ADC1_Init+0x164>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80009ae:	4b35      	ldr	r3, [pc, #212]	@ (8000a84 <MX_ADC1_Init+0x164>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009b6:	4833      	ldr	r0, [pc, #204]	@ (8000a84 <MX_ADC1_Init+0x164>)
 80009b8:	f001 fcde 	bl	8002378 <HAL_ADC_Init>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80009c2:	f000 fd04 	bl	80013ce <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80009c6:	2300      	movs	r3, #0
 80009c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80009ca:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80009ce:	4619      	mov	r1, r3
 80009d0:	482c      	ldr	r0, [pc, #176]	@ (8000a84 <MX_ADC1_Init+0x164>)
 80009d2:	f003 fe07 	bl	80045e4 <HAL_ADCEx_MultiModeConfigChannel>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 80009dc:	f000 fcf7 	bl	80013ce <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80009e0:	4b29      	ldr	r3, [pc, #164]	@ (8000a88 <MX_ADC1_Init+0x168>)
 80009e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009e4:	2306      	movs	r3, #6
 80009e6:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80009e8:	2300      	movs	r3, #0
 80009ea:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009ec:	237f      	movs	r3, #127	@ 0x7f
 80009ee:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009f0:	2304      	movs	r3, #4
 80009f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfig.Offset = 0;
 80009f4:	2300      	movs	r3, #0
 80009f6:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009f8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80009fc:	4619      	mov	r1, r3
 80009fe:	4821      	ldr	r0, [pc, #132]	@ (8000a84 <MX_ADC1_Init+0x164>)
 8000a00:	f002 f876 	bl	8002af0 <HAL_ADC_ConfigChannel>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 8000a0a:	f000 fce0 	bl	80013ce <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8000a0e:	4b1f      	ldr	r3, [pc, #124]	@ (8000a8c <MX_ADC1_Init+0x16c>)
 8000a10:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000a12:	2309      	movs	r3, #9
 8000a14:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8000a16:	2301      	movs	r3, #1
 8000a18:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000a1a:	237f      	movs	r3, #127	@ 0x7f
 8000a1c:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8000a1e:	2304      	movs	r3, #4
 8000a20:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffset = 0;
 8000a22:	2300      	movs	r3, #0
 8000a24:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedNbrOfConversion = 2;
 8000a26:	2302      	movs	r3, #2
 8000a28:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 8000a30:	2300      	movs	r3, #0
 8000a32:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000a36:	2300      	movs	r3, #0
 8000a38:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 8000a3c:	2384      	movs	r3, #132	@ 0x84
 8000a3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8000a40:	2380      	movs	r3, #128	@ 0x80
 8000a42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8000a44:	2300      	movs	r3, #0
 8000a46:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000a4a:	463b      	mov	r3, r7
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	480d      	ldr	r0, [pc, #52]	@ (8000a84 <MX_ADC1_Init+0x164>)
 8000a50:	f003 f8e8 	bl	8003c24 <HAL_ADCEx_InjectedConfigChannel>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_ADC1_Init+0x13e>
  {
    Error_Handler();
 8000a5a:	f000 fcb8 	bl	80013ce <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_12;
 8000a5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000a90 <MX_ADC1_Init+0x170>)
 8000a60:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000a62:	f240 130f 	movw	r3, #271	@ 0x10f
 8000a66:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000a68:	463b      	mov	r3, r7
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4805      	ldr	r0, [pc, #20]	@ (8000a84 <MX_ADC1_Init+0x164>)
 8000a6e:	f003 f8d9 	bl	8003c24 <HAL_ADCEx_InjectedConfigChannel>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_ADC1_Init+0x15c>
  {
    Error_Handler();
 8000a78:	f000 fca9 	bl	80013ce <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a7c:	bf00      	nop
 8000a7e:	3768      	adds	r7, #104	@ 0x68
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	20000040 	.word	0x20000040
 8000a88:	2e300800 	.word	0x2e300800
 8000a8c:	0c900008 	.word	0x0c900008
 8000a90:	32601000 	.word	0x32601000

08000a94 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b098      	sub	sp, #96	@ 0x60
 8000a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000a9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a9e:	223c      	movs	r2, #60	@ 0x3c
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f00a fc02 	bl	800b2ac <memset>
  ADC_ChannelConfTypeDef sConfig = {0};
 8000aa8:	1d3b      	adds	r3, r7, #4
 8000aaa:	2220      	movs	r2, #32
 8000aac:	2100      	movs	r1, #0
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f00a fbfc 	bl	800b2ac <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000ab4:	4b3f      	ldr	r3, [pc, #252]	@ (8000bb4 <MX_ADC2_Init+0x120>)
 8000ab6:	4a40      	ldr	r2, [pc, #256]	@ (8000bb8 <MX_ADC2_Init+0x124>)
 8000ab8:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000aba:	4b3e      	ldr	r3, [pc, #248]	@ (8000bb4 <MX_ADC2_Init+0x120>)
 8000abc:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000ac0:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000ac2:	4b3c      	ldr	r3, [pc, #240]	@ (8000bb4 <MX_ADC2_Init+0x120>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ac8:	4b3a      	ldr	r3, [pc, #232]	@ (8000bb4 <MX_ADC2_Init+0x120>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000ace:	4b39      	ldr	r3, [pc, #228]	@ (8000bb4 <MX_ADC2_Init+0x120>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ad4:	4b37      	ldr	r3, [pc, #220]	@ (8000bb4 <MX_ADC2_Init+0x120>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ada:	4b36      	ldr	r3, [pc, #216]	@ (8000bb4 <MX_ADC2_Init+0x120>)
 8000adc:	2204      	movs	r2, #4
 8000ade:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000ae0:	4b34      	ldr	r3, [pc, #208]	@ (8000bb4 <MX_ADC2_Init+0x120>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000ae6:	4b33      	ldr	r3, [pc, #204]	@ (8000bb4 <MX_ADC2_Init+0x120>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000aec:	4b31      	ldr	r3, [pc, #196]	@ (8000bb4 <MX_ADC2_Init+0x120>)
 8000aee:	2201      	movs	r2, #1
 8000af0:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000af2:	4b30      	ldr	r3, [pc, #192]	@ (8000bb4 <MX_ADC2_Init+0x120>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000afa:	4b2e      	ldr	r3, [pc, #184]	@ (8000bb4 <MX_ADC2_Init+0x120>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b00:	4b2c      	ldr	r3, [pc, #176]	@ (8000bb4 <MX_ADC2_Init+0x120>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000b06:	4b2b      	ldr	r3, [pc, #172]	@ (8000bb4 <MX_ADC2_Init+0x120>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b0e:	4b29      	ldr	r3, [pc, #164]	@ (8000bb4 <MX_ADC2_Init+0x120>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000b14:	4b27      	ldr	r3, [pc, #156]	@ (8000bb4 <MX_ADC2_Init+0x120>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000b1c:	4825      	ldr	r0, [pc, #148]	@ (8000bb4 <MX_ADC2_Init+0x120>)
 8000b1e:	f001 fc2b 	bl	8002378 <HAL_ADC_Init>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_ADC2_Init+0x98>
  {
    Error_Handler();
 8000b28:	f000 fc51 	bl	80013ce <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8000b2c:	4b23      	ldr	r3, [pc, #140]	@ (8000bbc <MX_ADC2_Init+0x128>)
 8000b2e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000b30:	2309      	movs	r3, #9
 8000b32:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8000b34:	2301      	movs	r3, #1
 8000b36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000b38:	237f      	movs	r3, #127	@ 0x7f
 8000b3a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8000b3c:	2304      	movs	r3, #4
 8000b3e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigInjected.InjectedOffset = 0;
 8000b40:	2300      	movs	r3, #0
 8000b42:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigInjected.InjectedNbrOfConversion = 1;
 8000b44:	2301      	movs	r3, #1
 8000b46:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  sConfigInjected.AutoInjectedConv = DISABLE;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000b54:	2300      	movs	r3, #0
 8000b56:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 8000b5a:	2384      	movs	r3, #132	@ 0x84
 8000b5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8000b5e:	2380      	movs	r3, #128	@ 0x80
 8000b60:	653b      	str	r3, [r7, #80]	@ 0x50
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8000b62:	2300      	movs	r3, #0
 8000b64:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000b68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4811      	ldr	r0, [pc, #68]	@ (8000bb4 <MX_ADC2_Init+0x120>)
 8000b70:	f003 f858 	bl	8003c24 <HAL_ADCEx_InjectedConfigChannel>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_ADC2_Init+0xea>
  {
    Error_Handler();
 8000b7a:	f000 fc28 	bl	80013ce <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000b7e:	4b10      	ldr	r3, [pc, #64]	@ (8000bc0 <MX_ADC2_Init+0x12c>)
 8000b80:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b82:	2306      	movs	r3, #6
 8000b84:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000b86:	2300      	movs	r3, #0
 8000b88:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b8a:	237f      	movs	r3, #127	@ 0x7f
 8000b8c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b8e:	2304      	movs	r3, #4
 8000b90:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000b92:	2300      	movs	r3, #0
 8000b94:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000b96:	1d3b      	adds	r3, r7, #4
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4806      	ldr	r0, [pc, #24]	@ (8000bb4 <MX_ADC2_Init+0x120>)
 8000b9c:	f001 ffa8 	bl	8002af0 <HAL_ADC_ConfigChannel>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <MX_ADC2_Init+0x116>
  {
    Error_Handler();
 8000ba6:	f000 fc12 	bl	80013ce <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000baa:	bf00      	nop
 8000bac:	3760      	adds	r7, #96	@ 0x60
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	200000ac 	.word	0x200000ac
 8000bb8:	50000100 	.word	0x50000100
 8000bbc:	0c900008 	.word	0x0c900008
 8000bc0:	04300002 	.word	0x04300002

08000bc4 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b09e      	sub	sp, #120	@ 0x78
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bcc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	609a      	str	r2, [r3, #8]
 8000bd8:	60da      	str	r2, [r3, #12]
 8000bda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bdc:	f107 0320 	add.w	r3, r7, #32
 8000be0:	2244      	movs	r2, #68	@ 0x44
 8000be2:	2100      	movs	r1, #0
 8000be4:	4618      	mov	r0, r3
 8000be6:	f00a fb61 	bl	800b2ac <memset>
  if(adcHandle->Instance==ADC1)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000bf2:	d15f      	bne.n	8000cb4 <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000bf4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000bf8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000bfa:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000bfe:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c00:	f107 0320 	add.w	r3, r7, #32
 8000c04:	4618      	mov	r0, r3
 8000c06:	f006 fb57 	bl	80072b8 <HAL_RCCEx_PeriphCLKConfig>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000c10:	f000 fbdd 	bl	80013ce <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000c14:	4b4f      	ldr	r3, [pc, #316]	@ (8000d54 <HAL_ADC_MspInit+0x190>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	3301      	adds	r3, #1
 8000c1a:	4a4e      	ldr	r2, [pc, #312]	@ (8000d54 <HAL_ADC_MspInit+0x190>)
 8000c1c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000c1e:	4b4d      	ldr	r3, [pc, #308]	@ (8000d54 <HAL_ADC_MspInit+0x190>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	2b01      	cmp	r3, #1
 8000c24:	d10b      	bne.n	8000c3e <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000c26:	4b4c      	ldr	r3, [pc, #304]	@ (8000d58 <HAL_ADC_MspInit+0x194>)
 8000c28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c2a:	4a4b      	ldr	r2, [pc, #300]	@ (8000d58 <HAL_ADC_MspInit+0x194>)
 8000c2c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000c30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c32:	4b49      	ldr	r3, [pc, #292]	@ (8000d58 <HAL_ADC_MspInit+0x194>)
 8000c34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c36:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c3a:	61fb      	str	r3, [r7, #28]
 8000c3c:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3e:	4b46      	ldr	r3, [pc, #280]	@ (8000d58 <HAL_ADC_MspInit+0x194>)
 8000c40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c42:	4a45      	ldr	r2, [pc, #276]	@ (8000d58 <HAL_ADC_MspInit+0x194>)
 8000c44:	f043 0301 	orr.w	r3, r3, #1
 8000c48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c4a:	4b43      	ldr	r3, [pc, #268]	@ (8000d58 <HAL_ADC_MspInit+0x194>)
 8000c4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c4e:	f003 0301 	and.w	r3, r3, #1
 8000c52:	61bb      	str	r3, [r7, #24]
 8000c54:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c56:	4b40      	ldr	r3, [pc, #256]	@ (8000d58 <HAL_ADC_MspInit+0x194>)
 8000c58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c5a:	4a3f      	ldr	r2, [pc, #252]	@ (8000d58 <HAL_ADC_MspInit+0x194>)
 8000c5c:	f043 0302 	orr.w	r3, r3, #2
 8000c60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c62:	4b3d      	ldr	r3, [pc, #244]	@ (8000d58 <HAL_ADC_MspInit+0x194>)
 8000c64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c66:	f003 0302 	and.w	r3, r3, #2
 8000c6a:	617b      	str	r3, [r7, #20]
 8000c6c:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN3
    PB1     ------> ADC1_IN12
    PB12     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c6e:	2304      	movs	r3, #4
 8000c70:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c72:	2303      	movs	r3, #3
 8000c74:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000c7e:	4619      	mov	r1, r3
 8000c80:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c84:	f005 fa82 	bl	800618c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_12;
 8000c88:	f241 0302 	movw	r3, #4098	@ 0x1002
 8000c8c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c8e:	2303      	movs	r3, #3
 8000c90:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c96:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	482f      	ldr	r0, [pc, #188]	@ (8000d5c <HAL_ADC_MspInit+0x198>)
 8000c9e:	f005 fa75 	bl	800618c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	2012      	movs	r0, #18
 8000ca8:	f004 f843 	bl	8004d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000cac:	2012      	movs	r0, #18
 8000cae:	f004 f85a 	bl	8004d66 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000cb2:	e04a      	b.n	8000d4a <HAL_ADC_MspInit+0x186>
  else if(adcHandle->Instance==ADC2)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a29      	ldr	r2, [pc, #164]	@ (8000d60 <HAL_ADC_MspInit+0x19c>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d145      	bne.n	8000d4a <HAL_ADC_MspInit+0x186>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000cbe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000cc2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000cc4:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000cc8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cca:	f107 0320 	add.w	r3, r7, #32
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f006 faf2 	bl	80072b8 <HAL_RCCEx_PeriphCLKConfig>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <HAL_ADC_MspInit+0x11a>
      Error_Handler();
 8000cda:	f000 fb78 	bl	80013ce <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000cde:	4b1d      	ldr	r3, [pc, #116]	@ (8000d54 <HAL_ADC_MspInit+0x190>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	4a1b      	ldr	r2, [pc, #108]	@ (8000d54 <HAL_ADC_MspInit+0x190>)
 8000ce6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000ce8:	4b1a      	ldr	r3, [pc, #104]	@ (8000d54 <HAL_ADC_MspInit+0x190>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d10b      	bne.n	8000d08 <HAL_ADC_MspInit+0x144>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000cf0:	4b19      	ldr	r3, [pc, #100]	@ (8000d58 <HAL_ADC_MspInit+0x194>)
 8000cf2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cf4:	4a18      	ldr	r2, [pc, #96]	@ (8000d58 <HAL_ADC_MspInit+0x194>)
 8000cf6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000cfa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cfc:	4b16      	ldr	r3, [pc, #88]	@ (8000d58 <HAL_ADC_MspInit+0x194>)
 8000cfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d00:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d04:	613b      	str	r3, [r7, #16]
 8000d06:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d08:	4b13      	ldr	r3, [pc, #76]	@ (8000d58 <HAL_ADC_MspInit+0x194>)
 8000d0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d0c:	4a12      	ldr	r2, [pc, #72]	@ (8000d58 <HAL_ADC_MspInit+0x194>)
 8000d0e:	f043 0301 	orr.w	r3, r3, #1
 8000d12:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d14:	4b10      	ldr	r3, [pc, #64]	@ (8000d58 <HAL_ADC_MspInit+0x194>)
 8000d16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d18:	f003 0301 	and.w	r3, r3, #1
 8000d1c:	60fb      	str	r3, [r7, #12]
 8000d1e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6;
 8000d20:	2341      	movs	r3, #65	@ 0x41
 8000d22:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d24:	2303      	movs	r3, #3
 8000d26:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000d30:	4619      	mov	r1, r3
 8000d32:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d36:	f005 fa29 	bl	800618c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	2012      	movs	r0, #18
 8000d40:	f003 fff7 	bl	8004d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000d44:	2012      	movs	r0, #18
 8000d46:	f004 f80e 	bl	8004d66 <HAL_NVIC_EnableIRQ>
}
 8000d4a:	bf00      	nop
 8000d4c:	3778      	adds	r7, #120	@ 0x78
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	20000118 	.word	0x20000118
 8000d58:	40021000 	.word	0x40021000
 8000d5c:	48000400 	.word	0x48000400
 8000d60:	50000100 	.word	0x50000100

08000d64 <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 8000d68:	4b0f      	ldr	r3, [pc, #60]	@ (8000da8 <MX_COMP1_Init+0x44>)
 8000d6a:	4a10      	ldr	r2, [pc, #64]	@ (8000dac <MX_COMP1_Init+0x48>)
 8000d6c:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO2;
 8000d6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000da8 <MX_COMP1_Init+0x44>)
 8000d70:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d74:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH1;
 8000d76:	4b0c      	ldr	r3, [pc, #48]	@ (8000da8 <MX_COMP1_Init+0x44>)
 8000d78:	2240      	movs	r2, #64	@ 0x40
 8000d7a:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000d7c:	4b0a      	ldr	r3, [pc, #40]	@ (8000da8 <MX_COMP1_Init+0x44>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000d82:	4b09      	ldr	r3, [pc, #36]	@ (8000da8 <MX_COMP1_Init+0x44>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8000d88:	4b07      	ldr	r3, [pc, #28]	@ (8000da8 <MX_COMP1_Init+0x44>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING;
 8000d8e:	4b06      	ldr	r3, [pc, #24]	@ (8000da8 <MX_COMP1_Init+0x44>)
 8000d90:	2211      	movs	r2, #17
 8000d92:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8000d94:	4804      	ldr	r0, [pc, #16]	@ (8000da8 <MX_COMP1_Init+0x44>)
 8000d96:	f003 fd87 	bl	80048a8 <HAL_COMP_Init>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_COMP1_Init+0x40>
  {
    Error_Handler();
 8000da0:	f000 fb15 	bl	80013ce <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 8000da4:	bf00      	nop
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	2000011c 	.word	0x2000011c
 8000dac:	40010200 	.word	0x40010200

08000db0 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b088      	sub	sp, #32
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db8:	f107 030c 	add.w	r3, r7, #12
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]
 8000dc2:	609a      	str	r2, [r3, #8]
 8000dc4:	60da      	str	r2, [r3, #12]
 8000dc6:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a13      	ldr	r2, [pc, #76]	@ (8000e1c <HAL_COMP_MspInit+0x6c>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d11f      	bne.n	8000e12 <HAL_COMP_MspInit+0x62>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd2:	4b13      	ldr	r3, [pc, #76]	@ (8000e20 <HAL_COMP_MspInit+0x70>)
 8000dd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dd6:	4a12      	ldr	r2, [pc, #72]	@ (8000e20 <HAL_COMP_MspInit+0x70>)
 8000dd8:	f043 0302 	orr.w	r3, r3, #2
 8000ddc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dde:	4b10      	ldr	r3, [pc, #64]	@ (8000e20 <HAL_COMP_MspInit+0x70>)
 8000de0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000de2:	f003 0302 	and.w	r3, r3, #2
 8000de6:	60bb      	str	r3, [r7, #8]
 8000de8:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration
    PB1     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000dea:	2302      	movs	r3, #2
 8000dec:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dee:	2303      	movs	r3, #3
 8000df0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df6:	f107 030c 	add.w	r3, r7, #12
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4809      	ldr	r0, [pc, #36]	@ (8000e24 <HAL_COMP_MspInit+0x74>)
 8000dfe:	f005 f9c5 	bl	800618c <HAL_GPIO_Init>

    /* COMP1 interrupt Init */
    HAL_NVIC_SetPriority(COMP1_2_3_IRQn, 0, 0);
 8000e02:	2200      	movs	r2, #0
 8000e04:	2100      	movs	r1, #0
 8000e06:	2040      	movs	r0, #64	@ 0x40
 8000e08:	f003 ff93 	bl	8004d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP1_2_3_IRQn);
 8000e0c:	2040      	movs	r0, #64	@ 0x40
 8000e0e:	f003 ffaa 	bl	8004d66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 8000e12:	bf00      	nop
 8000e14:	3720      	adds	r7, #32
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40010200 	.word	0x40010200
 8000e20:	40021000 	.word	0x40021000
 8000e24:	48000400 	.word	0x48000400

08000e28 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DAC_HandleTypeDef hdac3;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b08c      	sub	sp, #48	@ 0x30
 8000e2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000e2e:	463b      	mov	r3, r7
 8000e30:	2230      	movs	r2, #48	@ 0x30
 8000e32:	2100      	movs	r1, #0
 8000e34:	4618      	mov	r0, r3
 8000e36:	f00a fa39 	bl	800b2ac <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000e3a:	4b16      	ldr	r3, [pc, #88]	@ (8000e94 <MX_DAC1_Init+0x6c>)
 8000e3c:	4a16      	ldr	r2, [pc, #88]	@ (8000e98 <MX_DAC1_Init+0x70>)
 8000e3e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000e40:	4814      	ldr	r0, [pc, #80]	@ (8000e94 <MX_DAC1_Init+0x6c>)
 8000e42:	f003 ffaa 	bl	8004d9a <HAL_DAC_Init>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000e4c:	f000 fabf 	bl	80013ce <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000e50:	2302      	movs	r3, #2
 8000e52:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000e54:	2300      	movs	r3, #0
 8000e56:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000e60:	2300      	movs	r3, #0
 8000e62:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000e64:	2300      	movs	r3, #0
 8000e66:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000e70:	2300      	movs	r3, #0
 8000e72:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000e74:	463b      	mov	r3, r7
 8000e76:	2200      	movs	r2, #0
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4806      	ldr	r0, [pc, #24]	@ (8000e94 <MX_DAC1_Init+0x6c>)
 8000e7c:	f004 f84a 	bl	8004f14 <HAL_DAC_ConfigChannel>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8000e86:	f000 faa2 	bl	80013ce <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000e8a:	bf00      	nop
 8000e8c:	3730      	adds	r7, #48	@ 0x30
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	20000140 	.word	0x20000140
 8000e98:	50000800 	.word	0x50000800

08000e9c <MX_DAC3_Init>:
/* DAC3 init function */
void MX_DAC3_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b08c      	sub	sp, #48	@ 0x30
 8000ea0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC3_Init 0 */

  /* USER CODE END DAC3_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000ea2:	463b      	mov	r3, r7
 8000ea4:	2230      	movs	r2, #48	@ 0x30
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f00a f9ff 	bl	800b2ac <memset>

  /* USER CODE END DAC3_Init 1 */

  /** DAC Initialization
  */
  hdac3.Instance = DAC3;
 8000eae:	4b16      	ldr	r3, [pc, #88]	@ (8000f08 <MX_DAC3_Init+0x6c>)
 8000eb0:	4a16      	ldr	r2, [pc, #88]	@ (8000f0c <MX_DAC3_Init+0x70>)
 8000eb2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac3) != HAL_OK)
 8000eb4:	4814      	ldr	r0, [pc, #80]	@ (8000f08 <MX_DAC3_Init+0x6c>)
 8000eb6:	f003 ff70 	bl	8004d9a <HAL_DAC_Init>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_DAC3_Init+0x28>
  {
    Error_Handler();
 8000ec0:	f000 fa85 	bl	80013ce <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8000edc:	2302      	movs	r3, #2
 8000ede:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000ee8:	463b      	mov	r3, r7
 8000eea:	2200      	movs	r2, #0
 8000eec:	4619      	mov	r1, r3
 8000eee:	4806      	ldr	r0, [pc, #24]	@ (8000f08 <MX_DAC3_Init+0x6c>)
 8000ef0:	f004 f810 	bl	8004f14 <HAL_DAC_ConfigChannel>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_DAC3_Init+0x62>
  {
    Error_Handler();
 8000efa:	f000 fa68 	bl	80013ce <Error_Handler>
  }
  /* USER CODE BEGIN DAC3_Init 2 */

  /* USER CODE END DAC3_Init 2 */

}
 8000efe:	bf00      	nop
 8000f00:	3730      	adds	r7, #48	@ 0x30
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	20000154 	.word	0x20000154
 8000f0c:	50001000 	.word	0x50001000

08000f10 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b08a      	sub	sp, #40	@ 0x28
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f18:	f107 0314 	add.w	r3, r7, #20
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a1e      	ldr	r2, [pc, #120]	@ (8000fa8 <HAL_DAC_MspInit+0x98>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d125      	bne.n	8000f7e <HAL_DAC_MspInit+0x6e>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000f32:	4b1e      	ldr	r3, [pc, #120]	@ (8000fac <HAL_DAC_MspInit+0x9c>)
 8000f34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f36:	4a1d      	ldr	r2, [pc, #116]	@ (8000fac <HAL_DAC_MspInit+0x9c>)
 8000f38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f3e:	4b1b      	ldr	r3, [pc, #108]	@ (8000fac <HAL_DAC_MspInit+0x9c>)
 8000f40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f46:	613b      	str	r3, [r7, #16]
 8000f48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4a:	4b18      	ldr	r3, [pc, #96]	@ (8000fac <HAL_DAC_MspInit+0x9c>)
 8000f4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f4e:	4a17      	ldr	r2, [pc, #92]	@ (8000fac <HAL_DAC_MspInit+0x9c>)
 8000f50:	f043 0301 	orr.w	r3, r3, #1
 8000f54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f56:	4b15      	ldr	r3, [pc, #84]	@ (8000fac <HAL_DAC_MspInit+0x9c>)
 8000f58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	60fb      	str	r3, [r7, #12]
 8000f60:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f62:	2310      	movs	r3, #16
 8000f64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f66:	2303      	movs	r3, #3
 8000f68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6e:	f107 0314 	add.w	r3, r7, #20
 8000f72:	4619      	mov	r1, r3
 8000f74:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f78:	f005 f908 	bl	800618c <HAL_GPIO_Init>
    __HAL_RCC_DAC3_CLK_ENABLE();
  /* USER CODE BEGIN DAC3_MspInit 1 */

  /* USER CODE END DAC3_MspInit 1 */
  }
}
 8000f7c:	e010      	b.n	8000fa0 <HAL_DAC_MspInit+0x90>
  else if(dacHandle->Instance==DAC3)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4a0b      	ldr	r2, [pc, #44]	@ (8000fb0 <HAL_DAC_MspInit+0xa0>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d10b      	bne.n	8000fa0 <HAL_DAC_MspInit+0x90>
    __HAL_RCC_DAC3_CLK_ENABLE();
 8000f88:	4b08      	ldr	r3, [pc, #32]	@ (8000fac <HAL_DAC_MspInit+0x9c>)
 8000f8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f8c:	4a07      	ldr	r2, [pc, #28]	@ (8000fac <HAL_DAC_MspInit+0x9c>)
 8000f8e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f92:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f94:	4b05      	ldr	r3, [pc, #20]	@ (8000fac <HAL_DAC_MspInit+0x9c>)
 8000f96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f98:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f9c:	60bb      	str	r3, [r7, #8]
 8000f9e:	68bb      	ldr	r3, [r7, #8]
}
 8000fa0:	bf00      	nop
 8000fa2:	3728      	adds	r7, #40	@ 0x28
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	50000800 	.word	0x50000800
 8000fac:	40021000 	.word	0x40021000
 8000fb0:	50001000 	.word	0x50001000

08000fb4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000fba:	4b12      	ldr	r3, [pc, #72]	@ (8001004 <MX_DMA_Init+0x50>)
 8000fbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fbe:	4a11      	ldr	r2, [pc, #68]	@ (8001004 <MX_DMA_Init+0x50>)
 8000fc0:	f043 0304 	orr.w	r3, r3, #4
 8000fc4:	6493      	str	r3, [r2, #72]	@ 0x48
 8000fc6:	4b0f      	ldr	r3, [pc, #60]	@ (8001004 <MX_DMA_Init+0x50>)
 8000fc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fca:	f003 0304 	and.w	r3, r3, #4
 8000fce:	607b      	str	r3, [r7, #4]
 8000fd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fd2:	4b0c      	ldr	r3, [pc, #48]	@ (8001004 <MX_DMA_Init+0x50>)
 8000fd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fd6:	4a0b      	ldr	r2, [pc, #44]	@ (8001004 <MX_DMA_Init+0x50>)
 8000fd8:	f043 0301 	orr.w	r3, r3, #1
 8000fdc:	6493      	str	r3, [r2, #72]	@ 0x48
 8000fde:	4b09      	ldr	r3, [pc, #36]	@ (8001004 <MX_DMA_Init+0x50>)
 8000fe0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	603b      	str	r3, [r7, #0]
 8000fe8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000fea:	2200      	movs	r2, #0
 8000fec:	2100      	movs	r1, #0
 8000fee:	200b      	movs	r0, #11
 8000ff0:	f003 fe9f 	bl	8004d32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ff4:	200b      	movs	r0, #11
 8000ff6:	f003 feb6 	bl	8004d66 <HAL_NVIC_EnableIRQ>

}
 8000ffa:	bf00      	nop
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40021000 	.word	0x40021000

08001008 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800100c:	4b1f      	ldr	r3, [pc, #124]	@ (800108c <MX_FDCAN1_Init+0x84>)
 800100e:	4a20      	ldr	r2, [pc, #128]	@ (8001090 <MX_FDCAN1_Init+0x88>)
 8001010:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001012:	4b1e      	ldr	r3, [pc, #120]	@ (800108c <MX_FDCAN1_Init+0x84>)
 8001014:	2200      	movs	r2, #0
 8001016:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001018:	4b1c      	ldr	r3, [pc, #112]	@ (800108c <MX_FDCAN1_Init+0x84>)
 800101a:	2200      	movs	r2, #0
 800101c:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800101e:	4b1b      	ldr	r3, [pc, #108]	@ (800108c <MX_FDCAN1_Init+0x84>)
 8001020:	2200      	movs	r2, #0
 8001022:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001024:	4b19      	ldr	r3, [pc, #100]	@ (800108c <MX_FDCAN1_Init+0x84>)
 8001026:	2200      	movs	r2, #0
 8001028:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800102a:	4b18      	ldr	r3, [pc, #96]	@ (800108c <MX_FDCAN1_Init+0x84>)
 800102c:	2200      	movs	r2, #0
 800102e:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001030:	4b16      	ldr	r3, [pc, #88]	@ (800108c <MX_FDCAN1_Init+0x84>)
 8001032:	2200      	movs	r2, #0
 8001034:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 20;
 8001036:	4b15      	ldr	r3, [pc, #84]	@ (800108c <MX_FDCAN1_Init+0x84>)
 8001038:	2214      	movs	r2, #20
 800103a:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800103c:	4b13      	ldr	r3, [pc, #76]	@ (800108c <MX_FDCAN1_Init+0x84>)
 800103e:	2201      	movs	r2, #1
 8001040:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 10;
 8001042:	4b12      	ldr	r3, [pc, #72]	@ (800108c <MX_FDCAN1_Init+0x84>)
 8001044:	220a      	movs	r2, #10
 8001046:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 5;
 8001048:	4b10      	ldr	r3, [pc, #64]	@ (800108c <MX_FDCAN1_Init+0x84>)
 800104a:	2205      	movs	r2, #5
 800104c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 20;
 800104e:	4b0f      	ldr	r3, [pc, #60]	@ (800108c <MX_FDCAN1_Init+0x84>)
 8001050:	2214      	movs	r2, #20
 8001052:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001054:	4b0d      	ldr	r3, [pc, #52]	@ (800108c <MX_FDCAN1_Init+0x84>)
 8001056:	2201      	movs	r2, #1
 8001058:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 10;
 800105a:	4b0c      	ldr	r3, [pc, #48]	@ (800108c <MX_FDCAN1_Init+0x84>)
 800105c:	220a      	movs	r2, #10
 800105e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 5;
 8001060:	4b0a      	ldr	r3, [pc, #40]	@ (800108c <MX_FDCAN1_Init+0x84>)
 8001062:	2205      	movs	r2, #5
 8001064:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 8001066:	4b09      	ldr	r3, [pc, #36]	@ (800108c <MX_FDCAN1_Init+0x84>)
 8001068:	2201      	movs	r2, #1
 800106a:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 1;
 800106c:	4b07      	ldr	r3, [pc, #28]	@ (800108c <MX_FDCAN1_Init+0x84>)
 800106e:	2201      	movs	r2, #1
 8001070:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001072:	4b06      	ldr	r3, [pc, #24]	@ (800108c <MX_FDCAN1_Init+0x84>)
 8001074:	2200      	movs	r2, #0
 8001076:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001078:	4804      	ldr	r0, [pc, #16]	@ (800108c <MX_FDCAN1_Init+0x84>)
 800107a:	f004 fc35 	bl	80058e8 <HAL_FDCAN_Init>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8001084:	f000 f9a3 	bl	80013ce <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001088:	bf00      	nop
 800108a:	bd80      	pop	{r7, pc}
 800108c:	20000168 	.word	0x20000168
 8001090:	40006400 	.word	0x40006400

08001094 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b09a      	sub	sp, #104	@ 0x68
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]
 80010aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010ac:	f107 0310 	add.w	r3, r7, #16
 80010b0:	2244      	movs	r2, #68	@ 0x44
 80010b2:	2100      	movs	r1, #0
 80010b4:	4618      	mov	r0, r3
 80010b6:	f00a f8f9 	bl	800b2ac <memset>
  if(fdcanHandle->Instance==FDCAN1)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a24      	ldr	r2, [pc, #144]	@ (8001150 <HAL_FDCAN_MspInit+0xbc>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d141      	bne.n	8001148 <HAL_FDCAN_MspInit+0xb4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80010c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010c8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80010ca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80010ce:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010d0:	f107 0310 	add.w	r3, r7, #16
 80010d4:	4618      	mov	r0, r3
 80010d6:	f006 f8ef 	bl	80072b8 <HAL_RCCEx_PeriphCLKConfig>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80010e0:	f000 f975 	bl	80013ce <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80010e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001154 <HAL_FDCAN_MspInit+0xc0>)
 80010e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010e8:	4a1a      	ldr	r2, [pc, #104]	@ (8001154 <HAL_FDCAN_MspInit+0xc0>)
 80010ea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80010ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80010f0:	4b18      	ldr	r3, [pc, #96]	@ (8001154 <HAL_FDCAN_MspInit+0xc0>)
 80010f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010f8:	60fb      	str	r3, [r7, #12]
 80010fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fc:	4b15      	ldr	r3, [pc, #84]	@ (8001154 <HAL_FDCAN_MspInit+0xc0>)
 80010fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001100:	4a14      	ldr	r2, [pc, #80]	@ (8001154 <HAL_FDCAN_MspInit+0xc0>)
 8001102:	f043 0301 	orr.w	r3, r3, #1
 8001106:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001108:	4b12      	ldr	r3, [pc, #72]	@ (8001154 <HAL_FDCAN_MspInit+0xc0>)
 800110a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800110c:	f003 0301 	and.w	r3, r3, #1
 8001110:	60bb      	str	r3, [r7, #8]
 8001112:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001114:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001118:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111a:	2302      	movs	r3, #2
 800111c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111e:	2300      	movs	r3, #0
 8001120:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001122:	2300      	movs	r3, #0
 8001124:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001126:	2309      	movs	r3, #9
 8001128:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800112a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800112e:	4619      	mov	r1, r3
 8001130:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001134:	f005 f82a 	bl	800618c <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8001138:	2200      	movs	r2, #0
 800113a:	2100      	movs	r1, #0
 800113c:	2015      	movs	r0, #21
 800113e:	f003 fdf8 	bl	8004d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8001142:	2015      	movs	r0, #21
 8001144:	f003 fe0f 	bl	8004d66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8001148:	bf00      	nop
 800114a:	3768      	adds	r7, #104	@ 0x68
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	40006400 	.word	0x40006400
 8001154:	40021000 	.word	0x40021000

08001158 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b08a      	sub	sp, #40	@ 0x28
 800115c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115e:	f107 0314 	add.w	r3, r7, #20
 8001162:	2200      	movs	r2, #0
 8001164:	601a      	str	r2, [r3, #0]
 8001166:	605a      	str	r2, [r3, #4]
 8001168:	609a      	str	r2, [r3, #8]
 800116a:	60da      	str	r2, [r3, #12]
 800116c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800116e:	4b2e      	ldr	r3, [pc, #184]	@ (8001228 <MX_GPIO_Init+0xd0>)
 8001170:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001172:	4a2d      	ldr	r2, [pc, #180]	@ (8001228 <MX_GPIO_Init+0xd0>)
 8001174:	f043 0304 	orr.w	r3, r3, #4
 8001178:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800117a:	4b2b      	ldr	r3, [pc, #172]	@ (8001228 <MX_GPIO_Init+0xd0>)
 800117c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800117e:	f003 0304 	and.w	r3, r3, #4
 8001182:	613b      	str	r3, [r7, #16]
 8001184:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001186:	4b28      	ldr	r3, [pc, #160]	@ (8001228 <MX_GPIO_Init+0xd0>)
 8001188:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800118a:	4a27      	ldr	r2, [pc, #156]	@ (8001228 <MX_GPIO_Init+0xd0>)
 800118c:	f043 0320 	orr.w	r3, r3, #32
 8001190:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001192:	4b25      	ldr	r3, [pc, #148]	@ (8001228 <MX_GPIO_Init+0xd0>)
 8001194:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001196:	f003 0320 	and.w	r3, r3, #32
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800119e:	4b22      	ldr	r3, [pc, #136]	@ (8001228 <MX_GPIO_Init+0xd0>)
 80011a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011a2:	4a21      	ldr	r2, [pc, #132]	@ (8001228 <MX_GPIO_Init+0xd0>)
 80011a4:	f043 0301 	orr.w	r3, r3, #1
 80011a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011aa:	4b1f      	ldr	r3, [pc, #124]	@ (8001228 <MX_GPIO_Init+0xd0>)
 80011ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ae:	f003 0301 	and.w	r3, r3, #1
 80011b2:	60bb      	str	r3, [r7, #8]
 80011b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001228 <MX_GPIO_Init+0xd0>)
 80011b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ba:	4a1b      	ldr	r2, [pc, #108]	@ (8001228 <MX_GPIO_Init+0xd0>)
 80011bc:	f043 0302 	orr.w	r3, r3, #2
 80011c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011c2:	4b19      	ldr	r3, [pc, #100]	@ (8001228 <MX_GPIO_Init+0xd0>)
 80011c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011c6:	f003 0302 	and.w	r3, r3, #2
 80011ca:	607b      	str	r3, [r7, #4]
 80011cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 80011ce:	2200      	movs	r2, #0
 80011d0:	2150      	movs	r1, #80	@ 0x50
 80011d2:	4816      	ldr	r0, [pc, #88]	@ (800122c <MX_GPIO_Init+0xd4>)
 80011d4:	f005 f95c 	bl	8006490 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Button3_Pin|Button1_Pin|Button2_Pin;
 80011d8:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 80011dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011de:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80011e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011e8:	f107 0314 	add.w	r3, r7, #20
 80011ec:	4619      	mov	r1, r3
 80011ee:	480f      	ldr	r0, [pc, #60]	@ (800122c <MX_GPIO_Init+0xd4>)
 80011f0:	f004 ffcc 	bl	800618c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin;
 80011f4:	2350      	movs	r3, #80	@ 0x50
 80011f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f8:	2301      	movs	r3, #1
 80011fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001200:	2300      	movs	r3, #0
 8001202:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001204:	f107 0314 	add.w	r3, r7, #20
 8001208:	4619      	mov	r1, r3
 800120a:	4808      	ldr	r0, [pc, #32]	@ (800122c <MX_GPIO_Init+0xd4>)
 800120c:	f004 ffbe 	bl	800618c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001210:	2200      	movs	r2, #0
 8001212:	2100      	movs	r1, #0
 8001214:	2028      	movs	r0, #40	@ 0x28
 8001216:	f003 fd8c 	bl	8004d32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800121a:	2028      	movs	r0, #40	@ 0x28
 800121c:	f003 fda3 	bl	8004d66 <HAL_NVIC_EnableIRQ>

}
 8001220:	bf00      	nop
 8001222:	3728      	adds	r7, #40	@ 0x28
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	40021000 	.word	0x40021000
 800122c:	48000800 	.word	0x48000800

08001230 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001234:	f000 fddd 	bl	8001df2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001238:	f000 f880 	bl	800133c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800123c:	f7ff ff8c 	bl	8001158 <MX_GPIO_Init>
  MX_DMA_Init();
 8001240:	f7ff feb8 	bl	8000fb4 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8001244:	f000 fcd2 	bl	8001bec <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8001248:	f7ff fb6a 	bl	8000920 <MX_ADC1_Init>
  MX_ADC2_Init();
 800124c:	f7ff fc22 	bl	8000a94 <MX_ADC2_Init>
  MX_OPAMP1_Init();
 8001250:	f000 f8c4 	bl	80013dc <MX_OPAMP1_Init>
  MX_OPAMP2_Init();
 8001254:	f000 f8ea 	bl	800142c <MX_OPAMP2_Init>
  MX_OPAMP3_Init();
 8001258:	f000 f910 	bl	800147c <MX_OPAMP3_Init>
  MX_TIM1_Init();
 800125c:	f000 fa8a 	bl	8001774 <MX_TIM1_Init>
  MX_COMP1_Init();
 8001260:	f7ff fd80 	bl	8000d64 <MX_COMP1_Init>
  MX_DAC1_Init();
 8001264:	f7ff fde0 	bl	8000e28 <MX_DAC1_Init>
  MX_DAC3_Init();
 8001268:	f7ff fe18 	bl	8000e9c <MX_DAC3_Init>
  MX_FDCAN1_Init();
 800126c:	f7ff fecc 	bl	8001008 <MX_FDCAN1_Init>
  MX_TIM4_Init();
 8001270:	f000 fb74 	bl	800195c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_OPAMP_Start(&hopamp1);
 8001274:	4826      	ldr	r0, [pc, #152]	@ (8001310 <main+0xe0>)
 8001276:	f005 fa0b 	bl	8006690 <HAL_OPAMP_Start>
  HAL_OPAMP_Start(&hopamp2);
 800127a:	4826      	ldr	r0, [pc, #152]	@ (8001314 <main+0xe4>)
 800127c:	f005 fa08 	bl	8006690 <HAL_OPAMP_Start>
  HAL_OPAMP_Start(&hopamp3);
 8001280:	4825      	ldr	r0, [pc, #148]	@ (8001318 <main+0xe8>)
 8001282:	f005 fa05 	bl	8006690 <HAL_OPAMP_Start>
  // HAL_UART_Receive_IT(&huart3, (uint8_t *)&aRxBuffer, 1);
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001286:	217f      	movs	r1, #127	@ 0x7f
 8001288:	4824      	ldr	r0, [pc, #144]	@ (800131c <main+0xec>)
 800128a:	f002 faab 	bl	80037e4 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 800128e:	217f      	movs	r1, #127	@ 0x7f
 8001290:	4823      	ldr	r0, [pc, #140]	@ (8001320 <main+0xf0>)
 8001292:	f002 faa7 	bl	80037e4 <HAL_ADCEx_Calibration_Start>
  __HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_JEOC);
 8001296:	4b21      	ldr	r3, [pc, #132]	@ (800131c <main+0xec>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	2220      	movs	r2, #32
 800129c:	601a      	str	r2, [r3, #0]
  __HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_EOC);
 800129e:	4b1f      	ldr	r3, [pc, #124]	@ (800131c <main+0xec>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	2204      	movs	r2, #4
 80012a4:	601a      	str	r2, [r3, #0]
  __HAL_ADC_CLEAR_FLAG(&hadc2, ADC_FLAG_JEOC);
 80012a6:	4b1e      	ldr	r3, [pc, #120]	@ (8001320 <main+0xf0>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	2220      	movs	r2, #32
 80012ac:	601a      	str	r2, [r3, #0]
  HAL_ADCEx_InjectedStart_IT(&hadc1);
 80012ae:	481b      	ldr	r0, [pc, #108]	@ (800131c <main+0xec>)
 80012b0:	f002 fbaa 	bl	8003a08 <HAL_ADCEx_InjectedStart_IT>
  HAL_ADCEx_InjectedStart(&hadc2);
 80012b4:	481a      	ldr	r0, [pc, #104]	@ (8001320 <main+0xf0>)
 80012b6:	f002 faf7 	bl	80038a8 <HAL_ADCEx_InjectedStart>
  TIM1->ARR = 8000 - 1;
 80012ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001324 <main+0xf4>)
 80012bc:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80012c0:	62da      	str	r2, [r3, #44]	@ 0x2c
  TIM1->CCR4 = 8000 - 2;
 80012c2:	4b18      	ldr	r3, [pc, #96]	@ (8001324 <main+0xf4>)
 80012c4:	f641 723e 	movw	r2, #7998	@ 0x1f3e
 80012c8:	641a      	str	r2, [r3, #64]	@ 0x40
  HAL_TIM_Base_Start(&htim1);
 80012ca:	4817      	ldr	r0, [pc, #92]	@ (8001328 <main+0xf8>)
 80012cc:	f006 fa3c 	bl	8007748 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80012d0:	210c      	movs	r1, #12
 80012d2:	4815      	ldr	r0, [pc, #84]	@ (8001328 <main+0xf8>)
 80012d4:	f006 fafc 	bl	80078d0 <HAL_TIM_PWM_Start>
  HAL_DAC_SetValue(&hdac3, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 3000);
 80012d8:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80012dc:	2200      	movs	r2, #0
 80012de:	2100      	movs	r1, #0
 80012e0:	4812      	ldr	r0, [pc, #72]	@ (800132c <main+0xfc>)
 80012e2:	f003 fde9 	bl	8004eb8 <HAL_DAC_SetValue>
  HAL_DAC_Start(&hdac3, DAC_CHANNEL_1);
 80012e6:	2100      	movs	r1, #0
 80012e8:	4810      	ldr	r0, [pc, #64]	@ (800132c <main+0xfc>)
 80012ea:	f003 fd79 	bl	8004de0 <HAL_DAC_Start>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 80012ee:	2100      	movs	r1, #0
 80012f0:	480f      	ldr	r0, [pc, #60]	@ (8001330 <main+0x100>)
 80012f2:	f003 fd75 	bl	8004de0 <HAL_DAC_Start>
  HAL_COMP_Start(&hcomp1);
 80012f6:	480f      	ldr	r0, [pc, #60]	@ (8001334 <main+0x104>)
 80012f8:	f003 fbb2 	bl	8004a60 <HAL_COMP_Start>
  HAL_TIMEx_HallSensor_Start_IT(&htim4);
 80012fc:	480e      	ldr	r0, [pc, #56]	@ (8001338 <main+0x108>)
 80012fe:	f007 fd77 	bl	8008df0 <HAL_TIMEx_HallSensor_Start_IT>
  FDCAN_Config();
 8001302:	f009 fee7 	bl	800b0d4 <FDCAN_Config>
  appInit();
 8001306:	f009 fcaf 	bl	800ac68 <appInit>
    //    HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData);
    //    HAL_Delay(10);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    userMain();
 800130a:	f009 fd75 	bl	800adf8 <userMain>
 800130e:	e7fc      	b.n	800130a <main+0xda>
 8001310:	200001cc 	.word	0x200001cc
 8001314:	20000208 	.word	0x20000208
 8001318:	20000244 	.word	0x20000244
 800131c:	20000040 	.word	0x20000040
 8001320:	200000ac 	.word	0x200000ac
 8001324:	40012c00 	.word	0x40012c00
 8001328:	20000280 	.word	0x20000280
 800132c:	20000154 	.word	0x20000154
 8001330:	20000140 	.word	0x20000140
 8001334:	2000011c 	.word	0x2000011c
 8001338:	200002cc 	.word	0x200002cc

0800133c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b094      	sub	sp, #80	@ 0x50
 8001340:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001342:	f107 0318 	add.w	r3, r7, #24
 8001346:	2238      	movs	r2, #56	@ 0x38
 8001348:	2100      	movs	r1, #0
 800134a:	4618      	mov	r0, r3
 800134c:	f009 ffae 	bl	800b2ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001350:	1d3b      	adds	r3, r7, #4
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	605a      	str	r2, [r3, #4]
 8001358:	609a      	str	r2, [r3, #8]
 800135a:	60da      	str	r2, [r3, #12]
 800135c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800135e:	2000      	movs	r0, #0
 8001360:	f005 f9c8 	bl	80066f4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001364:	2301      	movs	r3, #1
 8001366:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001368:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800136c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800136e:	2302      	movs	r3, #2
 8001370:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001372:	2303      	movs	r3, #3
 8001374:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV3;
 8001376:	2303      	movs	r3, #3
 8001378:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 40;
 800137a:	2328      	movs	r3, #40	@ 0x28
 800137c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800137e:	2302      	movs	r3, #2
 8001380:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001382:	2302      	movs	r3, #2
 8001384:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001386:	2302      	movs	r3, #2
 8001388:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800138a:	f107 0318 	add.w	r3, r7, #24
 800138e:	4618      	mov	r0, r3
 8001390:	f005 fa64 	bl	800685c <HAL_RCC_OscConfig>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <SystemClock_Config+0x62>
  {
    Error_Handler();
 800139a:	f000 f818 	bl	80013ce <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800139e:	230f      	movs	r3, #15
 80013a0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013a2:	2303      	movs	r3, #3
 80013a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013a6:	2300      	movs	r3, #0
 80013a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013aa:	2300      	movs	r3, #0
 80013ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013ae:	2300      	movs	r3, #0
 80013b0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80013b2:	1d3b      	adds	r3, r7, #4
 80013b4:	2104      	movs	r1, #4
 80013b6:	4618      	mov	r0, r3
 80013b8:	f005 fd62 	bl	8006e80 <HAL_RCC_ClockConfig>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80013c2:	f000 f804 	bl	80013ce <Error_Handler>
  }
}
 80013c6:	bf00      	nop
 80013c8:	3750      	adds	r7, #80	@ 0x50
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80013ce:	b480      	push	{r7}
 80013d0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013d2:	b672      	cpsid	i
}
 80013d4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013d6:	bf00      	nop
 80013d8:	e7fd      	b.n	80013d6 <Error_Handler+0x8>
	...

080013dc <MX_OPAMP1_Init>:
OPAMP_HandleTypeDef hopamp2;
OPAMP_HandleTypeDef hopamp3;

/* OPAMP1 init function */
void MX_OPAMP1_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 80013e0:	4b10      	ldr	r3, [pc, #64]	@ (8001424 <MX_OPAMP1_Init+0x48>)
 80013e2:	4a11      	ldr	r2, [pc, #68]	@ (8001428 <MX_OPAMP1_Init+0x4c>)
 80013e4:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 80013e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001424 <MX_OPAMP1_Init+0x48>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_STANDALONE_MODE;
 80013ec:	4b0d      	ldr	r3, [pc, #52]	@ (8001424 <MX_OPAMP1_Init+0x48>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	609a      	str	r2, [r3, #8]
  hopamp1.Init.InvertingInput = OPAMP_INVERTINGINPUT_IO0;
 80013f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001424 <MX_OPAMP1_Init+0x48>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	60da      	str	r2, [r3, #12]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 80013f8:	4b0a      	ldr	r3, [pc, #40]	@ (8001424 <MX_OPAMP1_Init+0x48>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = DISABLE;
 80013fe:	4b09      	ldr	r3, [pc, #36]	@ (8001424 <MX_OPAMP1_Init+0x48>)
 8001400:	2200      	movs	r2, #0
 8001402:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001404:	4b07      	ldr	r3, [pc, #28]	@ (8001424 <MX_OPAMP1_Init+0x48>)
 8001406:	2200      	movs	r2, #0
 8001408:	619a      	str	r2, [r3, #24]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 800140a:	4b06      	ldr	r3, [pc, #24]	@ (8001424 <MX_OPAMP1_Init+0x48>)
 800140c:	2200      	movs	r2, #0
 800140e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8001410:	4804      	ldr	r0, [pc, #16]	@ (8001424 <MX_OPAMP1_Init+0x48>)
 8001412:	f005 f86d 	bl	80064f0 <HAL_OPAMP_Init>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_OPAMP1_Init+0x44>
  {
    Error_Handler();
 800141c:	f7ff ffd7 	bl	80013ce <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 8001420:	bf00      	nop
 8001422:	bd80      	pop	{r7, pc}
 8001424:	200001cc 	.word	0x200001cc
 8001428:	40010300 	.word	0x40010300

0800142c <MX_OPAMP2_Init>:
/* OPAMP2 init function */
void MX_OPAMP2_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP2_Init 0 */

  /* USER CODE BEGIN OPAMP2_Init 1 */

  /* USER CODE END OPAMP2_Init 1 */
  hopamp2.Instance = OPAMP2;
 8001430:	4b10      	ldr	r3, [pc, #64]	@ (8001474 <MX_OPAMP2_Init+0x48>)
 8001432:	4a11      	ldr	r2, [pc, #68]	@ (8001478 <MX_OPAMP2_Init+0x4c>)
 8001434:	601a      	str	r2, [r3, #0]
  hopamp2.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8001436:	4b0f      	ldr	r3, [pc, #60]	@ (8001474 <MX_OPAMP2_Init+0x48>)
 8001438:	2200      	movs	r2, #0
 800143a:	605a      	str	r2, [r3, #4]
  hopamp2.Init.Mode = OPAMP_STANDALONE_MODE;
 800143c:	4b0d      	ldr	r3, [pc, #52]	@ (8001474 <MX_OPAMP2_Init+0x48>)
 800143e:	2200      	movs	r2, #0
 8001440:	609a      	str	r2, [r3, #8]
  hopamp2.Init.InvertingInput = OPAMP_INVERTINGINPUT_IO0;
 8001442:	4b0c      	ldr	r3, [pc, #48]	@ (8001474 <MX_OPAMP2_Init+0x48>)
 8001444:	2200      	movs	r2, #0
 8001446:	60da      	str	r2, [r3, #12]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8001448:	4b0a      	ldr	r3, [pc, #40]	@ (8001474 <MX_OPAMP2_Init+0x48>)
 800144a:	2200      	movs	r2, #0
 800144c:	611a      	str	r2, [r3, #16]
  hopamp2.Init.InternalOutput = DISABLE;
 800144e:	4b09      	ldr	r3, [pc, #36]	@ (8001474 <MX_OPAMP2_Init+0x48>)
 8001450:	2200      	movs	r2, #0
 8001452:	751a      	strb	r2, [r3, #20]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001454:	4b07      	ldr	r3, [pc, #28]	@ (8001474 <MX_OPAMP2_Init+0x48>)
 8001456:	2200      	movs	r2, #0
 8001458:	619a      	str	r2, [r3, #24]
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 800145a:	4b06      	ldr	r3, [pc, #24]	@ (8001474 <MX_OPAMP2_Init+0x48>)
 800145c:	2200      	movs	r2, #0
 800145e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 8001460:	4804      	ldr	r0, [pc, #16]	@ (8001474 <MX_OPAMP2_Init+0x48>)
 8001462:	f005 f845 	bl	80064f0 <HAL_OPAMP_Init>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_OPAMP2_Init+0x44>
  {
    Error_Handler();
 800146c:	f7ff ffaf 	bl	80013ce <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP2_Init 2 */

  /* USER CODE END OPAMP2_Init 2 */

}
 8001470:	bf00      	nop
 8001472:	bd80      	pop	{r7, pc}
 8001474:	20000208 	.word	0x20000208
 8001478:	40010304 	.word	0x40010304

0800147c <MX_OPAMP3_Init>:
/* OPAMP3 init function */
void MX_OPAMP3_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP3_Init 0 */

  /* USER CODE BEGIN OPAMP3_Init 1 */

  /* USER CODE END OPAMP3_Init 1 */
  hopamp3.Instance = OPAMP3;
 8001480:	4b10      	ldr	r3, [pc, #64]	@ (80014c4 <MX_OPAMP3_Init+0x48>)
 8001482:	4a11      	ldr	r2, [pc, #68]	@ (80014c8 <MX_OPAMP3_Init+0x4c>)
 8001484:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8001486:	4b0f      	ldr	r3, [pc, #60]	@ (80014c4 <MX_OPAMP3_Init+0x48>)
 8001488:	2200      	movs	r2, #0
 800148a:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_STANDALONE_MODE;
 800148c:	4b0d      	ldr	r3, [pc, #52]	@ (80014c4 <MX_OPAMP3_Init+0x48>)
 800148e:	2200      	movs	r2, #0
 8001490:	609a      	str	r2, [r3, #8]
  hopamp3.Init.InvertingInput = OPAMP_INVERTINGINPUT_IO0;
 8001492:	4b0c      	ldr	r3, [pc, #48]	@ (80014c4 <MX_OPAMP3_Init+0x48>)
 8001494:	2200      	movs	r2, #0
 8001496:	60da      	str	r2, [r3, #12]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8001498:	4b0a      	ldr	r3, [pc, #40]	@ (80014c4 <MX_OPAMP3_Init+0x48>)
 800149a:	2200      	movs	r2, #0
 800149c:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = DISABLE;
 800149e:	4b09      	ldr	r3, [pc, #36]	@ (80014c4 <MX_OPAMP3_Init+0x48>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80014a4:	4b07      	ldr	r3, [pc, #28]	@ (80014c4 <MX_OPAMP3_Init+0x48>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	619a      	str	r2, [r3, #24]
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80014aa:	4b06      	ldr	r3, [pc, #24]	@ (80014c4 <MX_OPAMP3_Init+0x48>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 80014b0:	4804      	ldr	r0, [pc, #16]	@ (80014c4 <MX_OPAMP3_Init+0x48>)
 80014b2:	f005 f81d 	bl	80064f0 <HAL_OPAMP_Init>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <MX_OPAMP3_Init+0x44>
  {
    Error_Handler();
 80014bc:	f7ff ff87 	bl	80013ce <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP3_Init 2 */

  /* USER CODE END OPAMP3_Init 2 */

}
 80014c0:	bf00      	nop
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	20000244 	.word	0x20000244
 80014c8:	40010308 	.word	0x40010308

080014cc <HAL_OPAMP_MspInit>:

void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* opampHandle)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b08a      	sub	sp, #40	@ 0x28
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d4:	f107 0314 	add.w	r3, r7, #20
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	605a      	str	r2, [r3, #4]
 80014de:	609a      	str	r2, [r3, #8]
 80014e0:	60da      	str	r2, [r3, #12]
 80014e2:	611a      	str	r2, [r3, #16]
  if(opampHandle->Instance==OPAMP1)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a2e      	ldr	r2, [pc, #184]	@ (80015a4 <HAL_OPAMP_MspInit+0xd8>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d119      	bne.n	8001522 <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ee:	4b2e      	ldr	r3, [pc, #184]	@ (80015a8 <HAL_OPAMP_MspInit+0xdc>)
 80014f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014f2:	4a2d      	ldr	r2, [pc, #180]	@ (80015a8 <HAL_OPAMP_MspInit+0xdc>)
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014fa:	4b2b      	ldr	r3, [pc, #172]	@ (80015a8 <HAL_OPAMP_MspInit+0xdc>)
 80014fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	613b      	str	r3, [r7, #16]
 8001504:	693b      	ldr	r3, [r7, #16]
    /**OPAMP1 GPIO Configuration
    PA1     ------> OPAMP1_VINP
    PA2     ------> OPAMP1_VOUT
    PA3     ------> OPAMP1_VINM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001506:	230e      	movs	r3, #14
 8001508:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800150a:	2303      	movs	r3, #3
 800150c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150e:	2300      	movs	r3, #0
 8001510:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001512:	f107 0314 	add.w	r3, r7, #20
 8001516:	4619      	mov	r1, r3
 8001518:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800151c:	f004 fe36 	bl	800618c <HAL_GPIO_Init>

  /* USER CODE BEGIN OPAMP3_MspInit 1 */

  /* USER CODE END OPAMP3_MspInit 1 */
  }
}
 8001520:	e03b      	b.n	800159a <HAL_OPAMP_MspInit+0xce>
  else if(opampHandle->Instance==OPAMP2)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a21      	ldr	r2, [pc, #132]	@ (80015ac <HAL_OPAMP_MspInit+0xe0>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d119      	bne.n	8001560 <HAL_OPAMP_MspInit+0x94>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800152c:	4b1e      	ldr	r3, [pc, #120]	@ (80015a8 <HAL_OPAMP_MspInit+0xdc>)
 800152e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001530:	4a1d      	ldr	r2, [pc, #116]	@ (80015a8 <HAL_OPAMP_MspInit+0xdc>)
 8001532:	f043 0301 	orr.w	r3, r3, #1
 8001536:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001538:	4b1b      	ldr	r3, [pc, #108]	@ (80015a8 <HAL_OPAMP_MspInit+0xdc>)
 800153a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800153c:	f003 0301 	and.w	r3, r3, #1
 8001540:	60fb      	str	r3, [r7, #12]
 8001542:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001544:	23e0      	movs	r3, #224	@ 0xe0
 8001546:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001548:	2303      	movs	r3, #3
 800154a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154c:	2300      	movs	r3, #0
 800154e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001550:	f107 0314 	add.w	r3, r7, #20
 8001554:	4619      	mov	r1, r3
 8001556:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800155a:	f004 fe17 	bl	800618c <HAL_GPIO_Init>
}
 800155e:	e01c      	b.n	800159a <HAL_OPAMP_MspInit+0xce>
  else if(opampHandle->Instance==OPAMP3)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a12      	ldr	r2, [pc, #72]	@ (80015b0 <HAL_OPAMP_MspInit+0xe4>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d117      	bne.n	800159a <HAL_OPAMP_MspInit+0xce>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800156a:	4b0f      	ldr	r3, [pc, #60]	@ (80015a8 <HAL_OPAMP_MspInit+0xdc>)
 800156c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800156e:	4a0e      	ldr	r2, [pc, #56]	@ (80015a8 <HAL_OPAMP_MspInit+0xdc>)
 8001570:	f043 0302 	orr.w	r3, r3, #2
 8001574:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001576:	4b0c      	ldr	r3, [pc, #48]	@ (80015a8 <HAL_OPAMP_MspInit+0xdc>)
 8001578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800157a:	f003 0302 	and.w	r3, r3, #2
 800157e:	60bb      	str	r3, [r7, #8]
 8001580:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001582:	2307      	movs	r3, #7
 8001584:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001586:	2303      	movs	r3, #3
 8001588:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158a:	2300      	movs	r3, #0
 800158c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800158e:	f107 0314 	add.w	r3, r7, #20
 8001592:	4619      	mov	r1, r3
 8001594:	4807      	ldr	r0, [pc, #28]	@ (80015b4 <HAL_OPAMP_MspInit+0xe8>)
 8001596:	f004 fdf9 	bl	800618c <HAL_GPIO_Init>
}
 800159a:	bf00      	nop
 800159c:	3728      	adds	r7, #40	@ 0x28
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	40010300 	.word	0x40010300
 80015a8:	40021000 	.word	0x40021000
 80015ac:	40010304 	.word	0x40010304
 80015b0:	40010308 	.word	0x40010308
 80015b4:	48000400 	.word	0x48000400

080015b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015be:	4b0f      	ldr	r3, [pc, #60]	@ (80015fc <HAL_MspInit+0x44>)
 80015c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015c2:	4a0e      	ldr	r2, [pc, #56]	@ (80015fc <HAL_MspInit+0x44>)
 80015c4:	f043 0301 	orr.w	r3, r3, #1
 80015c8:	6613      	str	r3, [r2, #96]	@ 0x60
 80015ca:	4b0c      	ldr	r3, [pc, #48]	@ (80015fc <HAL_MspInit+0x44>)
 80015cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015ce:	f003 0301 	and.w	r3, r3, #1
 80015d2:	607b      	str	r3, [r7, #4]
 80015d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015d6:	4b09      	ldr	r3, [pc, #36]	@ (80015fc <HAL_MspInit+0x44>)
 80015d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015da:	4a08      	ldr	r2, [pc, #32]	@ (80015fc <HAL_MspInit+0x44>)
 80015dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80015e2:	4b06      	ldr	r3, [pc, #24]	@ (80015fc <HAL_MspInit+0x44>)
 80015e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015ea:	603b      	str	r3, [r7, #0]
 80015ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80015ee:	f005 f925 	bl	800683c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015f2:	bf00      	nop
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40021000 	.word	0x40021000

08001600 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001604:	bf00      	nop
 8001606:	e7fd      	b.n	8001604 <NMI_Handler+0x4>

08001608 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800160c:	bf00      	nop
 800160e:	e7fd      	b.n	800160c <HardFault_Handler+0x4>

08001610 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001614:	bf00      	nop
 8001616:	e7fd      	b.n	8001614 <MemManage_Handler+0x4>

08001618 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800161c:	bf00      	nop
 800161e:	e7fd      	b.n	800161c <BusFault_Handler+0x4>

08001620 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001624:	bf00      	nop
 8001626:	e7fd      	b.n	8001624 <UsageFault_Handler+0x4>

08001628 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800162c:	bf00      	nop
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr

08001636 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001636:	b480      	push	{r7}
 8001638:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800163a:	bf00      	nop
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001648:	bf00      	nop
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr

08001652 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001656:	f000 fc1f 	bl	8001e98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}
	...

08001660 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001664:	4802      	ldr	r0, [pc, #8]	@ (8001670 <DMA1_Channel1_IRQHandler+0x10>)
 8001666:	f003 fff0 	bl	800564a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	200003ac 	.word	0x200003ac

08001674 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001678:	4803      	ldr	r0, [pc, #12]	@ (8001688 <ADC1_2_IRQHandler+0x14>)
 800167a:	f001 f801 	bl	8002680 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800167e:	4803      	ldr	r0, [pc, #12]	@ (800168c <ADC1_2_IRQHandler+0x18>)
 8001680:	f000 fffe 	bl	8002680 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001684:	bf00      	nop
 8001686:	bd80      	pop	{r7, pc}
 8001688:	20000040 	.word	0x20000040
 800168c:	200000ac 	.word	0x200000ac

08001690 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001694:	4805      	ldr	r0, [pc, #20]	@ (80016ac <FDCAN1_IT0_IRQHandler+0x1c>)
 8001696:	f004 fb89 	bl	8005dac <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */
	HAL_FDCAN_GetRxMessage(&hfdcan1,FDCAN_RX_FIFO0,&RxHeader,RxData);
 800169a:	4b05      	ldr	r3, [pc, #20]	@ (80016b0 <FDCAN1_IT0_IRQHandler+0x20>)
 800169c:	4a05      	ldr	r2, [pc, #20]	@ (80016b4 <FDCAN1_IT0_IRQHandler+0x24>)
 800169e:	2140      	movs	r1, #64	@ 0x40
 80016a0:	4802      	ldr	r0, [pc, #8]	@ (80016ac <FDCAN1_IT0_IRQHandler+0x1c>)
 80016a2:	f004 fa7b 	bl	8005b9c <HAL_FDCAN_GetRxMessage>
  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80016a6:	bf00      	nop
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	20000168 	.word	0x20000168
 80016b0:	20000508 	.word	0x20000508
 80016b4:	200004e0 	.word	0x200004e0

080016b8 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80016bc:	4802      	ldr	r0, [pc, #8]	@ (80016c8 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 80016be:	f006 fa9d 	bl	8007bfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	20000280 	.word	0x20000280

080016cc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80016d0:	4802      	ldr	r0, [pc, #8]	@ (80016dc <TIM1_UP_TIM16_IRQHandler+0x10>)
 80016d2:	f006 fa93 	bl	8007bfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80016d6:	bf00      	nop
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	20000280 	.word	0x20000280

080016e0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80016e4:	4802      	ldr	r0, [pc, #8]	@ (80016f0 <TIM1_CC_IRQHandler+0x10>)
 80016e6:	f006 fa89 	bl	8007bfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	20000280 	.word	0x20000280

080016f4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80016f8:	4802      	ldr	r0, [pc, #8]	@ (8001704 <TIM4_IRQHandler+0x10>)
 80016fa:	f006 fa7f 	bl	8007bfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	200002cc 	.word	0x200002cc

08001708 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800170c:	4802      	ldr	r0, [pc, #8]	@ (8001718 <USART3_IRQHandler+0x10>)
 800170e:	f008 f833 	bl	8009778 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001712:	bf00      	nop
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	20000318 	.word	0x20000318

0800171c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button1_Pin);
 8001720:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001724:	f004 fecc 	bl	80064c0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Button2_Pin);
 8001728:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800172c:	f004 fec8 	bl	80064c0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Button3_Pin);
 8001730:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001734:	f004 fec4 	bl	80064c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001738:	bf00      	nop
 800173a:	bd80      	pop	{r7, pc}

0800173c <COMP1_2_3_IRQHandler>:

/**
  * @brief This function handles COMP1, COMP2 and COMP3 interrupts through EXTI lines 21, 22 and 29.
  */
void COMP1_2_3_IRQHandler(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP1_2_3_IRQn 0 */

  /* USER CODE END COMP1_2_3_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp1);
 8001740:	4802      	ldr	r0, [pc, #8]	@ (800174c <COMP1_2_3_IRQHandler+0x10>)
 8001742:	f003 f9d5 	bl	8004af0 <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP1_2_3_IRQn 1 */

  /* USER CODE END COMP1_2_3_IRQn 1 */
}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	2000011c 	.word	0x2000011c

08001750 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001754:	4b06      	ldr	r3, [pc, #24]	@ (8001770 <SystemInit+0x20>)
 8001756:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800175a:	4a05      	ldr	r2, [pc, #20]	@ (8001770 <SystemInit+0x20>)
 800175c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001760:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001764:	bf00      	nop
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	e000ed00 	.word	0xe000ed00

08001774 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b09e      	sub	sp, #120	@ 0x78
 8001778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800177a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]
 8001782:	605a      	str	r2, [r3, #4]
 8001784:	609a      	str	r2, [r3, #8]
 8001786:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001788:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	605a      	str	r2, [r3, #4]
 8001792:	609a      	str	r2, [r3, #8]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8001794:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	605a      	str	r2, [r3, #4]
 800179e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017a0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	605a      	str	r2, [r3, #4]
 80017aa:	609a      	str	r2, [r3, #8]
 80017ac:	60da      	str	r2, [r3, #12]
 80017ae:	611a      	str	r2, [r3, #16]
 80017b0:	615a      	str	r2, [r3, #20]
 80017b2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80017b4:	463b      	mov	r3, r7
 80017b6:	2234      	movs	r2, #52	@ 0x34
 80017b8:	2100      	movs	r1, #0
 80017ba:	4618      	mov	r0, r3
 80017bc:	f009 fd76 	bl	800b2ac <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017c0:	4b64      	ldr	r3, [pc, #400]	@ (8001954 <MX_TIM1_Init+0x1e0>)
 80017c2:	4a65      	ldr	r2, [pc, #404]	@ (8001958 <MX_TIM1_Init+0x1e4>)
 80017c4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1-1;
 80017c6:	4b63      	ldr	r3, [pc, #396]	@ (8001954 <MX_TIM1_Init+0x1e0>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80017cc:	4b61      	ldr	r3, [pc, #388]	@ (8001954 <MX_TIM1_Init+0x1e0>)
 80017ce:	2220      	movs	r2, #32
 80017d0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7999;
 80017d2:	4b60      	ldr	r3, [pc, #384]	@ (8001954 <MX_TIM1_Init+0x1e0>)
 80017d4:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80017d8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80017da:	4b5e      	ldr	r3, [pc, #376]	@ (8001954 <MX_TIM1_Init+0x1e0>)
 80017dc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017e0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 80017e2:	4b5c      	ldr	r3, [pc, #368]	@ (8001954 <MX_TIM1_Init+0x1e0>)
 80017e4:	2201      	movs	r2, #1
 80017e6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017e8:	4b5a      	ldr	r3, [pc, #360]	@ (8001954 <MX_TIM1_Init+0x1e0>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80017ee:	4859      	ldr	r0, [pc, #356]	@ (8001954 <MX_TIM1_Init+0x1e0>)
 80017f0:	f005 ff52 	bl	8007698 <HAL_TIM_Base_Init>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80017fa:	f7ff fde8 	bl	80013ce <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001802:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001804:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001808:	4619      	mov	r1, r3
 800180a:	4852      	ldr	r0, [pc, #328]	@ (8001954 <MX_TIM1_Init+0x1e0>)
 800180c:	f006 fc5a 	bl	80080c4 <HAL_TIM_ConfigClockSource>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001816:	f7ff fdda 	bl	80013ce <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800181a:	484e      	ldr	r0, [pc, #312]	@ (8001954 <MX_TIM1_Init+0x1e0>)
 800181c:	f005 fff6 	bl	800780c <HAL_TIM_PWM_Init>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8001826:	f7ff fdd2 	bl	80013ce <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 800182a:	2370      	movs	r3, #112	@ 0x70
 800182c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800182e:	2300      	movs	r3, #0
 8001830:	663b      	str	r3, [r7, #96]	@ 0x60
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001832:	2300      	movs	r3, #0
 8001834:	667b      	str	r3, [r7, #100]	@ 0x64
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001836:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800183a:	4619      	mov	r1, r3
 800183c:	4845      	ldr	r0, [pc, #276]	@ (8001954 <MX_TIM1_Init+0x1e0>)
 800183e:	f007 fc79 	bl	8009134 <HAL_TIMEx_MasterConfigSynchronization>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 8001848:	f7ff fdc1 	bl	80013ce <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP1;
 800184c:	2302      	movs	r3, #2
 800184e:	653b      	str	r3, [r7, #80]	@ 0x50
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 8001850:	2301      	movs	r3, #1
 8001852:	657b      	str	r3, [r7, #84]	@ 0x54
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8001854:	2300      	movs	r3, #0
 8001856:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8001858:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800185c:	461a      	mov	r2, r3
 800185e:	2101      	movs	r1, #1
 8001860:	483c      	ldr	r0, [pc, #240]	@ (8001954 <MX_TIM1_Init+0x1e0>)
 8001862:	f007 fd75 	bl	8009350 <HAL_TIMEx_ConfigBreakInput>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 800186c:	f7ff fdaf 	bl	80013ce <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001870:	2360      	movs	r3, #96	@ 0x60
 8001872:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 8001874:	2300      	movs	r3, #0
 8001876:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001878:	2300      	movs	r3, #0
 800187a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800187c:	2300      	movs	r3, #0
 800187e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001880:	2300      	movs	r3, #0
 8001882:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001884:	2300      	movs	r3, #0
 8001886:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001888:	2300      	movs	r3, #0
 800188a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800188c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001890:	2200      	movs	r2, #0
 8001892:	4619      	mov	r1, r3
 8001894:	482f      	ldr	r0, [pc, #188]	@ (8001954 <MX_TIM1_Init+0x1e0>)
 8001896:	f006 fb01 	bl	8007e9c <HAL_TIM_PWM_ConfigChannel>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 80018a0:	f7ff fd95 	bl	80013ce <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018a4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80018a8:	2204      	movs	r2, #4
 80018aa:	4619      	mov	r1, r3
 80018ac:	4829      	ldr	r0, [pc, #164]	@ (8001954 <MX_TIM1_Init+0x1e0>)
 80018ae:	f006 faf5 	bl	8007e9c <HAL_TIM_PWM_ConfigChannel>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 80018b8:	f7ff fd89 	bl	80013ce <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80018bc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80018c0:	2208      	movs	r2, #8
 80018c2:	4619      	mov	r1, r3
 80018c4:	4823      	ldr	r0, [pc, #140]	@ (8001954 <MX_TIM1_Init+0x1e0>)
 80018c6:	f006 fae9 	bl	8007e9c <HAL_TIM_PWM_ConfigChannel>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <MX_TIM1_Init+0x160>
  {
    Error_Handler();
 80018d0:	f7ff fd7d 	bl	80013ce <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80018d4:	2370      	movs	r3, #112	@ 0x70
 80018d6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 7998;
 80018d8:	f641 733e 	movw	r3, #7998	@ 0x1f3e
 80018dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80018de:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80018e2:	220c      	movs	r2, #12
 80018e4:	4619      	mov	r1, r3
 80018e6:	481b      	ldr	r0, [pc, #108]	@ (8001954 <MX_TIM1_Init+0x1e0>)
 80018e8:	f006 fad8 	bl	8007e9c <HAL_TIM_PWM_ConfigChannel>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <MX_TIM1_Init+0x182>
  {
    Error_Handler();
 80018f2:	f7ff fd6c 	bl	80013ce <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018f6:	2300      	movs	r3, #0
 80018f8:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018fa:	2300      	movs	r3, #0
 80018fc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018fe:	2300      	movs	r3, #0
 8001900:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 120;
 8001902:	2378      	movs	r3, #120	@ 0x78
 8001904:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8001906:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800190a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800190c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001910:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 2;
 8001912:	2302      	movs	r3, #2
 8001914:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001916:	2300      	movs	r3, #0
 8001918:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800191a:	2300      	movs	r3, #0
 800191c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800191e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001922:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001924:	2300      	movs	r3, #0
 8001926:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001928:	2300      	movs	r3, #0
 800192a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800192c:	2300      	movs	r3, #0
 800192e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001930:	463b      	mov	r3, r7
 8001932:	4619      	mov	r1, r3
 8001934:	4807      	ldr	r0, [pc, #28]	@ (8001954 <MX_TIM1_Init+0x1e0>)
 8001936:	f007 fc7f 	bl	8009238 <HAL_TIMEx_ConfigBreakDeadTime>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <MX_TIM1_Init+0x1d0>
  {
    Error_Handler();
 8001940:	f7ff fd45 	bl	80013ce <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001944:	4803      	ldr	r0, [pc, #12]	@ (8001954 <MX_TIM1_Init+0x1e0>)
 8001946:	f000 f8e9 	bl	8001b1c <HAL_TIM_MspPostInit>

}
 800194a:	bf00      	nop
 800194c:	3778      	adds	r7, #120	@ 0x78
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	20000280 	.word	0x20000280
 8001958:	40012c00 	.word	0x40012c00

0800195c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b08c      	sub	sp, #48	@ 0x30
 8001960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001962:	f107 0320 	add.w	r3, r7, #32
 8001966:	2200      	movs	r2, #0
 8001968:	601a      	str	r2, [r3, #0]
 800196a:	605a      	str	r2, [r3, #4]
 800196c:	609a      	str	r2, [r3, #8]
 800196e:	60da      	str	r2, [r3, #12]
  TIM_HallSensor_InitTypeDef sConfig = {0};
 8001970:	f107 0310 	add.w	r3, r7, #16
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	605a      	str	r2, [r3, #4]
 800197a:	609a      	str	r2, [r3, #8]
 800197c:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800197e:	1d3b      	adds	r3, r7, #4
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	605a      	str	r2, [r3, #4]
 8001986:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001988:	4b26      	ldr	r3, [pc, #152]	@ (8001a24 <MX_TIM4_Init+0xc8>)
 800198a:	4a27      	ldr	r2, [pc, #156]	@ (8001a28 <MX_TIM4_Init+0xcc>)
 800198c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16-1;
 800198e:	4b25      	ldr	r3, [pc, #148]	@ (8001a24 <MX_TIM4_Init+0xc8>)
 8001990:	220f      	movs	r2, #15
 8001992:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001994:	4b23      	ldr	r3, [pc, #140]	@ (8001a24 <MX_TIM4_Init+0xc8>)
 8001996:	2200      	movs	r2, #0
 8001998:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800199a:	4b22      	ldr	r3, [pc, #136]	@ (8001a24 <MX_TIM4_Init+0xc8>)
 800199c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80019a0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019a2:	4b20      	ldr	r3, [pc, #128]	@ (8001a24 <MX_TIM4_Init+0xc8>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019a8:	4b1e      	ldr	r3, [pc, #120]	@ (8001a24 <MX_TIM4_Init+0xc8>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80019ae:	481d      	ldr	r0, [pc, #116]	@ (8001a24 <MX_TIM4_Init+0xc8>)
 80019b0:	f005 fe72 	bl	8007698 <HAL_TIM_Base_Init>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 80019ba:	f7ff fd08 	bl	80013ce <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019c2:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80019c4:	f107 0320 	add.w	r3, r7, #32
 80019c8:	4619      	mov	r1, r3
 80019ca:	4816      	ldr	r0, [pc, #88]	@ (8001a24 <MX_TIM4_Init+0xc8>)
 80019cc:	f006 fb7a 	bl	80080c4 <HAL_TIM_ConfigClockSource>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80019d6:	f7ff fcfa 	bl	80013ce <Error_Handler>
  }
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80019da:	2300      	movs	r3, #0
 80019dc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80019de:	2300      	movs	r3, #0
 80019e0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 10;
 80019e2:	230a      	movs	r3, #10
 80019e4:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 5;
 80019e6:	2305      	movs	r3, #5
 80019e8:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim4, &sConfig) != HAL_OK)
 80019ea:	f107 0310 	add.w	r3, r7, #16
 80019ee:	4619      	mov	r1, r3
 80019f0:	480c      	ldr	r0, [pc, #48]	@ (8001a24 <MX_TIM4_Init+0xc8>)
 80019f2:	f007 f944 	bl	8008c7e <HAL_TIMEx_HallSensor_Init>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <MX_TIM4_Init+0xa4>
  {
    Error_Handler();
 80019fc:	f7ff fce7 	bl	80013ce <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8001a00:	2350      	movs	r3, #80	@ 0x50
 8001a02:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a04:	2300      	movs	r3, #0
 8001a06:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001a08:	1d3b      	adds	r3, r7, #4
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	4805      	ldr	r0, [pc, #20]	@ (8001a24 <MX_TIM4_Init+0xc8>)
 8001a0e:	f007 fb91 	bl	8009134 <HAL_TIMEx_MasterConfigSynchronization>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <MX_TIM4_Init+0xc0>
  {
    Error_Handler();
 8001a18:	f7ff fcd9 	bl	80013ce <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001a1c:	bf00      	nop
 8001a1e:	3730      	adds	r7, #48	@ 0x30
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	200002cc 	.word	0x200002cc
 8001a28:	40000800 	.word	0x40000800

08001a2c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b08a      	sub	sp, #40	@ 0x28
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a34:	f107 0314 	add.w	r3, r7, #20
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]
 8001a3c:	605a      	str	r2, [r3, #4]
 8001a3e:	609a      	str	r2, [r3, #8]
 8001a40:	60da      	str	r2, [r3, #12]
 8001a42:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a30      	ldr	r2, [pc, #192]	@ (8001b0c <HAL_TIM_Base_MspInit+0xe0>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d124      	bne.n	8001a98 <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a4e:	4b30      	ldr	r3, [pc, #192]	@ (8001b10 <HAL_TIM_Base_MspInit+0xe4>)
 8001a50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a52:	4a2f      	ldr	r2, [pc, #188]	@ (8001b10 <HAL_TIM_Base_MspInit+0xe4>)
 8001a54:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001a58:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a5a:	4b2d      	ldr	r3, [pc, #180]	@ (8001b10 <HAL_TIM_Base_MspInit+0xe4>)
 8001a5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a5e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a62:	613b      	str	r3, [r7, #16]
 8001a64:	693b      	ldr	r3, [r7, #16]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8001a66:	2200      	movs	r2, #0
 8001a68:	2100      	movs	r1, #0
 8001a6a:	2018      	movs	r0, #24
 8001a6c:	f003 f961 	bl	8004d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001a70:	2018      	movs	r0, #24
 8001a72:	f003 f978 	bl	8004d66 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001a76:	2200      	movs	r2, #0
 8001a78:	2100      	movs	r1, #0
 8001a7a:	2019      	movs	r0, #25
 8001a7c:	f003 f959 	bl	8004d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001a80:	2019      	movs	r0, #25
 8001a82:	f003 f970 	bl	8004d66 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001a86:	2200      	movs	r2, #0
 8001a88:	2100      	movs	r1, #0
 8001a8a:	201b      	movs	r0, #27
 8001a8c:	f003 f951 	bl	8004d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001a90:	201b      	movs	r0, #27
 8001a92:	f003 f968 	bl	8004d66 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001a96:	e035      	b.n	8001b04 <HAL_TIM_Base_MspInit+0xd8>
  else if(tim_baseHandle->Instance==TIM4)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a1d      	ldr	r2, [pc, #116]	@ (8001b14 <HAL_TIM_Base_MspInit+0xe8>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d130      	bne.n	8001b04 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001aa2:	4b1b      	ldr	r3, [pc, #108]	@ (8001b10 <HAL_TIM_Base_MspInit+0xe4>)
 8001aa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aa6:	4a1a      	ldr	r2, [pc, #104]	@ (8001b10 <HAL_TIM_Base_MspInit+0xe4>)
 8001aa8:	f043 0304 	orr.w	r3, r3, #4
 8001aac:	6593      	str	r3, [r2, #88]	@ 0x58
 8001aae:	4b18      	ldr	r3, [pc, #96]	@ (8001b10 <HAL_TIM_Base_MspInit+0xe4>)
 8001ab0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ab2:	f003 0304 	and.w	r3, r3, #4
 8001ab6:	60fb      	str	r3, [r7, #12]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aba:	4b15      	ldr	r3, [pc, #84]	@ (8001b10 <HAL_TIM_Base_MspInit+0xe4>)
 8001abc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001abe:	4a14      	ldr	r2, [pc, #80]	@ (8001b10 <HAL_TIM_Base_MspInit+0xe4>)
 8001ac0:	f043 0302 	orr.w	r3, r3, #2
 8001ac4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ac6:	4b12      	ldr	r3, [pc, #72]	@ (8001b10 <HAL_TIM_Base_MspInit+0xe4>)
 8001ac8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	60bb      	str	r3, [r7, #8]
 8001ad0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8001ad2:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8001ad6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad8:	2302      	movs	r3, #2
 8001ada:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001adc:	2300      	movs	r3, #0
 8001ade:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ae8:	f107 0314 	add.w	r3, r7, #20
 8001aec:	4619      	mov	r1, r3
 8001aee:	480a      	ldr	r0, [pc, #40]	@ (8001b18 <HAL_TIM_Base_MspInit+0xec>)
 8001af0:	f004 fb4c 	bl	800618c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001af4:	2200      	movs	r2, #0
 8001af6:	2100      	movs	r1, #0
 8001af8:	201e      	movs	r0, #30
 8001afa:	f003 f91a 	bl	8004d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001afe:	201e      	movs	r0, #30
 8001b00:	f003 f931 	bl	8004d66 <HAL_NVIC_EnableIRQ>
}
 8001b04:	bf00      	nop
 8001b06:	3728      	adds	r7, #40	@ 0x28
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	40012c00 	.word	0x40012c00
 8001b10:	40021000 	.word	0x40021000
 8001b14:	40000800 	.word	0x40000800
 8001b18:	48000400 	.word	0x48000400

08001b1c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b08a      	sub	sp, #40	@ 0x28
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b24:	f107 0314 	add.w	r3, r7, #20
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	605a      	str	r2, [r3, #4]
 8001b2e:	609a      	str	r2, [r3, #8]
 8001b30:	60da      	str	r2, [r3, #12]
 8001b32:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a29      	ldr	r2, [pc, #164]	@ (8001be0 <HAL_TIM_MspPostInit+0xc4>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d14b      	bne.n	8001bd6 <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b3e:	4b29      	ldr	r3, [pc, #164]	@ (8001be4 <HAL_TIM_MspPostInit+0xc8>)
 8001b40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b42:	4a28      	ldr	r2, [pc, #160]	@ (8001be4 <HAL_TIM_MspPostInit+0xc8>)
 8001b44:	f043 0302 	orr.w	r3, r3, #2
 8001b48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b4a:	4b26      	ldr	r3, [pc, #152]	@ (8001be4 <HAL_TIM_MspPostInit+0xc8>)
 8001b4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	613b      	str	r3, [r7, #16]
 8001b54:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b56:	4b23      	ldr	r3, [pc, #140]	@ (8001be4 <HAL_TIM_MspPostInit+0xc8>)
 8001b58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b5a:	4a22      	ldr	r2, [pc, #136]	@ (8001be4 <HAL_TIM_MspPostInit+0xc8>)
 8001b5c:	f043 0301 	orr.w	r3, r3, #1
 8001b60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b62:	4b20      	ldr	r3, [pc, #128]	@ (8001be4 <HAL_TIM_MspPostInit+0xc8>)
 8001b64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b66:	f003 0301 	and.w	r3, r3, #1
 8001b6a:	60fb      	str	r3, [r7, #12]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001b6e:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001b72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b74:	2302      	movs	r3, #2
 8001b76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001b80:	2306      	movs	r3, #6
 8001b82:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b84:	f107 0314 	add.w	r3, r7, #20
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4817      	ldr	r0, [pc, #92]	@ (8001be8 <HAL_TIM_MspPostInit+0xcc>)
 8001b8c:	f004 fafe 	bl	800618c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001b90:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001b94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b96:	2302      	movs	r3, #2
 8001b98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8001ba2:	2304      	movs	r3, #4
 8001ba4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ba6:	f107 0314 	add.w	r3, r7, #20
 8001baa:	4619      	mov	r1, r3
 8001bac:	480e      	ldr	r0, [pc, #56]	@ (8001be8 <HAL_TIM_MspPostInit+0xcc>)
 8001bae:	f004 faed 	bl	800618c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001bb2:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001bb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb8:	2302      	movs	r3, #2
 8001bba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001bc4:	2306      	movs	r3, #6
 8001bc6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc8:	f107 0314 	add.w	r3, r7, #20
 8001bcc:	4619      	mov	r1, r3
 8001bce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bd2:	f004 fadb 	bl	800618c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001bd6:	bf00      	nop
 8001bd8:	3728      	adds	r7, #40	@ 0x28
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	40012c00 	.word	0x40012c00
 8001be4:	40021000 	.word	0x40021000
 8001be8:	48000400 	.word	0x48000400

08001bec <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001bf0:	4b22      	ldr	r3, [pc, #136]	@ (8001c7c <MX_USART3_UART_Init+0x90>)
 8001bf2:	4a23      	ldr	r2, [pc, #140]	@ (8001c80 <MX_USART3_UART_Init+0x94>)
 8001bf4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 8001bf6:	4b21      	ldr	r3, [pc, #132]	@ (8001c7c <MX_USART3_UART_Init+0x90>)
 8001bf8:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8001bfc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001bfe:	4b1f      	ldr	r3, [pc, #124]	@ (8001c7c <MX_USART3_UART_Init+0x90>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001c04:	4b1d      	ldr	r3, [pc, #116]	@ (8001c7c <MX_USART3_UART_Init+0x90>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001c0a:	4b1c      	ldr	r3, [pc, #112]	@ (8001c7c <MX_USART3_UART_Init+0x90>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001c10:	4b1a      	ldr	r3, [pc, #104]	@ (8001c7c <MX_USART3_UART_Init+0x90>)
 8001c12:	220c      	movs	r2, #12
 8001c14:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c16:	4b19      	ldr	r3, [pc, #100]	@ (8001c7c <MX_USART3_UART_Init+0x90>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c1c:	4b17      	ldr	r3, [pc, #92]	@ (8001c7c <MX_USART3_UART_Init+0x90>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c22:	4b16      	ldr	r3, [pc, #88]	@ (8001c7c <MX_USART3_UART_Init+0x90>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c28:	4b14      	ldr	r3, [pc, #80]	@ (8001c7c <MX_USART3_UART_Init+0x90>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c2e:	4b13      	ldr	r3, [pc, #76]	@ (8001c7c <MX_USART3_UART_Init+0x90>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001c34:	4811      	ldr	r0, [pc, #68]	@ (8001c7c <MX_USART3_UART_Init+0x90>)
 8001c36:	f007 fcce 	bl	80095d6 <HAL_UART_Init>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001c40:	f7ff fbc5 	bl	80013ce <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c44:	2100      	movs	r1, #0
 8001c46:	480d      	ldr	r0, [pc, #52]	@ (8001c7c <MX_USART3_UART_Init+0x90>)
 8001c48:	f008 ff43 	bl	800aad2 <HAL_UARTEx_SetTxFifoThreshold>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001c52:	f7ff fbbc 	bl	80013ce <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c56:	2100      	movs	r1, #0
 8001c58:	4808      	ldr	r0, [pc, #32]	@ (8001c7c <MX_USART3_UART_Init+0x90>)
 8001c5a:	f008 ff78 	bl	800ab4e <HAL_UARTEx_SetRxFifoThreshold>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001c64:	f7ff fbb3 	bl	80013ce <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001c68:	4804      	ldr	r0, [pc, #16]	@ (8001c7c <MX_USART3_UART_Init+0x90>)
 8001c6a:	f008 fef9 	bl	800aa60 <HAL_UARTEx_DisableFifoMode>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001c74:	f7ff fbab 	bl	80013ce <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001c78:	bf00      	nop
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	20000318 	.word	0x20000318
 8001c80:	40004800 	.word	0x40004800

08001c84 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b09a      	sub	sp, #104	@ 0x68
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c8c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]
 8001c94:	605a      	str	r2, [r3, #4]
 8001c96:	609a      	str	r2, [r3, #8]
 8001c98:	60da      	str	r2, [r3, #12]
 8001c9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c9c:	f107 0310 	add.w	r3, r7, #16
 8001ca0:	2244      	movs	r2, #68	@ 0x44
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f009 fb01 	bl	800b2ac <memset>
  if(uartHandle->Instance==USART3)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a37      	ldr	r2, [pc, #220]	@ (8001d8c <HAL_UART_MspInit+0x108>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d167      	bne.n	8001d84 <HAL_UART_MspInit+0x100>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001cb4:	2304      	movs	r3, #4
 8001cb6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cbc:	f107 0310 	add.w	r3, r7, #16
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f005 faf9 	bl	80072b8 <HAL_RCCEx_PeriphCLKConfig>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001ccc:	f7ff fb7f 	bl	80013ce <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001cd0:	4b2f      	ldr	r3, [pc, #188]	@ (8001d90 <HAL_UART_MspInit+0x10c>)
 8001cd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cd4:	4a2e      	ldr	r2, [pc, #184]	@ (8001d90 <HAL_UART_MspInit+0x10c>)
 8001cd6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001cda:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cdc:	4b2c      	ldr	r3, [pc, #176]	@ (8001d90 <HAL_UART_MspInit+0x10c>)
 8001cde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ce0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ce4:	60fb      	str	r3, [r7, #12]
 8001ce6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ce8:	4b29      	ldr	r3, [pc, #164]	@ (8001d90 <HAL_UART_MspInit+0x10c>)
 8001cea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cec:	4a28      	ldr	r2, [pc, #160]	@ (8001d90 <HAL_UART_MspInit+0x10c>)
 8001cee:	f043 0302 	orr.w	r3, r3, #2
 8001cf2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cf4:	4b26      	ldr	r3, [pc, #152]	@ (8001d90 <HAL_UART_MspInit+0x10c>)
 8001cf6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cf8:	f003 0302 	and.w	r3, r3, #2
 8001cfc:	60bb      	str	r3, [r7, #8]
 8001cfe:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001d00:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001d04:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d06:	2302      	movs	r3, #2
 8001d08:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d12:	2307      	movs	r3, #7
 8001d14:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d16:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	481d      	ldr	r0, [pc, #116]	@ (8001d94 <HAL_UART_MspInit+0x110>)
 8001d1e:	f004 fa35 	bl	800618c <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel1;
 8001d22:	4b1d      	ldr	r3, [pc, #116]	@ (8001d98 <HAL_UART_MspInit+0x114>)
 8001d24:	4a1d      	ldr	r2, [pc, #116]	@ (8001d9c <HAL_UART_MspInit+0x118>)
 8001d26:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8001d28:	4b1b      	ldr	r3, [pc, #108]	@ (8001d98 <HAL_UART_MspInit+0x114>)
 8001d2a:	221d      	movs	r2, #29
 8001d2c:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d2e:	4b1a      	ldr	r3, [pc, #104]	@ (8001d98 <HAL_UART_MspInit+0x114>)
 8001d30:	2210      	movs	r2, #16
 8001d32:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d34:	4b18      	ldr	r3, [pc, #96]	@ (8001d98 <HAL_UART_MspInit+0x114>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d3a:	4b17      	ldr	r3, [pc, #92]	@ (8001d98 <HAL_UART_MspInit+0x114>)
 8001d3c:	2280      	movs	r2, #128	@ 0x80
 8001d3e:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d40:	4b15      	ldr	r3, [pc, #84]	@ (8001d98 <HAL_UART_MspInit+0x114>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d46:	4b14      	ldr	r3, [pc, #80]	@ (8001d98 <HAL_UART_MspInit+0x114>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001d4c:	4b12      	ldr	r3, [pc, #72]	@ (8001d98 <HAL_UART_MspInit+0x114>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001d52:	4b11      	ldr	r3, [pc, #68]	@ (8001d98 <HAL_UART_MspInit+0x114>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001d58:	480f      	ldr	r0, [pc, #60]	@ (8001d98 <HAL_UART_MspInit+0x114>)
 8001d5a:	f003 fa93 	bl	8005284 <HAL_DMA_Init>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 8001d64:	f7ff fb33 	bl	80013ce <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	4a0b      	ldr	r2, [pc, #44]	@ (8001d98 <HAL_UART_MspInit+0x114>)
 8001d6c:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001d6e:	4a0a      	ldr	r2, [pc, #40]	@ (8001d98 <HAL_UART_MspInit+0x114>)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001d74:	2200      	movs	r2, #0
 8001d76:	2100      	movs	r1, #0
 8001d78:	2027      	movs	r0, #39	@ 0x27
 8001d7a:	f002 ffda 	bl	8004d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001d7e:	2027      	movs	r0, #39	@ 0x27
 8001d80:	f002 fff1 	bl	8004d66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001d84:	bf00      	nop
 8001d86:	3768      	adds	r7, #104	@ 0x68
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	40004800 	.word	0x40004800
 8001d90:	40021000 	.word	0x40021000
 8001d94:	48000400 	.word	0x48000400
 8001d98:	200003ac 	.word	0x200003ac
 8001d9c:	40020008 	.word	0x40020008

08001da0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001da0:	480d      	ldr	r0, [pc, #52]	@ (8001dd8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001da2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001da4:	f7ff fcd4 	bl	8001750 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001da8:	480c      	ldr	r0, [pc, #48]	@ (8001ddc <LoopForever+0x6>)
  ldr r1, =_edata
 8001daa:	490d      	ldr	r1, [pc, #52]	@ (8001de0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001dac:	4a0d      	ldr	r2, [pc, #52]	@ (8001de4 <LoopForever+0xe>)
  movs r3, #0
 8001dae:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001db0:	e002      	b.n	8001db8 <LoopCopyDataInit>

08001db2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001db2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001db4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001db6:	3304      	adds	r3, #4

08001db8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001db8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dbc:	d3f9      	bcc.n	8001db2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dbe:	4a0a      	ldr	r2, [pc, #40]	@ (8001de8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001dc0:	4c0a      	ldr	r4, [pc, #40]	@ (8001dec <LoopForever+0x16>)
  movs r3, #0
 8001dc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dc4:	e001      	b.n	8001dca <LoopFillZerobss>

08001dc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dc8:	3204      	adds	r2, #4

08001dca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dcc:	d3fb      	bcc.n	8001dc6 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001dce:	f009 fa75 	bl	800b2bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001dd2:	f7ff fa2d 	bl	8001230 <main>

08001dd6 <LoopForever>:

LoopForever:
    b LoopForever
 8001dd6:	e7fe      	b.n	8001dd6 <LoopForever>
  ldr   r0, =_estack
 8001dd8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001ddc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001de0:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8001de4:	0800b37c 	.word	0x0800b37c
  ldr r2, =_sbss
 8001de8:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8001dec:	20000534 	.word	0x20000534

08001df0 <COMP4_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001df0:	e7fe      	b.n	8001df0 <COMP4_IRQHandler>

08001df2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b082      	sub	sp, #8
 8001df6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dfc:	2003      	movs	r0, #3
 8001dfe:	f002 ff8d 	bl	8004d1c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e02:	200f      	movs	r0, #15
 8001e04:	f000 f80e 	bl	8001e24 <HAL_InitTick>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d002      	beq.n	8001e14 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	71fb      	strb	r3, [r7, #7]
 8001e12:	e001      	b.n	8001e18 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e14:	f7ff fbd0 	bl	80015b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e18:	79fb      	ldrb	r3, [r7, #7]

}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
	...

08001e24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001e30:	4b16      	ldr	r3, [pc, #88]	@ (8001e8c <HAL_InitTick+0x68>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d022      	beq.n	8001e7e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001e38:	4b15      	ldr	r3, [pc, #84]	@ (8001e90 <HAL_InitTick+0x6c>)
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	4b13      	ldr	r3, [pc, #76]	@ (8001e8c <HAL_InitTick+0x68>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001e44:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f002 ff98 	bl	8004d82 <HAL_SYSTICK_Config>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d10f      	bne.n	8001e78 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2b0f      	cmp	r3, #15
 8001e5c:	d809      	bhi.n	8001e72 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e5e:	2200      	movs	r2, #0
 8001e60:	6879      	ldr	r1, [r7, #4]
 8001e62:	f04f 30ff 	mov.w	r0, #4294967295
 8001e66:	f002 ff64 	bl	8004d32 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e6a:	4a0a      	ldr	r2, [pc, #40]	@ (8001e94 <HAL_InitTick+0x70>)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6013      	str	r3, [r2, #0]
 8001e70:	e007      	b.n	8001e82 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	73fb      	strb	r3, [r7, #15]
 8001e76:	e004      	b.n	8001e82 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	73fb      	strb	r3, [r7, #15]
 8001e7c:	e001      	b.n	8001e82 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e82:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3710      	adds	r7, #16
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	20000008 	.word	0x20000008
 8001e90:	20000000 	.word	0x20000000
 8001e94:	20000004 	.word	0x20000004

08001e98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e9c:	4b05      	ldr	r3, [pc, #20]	@ (8001eb4 <HAL_IncTick+0x1c>)
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	4b05      	ldr	r3, [pc, #20]	@ (8001eb8 <HAL_IncTick+0x20>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	4a03      	ldr	r2, [pc, #12]	@ (8001eb4 <HAL_IncTick+0x1c>)
 8001ea8:	6013      	str	r3, [r2, #0]
}
 8001eaa:	bf00      	nop
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr
 8001eb4:	2000040c 	.word	0x2000040c
 8001eb8:	20000008 	.word	0x20000008

08001ebc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  return uwTick;
 8001ec0:	4b03      	ldr	r3, [pc, #12]	@ (8001ed0 <HAL_GetTick+0x14>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	2000040c 	.word	0x2000040c

08001ed4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	431a      	orrs	r2, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	609a      	str	r2, [r3, #8]
}
 8001eee:	bf00      	nop
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr

08001efa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001efa:	b480      	push	{r7}
 8001efc:	b083      	sub	sp, #12
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
 8001f02:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	431a      	orrs	r2, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	609a      	str	r2, [r3, #8]
}
 8001f14:	bf00      	nop
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b087      	sub	sp, #28
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	60f8      	str	r0, [r7, #12]
 8001f44:	60b9      	str	r1, [r7, #8]
 8001f46:	607a      	str	r2, [r7, #4]
 8001f48:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	3360      	adds	r3, #96	@ 0x60
 8001f4e:	461a      	mov	r2, r3
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	4413      	add	r3, r2
 8001f56:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	4b08      	ldr	r3, [pc, #32]	@ (8001f80 <LL_ADC_SetOffset+0x44>)
 8001f5e:	4013      	ands	r3, r2
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001f66:	683a      	ldr	r2, [r7, #0]
 8001f68:	430a      	orrs	r2, r1
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001f74:	bf00      	nop
 8001f76:	371c      	adds	r7, #28
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr
 8001f80:	03fff000 	.word	0x03fff000

08001f84 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b085      	sub	sp, #20
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	3360      	adds	r3, #96	@ 0x60
 8001f92:	461a      	mov	r2, r3
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	4413      	add	r3, r2
 8001f9a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3714      	adds	r7, #20
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b087      	sub	sp, #28
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	60b9      	str	r1, [r7, #8]
 8001fba:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	3360      	adds	r3, #96	@ 0x60
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	4413      	add	r3, r2
 8001fc8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	431a      	orrs	r2, r3
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001fda:	bf00      	nop
 8001fdc:	371c      	adds	r7, #28
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr

08001fe6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	b087      	sub	sp, #28
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	60f8      	str	r0, [r7, #12]
 8001fee:	60b9      	str	r1, [r7, #8]
 8001ff0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	3360      	adds	r3, #96	@ 0x60
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	4413      	add	r3, r2
 8001ffe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	431a      	orrs	r2, r3
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002010:	bf00      	nop
 8002012:	371c      	adds	r7, #28
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800201c:	b480      	push	{r7}
 800201e:	b087      	sub	sp, #28
 8002020:	af00      	add	r7, sp, #0
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	60b9      	str	r1, [r7, #8]
 8002026:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	3360      	adds	r3, #96	@ 0x60
 800202c:	461a      	mov	r2, r3
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	4413      	add	r3, r2
 8002034:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	431a      	orrs	r2, r3
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002046:	bf00      	nop
 8002048:	371c      	adds	r7, #28
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr

08002052 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002052:	b480      	push	{r7}
 8002054:	b083      	sub	sp, #12
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
 800205a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	695b      	ldr	r3, [r3, #20]
 8002060:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	431a      	orrs	r2, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	615a      	str	r2, [r3, #20]
}
 800206c:	bf00      	nop
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002088:	2b00      	cmp	r3, #0
 800208a:	d101      	bne.n	8002090 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800208c:	2301      	movs	r3, #1
 800208e:	e000      	b.n	8002092 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002090:	2300      	movs	r3, #0
}
 8002092:	4618      	mov	r0, r3
 8002094:	370c      	adds	r7, #12
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr

0800209e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800209e:	b480      	push	{r7}
 80020a0:	b087      	sub	sp, #28
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	60f8      	str	r0, [r7, #12]
 80020a6:	60b9      	str	r1, [r7, #8]
 80020a8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	3330      	adds	r3, #48	@ 0x30
 80020ae:	461a      	mov	r2, r3
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	0a1b      	lsrs	r3, r3, #8
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	f003 030c 	and.w	r3, r3, #12
 80020ba:	4413      	add	r3, r2
 80020bc:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	f003 031f 	and.w	r3, r3, #31
 80020c8:	211f      	movs	r1, #31
 80020ca:	fa01 f303 	lsl.w	r3, r1, r3
 80020ce:	43db      	mvns	r3, r3
 80020d0:	401a      	ands	r2, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	0e9b      	lsrs	r3, r3, #26
 80020d6:	f003 011f 	and.w	r1, r3, #31
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	f003 031f 	and.w	r3, r3, #31
 80020e0:	fa01 f303 	lsl.w	r3, r1, r3
 80020e4:	431a      	orrs	r2, r3
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80020ea:	bf00      	nop
 80020ec:	371c      	adds	r7, #28
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr

080020f6 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80020f6:	b480      	push	{r7}
 80020f8:	b083      	sub	sp, #12
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002102:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002106:	2b00      	cmp	r3, #0
 8002108:	d101      	bne.n	800210e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800210a:	2301      	movs	r3, #1
 800210c:	e000      	b.n	8002110 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800210e:	2300      	movs	r3, #0
}
 8002110:	4618      	mov	r0, r3
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800211c:	b480      	push	{r7}
 800211e:	b087      	sub	sp, #28
 8002120:	af00      	add	r7, sp, #0
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	60b9      	str	r1, [r7, #8]
 8002126:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	3314      	adds	r3, #20
 800212c:	461a      	mov	r2, r3
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	0e5b      	lsrs	r3, r3, #25
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	f003 0304 	and.w	r3, r3, #4
 8002138:	4413      	add	r3, r2
 800213a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	0d1b      	lsrs	r3, r3, #20
 8002144:	f003 031f 	and.w	r3, r3, #31
 8002148:	2107      	movs	r1, #7
 800214a:	fa01 f303 	lsl.w	r3, r1, r3
 800214e:	43db      	mvns	r3, r3
 8002150:	401a      	ands	r2, r3
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	0d1b      	lsrs	r3, r3, #20
 8002156:	f003 031f 	and.w	r3, r3, #31
 800215a:	6879      	ldr	r1, [r7, #4]
 800215c:	fa01 f303 	lsl.w	r3, r1, r3
 8002160:	431a      	orrs	r2, r3
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002166:	bf00      	nop
 8002168:	371c      	adds	r7, #28
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
	...

08002174 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002174:	b480      	push	{r7}
 8002176:	b085      	sub	sp, #20
 8002178:	af00      	add	r7, sp, #0
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	60b9      	str	r1, [r7, #8]
 800217e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800218c:	43db      	mvns	r3, r3
 800218e:	401a      	ands	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f003 0318 	and.w	r3, r3, #24
 8002196:	4908      	ldr	r1, [pc, #32]	@ (80021b8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002198:	40d9      	lsrs	r1, r3
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	400b      	ands	r3, r1
 800219e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021a2:	431a      	orrs	r2, r3
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80021aa:	bf00      	nop
 80021ac:	3714      	adds	r7, #20
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	0007ffff 	.word	0x0007ffff

080021bc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	f003 031f 	and.w	r3, r3, #31
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002204:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	6093      	str	r3, [r2, #8]
}
 800220c:	bf00      	nop
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002228:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800222c:	d101      	bne.n	8002232 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800222e:	2301      	movs	r3, #1
 8002230:	e000      	b.n	8002234 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002232:	2300      	movs	r3, #0
}
 8002234:	4618      	mov	r0, r3
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002250:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002254:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002278:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800227c:	d101      	bne.n	8002282 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800227e:	2301      	movs	r3, #1
 8002280:	e000      	b.n	8002284 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002282:	2300      	movs	r3, #0
}
 8002284:	4618      	mov	r0, r3
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80022a0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80022a4:	f043 0201 	orr.w	r2, r3, #1
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80022ac:	bf00      	nop
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80022c8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80022cc:	f043 0202 	orr.w	r2, r3, #2
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80022d4:	bf00      	nop
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	f003 0301 	and.w	r3, r3, #1
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d101      	bne.n	80022f8 <LL_ADC_IsEnabled+0x18>
 80022f4:	2301      	movs	r3, #1
 80022f6:	e000      	b.n	80022fa <LL_ADC_IsEnabled+0x1a>
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr

08002306 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002306:	b480      	push	{r7}
 8002308:	b083      	sub	sp, #12
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	f003 0302 	and.w	r3, r3, #2
 8002316:	2b02      	cmp	r3, #2
 8002318:	d101      	bne.n	800231e <LL_ADC_IsDisableOngoing+0x18>
 800231a:	2301      	movs	r3, #1
 800231c:	e000      	b.n	8002320 <LL_ADC_IsDisableOngoing+0x1a>
 800231e:	2300      	movs	r3, #0
}
 8002320:	4618      	mov	r0, r3
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	f003 0304 	and.w	r3, r3, #4
 800233c:	2b04      	cmp	r3, #4
 800233e:	d101      	bne.n	8002344 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002340:	2301      	movs	r3, #1
 8002342:	e000      	b.n	8002346 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr

08002352 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002352:	b480      	push	{r7}
 8002354:	b083      	sub	sp, #12
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	f003 0308 	and.w	r3, r3, #8
 8002362:	2b08      	cmp	r3, #8
 8002364:	d101      	bne.n	800236a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002366:	2301      	movs	r3, #1
 8002368:	e000      	b.n	800236c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800236a:	2300      	movs	r3, #0
}
 800236c:	4618      	mov	r0, r3
 800236e:	370c      	adds	r7, #12
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002378:	b590      	push	{r4, r7, lr}
 800237a:	b089      	sub	sp, #36	@ 0x24
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002380:	2300      	movs	r3, #0
 8002382:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002384:	2300      	movs	r3, #0
 8002386:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d101      	bne.n	8002392 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e167      	b.n	8002662 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	695b      	ldr	r3, [r3, #20]
 8002396:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800239c:	2b00      	cmp	r3, #0
 800239e:	d109      	bne.n	80023b4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f7fe fc0f 	bl	8000bc4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7ff ff2d 	bl	8002218 <LL_ADC_IsDeepPowerDownEnabled>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d004      	beq.n	80023ce <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7ff ff13 	bl	80021f4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7ff ff48 	bl	8002268 <LL_ADC_IsInternalRegulatorEnabled>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d115      	bne.n	800240a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7ff ff2c 	bl	8002240 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80023e8:	4ba0      	ldr	r3, [pc, #640]	@ (800266c <HAL_ADC_Init+0x2f4>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	099b      	lsrs	r3, r3, #6
 80023ee:	4aa0      	ldr	r2, [pc, #640]	@ (8002670 <HAL_ADC_Init+0x2f8>)
 80023f0:	fba2 2303 	umull	r2, r3, r2, r3
 80023f4:	099b      	lsrs	r3, r3, #6
 80023f6:	3301      	adds	r3, #1
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80023fc:	e002      	b.n	8002404 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	3b01      	subs	r3, #1
 8002402:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d1f9      	bne.n	80023fe <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4618      	mov	r0, r3
 8002410:	f7ff ff2a 	bl	8002268 <LL_ADC_IsInternalRegulatorEnabled>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d10d      	bne.n	8002436 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800241e:	f043 0210 	orr.w	r2, r3, #16
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800242a:	f043 0201 	orr.w	r2, r3, #1
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4618      	mov	r0, r3
 800243c:	f7ff ff76 	bl	800232c <LL_ADC_REG_IsConversionOngoing>
 8002440:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002446:	f003 0310 	and.w	r3, r3, #16
 800244a:	2b00      	cmp	r3, #0
 800244c:	f040 8100 	bne.w	8002650 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	2b00      	cmp	r3, #0
 8002454:	f040 80fc 	bne.w	8002650 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800245c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002460:	f043 0202 	orr.w	r2, r3, #2
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4618      	mov	r0, r3
 800246e:	f7ff ff37 	bl	80022e0 <LL_ADC_IsEnabled>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d111      	bne.n	800249c <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002478:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800247c:	f7ff ff30 	bl	80022e0 <LL_ADC_IsEnabled>
 8002480:	4604      	mov	r4, r0
 8002482:	487c      	ldr	r0, [pc, #496]	@ (8002674 <HAL_ADC_Init+0x2fc>)
 8002484:	f7ff ff2c 	bl	80022e0 <LL_ADC_IsEnabled>
 8002488:	4603      	mov	r3, r0
 800248a:	4323      	orrs	r3, r4
 800248c:	2b00      	cmp	r3, #0
 800248e:	d105      	bne.n	800249c <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	4619      	mov	r1, r3
 8002496:	4878      	ldr	r0, [pc, #480]	@ (8002678 <HAL_ADC_Init+0x300>)
 8002498:	f7ff fd1c 	bl	8001ed4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	7f5b      	ldrb	r3, [r3, #29]
 80024a0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80024a6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80024ac:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80024b2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80024ba:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80024bc:	4313      	orrs	r3, r2
 80024be:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d106      	bne.n	80024d8 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ce:	3b01      	subs	r3, #1
 80024d0:	045b      	lsls	r3, r3, #17
 80024d2:	69ba      	ldr	r2, [r7, #24]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d009      	beq.n	80024f4 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024e4:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ec:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	68da      	ldr	r2, [r3, #12]
 80024fa:	4b60      	ldr	r3, [pc, #384]	@ (800267c <HAL_ADC_Init+0x304>)
 80024fc:	4013      	ands	r3, r2
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	6812      	ldr	r2, [r2, #0]
 8002502:	69b9      	ldr	r1, [r7, #24]
 8002504:	430b      	orrs	r3, r1
 8002506:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	430a      	orrs	r2, r1
 800251c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4618      	mov	r0, r3
 8002524:	f7ff ff15 	bl	8002352 <LL_ADC_INJ_IsConversionOngoing>
 8002528:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d16d      	bne.n	800260c <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d16a      	bne.n	800260c <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800253a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002542:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002544:	4313      	orrs	r3, r2
 8002546:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002552:	f023 0302 	bic.w	r3, r3, #2
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	6812      	ldr	r2, [r2, #0]
 800255a:	69b9      	ldr	r1, [r7, #24]
 800255c:	430b      	orrs	r3, r1
 800255e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	691b      	ldr	r3, [r3, #16]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d017      	beq.n	8002598 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	691a      	ldr	r2, [r3, #16]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002576:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002580:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002584:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	6911      	ldr	r1, [r2, #16]
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	6812      	ldr	r2, [r2, #0]
 8002590:	430b      	orrs	r3, r1
 8002592:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002596:	e013      	b.n	80025c0 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	691a      	ldr	r2, [r3, #16]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80025a6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	6812      	ldr	r2, [r2, #0]
 80025b4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80025b8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80025bc:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d118      	bne.n	80025fc <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	691b      	ldr	r3, [r3, #16]
 80025d0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80025d4:	f023 0304 	bic.w	r3, r3, #4
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80025e0:	4311      	orrs	r1, r2
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80025e6:	4311      	orrs	r1, r2
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80025ec:	430a      	orrs	r2, r1
 80025ee:	431a      	orrs	r2, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f042 0201 	orr.w	r2, r2, #1
 80025f8:	611a      	str	r2, [r3, #16]
 80025fa:	e007      	b.n	800260c <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	691a      	ldr	r2, [r3, #16]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f022 0201 	bic.w	r2, r2, #1
 800260a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	695b      	ldr	r3, [r3, #20]
 8002610:	2b01      	cmp	r3, #1
 8002612:	d10c      	bne.n	800262e <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800261a:	f023 010f 	bic.w	r1, r3, #15
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a1b      	ldr	r3, [r3, #32]
 8002622:	1e5a      	subs	r2, r3, #1
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	430a      	orrs	r2, r1
 800262a:	631a      	str	r2, [r3, #48]	@ 0x30
 800262c:	e007      	b.n	800263e <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f022 020f 	bic.w	r2, r2, #15
 800263c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002642:	f023 0303 	bic.w	r3, r3, #3
 8002646:	f043 0201 	orr.w	r2, r3, #1
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800264e:	e007      	b.n	8002660 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002654:	f043 0210 	orr.w	r2, r3, #16
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002660:	7ffb      	ldrb	r3, [r7, #31]
}
 8002662:	4618      	mov	r0, r3
 8002664:	3724      	adds	r7, #36	@ 0x24
 8002666:	46bd      	mov	sp, r7
 8002668:	bd90      	pop	{r4, r7, pc}
 800266a:	bf00      	nop
 800266c:	20000000 	.word	0x20000000
 8002670:	053e2d63 	.word	0x053e2d63
 8002674:	50000100 	.word	0x50000100
 8002678:	50000300 	.word	0x50000300
 800267c:	fff04007 	.word	0xfff04007

08002680 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b08a      	sub	sp, #40	@ 0x28
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002688:	2300      	movs	r3, #0
 800268a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800269c:	4883      	ldr	r0, [pc, #524]	@ (80028ac <HAL_ADC_IRQHandler+0x22c>)
 800269e:	f7ff fd8d 	bl	80021bc <LL_ADC_GetMultimode>
 80026a2:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	f003 0302 	and.w	r3, r3, #2
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d017      	beq.n	80026de <HAL_ADC_IRQHandler+0x5e>
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	f003 0302 	and.w	r3, r3, #2
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d012      	beq.n	80026de <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026bc:	f003 0310 	and.w	r3, r3, #16
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d105      	bne.n	80026d0 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026c8:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f001 fa9d 	bl	8003c10 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2202      	movs	r2, #2
 80026dc:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	f003 0304 	and.w	r3, r3, #4
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d004      	beq.n	80026f2 <HAL_ADC_IRQHandler+0x72>
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	f003 0304 	and.w	r3, r3, #4
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d10a      	bne.n	8002708 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	f000 8085 	beq.w	8002808 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	f003 0308 	and.w	r3, r3, #8
 8002704:	2b00      	cmp	r3, #0
 8002706:	d07f      	beq.n	8002808 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800270c:	f003 0310 	and.w	r3, r3, #16
 8002710:	2b00      	cmp	r3, #0
 8002712:	d105      	bne.n	8002720 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002718:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4618      	mov	r0, r3
 8002726:	f7ff fca7 	bl	8002078 <LL_ADC_REG_IsTriggerSourceSWStart>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d064      	beq.n	80027fa <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a5e      	ldr	r2, [pc, #376]	@ (80028b0 <HAL_ADC_IRQHandler+0x230>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d002      	beq.n	8002740 <HAL_ADC_IRQHandler+0xc0>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	e001      	b.n	8002744 <HAL_ADC_IRQHandler+0xc4>
 8002740:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	6812      	ldr	r2, [r2, #0]
 8002748:	4293      	cmp	r3, r2
 800274a:	d008      	beq.n	800275e <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d005      	beq.n	800275e <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	2b05      	cmp	r3, #5
 8002756:	d002      	beq.n	800275e <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	2b09      	cmp	r3, #9
 800275c:	d104      	bne.n	8002768 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	623b      	str	r3, [r7, #32]
 8002766:	e00d      	b.n	8002784 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a50      	ldr	r2, [pc, #320]	@ (80028b0 <HAL_ADC_IRQHandler+0x230>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d002      	beq.n	8002778 <HAL_ADC_IRQHandler+0xf8>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	e001      	b.n	800277c <HAL_ADC_IRQHandler+0xfc>
 8002778:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800277c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002784:	6a3b      	ldr	r3, [r7, #32]
 8002786:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d135      	bne.n	80027fa <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0308 	and.w	r3, r3, #8
 8002798:	2b08      	cmp	r3, #8
 800279a:	d12e      	bne.n	80027fa <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7ff fdc3 	bl	800232c <LL_ADC_REG_IsConversionOngoing>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d11a      	bne.n	80027e2 <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	685a      	ldr	r2, [r3, #4]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f022 020c 	bic.w	r2, r2, #12
 80027ba:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d112      	bne.n	80027fa <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027d8:	f043 0201 	orr.w	r2, r3, #1
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	65da      	str	r2, [r3, #92]	@ 0x5c
 80027e0:	e00b      	b.n	80027fa <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027e6:	f043 0210 	orr.w	r2, r3, #16
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027f2:	f043 0201 	orr.w	r2, r3, #1
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f000 f95a 	bl	8002ab4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	220c      	movs	r2, #12
 8002806:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	f003 0320 	and.w	r3, r3, #32
 800280e:	2b00      	cmp	r3, #0
 8002810:	d004      	beq.n	800281c <HAL_ADC_IRQHandler+0x19c>
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	f003 0320 	and.w	r3, r3, #32
 8002818:	2b00      	cmp	r3, #0
 800281a:	d10b      	bne.n	8002834 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002822:	2b00      	cmp	r3, #0
 8002824:	f000 809e 	beq.w	8002964 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800282e:	2b00      	cmp	r3, #0
 8002830:	f000 8098 	beq.w	8002964 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002838:	f003 0310 	and.w	r3, r3, #16
 800283c:	2b00      	cmp	r3, #0
 800283e:	d105      	bne.n	800284c <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002844:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4618      	mov	r0, r3
 8002852:	f7ff fc50 	bl	80020f6 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002856:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4618      	mov	r0, r3
 800285e:	f7ff fc0b 	bl	8002078 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002862:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a11      	ldr	r2, [pc, #68]	@ (80028b0 <HAL_ADC_IRQHandler+0x230>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d002      	beq.n	8002874 <HAL_ADC_IRQHandler+0x1f4>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	e001      	b.n	8002878 <HAL_ADC_IRQHandler+0x1f8>
 8002874:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	6812      	ldr	r2, [r2, #0]
 800287c:	4293      	cmp	r3, r2
 800287e:	d008      	beq.n	8002892 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d005      	beq.n	8002892 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	2b06      	cmp	r3, #6
 800288a:	d002      	beq.n	8002892 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	2b07      	cmp	r3, #7
 8002890:	d104      	bne.n	800289c <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	623b      	str	r3, [r7, #32]
 800289a:	e011      	b.n	80028c0 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a03      	ldr	r2, [pc, #12]	@ (80028b0 <HAL_ADC_IRQHandler+0x230>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d006      	beq.n	80028b4 <HAL_ADC_IRQHandler+0x234>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	e005      	b.n	80028b8 <HAL_ADC_IRQHandler+0x238>
 80028ac:	50000300 	.word	0x50000300
 80028b0:	50000100 	.word	0x50000100
 80028b4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80028b8:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d047      	beq.n	8002956 <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80028c6:	6a3b      	ldr	r3, [r7, #32]
 80028c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d007      	beq.n	80028e0 <HAL_ADC_IRQHandler+0x260>
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d03f      	beq.n	8002956 <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80028d6:	6a3b      	ldr	r3, [r7, #32]
 80028d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d13a      	bne.n	8002956 <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028ea:	2b40      	cmp	r3, #64	@ 0x40
 80028ec:	d133      	bne.n	8002956 <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80028ee:	6a3b      	ldr	r3, [r7, #32]
 80028f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d12e      	bne.n	8002956 <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4618      	mov	r0, r3
 80028fe:	f7ff fd28 	bl	8002352 <LL_ADC_INJ_IsConversionOngoing>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d11a      	bne.n	800293e <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	685a      	ldr	r2, [r3, #4]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002916:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800291c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002928:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800292c:	2b00      	cmp	r3, #0
 800292e:	d112      	bne.n	8002956 <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002934:	f043 0201 	orr.w	r2, r3, #1
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800293c:	e00b      	b.n	8002956 <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002942:	f043 0210 	orr.w	r2, r3, #16
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800294e:	f043 0201 	orr.w	r2, r3, #1
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f008 faa6 	bl	800aea8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2260      	movs	r2, #96	@ 0x60
 8002962:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800296a:	2b00      	cmp	r3, #0
 800296c:	d011      	beq.n	8002992 <HAL_ADC_IRQHandler+0x312>
 800296e:	69bb      	ldr	r3, [r7, #24]
 8002970:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002974:	2b00      	cmp	r3, #0
 8002976:	d00c      	beq.n	8002992 <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800297c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f000 f89f 	bl	8002ac8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2280      	movs	r2, #128	@ 0x80
 8002990:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002998:	2b00      	cmp	r3, #0
 800299a:	d012      	beq.n	80029c2 <HAL_ADC_IRQHandler+0x342>
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d00d      	beq.n	80029c2 <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029aa:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f001 f918 	bl	8003be8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80029c0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d012      	beq.n	80029f2 <HAL_ADC_IRQHandler+0x372>
 80029cc:	69bb      	ldr	r3, [r7, #24]
 80029ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d00d      	beq.n	80029f2 <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029da:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f001 f90a 	bl	8003bfc <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80029f0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	f003 0310 	and.w	r3, r3, #16
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d036      	beq.n	8002a6a <HAL_ADC_IRQHandler+0x3ea>
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	f003 0310 	and.w	r3, r3, #16
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d031      	beq.n	8002a6a <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d102      	bne.n	8002a14 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a12:	e014      	b.n	8002a3e <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d008      	beq.n	8002a2c <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002a1a:	4825      	ldr	r0, [pc, #148]	@ (8002ab0 <HAL_ADC_IRQHandler+0x430>)
 8002a1c:	f7ff fbdc 	bl	80021d8 <LL_ADC_GetMultiDMATransfer>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d00b      	beq.n	8002a3e <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8002a26:	2301      	movs	r3, #1
 8002a28:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a2a:	e008      	b.n	8002a3e <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d001      	beq.n	8002a3e <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d10e      	bne.n	8002a62 <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a48:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a54:	f043 0202 	orr.w	r2, r3, #2
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f000 f83d 	bl	8002adc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	2210      	movs	r2, #16
 8002a68:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d018      	beq.n	8002aa6 <HAL_ADC_IRQHandler+0x426>
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d013      	beq.n	8002aa6 <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a82:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a8e:	f043 0208 	orr.w	r2, r3, #8
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a9e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f001 f897 	bl	8003bd4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002aa6:	bf00      	nop
 8002aa8:	3728      	adds	r7, #40	@ 0x28
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	50000300 	.word	0x50000300

08002ab4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002abc:	bf00      	nop
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr

08002ac8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002ad0:	bf00      	nop
 8002ad2:	370c      	adds	r7, #12
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr

08002adc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002ae4:	bf00      	nop
 8002ae6:	370c      	adds	r7, #12
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b0b6      	sub	sp, #216	@ 0xd8
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002afa:	2300      	movs	r3, #0
 8002afc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002b00:	2300      	movs	r3, #0
 8002b02:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d101      	bne.n	8002b12 <HAL_ADC_ConfigChannel+0x22>
 8002b0e:	2302      	movs	r3, #2
 8002b10:	e3c8      	b.n	80032a4 <HAL_ADC_ConfigChannel+0x7b4>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2201      	movs	r2, #1
 8002b16:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7ff fc04 	bl	800232c <LL_ADC_REG_IsConversionOngoing>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	f040 83ad 	bne.w	8003286 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6818      	ldr	r0, [r3, #0]
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	6859      	ldr	r1, [r3, #4]
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	461a      	mov	r2, r3
 8002b3a:	f7ff fab0 	bl	800209e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7ff fbf2 	bl	800232c <LL_ADC_REG_IsConversionOngoing>
 8002b48:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7ff fbfe 	bl	8002352 <LL_ADC_INJ_IsConversionOngoing>
 8002b56:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b5a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	f040 81d9 	bne.w	8002f16 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b64:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	f040 81d4 	bne.w	8002f16 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002b76:	d10f      	bne.n	8002b98 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6818      	ldr	r0, [r3, #0]
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2200      	movs	r2, #0
 8002b82:	4619      	mov	r1, r3
 8002b84:	f7ff faca 	bl	800211c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002b90:	4618      	mov	r0, r3
 8002b92:	f7ff fa5e 	bl	8002052 <LL_ADC_SetSamplingTimeCommonConfig>
 8002b96:	e00e      	b.n	8002bb6 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6818      	ldr	r0, [r3, #0]
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	6819      	ldr	r1, [r3, #0]
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	f7ff fab9 	bl	800211c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	2100      	movs	r1, #0
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7ff fa4e 	bl	8002052 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	695a      	ldr	r2, [r3, #20]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	08db      	lsrs	r3, r3, #3
 8002bc2:	f003 0303 	and.w	r3, r3, #3
 8002bc6:	005b      	lsls	r3, r3, #1
 8002bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bcc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	691b      	ldr	r3, [r3, #16]
 8002bd4:	2b04      	cmp	r3, #4
 8002bd6:	d022      	beq.n	8002c1e <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6818      	ldr	r0, [r3, #0]
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	6919      	ldr	r1, [r3, #16]
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002be8:	f7ff f9a8 	bl	8001f3c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6818      	ldr	r0, [r3, #0]
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	6919      	ldr	r1, [r3, #16]
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	699b      	ldr	r3, [r3, #24]
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	f7ff f9f4 	bl	8001fe6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6818      	ldr	r0, [r3, #0]
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d102      	bne.n	8002c14 <HAL_ADC_ConfigChannel+0x124>
 8002c0e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c12:	e000      	b.n	8002c16 <HAL_ADC_ConfigChannel+0x126>
 8002c14:	2300      	movs	r3, #0
 8002c16:	461a      	mov	r2, r3
 8002c18:	f7ff fa00 	bl	800201c <LL_ADC_SetOffsetSaturation>
 8002c1c:	e17b      	b.n	8002f16 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2100      	movs	r1, #0
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7ff f9ad 	bl	8001f84 <LL_ADC_GetOffsetChannel>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d10a      	bne.n	8002c4a <HAL_ADC_ConfigChannel+0x15a>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2100      	movs	r1, #0
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f7ff f9a2 	bl	8001f84 <LL_ADC_GetOffsetChannel>
 8002c40:	4603      	mov	r3, r0
 8002c42:	0e9b      	lsrs	r3, r3, #26
 8002c44:	f003 021f 	and.w	r2, r3, #31
 8002c48:	e01e      	b.n	8002c88 <HAL_ADC_ConfigChannel+0x198>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	2100      	movs	r1, #0
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7ff f997 	bl	8001f84 <LL_ADC_GetOffsetChannel>
 8002c56:	4603      	mov	r3, r0
 8002c58:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c5c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002c60:	fa93 f3a3 	rbit	r3, r3
 8002c64:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002c68:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002c6c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002c70:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d101      	bne.n	8002c7c <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8002c78:	2320      	movs	r3, #32
 8002c7a:	e004      	b.n	8002c86 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8002c7c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002c80:	fab3 f383 	clz	r3, r3
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d105      	bne.n	8002ca0 <HAL_ADC_ConfigChannel+0x1b0>
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	0e9b      	lsrs	r3, r3, #26
 8002c9a:	f003 031f 	and.w	r3, r3, #31
 8002c9e:	e018      	b.n	8002cd2 <HAL_ADC_ConfigChannel+0x1e2>
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002cac:	fa93 f3a3 	rbit	r3, r3
 8002cb0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002cb4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002cb8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002cbc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d101      	bne.n	8002cc8 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002cc4:	2320      	movs	r3, #32
 8002cc6:	e004      	b.n	8002cd2 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8002cc8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002ccc:	fab3 f383 	clz	r3, r3
 8002cd0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d106      	bne.n	8002ce4 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	2100      	movs	r1, #0
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7ff f966 	bl	8001fb0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2101      	movs	r1, #1
 8002cea:	4618      	mov	r0, r3
 8002cec:	f7ff f94a 	bl	8001f84 <LL_ADC_GetOffsetChannel>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d10a      	bne.n	8002d10 <HAL_ADC_ConfigChannel+0x220>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	2101      	movs	r1, #1
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7ff f93f 	bl	8001f84 <LL_ADC_GetOffsetChannel>
 8002d06:	4603      	mov	r3, r0
 8002d08:	0e9b      	lsrs	r3, r3, #26
 8002d0a:	f003 021f 	and.w	r2, r3, #31
 8002d0e:	e01e      	b.n	8002d4e <HAL_ADC_ConfigChannel+0x25e>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2101      	movs	r1, #1
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7ff f934 	bl	8001f84 <LL_ADC_GetOffsetChannel>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d22:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002d26:	fa93 f3a3 	rbit	r3, r3
 8002d2a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002d2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002d32:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002d36:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d101      	bne.n	8002d42 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8002d3e:	2320      	movs	r3, #32
 8002d40:	e004      	b.n	8002d4c <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8002d42:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002d46:	fab3 f383 	clz	r3, r3
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d105      	bne.n	8002d66 <HAL_ADC_ConfigChannel+0x276>
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	0e9b      	lsrs	r3, r3, #26
 8002d60:	f003 031f 	and.w	r3, r3, #31
 8002d64:	e018      	b.n	8002d98 <HAL_ADC_ConfigChannel+0x2a8>
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d6e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002d72:	fa93 f3a3 	rbit	r3, r3
 8002d76:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002d7a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002d7e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002d82:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d101      	bne.n	8002d8e <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8002d8a:	2320      	movs	r3, #32
 8002d8c:	e004      	b.n	8002d98 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8002d8e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002d92:	fab3 f383 	clz	r3, r3
 8002d96:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d106      	bne.n	8002daa <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2200      	movs	r2, #0
 8002da2:	2101      	movs	r1, #1
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7ff f903 	bl	8001fb0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2102      	movs	r1, #2
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7ff f8e7 	bl	8001f84 <LL_ADC_GetOffsetChannel>
 8002db6:	4603      	mov	r3, r0
 8002db8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d10a      	bne.n	8002dd6 <HAL_ADC_ConfigChannel+0x2e6>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2102      	movs	r1, #2
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7ff f8dc 	bl	8001f84 <LL_ADC_GetOffsetChannel>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	0e9b      	lsrs	r3, r3, #26
 8002dd0:	f003 021f 	and.w	r2, r3, #31
 8002dd4:	e01e      	b.n	8002e14 <HAL_ADC_ConfigChannel+0x324>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2102      	movs	r1, #2
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7ff f8d1 	bl	8001f84 <LL_ADC_GetOffsetChannel>
 8002de2:	4603      	mov	r3, r0
 8002de4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002dec:	fa93 f3a3 	rbit	r3, r3
 8002df0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002df4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002df8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002dfc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d101      	bne.n	8002e08 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8002e04:	2320      	movs	r3, #32
 8002e06:	e004      	b.n	8002e12 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8002e08:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002e0c:	fab3 f383 	clz	r3, r3
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d105      	bne.n	8002e2c <HAL_ADC_ConfigChannel+0x33c>
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	0e9b      	lsrs	r3, r3, #26
 8002e26:	f003 031f 	and.w	r3, r3, #31
 8002e2a:	e016      	b.n	8002e5a <HAL_ADC_ConfigChannel+0x36a>
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e34:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002e38:	fa93 f3a3 	rbit	r3, r3
 8002e3c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002e3e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002e40:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002e44:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d101      	bne.n	8002e50 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8002e4c:	2320      	movs	r3, #32
 8002e4e:	e004      	b.n	8002e5a <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8002e50:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002e54:	fab3 f383 	clz	r3, r3
 8002e58:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d106      	bne.n	8002e6c <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	2200      	movs	r2, #0
 8002e64:	2102      	movs	r1, #2
 8002e66:	4618      	mov	r0, r3
 8002e68:	f7ff f8a2 	bl	8001fb0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2103      	movs	r1, #3
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7ff f886 	bl	8001f84 <LL_ADC_GetOffsetChannel>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d10a      	bne.n	8002e98 <HAL_ADC_ConfigChannel+0x3a8>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2103      	movs	r1, #3
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f7ff f87b 	bl	8001f84 <LL_ADC_GetOffsetChannel>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	0e9b      	lsrs	r3, r3, #26
 8002e92:	f003 021f 	and.w	r2, r3, #31
 8002e96:	e017      	b.n	8002ec8 <HAL_ADC_ConfigChannel+0x3d8>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2103      	movs	r1, #3
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f7ff f870 	bl	8001f84 <LL_ADC_GetOffsetChannel>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002eaa:	fa93 f3a3 	rbit	r3, r3
 8002eae:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002eb0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002eb2:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002eb4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d101      	bne.n	8002ebe <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8002eba:	2320      	movs	r3, #32
 8002ebc:	e003      	b.n	8002ec6 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8002ebe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002ec0:	fab3 f383 	clz	r3, r3
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d105      	bne.n	8002ee0 <HAL_ADC_ConfigChannel+0x3f0>
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	0e9b      	lsrs	r3, r3, #26
 8002eda:	f003 031f 	and.w	r3, r3, #31
 8002ede:	e011      	b.n	8002f04 <HAL_ADC_ConfigChannel+0x414>
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002ee8:	fa93 f3a3 	rbit	r3, r3
 8002eec:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002eee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002ef0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002ef2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d101      	bne.n	8002efc <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002ef8:	2320      	movs	r3, #32
 8002efa:	e003      	b.n	8002f04 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002efc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002efe:	fab3 f383 	clz	r3, r3
 8002f02:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d106      	bne.n	8002f16 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	2103      	movs	r1, #3
 8002f10:	4618      	mov	r0, r3
 8002f12:	f7ff f84d 	bl	8001fb0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f7ff f9e0 	bl	80022e0 <LL_ADC_IsEnabled>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	f040 8140 	bne.w	80031a8 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6818      	ldr	r0, [r3, #0]
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	6819      	ldr	r1, [r3, #0]
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	461a      	mov	r2, r3
 8002f36:	f7ff f91d 	bl	8002174 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	4a8f      	ldr	r2, [pc, #572]	@ (800317c <HAL_ADC_ConfigChannel+0x68c>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	f040 8131 	bne.w	80031a8 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d10b      	bne.n	8002f6e <HAL_ADC_ConfigChannel+0x47e>
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	0e9b      	lsrs	r3, r3, #26
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	f003 031f 	and.w	r3, r3, #31
 8002f62:	2b09      	cmp	r3, #9
 8002f64:	bf94      	ite	ls
 8002f66:	2301      	movls	r3, #1
 8002f68:	2300      	movhi	r3, #0
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	e019      	b.n	8002fa2 <HAL_ADC_ConfigChannel+0x4b2>
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f74:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f76:	fa93 f3a3 	rbit	r3, r3
 8002f7a:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002f7c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f7e:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002f80:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d101      	bne.n	8002f8a <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8002f86:	2320      	movs	r3, #32
 8002f88:	e003      	b.n	8002f92 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8002f8a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002f8c:	fab3 f383 	clz	r3, r3
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	3301      	adds	r3, #1
 8002f94:	f003 031f 	and.w	r3, r3, #31
 8002f98:	2b09      	cmp	r3, #9
 8002f9a:	bf94      	ite	ls
 8002f9c:	2301      	movls	r3, #1
 8002f9e:	2300      	movhi	r3, #0
 8002fa0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d079      	beq.n	800309a <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d107      	bne.n	8002fc2 <HAL_ADC_ConfigChannel+0x4d2>
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	0e9b      	lsrs	r3, r3, #26
 8002fb8:	3301      	adds	r3, #1
 8002fba:	069b      	lsls	r3, r3, #26
 8002fbc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002fc0:	e015      	b.n	8002fee <HAL_ADC_ConfigChannel+0x4fe>
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002fca:	fa93 f3a3 	rbit	r3, r3
 8002fce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002fd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002fd2:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002fd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d101      	bne.n	8002fde <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8002fda:	2320      	movs	r3, #32
 8002fdc:	e003      	b.n	8002fe6 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8002fde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fe0:	fab3 f383 	clz	r3, r3
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	069b      	lsls	r3, r3, #26
 8002fea:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d109      	bne.n	800300e <HAL_ADC_ConfigChannel+0x51e>
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	0e9b      	lsrs	r3, r3, #26
 8003000:	3301      	adds	r3, #1
 8003002:	f003 031f 	and.w	r3, r3, #31
 8003006:	2101      	movs	r1, #1
 8003008:	fa01 f303 	lsl.w	r3, r1, r3
 800300c:	e017      	b.n	800303e <HAL_ADC_ConfigChannel+0x54e>
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003014:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003016:	fa93 f3a3 	rbit	r3, r3
 800301a:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800301c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800301e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003020:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003022:	2b00      	cmp	r3, #0
 8003024:	d101      	bne.n	800302a <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8003026:	2320      	movs	r3, #32
 8003028:	e003      	b.n	8003032 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 800302a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800302c:	fab3 f383 	clz	r3, r3
 8003030:	b2db      	uxtb	r3, r3
 8003032:	3301      	adds	r3, #1
 8003034:	f003 031f 	and.w	r3, r3, #31
 8003038:	2101      	movs	r1, #1
 800303a:	fa01 f303 	lsl.w	r3, r1, r3
 800303e:	ea42 0103 	orr.w	r1, r2, r3
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800304a:	2b00      	cmp	r3, #0
 800304c:	d10a      	bne.n	8003064 <HAL_ADC_ConfigChannel+0x574>
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	0e9b      	lsrs	r3, r3, #26
 8003054:	3301      	adds	r3, #1
 8003056:	f003 021f 	and.w	r2, r3, #31
 800305a:	4613      	mov	r3, r2
 800305c:	005b      	lsls	r3, r3, #1
 800305e:	4413      	add	r3, r2
 8003060:	051b      	lsls	r3, r3, #20
 8003062:	e018      	b.n	8003096 <HAL_ADC_ConfigChannel+0x5a6>
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800306a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800306c:	fa93 f3a3 	rbit	r3, r3
 8003070:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003072:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003074:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003076:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003078:	2b00      	cmp	r3, #0
 800307a:	d101      	bne.n	8003080 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 800307c:	2320      	movs	r3, #32
 800307e:	e003      	b.n	8003088 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8003080:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003082:	fab3 f383 	clz	r3, r3
 8003086:	b2db      	uxtb	r3, r3
 8003088:	3301      	adds	r3, #1
 800308a:	f003 021f 	and.w	r2, r3, #31
 800308e:	4613      	mov	r3, r2
 8003090:	005b      	lsls	r3, r3, #1
 8003092:	4413      	add	r3, r2
 8003094:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003096:	430b      	orrs	r3, r1
 8003098:	e081      	b.n	800319e <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d107      	bne.n	80030b6 <HAL_ADC_ConfigChannel+0x5c6>
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	0e9b      	lsrs	r3, r3, #26
 80030ac:	3301      	adds	r3, #1
 80030ae:	069b      	lsls	r3, r3, #26
 80030b0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80030b4:	e015      	b.n	80030e2 <HAL_ADC_ConfigChannel+0x5f2>
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030be:	fa93 f3a3 	rbit	r3, r3
 80030c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80030c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030c6:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80030c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d101      	bne.n	80030d2 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80030ce:	2320      	movs	r3, #32
 80030d0:	e003      	b.n	80030da <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80030d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030d4:	fab3 f383 	clz	r3, r3
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	3301      	adds	r3, #1
 80030dc:	069b      	lsls	r3, r3, #26
 80030de:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d109      	bne.n	8003102 <HAL_ADC_ConfigChannel+0x612>
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	0e9b      	lsrs	r3, r3, #26
 80030f4:	3301      	adds	r3, #1
 80030f6:	f003 031f 	and.w	r3, r3, #31
 80030fa:	2101      	movs	r1, #1
 80030fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003100:	e017      	b.n	8003132 <HAL_ADC_ConfigChannel+0x642>
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003108:	6a3b      	ldr	r3, [r7, #32]
 800310a:	fa93 f3a3 	rbit	r3, r3
 800310e:	61fb      	str	r3, [r7, #28]
  return result;
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003116:	2b00      	cmp	r3, #0
 8003118:	d101      	bne.n	800311e <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 800311a:	2320      	movs	r3, #32
 800311c:	e003      	b.n	8003126 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 800311e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003120:	fab3 f383 	clz	r3, r3
 8003124:	b2db      	uxtb	r3, r3
 8003126:	3301      	adds	r3, #1
 8003128:	f003 031f 	and.w	r3, r3, #31
 800312c:	2101      	movs	r1, #1
 800312e:	fa01 f303 	lsl.w	r3, r1, r3
 8003132:	ea42 0103 	orr.w	r1, r2, r3
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800313e:	2b00      	cmp	r3, #0
 8003140:	d10d      	bne.n	800315e <HAL_ADC_ConfigChannel+0x66e>
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	0e9b      	lsrs	r3, r3, #26
 8003148:	3301      	adds	r3, #1
 800314a:	f003 021f 	and.w	r2, r3, #31
 800314e:	4613      	mov	r3, r2
 8003150:	005b      	lsls	r3, r3, #1
 8003152:	4413      	add	r3, r2
 8003154:	3b1e      	subs	r3, #30
 8003156:	051b      	lsls	r3, r3, #20
 8003158:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800315c:	e01e      	b.n	800319c <HAL_ADC_ConfigChannel+0x6ac>
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	fa93 f3a3 	rbit	r3, r3
 800316a:	613b      	str	r3, [r7, #16]
  return result;
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d104      	bne.n	8003180 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8003176:	2320      	movs	r3, #32
 8003178:	e006      	b.n	8003188 <HAL_ADC_ConfigChannel+0x698>
 800317a:	bf00      	nop
 800317c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	fab3 f383 	clz	r3, r3
 8003186:	b2db      	uxtb	r3, r3
 8003188:	3301      	adds	r3, #1
 800318a:	f003 021f 	and.w	r2, r3, #31
 800318e:	4613      	mov	r3, r2
 8003190:	005b      	lsls	r3, r3, #1
 8003192:	4413      	add	r3, r2
 8003194:	3b1e      	subs	r3, #30
 8003196:	051b      	lsls	r3, r3, #20
 8003198:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800319c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800319e:	683a      	ldr	r2, [r7, #0]
 80031a0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031a2:	4619      	mov	r1, r3
 80031a4:	f7fe ffba 	bl	800211c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	4b3f      	ldr	r3, [pc, #252]	@ (80032ac <HAL_ADC_ConfigChannel+0x7bc>)
 80031ae:	4013      	ands	r3, r2
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d071      	beq.n	8003298 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80031b4:	483e      	ldr	r0, [pc, #248]	@ (80032b0 <HAL_ADC_ConfigChannel+0x7c0>)
 80031b6:	f7fe feb3 	bl	8001f20 <LL_ADC_GetCommonPathInternalCh>
 80031ba:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a3c      	ldr	r2, [pc, #240]	@ (80032b4 <HAL_ADC_ConfigChannel+0x7c4>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d004      	beq.n	80031d2 <HAL_ADC_ConfigChannel+0x6e2>
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a3a      	ldr	r2, [pc, #232]	@ (80032b8 <HAL_ADC_ConfigChannel+0x7c8>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d127      	bne.n	8003222 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80031d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80031d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d121      	bne.n	8003222 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80031e6:	d157      	bne.n	8003298 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80031ec:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80031f0:	4619      	mov	r1, r3
 80031f2:	482f      	ldr	r0, [pc, #188]	@ (80032b0 <HAL_ADC_ConfigChannel+0x7c0>)
 80031f4:	f7fe fe81 	bl	8001efa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80031f8:	4b30      	ldr	r3, [pc, #192]	@ (80032bc <HAL_ADC_ConfigChannel+0x7cc>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	099b      	lsrs	r3, r3, #6
 80031fe:	4a30      	ldr	r2, [pc, #192]	@ (80032c0 <HAL_ADC_ConfigChannel+0x7d0>)
 8003200:	fba2 2303 	umull	r2, r3, r2, r3
 8003204:	099b      	lsrs	r3, r3, #6
 8003206:	1c5a      	adds	r2, r3, #1
 8003208:	4613      	mov	r3, r2
 800320a:	005b      	lsls	r3, r3, #1
 800320c:	4413      	add	r3, r2
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003212:	e002      	b.n	800321a <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	3b01      	subs	r3, #1
 8003218:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d1f9      	bne.n	8003214 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003220:	e03a      	b.n	8003298 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a27      	ldr	r2, [pc, #156]	@ (80032c4 <HAL_ADC_ConfigChannel+0x7d4>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d113      	bne.n	8003254 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800322c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003230:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003234:	2b00      	cmp	r3, #0
 8003236:	d10d      	bne.n	8003254 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a22      	ldr	r2, [pc, #136]	@ (80032c8 <HAL_ADC_ConfigChannel+0x7d8>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d02a      	beq.n	8003298 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003242:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003246:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800324a:	4619      	mov	r1, r3
 800324c:	4818      	ldr	r0, [pc, #96]	@ (80032b0 <HAL_ADC_ConfigChannel+0x7c0>)
 800324e:	f7fe fe54 	bl	8001efa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003252:	e021      	b.n	8003298 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a1c      	ldr	r2, [pc, #112]	@ (80032cc <HAL_ADC_ConfigChannel+0x7dc>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d11c      	bne.n	8003298 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800325e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003262:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d116      	bne.n	8003298 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a16      	ldr	r2, [pc, #88]	@ (80032c8 <HAL_ADC_ConfigChannel+0x7d8>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d011      	beq.n	8003298 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003274:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003278:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800327c:	4619      	mov	r1, r3
 800327e:	480c      	ldr	r0, [pc, #48]	@ (80032b0 <HAL_ADC_ConfigChannel+0x7c0>)
 8003280:	f7fe fe3b 	bl	8001efa <LL_ADC_SetCommonPathInternalCh>
 8003284:	e008      	b.n	8003298 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800328a:	f043 0220 	orr.w	r2, r3, #32
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80032a0:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	37d8      	adds	r7, #216	@ 0xd8
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	80080000 	.word	0x80080000
 80032b0:	50000300 	.word	0x50000300
 80032b4:	c3210000 	.word	0xc3210000
 80032b8:	90c00010 	.word	0x90c00010
 80032bc:	20000000 	.word	0x20000000
 80032c0:	053e2d63 	.word	0x053e2d63
 80032c4:	c7520000 	.word	0xc7520000
 80032c8:	50000100 	.word	0x50000100
 80032cc:	cb840000 	.word	0xcb840000

080032d0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80032d8:	2300      	movs	r3, #0
 80032da:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4618      	mov	r0, r3
 80032e2:	f7fe fffd 	bl	80022e0 <LL_ADC_IsEnabled>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d169      	bne.n	80033c0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	689a      	ldr	r2, [r3, #8]
 80032f2:	4b36      	ldr	r3, [pc, #216]	@ (80033cc <ADC_Enable+0xfc>)
 80032f4:	4013      	ands	r3, r2
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00d      	beq.n	8003316 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032fe:	f043 0210 	orr.w	r2, r3, #16
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800330a:	f043 0201 	orr.w	r2, r3, #1
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e055      	b.n	80033c2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4618      	mov	r0, r3
 800331c:	f7fe ffb8 	bl	8002290 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003320:	482b      	ldr	r0, [pc, #172]	@ (80033d0 <ADC_Enable+0x100>)
 8003322:	f7fe fdfd 	bl	8001f20 <LL_ADC_GetCommonPathInternalCh>
 8003326:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003328:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800332c:	2b00      	cmp	r3, #0
 800332e:	d013      	beq.n	8003358 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003330:	4b28      	ldr	r3, [pc, #160]	@ (80033d4 <ADC_Enable+0x104>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	099b      	lsrs	r3, r3, #6
 8003336:	4a28      	ldr	r2, [pc, #160]	@ (80033d8 <ADC_Enable+0x108>)
 8003338:	fba2 2303 	umull	r2, r3, r2, r3
 800333c:	099b      	lsrs	r3, r3, #6
 800333e:	1c5a      	adds	r2, r3, #1
 8003340:	4613      	mov	r3, r2
 8003342:	005b      	lsls	r3, r3, #1
 8003344:	4413      	add	r3, r2
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800334a:	e002      	b.n	8003352 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	3b01      	subs	r3, #1
 8003350:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d1f9      	bne.n	800334c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003358:	f7fe fdb0 	bl	8001ebc <HAL_GetTick>
 800335c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800335e:	e028      	b.n	80033b2 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4618      	mov	r0, r3
 8003366:	f7fe ffbb 	bl	80022e0 <LL_ADC_IsEnabled>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d104      	bne.n	800337a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4618      	mov	r0, r3
 8003376:	f7fe ff8b 	bl	8002290 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800337a:	f7fe fd9f 	bl	8001ebc <HAL_GetTick>
 800337e:	4602      	mov	r2, r0
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	2b02      	cmp	r3, #2
 8003386:	d914      	bls.n	80033b2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0301 	and.w	r3, r3, #1
 8003392:	2b01      	cmp	r3, #1
 8003394:	d00d      	beq.n	80033b2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800339a:	f043 0210 	orr.w	r2, r3, #16
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033a6:	f043 0201 	orr.w	r2, r3, #1
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e007      	b.n	80033c2 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 0301 	and.w	r3, r3, #1
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d1cf      	bne.n	8003360 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80033c0:	2300      	movs	r3, #0
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3710      	adds	r7, #16
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	8000003f 	.word	0x8000003f
 80033d0:	50000300 	.word	0x50000300
 80033d4:	20000000 	.word	0x20000000
 80033d8:	053e2d63 	.word	0x053e2d63

080033dc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4618      	mov	r0, r3
 80033ea:	f7fe ff8c 	bl	8002306 <LL_ADC_IsDisableOngoing>
 80033ee:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4618      	mov	r0, r3
 80033f6:	f7fe ff73 	bl	80022e0 <LL_ADC_IsEnabled>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d047      	beq.n	8003490 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d144      	bne.n	8003490 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	f003 030d 	and.w	r3, r3, #13
 8003410:	2b01      	cmp	r3, #1
 8003412:	d10c      	bne.n	800342e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4618      	mov	r0, r3
 800341a:	f7fe ff4d 	bl	80022b8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2203      	movs	r2, #3
 8003424:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003426:	f7fe fd49 	bl	8001ebc <HAL_GetTick>
 800342a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800342c:	e029      	b.n	8003482 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003432:	f043 0210 	orr.w	r2, r3, #16
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800343e:	f043 0201 	orr.w	r2, r3, #1
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e023      	b.n	8003492 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800344a:	f7fe fd37 	bl	8001ebc <HAL_GetTick>
 800344e:	4602      	mov	r2, r0
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	2b02      	cmp	r3, #2
 8003456:	d914      	bls.n	8003482 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	f003 0301 	and.w	r3, r3, #1
 8003462:	2b00      	cmp	r3, #0
 8003464:	d00d      	beq.n	8003482 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800346a:	f043 0210 	orr.w	r2, r3, #16
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003476:	f043 0201 	orr.w	r2, r3, #1
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e007      	b.n	8003492 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	f003 0301 	and.w	r3, r3, #1
 800348c:	2b00      	cmp	r3, #0
 800348e:	d1dc      	bne.n	800344a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	3710      	adds	r7, #16
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}

0800349a <LL_ADC_SetCommonPathInternalCh>:
{
 800349a:	b480      	push	{r7}
 800349c:	b083      	sub	sp, #12
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
 80034a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	431a      	orrs	r2, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	609a      	str	r2, [r3, #8]
}
 80034b4:	bf00      	nop
 80034b6:	370c      	adds	r7, #12
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr

080034c0 <LL_ADC_GetCommonPathInternalCh>:
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <LL_ADC_SetOffset>:
{
 80034dc:	b480      	push	{r7}
 80034de:	b087      	sub	sp, #28
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	607a      	str	r2, [r7, #4]
 80034e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	3360      	adds	r3, #96	@ 0x60
 80034ee:	461a      	mov	r2, r3
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	4413      	add	r3, r2
 80034f6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	4b08      	ldr	r3, [pc, #32]	@ (8003520 <LL_ADC_SetOffset+0x44>)
 80034fe:	4013      	ands	r3, r2
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8003506:	683a      	ldr	r2, [r7, #0]
 8003508:	430a      	orrs	r2, r1
 800350a:	4313      	orrs	r3, r2
 800350c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	601a      	str	r2, [r3, #0]
}
 8003514:	bf00      	nop
 8003516:	371c      	adds	r7, #28
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr
 8003520:	03fff000 	.word	0x03fff000

08003524 <LL_ADC_GetOffsetChannel>:
{
 8003524:	b480      	push	{r7}
 8003526:	b085      	sub	sp, #20
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	3360      	adds	r3, #96	@ 0x60
 8003532:	461a      	mov	r2, r3
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	4413      	add	r3, r2
 800353a:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003544:	4618      	mov	r0, r3
 8003546:	3714      	adds	r7, #20
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr

08003550 <LL_ADC_SetOffsetState>:
{
 8003550:	b480      	push	{r7}
 8003552:	b087      	sub	sp, #28
 8003554:	af00      	add	r7, sp, #0
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	3360      	adds	r3, #96	@ 0x60
 8003560:	461a      	mov	r2, r3
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	4413      	add	r3, r2
 8003568:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	431a      	orrs	r2, r3
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	601a      	str	r2, [r3, #0]
}
 800357a:	bf00      	nop
 800357c:	371c      	adds	r7, #28
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr

08003586 <LL_ADC_SetOffsetSign>:
{
 8003586:	b480      	push	{r7}
 8003588:	b087      	sub	sp, #28
 800358a:	af00      	add	r7, sp, #0
 800358c:	60f8      	str	r0, [r7, #12]
 800358e:	60b9      	str	r1, [r7, #8]
 8003590:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	3360      	adds	r3, #96	@ 0x60
 8003596:	461a      	mov	r2, r3
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	4413      	add	r3, r2
 800359e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	431a      	orrs	r2, r3
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	601a      	str	r2, [r3, #0]
}
 80035b0:	bf00      	nop
 80035b2:	371c      	adds	r7, #28
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr

080035bc <LL_ADC_SetOffsetSaturation>:
{
 80035bc:	b480      	push	{r7}
 80035be:	b087      	sub	sp, #28
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	60b9      	str	r1, [r7, #8]
 80035c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	3360      	adds	r3, #96	@ 0x60
 80035cc:	461a      	mov	r2, r3
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	4413      	add	r3, r2
 80035d4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	431a      	orrs	r2, r3
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	601a      	str	r2, [r3, #0]
}
 80035e6:	bf00      	nop
 80035e8:	371c      	adds	r7, #28
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr

080035f2 <LL_ADC_SetSamplingTimeCommonConfig>:
{
 80035f2:	b480      	push	{r7}
 80035f4:	b083      	sub	sp, #12
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]
 80035fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	695b      	ldr	r3, [r3, #20]
 8003600:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	431a      	orrs	r2, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	615a      	str	r2, [r3, #20]
}
 800360c:	bf00      	nop
 800360e:	370c      	adds	r7, #12
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr

08003618 <LL_ADC_INJ_GetTrigAuto>:
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
}
 8003628:	4618      	mov	r0, r3
 800362a:	370c      	adds	r7, #12
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <LL_ADC_SetChannelSamplingTime>:
{
 8003634:	b480      	push	{r7}
 8003636:	b087      	sub	sp, #28
 8003638:	af00      	add	r7, sp, #0
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	60b9      	str	r1, [r7, #8]
 800363e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	3314      	adds	r3, #20
 8003644:	461a      	mov	r2, r3
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	0e5b      	lsrs	r3, r3, #25
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	f003 0304 	and.w	r3, r3, #4
 8003650:	4413      	add	r3, r2
 8003652:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	0d1b      	lsrs	r3, r3, #20
 800365c:	f003 031f 	and.w	r3, r3, #31
 8003660:	2107      	movs	r1, #7
 8003662:	fa01 f303 	lsl.w	r3, r1, r3
 8003666:	43db      	mvns	r3, r3
 8003668:	401a      	ands	r2, r3
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	0d1b      	lsrs	r3, r3, #20
 800366e:	f003 031f 	and.w	r3, r3, #31
 8003672:	6879      	ldr	r1, [r7, #4]
 8003674:	fa01 f303 	lsl.w	r3, r1, r3
 8003678:	431a      	orrs	r2, r3
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	601a      	str	r2, [r3, #0]
}
 800367e:	bf00      	nop
 8003680:	371c      	adds	r7, #28
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr
	...

0800368c <LL_ADC_SetChannelSingleDiff>:
{
 800368c:	b480      	push	{r7}
 800368e:	b085      	sub	sp, #20
 8003690:	af00      	add	r7, sp, #0
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	60b9      	str	r1, [r7, #8]
 8003696:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036a4:	43db      	mvns	r3, r3
 80036a6:	401a      	ands	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f003 0318 	and.w	r3, r3, #24
 80036ae:	4908      	ldr	r1, [pc, #32]	@ (80036d0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80036b0:	40d9      	lsrs	r1, r3
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	400b      	ands	r3, r1
 80036b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036ba:	431a      	orrs	r2, r3
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 80036c2:	bf00      	nop
 80036c4:	3714      	adds	r7, #20
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
 80036ce:	bf00      	nop
 80036d0:	0007ffff 	.word	0x0007ffff

080036d4 <LL_ADC_GetMultimode>:
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	f003 031f 	and.w	r3, r3, #31
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <LL_ADC_IsEnabled>:
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	f003 0301 	and.w	r3, r3, #1
 8003700:	2b01      	cmp	r3, #1
 8003702:	d101      	bne.n	8003708 <LL_ADC_IsEnabled+0x18>
 8003704:	2301      	movs	r3, #1
 8003706:	e000      	b.n	800370a <LL_ADC_IsEnabled+0x1a>
 8003708:	2300      	movs	r3, #0
}
 800370a:	4618      	mov	r0, r3
 800370c:	370c      	adds	r7, #12
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr

08003716 <LL_ADC_StartCalibration>:
{
 8003716:	b480      	push	{r7}
 8003718:	b083      	sub	sp, #12
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
 800371e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8003728:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800372c:	683a      	ldr	r2, [r7, #0]
 800372e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003732:	4313      	orrs	r3, r2
 8003734:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	609a      	str	r2, [r3, #8]
}
 800373c:	bf00      	nop
 800373e:	370c      	adds	r7, #12
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr

08003748 <LL_ADC_IsCalibrationOnGoing>:
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003758:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800375c:	d101      	bne.n	8003762 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800375e:	2301      	movs	r3, #1
 8003760:	e000      	b.n	8003764 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003762:	2300      	movs	r3, #0
}
 8003764:	4618      	mov	r0, r3
 8003766:	370c      	adds	r7, #12
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr

08003770 <LL_ADC_REG_IsConversionOngoing>:
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	f003 0304 	and.w	r3, r3, #4
 8003780:	2b04      	cmp	r3, #4
 8003782:	d101      	bne.n	8003788 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003784:	2301      	movs	r3, #1
 8003786:	e000      	b.n	800378a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003788:	2300      	movs	r3, #0
}
 800378a:	4618      	mov	r0, r3
 800378c:	370c      	adds	r7, #12
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr

08003796 <LL_ADC_INJ_StartConversion>:
{
 8003796:	b480      	push	{r7}
 8003798:	b083      	sub	sp, #12
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80037a6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80037aa:	f043 0208 	orr.w	r2, r3, #8
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	609a      	str	r2, [r3, #8]
}
 80037b2:	bf00      	nop
 80037b4:	370c      	adds	r7, #12
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr

080037be <LL_ADC_INJ_IsConversionOngoing>:
{
 80037be:	b480      	push	{r7}
 80037c0:	b083      	sub	sp, #12
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	f003 0308 	and.w	r3, r3, #8
 80037ce:	2b08      	cmp	r3, #8
 80037d0:	d101      	bne.n	80037d6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80037d2:	2301      	movs	r3, #1
 80037d4:	e000      	b.n	80037d8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80037d6:	2300      	movs	r3, #0
}
 80037d8:	4618      	mov	r0, r3
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80037ee:	2300      	movs	r3, #0
 80037f0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d101      	bne.n	8003800 <HAL_ADCEx_Calibration_Start+0x1c>
 80037fc:	2302      	movs	r3, #2
 80037fe:	e04d      	b.n	800389c <HAL_ADCEx_Calibration_Start+0xb8>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f7ff fde7 	bl	80033dc <ADC_Disable>
 800380e:	4603      	mov	r3, r0
 8003810:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003812:	7bfb      	ldrb	r3, [r7, #15]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d136      	bne.n	8003886 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800381c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003820:	f023 0302 	bic.w	r3, r3, #2
 8003824:	f043 0202 	orr.w	r2, r3, #2
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	6839      	ldr	r1, [r7, #0]
 8003832:	4618      	mov	r0, r3
 8003834:	f7ff ff6f 	bl	8003716 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003838:	e014      	b.n	8003864 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	3301      	adds	r3, #1
 800383e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	4a18      	ldr	r2, [pc, #96]	@ (80038a4 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d90d      	bls.n	8003864 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800384c:	f023 0312 	bic.w	r3, r3, #18
 8003850:	f043 0210 	orr.w	r2, r3, #16
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e01b      	b.n	800389c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4618      	mov	r0, r3
 800386a:	f7ff ff6d 	bl	8003748 <LL_ADC_IsCalibrationOnGoing>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d1e2      	bne.n	800383a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003878:	f023 0303 	bic.w	r3, r3, #3
 800387c:	f043 0201 	orr.w	r2, r3, #1
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003884:	e005      	b.n	8003892 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800388a:	f043 0210 	orr.w	r2, r3, #16
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800389a:	7bfb      	ldrb	r3, [r7, #15]
}
 800389c:	4618      	mov	r0, r3
 800389e:	3710      	adds	r7, #16
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	0004de01 	.word	0x0004de01

080038a8 <HAL_ADCEx_InjectedStart>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef *hadc)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b086      	sub	sp, #24
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80038b0:	4853      	ldr	r0, [pc, #332]	@ (8003a00 <HAL_ADCEx_InjectedStart+0x158>)
 80038b2:	f7ff ff0f 	bl	80036d4 <LL_ADC_GetMultimode>
 80038b6:	6178      	str	r0, [r7, #20]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4618      	mov	r0, r3
 80038be:	f7ff ff7e 	bl	80037be <LL_ADC_INJ_IsConversionOngoing>
 80038c2:	4603      	mov	r3, r0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d001      	beq.n	80038cc <HAL_ADCEx_InjectedStart+0x24>
  {
    return HAL_BUSY;
 80038c8:	2302      	movs	r3, #2
 80038ca:	e094      	b.n	80039f6 <HAL_ADCEx_InjectedStart+0x14e>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80038d6:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038de:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d10a      	bne.n	80038fc <HAL_ADCEx_InjectedStart+0x54>
        && (tmp_config_injected_queue == 0UL)
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d107      	bne.n	80038fc <HAL_ADCEx_InjectedStart+0x54>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038f0:	f043 0220 	orr.w	r2, r3, #32
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e07c      	b.n	80039f6 <HAL_ADCEx_InjectedStart+0x14e>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003902:	2b01      	cmp	r3, #1
 8003904:	d101      	bne.n	800390a <HAL_ADCEx_InjectedStart+0x62>
 8003906:	2302      	movs	r3, #2
 8003908:	e075      	b.n	80039f6 <HAL_ADCEx_InjectedStart+0x14e>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2201      	movs	r2, #1
 800390e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f7ff fcdc 	bl	80032d0 <ADC_Enable>
 8003918:	4603      	mov	r3, r0
 800391a:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800391c:	7bfb      	ldrb	r3, [r7, #15]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d164      	bne.n	80039ec <HAL_ADCEx_InjectedStart+0x144>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003926:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800392a:	2b00      	cmp	r3, #0
 800392c:	d006      	beq.n	800393c <HAL_ADCEx_InjectedStart+0x94>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003932:	f023 0208 	bic.w	r2, r3, #8
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	661a      	str	r2, [r3, #96]	@ 0x60
 800393a:	e002      	b.n	8003942 <HAL_ADCEx_InjectedStart+0x9a>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003946:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800394a:	f023 0301 	bic.w	r3, r3, #1
 800394e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a2a      	ldr	r2, [pc, #168]	@ (8003a04 <HAL_ADCEx_InjectedStart+0x15c>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d002      	beq.n	8003966 <HAL_ADCEx_InjectedStart+0xbe>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	e001      	b.n	800396a <HAL_ADCEx_InjectedStart+0xc2>
 8003966:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	6812      	ldr	r2, [r2, #0]
 800396e:	4293      	cmp	r3, r2
 8003970:	d002      	beq.n	8003978 <HAL_ADCEx_InjectedStart+0xd0>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d105      	bne.n	8003984 <HAL_ADCEx_InjectedStart+0xdc>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800397c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2260      	movs	r2, #96	@ 0x60
 800398a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a1a      	ldr	r2, [pc, #104]	@ (8003a04 <HAL_ADCEx_InjectedStart+0x15c>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d002      	beq.n	80039a4 <HAL_ADCEx_InjectedStart+0xfc>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	e001      	b.n	80039a8 <HAL_ADCEx_InjectedStart+0x100>
 80039a4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	6812      	ldr	r2, [r2, #0]
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d008      	beq.n	80039c2 <HAL_ADCEx_InjectedStart+0x11a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d005      	beq.n	80039c2 <HAL_ADCEx_InjectedStart+0x11a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	2b06      	cmp	r3, #6
 80039ba:	d002      	beq.n	80039c2 <HAL_ADCEx_InjectedStart+0x11a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	2b07      	cmp	r3, #7
 80039c0:	d10d      	bne.n	80039de <HAL_ADCEx_InjectedStart+0x136>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4618      	mov	r0, r3
 80039c8:	f7ff fe26 	bl	8003618 <LL_ADC_INJ_GetTrigAuto>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d110      	bne.n	80039f4 <HAL_ADCEx_InjectedStart+0x14c>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4618      	mov	r0, r3
 80039d8:	f7ff fedd 	bl	8003796 <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 80039dc:	e00a      	b.n	80039f4 <HAL_ADCEx_InjectedStart+0x14c>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039e2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80039ea:	e003      	b.n	80039f4 <HAL_ADCEx_InjectedStart+0x14c>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 80039f4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3718      	adds	r7, #24
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	50000300 	.word	0x50000300
 8003a04:	50000100 	.word	0x50000100

08003a08 <HAL_ADCEx_InjectedStart_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef *hadc)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b086      	sub	sp, #24
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a10:	486e      	ldr	r0, [pc, #440]	@ (8003bcc <HAL_ADCEx_InjectedStart_IT+0x1c4>)
 8003a12:	f7ff fe5f 	bl	80036d4 <LL_ADC_GetMultimode>
 8003a16:	6178      	str	r0, [r7, #20]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f7ff fece 	bl	80037be <LL_ADC_INJ_IsConversionOngoing>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d001      	beq.n	8003a2c <HAL_ADCEx_InjectedStart_IT+0x24>
  {
    return HAL_BUSY;
 8003a28:	2302      	movs	r3, #2
 8003a2a:	e0ca      	b.n	8003bc2 <HAL_ADCEx_InjectedStart_IT+0x1ba>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003a36:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a3e:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d10a      	bne.n	8003a5c <HAL_ADCEx_InjectedStart_IT+0x54>
        && (tmp_config_injected_queue == 0UL)
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d107      	bne.n	8003a5c <HAL_ADCEx_InjectedStart_IT+0x54>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a50:	f043 0220 	orr.w	r2, r3, #32
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e0b2      	b.n	8003bc2 <HAL_ADCEx_InjectedStart_IT+0x1ba>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d101      	bne.n	8003a6a <HAL_ADCEx_InjectedStart_IT+0x62>
 8003a66:	2302      	movs	r3, #2
 8003a68:	e0ab      	b.n	8003bc2 <HAL_ADCEx_InjectedStart_IT+0x1ba>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f7ff fc2c 	bl	80032d0 <ADC_Enable>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003a7c:	7bfb      	ldrb	r3, [r7, #15]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	f040 809a 	bne.w	8003bb8 <HAL_ADCEx_InjectedStart_IT+0x1b0>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d006      	beq.n	8003a9e <HAL_ADCEx_InjectedStart_IT+0x96>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a94:	f023 0208 	bic.w	r2, r3, #8
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	661a      	str	r2, [r3, #96]	@ 0x60
 8003a9c:	e002      	b.n	8003aa4 <HAL_ADCEx_InjectedStart_IT+0x9c>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003aa8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003aac:	f023 0301 	bic.w	r3, r3, #1
 8003ab0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a44      	ldr	r2, [pc, #272]	@ (8003bd0 <HAL_ADCEx_InjectedStart_IT+0x1c8>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d002      	beq.n	8003ac8 <HAL_ADCEx_InjectedStart_IT+0xc0>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	e001      	b.n	8003acc <HAL_ADCEx_InjectedStart_IT+0xc4>
 8003ac8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	6812      	ldr	r2, [r2, #0]
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d002      	beq.n	8003ada <HAL_ADCEx_InjectedStart_IT+0xd2>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d105      	bne.n	8003ae6 <HAL_ADCEx_InjectedStart_IT+0xde>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ade:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	2260      	movs	r2, #96	@ 0x60
 8003aec:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      /* Enable ADC Injected context queue overflow interrupt if this feature   */
      /* is enabled.                                                            */
      if ((hadc->Instance->CFGR & ADC_CFGR_JQM) != 0UL)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d007      	beq.n	8003b14 <HAL_ADCEx_InjectedStart_IT+0x10c>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_FLAG_JQOVF);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	685a      	ldr	r2, [r3, #4]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003b12:	605a      	str	r2, [r3, #4]
      }

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	699b      	ldr	r3, [r3, #24]
 8003b18:	2b08      	cmp	r3, #8
 8003b1a:	d110      	bne.n	8003b3e <HAL_ADCEx_InjectedStart_IT+0x136>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	685a      	ldr	r2, [r3, #4]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f022 0220 	bic.w	r2, r2, #32
 8003b2a:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	685a      	ldr	r2, [r3, #4]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003b3a:	605a      	str	r2, [r3, #4]
          break;
 8003b3c:	e010      	b.n	8003b60 <HAL_ADCEx_InjectedStart_IT+0x158>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	685a      	ldr	r2, [r3, #4]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b4c:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	685a      	ldr	r2, [r3, #4]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f042 0220 	orr.w	r2, r2, #32
 8003b5c:	605a      	str	r2, [r3, #4]
          break;
 8003b5e:	bf00      	nop
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a1a      	ldr	r2, [pc, #104]	@ (8003bd0 <HAL_ADCEx_InjectedStart_IT+0x1c8>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d002      	beq.n	8003b70 <HAL_ADCEx_InjectedStart_IT+0x168>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	e001      	b.n	8003b74 <HAL_ADCEx_InjectedStart_IT+0x16c>
 8003b70:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	6812      	ldr	r2, [r2, #0]
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d008      	beq.n	8003b8e <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d005      	beq.n	8003b8e <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	2b06      	cmp	r3, #6
 8003b86:	d002      	beq.n	8003b8e <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	2b07      	cmp	r3, #7
 8003b8c:	d10d      	bne.n	8003baa <HAL_ADCEx_InjectedStart_IT+0x1a2>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4618      	mov	r0, r3
 8003b94:	f7ff fd40 	bl	8003618 <LL_ADC_INJ_GetTrigAuto>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d110      	bne.n	8003bc0 <HAL_ADCEx_InjectedStart_IT+0x1b8>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f7ff fdf7 	bl	8003796 <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8003ba8:	e00a      	b.n	8003bc0 <HAL_ADCEx_InjectedStart_IT+0x1b8>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bae:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003bb6:	e003      	b.n	8003bc0 <HAL_ADCEx_InjectedStart_IT+0x1b8>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 8003bc0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3718      	adds	r7, #24
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	50000300 	.word	0x50000300
 8003bd0:	50000100 	.word	0x50000100

08003bd4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003bdc:	bf00      	nop
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr

08003be8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003bf0:	bf00      	nop
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr

08003bfc <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003c04:	bf00      	nop
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003c18:	bf00      	nop
 8003c1a:	370c      	adds	r7, #12
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr

08003c24 <HAL_ADCEx_InjectedConfigChannel>:
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc,
                                                  const ADC_InjectionConfTypeDef *pConfigInjected)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b0b6      	sub	sp, #216	@ 0xd8
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 8003c34:	2300      	movs	r3, #0
 8003c36:	60bb      	str	r3, [r7, #8]

  uint32_t tmp_jsqr_context_queue_being_built = 0U;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d102      	bne.n	8003c4e <HAL_ADCEx_InjectedConfigChannel+0x2a>
 8003c48:	2302      	movs	r3, #2
 8003c4a:	f000 bcb5 	b.w	80045b8 <HAL_ADCEx_InjectedConfigChannel+0x994>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2201      	movs	r2, #1
 8003c52:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	695b      	ldr	r3, [r3, #20]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d003      	beq.n	8003c66 <HAL_ADCEx_InjectedConfigChannel+0x42>
      (pConfigInjected->InjectedNbrOfConversion == 1U))
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	6a1b      	ldr	r3, [r3, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d130      	bne.n	8003cc8 <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	2b09      	cmp	r3, #9
 8003c6c:	d179      	bne.n	8003d62 <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d010      	beq.n	8003c98 <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	0e9b      	lsrs	r3, r3, #26
 8003c7c:	025b      	lsls	r3, r3, #9
 8003c7e:	f403 5278 	and.w	r2, r3, #15872	@ 0x3e00
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c86:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 8003c8a:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8003c90:	4313      	orrs	r3, r2
 8003c92:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003c96:	e007      	b.n	8003ca8 <HAL_ADCEx_InjectedConfigChannel+0x84>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	0e9b      	lsrs	r3, r3, #26
 8003c9e:	025b      	lsls	r3, r3, #9
 8003ca0:	f403 5378 	and.w	r3, r3, #15872	@ 0x3e00
 8003ca4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_jsqr_context_queue_being_built);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003cae:	4b84      	ldr	r3, [pc, #528]	@ (8003ec0 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	6812      	ldr	r2, [r2, #0]
 8003cb6:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8003cba:	430b      	orrs	r3, r1
 8003cbc:	64d3      	str	r3, [r2, #76]	@ 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_jsqr_context_queue_being_built;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003cc4:	665a      	str	r2, [r3, #100]	@ 0x64
    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8003cc6:	e04c      	b.n	8003d62 <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d11d      	bne.n	8003d0c <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = pConfigInjected->InjectedNbrOfConversion;
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	6a1a      	ldr	r2, [r3, #32]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	669a      	str	r2, [r3, #104]	@ 0x68
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00d      	beq.n	8003d02 <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	6a1b      	ldr	r3, [r3, #32]
 8003cea:	1e5a      	subs	r2, r3, #1
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cf0:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 8003cf4:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003d00:	e004      	b.n	8003d0c <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U));
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	6a1b      	ldr	r3, [r3, #32]
 8003d06:	3b01      	subs	r3, #1
 8003d08:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, pConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built |= ADC_JSQR_RK(pConfigInjected->InjectedChannel, pConfigInjected->InjectedRank);
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	0e9b      	lsrs	r3, r3, #26
 8003d12:	f003 021f 	and.w	r2, r3, #31
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	f003 031f 	and.w	r3, r3, #31
 8003d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d22:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003d26:	4313      	orrs	r3, r2
 8003d28:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d30:	1e5a      	subs	r2, r3, #1
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	669a      	str	r2, [r3, #104]	@ 0x68

    /* 3. tmp_jsqr_context_queue_being_built is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003d3a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003d3e:	431a      	orrs	r2, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	665a      	str	r2, [r3, #100]	@ 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d10a      	bne.n	8003d62 <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003d52:	4b5b      	ldr	r3, [pc, #364]	@ (8003ec0 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8003d54:	4013      	ands	r3, r2
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	6e51      	ldr	r1, [r2, #100]	@ 0x64
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	6812      	ldr	r2, [r2, #0]
 8003d5e:	430b      	orrs	r3, r1
 8003d60:	64d3      	str	r3, [r2, #76]	@ 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4618      	mov	r0, r3
 8003d68:	f7ff fd29 	bl	80037be <LL_ADC_INJ_IsConversionOngoing>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d124      	bne.n	8003dbc <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (pConfigInjected->AutoInjectedConv == DISABLE)
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d112      	bne.n	8003da2 <HAL_ADCEx_InjectedConfigChannel+0x17e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8003d8c:	055a      	lsls	r2, r3, #21
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003d94:	051b      	lsls	r3, r3, #20
 8003d96:	431a      	orrs	r2, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	430a      	orrs	r2, r1
 8003d9e:	60da      	str	r2, [r3, #12]
 8003da0:	e00c      	b.n	8003dbc <HAL_ADCEx_InjectedConfigChannel+0x198>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8003db2:	055a      	lsls	r2, r3, #21
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	430a      	orrs	r2, r1
 8003dba:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f7ff fcd5 	bl	8003770 <LL_ADC_REG_IsConversionOngoing>
 8003dc6:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f7ff fcf5 	bl	80037be <LL_ADC_INJ_IsConversionOngoing>
 8003dd4:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003dd8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	f040 822e 	bne.w	800423e <HAL_ADCEx_InjectedConfigChannel+0x61a>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003de2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	f040 8229 	bne.w	800423e <HAL_ADCEx_InjectedConfigChannel+0x61a>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((pConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d003      	beq.n	8003dfc <HAL_ADCEx_InjectedConfigChannel+0x1d8>
        || (pConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d116      	bne.n	8003e2a <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d108      	bne.n	8003e18 <HAL_ADCEx_InjectedConfigChannel+0x1f4>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	68da      	ldr	r2, [r3, #12]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8003e14:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8003e16:	e01f      	b.n	8003e58 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	68da      	ldr	r2, [r3, #12]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 8003e26:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8003e28:	e016      	b.n	8003e58 <HAL_ADCEx_InjectedConfigChannel+0x234>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d109      	bne.n	8003e48 <HAL_ADCEx_InjectedConfigChannel+0x224>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e38:	f043 0220 	orr.w	r2, r3, #32
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	65da      	str	r2, [r3, #92]	@ 0x5c

        tmp_hal_status = HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003e46:	e007      	b.n	8003e58 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	68da      	ldr	r2, [r3, #12]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 8003e56:	60da      	str	r2, [r3, #12]
      }
    }

    if (pConfigInjected->InjecOversamplingMode == ENABLE)
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d110      	bne.n	8003e84 <HAL_ADCEx_InjectedConfigChannel+0x260>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	691b      	ldr	r3, [r3, #16]
 8003e68:	f423 72ff 	bic.w	r2, r3, #510	@ 0x1fe
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e74:	430b      	orrs	r3, r1
 8003e76:	431a      	orrs	r2, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f042 0202 	orr.w	r2, r2, #2
 8003e80:	611a      	str	r2, [r3, #16]
 8003e82:	e007      	b.n	8003e94 <HAL_ADCEx_InjectedConfigChannel+0x270>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	691a      	ldr	r2, [r3, #16]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f022 0202 	bic.w	r2, r2, #2
 8003e92:	611a      	str	r2, [r3, #16]
    }

    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (pConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003e9c:	d112      	bne.n	8003ec4 <HAL_ADCEx_InjectedConfigChannel+0x2a0>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6818      	ldr	r0, [r3, #0]
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	4619      	mov	r1, r3
 8003eaa:	f7ff fbc3 	bl	8003634 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f7ff fb9b 	bl	80035f2 <LL_ADC_SetSamplingTimeCommonConfig>
 8003ebc:	e011      	b.n	8003ee2 <HAL_ADCEx_InjectedConfigChannel+0x2be>
 8003ebe:	bf00      	nop
 8003ec0:	04104000 	.word	0x04104000
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6818      	ldr	r0, [r3, #0]
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	6819      	ldr	r1, [r3, #0]
                                    pConfigInjected->InjectedSamplingTime);
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	689b      	ldr	r3, [r3, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	f7ff fbaf 	bl	8003634 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	2100      	movs	r1, #0
 8003edc:	4618      	mov	r0, r3
 8003ede:	f7ff fb88 	bl	80035f2 <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, pConfigInjected->InjectedOffset);
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	695a      	ldr	r2, [r3, #20]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	08db      	lsrs	r3, r3, #3
 8003eee:	f003 0303 	and.w	r3, r3, #3
 8003ef2:	005b      	lsls	r3, r3, #1
 8003ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

    if (pConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	691b      	ldr	r3, [r3, #16]
 8003f00:	2b04      	cmp	r3, #4
 8003f02:	d022      	beq.n	8003f4a <HAL_ADCEx_InjectedConfigChannel+0x326>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedChannel,
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6818      	ldr	r0, [r3, #0]
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	6919      	ldr	r1, [r3, #16]
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003f14:	f7ff fae2 	bl	80034dc <LL_ADC_SetOffset>
                       tmp_offset_shifted);

      /* Set ADC selected offset sign & saturation */
      LL_ADC_SetOffsetSign(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedOffsetSign);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6818      	ldr	r0, [r3, #0]
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	6919      	ldr	r1, [r3, #16]
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	699b      	ldr	r3, [r3, #24]
 8003f24:	461a      	mov	r2, r3
 8003f26:	f7ff fb2e 	bl	8003586 <LL_ADC_SetOffsetSign>
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6818      	ldr	r0, [r3, #0]
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	6919      	ldr	r1, [r3, #16]
                                 (pConfigInjected->InjectedOffsetSaturation == ENABLE) ?
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	7f1b      	ldrb	r3, [r3, #28]
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d102      	bne.n	8003f40 <HAL_ADCEx_InjectedConfigChannel+0x31c>
 8003f3a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003f3e:	e000      	b.n	8003f42 <HAL_ADCEx_InjectedConfigChannel+0x31e>
 8003f40:	2300      	movs	r3, #0
 8003f42:	461a      	mov	r2, r3
 8003f44:	f7ff fb3a 	bl	80035bc <LL_ADC_SetOffsetSaturation>
 8003f48:	e179      	b.n	800423e <HAL_ADCEx_InjectedConfigChannel+0x61a>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	2100      	movs	r1, #0
 8003f50:	4618      	mov	r0, r3
 8003f52:	f7ff fae7 	bl	8003524 <LL_ADC_GetOffsetChannel>
 8003f56:	4603      	mov	r3, r0
 8003f58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d10a      	bne.n	8003f76 <HAL_ADCEx_InjectedConfigChannel+0x352>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2100      	movs	r1, #0
 8003f66:	4618      	mov	r0, r3
 8003f68:	f7ff fadc 	bl	8003524 <LL_ADC_GetOffsetChannel>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	0e9b      	lsrs	r3, r3, #26
 8003f70:	f003 021f 	and.w	r2, r3, #31
 8003f74:	e01e      	b.n	8003fb4 <HAL_ADCEx_InjectedConfigChannel+0x390>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2100      	movs	r1, #0
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f7ff fad1 	bl	8003524 <LL_ADC_GetOffsetChannel>
 8003f82:	4603      	mov	r3, r0
 8003f84:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f88:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003f8c:	fa93 f3a3 	rbit	r3, r3
 8003f90:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8003f94:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003f98:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8003f9c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d101      	bne.n	8003fa8 <HAL_ADCEx_InjectedConfigChannel+0x384>
    return 32U;
 8003fa4:	2320      	movs	r3, #32
 8003fa6:	e004      	b.n	8003fb2 <HAL_ADCEx_InjectedConfigChannel+0x38e>
  return __builtin_clz(value);
 8003fa8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003fac:	fab3 f383 	clz	r3, r3
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d105      	bne.n	8003fcc <HAL_ADCEx_InjectedConfigChannel+0x3a8>
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	0e9b      	lsrs	r3, r3, #26
 8003fc6:	f003 031f 	and.w	r3, r3, #31
 8003fca:	e018      	b.n	8003ffe <HAL_ADCEx_InjectedConfigChannel+0x3da>
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fd4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003fd8:	fa93 f3a3 	rbit	r3, r3
 8003fdc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8003fe0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003fe4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8003fe8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d101      	bne.n	8003ff4 <HAL_ADCEx_InjectedConfigChannel+0x3d0>
    return 32U;
 8003ff0:	2320      	movs	r3, #32
 8003ff2:	e004      	b.n	8003ffe <HAL_ADCEx_InjectedConfigChannel+0x3da>
  return __builtin_clz(value);
 8003ff4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003ff8:	fab3 f383 	clz	r3, r3
 8003ffc:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d106      	bne.n	8004010 <HAL_ADCEx_InjectedConfigChannel+0x3ec>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2200      	movs	r2, #0
 8004008:	2100      	movs	r1, #0
 800400a:	4618      	mov	r0, r3
 800400c:	f7ff faa0 	bl	8003550 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2101      	movs	r1, #1
 8004016:	4618      	mov	r0, r3
 8004018:	f7ff fa84 	bl	8003524 <LL_ADC_GetOffsetChannel>
 800401c:	4603      	mov	r3, r0
 800401e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004022:	2b00      	cmp	r3, #0
 8004024:	d10a      	bne.n	800403c <HAL_ADCEx_InjectedConfigChannel+0x418>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	2101      	movs	r1, #1
 800402c:	4618      	mov	r0, r3
 800402e:	f7ff fa79 	bl	8003524 <LL_ADC_GetOffsetChannel>
 8004032:	4603      	mov	r3, r0
 8004034:	0e9b      	lsrs	r3, r3, #26
 8004036:	f003 021f 	and.w	r2, r3, #31
 800403a:	e01e      	b.n	800407a <HAL_ADCEx_InjectedConfigChannel+0x456>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2101      	movs	r1, #1
 8004042:	4618      	mov	r0, r3
 8004044:	f7ff fa6e 	bl	8003524 <LL_ADC_GetOffsetChannel>
 8004048:	4603      	mov	r3, r0
 800404a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800404e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004052:	fa93 f3a3 	rbit	r3, r3
 8004056:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800405a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800405e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8004062:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004066:	2b00      	cmp	r3, #0
 8004068:	d101      	bne.n	800406e <HAL_ADCEx_InjectedConfigChannel+0x44a>
    return 32U;
 800406a:	2320      	movs	r3, #32
 800406c:	e004      	b.n	8004078 <HAL_ADCEx_InjectedConfigChannel+0x454>
  return __builtin_clz(value);
 800406e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004072:	fab3 f383 	clz	r3, r3
 8004076:	b2db      	uxtb	r3, r3
 8004078:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004082:	2b00      	cmp	r3, #0
 8004084:	d105      	bne.n	8004092 <HAL_ADCEx_InjectedConfigChannel+0x46e>
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	0e9b      	lsrs	r3, r3, #26
 800408c:	f003 031f 	and.w	r3, r3, #31
 8004090:	e018      	b.n	80040c4 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800409a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800409e:	fa93 f3a3 	rbit	r3, r3
 80040a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80040a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80040aa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80040ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d101      	bne.n	80040ba <HAL_ADCEx_InjectedConfigChannel+0x496>
    return 32U;
 80040b6:	2320      	movs	r3, #32
 80040b8:	e004      	b.n	80040c4 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
  return __builtin_clz(value);
 80040ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80040be:	fab3 f383 	clz	r3, r3
 80040c2:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d106      	bne.n	80040d6 <HAL_ADCEx_InjectedConfigChannel+0x4b2>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2200      	movs	r2, #0
 80040ce:	2101      	movs	r1, #1
 80040d0:	4618      	mov	r0, r3
 80040d2:	f7ff fa3d 	bl	8003550 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	2102      	movs	r1, #2
 80040dc:	4618      	mov	r0, r3
 80040de:	f7ff fa21 	bl	8003524 <LL_ADC_GetOffsetChannel>
 80040e2:	4603      	mov	r3, r0
 80040e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d10a      	bne.n	8004102 <HAL_ADCEx_InjectedConfigChannel+0x4de>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2102      	movs	r1, #2
 80040f2:	4618      	mov	r0, r3
 80040f4:	f7ff fa16 	bl	8003524 <LL_ADC_GetOffsetChannel>
 80040f8:	4603      	mov	r3, r0
 80040fa:	0e9b      	lsrs	r3, r3, #26
 80040fc:	f003 021f 	and.w	r2, r3, #31
 8004100:	e01e      	b.n	8004140 <HAL_ADCEx_InjectedConfigChannel+0x51c>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	2102      	movs	r1, #2
 8004108:	4618      	mov	r0, r3
 800410a:	f7ff fa0b 	bl	8003524 <LL_ADC_GetOffsetChannel>
 800410e:	4603      	mov	r3, r0
 8004110:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004114:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004118:	fa93 f3a3 	rbit	r3, r3
 800411c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8004120:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004124:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8004128:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800412c:	2b00      	cmp	r3, #0
 800412e:	d101      	bne.n	8004134 <HAL_ADCEx_InjectedConfigChannel+0x510>
    return 32U;
 8004130:	2320      	movs	r3, #32
 8004132:	e004      	b.n	800413e <HAL_ADCEx_InjectedConfigChannel+0x51a>
  return __builtin_clz(value);
 8004134:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004138:	fab3 f383 	clz	r3, r3
 800413c:	b2db      	uxtb	r3, r3
 800413e:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004148:	2b00      	cmp	r3, #0
 800414a:	d105      	bne.n	8004158 <HAL_ADCEx_InjectedConfigChannel+0x534>
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	0e9b      	lsrs	r3, r3, #26
 8004152:	f003 031f 	and.w	r3, r3, #31
 8004156:	e014      	b.n	8004182 <HAL_ADCEx_InjectedConfigChannel+0x55e>
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800415e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004160:	fa93 f3a3 	rbit	r3, r3
 8004164:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8004166:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004168:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800416c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004170:	2b00      	cmp	r3, #0
 8004172:	d101      	bne.n	8004178 <HAL_ADCEx_InjectedConfigChannel+0x554>
    return 32U;
 8004174:	2320      	movs	r3, #32
 8004176:	e004      	b.n	8004182 <HAL_ADCEx_InjectedConfigChannel+0x55e>
  return __builtin_clz(value);
 8004178:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800417c:	fab3 f383 	clz	r3, r3
 8004180:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004182:	429a      	cmp	r2, r3
 8004184:	d106      	bne.n	8004194 <HAL_ADCEx_InjectedConfigChannel+0x570>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	2200      	movs	r2, #0
 800418c:	2102      	movs	r1, #2
 800418e:	4618      	mov	r0, r3
 8004190:	f7ff f9de 	bl	8003550 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2103      	movs	r1, #3
 800419a:	4618      	mov	r0, r3
 800419c:	f7ff f9c2 	bl	8003524 <LL_ADC_GetOffsetChannel>
 80041a0:	4603      	mov	r3, r0
 80041a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d10a      	bne.n	80041c0 <HAL_ADCEx_InjectedConfigChannel+0x59c>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	2103      	movs	r1, #3
 80041b0:	4618      	mov	r0, r3
 80041b2:	f7ff f9b7 	bl	8003524 <LL_ADC_GetOffsetChannel>
 80041b6:	4603      	mov	r3, r0
 80041b8:	0e9b      	lsrs	r3, r3, #26
 80041ba:	f003 021f 	and.w	r2, r3, #31
 80041be:	e017      	b.n	80041f0 <HAL_ADCEx_InjectedConfigChannel+0x5cc>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2103      	movs	r1, #3
 80041c6:	4618      	mov	r0, r3
 80041c8:	f7ff f9ac 	bl	8003524 <LL_ADC_GetOffsetChannel>
 80041cc:	4603      	mov	r3, r0
 80041ce:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041d0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80041d2:	fa93 f3a3 	rbit	r3, r3
 80041d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80041d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041da:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80041dc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d101      	bne.n	80041e6 <HAL_ADCEx_InjectedConfigChannel+0x5c2>
    return 32U;
 80041e2:	2320      	movs	r3, #32
 80041e4:	e003      	b.n	80041ee <HAL_ADCEx_InjectedConfigChannel+0x5ca>
  return __builtin_clz(value);
 80041e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80041e8:	fab3 f383 	clz	r3, r3
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d105      	bne.n	8004208 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	0e9b      	lsrs	r3, r3, #26
 8004202:	f003 031f 	and.w	r3, r3, #31
 8004206:	e011      	b.n	800422c <HAL_ADCEx_InjectedConfigChannel+0x608>
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800420e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004210:	fa93 f3a3 	rbit	r3, r3
 8004214:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8004216:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004218:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800421a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800421c:	2b00      	cmp	r3, #0
 800421e:	d101      	bne.n	8004224 <HAL_ADCEx_InjectedConfigChannel+0x600>
    return 32U;
 8004220:	2320      	movs	r3, #32
 8004222:	e003      	b.n	800422c <HAL_ADCEx_InjectedConfigChannel+0x608>
  return __builtin_clz(value);
 8004224:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004226:	fab3 f383 	clz	r3, r3
 800422a:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800422c:	429a      	cmp	r2, r3
 800422e:	d106      	bne.n	800423e <HAL_ADCEx_InjectedConfigChannel+0x61a>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2200      	movs	r2, #0
 8004236:	2103      	movs	r1, #3
 8004238:	4618      	mov	r0, r3
 800423a:	f7ff f989 	bl	8003550 <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4618      	mov	r0, r3
 8004244:	f7ff fa54 	bl	80036f0 <LL_ADC_IsEnabled>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	f040 8140 	bne.w	80044d0 <HAL_ADCEx_InjectedConfigChannel+0x8ac>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6818      	ldr	r0, [r3, #0]
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	6819      	ldr	r1, [r3, #0]
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	68db      	ldr	r3, [r3, #12]
 800425c:	461a      	mov	r2, r3
 800425e:	f7ff fa15 	bl	800368c <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (pConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	68db      	ldr	r3, [r3, #12]
 8004266:	4a8f      	ldr	r2, [pc, #572]	@ (80044a4 <HAL_ADCEx_InjectedConfigChannel+0x880>)
 8004268:	4293      	cmp	r3, r2
 800426a:	f040 8131 	bne.w	80044d0 <HAL_ADCEx_InjectedConfigChannel+0x8ac>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6818      	ldr	r0, [r3, #0]
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800427a:	2b00      	cmp	r3, #0
 800427c:	d10b      	bne.n	8004296 <HAL_ADCEx_InjectedConfigChannel+0x672>
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	0e9b      	lsrs	r3, r3, #26
 8004284:	3301      	adds	r3, #1
 8004286:	f003 031f 	and.w	r3, r3, #31
 800428a:	2b09      	cmp	r3, #9
 800428c:	bf94      	ite	ls
 800428e:	2301      	movls	r3, #1
 8004290:	2300      	movhi	r3, #0
 8004292:	b2db      	uxtb	r3, r3
 8004294:	e019      	b.n	80042ca <HAL_ADCEx_InjectedConfigChannel+0x6a6>
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800429c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800429e:	fa93 f3a3 	rbit	r3, r3
 80042a2:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80042a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80042a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d101      	bne.n	80042b2 <HAL_ADCEx_InjectedConfigChannel+0x68e>
    return 32U;
 80042ae:	2320      	movs	r3, #32
 80042b0:	e003      	b.n	80042ba <HAL_ADCEx_InjectedConfigChannel+0x696>
  return __builtin_clz(value);
 80042b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80042b4:	fab3 f383 	clz	r3, r3
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	3301      	adds	r3, #1
 80042bc:	f003 031f 	and.w	r3, r3, #31
 80042c0:	2b09      	cmp	r3, #9
 80042c2:	bf94      	ite	ls
 80042c4:	2301      	movls	r3, #1
 80042c6:	2300      	movhi	r3, #0
 80042c8:	b2db      	uxtb	r3, r3
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d079      	beq.n	80043c2 <HAL_ADCEx_InjectedConfigChannel+0x79e>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d107      	bne.n	80042ea <HAL_ADCEx_InjectedConfigChannel+0x6c6>
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	0e9b      	lsrs	r3, r3, #26
 80042e0:	3301      	adds	r3, #1
 80042e2:	069b      	lsls	r3, r3, #26
 80042e4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80042e8:	e015      	b.n	8004316 <HAL_ADCEx_InjectedConfigChannel+0x6f2>
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042f2:	fa93 f3a3 	rbit	r3, r3
 80042f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80042f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80042fa:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80042fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d101      	bne.n	8004306 <HAL_ADCEx_InjectedConfigChannel+0x6e2>
    return 32U;
 8004302:	2320      	movs	r3, #32
 8004304:	e003      	b.n	800430e <HAL_ADCEx_InjectedConfigChannel+0x6ea>
  return __builtin_clz(value);
 8004306:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004308:	fab3 f383 	clz	r3, r3
 800430c:	b2db      	uxtb	r3, r3
 800430e:	3301      	adds	r3, #1
 8004310:	069b      	lsls	r3, r3, #26
 8004312:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800431e:	2b00      	cmp	r3, #0
 8004320:	d109      	bne.n	8004336 <HAL_ADCEx_InjectedConfigChannel+0x712>
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	0e9b      	lsrs	r3, r3, #26
 8004328:	3301      	adds	r3, #1
 800432a:	f003 031f 	and.w	r3, r3, #31
 800432e:	2101      	movs	r1, #1
 8004330:	fa01 f303 	lsl.w	r3, r1, r3
 8004334:	e017      	b.n	8004366 <HAL_ADCEx_InjectedConfigChannel+0x742>
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800433c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800433e:	fa93 f3a3 	rbit	r3, r3
 8004342:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8004344:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004346:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8004348:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800434a:	2b00      	cmp	r3, #0
 800434c:	d101      	bne.n	8004352 <HAL_ADCEx_InjectedConfigChannel+0x72e>
    return 32U;
 800434e:	2320      	movs	r3, #32
 8004350:	e003      	b.n	800435a <HAL_ADCEx_InjectedConfigChannel+0x736>
  return __builtin_clz(value);
 8004352:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004354:	fab3 f383 	clz	r3, r3
 8004358:	b2db      	uxtb	r3, r3
 800435a:	3301      	adds	r3, #1
 800435c:	f003 031f 	and.w	r3, r3, #31
 8004360:	2101      	movs	r1, #1
 8004362:	fa01 f303 	lsl.w	r3, r1, r3
 8004366:	ea42 0103 	orr.w	r1, r2, r3
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004372:	2b00      	cmp	r3, #0
 8004374:	d10a      	bne.n	800438c <HAL_ADCEx_InjectedConfigChannel+0x768>
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	0e9b      	lsrs	r3, r3, #26
 800437c:	3301      	adds	r3, #1
 800437e:	f003 021f 	and.w	r2, r3, #31
 8004382:	4613      	mov	r3, r2
 8004384:	005b      	lsls	r3, r3, #1
 8004386:	4413      	add	r3, r2
 8004388:	051b      	lsls	r3, r3, #20
 800438a:	e018      	b.n	80043be <HAL_ADCEx_InjectedConfigChannel+0x79a>
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004392:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004394:	fa93 f3a3 	rbit	r3, r3
 8004398:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800439a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800439c:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800439e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d101      	bne.n	80043a8 <HAL_ADCEx_InjectedConfigChannel+0x784>
    return 32U;
 80043a4:	2320      	movs	r3, #32
 80043a6:	e003      	b.n	80043b0 <HAL_ADCEx_InjectedConfigChannel+0x78c>
  return __builtin_clz(value);
 80043a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043aa:	fab3 f383 	clz	r3, r3
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	3301      	adds	r3, #1
 80043b2:	f003 021f 	and.w	r2, r3, #31
 80043b6:	4613      	mov	r3, r2
 80043b8:	005b      	lsls	r3, r3, #1
 80043ba:	4413      	add	r3, r2
 80043bc:	051b      	lsls	r3, r3, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80043be:	430b      	orrs	r3, r1
 80043c0:	e081      	b.n	80044c6 <HAL_ADCEx_InjectedConfigChannel+0x8a2>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d107      	bne.n	80043de <HAL_ADCEx_InjectedConfigChannel+0x7ba>
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	0e9b      	lsrs	r3, r3, #26
 80043d4:	3301      	adds	r3, #1
 80043d6:	069b      	lsls	r3, r3, #26
 80043d8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80043dc:	e015      	b.n	800440a <HAL_ADCEx_InjectedConfigChannel+0x7e6>
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043e6:	fa93 f3a3 	rbit	r3, r3
 80043ea:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80043ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80043f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d101      	bne.n	80043fa <HAL_ADCEx_InjectedConfigChannel+0x7d6>
    return 32U;
 80043f6:	2320      	movs	r3, #32
 80043f8:	e003      	b.n	8004402 <HAL_ADCEx_InjectedConfigChannel+0x7de>
  return __builtin_clz(value);
 80043fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043fc:	fab3 f383 	clz	r3, r3
 8004400:	b2db      	uxtb	r3, r3
 8004402:	3301      	adds	r3, #1
 8004404:	069b      	lsls	r3, r3, #26
 8004406:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004412:	2b00      	cmp	r3, #0
 8004414:	d109      	bne.n	800442a <HAL_ADCEx_InjectedConfigChannel+0x806>
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	0e9b      	lsrs	r3, r3, #26
 800441c:	3301      	adds	r3, #1
 800441e:	f003 031f 	and.w	r3, r3, #31
 8004422:	2101      	movs	r1, #1
 8004424:	fa01 f303 	lsl.w	r3, r1, r3
 8004428:	e017      	b.n	800445a <HAL_ADCEx_InjectedConfigChannel+0x836>
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	fa93 f3a3 	rbit	r3, r3
 8004436:	61bb      	str	r3, [r7, #24]
  return result;
 8004438:	69bb      	ldr	r3, [r7, #24]
 800443a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800443c:	6a3b      	ldr	r3, [r7, #32]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d101      	bne.n	8004446 <HAL_ADCEx_InjectedConfigChannel+0x822>
    return 32U;
 8004442:	2320      	movs	r3, #32
 8004444:	e003      	b.n	800444e <HAL_ADCEx_InjectedConfigChannel+0x82a>
  return __builtin_clz(value);
 8004446:	6a3b      	ldr	r3, [r7, #32]
 8004448:	fab3 f383 	clz	r3, r3
 800444c:	b2db      	uxtb	r3, r3
 800444e:	3301      	adds	r3, #1
 8004450:	f003 031f 	and.w	r3, r3, #31
 8004454:	2101      	movs	r1, #1
 8004456:	fa01 f303 	lsl.w	r3, r1, r3
 800445a:	ea42 0103 	orr.w	r1, r2, r3
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004466:	2b00      	cmp	r3, #0
 8004468:	d10d      	bne.n	8004486 <HAL_ADCEx_InjectedConfigChannel+0x862>
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	0e9b      	lsrs	r3, r3, #26
 8004470:	3301      	adds	r3, #1
 8004472:	f003 021f 	and.w	r2, r3, #31
 8004476:	4613      	mov	r3, r2
 8004478:	005b      	lsls	r3, r3, #1
 800447a:	4413      	add	r3, r2
 800447c:	3b1e      	subs	r3, #30
 800447e:	051b      	lsls	r3, r3, #20
 8004480:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004484:	e01e      	b.n	80044c4 <HAL_ADCEx_InjectedConfigChannel+0x8a0>
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	fa93 f3a3 	rbit	r3, r3
 8004492:	60fb      	str	r3, [r7, #12]
  return result;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d104      	bne.n	80044a8 <HAL_ADCEx_InjectedConfigChannel+0x884>
    return 32U;
 800449e:	2320      	movs	r3, #32
 80044a0:	e006      	b.n	80044b0 <HAL_ADCEx_InjectedConfigChannel+0x88c>
 80044a2:	bf00      	nop
 80044a4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	fab3 f383 	clz	r3, r3
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	3301      	adds	r3, #1
 80044b2:	f003 021f 	and.w	r2, r3, #31
 80044b6:	4613      	mov	r3, r2
 80044b8:	005b      	lsls	r3, r3, #1
 80044ba:	4413      	add	r3, r2
 80044bc:	3b1e      	subs	r3, #30
 80044be:	051b      	lsls	r3, r3, #20
 80044c0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80044c4:	430b      	orrs	r3, r1
                                                 (__LL_ADC_CHANNEL_TO_DECIMAL_NB(
                                                    (uint32_t)pConfigInjected->InjectedChannel)
                                                  + 1UL) & 0x1FUL)),
                                    pConfigInjected->InjectedSamplingTime);
 80044c6:	683a      	ldr	r2, [r7, #0]
 80044c8:	6892      	ldr	r2, [r2, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80044ca:	4619      	mov	r1, r3
 80044cc:	f7ff f8b2 	bl	8003634 <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfigInjected->InjectedChannel))
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	4b3a      	ldr	r3, [pc, #232]	@ (80045c0 <HAL_ADCEx_InjectedConfigChannel+0x99c>)
 80044d6:	4013      	ands	r3, r2
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d067      	beq.n	80045ac <HAL_ADCEx_InjectedConfigChannel+0x988>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80044dc:	4839      	ldr	r0, [pc, #228]	@ (80045c4 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 80044de:	f7fe ffef 	bl	80034c0 <LL_ADC_GetCommonPathInternalCh>
 80044e2:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a37      	ldr	r2, [pc, #220]	@ (80045c8 <HAL_ADCEx_InjectedConfigChannel+0x9a4>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d004      	beq.n	80044fa <HAL_ADCEx_InjectedConfigChannel+0x8d6>
         || (pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a35      	ldr	r2, [pc, #212]	@ (80045cc <HAL_ADCEx_InjectedConfigChannel+0x9a8>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d127      	bne.n	800454a <HAL_ADCEx_InjectedConfigChannel+0x926>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80044fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80044fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d121      	bne.n	800454a <HAL_ADCEx_InjectedConfigChannel+0x926>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800450e:	d14d      	bne.n	80045ac <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004510:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004514:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004518:	4619      	mov	r1, r3
 800451a:	482a      	ldr	r0, [pc, #168]	@ (80045c4 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 800451c:	f7fe ffbd 	bl	800349a <LL_ADC_SetCommonPathInternalCh>
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                           * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8004520:	4b2b      	ldr	r3, [pc, #172]	@ (80045d0 <HAL_ADCEx_InjectedConfigChannel+0x9ac>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	099b      	lsrs	r3, r3, #6
 8004526:	4a2b      	ldr	r2, [pc, #172]	@ (80045d4 <HAL_ADCEx_InjectedConfigChannel+0x9b0>)
 8004528:	fba2 2303 	umull	r2, r3, r2, r3
 800452c:	099a      	lsrs	r2, r3, #6
 800452e:	4613      	mov	r3, r2
 8004530:	005b      	lsls	r3, r3, #1
 8004532:	4413      	add	r3, r2
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	3318      	adds	r3, #24
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 8004538:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 800453a:	e002      	b.n	8004542 <HAL_ADCEx_InjectedConfigChannel+0x91e>
        {
          wait_loop_index--;
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	3b01      	subs	r3, #1
 8004540:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d1f9      	bne.n	800453c <HAL_ADCEx_InjectedConfigChannel+0x918>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004548:	e030      	b.n	80045ac <HAL_ADCEx_InjectedConfigChannel+0x988>
        }
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a22      	ldr	r2, [pc, #136]	@ (80045d8 <HAL_ADCEx_InjectedConfigChannel+0x9b4>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d113      	bne.n	800457c <HAL_ADCEx_InjectedConfigChannel+0x958>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004554:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004558:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800455c:	2b00      	cmp	r3, #0
 800455e:	d10d      	bne.n	800457c <HAL_ADCEx_InjectedConfigChannel+0x958>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a1d      	ldr	r2, [pc, #116]	@ (80045dc <HAL_ADCEx_InjectedConfigChannel+0x9b8>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d020      	beq.n	80045ac <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800456a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800456e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004572:	4619      	mov	r1, r3
 8004574:	4813      	ldr	r0, [pc, #76]	@ (80045c4 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8004576:	f7fe ff90 	bl	800349a <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800457a:	e017      	b.n	80045ac <HAL_ADCEx_InjectedConfigChannel+0x988>
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a17      	ldr	r2, [pc, #92]	@ (80045e0 <HAL_ADCEx_InjectedConfigChannel+0x9bc>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d112      	bne.n	80045ac <HAL_ADCEx_InjectedConfigChannel+0x988>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004586:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800458a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d10c      	bne.n	80045ac <HAL_ADCEx_InjectedConfigChannel+0x988>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a11      	ldr	r2, [pc, #68]	@ (80045dc <HAL_ADCEx_InjectedConfigChannel+0x9b8>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d007      	beq.n	80045ac <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800459c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80045a0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80045a4:	4619      	mov	r1, r3
 80045a6:	4807      	ldr	r0, [pc, #28]	@ (80045c4 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 80045a8:	f7fe ff77 	bl	800349a <LL_ADC_SetCommonPathInternalCh>
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80045b4:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	37d8      	adds	r7, #216	@ 0xd8
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	80080000 	.word	0x80080000
 80045c4:	50000300 	.word	0x50000300
 80045c8:	c3210000 	.word	0xc3210000
 80045cc:	90c00010 	.word	0x90c00010
 80045d0:	20000000 	.word	0x20000000
 80045d4:	053e2d63 	.word	0x053e2d63
 80045d8:	c7520000 	.word	0xc7520000
 80045dc:	50000100 	.word	0x50000100
 80045e0:	cb840000 	.word	0xcb840000

080045e4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80045e4:	b590      	push	{r4, r7, lr}
 80045e6:	b0a1      	sub	sp, #132	@ 0x84
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
 80045ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80045ee:	2300      	movs	r3, #0
 80045f0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d101      	bne.n	8004602 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80045fe:	2302      	movs	r3, #2
 8004600:	e08b      	b.n	800471a <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2201      	movs	r2, #1
 8004606:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800460a:	2300      	movs	r3, #0
 800460c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800460e:	2300      	movs	r3, #0
 8004610:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800461a:	d102      	bne.n	8004622 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800461c:	4b41      	ldr	r3, [pc, #260]	@ (8004724 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800461e:	60bb      	str	r3, [r7, #8]
 8004620:	e001      	b.n	8004626 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004622:	2300      	movs	r3, #0
 8004624:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d10b      	bne.n	8004644 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004630:	f043 0220 	orr.w	r2, r3, #32
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e06a      	b.n	800471a <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	4618      	mov	r0, r3
 8004648:	f7ff f892 	bl	8003770 <LL_ADC_REG_IsConversionOngoing>
 800464c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4618      	mov	r0, r3
 8004654:	f7ff f88c 	bl	8003770 <LL_ADC_REG_IsConversionOngoing>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d14c      	bne.n	80046f8 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800465e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004660:	2b00      	cmp	r3, #0
 8004662:	d149      	bne.n	80046f8 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004664:	4b30      	ldr	r3, [pc, #192]	@ (8004728 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8004666:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d028      	beq.n	80046c2 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004670:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	6859      	ldr	r1, [r3, #4]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004682:	035b      	lsls	r3, r3, #13
 8004684:	430b      	orrs	r3, r1
 8004686:	431a      	orrs	r2, r3
 8004688:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800468a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800468c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004690:	f7ff f82e 	bl	80036f0 <LL_ADC_IsEnabled>
 8004694:	4604      	mov	r4, r0
 8004696:	4823      	ldr	r0, [pc, #140]	@ (8004724 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004698:	f7ff f82a 	bl	80036f0 <LL_ADC_IsEnabled>
 800469c:	4603      	mov	r3, r0
 800469e:	4323      	orrs	r3, r4
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d133      	bne.n	800470c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80046a4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80046ac:	f023 030f 	bic.w	r3, r3, #15
 80046b0:	683a      	ldr	r2, [r7, #0]
 80046b2:	6811      	ldr	r1, [r2, #0]
 80046b4:	683a      	ldr	r2, [r7, #0]
 80046b6:	6892      	ldr	r2, [r2, #8]
 80046b8:	430a      	orrs	r2, r1
 80046ba:	431a      	orrs	r2, r3
 80046bc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80046be:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80046c0:	e024      	b.n	800470c <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80046c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80046ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80046cc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80046ce:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80046d2:	f7ff f80d 	bl	80036f0 <LL_ADC_IsEnabled>
 80046d6:	4604      	mov	r4, r0
 80046d8:	4812      	ldr	r0, [pc, #72]	@ (8004724 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80046da:	f7ff f809 	bl	80036f0 <LL_ADC_IsEnabled>
 80046de:	4603      	mov	r3, r0
 80046e0:	4323      	orrs	r3, r4
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d112      	bne.n	800470c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80046e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80046ee:	f023 030f 	bic.w	r3, r3, #15
 80046f2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80046f4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80046f6:	e009      	b.n	800470c <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046fc:	f043 0220 	orr.w	r2, r3, #32
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800470a:	e000      	b.n	800470e <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800470c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004716:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800471a:	4618      	mov	r0, r3
 800471c:	3784      	adds	r7, #132	@ 0x84
 800471e:	46bd      	mov	sp, r7
 8004720:	bd90      	pop	{r4, r7, pc}
 8004722:	bf00      	nop
 8004724:	50000100 	.word	0x50000100
 8004728:	50000300 	.word	0x50000300

0800472c <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8004734:	4b05      	ldr	r3, [pc, #20]	@ (800474c <LL_EXTI_EnableIT_0_31+0x20>)
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	4904      	ldr	r1, [pc, #16]	@ (800474c <LL_EXTI_EnableIT_0_31+0x20>)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4313      	orrs	r3, r2
 800473e:	600b      	str	r3, [r1, #0]
}
 8004740:	bf00      	nop
 8004742:	370c      	adds	r7, #12
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr
 800474c:	40010400 	.word	0x40010400

08004750 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8004750:	b480      	push	{r7}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8004758:	4b06      	ldr	r3, [pc, #24]	@ (8004774 <LL_EXTI_DisableIT_0_31+0x24>)
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	43db      	mvns	r3, r3
 8004760:	4904      	ldr	r1, [pc, #16]	@ (8004774 <LL_EXTI_DisableIT_0_31+0x24>)
 8004762:	4013      	ands	r3, r2
 8004764:	600b      	str	r3, [r1, #0]
}
 8004766:	bf00      	nop
 8004768:	370c      	adds	r7, #12
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr
 8004772:	bf00      	nop
 8004774:	40010400 	.word	0x40010400

08004778 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8004778:	b480      	push	{r7}
 800477a:	b083      	sub	sp, #12
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8004780:	4b05      	ldr	r3, [pc, #20]	@ (8004798 <LL_EXTI_EnableEvent_0_31+0x20>)
 8004782:	685a      	ldr	r2, [r3, #4]
 8004784:	4904      	ldr	r1, [pc, #16]	@ (8004798 <LL_EXTI_EnableEvent_0_31+0x20>)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	4313      	orrs	r3, r2
 800478a:	604b      	str	r3, [r1, #4]

}
 800478c:	bf00      	nop
 800478e:	370c      	adds	r7, #12
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr
 8004798:	40010400 	.word	0x40010400

0800479c <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 800479c:	b480      	push	{r7}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 80047a4:	4b06      	ldr	r3, [pc, #24]	@ (80047c0 <LL_EXTI_DisableEvent_0_31+0x24>)
 80047a6:	685a      	ldr	r2, [r3, #4]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	43db      	mvns	r3, r3
 80047ac:	4904      	ldr	r1, [pc, #16]	@ (80047c0 <LL_EXTI_DisableEvent_0_31+0x24>)
 80047ae:	4013      	ands	r3, r2
 80047b0:	604b      	str	r3, [r1, #4]
}
 80047b2:	bf00      	nop
 80047b4:	370c      	adds	r7, #12
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr
 80047be:	bf00      	nop
 80047c0:	40010400 	.word	0x40010400

080047c4 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80047cc:	4b05      	ldr	r3, [pc, #20]	@ (80047e4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80047ce:	689a      	ldr	r2, [r3, #8]
 80047d0:	4904      	ldr	r1, [pc, #16]	@ (80047e4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	608b      	str	r3, [r1, #8]

}
 80047d8:	bf00      	nop
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr
 80047e4:	40010400 	.word	0x40010400

080047e8 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b083      	sub	sp, #12
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80047f0:	4b06      	ldr	r3, [pc, #24]	@ (800480c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80047f2:	689a      	ldr	r2, [r3, #8]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	43db      	mvns	r3, r3
 80047f8:	4904      	ldr	r1, [pc, #16]	@ (800480c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80047fa:	4013      	ands	r3, r2
 80047fc:	608b      	str	r3, [r1, #8]

}
 80047fe:	bf00      	nop
 8004800:	370c      	adds	r7, #12
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr
 800480a:	bf00      	nop
 800480c:	40010400 	.word	0x40010400

08004810 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8004810:	b480      	push	{r7}
 8004812:	b083      	sub	sp, #12
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8004818:	4b05      	ldr	r3, [pc, #20]	@ (8004830 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800481a:	68da      	ldr	r2, [r3, #12]
 800481c:	4904      	ldr	r1, [pc, #16]	@ (8004830 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4313      	orrs	r3, r2
 8004822:	60cb      	str	r3, [r1, #12]
}
 8004824:	bf00      	nop
 8004826:	370c      	adds	r7, #12
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr
 8004830:	40010400 	.word	0x40010400

08004834 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8004834:	b480      	push	{r7}
 8004836:	b083      	sub	sp, #12
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800483c:	4b06      	ldr	r3, [pc, #24]	@ (8004858 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800483e:	68da      	ldr	r2, [r3, #12]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	43db      	mvns	r3, r3
 8004844:	4904      	ldr	r1, [pc, #16]	@ (8004858 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8004846:	4013      	ands	r3, r2
 8004848:	60cb      	str	r3, [r1, #12]
}
 800484a:	bf00      	nop
 800484c:	370c      	adds	r7, #12
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr
 8004856:	bf00      	nop
 8004858:	40010400 	.word	0x40010400

0800485c <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 800485c:	b480      	push	{r7}
 800485e:	b083      	sub	sp, #12
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8004864:	4b07      	ldr	r3, [pc, #28]	@ (8004884 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8004866:	695a      	ldr	r2, [r3, #20]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	4013      	ands	r3, r2
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	429a      	cmp	r2, r3
 8004870:	d101      	bne.n	8004876 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8004872:	2301      	movs	r3, #1
 8004874:	e000      	b.n	8004878 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8004876:	2300      	movs	r3, #0
}
 8004878:	4618      	mov	r0, r3
 800487a:	370c      	adds	r7, #12
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr
 8004884:	40010400 	.word	0x40010400

08004888 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8004888:	b480      	push	{r7}
 800488a:	b083      	sub	sp, #12
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8004890:	4a04      	ldr	r2, [pc, #16]	@ (80048a4 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6153      	str	r3, [r2, #20]
}
 8004896:	bf00      	nop
 8004898:	370c      	adds	r7, #12
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr
 80048a2:	bf00      	nop
 80048a4:	40010400 	.word	0x40010400

080048a8 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b088      	sub	sp, #32
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 80048b0:	2300      	movs	r3, #0
 80048b2:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80048b4:	2300      	movs	r3, #0
 80048b6:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d102      	bne.n	80048c4 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	77fb      	strb	r3, [r7, #31]
 80048c2:	e0bc      	b.n	8004a3e <HAL_COMP_Init+0x196>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80048ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80048d2:	d102      	bne.n	80048da <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	77fb      	strb	r3, [r7, #31]
 80048d8:	e0b1      	b.n	8004a3e <HAL_COMP_Init+0x196>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if (hcomp->State == HAL_COMP_STATE_RESET)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	7f5b      	ldrb	r3, [r3, #29]
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d108      	bne.n	80048f6 <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f7fc fa5d 	bl	8000db0 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004900:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.InputMinus
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	695b      	ldr	r3, [r3, #20]
 8004910:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	68db      	ldr	r3, [r3, #12]
 8004916:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (hcomp->Init.InputMinus
 800491c:	4313      	orrs	r3, r2
 800491e:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	4b48      	ldr	r3, [pc, #288]	@ (8004a48 <HAL_COMP_Init+0x1a0>)
 8004928:	4013      	ands	r3, r2
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	6812      	ldr	r2, [r2, #0]
 800492e:	6979      	ldr	r1, [r7, #20]
 8004930:	430b      	orrs	r3, r1
 8004932:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d016      	beq.n	8004970 <HAL_COMP_Init+0xc8>
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d113      	bne.n	8004970 <HAL_COMP_Init+0xc8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004948:	4b40      	ldr	r3, [pc, #256]	@ (8004a4c <HAL_COMP_Init+0x1a4>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	099b      	lsrs	r3, r3, #6
 800494e:	4a40      	ldr	r2, [pc, #256]	@ (8004a50 <HAL_COMP_Init+0x1a8>)
 8004950:	fba2 2303 	umull	r2, r3, r2, r3
 8004954:	099b      	lsrs	r3, r3, #6
 8004956:	1c5a      	adds	r2, r3, #1
 8004958:	4613      	mov	r3, r2
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	4413      	add	r3, r2
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 8004962:	e002      	b.n	800496a <HAL_COMP_Init+0xc2>
      {
        wait_loop_index--;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	3b01      	subs	r3, #1
 8004968:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d1f9      	bne.n	8004964 <HAL_COMP_Init+0xbc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a37      	ldr	r2, [pc, #220]	@ (8004a54 <HAL_COMP_Init+0x1ac>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d012      	beq.n	80049a0 <HAL_COMP_Init+0xf8>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a36      	ldr	r2, [pc, #216]	@ (8004a58 <HAL_COMP_Init+0x1b0>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d00a      	beq.n	800499a <HAL_COMP_Init+0xf2>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a34      	ldr	r2, [pc, #208]	@ (8004a5c <HAL_COMP_Init+0x1b4>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d102      	bne.n	8004994 <HAL_COMP_Init+0xec>
 800498e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8004992:	e007      	b.n	80049a4 <HAL_COMP_Init+0xfc>
 8004994:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004998:	e004      	b.n	80049a4 <HAL_COMP_Init+0xfc>
 800499a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800499e:	e001      	b.n	80049a4 <HAL_COMP_Init+0xfc>
 80049a0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80049a4:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	699b      	ldr	r3, [r3, #24]
 80049aa:	f003 0303 	and.w	r3, r3, #3
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d037      	beq.n	8004a22 <HAL_COMP_Init+0x17a>
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	699b      	ldr	r3, [r3, #24]
 80049b6:	f003 0310 	and.w	r3, r3, #16
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d003      	beq.n	80049c6 <HAL_COMP_Init+0x11e>
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 80049be:	6938      	ldr	r0, [r7, #16]
 80049c0:	f7ff ff00 	bl	80047c4 <LL_EXTI_EnableRisingTrig_0_31>
 80049c4:	e002      	b.n	80049cc <HAL_COMP_Init+0x124>
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 80049c6:	6938      	ldr	r0, [r7, #16]
 80049c8:	f7ff ff0e 	bl	80047e8 <LL_EXTI_DisableRisingTrig_0_31>
#endif /* COMP7 */
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	699b      	ldr	r3, [r3, #24]
 80049d0:	f003 0320 	and.w	r3, r3, #32
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d003      	beq.n	80049e0 <HAL_COMP_Init+0x138>
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 80049d8:	6938      	ldr	r0, [r7, #16]
 80049da:	f7ff ff19 	bl	8004810 <LL_EXTI_EnableFallingTrig_0_31>
 80049de:	e002      	b.n	80049e6 <HAL_COMP_Init+0x13e>
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 80049e0:	6938      	ldr	r0, [r7, #16]
 80049e2:	f7ff ff27 	bl	8004834 <LL_EXTI_DisableFallingTrig_0_31>
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
      }
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
 80049e6:	6938      	ldr	r0, [r7, #16]
 80049e8:	f7ff ff4e 	bl	8004888 <LL_EXTI_ClearFlag_0_31>
#endif /* COMP7 */

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	699b      	ldr	r3, [r3, #24]
 80049f0:	f003 0302 	and.w	r3, r3, #2
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d003      	beq.n	8004a00 <HAL_COMP_Init+0x158>
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
        }
#else
        LL_EXTI_EnableEvent_0_31(exti_line);
 80049f8:	6938      	ldr	r0, [r7, #16]
 80049fa:	f7ff febd 	bl	8004778 <LL_EXTI_EnableEvent_0_31>
 80049fe:	e002      	b.n	8004a06 <HAL_COMP_Init+0x15e>
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
        }
#else
        LL_EXTI_DisableEvent_0_31(exti_line);
 8004a00:	6938      	ldr	r0, [r7, #16]
 8004a02:	f7ff fecb 	bl	800479c <LL_EXTI_DisableEvent_0_31>
#endif /* COMP7 */
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	699b      	ldr	r3, [r3, #24]
 8004a0a:	f003 0301 	and.w	r3, r3, #1
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d003      	beq.n	8004a1a <HAL_COMP_Init+0x172>
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
        }
#else
        LL_EXTI_EnableIT_0_31(exti_line);
 8004a12:	6938      	ldr	r0, [r7, #16]
 8004a14:	f7ff fe8a 	bl	800472c <LL_EXTI_EnableIT_0_31>
 8004a18:	e009      	b.n	8004a2e <HAL_COMP_Init+0x186>
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
        }
#else
        LL_EXTI_DisableIT_0_31(exti_line);
 8004a1a:	6938      	ldr	r0, [r7, #16]
 8004a1c:	f7ff fe98 	bl	8004750 <LL_EXTI_DisableIT_0_31>
 8004a20:	e005      	b.n	8004a2e <HAL_COMP_Init+0x186>
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
      }
#else
      LL_EXTI_DisableEvent_0_31(exti_line);
 8004a22:	6938      	ldr	r0, [r7, #16]
 8004a24:	f7ff feba 	bl	800479c <LL_EXTI_DisableEvent_0_31>
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
      }
#else
      LL_EXTI_DisableIT_0_31(exti_line);
 8004a28:	6938      	ldr	r0, [r7, #16]
 8004a2a:	f7ff fe91 	bl	8004750 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	7f5b      	ldrb	r3, [r3, #29]
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d102      	bne.n	8004a3e <HAL_COMP_Init+0x196>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 8004a3e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3720      	adds	r7, #32
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}
 8004a48:	ff007e0f 	.word	0xff007e0f
 8004a4c:	20000000 	.word	0x20000000
 8004a50:	053e2d63 	.word	0x053e2d63
 8004a54:	40010200 	.word	0x40010200
 8004a58:	40010204 	.word	0x40010204
 8004a5c:	40010208 	.word	0x40010208

08004a60 <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b085      	sub	sp, #20
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	73fb      	strb	r3, [r7, #15]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d102      	bne.n	8004a7c <HAL_COMP_Start+0x1c>
  {
    status = HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	73fb      	strb	r3, [r7, #15]
 8004a7a:	e02e      	b.n	8004ada <HAL_COMP_Start+0x7a>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004a86:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004a8a:	d102      	bne.n	8004a92 <HAL_COMP_Start+0x32>
  {
    status = HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	73fb      	strb	r3, [r7, #15]
 8004a90:	e023      	b.n	8004ada <HAL_COMP_Start+0x7a>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if (hcomp->State == HAL_COMP_STATE_READY)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	7f5b      	ldrb	r3, [r3, #29]
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d11c      	bne.n	8004ad6 <HAL_COMP_Start+0x76>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f042 0201 	orr.w	r2, r2, #1
 8004aaa:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2202      	movs	r2, #2
 8004ab0:	775a      	strb	r2, [r3, #29]
      /* Note: Variable divided by 2 to compensate partially                  */
      /*       CPU processing cycles.                                         */
      /* Note: In case of system low frequency (below 1Mhz), short delay      */
      /*       of startup time (few us) is within CPU processing cycles       */
      /*       of following instructions.                                     */
      wait_loop_index = (COMP_DELAY_STARTUP_US * (SystemCoreClock / (1000000UL * 2UL)));
 8004ab2:	4b0d      	ldr	r3, [pc, #52]	@ (8004ae8 <HAL_COMP_Start+0x88>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a0d      	ldr	r2, [pc, #52]	@ (8004aec <HAL_COMP_Start+0x8c>)
 8004ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8004abc:	0cda      	lsrs	r2, r3, #19
 8004abe:	4613      	mov	r3, r2
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	4413      	add	r3, r2
 8004ac4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004ac6:	e002      	b.n	8004ace <HAL_COMP_Start+0x6e>
      {
        wait_loop_index--;
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	3b01      	subs	r3, #1
 8004acc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d1f9      	bne.n	8004ac8 <HAL_COMP_Start+0x68>
 8004ad4:	e001      	b.n	8004ada <HAL_COMP_Start+0x7a>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004ada:	7bfb      	ldrb	r3, [r7, #15]
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3714      	adds	r7, #20
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr
 8004ae8:	20000000 	.word	0x20000000
 8004aec:	431bde83 	.word	0x431bde83

08004af0 <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ handler.
  * @param  hcomp  COMP handle
  * @retval None
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b084      	sub	sp, #16
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a17      	ldr	r2, [pc, #92]	@ (8004b5c <HAL_COMP_IRQHandler+0x6c>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d012      	beq.n	8004b28 <HAL_COMP_IRQHandler+0x38>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a16      	ldr	r2, [pc, #88]	@ (8004b60 <HAL_COMP_IRQHandler+0x70>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d00a      	beq.n	8004b22 <HAL_COMP_IRQHandler+0x32>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a14      	ldr	r2, [pc, #80]	@ (8004b64 <HAL_COMP_IRQHandler+0x74>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d102      	bne.n	8004b1c <HAL_COMP_IRQHandler+0x2c>
 8004b16:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8004b1a:	e007      	b.n	8004b2c <HAL_COMP_IRQHandler+0x3c>
 8004b1c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004b20:	e004      	b.n	8004b2c <HAL_COMP_IRQHandler+0x3c>
 8004b22:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004b26:	e001      	b.n	8004b2c <HAL_COMP_IRQHandler+0x3c>
 8004b28:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004b2c:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_comp_exti_flag_set = 0UL;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	60fb      	str	r3, [r7, #12]
    {
      tmp_comp_exti_flag_set = 1UL;
    }
  }
#else
  if (LL_EXTI_IsActiveFlag_0_31(exti_line) != 0UL)
 8004b32:	68b8      	ldr	r0, [r7, #8]
 8004b34:	f7ff fe92 	bl	800485c <LL_EXTI_IsActiveFlag_0_31>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d001      	beq.n	8004b42 <HAL_COMP_IRQHandler+0x52>
  {
    tmp_comp_exti_flag_set = 1UL;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	60fb      	str	r3, [r7, #12]
  }
#endif /* COMP7 */

  if (tmp_comp_exti_flag_set != 0UL)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d005      	beq.n	8004b54 <HAL_COMP_IRQHandler+0x64>
    else
    {
      LL_EXTI_ClearFlag_0_31(exti_line);
    }
#else
    LL_EXTI_ClearFlag_0_31(exti_line);
 8004b48:	68b8      	ldr	r0, [r7, #8]
 8004b4a:	f7ff fe9d 	bl	8004888 <LL_EXTI_ClearFlag_0_31>

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f000 f80a 	bl	8004b68 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }
}
 8004b54:	bf00      	nop
 8004b56:	3710      	adds	r7, #16
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}
 8004b5c:	40010200 	.word	0x40010200
 8004b60:	40010204 	.word	0x40010204
 8004b64:	40010208 	.word	0x40010208

08004b68 <HAL_COMP_TriggerCallback>:
  * @brief  Comparator trigger callback.
  * @param  hcomp  COMP handle
  * @retval None
  */
__weak void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  UNUSED(hcomp);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_COMP_TriggerCallback should be implemented in the user file
   */
}
 8004b70:	bf00      	nop
 8004b72:	370c      	adds	r7, #12
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr

08004b7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b085      	sub	sp, #20
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f003 0307 	and.w	r3, r3, #7
 8004b8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b8c:	4b0c      	ldr	r3, [pc, #48]	@ (8004bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b92:	68ba      	ldr	r2, [r7, #8]
 8004b94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004b98:	4013      	ands	r3, r2
 8004b9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004ba4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004ba8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004bac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004bae:	4a04      	ldr	r2, [pc, #16]	@ (8004bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	60d3      	str	r3, [r2, #12]
}
 8004bb4:	bf00      	nop
 8004bb6:	3714      	adds	r7, #20
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr
 8004bc0:	e000ed00 	.word	0xe000ed00

08004bc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004bc8:	4b04      	ldr	r3, [pc, #16]	@ (8004bdc <__NVIC_GetPriorityGrouping+0x18>)
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	0a1b      	lsrs	r3, r3, #8
 8004bce:	f003 0307 	and.w	r3, r3, #7
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr
 8004bdc:	e000ed00 	.word	0xe000ed00

08004be0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b083      	sub	sp, #12
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	4603      	mov	r3, r0
 8004be8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	db0b      	blt.n	8004c0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004bf2:	79fb      	ldrb	r3, [r7, #7]
 8004bf4:	f003 021f 	and.w	r2, r3, #31
 8004bf8:	4907      	ldr	r1, [pc, #28]	@ (8004c18 <__NVIC_EnableIRQ+0x38>)
 8004bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bfe:	095b      	lsrs	r3, r3, #5
 8004c00:	2001      	movs	r0, #1
 8004c02:	fa00 f202 	lsl.w	r2, r0, r2
 8004c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004c0a:	bf00      	nop
 8004c0c:	370c      	adds	r7, #12
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr
 8004c16:	bf00      	nop
 8004c18:	e000e100 	.word	0xe000e100

08004c1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b083      	sub	sp, #12
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	4603      	mov	r3, r0
 8004c24:	6039      	str	r1, [r7, #0]
 8004c26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	db0a      	blt.n	8004c46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	b2da      	uxtb	r2, r3
 8004c34:	490c      	ldr	r1, [pc, #48]	@ (8004c68 <__NVIC_SetPriority+0x4c>)
 8004c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c3a:	0112      	lsls	r2, r2, #4
 8004c3c:	b2d2      	uxtb	r2, r2
 8004c3e:	440b      	add	r3, r1
 8004c40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c44:	e00a      	b.n	8004c5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	b2da      	uxtb	r2, r3
 8004c4a:	4908      	ldr	r1, [pc, #32]	@ (8004c6c <__NVIC_SetPriority+0x50>)
 8004c4c:	79fb      	ldrb	r3, [r7, #7]
 8004c4e:	f003 030f 	and.w	r3, r3, #15
 8004c52:	3b04      	subs	r3, #4
 8004c54:	0112      	lsls	r2, r2, #4
 8004c56:	b2d2      	uxtb	r2, r2
 8004c58:	440b      	add	r3, r1
 8004c5a:	761a      	strb	r2, [r3, #24]
}
 8004c5c:	bf00      	nop
 8004c5e:	370c      	adds	r7, #12
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr
 8004c68:	e000e100 	.word	0xe000e100
 8004c6c:	e000ed00 	.word	0xe000ed00

08004c70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b089      	sub	sp, #36	@ 0x24
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	60b9      	str	r1, [r7, #8]
 8004c7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f003 0307 	and.w	r3, r3, #7
 8004c82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c84:	69fb      	ldr	r3, [r7, #28]
 8004c86:	f1c3 0307 	rsb	r3, r3, #7
 8004c8a:	2b04      	cmp	r3, #4
 8004c8c:	bf28      	it	cs
 8004c8e:	2304      	movcs	r3, #4
 8004c90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c92:	69fb      	ldr	r3, [r7, #28]
 8004c94:	3304      	adds	r3, #4
 8004c96:	2b06      	cmp	r3, #6
 8004c98:	d902      	bls.n	8004ca0 <NVIC_EncodePriority+0x30>
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	3b03      	subs	r3, #3
 8004c9e:	e000      	b.n	8004ca2 <NVIC_EncodePriority+0x32>
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8004ca8:	69bb      	ldr	r3, [r7, #24]
 8004caa:	fa02 f303 	lsl.w	r3, r2, r3
 8004cae:	43da      	mvns	r2, r3
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	401a      	ands	r2, r3
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004cb8:	f04f 31ff 	mov.w	r1, #4294967295
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8004cc2:	43d9      	mvns	r1, r3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cc8:	4313      	orrs	r3, r2
         );
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3724      	adds	r7, #36	@ 0x24
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr
	...

08004cd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b082      	sub	sp, #8
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	3b01      	subs	r3, #1
 8004ce4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004ce8:	d301      	bcc.n	8004cee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004cea:	2301      	movs	r3, #1
 8004cec:	e00f      	b.n	8004d0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004cee:	4a0a      	ldr	r2, [pc, #40]	@ (8004d18 <SysTick_Config+0x40>)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	3b01      	subs	r3, #1
 8004cf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004cf6:	210f      	movs	r1, #15
 8004cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8004cfc:	f7ff ff8e 	bl	8004c1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004d00:	4b05      	ldr	r3, [pc, #20]	@ (8004d18 <SysTick_Config+0x40>)
 8004d02:	2200      	movs	r2, #0
 8004d04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004d06:	4b04      	ldr	r3, [pc, #16]	@ (8004d18 <SysTick_Config+0x40>)
 8004d08:	2207      	movs	r2, #7
 8004d0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004d0c:	2300      	movs	r3, #0
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3708      	adds	r7, #8
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	e000e010 	.word	0xe000e010

08004d1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b082      	sub	sp, #8
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f7ff ff29 	bl	8004b7c <__NVIC_SetPriorityGrouping>
}
 8004d2a:	bf00      	nop
 8004d2c:	3708      	adds	r7, #8
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}

08004d32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d32:	b580      	push	{r7, lr}
 8004d34:	b086      	sub	sp, #24
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	4603      	mov	r3, r0
 8004d3a:	60b9      	str	r1, [r7, #8]
 8004d3c:	607a      	str	r2, [r7, #4]
 8004d3e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004d40:	f7ff ff40 	bl	8004bc4 <__NVIC_GetPriorityGrouping>
 8004d44:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	68b9      	ldr	r1, [r7, #8]
 8004d4a:	6978      	ldr	r0, [r7, #20]
 8004d4c:	f7ff ff90 	bl	8004c70 <NVIC_EncodePriority>
 8004d50:	4602      	mov	r2, r0
 8004d52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d56:	4611      	mov	r1, r2
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f7ff ff5f 	bl	8004c1c <__NVIC_SetPriority>
}
 8004d5e:	bf00      	nop
 8004d60:	3718      	adds	r7, #24
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}

08004d66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d66:	b580      	push	{r7, lr}
 8004d68:	b082      	sub	sp, #8
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d74:	4618      	mov	r0, r3
 8004d76:	f7ff ff33 	bl	8004be0 <__NVIC_EnableIRQ>
}
 8004d7a:	bf00      	nop
 8004d7c:	3708      	adds	r7, #8
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}

08004d82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d82:	b580      	push	{r7, lr}
 8004d84:	b082      	sub	sp, #8
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f7ff ffa4 	bl	8004cd8 <SysTick_Config>
 8004d90:	4603      	mov	r3, r0
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3708      	adds	r7, #8
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}

08004d9a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004d9a:	b580      	push	{r7, lr}
 8004d9c:	b082      	sub	sp, #8
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d101      	bne.n	8004dac <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e014      	b.n	8004dd6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	791b      	ldrb	r3, [r3, #4]
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d105      	bne.n	8004dc2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f7fc f8a7 	bl	8000f10 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2202      	movs	r2, #2
 8004dc6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004dd4:	2300      	movs	r3, #0
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3708      	adds	r7, #8
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}
	...

08004de0 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b085      	sub	sp, #20
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d101      	bne.n	8004df4 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e056      	b.n	8004ea2 <HAL_DAC_Start+0xc2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	795b      	ldrb	r3, [r3, #5]
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d101      	bne.n	8004e00 <HAL_DAC_Start+0x20>
 8004dfc:	2302      	movs	r3, #2
 8004dfe:	e050      	b.n	8004ea2 <HAL_DAC_Start+0xc2>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2202      	movs	r2, #2
 8004e0a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	6819      	ldr	r1, [r3, #0]
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	f003 0310 	and.w	r3, r3, #16
 8004e18:	2201      	movs	r2, #1
 8004e1a:	409a      	lsls	r2, r3
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	430a      	orrs	r2, r1
 8004e22:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  /* Wait loop initialization and execution */
  /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed 32 */
  /*       bits register capacity and handle low frequency. */
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004e24:	4b22      	ldr	r3, [pc, #136]	@ (8004eb0 <HAL_DAC_Start+0xd0>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	099b      	lsrs	r3, r3, #6
 8004e2a:	4a22      	ldr	r2, [pc, #136]	@ (8004eb4 <HAL_DAC_Start+0xd4>)
 8004e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e30:	099b      	lsrs	r3, r3, #6
 8004e32:	3301      	adds	r3, #1
 8004e34:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 8004e36:	e002      	b.n	8004e3e <HAL_DAC_Start+0x5e>
  {
    wait_loop_index--;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d1f9      	bne.n	8004e38 <HAL_DAC_Start+0x58>
  }

  if (Channel == DAC_CHANNEL_1)
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d10f      	bne.n	8004e6a <HAL_DAC_Start+0x8a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8004e54:	2b02      	cmp	r3, #2
 8004e56:	d11d      	bne.n	8004e94 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	685a      	ldr	r2, [r3, #4]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f042 0201 	orr.w	r2, r2, #1
 8004e66:	605a      	str	r2, [r3, #4]
 8004e68:	e014      	b.n	8004e94 <HAL_DAC_Start+0xb4>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	f003 0310 	and.w	r3, r3, #16
 8004e7a:	2102      	movs	r1, #2
 8004e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d107      	bne.n	8004e94 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	685a      	ldr	r2, [r3, #4]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f042 0202 	orr.w	r2, r2, #2
 8004e92:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2201      	movs	r2, #1
 8004e98:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004ea0:	2300      	movs	r3, #0
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3714      	adds	r7, #20
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr
 8004eae:	bf00      	nop
 8004eb0:	20000000 	.word	0x20000000
 8004eb4:	053e2d63 	.word	0x053e2d63

08004eb8 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b087      	sub	sp, #28
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	60f8      	str	r0, [r7, #12]
 8004ec0:	60b9      	str	r1, [r7, #8]
 8004ec2:	607a      	str	r2, [r7, #4]
 8004ec4:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d101      	bne.n	8004ed4 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e018      	b.n	8004f06 <HAL_DAC_SetValue+0x4e>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d105      	bne.n	8004ef2 <HAL_DAC_SetValue+0x3a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8004ee6:	697a      	ldr	r2, [r7, #20]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	4413      	add	r3, r2
 8004eec:	3308      	adds	r3, #8
 8004eee:	617b      	str	r3, [r7, #20]
 8004ef0:	e004      	b.n	8004efc <HAL_DAC_SetValue+0x44>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8004ef2:	697a      	ldr	r2, [r7, #20]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	4413      	add	r3, r2
 8004ef8:	3314      	adds	r3, #20
 8004efa:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	461a      	mov	r2, r3
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8004f04:	2300      	movs	r3, #0
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	371c      	adds	r7, #28
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr
	...

08004f14 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b08a      	sub	sp, #40	@ 0x28
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	60b9      	str	r1, [r7, #8]
 8004f1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f20:	2300      	movs	r3, #0
 8004f22:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d002      	beq.n	8004f30 <HAL_DAC_ConfigChannel+0x1c>
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d101      	bne.n	8004f34 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	e19e      	b.n	8005272 <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	795b      	ldrb	r3, [r3, #5]
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d101      	bne.n	8004f40 <HAL_DAC_ConfigChannel+0x2c>
 8004f3c:	2302      	movs	r3, #2
 8004f3e:	e198      	b.n	8005272 <HAL_DAC_ConfigChannel+0x35e>
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2201      	movs	r2, #1
 8004f44:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2202      	movs	r2, #2
 8004f4a:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	2b04      	cmp	r3, #4
 8004f52:	d17a      	bne.n	800504a <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004f54:	f7fc ffb2 	bl	8001ebc <HAL_GetTick>
 8004f58:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d13d      	bne.n	8004fdc <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004f60:	e018      	b.n	8004f94 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004f62:	f7fc ffab 	bl	8001ebc <HAL_GetTick>
 8004f66:	4602      	mov	r2, r0
 8004f68:	69bb      	ldr	r3, [r7, #24]
 8004f6a:	1ad3      	subs	r3, r2, r3
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d911      	bls.n	8004f94 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f76:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d00a      	beq.n	8004f94 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	691b      	ldr	r3, [r3, #16]
 8004f82:	f043 0208 	orr.w	r2, r3, #8
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2203      	movs	r2, #3
 8004f8e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004f90:	2303      	movs	r3, #3
 8004f92:	e16e      	b.n	8005272 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f9a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d1df      	bne.n	8004f62 <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	68ba      	ldr	r2, [r7, #8]
 8004fa8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004faa:	641a      	str	r2, [r3, #64]	@ 0x40
 8004fac:	e020      	b.n	8004ff0 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004fae:	f7fc ff85 	bl	8001ebc <HAL_GetTick>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	69bb      	ldr	r3, [r7, #24]
 8004fb6:	1ad3      	subs	r3, r2, r3
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d90f      	bls.n	8004fdc <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	da0a      	bge.n	8004fdc <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	f043 0208 	orr.w	r2, r3, #8
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2203      	movs	r2, #3
 8004fd6:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004fd8:	2303      	movs	r3, #3
 8004fda:	e14a      	b.n	8005272 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	dbe3      	blt.n	8004fae <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	68ba      	ldr	r2, [r7, #8]
 8004fec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004fee:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f003 0310 	and.w	r3, r3, #16
 8004ffc:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8005000:	fa01 f303 	lsl.w	r3, r1, r3
 8005004:	43db      	mvns	r3, r3
 8005006:	ea02 0103 	and.w	r1, r2, r3
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f003 0310 	and.w	r3, r3, #16
 8005014:	409a      	lsls	r2, r3
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	430a      	orrs	r2, r1
 800501c:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f003 0310 	and.w	r3, r3, #16
 800502a:	21ff      	movs	r1, #255	@ 0xff
 800502c:	fa01 f303 	lsl.w	r3, r1, r3
 8005030:	43db      	mvns	r3, r3
 8005032:	ea02 0103 	and.w	r1, r2, r3
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f003 0310 	and.w	r3, r3, #16
 8005040:	409a      	lsls	r2, r3
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	430a      	orrs	r2, r1
 8005048:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	69db      	ldr	r3, [r3, #28]
 800504e:	2b01      	cmp	r3, #1
 8005050:	d11d      	bne.n	800508e <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005058:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f003 0310 	and.w	r3, r3, #16
 8005060:	221f      	movs	r2, #31
 8005062:	fa02 f303 	lsl.w	r3, r2, r3
 8005066:	43db      	mvns	r3, r3
 8005068:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800506a:	4013      	ands	r3, r2
 800506c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	6a1b      	ldr	r3, [r3, #32]
 8005072:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f003 0310 	and.w	r3, r3, #16
 800507a:	697a      	ldr	r2, [r7, #20]
 800507c:	fa02 f303 	lsl.w	r3, r2, r3
 8005080:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005082:	4313      	orrs	r3, r2
 8005084:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800508c:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005094:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f003 0310 	and.w	r3, r3, #16
 800509c:	2207      	movs	r2, #7
 800509e:	fa02 f303 	lsl.w	r3, r2, r3
 80050a2:	43db      	mvns	r3, r3
 80050a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050a6:	4013      	ands	r3, r2
 80050a8:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	699b      	ldr	r3, [r3, #24]
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d102      	bne.n	80050b8 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 80050b2:	2300      	movs	r3, #0
 80050b4:	623b      	str	r3, [r7, #32]
 80050b6:	e00f      	b.n	80050d8 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	699b      	ldr	r3, [r3, #24]
 80050bc:	2b02      	cmp	r3, #2
 80050be:	d102      	bne.n	80050c6 <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80050c0:	2301      	movs	r3, #1
 80050c2:	623b      	str	r3, [r7, #32]
 80050c4:	e008      	b.n	80050d8 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	695b      	ldr	r3, [r3, #20]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d102      	bne.n	80050d4 <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80050ce:	2301      	movs	r3, #1
 80050d0:	623b      	str	r3, [r7, #32]
 80050d2:	e001      	b.n	80050d8 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80050d4:	2300      	movs	r3, #0
 80050d6:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	689a      	ldr	r2, [r3, #8]
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	695b      	ldr	r3, [r3, #20]
 80050e0:	4313      	orrs	r3, r2
 80050e2:	6a3a      	ldr	r2, [r7, #32]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f003 0310 	and.w	r3, r3, #16
 80050ee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80050f2:	fa02 f303 	lsl.w	r3, r2, r3
 80050f6:	43db      	mvns	r3, r3
 80050f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050fa:	4013      	ands	r3, r2
 80050fc:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	791b      	ldrb	r3, [r3, #4]
 8005102:	2b01      	cmp	r3, #1
 8005104:	d102      	bne.n	800510c <HAL_DAC_ConfigChannel+0x1f8>
 8005106:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800510a:	e000      	b.n	800510e <HAL_DAC_ConfigChannel+0x1fa>
 800510c:	2300      	movs	r3, #0
 800510e:	697a      	ldr	r2, [r7, #20]
 8005110:	4313      	orrs	r3, r2
 8005112:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f003 0310 	and.w	r3, r3, #16
 800511a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800511e:	fa02 f303 	lsl.w	r3, r2, r3
 8005122:	43db      	mvns	r3, r3
 8005124:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005126:	4013      	ands	r3, r2
 8005128:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	795b      	ldrb	r3, [r3, #5]
 800512e:	2b01      	cmp	r3, #1
 8005130:	d102      	bne.n	8005138 <HAL_DAC_ConfigChannel+0x224>
 8005132:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005136:	e000      	b.n	800513a <HAL_DAC_ConfigChannel+0x226>
 8005138:	2300      	movs	r3, #0
 800513a:	697a      	ldr	r2, [r7, #20]
 800513c:	4313      	orrs	r3, r2
 800513e:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8005140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005142:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8005146:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	2b02      	cmp	r3, #2
 800514e:	d114      	bne.n	800517a <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8005150:	f002 f834 	bl	80071bc <HAL_RCC_GetHCLKFreq>
 8005154:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	4a48      	ldr	r2, [pc, #288]	@ (800527c <HAL_DAC_ConfigChannel+0x368>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d904      	bls.n	8005168 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800515e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005160:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005164:	627b      	str	r3, [r7, #36]	@ 0x24
 8005166:	e00f      	b.n	8005188 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	4a45      	ldr	r2, [pc, #276]	@ (8005280 <HAL_DAC_ConfigChannel+0x36c>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d90a      	bls.n	8005186 <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8005170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005172:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005176:	627b      	str	r3, [r7, #36]	@ 0x24
 8005178:	e006      	b.n	8005188 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005180:	4313      	orrs	r3, r2
 8005182:	627b      	str	r3, [r7, #36]	@ 0x24
 8005184:	e000      	b.n	8005188 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8005186:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f003 0310 	and.w	r3, r3, #16
 800518e:	697a      	ldr	r2, [r7, #20]
 8005190:	fa02 f303 	lsl.w	r3, r2, r3
 8005194:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005196:	4313      	orrs	r3, r2
 8005198:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051a0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	6819      	ldr	r1, [r3, #0]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f003 0310 	and.w	r3, r3, #16
 80051ae:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80051b2:	fa02 f303 	lsl.w	r3, r2, r3
 80051b6:	43da      	mvns	r2, r3
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	400a      	ands	r2, r1
 80051be:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f003 0310 	and.w	r3, r3, #16
 80051ce:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80051d2:	fa02 f303 	lsl.w	r3, r2, r3
 80051d6:	43db      	mvns	r3, r3
 80051d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051da:	4013      	ands	r3, r2
 80051dc:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	68db      	ldr	r3, [r3, #12]
 80051e2:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f003 0310 	and.w	r3, r3, #16
 80051ea:	697a      	ldr	r2, [r7, #20]
 80051ec:	fa02 f303 	lsl.w	r3, r2, r3
 80051f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051f2:	4313      	orrs	r3, r2
 80051f4:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051fc:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	6819      	ldr	r1, [r3, #0]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f003 0310 	and.w	r3, r3, #16
 800520a:	22c0      	movs	r2, #192	@ 0xc0
 800520c:	fa02 f303 	lsl.w	r3, r2, r3
 8005210:	43da      	mvns	r2, r3
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	400a      	ands	r2, r1
 8005218:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	68db      	ldr	r3, [r3, #12]
 800521e:	089b      	lsrs	r3, r3, #2
 8005220:	f003 030f 	and.w	r3, r3, #15
 8005224:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	691b      	ldr	r3, [r3, #16]
 800522a:	089b      	lsrs	r3, r3, #2
 800522c:	021b      	lsls	r3, r3, #8
 800522e:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005232:	697a      	ldr	r2, [r7, #20]
 8005234:	4313      	orrs	r3, r2
 8005236:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f003 0310 	and.w	r3, r3, #16
 8005244:	f640 710f 	movw	r1, #3855	@ 0xf0f
 8005248:	fa01 f303 	lsl.w	r3, r1, r3
 800524c:	43db      	mvns	r3, r3
 800524e:	ea02 0103 	and.w	r1, r2, r3
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f003 0310 	and.w	r3, r3, #16
 8005258:	697a      	ldr	r2, [r7, #20]
 800525a:	409a      	lsls	r2, r3
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	430a      	orrs	r2, r1
 8005262:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2201      	movs	r2, #1
 8005268:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2200      	movs	r2, #0
 800526e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8005270:	7ffb      	ldrb	r3, [r7, #31]
}
 8005272:	4618      	mov	r0, r3
 8005274:	3728      	adds	r7, #40	@ 0x28
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	09896800 	.word	0x09896800
 8005280:	04c4b400 	.word	0x04c4b400

08005284 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b084      	sub	sp, #16
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d101      	bne.n	8005296 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e08d      	b.n	80053b2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	461a      	mov	r2, r3
 800529c:	4b47      	ldr	r3, [pc, #284]	@ (80053bc <HAL_DMA_Init+0x138>)
 800529e:	429a      	cmp	r2, r3
 80052a0:	d80f      	bhi.n	80052c2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	461a      	mov	r2, r3
 80052a8:	4b45      	ldr	r3, [pc, #276]	@ (80053c0 <HAL_DMA_Init+0x13c>)
 80052aa:	4413      	add	r3, r2
 80052ac:	4a45      	ldr	r2, [pc, #276]	@ (80053c4 <HAL_DMA_Init+0x140>)
 80052ae:	fba2 2303 	umull	r2, r3, r2, r3
 80052b2:	091b      	lsrs	r3, r3, #4
 80052b4:	009a      	lsls	r2, r3, #2
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a42      	ldr	r2, [pc, #264]	@ (80053c8 <HAL_DMA_Init+0x144>)
 80052be:	641a      	str	r2, [r3, #64]	@ 0x40
 80052c0:	e00e      	b.n	80052e0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	461a      	mov	r2, r3
 80052c8:	4b40      	ldr	r3, [pc, #256]	@ (80053cc <HAL_DMA_Init+0x148>)
 80052ca:	4413      	add	r3, r2
 80052cc:	4a3d      	ldr	r2, [pc, #244]	@ (80053c4 <HAL_DMA_Init+0x140>)
 80052ce:	fba2 2303 	umull	r2, r3, r2, r3
 80052d2:	091b      	lsrs	r3, r3, #4
 80052d4:	009a      	lsls	r2, r3, #2
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	4a3c      	ldr	r2, [pc, #240]	@ (80053d0 <HAL_DMA_Init+0x14c>)
 80052de:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2202      	movs	r2, #2
 80052e4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80052f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052fa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005304:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	691b      	ldr	r3, [r3, #16]
 800530a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005310:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	699b      	ldr	r3, [r3, #24]
 8005316:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800531c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a1b      	ldr	r3, [r3, #32]
 8005322:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005324:	68fa      	ldr	r2, [r7, #12]
 8005326:	4313      	orrs	r3, r2
 8005328:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	68fa      	ldr	r2, [r7, #12]
 8005330:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 fa76 	bl	8005824 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005340:	d102      	bne.n	8005348 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	685a      	ldr	r2, [r3, #4]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005350:	b2d2      	uxtb	r2, r2
 8005352:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005358:	687a      	ldr	r2, [r7, #4]
 800535a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800535c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d010      	beq.n	8005388 <HAL_DMA_Init+0x104>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	2b04      	cmp	r3, #4
 800536c:	d80c      	bhi.n	8005388 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f000 fa96 	bl	80058a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005378:	2200      	movs	r2, #0
 800537a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005384:	605a      	str	r2, [r3, #4]
 8005386:	e008      	b.n	800539a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2200      	movs	r2, #0
 8005398:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80053b0:	2300      	movs	r3, #0
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3710      	adds	r7, #16
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}
 80053ba:	bf00      	nop
 80053bc:	40020407 	.word	0x40020407
 80053c0:	bffdfff8 	.word	0xbffdfff8
 80053c4:	cccccccd 	.word	0xcccccccd
 80053c8:	40020000 	.word	0x40020000
 80053cc:	bffdfbf8 	.word	0xbffdfbf8
 80053d0:	40020400 	.word	0x40020400

080053d4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b086      	sub	sp, #24
 80053d8:	af00      	add	r7, sp, #0
 80053da:	60f8      	str	r0, [r7, #12]
 80053dc:	60b9      	str	r1, [r7, #8]
 80053de:	607a      	str	r2, [r7, #4]
 80053e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053e2:	2300      	movs	r3, #0
 80053e4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d101      	bne.n	80053f4 <HAL_DMA_Start_IT+0x20>
 80053f0:	2302      	movs	r3, #2
 80053f2:	e066      	b.n	80054c2 <HAL_DMA_Start_IT+0xee>
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005402:	b2db      	uxtb	r3, r3
 8005404:	2b01      	cmp	r3, #1
 8005406:	d155      	bne.n	80054b4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2202      	movs	r2, #2
 800540c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2200      	movs	r2, #0
 8005414:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f022 0201 	bic.w	r2, r2, #1
 8005424:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	68b9      	ldr	r1, [r7, #8]
 800542c:	68f8      	ldr	r0, [r7, #12]
 800542e:	f000 f9bb 	bl	80057a8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005436:	2b00      	cmp	r3, #0
 8005438:	d008      	beq.n	800544c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f042 020e 	orr.w	r2, r2, #14
 8005448:	601a      	str	r2, [r3, #0]
 800544a:	e00f      	b.n	800546c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f022 0204 	bic.w	r2, r2, #4
 800545a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f042 020a 	orr.w	r2, r2, #10
 800546a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005476:	2b00      	cmp	r3, #0
 8005478:	d007      	beq.n	800548a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005484:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005488:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800548e:	2b00      	cmp	r3, #0
 8005490:	d007      	beq.n	80054a2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800549c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80054a0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f042 0201 	orr.w	r2, r2, #1
 80054b0:	601a      	str	r2, [r3, #0]
 80054b2:	e005      	b.n	80054c0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80054bc:	2302      	movs	r3, #2
 80054be:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80054c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3718      	adds	r7, #24
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}

080054ca <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80054ca:	b480      	push	{r7}
 80054cc:	b085      	sub	sp, #20
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054d2:	2300      	movs	r3, #0
 80054d4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	2b02      	cmp	r3, #2
 80054e0:	d005      	beq.n	80054ee <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2204      	movs	r2, #4
 80054e6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	73fb      	strb	r3, [r7, #15]
 80054ec:	e037      	b.n	800555e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f022 020e 	bic.w	r2, r2, #14
 80054fc:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005508:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800550c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f022 0201 	bic.w	r2, r2, #1
 800551c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005522:	f003 021f 	and.w	r2, r3, #31
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800552a:	2101      	movs	r1, #1
 800552c:	fa01 f202 	lsl.w	r2, r1, r2
 8005530:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005536:	687a      	ldr	r2, [r7, #4]
 8005538:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800553a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005540:	2b00      	cmp	r3, #0
 8005542:	d00c      	beq.n	800555e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800554e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005552:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800555c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2201      	movs	r2, #1
 8005562:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800556e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005570:	4618      	mov	r0, r3
 8005572:	3714      	adds	r7, #20
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr

0800557c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b084      	sub	sp, #16
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005584:	2300      	movs	r3, #0
 8005586:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800558e:	b2db      	uxtb	r3, r3
 8005590:	2b02      	cmp	r3, #2
 8005592:	d00d      	beq.n	80055b0 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2204      	movs	r2, #4
 8005598:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2201      	movs	r2, #1
 800559e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	73fb      	strb	r3, [r7, #15]
 80055ae:	e047      	b.n	8005640 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f022 020e 	bic.w	r2, r2, #14
 80055be:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f022 0201 	bic.w	r2, r2, #1
 80055ce:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055da:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80055de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055e4:	f003 021f 	and.w	r2, r3, #31
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ec:	2101      	movs	r1, #1
 80055ee:	fa01 f202 	lsl.w	r2, r1, r2
 80055f2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80055fc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005602:	2b00      	cmp	r3, #0
 8005604:	d00c      	beq.n	8005620 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005610:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005614:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800561a:	687a      	ldr	r2, [r7, #4]
 800561c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800561e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2200      	movs	r2, #0
 800562c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005634:	2b00      	cmp	r3, #0
 8005636:	d003      	beq.n	8005640 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	4798      	blx	r3
    }
  }
  return status;
 8005640:	7bfb      	ldrb	r3, [r7, #15]
}
 8005642:	4618      	mov	r0, r3
 8005644:	3710      	adds	r7, #16
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}

0800564a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800564a:	b580      	push	{r7, lr}
 800564c:	b084      	sub	sp, #16
 800564e:	af00      	add	r7, sp, #0
 8005650:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005666:	f003 031f 	and.w	r3, r3, #31
 800566a:	2204      	movs	r2, #4
 800566c:	409a      	lsls	r2, r3
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	4013      	ands	r3, r2
 8005672:	2b00      	cmp	r3, #0
 8005674:	d026      	beq.n	80056c4 <HAL_DMA_IRQHandler+0x7a>
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	f003 0304 	and.w	r3, r3, #4
 800567c:	2b00      	cmp	r3, #0
 800567e:	d021      	beq.n	80056c4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f003 0320 	and.w	r3, r3, #32
 800568a:	2b00      	cmp	r3, #0
 800568c:	d107      	bne.n	800569e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f022 0204 	bic.w	r2, r2, #4
 800569c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056a2:	f003 021f 	and.w	r2, r3, #31
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056aa:	2104      	movs	r1, #4
 80056ac:	fa01 f202 	lsl.w	r2, r1, r2
 80056b0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d071      	beq.n	800579e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80056c2:	e06c      	b.n	800579e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056c8:	f003 031f 	and.w	r3, r3, #31
 80056cc:	2202      	movs	r2, #2
 80056ce:	409a      	lsls	r2, r3
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	4013      	ands	r3, r2
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d02e      	beq.n	8005736 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	f003 0302 	and.w	r3, r3, #2
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d029      	beq.n	8005736 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f003 0320 	and.w	r3, r3, #32
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d10b      	bne.n	8005708 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f022 020a 	bic.w	r2, r2, #10
 80056fe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2201      	movs	r2, #1
 8005704:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800570c:	f003 021f 	and.w	r2, r3, #31
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005714:	2102      	movs	r1, #2
 8005716:	fa01 f202 	lsl.w	r2, r1, r2
 800571a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005728:	2b00      	cmp	r3, #0
 800572a:	d038      	beq.n	800579e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005734:	e033      	b.n	800579e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800573a:	f003 031f 	and.w	r3, r3, #31
 800573e:	2208      	movs	r2, #8
 8005740:	409a      	lsls	r2, r3
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	4013      	ands	r3, r2
 8005746:	2b00      	cmp	r3, #0
 8005748:	d02a      	beq.n	80057a0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	f003 0308 	and.w	r3, r3, #8
 8005750:	2b00      	cmp	r3, #0
 8005752:	d025      	beq.n	80057a0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f022 020e 	bic.w	r2, r2, #14
 8005762:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005768:	f003 021f 	and.w	r2, r3, #31
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005770:	2101      	movs	r1, #1
 8005772:	fa01 f202 	lsl.w	r2, r1, r2
 8005776:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2201      	movs	r2, #1
 8005782:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2200      	movs	r2, #0
 800578a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005792:	2b00      	cmp	r3, #0
 8005794:	d004      	beq.n	80057a0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800579e:	bf00      	nop
 80057a0:	bf00      	nop
}
 80057a2:	3710      	adds	r7, #16
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}

080057a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b085      	sub	sp, #20
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	60f8      	str	r0, [r7, #12]
 80057b0:	60b9      	str	r1, [r7, #8]
 80057b2:	607a      	str	r2, [r7, #4]
 80057b4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057ba:	68fa      	ldr	r2, [r7, #12]
 80057bc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80057be:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d004      	beq.n	80057d2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057cc:	68fa      	ldr	r2, [r7, #12]
 80057ce:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80057d0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057d6:	f003 021f 	and.w	r2, r3, #31
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057de:	2101      	movs	r1, #1
 80057e0:	fa01 f202 	lsl.w	r2, r1, r2
 80057e4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	683a      	ldr	r2, [r7, #0]
 80057ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	2b10      	cmp	r3, #16
 80057f4:	d108      	bne.n	8005808 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	687a      	ldr	r2, [r7, #4]
 80057fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	68ba      	ldr	r2, [r7, #8]
 8005804:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005806:	e007      	b.n	8005818 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	68ba      	ldr	r2, [r7, #8]
 800580e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	687a      	ldr	r2, [r7, #4]
 8005816:	60da      	str	r2, [r3, #12]
}
 8005818:	bf00      	nop
 800581a:	3714      	adds	r7, #20
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr

08005824 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005824:	b480      	push	{r7}
 8005826:	b087      	sub	sp, #28
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	461a      	mov	r2, r3
 8005832:	4b16      	ldr	r3, [pc, #88]	@ (800588c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005834:	429a      	cmp	r2, r3
 8005836:	d802      	bhi.n	800583e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005838:	4b15      	ldr	r3, [pc, #84]	@ (8005890 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800583a:	617b      	str	r3, [r7, #20]
 800583c:	e001      	b.n	8005842 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800583e:	4b15      	ldr	r3, [pc, #84]	@ (8005894 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005840:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	b2db      	uxtb	r3, r3
 800584c:	3b08      	subs	r3, #8
 800584e:	4a12      	ldr	r2, [pc, #72]	@ (8005898 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005850:	fba2 2303 	umull	r2, r3, r2, r3
 8005854:	091b      	lsrs	r3, r3, #4
 8005856:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800585c:	089b      	lsrs	r3, r3, #2
 800585e:	009a      	lsls	r2, r3, #2
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	4413      	add	r3, r2
 8005864:	461a      	mov	r2, r3
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4a0b      	ldr	r2, [pc, #44]	@ (800589c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800586e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f003 031f 	and.w	r3, r3, #31
 8005876:	2201      	movs	r2, #1
 8005878:	409a      	lsls	r2, r3
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800587e:	bf00      	nop
 8005880:	371c      	adds	r7, #28
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr
 800588a:	bf00      	nop
 800588c:	40020407 	.word	0x40020407
 8005890:	40020800 	.word	0x40020800
 8005894:	40020820 	.word	0x40020820
 8005898:	cccccccd 	.word	0xcccccccd
 800589c:	40020880 	.word	0x40020880

080058a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b085      	sub	sp, #20
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80058b0:	68fa      	ldr	r2, [r7, #12]
 80058b2:	4b0b      	ldr	r3, [pc, #44]	@ (80058e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80058b4:	4413      	add	r3, r2
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	461a      	mov	r2, r3
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	4a08      	ldr	r2, [pc, #32]	@ (80058e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80058c2:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	3b01      	subs	r3, #1
 80058c8:	f003 031f 	and.w	r3, r3, #31
 80058cc:	2201      	movs	r2, #1
 80058ce:	409a      	lsls	r2, r3
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80058d4:	bf00      	nop
 80058d6:	3714      	adds	r7, #20
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr
 80058e0:	1000823f 	.word	0x1000823f
 80058e4:	40020940 	.word	0x40020940

080058e8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b084      	sub	sp, #16
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d101      	bne.n	80058fa <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	e147      	b.n	8005b8a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005900:	b2db      	uxtb	r3, r3
 8005902:	2b00      	cmp	r3, #0
 8005904:	d106      	bne.n	8005914 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2200      	movs	r2, #0
 800590a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f7fb fbc0 	bl	8001094 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	699a      	ldr	r2, [r3, #24]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f022 0210 	bic.w	r2, r2, #16
 8005922:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005924:	f7fc faca 	bl	8001ebc <HAL_GetTick>
 8005928:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800592a:	e012      	b.n	8005952 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800592c:	f7fc fac6 	bl	8001ebc <HAL_GetTick>
 8005930:	4602      	mov	r2, r0
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	1ad3      	subs	r3, r2, r3
 8005936:	2b0a      	cmp	r3, #10
 8005938:	d90b      	bls.n	8005952 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800593e:	f043 0201 	orr.w	r2, r3, #1
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2203      	movs	r2, #3
 800594a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	e11b      	b.n	8005b8a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	699b      	ldr	r3, [r3, #24]
 8005958:	f003 0308 	and.w	r3, r3, #8
 800595c:	2b08      	cmp	r3, #8
 800595e:	d0e5      	beq.n	800592c <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	699a      	ldr	r2, [r3, #24]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f042 0201 	orr.w	r2, r2, #1
 800596e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005970:	f7fc faa4 	bl	8001ebc <HAL_GetTick>
 8005974:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005976:	e012      	b.n	800599e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005978:	f7fc faa0 	bl	8001ebc <HAL_GetTick>
 800597c:	4602      	mov	r2, r0
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	1ad3      	subs	r3, r2, r3
 8005982:	2b0a      	cmp	r3, #10
 8005984:	d90b      	bls.n	800599e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800598a:	f043 0201 	orr.w	r2, r3, #1
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2203      	movs	r2, #3
 8005996:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	e0f5      	b.n	8005b8a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	699b      	ldr	r3, [r3, #24]
 80059a4:	f003 0301 	and.w	r3, r3, #1
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d0e5      	beq.n	8005978 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	699a      	ldr	r2, [r3, #24]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f042 0202 	orr.w	r2, r2, #2
 80059ba:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a74      	ldr	r2, [pc, #464]	@ (8005b94 <HAL_FDCAN_Init+0x2ac>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d103      	bne.n	80059ce <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80059c6:	4a74      	ldr	r2, [pc, #464]	@ (8005b98 <HAL_FDCAN_Init+0x2b0>)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	7c1b      	ldrb	r3, [r3, #16]
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d108      	bne.n	80059e8 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	699a      	ldr	r2, [r3, #24]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80059e4:	619a      	str	r2, [r3, #24]
 80059e6:	e007      	b.n	80059f8 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	699a      	ldr	r2, [r3, #24]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80059f6:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	7c5b      	ldrb	r3, [r3, #17]
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d108      	bne.n	8005a12 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	699a      	ldr	r2, [r3, #24]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005a0e:	619a      	str	r2, [r3, #24]
 8005a10:	e007      	b.n	8005a22 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	699a      	ldr	r2, [r3, #24]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005a20:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	7c9b      	ldrb	r3, [r3, #18]
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d108      	bne.n	8005a3c <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	699a      	ldr	r2, [r3, #24]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005a38:	619a      	str	r2, [r3, #24]
 8005a3a:	e007      	b.n	8005a4c <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	699a      	ldr	r2, [r3, #24]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005a4a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	699b      	ldr	r3, [r3, #24]
 8005a52:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	689a      	ldr	r2, [r3, #8]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	430a      	orrs	r2, r1
 8005a60:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	699a      	ldr	r2, [r3, #24]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8005a70:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	691a      	ldr	r2, [r3, #16]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f022 0210 	bic.w	r2, r2, #16
 8005a80:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	68db      	ldr	r3, [r3, #12]
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d108      	bne.n	8005a9c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	699a      	ldr	r2, [r3, #24]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f042 0204 	orr.w	r2, r2, #4
 8005a98:	619a      	str	r2, [r3, #24]
 8005a9a:	e02c      	b.n	8005af6 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	68db      	ldr	r3, [r3, #12]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d028      	beq.n	8005af6 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	2b02      	cmp	r3, #2
 8005aaa:	d01c      	beq.n	8005ae6 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	699a      	ldr	r2, [r3, #24]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005aba:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	691a      	ldr	r2, [r3, #16]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f042 0210 	orr.w	r2, r2, #16
 8005aca:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	2b03      	cmp	r3, #3
 8005ad2:	d110      	bne.n	8005af6 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	699a      	ldr	r2, [r3, #24]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f042 0220 	orr.w	r2, r2, #32
 8005ae2:	619a      	str	r2, [r3, #24]
 8005ae4:	e007      	b.n	8005af6 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	699a      	ldr	r2, [r3, #24]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f042 0220 	orr.w	r2, r2, #32
 8005af4:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	699b      	ldr	r3, [r3, #24]
 8005afa:	3b01      	subs	r3, #1
 8005afc:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	69db      	ldr	r3, [r3, #28]
 8005b02:	3b01      	subs	r3, #1
 8005b04:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005b06:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6a1b      	ldr	r3, [r3, #32]
 8005b0c:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005b0e:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	695b      	ldr	r3, [r3, #20]
 8005b16:	3b01      	subs	r3, #1
 8005b18:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005b1e:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005b20:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b2a:	d115      	bne.n	8005b58 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b30:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b36:	3b01      	subs	r3, #1
 8005b38:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005b3a:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b40:	3b01      	subs	r3, #1
 8005b42:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005b44:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b4c:	3b01      	subs	r3, #1
 8005b4e:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005b54:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005b56:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	430a      	orrs	r2, r1
 8005b6a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f000 fab6 	bl	80060e0 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2200      	movs	r2, #0
 8005b78:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2201      	movs	r2, #1
 8005b84:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8005b88:	2300      	movs	r3, #0
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3710      	adds	r7, #16
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}
 8005b92:	bf00      	nop
 8005b94:	40006400 	.word	0x40006400
 8005b98:	40006500 	.word	0x40006500

08005b9c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b08b      	sub	sp, #44	@ 0x2c
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	60f8      	str	r0, [r7, #12]
 8005ba4:	60b9      	str	r1, [r7, #8]
 8005ba6:	607a      	str	r2, [r7, #4]
 8005ba8:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8005baa:	2300      	movs	r3, #0
 8005bac:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005bb4:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8005bb6:	7efb      	ldrb	r3, [r7, #27]
 8005bb8:	2b02      	cmp	r3, #2
 8005bba:	f040 80e8 	bne.w	8005d8e <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	2b40      	cmp	r3, #64	@ 0x40
 8005bc2:	d137      	bne.n	8005c34 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bcc:	f003 030f 	and.w	r3, r3, #15
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d107      	bne.n	8005be4 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bd8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8005be0:	2301      	movs	r3, #1
 8005be2:	e0db      	b.n	8005d9c <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bec:	0e1b      	lsrs	r3, r3, #24
 8005bee:	f003 0301 	and.w	r3, r3, #1
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d10a      	bne.n	8005c0c <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005bfe:	0a5b      	lsrs	r3, r3, #9
 8005c00:	f003 0301 	and.w	r3, r3, #1
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d101      	bne.n	8005c0c <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c14:	0a1b      	lsrs	r3, r3, #8
 8005c16:	f003 0303 	and.w	r3, r3, #3
 8005c1a:	69fa      	ldr	r2, [r7, #28]
 8005c1c:	4413      	add	r3, r2
 8005c1e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8005c24:	69fa      	ldr	r2, [r7, #28]
 8005c26:	4613      	mov	r3, r2
 8005c28:	00db      	lsls	r3, r3, #3
 8005c2a:	4413      	add	r3, r2
 8005c2c:	00db      	lsls	r3, r3, #3
 8005c2e:	440b      	add	r3, r1
 8005c30:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c32:	e036      	b.n	8005ca2 <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005c3c:	f003 030f 	and.w	r3, r3, #15
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d107      	bne.n	8005c54 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c48:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8005c50:	2301      	movs	r3, #1
 8005c52:	e0a3      	b.n	8005d9c <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005c5c:	0e1b      	lsrs	r3, r3, #24
 8005c5e:	f003 0301 	and.w	r3, r3, #1
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d10a      	bne.n	8005c7c <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c6e:	0a1b      	lsrs	r3, r3, #8
 8005c70:	f003 0301 	and.w	r3, r3, #1
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d101      	bne.n	8005c7c <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005c84:	0a1b      	lsrs	r3, r3, #8
 8005c86:	f003 0303 	and.w	r3, r3, #3
 8005c8a:	69fa      	ldr	r2, [r7, #28]
 8005c8c:	4413      	add	r3, r2
 8005c8e:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8005c94:	69fa      	ldr	r2, [r7, #28]
 8005c96:	4613      	mov	r3, r2
 8005c98:	00db      	lsls	r3, r3, #3
 8005c9a:	4413      	add	r3, r2
 8005c9c:	00db      	lsls	r3, r3, #3
 8005c9e:	440b      	add	r3, r1
 8005ca0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8005ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d107      	bne.n	8005cc6 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8005cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	0c9b      	lsrs	r3, r3, #18
 8005cbc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	601a      	str	r2, [r3, #0]
 8005cc4:	e005      	b.n	8005cd2 <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8005cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8005cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8005cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8005cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cec:	3304      	adds	r3, #4
 8005cee:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8005cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	b29a      	uxth	r2, r3
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8005cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	0c1b      	lsrs	r3, r3, #16
 8005d00:	f003 020f 	and.w	r2, r3, #15
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8005d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8005d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8005d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	0e1b      	lsrs	r3, r3, #24
 8005d26:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8005d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	0fda      	lsrs	r2, r3, #31
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8005d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d3a:	3304      	adds	r3, #4
 8005d3c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8005d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d40:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8005d42:	2300      	movs	r3, #0
 8005d44:	623b      	str	r3, [r7, #32]
 8005d46:	e00a      	b.n	8005d5e <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8005d48:	697a      	ldr	r2, [r7, #20]
 8005d4a:	6a3b      	ldr	r3, [r7, #32]
 8005d4c:	441a      	add	r2, r3
 8005d4e:	6839      	ldr	r1, [r7, #0]
 8005d50:	6a3b      	ldr	r3, [r7, #32]
 8005d52:	440b      	add	r3, r1
 8005d54:	7812      	ldrb	r2, [r2, #0]
 8005d56:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8005d58:	6a3b      	ldr	r3, [r7, #32]
 8005d5a:	3301      	adds	r3, #1
 8005d5c:	623b      	str	r3, [r7, #32]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	68db      	ldr	r3, [r3, #12]
 8005d62:	4a11      	ldr	r2, [pc, #68]	@ (8005da8 <HAL_FDCAN_GetRxMessage+0x20c>)
 8005d64:	5cd3      	ldrb	r3, [r2, r3]
 8005d66:	461a      	mov	r2, r3
 8005d68:	6a3b      	ldr	r3, [r7, #32]
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d3ec      	bcc.n	8005d48 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	2b40      	cmp	r3, #64	@ 0x40
 8005d72:	d105      	bne.n	8005d80 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	69fa      	ldr	r2, [r7, #28]
 8005d7a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8005d7e:	e004      	b.n	8005d8a <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	69fa      	ldr	r2, [r7, #28]
 8005d86:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	e006      	b.n	8005d9c <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d92:	f043 0208 	orr.w	r2, r3, #8
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
  }
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	372c      	adds	r7, #44	@ 0x2c
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr
 8005da8:	0800b334 	.word	0x0800b334

08005dac <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b08c      	sub	sp, #48	@ 0x30
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dba:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8005dbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dc6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005dc8:	4013      	ands	r3, r2
 8005dca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dd2:	f003 0307 	and.w	r3, r3, #7
 8005dd6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dde:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005de0:	4013      	ands	r3, r2
 8005de2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005dee:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005df6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005df8:	4013      	ands	r3, r2
 8005dfa:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e02:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8005e06:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e0e:	6a3a      	ldr	r2, [r7, #32]
 8005e10:	4013      	ands	r3, r2
 8005e12:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e1a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8005e1e:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e26:	69fa      	ldr	r2, [r7, #28]
 8005e28:	4013      	ands	r3, r2
 8005e2a:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e32:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e3a:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d00b      	beq.n	8005e5e <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8005e46:	69bb      	ldr	r3, [r7, #24]
 8005e48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d006      	beq.n	8005e5e <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	2240      	movs	r2, #64	@ 0x40
 8005e56:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f000 f921 	bl	80060a0 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d019      	beq.n	8005e9c <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8005e68:	69bb      	ldr	r3, [r7, #24]
 8005e6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d014      	beq.n	8005e9c <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005e7a:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005e84:	693a      	ldr	r2, [r7, #16]
 8005e86:	4013      	ands	r3, r2
 8005e88:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005e92:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8005e94:	6939      	ldr	r1, [r7, #16]
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f000 f8e3 	bl	8006062 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8005e9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d007      	beq.n	8005eb2 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ea8:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8005eaa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f000 f8a2 	bl	8005ff6 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8005eb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d007      	beq.n	8005ec8 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005ebe:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8005ec0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f000 f8a2 	bl	800600c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8005ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d007      	beq.n	8005ede <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ed4:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8005ed6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f000 f8a2 	bl	8006022 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d00c      	beq.n	8005f02 <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8005ee8:	69bb      	ldr	r3, [r7, #24]
 8005eea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d007      	beq.n	8005f02 <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005efa:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f000 f89b 	bl	8006038 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d018      	beq.n	8005f3e <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8005f0c:	69bb      	ldr	r3, [r7, #24]
 8005f0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d013      	beq.n	8005f3e <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8005f1e:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005f28:	68fa      	ldr	r2, [r7, #12]
 8005f2a:	4013      	ands	r3, r2
 8005f2c:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	2280      	movs	r2, #128	@ 0x80
 8005f34:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8005f36:	68f9      	ldr	r1, [r7, #12]
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f000 f887 	bl	800604c <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d00c      	beq.n	8005f62 <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8005f48:	69bb      	ldr	r3, [r7, #24]
 8005f4a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d007      	beq.n	8005f62 <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005f5a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f000 f88b 	bl	8006078 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d00c      	beq.n	8005f86 <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8005f6c:	69bb      	ldr	r3, [r7, #24]
 8005f6e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d007      	beq.n	8005f86 <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8005f7e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f000 f883 	bl	800608c <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d00f      	beq.n	8005fb0 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8005f90:	69bb      	ldr	r3, [r7, #24]
 8005f92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d00a      	beq.n	8005fb0 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005fa2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fa8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8005fb0:	69fb      	ldr	r3, [r7, #28]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d007      	beq.n	8005fc6 <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	69fa      	ldr	r2, [r7, #28]
 8005fbc:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8005fbe:	69f9      	ldr	r1, [r7, #28]
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f000 f881 	bl	80060c8 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8005fc6:	6a3b      	ldr	r3, [r7, #32]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d009      	beq.n	8005fe0 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	6a3a      	ldr	r2, [r7, #32]
 8005fd2:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005fd8:	6a3b      	ldr	r3, [r7, #32]
 8005fda:	431a      	orrs	r2, r3
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d002      	beq.n	8005fee <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f000 f863 	bl	80060b4 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8005fee:	bf00      	nop
 8005ff0:	3730      	adds	r7, #48	@ 0x30
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}

08005ff6 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8005ff6:	b480      	push	{r7}
 8005ff8:	b083      	sub	sp, #12
 8005ffa:	af00      	add	r7, sp, #0
 8005ffc:	6078      	str	r0, [r7, #4]
 8005ffe:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8006000:	bf00      	nop
 8006002:	370c      	adds	r7, #12
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr

0800600c <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 800600c:	b480      	push	{r7}
 800600e:	b083      	sub	sp, #12
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 8006016:	bf00      	nop
 8006018:	370c      	adds	r7, #12
 800601a:	46bd      	mov	sp, r7
 800601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006020:	4770      	bx	lr

08006022 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8006022:	b480      	push	{r7}
 8006024:	b083      	sub	sp, #12
 8006026:	af00      	add	r7, sp, #0
 8006028:	6078      	str	r0, [r7, #4]
 800602a:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800602c:	bf00      	nop
 800602e:	370c      	adds	r7, #12
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr

08006038 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006038:	b480      	push	{r7}
 800603a:	b083      	sub	sp, #12
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8006040:	bf00      	nop
 8006042:	370c      	adds	r7, #12
 8006044:	46bd      	mov	sp, r7
 8006046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604a:	4770      	bx	lr

0800604c <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800604c:	b480      	push	{r7}
 800604e:	b083      	sub	sp, #12
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8006056:	bf00      	nop
 8006058:	370c      	adds	r7, #12
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr

08006062 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8006062:	b480      	push	{r7}
 8006064:	b083      	sub	sp, #12
 8006066:	af00      	add	r7, sp, #0
 8006068:	6078      	str	r0, [r7, #4]
 800606a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800606c:	bf00      	nop
 800606e:	370c      	adds	r7, #12
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr

08006078 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006078:	b480      	push	{r7}
 800607a:	b083      	sub	sp, #12
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8006080:	bf00      	nop
 8006082:	370c      	adds	r7, #12
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr

0800608c <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800608c:	b480      	push	{r7}
 800608e:	b083      	sub	sp, #12
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8006094:	bf00      	nop
 8006096:	370c      	adds	r7, #12
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr

080060a0 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b083      	sub	sp, #12
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80060a8:	bf00      	nop
 80060aa:	370c      	adds	r7, #12
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr

080060b4 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b083      	sub	sp, #12
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80060bc:	bf00      	nop
 80060be:	370c      	adds	r7, #12
 80060c0:	46bd      	mov	sp, r7
 80060c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c6:	4770      	bx	lr

080060c8 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b083      	sub	sp, #12
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
 80060d0:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80060d2:	bf00      	nop
 80060d4:	370c      	adds	r7, #12
 80060d6:	46bd      	mov	sp, r7
 80060d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060dc:	4770      	bx	lr
	...

080060e0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b085      	sub	sp, #20
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80060e8:	4b27      	ldr	r3, [pc, #156]	@ (8006188 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 80060ea:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	68ba      	ldr	r2, [r7, #8]
 80060f0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80060fa:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006102:	041a      	lsls	r2, r3, #16
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	430a      	orrs	r2, r1
 800610a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006120:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006128:	061a      	lsls	r2, r3, #24
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	430a      	orrs	r2, r1
 8006130:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	60fb      	str	r3, [r7, #12]
 8006160:	e005      	b.n	800616e <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2200      	movs	r2, #0
 8006166:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	3304      	adds	r3, #4
 800616c:	60fb      	str	r3, [r7, #12]
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006174:	68fa      	ldr	r2, [r7, #12]
 8006176:	429a      	cmp	r2, r3
 8006178:	d3f3      	bcc.n	8006162 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 800617a:	bf00      	nop
 800617c:	bf00      	nop
 800617e:	3714      	adds	r7, #20
 8006180:	46bd      	mov	sp, r7
 8006182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006186:	4770      	bx	lr
 8006188:	4000a400 	.word	0x4000a400

0800618c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800618c:	b480      	push	{r7}
 800618e:	b087      	sub	sp, #28
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006196:	2300      	movs	r3, #0
 8006198:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800619a:	e15a      	b.n	8006452 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	2101      	movs	r1, #1
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	fa01 f303 	lsl.w	r3, r1, r3
 80061a8:	4013      	ands	r3, r2
 80061aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	f000 814c 	beq.w	800644c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	f003 0303 	and.w	r3, r3, #3
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d005      	beq.n	80061cc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80061c8:	2b02      	cmp	r3, #2
 80061ca:	d130      	bne.n	800622e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	005b      	lsls	r3, r3, #1
 80061d6:	2203      	movs	r2, #3
 80061d8:	fa02 f303 	lsl.w	r3, r2, r3
 80061dc:	43db      	mvns	r3, r3
 80061de:	693a      	ldr	r2, [r7, #16]
 80061e0:	4013      	ands	r3, r2
 80061e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	68da      	ldr	r2, [r3, #12]
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	005b      	lsls	r3, r3, #1
 80061ec:	fa02 f303 	lsl.w	r3, r2, r3
 80061f0:	693a      	ldr	r2, [r7, #16]
 80061f2:	4313      	orrs	r3, r2
 80061f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	693a      	ldr	r2, [r7, #16]
 80061fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006202:	2201      	movs	r2, #1
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	fa02 f303 	lsl.w	r3, r2, r3
 800620a:	43db      	mvns	r3, r3
 800620c:	693a      	ldr	r2, [r7, #16]
 800620e:	4013      	ands	r3, r2
 8006210:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	091b      	lsrs	r3, r3, #4
 8006218:	f003 0201 	and.w	r2, r3, #1
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	fa02 f303 	lsl.w	r3, r2, r3
 8006222:	693a      	ldr	r2, [r7, #16]
 8006224:	4313      	orrs	r3, r2
 8006226:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	693a      	ldr	r2, [r7, #16]
 800622c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	f003 0303 	and.w	r3, r3, #3
 8006236:	2b03      	cmp	r3, #3
 8006238:	d017      	beq.n	800626a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	68db      	ldr	r3, [r3, #12]
 800623e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	005b      	lsls	r3, r3, #1
 8006244:	2203      	movs	r2, #3
 8006246:	fa02 f303 	lsl.w	r3, r2, r3
 800624a:	43db      	mvns	r3, r3
 800624c:	693a      	ldr	r2, [r7, #16]
 800624e:	4013      	ands	r3, r2
 8006250:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	689a      	ldr	r2, [r3, #8]
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	005b      	lsls	r3, r3, #1
 800625a:	fa02 f303 	lsl.w	r3, r2, r3
 800625e:	693a      	ldr	r2, [r7, #16]
 8006260:	4313      	orrs	r3, r2
 8006262:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	693a      	ldr	r2, [r7, #16]
 8006268:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	f003 0303 	and.w	r3, r3, #3
 8006272:	2b02      	cmp	r3, #2
 8006274:	d123      	bne.n	80062be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	08da      	lsrs	r2, r3, #3
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	3208      	adds	r2, #8
 800627e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006282:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	f003 0307 	and.w	r3, r3, #7
 800628a:	009b      	lsls	r3, r3, #2
 800628c:	220f      	movs	r2, #15
 800628e:	fa02 f303 	lsl.w	r3, r2, r3
 8006292:	43db      	mvns	r3, r3
 8006294:	693a      	ldr	r2, [r7, #16]
 8006296:	4013      	ands	r3, r2
 8006298:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	691a      	ldr	r2, [r3, #16]
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	f003 0307 	and.w	r3, r3, #7
 80062a4:	009b      	lsls	r3, r3, #2
 80062a6:	fa02 f303 	lsl.w	r3, r2, r3
 80062aa:	693a      	ldr	r2, [r7, #16]
 80062ac:	4313      	orrs	r3, r2
 80062ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	08da      	lsrs	r2, r3, #3
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	3208      	adds	r2, #8
 80062b8:	6939      	ldr	r1, [r7, #16]
 80062ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	005b      	lsls	r3, r3, #1
 80062c8:	2203      	movs	r2, #3
 80062ca:	fa02 f303 	lsl.w	r3, r2, r3
 80062ce:	43db      	mvns	r3, r3
 80062d0:	693a      	ldr	r2, [r7, #16]
 80062d2:	4013      	ands	r3, r2
 80062d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	f003 0203 	and.w	r2, r3, #3
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	005b      	lsls	r3, r3, #1
 80062e2:	fa02 f303 	lsl.w	r3, r2, r3
 80062e6:	693a      	ldr	r2, [r7, #16]
 80062e8:	4313      	orrs	r3, r2
 80062ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	693a      	ldr	r2, [r7, #16]
 80062f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	f000 80a6 	beq.w	800644c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006300:	4b5b      	ldr	r3, [pc, #364]	@ (8006470 <HAL_GPIO_Init+0x2e4>)
 8006302:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006304:	4a5a      	ldr	r2, [pc, #360]	@ (8006470 <HAL_GPIO_Init+0x2e4>)
 8006306:	f043 0301 	orr.w	r3, r3, #1
 800630a:	6613      	str	r3, [r2, #96]	@ 0x60
 800630c:	4b58      	ldr	r3, [pc, #352]	@ (8006470 <HAL_GPIO_Init+0x2e4>)
 800630e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006310:	f003 0301 	and.w	r3, r3, #1
 8006314:	60bb      	str	r3, [r7, #8]
 8006316:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006318:	4a56      	ldr	r2, [pc, #344]	@ (8006474 <HAL_GPIO_Init+0x2e8>)
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	089b      	lsrs	r3, r3, #2
 800631e:	3302      	adds	r3, #2
 8006320:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006324:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	f003 0303 	and.w	r3, r3, #3
 800632c:	009b      	lsls	r3, r3, #2
 800632e:	220f      	movs	r2, #15
 8006330:	fa02 f303 	lsl.w	r3, r2, r3
 8006334:	43db      	mvns	r3, r3
 8006336:	693a      	ldr	r2, [r7, #16]
 8006338:	4013      	ands	r3, r2
 800633a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8006342:	d01f      	beq.n	8006384 <HAL_GPIO_Init+0x1f8>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	4a4c      	ldr	r2, [pc, #304]	@ (8006478 <HAL_GPIO_Init+0x2ec>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d019      	beq.n	8006380 <HAL_GPIO_Init+0x1f4>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	4a4b      	ldr	r2, [pc, #300]	@ (800647c <HAL_GPIO_Init+0x2f0>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d013      	beq.n	800637c <HAL_GPIO_Init+0x1f0>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	4a4a      	ldr	r2, [pc, #296]	@ (8006480 <HAL_GPIO_Init+0x2f4>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d00d      	beq.n	8006378 <HAL_GPIO_Init+0x1ec>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	4a49      	ldr	r2, [pc, #292]	@ (8006484 <HAL_GPIO_Init+0x2f8>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d007      	beq.n	8006374 <HAL_GPIO_Init+0x1e8>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	4a48      	ldr	r2, [pc, #288]	@ (8006488 <HAL_GPIO_Init+0x2fc>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d101      	bne.n	8006370 <HAL_GPIO_Init+0x1e4>
 800636c:	2305      	movs	r3, #5
 800636e:	e00a      	b.n	8006386 <HAL_GPIO_Init+0x1fa>
 8006370:	2306      	movs	r3, #6
 8006372:	e008      	b.n	8006386 <HAL_GPIO_Init+0x1fa>
 8006374:	2304      	movs	r3, #4
 8006376:	e006      	b.n	8006386 <HAL_GPIO_Init+0x1fa>
 8006378:	2303      	movs	r3, #3
 800637a:	e004      	b.n	8006386 <HAL_GPIO_Init+0x1fa>
 800637c:	2302      	movs	r3, #2
 800637e:	e002      	b.n	8006386 <HAL_GPIO_Init+0x1fa>
 8006380:	2301      	movs	r3, #1
 8006382:	e000      	b.n	8006386 <HAL_GPIO_Init+0x1fa>
 8006384:	2300      	movs	r3, #0
 8006386:	697a      	ldr	r2, [r7, #20]
 8006388:	f002 0203 	and.w	r2, r2, #3
 800638c:	0092      	lsls	r2, r2, #2
 800638e:	4093      	lsls	r3, r2
 8006390:	693a      	ldr	r2, [r7, #16]
 8006392:	4313      	orrs	r3, r2
 8006394:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006396:	4937      	ldr	r1, [pc, #220]	@ (8006474 <HAL_GPIO_Init+0x2e8>)
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	089b      	lsrs	r3, r3, #2
 800639c:	3302      	adds	r3, #2
 800639e:	693a      	ldr	r2, [r7, #16]
 80063a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80063a4:	4b39      	ldr	r3, [pc, #228]	@ (800648c <HAL_GPIO_Init+0x300>)
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	43db      	mvns	r3, r3
 80063ae:	693a      	ldr	r2, [r7, #16]
 80063b0:	4013      	ands	r3, r2
 80063b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d003      	beq.n	80063c8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80063c0:	693a      	ldr	r2, [r7, #16]
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	4313      	orrs	r3, r2
 80063c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80063c8:	4a30      	ldr	r2, [pc, #192]	@ (800648c <HAL_GPIO_Init+0x300>)
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80063ce:	4b2f      	ldr	r3, [pc, #188]	@ (800648c <HAL_GPIO_Init+0x300>)
 80063d0:	68db      	ldr	r3, [r3, #12]
 80063d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	43db      	mvns	r3, r3
 80063d8:	693a      	ldr	r2, [r7, #16]
 80063da:	4013      	ands	r3, r2
 80063dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d003      	beq.n	80063f2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80063ea:	693a      	ldr	r2, [r7, #16]
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	4313      	orrs	r3, r2
 80063f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80063f2:	4a26      	ldr	r2, [pc, #152]	@ (800648c <HAL_GPIO_Init+0x300>)
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80063f8:	4b24      	ldr	r3, [pc, #144]	@ (800648c <HAL_GPIO_Init+0x300>)
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	43db      	mvns	r3, r3
 8006402:	693a      	ldr	r2, [r7, #16]
 8006404:	4013      	ands	r3, r2
 8006406:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006410:	2b00      	cmp	r3, #0
 8006412:	d003      	beq.n	800641c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006414:	693a      	ldr	r2, [r7, #16]
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	4313      	orrs	r3, r2
 800641a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800641c:	4a1b      	ldr	r2, [pc, #108]	@ (800648c <HAL_GPIO_Init+0x300>)
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006422:	4b1a      	ldr	r3, [pc, #104]	@ (800648c <HAL_GPIO_Init+0x300>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	43db      	mvns	r3, r3
 800642c:	693a      	ldr	r2, [r7, #16]
 800642e:	4013      	ands	r3, r2
 8006430:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800643a:	2b00      	cmp	r3, #0
 800643c:	d003      	beq.n	8006446 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800643e:	693a      	ldr	r2, [r7, #16]
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	4313      	orrs	r3, r2
 8006444:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006446:	4a11      	ldr	r2, [pc, #68]	@ (800648c <HAL_GPIO_Init+0x300>)
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	3301      	adds	r3, #1
 8006450:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	fa22 f303 	lsr.w	r3, r2, r3
 800645c:	2b00      	cmp	r3, #0
 800645e:	f47f ae9d 	bne.w	800619c <HAL_GPIO_Init+0x10>
  }
}
 8006462:	bf00      	nop
 8006464:	bf00      	nop
 8006466:	371c      	adds	r7, #28
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr
 8006470:	40021000 	.word	0x40021000
 8006474:	40010000 	.word	0x40010000
 8006478:	48000400 	.word	0x48000400
 800647c:	48000800 	.word	0x48000800
 8006480:	48000c00 	.word	0x48000c00
 8006484:	48001000 	.word	0x48001000
 8006488:	48001400 	.word	0x48001400
 800648c:	40010400 	.word	0x40010400

08006490 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006490:	b480      	push	{r7}
 8006492:	b083      	sub	sp, #12
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	460b      	mov	r3, r1
 800649a:	807b      	strh	r3, [r7, #2]
 800649c:	4613      	mov	r3, r2
 800649e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80064a0:	787b      	ldrb	r3, [r7, #1]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d003      	beq.n	80064ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80064a6:	887a      	ldrh	r2, [r7, #2]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80064ac:	e002      	b.n	80064b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80064ae:	887a      	ldrh	r2, [r7, #2]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80064b4:	bf00      	nop
 80064b6:	370c      	adds	r7, #12
 80064b8:	46bd      	mov	sp, r7
 80064ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064be:	4770      	bx	lr

080064c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b082      	sub	sp, #8
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	4603      	mov	r3, r0
 80064c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80064ca:	4b08      	ldr	r3, [pc, #32]	@ (80064ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80064cc:	695a      	ldr	r2, [r3, #20]
 80064ce:	88fb      	ldrh	r3, [r7, #6]
 80064d0:	4013      	ands	r3, r2
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d006      	beq.n	80064e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80064d6:	4a05      	ldr	r2, [pc, #20]	@ (80064ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80064d8:	88fb      	ldrh	r3, [r7, #6]
 80064da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80064dc:	88fb      	ldrh	r3, [r7, #6]
 80064de:	4618      	mov	r0, r3
 80064e0:	f004 fc96 	bl	800ae10 <HAL_GPIO_EXTI_Callback>
  }
}
 80064e4:	bf00      	nop
 80064e6:	3708      	adds	r7, #8
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}
 80064ec:	40010400 	.word	0x40010400

080064f0 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b084      	sub	sp, #16
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80064f8:	2300      	movs	r3, #0
 80064fa:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d101      	bne.n	8006506 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	e0bb      	b.n	800667e <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800650c:	b2db      	uxtb	r3, r3
 800650e:	2b05      	cmp	r3, #5
 8006510:	d101      	bne.n	8006516 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	e0b3      	b.n	800667e <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800651c:	b2db      	uxtb	r3, r3
 800651e:	2b02      	cmp	r3, #2
 8006520:	d101      	bne.n	8006526 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8006522:	2301      	movs	r3, #1
 8006524:	e0ab      	b.n	800667e <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006526:	4b58      	ldr	r3, [pc, #352]	@ (8006688 <HAL_OPAMP_Init+0x198>)
 8006528:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800652a:	4a57      	ldr	r2, [pc, #348]	@ (8006688 <HAL_OPAMP_Init+0x198>)
 800652c:	f043 0301 	orr.w	r3, r3, #1
 8006530:	6613      	str	r3, [r2, #96]	@ 0x60
 8006532:	4b55      	ldr	r3, [pc, #340]	@ (8006688 <HAL_OPAMP_Init+0x198>)
 8006534:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006536:	f003 0301 	and.w	r3, r3, #1
 800653a:	60bb      	str	r3, [r7, #8]
 800653c:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8006544:	b2db      	uxtb	r3, r3
 8006546:	2b00      	cmp	r3, #0
 8006548:	d103      	bne.n	8006552 <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2200      	movs	r2, #0
 800654e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f7fa ffba 	bl	80014cc <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	689b      	ldr	r3, [r3, #8]
 800655c:	2b40      	cmp	r3, #64	@ 0x40
 800655e:	d003      	beq.n	8006568 <HAL_OPAMP_Init+0x78>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	2b60      	cmp	r3, #96	@ 0x60
 8006566:	d133      	bne.n	80065d0 <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f023 0110 	bic.w	r1, r3, #16
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	430a      	orrs	r2, r1
 800657c:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	4b41      	ldr	r3, [pc, #260]	@ (800668c <HAL_OPAMP_Init+0x19c>)
 8006586:	4013      	ands	r3, r2
 8006588:	687a      	ldr	r2, [r7, #4]
 800658a:	6851      	ldr	r1, [r2, #4]
 800658c:	687a      	ldr	r2, [r7, #4]
 800658e:	6892      	ldr	r2, [r2, #8]
 8006590:	4311      	orrs	r1, r2
 8006592:	687a      	ldr	r2, [r7, #4]
 8006594:	6912      	ldr	r2, [r2, #16]
 8006596:	430a      	orrs	r2, r1
 8006598:	6879      	ldr	r1, [r7, #4]
 800659a:	7d09      	ldrb	r1, [r1, #20]
 800659c:	2901      	cmp	r1, #1
 800659e:	d102      	bne.n	80065a6 <HAL_OPAMP_Init+0xb6>
 80065a0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80065a4:	e000      	b.n	80065a8 <HAL_OPAMP_Init+0xb8>
 80065a6:	2100      	movs	r1, #0
 80065a8:	4311      	orrs	r1, r2
 80065aa:	687a      	ldr	r2, [r7, #4]
 80065ac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80065ae:	4311      	orrs	r1, r2
 80065b0:	687a      	ldr	r2, [r7, #4]
 80065b2:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80065b4:	4311      	orrs	r1, r2
 80065b6:	687a      	ldr	r2, [r7, #4]
 80065b8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80065ba:	04d2      	lsls	r2, r2, #19
 80065bc:	4311      	orrs	r1, r2
 80065be:	687a      	ldr	r2, [r7, #4]
 80065c0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80065c2:	0612      	lsls	r2, r2, #24
 80065c4:	4311      	orrs	r1, r2
 80065c6:	687a      	ldr	r2, [r7, #4]
 80065c8:	6812      	ldr	r2, [r2, #0]
 80065ca:	430b      	orrs	r3, r1
 80065cc:	6013      	str	r3, [r2, #0]
 80065ce:	e035      	b.n	800663c <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f023 0110 	bic.w	r1, r3, #16
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	430a      	orrs	r2, r1
 80065e4:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	681a      	ldr	r2, [r3, #0]
 80065ec:	4b27      	ldr	r3, [pc, #156]	@ (800668c <HAL_OPAMP_Init+0x19c>)
 80065ee:	4013      	ands	r3, r2
 80065f0:	687a      	ldr	r2, [r7, #4]
 80065f2:	6851      	ldr	r1, [r2, #4]
 80065f4:	687a      	ldr	r2, [r7, #4]
 80065f6:	6892      	ldr	r2, [r2, #8]
 80065f8:	4311      	orrs	r1, r2
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	68d2      	ldr	r2, [r2, #12]
 80065fe:	4311      	orrs	r1, r2
 8006600:	687a      	ldr	r2, [r7, #4]
 8006602:	6912      	ldr	r2, [r2, #16]
 8006604:	430a      	orrs	r2, r1
 8006606:	6879      	ldr	r1, [r7, #4]
 8006608:	7d09      	ldrb	r1, [r1, #20]
 800660a:	2901      	cmp	r1, #1
 800660c:	d102      	bne.n	8006614 <HAL_OPAMP_Init+0x124>
 800660e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006612:	e000      	b.n	8006616 <HAL_OPAMP_Init+0x126>
 8006614:	2100      	movs	r1, #0
 8006616:	4311      	orrs	r1, r2
 8006618:	687a      	ldr	r2, [r7, #4]
 800661a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800661c:	4311      	orrs	r1, r2
 800661e:	687a      	ldr	r2, [r7, #4]
 8006620:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006622:	4311      	orrs	r1, r2
 8006624:	687a      	ldr	r2, [r7, #4]
 8006626:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006628:	04d2      	lsls	r2, r2, #19
 800662a:	4311      	orrs	r1, r2
 800662c:	687a      	ldr	r2, [r7, #4]
 800662e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006630:	0612      	lsls	r2, r2, #24
 8006632:	4311      	orrs	r1, r2
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	6812      	ldr	r2, [r2, #0]
 8006638:	430b      	orrs	r3, r1
 800663a:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	699b      	ldr	r3, [r3, #24]
 8006642:	2b00      	cmp	r3, #0
 8006644:	db10      	blt.n	8006668 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	699b      	ldr	r3, [r3, #24]
 800664c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	699a      	ldr	r2, [r3, #24]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	69db      	ldr	r3, [r3, #28]
 8006658:	431a      	orrs	r2, r3
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6a1b      	ldr	r3, [r3, #32]
 800665e:	431a      	orrs	r2, r3
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	430a      	orrs	r2, r1
 8006666:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800666e:	b2db      	uxtb	r3, r3
 8006670:	2b00      	cmp	r3, #0
 8006672:	d103      	bne.n	800667c <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2201      	movs	r2, #1
 8006678:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 800667c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800667e:	4618      	mov	r0, r3
 8006680:	3710      	adds	r7, #16
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
 8006686:	bf00      	nop
 8006688:	40021000 	.word	0x40021000
 800668c:	e0003e11 	.word	0xe0003e11

08006690 <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 8006690:	b480      	push	{r7}
 8006692:	b085      	sub	sp, #20
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006698:	2300      	movs	r3, #0
 800669a:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d102      	bne.n	80066a8 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 80066a2:	2301      	movs	r3, #1
 80066a4:	73fb      	strb	r3, [r7, #15]
 80066a6:	e01d      	b.n	80066e4 <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	2b05      	cmp	r3, #5
 80066b2:	d102      	bne.n	80066ba <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 80066b4:	2301      	movs	r3, #1
 80066b6:	73fb      	strb	r3, [r7, #15]
 80066b8:	e014      	b.n	80066e4 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80066c0:	b2db      	uxtb	r3, r3
 80066c2:	2b01      	cmp	r3, #1
 80066c4:	d10c      	bne.n	80066e0 <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	681a      	ldr	r2, [r3, #0]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f042 0201 	orr.w	r2, r2, #1
 80066d4:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2204      	movs	r2, #4
 80066da:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 80066de:	e001      	b.n	80066e4 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 80066e0:	2301      	movs	r3, #1
 80066e2:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 80066e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3714      	adds	r7, #20
 80066ea:	46bd      	mov	sp, r7
 80066ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f0:	4770      	bx	lr
	...

080066f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b085      	sub	sp, #20
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d141      	bne.n	8006786 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006702:	4b4b      	ldr	r3, [pc, #300]	@ (8006830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800670a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800670e:	d131      	bne.n	8006774 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006710:	4b47      	ldr	r3, [pc, #284]	@ (8006830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006712:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006716:	4a46      	ldr	r2, [pc, #280]	@ (8006830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006718:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800671c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006720:	4b43      	ldr	r3, [pc, #268]	@ (8006830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006728:	4a41      	ldr	r2, [pc, #260]	@ (8006830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800672a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800672e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006730:	4b40      	ldr	r3, [pc, #256]	@ (8006834 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	2232      	movs	r2, #50	@ 0x32
 8006736:	fb02 f303 	mul.w	r3, r2, r3
 800673a:	4a3f      	ldr	r2, [pc, #252]	@ (8006838 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800673c:	fba2 2303 	umull	r2, r3, r2, r3
 8006740:	0c9b      	lsrs	r3, r3, #18
 8006742:	3301      	adds	r3, #1
 8006744:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006746:	e002      	b.n	800674e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	3b01      	subs	r3, #1
 800674c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800674e:	4b38      	ldr	r3, [pc, #224]	@ (8006830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006750:	695b      	ldr	r3, [r3, #20]
 8006752:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006756:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800675a:	d102      	bne.n	8006762 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d1f2      	bne.n	8006748 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006762:	4b33      	ldr	r3, [pc, #204]	@ (8006830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006764:	695b      	ldr	r3, [r3, #20]
 8006766:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800676a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800676e:	d158      	bne.n	8006822 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006770:	2303      	movs	r3, #3
 8006772:	e057      	b.n	8006824 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006774:	4b2e      	ldr	r3, [pc, #184]	@ (8006830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006776:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800677a:	4a2d      	ldr	r2, [pc, #180]	@ (8006830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800677c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006780:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006784:	e04d      	b.n	8006822 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800678c:	d141      	bne.n	8006812 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800678e:	4b28      	ldr	r3, [pc, #160]	@ (8006830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006796:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800679a:	d131      	bne.n	8006800 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800679c:	4b24      	ldr	r3, [pc, #144]	@ (8006830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800679e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067a2:	4a23      	ldr	r2, [pc, #140]	@ (8006830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80067a8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80067ac:	4b20      	ldr	r3, [pc, #128]	@ (8006830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80067b4:	4a1e      	ldr	r2, [pc, #120]	@ (8006830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80067ba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80067bc:	4b1d      	ldr	r3, [pc, #116]	@ (8006834 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	2232      	movs	r2, #50	@ 0x32
 80067c2:	fb02 f303 	mul.w	r3, r2, r3
 80067c6:	4a1c      	ldr	r2, [pc, #112]	@ (8006838 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80067c8:	fba2 2303 	umull	r2, r3, r2, r3
 80067cc:	0c9b      	lsrs	r3, r3, #18
 80067ce:	3301      	adds	r3, #1
 80067d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80067d2:	e002      	b.n	80067da <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	3b01      	subs	r3, #1
 80067d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80067da:	4b15      	ldr	r3, [pc, #84]	@ (8006830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067dc:	695b      	ldr	r3, [r3, #20]
 80067de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067e6:	d102      	bne.n	80067ee <HAL_PWREx_ControlVoltageScaling+0xfa>
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d1f2      	bne.n	80067d4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80067ee:	4b10      	ldr	r3, [pc, #64]	@ (8006830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067f0:	695b      	ldr	r3, [r3, #20]
 80067f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067fa:	d112      	bne.n	8006822 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80067fc:	2303      	movs	r3, #3
 80067fe:	e011      	b.n	8006824 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006800:	4b0b      	ldr	r3, [pc, #44]	@ (8006830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006802:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006806:	4a0a      	ldr	r2, [pc, #40]	@ (8006830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006808:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800680c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006810:	e007      	b.n	8006822 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006812:	4b07      	ldr	r3, [pc, #28]	@ (8006830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800681a:	4a05      	ldr	r2, [pc, #20]	@ (8006830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800681c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006820:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006822:	2300      	movs	r3, #0
}
 8006824:	4618      	mov	r0, r3
 8006826:	3714      	adds	r7, #20
 8006828:	46bd      	mov	sp, r7
 800682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682e:	4770      	bx	lr
 8006830:	40007000 	.word	0x40007000
 8006834:	20000000 	.word	0x20000000
 8006838:	431bde83 	.word	0x431bde83

0800683c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800683c:	b480      	push	{r7}
 800683e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006840:	4b05      	ldr	r3, [pc, #20]	@ (8006858 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006842:	689b      	ldr	r3, [r3, #8]
 8006844:	4a04      	ldr	r2, [pc, #16]	@ (8006858 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006846:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800684a:	6093      	str	r3, [r2, #8]
}
 800684c:	bf00      	nop
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr
 8006856:	bf00      	nop
 8006858:	40007000 	.word	0x40007000

0800685c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b088      	sub	sp, #32
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d101      	bne.n	800686e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800686a:	2301      	movs	r3, #1
 800686c:	e2fe      	b.n	8006e6c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f003 0301 	and.w	r3, r3, #1
 8006876:	2b00      	cmp	r3, #0
 8006878:	d075      	beq.n	8006966 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800687a:	4b97      	ldr	r3, [pc, #604]	@ (8006ad8 <HAL_RCC_OscConfig+0x27c>)
 800687c:	689b      	ldr	r3, [r3, #8]
 800687e:	f003 030c 	and.w	r3, r3, #12
 8006882:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006884:	4b94      	ldr	r3, [pc, #592]	@ (8006ad8 <HAL_RCC_OscConfig+0x27c>)
 8006886:	68db      	ldr	r3, [r3, #12]
 8006888:	f003 0303 	and.w	r3, r3, #3
 800688c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800688e:	69bb      	ldr	r3, [r7, #24]
 8006890:	2b0c      	cmp	r3, #12
 8006892:	d102      	bne.n	800689a <HAL_RCC_OscConfig+0x3e>
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	2b03      	cmp	r3, #3
 8006898:	d002      	beq.n	80068a0 <HAL_RCC_OscConfig+0x44>
 800689a:	69bb      	ldr	r3, [r7, #24]
 800689c:	2b08      	cmp	r3, #8
 800689e:	d10b      	bne.n	80068b8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068a0:	4b8d      	ldr	r3, [pc, #564]	@ (8006ad8 <HAL_RCC_OscConfig+0x27c>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d05b      	beq.n	8006964 <HAL_RCC_OscConfig+0x108>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d157      	bne.n	8006964 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80068b4:	2301      	movs	r3, #1
 80068b6:	e2d9      	b.n	8006e6c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068c0:	d106      	bne.n	80068d0 <HAL_RCC_OscConfig+0x74>
 80068c2:	4b85      	ldr	r3, [pc, #532]	@ (8006ad8 <HAL_RCC_OscConfig+0x27c>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a84      	ldr	r2, [pc, #528]	@ (8006ad8 <HAL_RCC_OscConfig+0x27c>)
 80068c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80068cc:	6013      	str	r3, [r2, #0]
 80068ce:	e01d      	b.n	800690c <HAL_RCC_OscConfig+0xb0>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80068d8:	d10c      	bne.n	80068f4 <HAL_RCC_OscConfig+0x98>
 80068da:	4b7f      	ldr	r3, [pc, #508]	@ (8006ad8 <HAL_RCC_OscConfig+0x27c>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a7e      	ldr	r2, [pc, #504]	@ (8006ad8 <HAL_RCC_OscConfig+0x27c>)
 80068e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80068e4:	6013      	str	r3, [r2, #0]
 80068e6:	4b7c      	ldr	r3, [pc, #496]	@ (8006ad8 <HAL_RCC_OscConfig+0x27c>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a7b      	ldr	r2, [pc, #492]	@ (8006ad8 <HAL_RCC_OscConfig+0x27c>)
 80068ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80068f0:	6013      	str	r3, [r2, #0]
 80068f2:	e00b      	b.n	800690c <HAL_RCC_OscConfig+0xb0>
 80068f4:	4b78      	ldr	r3, [pc, #480]	@ (8006ad8 <HAL_RCC_OscConfig+0x27c>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a77      	ldr	r2, [pc, #476]	@ (8006ad8 <HAL_RCC_OscConfig+0x27c>)
 80068fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80068fe:	6013      	str	r3, [r2, #0]
 8006900:	4b75      	ldr	r3, [pc, #468]	@ (8006ad8 <HAL_RCC_OscConfig+0x27c>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a74      	ldr	r2, [pc, #464]	@ (8006ad8 <HAL_RCC_OscConfig+0x27c>)
 8006906:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800690a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d013      	beq.n	800693c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006914:	f7fb fad2 	bl	8001ebc <HAL_GetTick>
 8006918:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800691a:	e008      	b.n	800692e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800691c:	f7fb face 	bl	8001ebc <HAL_GetTick>
 8006920:	4602      	mov	r2, r0
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	1ad3      	subs	r3, r2, r3
 8006926:	2b64      	cmp	r3, #100	@ 0x64
 8006928:	d901      	bls.n	800692e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800692a:	2303      	movs	r3, #3
 800692c:	e29e      	b.n	8006e6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800692e:	4b6a      	ldr	r3, [pc, #424]	@ (8006ad8 <HAL_RCC_OscConfig+0x27c>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006936:	2b00      	cmp	r3, #0
 8006938:	d0f0      	beq.n	800691c <HAL_RCC_OscConfig+0xc0>
 800693a:	e014      	b.n	8006966 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800693c:	f7fb fabe 	bl	8001ebc <HAL_GetTick>
 8006940:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006942:	e008      	b.n	8006956 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006944:	f7fb faba 	bl	8001ebc <HAL_GetTick>
 8006948:	4602      	mov	r2, r0
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	1ad3      	subs	r3, r2, r3
 800694e:	2b64      	cmp	r3, #100	@ 0x64
 8006950:	d901      	bls.n	8006956 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006952:	2303      	movs	r3, #3
 8006954:	e28a      	b.n	8006e6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006956:	4b60      	ldr	r3, [pc, #384]	@ (8006ad8 <HAL_RCC_OscConfig+0x27c>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800695e:	2b00      	cmp	r3, #0
 8006960:	d1f0      	bne.n	8006944 <HAL_RCC_OscConfig+0xe8>
 8006962:	e000      	b.n	8006966 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006964:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f003 0302 	and.w	r3, r3, #2
 800696e:	2b00      	cmp	r3, #0
 8006970:	d075      	beq.n	8006a5e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006972:	4b59      	ldr	r3, [pc, #356]	@ (8006ad8 <HAL_RCC_OscConfig+0x27c>)
 8006974:	689b      	ldr	r3, [r3, #8]
 8006976:	f003 030c 	and.w	r3, r3, #12
 800697a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800697c:	4b56      	ldr	r3, [pc, #344]	@ (8006ad8 <HAL_RCC_OscConfig+0x27c>)
 800697e:	68db      	ldr	r3, [r3, #12]
 8006980:	f003 0303 	and.w	r3, r3, #3
 8006984:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006986:	69bb      	ldr	r3, [r7, #24]
 8006988:	2b0c      	cmp	r3, #12
 800698a:	d102      	bne.n	8006992 <HAL_RCC_OscConfig+0x136>
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	2b02      	cmp	r3, #2
 8006990:	d002      	beq.n	8006998 <HAL_RCC_OscConfig+0x13c>
 8006992:	69bb      	ldr	r3, [r7, #24]
 8006994:	2b04      	cmp	r3, #4
 8006996:	d11f      	bne.n	80069d8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006998:	4b4f      	ldr	r3, [pc, #316]	@ (8006ad8 <HAL_RCC_OscConfig+0x27c>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d005      	beq.n	80069b0 <HAL_RCC_OscConfig+0x154>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	68db      	ldr	r3, [r3, #12]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d101      	bne.n	80069b0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80069ac:	2301      	movs	r3, #1
 80069ae:	e25d      	b.n	8006e6c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069b0:	4b49      	ldr	r3, [pc, #292]	@ (8006ad8 <HAL_RCC_OscConfig+0x27c>)
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	691b      	ldr	r3, [r3, #16]
 80069bc:	061b      	lsls	r3, r3, #24
 80069be:	4946      	ldr	r1, [pc, #280]	@ (8006ad8 <HAL_RCC_OscConfig+0x27c>)
 80069c0:	4313      	orrs	r3, r2
 80069c2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80069c4:	4b45      	ldr	r3, [pc, #276]	@ (8006adc <HAL_RCC_OscConfig+0x280>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4618      	mov	r0, r3
 80069ca:	f7fb fa2b 	bl	8001e24 <HAL_InitTick>
 80069ce:	4603      	mov	r3, r0
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d043      	beq.n	8006a5c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80069d4:	2301      	movs	r3, #1
 80069d6:	e249      	b.n	8006e6c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	68db      	ldr	r3, [r3, #12]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d023      	beq.n	8006a28 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80069e0:	4b3d      	ldr	r3, [pc, #244]	@ (8006ad8 <HAL_RCC_OscConfig+0x27c>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a3c      	ldr	r2, [pc, #240]	@ (8006ad8 <HAL_RCC_OscConfig+0x27c>)
 80069e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80069ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069ec:	f7fb fa66 	bl	8001ebc <HAL_GetTick>
 80069f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80069f2:	e008      	b.n	8006a06 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80069f4:	f7fb fa62 	bl	8001ebc <HAL_GetTick>
 80069f8:	4602      	mov	r2, r0
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	1ad3      	subs	r3, r2, r3
 80069fe:	2b02      	cmp	r3, #2
 8006a00:	d901      	bls.n	8006a06 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006a02:	2303      	movs	r3, #3
 8006a04:	e232      	b.n	8006e6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006a06:	4b34      	ldr	r3, [pc, #208]	@ (8006ad8 <HAL_RCC_OscConfig+0x27c>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d0f0      	beq.n	80069f4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a12:	4b31      	ldr	r3, [pc, #196]	@ (8006ad8 <HAL_RCC_OscConfig+0x27c>)
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	691b      	ldr	r3, [r3, #16]
 8006a1e:	061b      	lsls	r3, r3, #24
 8006a20:	492d      	ldr	r1, [pc, #180]	@ (8006ad8 <HAL_RCC_OscConfig+0x27c>)
 8006a22:	4313      	orrs	r3, r2
 8006a24:	604b      	str	r3, [r1, #4]
 8006a26:	e01a      	b.n	8006a5e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a28:	4b2b      	ldr	r3, [pc, #172]	@ (8006ad8 <HAL_RCC_OscConfig+0x27c>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a2a      	ldr	r2, [pc, #168]	@ (8006ad8 <HAL_RCC_OscConfig+0x27c>)
 8006a2e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006a32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a34:	f7fb fa42 	bl	8001ebc <HAL_GetTick>
 8006a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006a3a:	e008      	b.n	8006a4e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a3c:	f7fb fa3e 	bl	8001ebc <HAL_GetTick>
 8006a40:	4602      	mov	r2, r0
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	1ad3      	subs	r3, r2, r3
 8006a46:	2b02      	cmp	r3, #2
 8006a48:	d901      	bls.n	8006a4e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006a4a:	2303      	movs	r3, #3
 8006a4c:	e20e      	b.n	8006e6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006a4e:	4b22      	ldr	r3, [pc, #136]	@ (8006ad8 <HAL_RCC_OscConfig+0x27c>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d1f0      	bne.n	8006a3c <HAL_RCC_OscConfig+0x1e0>
 8006a5a:	e000      	b.n	8006a5e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006a5c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f003 0308 	and.w	r3, r3, #8
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d041      	beq.n	8006aee <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	695b      	ldr	r3, [r3, #20]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d01c      	beq.n	8006aac <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006a72:	4b19      	ldr	r3, [pc, #100]	@ (8006ad8 <HAL_RCC_OscConfig+0x27c>)
 8006a74:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006a78:	4a17      	ldr	r2, [pc, #92]	@ (8006ad8 <HAL_RCC_OscConfig+0x27c>)
 8006a7a:	f043 0301 	orr.w	r3, r3, #1
 8006a7e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a82:	f7fb fa1b 	bl	8001ebc <HAL_GetTick>
 8006a86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006a88:	e008      	b.n	8006a9c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a8a:	f7fb fa17 	bl	8001ebc <HAL_GetTick>
 8006a8e:	4602      	mov	r2, r0
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	1ad3      	subs	r3, r2, r3
 8006a94:	2b02      	cmp	r3, #2
 8006a96:	d901      	bls.n	8006a9c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006a98:	2303      	movs	r3, #3
 8006a9a:	e1e7      	b.n	8006e6c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006a9c:	4b0e      	ldr	r3, [pc, #56]	@ (8006ad8 <HAL_RCC_OscConfig+0x27c>)
 8006a9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006aa2:	f003 0302 	and.w	r3, r3, #2
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d0ef      	beq.n	8006a8a <HAL_RCC_OscConfig+0x22e>
 8006aaa:	e020      	b.n	8006aee <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006aac:	4b0a      	ldr	r3, [pc, #40]	@ (8006ad8 <HAL_RCC_OscConfig+0x27c>)
 8006aae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006ab2:	4a09      	ldr	r2, [pc, #36]	@ (8006ad8 <HAL_RCC_OscConfig+0x27c>)
 8006ab4:	f023 0301 	bic.w	r3, r3, #1
 8006ab8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006abc:	f7fb f9fe 	bl	8001ebc <HAL_GetTick>
 8006ac0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006ac2:	e00d      	b.n	8006ae0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ac4:	f7fb f9fa 	bl	8001ebc <HAL_GetTick>
 8006ac8:	4602      	mov	r2, r0
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	1ad3      	subs	r3, r2, r3
 8006ace:	2b02      	cmp	r3, #2
 8006ad0:	d906      	bls.n	8006ae0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006ad2:	2303      	movs	r3, #3
 8006ad4:	e1ca      	b.n	8006e6c <HAL_RCC_OscConfig+0x610>
 8006ad6:	bf00      	nop
 8006ad8:	40021000 	.word	0x40021000
 8006adc:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006ae0:	4b8c      	ldr	r3, [pc, #560]	@ (8006d14 <HAL_RCC_OscConfig+0x4b8>)
 8006ae2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006ae6:	f003 0302 	and.w	r3, r3, #2
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d1ea      	bne.n	8006ac4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f003 0304 	and.w	r3, r3, #4
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	f000 80a6 	beq.w	8006c48 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006afc:	2300      	movs	r3, #0
 8006afe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006b00:	4b84      	ldr	r3, [pc, #528]	@ (8006d14 <HAL_RCC_OscConfig+0x4b8>)
 8006b02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d101      	bne.n	8006b10 <HAL_RCC_OscConfig+0x2b4>
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	e000      	b.n	8006b12 <HAL_RCC_OscConfig+0x2b6>
 8006b10:	2300      	movs	r3, #0
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d00d      	beq.n	8006b32 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b16:	4b7f      	ldr	r3, [pc, #508]	@ (8006d14 <HAL_RCC_OscConfig+0x4b8>)
 8006b18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b1a:	4a7e      	ldr	r2, [pc, #504]	@ (8006d14 <HAL_RCC_OscConfig+0x4b8>)
 8006b1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b20:	6593      	str	r3, [r2, #88]	@ 0x58
 8006b22:	4b7c      	ldr	r3, [pc, #496]	@ (8006d14 <HAL_RCC_OscConfig+0x4b8>)
 8006b24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b2a:	60fb      	str	r3, [r7, #12]
 8006b2c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006b32:	4b79      	ldr	r3, [pc, #484]	@ (8006d18 <HAL_RCC_OscConfig+0x4bc>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d118      	bne.n	8006b70 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006b3e:	4b76      	ldr	r3, [pc, #472]	@ (8006d18 <HAL_RCC_OscConfig+0x4bc>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a75      	ldr	r2, [pc, #468]	@ (8006d18 <HAL_RCC_OscConfig+0x4bc>)
 8006b44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b4a:	f7fb f9b7 	bl	8001ebc <HAL_GetTick>
 8006b4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006b50:	e008      	b.n	8006b64 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b52:	f7fb f9b3 	bl	8001ebc <HAL_GetTick>
 8006b56:	4602      	mov	r2, r0
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	1ad3      	subs	r3, r2, r3
 8006b5c:	2b02      	cmp	r3, #2
 8006b5e:	d901      	bls.n	8006b64 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006b60:	2303      	movs	r3, #3
 8006b62:	e183      	b.n	8006e6c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006b64:	4b6c      	ldr	r3, [pc, #432]	@ (8006d18 <HAL_RCC_OscConfig+0x4bc>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d0f0      	beq.n	8006b52 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	2b01      	cmp	r3, #1
 8006b76:	d108      	bne.n	8006b8a <HAL_RCC_OscConfig+0x32e>
 8006b78:	4b66      	ldr	r3, [pc, #408]	@ (8006d14 <HAL_RCC_OscConfig+0x4b8>)
 8006b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b7e:	4a65      	ldr	r2, [pc, #404]	@ (8006d14 <HAL_RCC_OscConfig+0x4b8>)
 8006b80:	f043 0301 	orr.w	r3, r3, #1
 8006b84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006b88:	e024      	b.n	8006bd4 <HAL_RCC_OscConfig+0x378>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	689b      	ldr	r3, [r3, #8]
 8006b8e:	2b05      	cmp	r3, #5
 8006b90:	d110      	bne.n	8006bb4 <HAL_RCC_OscConfig+0x358>
 8006b92:	4b60      	ldr	r3, [pc, #384]	@ (8006d14 <HAL_RCC_OscConfig+0x4b8>)
 8006b94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b98:	4a5e      	ldr	r2, [pc, #376]	@ (8006d14 <HAL_RCC_OscConfig+0x4b8>)
 8006b9a:	f043 0304 	orr.w	r3, r3, #4
 8006b9e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006ba2:	4b5c      	ldr	r3, [pc, #368]	@ (8006d14 <HAL_RCC_OscConfig+0x4b8>)
 8006ba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ba8:	4a5a      	ldr	r2, [pc, #360]	@ (8006d14 <HAL_RCC_OscConfig+0x4b8>)
 8006baa:	f043 0301 	orr.w	r3, r3, #1
 8006bae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006bb2:	e00f      	b.n	8006bd4 <HAL_RCC_OscConfig+0x378>
 8006bb4:	4b57      	ldr	r3, [pc, #348]	@ (8006d14 <HAL_RCC_OscConfig+0x4b8>)
 8006bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bba:	4a56      	ldr	r2, [pc, #344]	@ (8006d14 <HAL_RCC_OscConfig+0x4b8>)
 8006bbc:	f023 0301 	bic.w	r3, r3, #1
 8006bc0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006bc4:	4b53      	ldr	r3, [pc, #332]	@ (8006d14 <HAL_RCC_OscConfig+0x4b8>)
 8006bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bca:	4a52      	ldr	r2, [pc, #328]	@ (8006d14 <HAL_RCC_OscConfig+0x4b8>)
 8006bcc:	f023 0304 	bic.w	r3, r3, #4
 8006bd0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	689b      	ldr	r3, [r3, #8]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d016      	beq.n	8006c0a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bdc:	f7fb f96e 	bl	8001ebc <HAL_GetTick>
 8006be0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006be2:	e00a      	b.n	8006bfa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006be4:	f7fb f96a 	bl	8001ebc <HAL_GetTick>
 8006be8:	4602      	mov	r2, r0
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	1ad3      	subs	r3, r2, r3
 8006bee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d901      	bls.n	8006bfa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006bf6:	2303      	movs	r3, #3
 8006bf8:	e138      	b.n	8006e6c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006bfa:	4b46      	ldr	r3, [pc, #280]	@ (8006d14 <HAL_RCC_OscConfig+0x4b8>)
 8006bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c00:	f003 0302 	and.w	r3, r3, #2
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d0ed      	beq.n	8006be4 <HAL_RCC_OscConfig+0x388>
 8006c08:	e015      	b.n	8006c36 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c0a:	f7fb f957 	bl	8001ebc <HAL_GetTick>
 8006c0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006c10:	e00a      	b.n	8006c28 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c12:	f7fb f953 	bl	8001ebc <HAL_GetTick>
 8006c16:	4602      	mov	r2, r0
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	1ad3      	subs	r3, r2, r3
 8006c1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d901      	bls.n	8006c28 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006c24:	2303      	movs	r3, #3
 8006c26:	e121      	b.n	8006e6c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006c28:	4b3a      	ldr	r3, [pc, #232]	@ (8006d14 <HAL_RCC_OscConfig+0x4b8>)
 8006c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c2e:	f003 0302 	and.w	r3, r3, #2
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d1ed      	bne.n	8006c12 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006c36:	7ffb      	ldrb	r3, [r7, #31]
 8006c38:	2b01      	cmp	r3, #1
 8006c3a:	d105      	bne.n	8006c48 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c3c:	4b35      	ldr	r3, [pc, #212]	@ (8006d14 <HAL_RCC_OscConfig+0x4b8>)
 8006c3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c40:	4a34      	ldr	r2, [pc, #208]	@ (8006d14 <HAL_RCC_OscConfig+0x4b8>)
 8006c42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006c46:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f003 0320 	and.w	r3, r3, #32
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d03c      	beq.n	8006cce <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	699b      	ldr	r3, [r3, #24]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d01c      	beq.n	8006c96 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006c5c:	4b2d      	ldr	r3, [pc, #180]	@ (8006d14 <HAL_RCC_OscConfig+0x4b8>)
 8006c5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006c62:	4a2c      	ldr	r2, [pc, #176]	@ (8006d14 <HAL_RCC_OscConfig+0x4b8>)
 8006c64:	f043 0301 	orr.w	r3, r3, #1
 8006c68:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c6c:	f7fb f926 	bl	8001ebc <HAL_GetTick>
 8006c70:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006c72:	e008      	b.n	8006c86 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006c74:	f7fb f922 	bl	8001ebc <HAL_GetTick>
 8006c78:	4602      	mov	r2, r0
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	1ad3      	subs	r3, r2, r3
 8006c7e:	2b02      	cmp	r3, #2
 8006c80:	d901      	bls.n	8006c86 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006c82:	2303      	movs	r3, #3
 8006c84:	e0f2      	b.n	8006e6c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006c86:	4b23      	ldr	r3, [pc, #140]	@ (8006d14 <HAL_RCC_OscConfig+0x4b8>)
 8006c88:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006c8c:	f003 0302 	and.w	r3, r3, #2
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d0ef      	beq.n	8006c74 <HAL_RCC_OscConfig+0x418>
 8006c94:	e01b      	b.n	8006cce <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006c96:	4b1f      	ldr	r3, [pc, #124]	@ (8006d14 <HAL_RCC_OscConfig+0x4b8>)
 8006c98:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006c9c:	4a1d      	ldr	r2, [pc, #116]	@ (8006d14 <HAL_RCC_OscConfig+0x4b8>)
 8006c9e:	f023 0301 	bic.w	r3, r3, #1
 8006ca2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ca6:	f7fb f909 	bl	8001ebc <HAL_GetTick>
 8006caa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006cac:	e008      	b.n	8006cc0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006cae:	f7fb f905 	bl	8001ebc <HAL_GetTick>
 8006cb2:	4602      	mov	r2, r0
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	1ad3      	subs	r3, r2, r3
 8006cb8:	2b02      	cmp	r3, #2
 8006cba:	d901      	bls.n	8006cc0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006cbc:	2303      	movs	r3, #3
 8006cbe:	e0d5      	b.n	8006e6c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006cc0:	4b14      	ldr	r3, [pc, #80]	@ (8006d14 <HAL_RCC_OscConfig+0x4b8>)
 8006cc2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006cc6:	f003 0302 	and.w	r3, r3, #2
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d1ef      	bne.n	8006cae <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	69db      	ldr	r3, [r3, #28]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	f000 80c9 	beq.w	8006e6a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006cd8:	4b0e      	ldr	r3, [pc, #56]	@ (8006d14 <HAL_RCC_OscConfig+0x4b8>)
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	f003 030c 	and.w	r3, r3, #12
 8006ce0:	2b0c      	cmp	r3, #12
 8006ce2:	f000 8083 	beq.w	8006dec <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	69db      	ldr	r3, [r3, #28]
 8006cea:	2b02      	cmp	r3, #2
 8006cec:	d15e      	bne.n	8006dac <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006cee:	4b09      	ldr	r3, [pc, #36]	@ (8006d14 <HAL_RCC_OscConfig+0x4b8>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a08      	ldr	r2, [pc, #32]	@ (8006d14 <HAL_RCC_OscConfig+0x4b8>)
 8006cf4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006cf8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cfa:	f7fb f8df 	bl	8001ebc <HAL_GetTick>
 8006cfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006d00:	e00c      	b.n	8006d1c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d02:	f7fb f8db 	bl	8001ebc <HAL_GetTick>
 8006d06:	4602      	mov	r2, r0
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	1ad3      	subs	r3, r2, r3
 8006d0c:	2b02      	cmp	r3, #2
 8006d0e:	d905      	bls.n	8006d1c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006d10:	2303      	movs	r3, #3
 8006d12:	e0ab      	b.n	8006e6c <HAL_RCC_OscConfig+0x610>
 8006d14:	40021000 	.word	0x40021000
 8006d18:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006d1c:	4b55      	ldr	r3, [pc, #340]	@ (8006e74 <HAL_RCC_OscConfig+0x618>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d1ec      	bne.n	8006d02 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006d28:	4b52      	ldr	r3, [pc, #328]	@ (8006e74 <HAL_RCC_OscConfig+0x618>)
 8006d2a:	68da      	ldr	r2, [r3, #12]
 8006d2c:	4b52      	ldr	r3, [pc, #328]	@ (8006e78 <HAL_RCC_OscConfig+0x61c>)
 8006d2e:	4013      	ands	r3, r2
 8006d30:	687a      	ldr	r2, [r7, #4]
 8006d32:	6a11      	ldr	r1, [r2, #32]
 8006d34:	687a      	ldr	r2, [r7, #4]
 8006d36:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006d38:	3a01      	subs	r2, #1
 8006d3a:	0112      	lsls	r2, r2, #4
 8006d3c:	4311      	orrs	r1, r2
 8006d3e:	687a      	ldr	r2, [r7, #4]
 8006d40:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006d42:	0212      	lsls	r2, r2, #8
 8006d44:	4311      	orrs	r1, r2
 8006d46:	687a      	ldr	r2, [r7, #4]
 8006d48:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006d4a:	0852      	lsrs	r2, r2, #1
 8006d4c:	3a01      	subs	r2, #1
 8006d4e:	0552      	lsls	r2, r2, #21
 8006d50:	4311      	orrs	r1, r2
 8006d52:	687a      	ldr	r2, [r7, #4]
 8006d54:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006d56:	0852      	lsrs	r2, r2, #1
 8006d58:	3a01      	subs	r2, #1
 8006d5a:	0652      	lsls	r2, r2, #25
 8006d5c:	4311      	orrs	r1, r2
 8006d5e:	687a      	ldr	r2, [r7, #4]
 8006d60:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006d62:	06d2      	lsls	r2, r2, #27
 8006d64:	430a      	orrs	r2, r1
 8006d66:	4943      	ldr	r1, [pc, #268]	@ (8006e74 <HAL_RCC_OscConfig+0x618>)
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006d6c:	4b41      	ldr	r3, [pc, #260]	@ (8006e74 <HAL_RCC_OscConfig+0x618>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a40      	ldr	r2, [pc, #256]	@ (8006e74 <HAL_RCC_OscConfig+0x618>)
 8006d72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006d76:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006d78:	4b3e      	ldr	r3, [pc, #248]	@ (8006e74 <HAL_RCC_OscConfig+0x618>)
 8006d7a:	68db      	ldr	r3, [r3, #12]
 8006d7c:	4a3d      	ldr	r2, [pc, #244]	@ (8006e74 <HAL_RCC_OscConfig+0x618>)
 8006d7e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006d82:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d84:	f7fb f89a 	bl	8001ebc <HAL_GetTick>
 8006d88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d8a:	e008      	b.n	8006d9e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d8c:	f7fb f896 	bl	8001ebc <HAL_GetTick>
 8006d90:	4602      	mov	r2, r0
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	1ad3      	subs	r3, r2, r3
 8006d96:	2b02      	cmp	r3, #2
 8006d98:	d901      	bls.n	8006d9e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006d9a:	2303      	movs	r3, #3
 8006d9c:	e066      	b.n	8006e6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d9e:	4b35      	ldr	r3, [pc, #212]	@ (8006e74 <HAL_RCC_OscConfig+0x618>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d0f0      	beq.n	8006d8c <HAL_RCC_OscConfig+0x530>
 8006daa:	e05e      	b.n	8006e6a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006dac:	4b31      	ldr	r3, [pc, #196]	@ (8006e74 <HAL_RCC_OscConfig+0x618>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a30      	ldr	r2, [pc, #192]	@ (8006e74 <HAL_RCC_OscConfig+0x618>)
 8006db2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006db6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006db8:	f7fb f880 	bl	8001ebc <HAL_GetTick>
 8006dbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006dbe:	e008      	b.n	8006dd2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006dc0:	f7fb f87c 	bl	8001ebc <HAL_GetTick>
 8006dc4:	4602      	mov	r2, r0
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	1ad3      	subs	r3, r2, r3
 8006dca:	2b02      	cmp	r3, #2
 8006dcc:	d901      	bls.n	8006dd2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8006dce:	2303      	movs	r3, #3
 8006dd0:	e04c      	b.n	8006e6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006dd2:	4b28      	ldr	r3, [pc, #160]	@ (8006e74 <HAL_RCC_OscConfig+0x618>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d1f0      	bne.n	8006dc0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006dde:	4b25      	ldr	r3, [pc, #148]	@ (8006e74 <HAL_RCC_OscConfig+0x618>)
 8006de0:	68da      	ldr	r2, [r3, #12]
 8006de2:	4924      	ldr	r1, [pc, #144]	@ (8006e74 <HAL_RCC_OscConfig+0x618>)
 8006de4:	4b25      	ldr	r3, [pc, #148]	@ (8006e7c <HAL_RCC_OscConfig+0x620>)
 8006de6:	4013      	ands	r3, r2
 8006de8:	60cb      	str	r3, [r1, #12]
 8006dea:	e03e      	b.n	8006e6a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	69db      	ldr	r3, [r3, #28]
 8006df0:	2b01      	cmp	r3, #1
 8006df2:	d101      	bne.n	8006df8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006df4:	2301      	movs	r3, #1
 8006df6:	e039      	b.n	8006e6c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006df8:	4b1e      	ldr	r3, [pc, #120]	@ (8006e74 <HAL_RCC_OscConfig+0x618>)
 8006dfa:	68db      	ldr	r3, [r3, #12]
 8006dfc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	f003 0203 	and.w	r2, r3, #3
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6a1b      	ldr	r3, [r3, #32]
 8006e08:	429a      	cmp	r2, r3
 8006e0a:	d12c      	bne.n	8006e66 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e16:	3b01      	subs	r3, #1
 8006e18:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e1a:	429a      	cmp	r2, r3
 8006e1c:	d123      	bne.n	8006e66 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e28:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006e2a:	429a      	cmp	r2, r3
 8006e2c:	d11b      	bne.n	8006e66 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e38:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006e3a:	429a      	cmp	r2, r3
 8006e3c:	d113      	bne.n	8006e66 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e48:	085b      	lsrs	r3, r3, #1
 8006e4a:	3b01      	subs	r3, #1
 8006e4c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	d109      	bne.n	8006e66 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e5c:	085b      	lsrs	r3, r3, #1
 8006e5e:	3b01      	subs	r3, #1
 8006e60:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006e62:	429a      	cmp	r2, r3
 8006e64:	d001      	beq.n	8006e6a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8006e66:	2301      	movs	r3, #1
 8006e68:	e000      	b.n	8006e6c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8006e6a:	2300      	movs	r3, #0
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	3720      	adds	r7, #32
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}
 8006e74:	40021000 	.word	0x40021000
 8006e78:	019f800c 	.word	0x019f800c
 8006e7c:	feeefffc 	.word	0xfeeefffc

08006e80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b086      	sub	sp, #24
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
 8006e88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d101      	bne.n	8006e98 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006e94:	2301      	movs	r3, #1
 8006e96:	e11e      	b.n	80070d6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006e98:	4b91      	ldr	r3, [pc, #580]	@ (80070e0 <HAL_RCC_ClockConfig+0x260>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f003 030f 	and.w	r3, r3, #15
 8006ea0:	683a      	ldr	r2, [r7, #0]
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	d910      	bls.n	8006ec8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ea6:	4b8e      	ldr	r3, [pc, #568]	@ (80070e0 <HAL_RCC_ClockConfig+0x260>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f023 020f 	bic.w	r2, r3, #15
 8006eae:	498c      	ldr	r1, [pc, #560]	@ (80070e0 <HAL_RCC_ClockConfig+0x260>)
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006eb6:	4b8a      	ldr	r3, [pc, #552]	@ (80070e0 <HAL_RCC_ClockConfig+0x260>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f003 030f 	and.w	r3, r3, #15
 8006ebe:	683a      	ldr	r2, [r7, #0]
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	d001      	beq.n	8006ec8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	e106      	b.n	80070d6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f003 0301 	and.w	r3, r3, #1
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d073      	beq.n	8006fbc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	2b03      	cmp	r3, #3
 8006eda:	d129      	bne.n	8006f30 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006edc:	4b81      	ldr	r3, [pc, #516]	@ (80070e4 <HAL_RCC_ClockConfig+0x264>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d101      	bne.n	8006eec <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006ee8:	2301      	movs	r3, #1
 8006eea:	e0f4      	b.n	80070d6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006eec:	f000 f99e 	bl	800722c <RCC_GetSysClockFreqFromPLLSource>
 8006ef0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	4a7c      	ldr	r2, [pc, #496]	@ (80070e8 <HAL_RCC_ClockConfig+0x268>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d93f      	bls.n	8006f7a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006efa:	4b7a      	ldr	r3, [pc, #488]	@ (80070e4 <HAL_RCC_ClockConfig+0x264>)
 8006efc:	689b      	ldr	r3, [r3, #8]
 8006efe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d009      	beq.n	8006f1a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d033      	beq.n	8006f7a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d12f      	bne.n	8006f7a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006f1a:	4b72      	ldr	r3, [pc, #456]	@ (80070e4 <HAL_RCC_ClockConfig+0x264>)
 8006f1c:	689b      	ldr	r3, [r3, #8]
 8006f1e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006f22:	4a70      	ldr	r2, [pc, #448]	@ (80070e4 <HAL_RCC_ClockConfig+0x264>)
 8006f24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f28:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006f2a:	2380      	movs	r3, #128	@ 0x80
 8006f2c:	617b      	str	r3, [r7, #20]
 8006f2e:	e024      	b.n	8006f7a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	2b02      	cmp	r3, #2
 8006f36:	d107      	bne.n	8006f48 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006f38:	4b6a      	ldr	r3, [pc, #424]	@ (80070e4 <HAL_RCC_ClockConfig+0x264>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d109      	bne.n	8006f58 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006f44:	2301      	movs	r3, #1
 8006f46:	e0c6      	b.n	80070d6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006f48:	4b66      	ldr	r3, [pc, #408]	@ (80070e4 <HAL_RCC_ClockConfig+0x264>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d101      	bne.n	8006f58 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006f54:	2301      	movs	r3, #1
 8006f56:	e0be      	b.n	80070d6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006f58:	f000 f8ce 	bl	80070f8 <HAL_RCC_GetSysClockFreq>
 8006f5c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	4a61      	ldr	r2, [pc, #388]	@ (80070e8 <HAL_RCC_ClockConfig+0x268>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d909      	bls.n	8006f7a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006f66:	4b5f      	ldr	r3, [pc, #380]	@ (80070e4 <HAL_RCC_ClockConfig+0x264>)
 8006f68:	689b      	ldr	r3, [r3, #8]
 8006f6a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006f6e:	4a5d      	ldr	r2, [pc, #372]	@ (80070e4 <HAL_RCC_ClockConfig+0x264>)
 8006f70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f74:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006f76:	2380      	movs	r3, #128	@ 0x80
 8006f78:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006f7a:	4b5a      	ldr	r3, [pc, #360]	@ (80070e4 <HAL_RCC_ClockConfig+0x264>)
 8006f7c:	689b      	ldr	r3, [r3, #8]
 8006f7e:	f023 0203 	bic.w	r2, r3, #3
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	4957      	ldr	r1, [pc, #348]	@ (80070e4 <HAL_RCC_ClockConfig+0x264>)
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f8c:	f7fa ff96 	bl	8001ebc <HAL_GetTick>
 8006f90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f92:	e00a      	b.n	8006faa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f94:	f7fa ff92 	bl	8001ebc <HAL_GetTick>
 8006f98:	4602      	mov	r2, r0
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	1ad3      	subs	r3, r2, r3
 8006f9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d901      	bls.n	8006faa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006fa6:	2303      	movs	r3, #3
 8006fa8:	e095      	b.n	80070d6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006faa:	4b4e      	ldr	r3, [pc, #312]	@ (80070e4 <HAL_RCC_ClockConfig+0x264>)
 8006fac:	689b      	ldr	r3, [r3, #8]
 8006fae:	f003 020c 	and.w	r2, r3, #12
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	009b      	lsls	r3, r3, #2
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d1eb      	bne.n	8006f94 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f003 0302 	and.w	r3, r3, #2
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d023      	beq.n	8007010 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f003 0304 	and.w	r3, r3, #4
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d005      	beq.n	8006fe0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006fd4:	4b43      	ldr	r3, [pc, #268]	@ (80070e4 <HAL_RCC_ClockConfig+0x264>)
 8006fd6:	689b      	ldr	r3, [r3, #8]
 8006fd8:	4a42      	ldr	r2, [pc, #264]	@ (80070e4 <HAL_RCC_ClockConfig+0x264>)
 8006fda:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006fde:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f003 0308 	and.w	r3, r3, #8
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d007      	beq.n	8006ffc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006fec:	4b3d      	ldr	r3, [pc, #244]	@ (80070e4 <HAL_RCC_ClockConfig+0x264>)
 8006fee:	689b      	ldr	r3, [r3, #8]
 8006ff0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006ff4:	4a3b      	ldr	r2, [pc, #236]	@ (80070e4 <HAL_RCC_ClockConfig+0x264>)
 8006ff6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006ffa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ffc:	4b39      	ldr	r3, [pc, #228]	@ (80070e4 <HAL_RCC_ClockConfig+0x264>)
 8006ffe:	689b      	ldr	r3, [r3, #8]
 8007000:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	689b      	ldr	r3, [r3, #8]
 8007008:	4936      	ldr	r1, [pc, #216]	@ (80070e4 <HAL_RCC_ClockConfig+0x264>)
 800700a:	4313      	orrs	r3, r2
 800700c:	608b      	str	r3, [r1, #8]
 800700e:	e008      	b.n	8007022 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	2b80      	cmp	r3, #128	@ 0x80
 8007014:	d105      	bne.n	8007022 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007016:	4b33      	ldr	r3, [pc, #204]	@ (80070e4 <HAL_RCC_ClockConfig+0x264>)
 8007018:	689b      	ldr	r3, [r3, #8]
 800701a:	4a32      	ldr	r2, [pc, #200]	@ (80070e4 <HAL_RCC_ClockConfig+0x264>)
 800701c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007020:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007022:	4b2f      	ldr	r3, [pc, #188]	@ (80070e0 <HAL_RCC_ClockConfig+0x260>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f003 030f 	and.w	r3, r3, #15
 800702a:	683a      	ldr	r2, [r7, #0]
 800702c:	429a      	cmp	r2, r3
 800702e:	d21d      	bcs.n	800706c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007030:	4b2b      	ldr	r3, [pc, #172]	@ (80070e0 <HAL_RCC_ClockConfig+0x260>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f023 020f 	bic.w	r2, r3, #15
 8007038:	4929      	ldr	r1, [pc, #164]	@ (80070e0 <HAL_RCC_ClockConfig+0x260>)
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	4313      	orrs	r3, r2
 800703e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007040:	f7fa ff3c 	bl	8001ebc <HAL_GetTick>
 8007044:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007046:	e00a      	b.n	800705e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007048:	f7fa ff38 	bl	8001ebc <HAL_GetTick>
 800704c:	4602      	mov	r2, r0
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	1ad3      	subs	r3, r2, r3
 8007052:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007056:	4293      	cmp	r3, r2
 8007058:	d901      	bls.n	800705e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800705a:	2303      	movs	r3, #3
 800705c:	e03b      	b.n	80070d6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800705e:	4b20      	ldr	r3, [pc, #128]	@ (80070e0 <HAL_RCC_ClockConfig+0x260>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f003 030f 	and.w	r3, r3, #15
 8007066:	683a      	ldr	r2, [r7, #0]
 8007068:	429a      	cmp	r2, r3
 800706a:	d1ed      	bne.n	8007048 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f003 0304 	and.w	r3, r3, #4
 8007074:	2b00      	cmp	r3, #0
 8007076:	d008      	beq.n	800708a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007078:	4b1a      	ldr	r3, [pc, #104]	@ (80070e4 <HAL_RCC_ClockConfig+0x264>)
 800707a:	689b      	ldr	r3, [r3, #8]
 800707c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	68db      	ldr	r3, [r3, #12]
 8007084:	4917      	ldr	r1, [pc, #92]	@ (80070e4 <HAL_RCC_ClockConfig+0x264>)
 8007086:	4313      	orrs	r3, r2
 8007088:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f003 0308 	and.w	r3, r3, #8
 8007092:	2b00      	cmp	r3, #0
 8007094:	d009      	beq.n	80070aa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007096:	4b13      	ldr	r3, [pc, #76]	@ (80070e4 <HAL_RCC_ClockConfig+0x264>)
 8007098:	689b      	ldr	r3, [r3, #8]
 800709a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	691b      	ldr	r3, [r3, #16]
 80070a2:	00db      	lsls	r3, r3, #3
 80070a4:	490f      	ldr	r1, [pc, #60]	@ (80070e4 <HAL_RCC_ClockConfig+0x264>)
 80070a6:	4313      	orrs	r3, r2
 80070a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80070aa:	f000 f825 	bl	80070f8 <HAL_RCC_GetSysClockFreq>
 80070ae:	4602      	mov	r2, r0
 80070b0:	4b0c      	ldr	r3, [pc, #48]	@ (80070e4 <HAL_RCC_ClockConfig+0x264>)
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	091b      	lsrs	r3, r3, #4
 80070b6:	f003 030f 	and.w	r3, r3, #15
 80070ba:	490c      	ldr	r1, [pc, #48]	@ (80070ec <HAL_RCC_ClockConfig+0x26c>)
 80070bc:	5ccb      	ldrb	r3, [r1, r3]
 80070be:	f003 031f 	and.w	r3, r3, #31
 80070c2:	fa22 f303 	lsr.w	r3, r2, r3
 80070c6:	4a0a      	ldr	r2, [pc, #40]	@ (80070f0 <HAL_RCC_ClockConfig+0x270>)
 80070c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80070ca:	4b0a      	ldr	r3, [pc, #40]	@ (80070f4 <HAL_RCC_ClockConfig+0x274>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4618      	mov	r0, r3
 80070d0:	f7fa fea8 	bl	8001e24 <HAL_InitTick>
 80070d4:	4603      	mov	r3, r0
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3718      	adds	r7, #24
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}
 80070de:	bf00      	nop
 80070e0:	40022000 	.word	0x40022000
 80070e4:	40021000 	.word	0x40021000
 80070e8:	04c4b400 	.word	0x04c4b400
 80070ec:	0800b31c 	.word	0x0800b31c
 80070f0:	20000000 	.word	0x20000000
 80070f4:	20000004 	.word	0x20000004

080070f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b087      	sub	sp, #28
 80070fc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80070fe:	4b2c      	ldr	r3, [pc, #176]	@ (80071b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	f003 030c 	and.w	r3, r3, #12
 8007106:	2b04      	cmp	r3, #4
 8007108:	d102      	bne.n	8007110 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800710a:	4b2a      	ldr	r3, [pc, #168]	@ (80071b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800710c:	613b      	str	r3, [r7, #16]
 800710e:	e047      	b.n	80071a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007110:	4b27      	ldr	r3, [pc, #156]	@ (80071b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007112:	689b      	ldr	r3, [r3, #8]
 8007114:	f003 030c 	and.w	r3, r3, #12
 8007118:	2b08      	cmp	r3, #8
 800711a:	d102      	bne.n	8007122 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800711c:	4b26      	ldr	r3, [pc, #152]	@ (80071b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800711e:	613b      	str	r3, [r7, #16]
 8007120:	e03e      	b.n	80071a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007122:	4b23      	ldr	r3, [pc, #140]	@ (80071b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007124:	689b      	ldr	r3, [r3, #8]
 8007126:	f003 030c 	and.w	r3, r3, #12
 800712a:	2b0c      	cmp	r3, #12
 800712c:	d136      	bne.n	800719c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800712e:	4b20      	ldr	r3, [pc, #128]	@ (80071b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007130:	68db      	ldr	r3, [r3, #12]
 8007132:	f003 0303 	and.w	r3, r3, #3
 8007136:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007138:	4b1d      	ldr	r3, [pc, #116]	@ (80071b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800713a:	68db      	ldr	r3, [r3, #12]
 800713c:	091b      	lsrs	r3, r3, #4
 800713e:	f003 030f 	and.w	r3, r3, #15
 8007142:	3301      	adds	r3, #1
 8007144:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2b03      	cmp	r3, #3
 800714a:	d10c      	bne.n	8007166 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800714c:	4a1a      	ldr	r2, [pc, #104]	@ (80071b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	fbb2 f3f3 	udiv	r3, r2, r3
 8007154:	4a16      	ldr	r2, [pc, #88]	@ (80071b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007156:	68d2      	ldr	r2, [r2, #12]
 8007158:	0a12      	lsrs	r2, r2, #8
 800715a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800715e:	fb02 f303 	mul.w	r3, r2, r3
 8007162:	617b      	str	r3, [r7, #20]
      break;
 8007164:	e00c      	b.n	8007180 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007166:	4a13      	ldr	r2, [pc, #76]	@ (80071b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	fbb2 f3f3 	udiv	r3, r2, r3
 800716e:	4a10      	ldr	r2, [pc, #64]	@ (80071b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007170:	68d2      	ldr	r2, [r2, #12]
 8007172:	0a12      	lsrs	r2, r2, #8
 8007174:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007178:	fb02 f303 	mul.w	r3, r2, r3
 800717c:	617b      	str	r3, [r7, #20]
      break;
 800717e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007180:	4b0b      	ldr	r3, [pc, #44]	@ (80071b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007182:	68db      	ldr	r3, [r3, #12]
 8007184:	0e5b      	lsrs	r3, r3, #25
 8007186:	f003 0303 	and.w	r3, r3, #3
 800718a:	3301      	adds	r3, #1
 800718c:	005b      	lsls	r3, r3, #1
 800718e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007190:	697a      	ldr	r2, [r7, #20]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	fbb2 f3f3 	udiv	r3, r2, r3
 8007198:	613b      	str	r3, [r7, #16]
 800719a:	e001      	b.n	80071a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800719c:	2300      	movs	r3, #0
 800719e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80071a0:	693b      	ldr	r3, [r7, #16]
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	371c      	adds	r7, #28
 80071a6:	46bd      	mov	sp, r7
 80071a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ac:	4770      	bx	lr
 80071ae:	bf00      	nop
 80071b0:	40021000 	.word	0x40021000
 80071b4:	00f42400 	.word	0x00f42400
 80071b8:	016e3600 	.word	0x016e3600

080071bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80071bc:	b480      	push	{r7}
 80071be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80071c0:	4b03      	ldr	r3, [pc, #12]	@ (80071d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80071c2:	681b      	ldr	r3, [r3, #0]
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	46bd      	mov	sp, r7
 80071c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071cc:	4770      	bx	lr
 80071ce:	bf00      	nop
 80071d0:	20000000 	.word	0x20000000

080071d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80071d8:	f7ff fff0 	bl	80071bc <HAL_RCC_GetHCLKFreq>
 80071dc:	4602      	mov	r2, r0
 80071de:	4b06      	ldr	r3, [pc, #24]	@ (80071f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80071e0:	689b      	ldr	r3, [r3, #8]
 80071e2:	0a1b      	lsrs	r3, r3, #8
 80071e4:	f003 0307 	and.w	r3, r3, #7
 80071e8:	4904      	ldr	r1, [pc, #16]	@ (80071fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80071ea:	5ccb      	ldrb	r3, [r1, r3]
 80071ec:	f003 031f 	and.w	r3, r3, #31
 80071f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	bd80      	pop	{r7, pc}
 80071f8:	40021000 	.word	0x40021000
 80071fc:	0800b32c 	.word	0x0800b32c

08007200 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007204:	f7ff ffda 	bl	80071bc <HAL_RCC_GetHCLKFreq>
 8007208:	4602      	mov	r2, r0
 800720a:	4b06      	ldr	r3, [pc, #24]	@ (8007224 <HAL_RCC_GetPCLK2Freq+0x24>)
 800720c:	689b      	ldr	r3, [r3, #8]
 800720e:	0adb      	lsrs	r3, r3, #11
 8007210:	f003 0307 	and.w	r3, r3, #7
 8007214:	4904      	ldr	r1, [pc, #16]	@ (8007228 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007216:	5ccb      	ldrb	r3, [r1, r3]
 8007218:	f003 031f 	and.w	r3, r3, #31
 800721c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007220:	4618      	mov	r0, r3
 8007222:	bd80      	pop	{r7, pc}
 8007224:	40021000 	.word	0x40021000
 8007228:	0800b32c 	.word	0x0800b32c

0800722c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800722c:	b480      	push	{r7}
 800722e:	b087      	sub	sp, #28
 8007230:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007232:	4b1e      	ldr	r3, [pc, #120]	@ (80072ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007234:	68db      	ldr	r3, [r3, #12]
 8007236:	f003 0303 	and.w	r3, r3, #3
 800723a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800723c:	4b1b      	ldr	r3, [pc, #108]	@ (80072ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800723e:	68db      	ldr	r3, [r3, #12]
 8007240:	091b      	lsrs	r3, r3, #4
 8007242:	f003 030f 	and.w	r3, r3, #15
 8007246:	3301      	adds	r3, #1
 8007248:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	2b03      	cmp	r3, #3
 800724e:	d10c      	bne.n	800726a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007250:	4a17      	ldr	r2, [pc, #92]	@ (80072b0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	fbb2 f3f3 	udiv	r3, r2, r3
 8007258:	4a14      	ldr	r2, [pc, #80]	@ (80072ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800725a:	68d2      	ldr	r2, [r2, #12]
 800725c:	0a12      	lsrs	r2, r2, #8
 800725e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007262:	fb02 f303 	mul.w	r3, r2, r3
 8007266:	617b      	str	r3, [r7, #20]
    break;
 8007268:	e00c      	b.n	8007284 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800726a:	4a12      	ldr	r2, [pc, #72]	@ (80072b4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007272:	4a0e      	ldr	r2, [pc, #56]	@ (80072ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007274:	68d2      	ldr	r2, [r2, #12]
 8007276:	0a12      	lsrs	r2, r2, #8
 8007278:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800727c:	fb02 f303 	mul.w	r3, r2, r3
 8007280:	617b      	str	r3, [r7, #20]
    break;
 8007282:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007284:	4b09      	ldr	r3, [pc, #36]	@ (80072ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007286:	68db      	ldr	r3, [r3, #12]
 8007288:	0e5b      	lsrs	r3, r3, #25
 800728a:	f003 0303 	and.w	r3, r3, #3
 800728e:	3301      	adds	r3, #1
 8007290:	005b      	lsls	r3, r3, #1
 8007292:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007294:	697a      	ldr	r2, [r7, #20]
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	fbb2 f3f3 	udiv	r3, r2, r3
 800729c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800729e:	687b      	ldr	r3, [r7, #4]
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	371c      	adds	r7, #28
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr
 80072ac:	40021000 	.word	0x40021000
 80072b0:	016e3600 	.word	0x016e3600
 80072b4:	00f42400 	.word	0x00f42400

080072b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b086      	sub	sp, #24
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80072c0:	2300      	movs	r3, #0
 80072c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80072c4:	2300      	movs	r3, #0
 80072c6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	f000 8098 	beq.w	8007406 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80072d6:	2300      	movs	r3, #0
 80072d8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80072da:	4b43      	ldr	r3, [pc, #268]	@ (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80072dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d10d      	bne.n	8007302 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80072e6:	4b40      	ldr	r3, [pc, #256]	@ (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80072e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072ea:	4a3f      	ldr	r2, [pc, #252]	@ (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80072ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80072f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80072f2:	4b3d      	ldr	r3, [pc, #244]	@ (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80072f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80072fa:	60bb      	str	r3, [r7, #8]
 80072fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80072fe:	2301      	movs	r3, #1
 8007300:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007302:	4b3a      	ldr	r3, [pc, #232]	@ (80073ec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a39      	ldr	r2, [pc, #228]	@ (80073ec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007308:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800730c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800730e:	f7fa fdd5 	bl	8001ebc <HAL_GetTick>
 8007312:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007314:	e009      	b.n	800732a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007316:	f7fa fdd1 	bl	8001ebc <HAL_GetTick>
 800731a:	4602      	mov	r2, r0
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	1ad3      	subs	r3, r2, r3
 8007320:	2b02      	cmp	r3, #2
 8007322:	d902      	bls.n	800732a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007324:	2303      	movs	r3, #3
 8007326:	74fb      	strb	r3, [r7, #19]
        break;
 8007328:	e005      	b.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800732a:	4b30      	ldr	r3, [pc, #192]	@ (80073ec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007332:	2b00      	cmp	r3, #0
 8007334:	d0ef      	beq.n	8007316 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8007336:	7cfb      	ldrb	r3, [r7, #19]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d159      	bne.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800733c:	4b2a      	ldr	r3, [pc, #168]	@ (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800733e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007342:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007346:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d01e      	beq.n	800738c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007352:	697a      	ldr	r2, [r7, #20]
 8007354:	429a      	cmp	r2, r3
 8007356:	d019      	beq.n	800738c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007358:	4b23      	ldr	r3, [pc, #140]	@ (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800735a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800735e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007362:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007364:	4b20      	ldr	r3, [pc, #128]	@ (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007366:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800736a:	4a1f      	ldr	r2, [pc, #124]	@ (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800736c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007370:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007374:	4b1c      	ldr	r3, [pc, #112]	@ (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007376:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800737a:	4a1b      	ldr	r2, [pc, #108]	@ (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800737c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007380:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007384:	4a18      	ldr	r2, [pc, #96]	@ (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	f003 0301 	and.w	r3, r3, #1
 8007392:	2b00      	cmp	r3, #0
 8007394:	d016      	beq.n	80073c4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007396:	f7fa fd91 	bl	8001ebc <HAL_GetTick>
 800739a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800739c:	e00b      	b.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800739e:	f7fa fd8d 	bl	8001ebc <HAL_GetTick>
 80073a2:	4602      	mov	r2, r0
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	1ad3      	subs	r3, r2, r3
 80073a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d902      	bls.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80073b0:	2303      	movs	r3, #3
 80073b2:	74fb      	strb	r3, [r7, #19]
            break;
 80073b4:	e006      	b.n	80073c4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80073b6:	4b0c      	ldr	r3, [pc, #48]	@ (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073bc:	f003 0302 	and.w	r3, r3, #2
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d0ec      	beq.n	800739e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80073c4:	7cfb      	ldrb	r3, [r7, #19]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d10b      	bne.n	80073e2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80073ca:	4b07      	ldr	r3, [pc, #28]	@ (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073d0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073d8:	4903      	ldr	r1, [pc, #12]	@ (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073da:	4313      	orrs	r3, r2
 80073dc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80073e0:	e008      	b.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80073e2:	7cfb      	ldrb	r3, [r7, #19]
 80073e4:	74bb      	strb	r3, [r7, #18]
 80073e6:	e005      	b.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80073e8:	40021000 	.word	0x40021000
 80073ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073f0:	7cfb      	ldrb	r3, [r7, #19]
 80073f2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80073f4:	7c7b      	ldrb	r3, [r7, #17]
 80073f6:	2b01      	cmp	r3, #1
 80073f8:	d105      	bne.n	8007406 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80073fa:	4ba6      	ldr	r3, [pc, #664]	@ (8007694 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80073fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073fe:	4aa5      	ldr	r2, [pc, #660]	@ (8007694 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007400:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007404:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f003 0301 	and.w	r3, r3, #1
 800740e:	2b00      	cmp	r3, #0
 8007410:	d00a      	beq.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007412:	4ba0      	ldr	r3, [pc, #640]	@ (8007694 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007414:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007418:	f023 0203 	bic.w	r2, r3, #3
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	685b      	ldr	r3, [r3, #4]
 8007420:	499c      	ldr	r1, [pc, #624]	@ (8007694 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007422:	4313      	orrs	r3, r2
 8007424:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f003 0302 	and.w	r3, r3, #2
 8007430:	2b00      	cmp	r3, #0
 8007432:	d00a      	beq.n	800744a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007434:	4b97      	ldr	r3, [pc, #604]	@ (8007694 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007436:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800743a:	f023 020c 	bic.w	r2, r3, #12
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	689b      	ldr	r3, [r3, #8]
 8007442:	4994      	ldr	r1, [pc, #592]	@ (8007694 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007444:	4313      	orrs	r3, r2
 8007446:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f003 0304 	and.w	r3, r3, #4
 8007452:	2b00      	cmp	r3, #0
 8007454:	d00a      	beq.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007456:	4b8f      	ldr	r3, [pc, #572]	@ (8007694 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007458:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800745c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	68db      	ldr	r3, [r3, #12]
 8007464:	498b      	ldr	r1, [pc, #556]	@ (8007694 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007466:	4313      	orrs	r3, r2
 8007468:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f003 0308 	and.w	r3, r3, #8
 8007474:	2b00      	cmp	r3, #0
 8007476:	d00a      	beq.n	800748e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007478:	4b86      	ldr	r3, [pc, #536]	@ (8007694 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800747a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800747e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	691b      	ldr	r3, [r3, #16]
 8007486:	4983      	ldr	r1, [pc, #524]	@ (8007694 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007488:	4313      	orrs	r3, r2
 800748a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f003 0320 	and.w	r3, r3, #32
 8007496:	2b00      	cmp	r3, #0
 8007498:	d00a      	beq.n	80074b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800749a:	4b7e      	ldr	r3, [pc, #504]	@ (8007694 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800749c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074a0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	695b      	ldr	r3, [r3, #20]
 80074a8:	497a      	ldr	r1, [pc, #488]	@ (8007694 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80074aa:	4313      	orrs	r3, r2
 80074ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d00a      	beq.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80074bc:	4b75      	ldr	r3, [pc, #468]	@ (8007694 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80074be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074c2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	699b      	ldr	r3, [r3, #24]
 80074ca:	4972      	ldr	r1, [pc, #456]	@ (8007694 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80074cc:	4313      	orrs	r3, r2
 80074ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d00a      	beq.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80074de:	4b6d      	ldr	r3, [pc, #436]	@ (8007694 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80074e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074e4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	69db      	ldr	r3, [r3, #28]
 80074ec:	4969      	ldr	r1, [pc, #420]	@ (8007694 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80074ee:	4313      	orrs	r3, r2
 80074f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d00a      	beq.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007500:	4b64      	ldr	r3, [pc, #400]	@ (8007694 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007502:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007506:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6a1b      	ldr	r3, [r3, #32]
 800750e:	4961      	ldr	r1, [pc, #388]	@ (8007694 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007510:	4313      	orrs	r3, r2
 8007512:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800751e:	2b00      	cmp	r3, #0
 8007520:	d00a      	beq.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007522:	4b5c      	ldr	r3, [pc, #368]	@ (8007694 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007524:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007528:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007530:	4958      	ldr	r1, [pc, #352]	@ (8007694 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007532:	4313      	orrs	r3, r2
 8007534:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007540:	2b00      	cmp	r3, #0
 8007542:	d015      	beq.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007544:	4b53      	ldr	r3, [pc, #332]	@ (8007694 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007546:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800754a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007552:	4950      	ldr	r1, [pc, #320]	@ (8007694 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007554:	4313      	orrs	r3, r2
 8007556:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800755e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007562:	d105      	bne.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007564:	4b4b      	ldr	r3, [pc, #300]	@ (8007694 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007566:	68db      	ldr	r3, [r3, #12]
 8007568:	4a4a      	ldr	r2, [pc, #296]	@ (8007694 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800756a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800756e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007578:	2b00      	cmp	r3, #0
 800757a:	d015      	beq.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800757c:	4b45      	ldr	r3, [pc, #276]	@ (8007694 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800757e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007582:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800758a:	4942      	ldr	r1, [pc, #264]	@ (8007694 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800758c:	4313      	orrs	r3, r2
 800758e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007596:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800759a:	d105      	bne.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800759c:	4b3d      	ldr	r3, [pc, #244]	@ (8007694 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800759e:	68db      	ldr	r3, [r3, #12]
 80075a0:	4a3c      	ldr	r2, [pc, #240]	@ (8007694 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80075a6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d015      	beq.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80075b4:	4b37      	ldr	r3, [pc, #220]	@ (8007694 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075ba:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075c2:	4934      	ldr	r1, [pc, #208]	@ (8007694 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075c4:	4313      	orrs	r3, r2
 80075c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80075d2:	d105      	bne.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80075d4:	4b2f      	ldr	r3, [pc, #188]	@ (8007694 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075d6:	68db      	ldr	r3, [r3, #12]
 80075d8:	4a2e      	ldr	r2, [pc, #184]	@ (8007694 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80075de:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d015      	beq.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80075ec:	4b29      	ldr	r3, [pc, #164]	@ (8007694 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075f2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075fa:	4926      	ldr	r1, [pc, #152]	@ (8007694 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075fc:	4313      	orrs	r3, r2
 80075fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007606:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800760a:	d105      	bne.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800760c:	4b21      	ldr	r3, [pc, #132]	@ (8007694 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800760e:	68db      	ldr	r3, [r3, #12]
 8007610:	4a20      	ldr	r2, [pc, #128]	@ (8007694 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007612:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007616:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007620:	2b00      	cmp	r3, #0
 8007622:	d015      	beq.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007624:	4b1b      	ldr	r3, [pc, #108]	@ (8007694 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007626:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800762a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007632:	4918      	ldr	r1, [pc, #96]	@ (8007694 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007634:	4313      	orrs	r3, r2
 8007636:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800763e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007642:	d105      	bne.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007644:	4b13      	ldr	r3, [pc, #76]	@ (8007694 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007646:	68db      	ldr	r3, [r3, #12]
 8007648:	4a12      	ldr	r2, [pc, #72]	@ (8007694 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800764a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800764e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007658:	2b00      	cmp	r3, #0
 800765a:	d015      	beq.n	8007688 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800765c:	4b0d      	ldr	r3, [pc, #52]	@ (8007694 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800765e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007662:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800766a:	490a      	ldr	r1, [pc, #40]	@ (8007694 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800766c:	4313      	orrs	r3, r2
 800766e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007676:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800767a:	d105      	bne.n	8007688 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800767c:	4b05      	ldr	r3, [pc, #20]	@ (8007694 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800767e:	68db      	ldr	r3, [r3, #12]
 8007680:	4a04      	ldr	r2, [pc, #16]	@ (8007694 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007682:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007686:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007688:	7cbb      	ldrb	r3, [r7, #18]
}
 800768a:	4618      	mov	r0, r3
 800768c:	3718      	adds	r7, #24
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}
 8007692:	bf00      	nop
 8007694:	40021000 	.word	0x40021000

08007698 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b082      	sub	sp, #8
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d101      	bne.n	80076aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80076a6:	2301      	movs	r3, #1
 80076a8:	e049      	b.n	800773e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80076b0:	b2db      	uxtb	r3, r3
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d106      	bne.n	80076c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2200      	movs	r2, #0
 80076ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f7fa f9b4 	bl	8001a2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2202      	movs	r2, #2
 80076c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681a      	ldr	r2, [r3, #0]
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	3304      	adds	r3, #4
 80076d4:	4619      	mov	r1, r3
 80076d6:	4610      	mov	r0, r2
 80076d8:	f000 fe16 	bl	8008308 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2201      	movs	r2, #1
 80076e0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2201      	movs	r2, #1
 80076e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2201      	movs	r2, #1
 80076f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2201      	movs	r2, #1
 80076f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2201      	movs	r2, #1
 8007700:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2201      	movs	r2, #1
 8007708:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2201      	movs	r2, #1
 8007710:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2201      	movs	r2, #1
 8007718:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2201      	movs	r2, #1
 8007720:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2201      	movs	r2, #1
 8007728:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2201      	movs	r2, #1
 8007730:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2201      	movs	r2, #1
 8007738:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800773c:	2300      	movs	r3, #0
}
 800773e:	4618      	mov	r0, r3
 8007740:	3708      	adds	r7, #8
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}
	...

08007748 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007748:	b480      	push	{r7}
 800774a:	b085      	sub	sp, #20
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007756:	b2db      	uxtb	r3, r3
 8007758:	2b01      	cmp	r3, #1
 800775a:	d001      	beq.n	8007760 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800775c:	2301      	movs	r3, #1
 800775e:	e042      	b.n	80077e6 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2202      	movs	r2, #2
 8007764:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4a21      	ldr	r2, [pc, #132]	@ (80077f4 <HAL_TIM_Base_Start+0xac>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d018      	beq.n	80077a4 <HAL_TIM_Base_Start+0x5c>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800777a:	d013      	beq.n	80077a4 <HAL_TIM_Base_Start+0x5c>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a1d      	ldr	r2, [pc, #116]	@ (80077f8 <HAL_TIM_Base_Start+0xb0>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d00e      	beq.n	80077a4 <HAL_TIM_Base_Start+0x5c>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a1c      	ldr	r2, [pc, #112]	@ (80077fc <HAL_TIM_Base_Start+0xb4>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d009      	beq.n	80077a4 <HAL_TIM_Base_Start+0x5c>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a1a      	ldr	r2, [pc, #104]	@ (8007800 <HAL_TIM_Base_Start+0xb8>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d004      	beq.n	80077a4 <HAL_TIM_Base_Start+0x5c>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4a19      	ldr	r2, [pc, #100]	@ (8007804 <HAL_TIM_Base_Start+0xbc>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d115      	bne.n	80077d0 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	689a      	ldr	r2, [r3, #8]
 80077aa:	4b17      	ldr	r3, [pc, #92]	@ (8007808 <HAL_TIM_Base_Start+0xc0>)
 80077ac:	4013      	ands	r3, r2
 80077ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	2b06      	cmp	r3, #6
 80077b4:	d015      	beq.n	80077e2 <HAL_TIM_Base_Start+0x9a>
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80077bc:	d011      	beq.n	80077e2 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	681a      	ldr	r2, [r3, #0]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f042 0201 	orr.w	r2, r2, #1
 80077cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077ce:	e008      	b.n	80077e2 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	681a      	ldr	r2, [r3, #0]
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f042 0201 	orr.w	r2, r2, #1
 80077de:	601a      	str	r2, [r3, #0]
 80077e0:	e000      	b.n	80077e4 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077e2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80077e4:	2300      	movs	r3, #0
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	3714      	adds	r7, #20
 80077ea:	46bd      	mov	sp, r7
 80077ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f0:	4770      	bx	lr
 80077f2:	bf00      	nop
 80077f4:	40012c00 	.word	0x40012c00
 80077f8:	40000400 	.word	0x40000400
 80077fc:	40000800 	.word	0x40000800
 8007800:	40013400 	.word	0x40013400
 8007804:	40014000 	.word	0x40014000
 8007808:	00010007 	.word	0x00010007

0800780c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b082      	sub	sp, #8
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d101      	bne.n	800781e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800781a:	2301      	movs	r3, #1
 800781c:	e049      	b.n	80078b2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007824:	b2db      	uxtb	r3, r3
 8007826:	2b00      	cmp	r3, #0
 8007828:	d106      	bne.n	8007838 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2200      	movs	r2, #0
 800782e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f000 f841 	bl	80078ba <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2202      	movs	r2, #2
 800783c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681a      	ldr	r2, [r3, #0]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	3304      	adds	r3, #4
 8007848:	4619      	mov	r1, r3
 800784a:	4610      	mov	r0, r2
 800784c:	f000 fd5c 	bl	8008308 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2201      	movs	r2, #1
 8007854:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2201      	movs	r2, #1
 800785c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2201      	movs	r2, #1
 8007864:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2201      	movs	r2, #1
 800786c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2201      	movs	r2, #1
 8007874:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2201      	movs	r2, #1
 800787c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2201      	movs	r2, #1
 8007884:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2201      	movs	r2, #1
 800788c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2201      	movs	r2, #1
 8007894:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2201      	movs	r2, #1
 800789c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2201      	movs	r2, #1
 80078a4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2201      	movs	r2, #1
 80078ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80078b0:	2300      	movs	r3, #0
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	3708      	adds	r7, #8
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd80      	pop	{r7, pc}

080078ba <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80078ba:	b480      	push	{r7}
 80078bc:	b083      	sub	sp, #12
 80078be:	af00      	add	r7, sp, #0
 80078c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80078c2:	bf00      	nop
 80078c4:	370c      	adds	r7, #12
 80078c6:	46bd      	mov	sp, r7
 80078c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078cc:	4770      	bx	lr
	...

080078d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b084      	sub	sp, #16
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
 80078d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d109      	bne.n	80078f4 <HAL_TIM_PWM_Start+0x24>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80078e6:	b2db      	uxtb	r3, r3
 80078e8:	2b01      	cmp	r3, #1
 80078ea:	bf14      	ite	ne
 80078ec:	2301      	movne	r3, #1
 80078ee:	2300      	moveq	r3, #0
 80078f0:	b2db      	uxtb	r3, r3
 80078f2:	e03c      	b.n	800796e <HAL_TIM_PWM_Start+0x9e>
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	2b04      	cmp	r3, #4
 80078f8:	d109      	bne.n	800790e <HAL_TIM_PWM_Start+0x3e>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007900:	b2db      	uxtb	r3, r3
 8007902:	2b01      	cmp	r3, #1
 8007904:	bf14      	ite	ne
 8007906:	2301      	movne	r3, #1
 8007908:	2300      	moveq	r3, #0
 800790a:	b2db      	uxtb	r3, r3
 800790c:	e02f      	b.n	800796e <HAL_TIM_PWM_Start+0x9e>
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	2b08      	cmp	r3, #8
 8007912:	d109      	bne.n	8007928 <HAL_TIM_PWM_Start+0x58>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800791a:	b2db      	uxtb	r3, r3
 800791c:	2b01      	cmp	r3, #1
 800791e:	bf14      	ite	ne
 8007920:	2301      	movne	r3, #1
 8007922:	2300      	moveq	r3, #0
 8007924:	b2db      	uxtb	r3, r3
 8007926:	e022      	b.n	800796e <HAL_TIM_PWM_Start+0x9e>
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	2b0c      	cmp	r3, #12
 800792c:	d109      	bne.n	8007942 <HAL_TIM_PWM_Start+0x72>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007934:	b2db      	uxtb	r3, r3
 8007936:	2b01      	cmp	r3, #1
 8007938:	bf14      	ite	ne
 800793a:	2301      	movne	r3, #1
 800793c:	2300      	moveq	r3, #0
 800793e:	b2db      	uxtb	r3, r3
 8007940:	e015      	b.n	800796e <HAL_TIM_PWM_Start+0x9e>
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	2b10      	cmp	r3, #16
 8007946:	d109      	bne.n	800795c <HAL_TIM_PWM_Start+0x8c>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800794e:	b2db      	uxtb	r3, r3
 8007950:	2b01      	cmp	r3, #1
 8007952:	bf14      	ite	ne
 8007954:	2301      	movne	r3, #1
 8007956:	2300      	moveq	r3, #0
 8007958:	b2db      	uxtb	r3, r3
 800795a:	e008      	b.n	800796e <HAL_TIM_PWM_Start+0x9e>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007962:	b2db      	uxtb	r3, r3
 8007964:	2b01      	cmp	r3, #1
 8007966:	bf14      	ite	ne
 8007968:	2301      	movne	r3, #1
 800796a:	2300      	moveq	r3, #0
 800796c:	b2db      	uxtb	r3, r3
 800796e:	2b00      	cmp	r3, #0
 8007970:	d001      	beq.n	8007976 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007972:	2301      	movs	r3, #1
 8007974:	e097      	b.n	8007aa6 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d104      	bne.n	8007986 <HAL_TIM_PWM_Start+0xb6>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2202      	movs	r2, #2
 8007980:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007984:	e023      	b.n	80079ce <HAL_TIM_PWM_Start+0xfe>
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	2b04      	cmp	r3, #4
 800798a:	d104      	bne.n	8007996 <HAL_TIM_PWM_Start+0xc6>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2202      	movs	r2, #2
 8007990:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007994:	e01b      	b.n	80079ce <HAL_TIM_PWM_Start+0xfe>
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	2b08      	cmp	r3, #8
 800799a:	d104      	bne.n	80079a6 <HAL_TIM_PWM_Start+0xd6>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2202      	movs	r2, #2
 80079a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80079a4:	e013      	b.n	80079ce <HAL_TIM_PWM_Start+0xfe>
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	2b0c      	cmp	r3, #12
 80079aa:	d104      	bne.n	80079b6 <HAL_TIM_PWM_Start+0xe6>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2202      	movs	r2, #2
 80079b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80079b4:	e00b      	b.n	80079ce <HAL_TIM_PWM_Start+0xfe>
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	2b10      	cmp	r3, #16
 80079ba:	d104      	bne.n	80079c6 <HAL_TIM_PWM_Start+0xf6>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2202      	movs	r2, #2
 80079c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80079c4:	e003      	b.n	80079ce <HAL_TIM_PWM_Start+0xfe>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2202      	movs	r2, #2
 80079ca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	2201      	movs	r2, #1
 80079d4:	6839      	ldr	r1, [r7, #0]
 80079d6:	4618      	mov	r0, r3
 80079d8:	f001 f92c 	bl	8008c34 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a33      	ldr	r2, [pc, #204]	@ (8007ab0 <HAL_TIM_PWM_Start+0x1e0>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d013      	beq.n	8007a0e <HAL_TIM_PWM_Start+0x13e>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a32      	ldr	r2, [pc, #200]	@ (8007ab4 <HAL_TIM_PWM_Start+0x1e4>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d00e      	beq.n	8007a0e <HAL_TIM_PWM_Start+0x13e>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a30      	ldr	r2, [pc, #192]	@ (8007ab8 <HAL_TIM_PWM_Start+0x1e8>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d009      	beq.n	8007a0e <HAL_TIM_PWM_Start+0x13e>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4a2f      	ldr	r2, [pc, #188]	@ (8007abc <HAL_TIM_PWM_Start+0x1ec>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d004      	beq.n	8007a0e <HAL_TIM_PWM_Start+0x13e>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a2d      	ldr	r2, [pc, #180]	@ (8007ac0 <HAL_TIM_PWM_Start+0x1f0>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d101      	bne.n	8007a12 <HAL_TIM_PWM_Start+0x142>
 8007a0e:	2301      	movs	r3, #1
 8007a10:	e000      	b.n	8007a14 <HAL_TIM_PWM_Start+0x144>
 8007a12:	2300      	movs	r3, #0
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d007      	beq.n	8007a28 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007a26:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	4a20      	ldr	r2, [pc, #128]	@ (8007ab0 <HAL_TIM_PWM_Start+0x1e0>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d018      	beq.n	8007a64 <HAL_TIM_PWM_Start+0x194>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a3a:	d013      	beq.n	8007a64 <HAL_TIM_PWM_Start+0x194>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4a20      	ldr	r2, [pc, #128]	@ (8007ac4 <HAL_TIM_PWM_Start+0x1f4>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d00e      	beq.n	8007a64 <HAL_TIM_PWM_Start+0x194>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4a1f      	ldr	r2, [pc, #124]	@ (8007ac8 <HAL_TIM_PWM_Start+0x1f8>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d009      	beq.n	8007a64 <HAL_TIM_PWM_Start+0x194>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	4a17      	ldr	r2, [pc, #92]	@ (8007ab4 <HAL_TIM_PWM_Start+0x1e4>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d004      	beq.n	8007a64 <HAL_TIM_PWM_Start+0x194>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4a16      	ldr	r2, [pc, #88]	@ (8007ab8 <HAL_TIM_PWM_Start+0x1e8>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d115      	bne.n	8007a90 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	689a      	ldr	r2, [r3, #8]
 8007a6a:	4b18      	ldr	r3, [pc, #96]	@ (8007acc <HAL_TIM_PWM_Start+0x1fc>)
 8007a6c:	4013      	ands	r3, r2
 8007a6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	2b06      	cmp	r3, #6
 8007a74:	d015      	beq.n	8007aa2 <HAL_TIM_PWM_Start+0x1d2>
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a7c:	d011      	beq.n	8007aa2 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	681a      	ldr	r2, [r3, #0]
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f042 0201 	orr.w	r2, r2, #1
 8007a8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a8e:	e008      	b.n	8007aa2 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	681a      	ldr	r2, [r3, #0]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f042 0201 	orr.w	r2, r2, #1
 8007a9e:	601a      	str	r2, [r3, #0]
 8007aa0:	e000      	b.n	8007aa4 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007aa2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007aa4:	2300      	movs	r3, #0
}
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	3710      	adds	r7, #16
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}
 8007aae:	bf00      	nop
 8007ab0:	40012c00 	.word	0x40012c00
 8007ab4:	40013400 	.word	0x40013400
 8007ab8:	40014000 	.word	0x40014000
 8007abc:	40014400 	.word	0x40014400
 8007ac0:	40014800 	.word	0x40014800
 8007ac4:	40000400 	.word	0x40000400
 8007ac8:	40000800 	.word	0x40000800
 8007acc:	00010007 	.word	0x00010007

08007ad0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b082      	sub	sp, #8
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
 8007ad8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	2200      	movs	r2, #0
 8007ae0:	6839      	ldr	r1, [r7, #0]
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	f001 f8a6 	bl	8008c34 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4a3e      	ldr	r2, [pc, #248]	@ (8007be8 <HAL_TIM_PWM_Stop+0x118>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d013      	beq.n	8007b1a <HAL_TIM_PWM_Stop+0x4a>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4a3d      	ldr	r2, [pc, #244]	@ (8007bec <HAL_TIM_PWM_Stop+0x11c>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d00e      	beq.n	8007b1a <HAL_TIM_PWM_Stop+0x4a>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	4a3b      	ldr	r2, [pc, #236]	@ (8007bf0 <HAL_TIM_PWM_Stop+0x120>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d009      	beq.n	8007b1a <HAL_TIM_PWM_Stop+0x4a>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4a3a      	ldr	r2, [pc, #232]	@ (8007bf4 <HAL_TIM_PWM_Stop+0x124>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d004      	beq.n	8007b1a <HAL_TIM_PWM_Stop+0x4a>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4a38      	ldr	r2, [pc, #224]	@ (8007bf8 <HAL_TIM_PWM_Stop+0x128>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d101      	bne.n	8007b1e <HAL_TIM_PWM_Stop+0x4e>
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	e000      	b.n	8007b20 <HAL_TIM_PWM_Stop+0x50>
 8007b1e:	2300      	movs	r3, #0
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d017      	beq.n	8007b54 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	6a1a      	ldr	r2, [r3, #32]
 8007b2a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007b2e:	4013      	ands	r3, r2
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d10f      	bne.n	8007b54 <HAL_TIM_PWM_Stop+0x84>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	6a1a      	ldr	r2, [r3, #32]
 8007b3a:	f244 4344 	movw	r3, #17476	@ 0x4444
 8007b3e:	4013      	ands	r3, r2
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d107      	bne.n	8007b54 <HAL_TIM_PWM_Stop+0x84>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007b52:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	6a1a      	ldr	r2, [r3, #32]
 8007b5a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007b5e:	4013      	ands	r3, r2
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d10f      	bne.n	8007b84 <HAL_TIM_PWM_Stop+0xb4>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	6a1a      	ldr	r2, [r3, #32]
 8007b6a:	f244 4344 	movw	r3, #17476	@ 0x4444
 8007b6e:	4013      	ands	r3, r2
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d107      	bne.n	8007b84 <HAL_TIM_PWM_Stop+0xb4>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	681a      	ldr	r2, [r3, #0]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f022 0201 	bic.w	r2, r2, #1
 8007b82:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d104      	bne.n	8007b94 <HAL_TIM_PWM_Stop+0xc4>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2201      	movs	r2, #1
 8007b8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007b92:	e023      	b.n	8007bdc <HAL_TIM_PWM_Stop+0x10c>
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	2b04      	cmp	r3, #4
 8007b98:	d104      	bne.n	8007ba4 <HAL_TIM_PWM_Stop+0xd4>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2201      	movs	r2, #1
 8007b9e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007ba2:	e01b      	b.n	8007bdc <HAL_TIM_PWM_Stop+0x10c>
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	2b08      	cmp	r3, #8
 8007ba8:	d104      	bne.n	8007bb4 <HAL_TIM_PWM_Stop+0xe4>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2201      	movs	r2, #1
 8007bae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007bb2:	e013      	b.n	8007bdc <HAL_TIM_PWM_Stop+0x10c>
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	2b0c      	cmp	r3, #12
 8007bb8:	d104      	bne.n	8007bc4 <HAL_TIM_PWM_Stop+0xf4>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2201      	movs	r2, #1
 8007bbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007bc2:	e00b      	b.n	8007bdc <HAL_TIM_PWM_Stop+0x10c>
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	2b10      	cmp	r3, #16
 8007bc8:	d104      	bne.n	8007bd4 <HAL_TIM_PWM_Stop+0x104>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2201      	movs	r2, #1
 8007bce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007bd2:	e003      	b.n	8007bdc <HAL_TIM_PWM_Stop+0x10c>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8007bdc:	2300      	movs	r3, #0
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3708      	adds	r7, #8
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}
 8007be6:	bf00      	nop
 8007be8:	40012c00 	.word	0x40012c00
 8007bec:	40013400 	.word	0x40013400
 8007bf0:	40014000 	.word	0x40014000
 8007bf4:	40014400 	.word	0x40014400
 8007bf8:	40014800 	.word	0x40014800

08007bfc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b084      	sub	sp, #16
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	68db      	ldr	r3, [r3, #12]
 8007c0a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	691b      	ldr	r3, [r3, #16]
 8007c12:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	f003 0302 	and.w	r3, r3, #2
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d020      	beq.n	8007c60 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	f003 0302 	and.w	r3, r3, #2
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d01b      	beq.n	8007c60 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f06f 0202 	mvn.w	r2, #2
 8007c30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2201      	movs	r2, #1
 8007c36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	699b      	ldr	r3, [r3, #24]
 8007c3e:	f003 0303 	and.w	r3, r3, #3
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d003      	beq.n	8007c4e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f003 fa3a 	bl	800b0c0 <HAL_TIM_IC_CaptureCallback>
 8007c4c:	e005      	b.n	8007c5a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f000 fb3c 	bl	80082cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f000 fb43 	bl	80082e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	f003 0304 	and.w	r3, r3, #4
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d020      	beq.n	8007cac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	f003 0304 	and.w	r3, r3, #4
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d01b      	beq.n	8007cac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f06f 0204 	mvn.w	r2, #4
 8007c7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2202      	movs	r2, #2
 8007c82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	699b      	ldr	r3, [r3, #24]
 8007c8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d003      	beq.n	8007c9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f003 fa14 	bl	800b0c0 <HAL_TIM_IC_CaptureCallback>
 8007c98:	e005      	b.n	8007ca6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f000 fb16 	bl	80082cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f000 fb1d 	bl	80082e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	f003 0308 	and.w	r3, r3, #8
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d020      	beq.n	8007cf8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	f003 0308 	and.w	r3, r3, #8
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d01b      	beq.n	8007cf8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f06f 0208 	mvn.w	r2, #8
 8007cc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2204      	movs	r2, #4
 8007cce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	69db      	ldr	r3, [r3, #28]
 8007cd6:	f003 0303 	and.w	r3, r3, #3
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d003      	beq.n	8007ce6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f003 f9ee 	bl	800b0c0 <HAL_TIM_IC_CaptureCallback>
 8007ce4:	e005      	b.n	8007cf2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f000 faf0 	bl	80082cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f000 faf7 	bl	80082e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	f003 0310 	and.w	r3, r3, #16
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d020      	beq.n	8007d44 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	f003 0310 	and.w	r3, r3, #16
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d01b      	beq.n	8007d44 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f06f 0210 	mvn.w	r2, #16
 8007d14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2208      	movs	r2, #8
 8007d1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	69db      	ldr	r3, [r3, #28]
 8007d22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d003      	beq.n	8007d32 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f003 f9c8 	bl	800b0c0 <HAL_TIM_IC_CaptureCallback>
 8007d30:	e005      	b.n	8007d3e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f000 faca 	bl	80082cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f000 fad1 	bl	80082e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2200      	movs	r2, #0
 8007d42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	f003 0301 	and.w	r3, r3, #1
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d00c      	beq.n	8007d68 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	f003 0301 	and.w	r3, r3, #1
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d007      	beq.n	8007d68 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f06f 0201 	mvn.w	r2, #1
 8007d60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f000 faa8 	bl	80082b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d104      	bne.n	8007d7c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d00c      	beq.n	8007d96 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d007      	beq.n	8007d96 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007d8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f001 fbbf 	bl	8009514 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d00c      	beq.n	8007dba <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d007      	beq.n	8007dba <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007db2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f001 fbb7 	bl	8009528 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d00c      	beq.n	8007dde <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d007      	beq.n	8007dde <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007dd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f000 fa8b 	bl	80082f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	f003 0320 	and.w	r3, r3, #32
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d00c      	beq.n	8007e02 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	f003 0320 	and.w	r3, r3, #32
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d007      	beq.n	8007e02 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f06f 0220 	mvn.w	r2, #32
 8007dfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f001 fb7f 	bl	8009500 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d00c      	beq.n	8007e26 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d007      	beq.n	8007e26 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8007e1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f001 fb8b 	bl	800953c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d00c      	beq.n	8007e4a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d007      	beq.n	8007e4a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8007e42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f001 fb83 	bl	8009550 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d00c      	beq.n	8007e6e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d007      	beq.n	8007e6e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8007e66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f001 fb7b 	bl	8009564 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d00c      	beq.n	8007e92 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d007      	beq.n	8007e92 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8007e8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f001 fb73 	bl	8009578 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007e92:	bf00      	nop
 8007e94:	3710      	adds	r7, #16
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}
	...

08007e9c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b086      	sub	sp, #24
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	60f8      	str	r0, [r7, #12]
 8007ea4:	60b9      	str	r1, [r7, #8]
 8007ea6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007eb2:	2b01      	cmp	r3, #1
 8007eb4:	d101      	bne.n	8007eba <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007eb6:	2302      	movs	r3, #2
 8007eb8:	e0ff      	b.n	80080ba <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	2201      	movs	r2, #1
 8007ebe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2b14      	cmp	r3, #20
 8007ec6:	f200 80f0 	bhi.w	80080aa <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007eca:	a201      	add	r2, pc, #4	@ (adr r2, 8007ed0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ed0:	08007f25 	.word	0x08007f25
 8007ed4:	080080ab 	.word	0x080080ab
 8007ed8:	080080ab 	.word	0x080080ab
 8007edc:	080080ab 	.word	0x080080ab
 8007ee0:	08007f65 	.word	0x08007f65
 8007ee4:	080080ab 	.word	0x080080ab
 8007ee8:	080080ab 	.word	0x080080ab
 8007eec:	080080ab 	.word	0x080080ab
 8007ef0:	08007fa7 	.word	0x08007fa7
 8007ef4:	080080ab 	.word	0x080080ab
 8007ef8:	080080ab 	.word	0x080080ab
 8007efc:	080080ab 	.word	0x080080ab
 8007f00:	08007fe7 	.word	0x08007fe7
 8007f04:	080080ab 	.word	0x080080ab
 8007f08:	080080ab 	.word	0x080080ab
 8007f0c:	080080ab 	.word	0x080080ab
 8007f10:	08008029 	.word	0x08008029
 8007f14:	080080ab 	.word	0x080080ab
 8007f18:	080080ab 	.word	0x080080ab
 8007f1c:	080080ab 	.word	0x080080ab
 8007f20:	08008069 	.word	0x08008069
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	68b9      	ldr	r1, [r7, #8]
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f000 fa88 	bl	8008440 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	699a      	ldr	r2, [r3, #24]
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f042 0208 	orr.w	r2, r2, #8
 8007f3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	699a      	ldr	r2, [r3, #24]
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f022 0204 	bic.w	r2, r2, #4
 8007f4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	6999      	ldr	r1, [r3, #24]
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	691a      	ldr	r2, [r3, #16]
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	430a      	orrs	r2, r1
 8007f60:	619a      	str	r2, [r3, #24]
      break;
 8007f62:	e0a5      	b.n	80080b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	68b9      	ldr	r1, [r7, #8]
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	f000 faf8 	bl	8008560 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	699a      	ldr	r2, [r3, #24]
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007f7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	699a      	ldr	r2, [r3, #24]
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007f8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	6999      	ldr	r1, [r3, #24]
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	691b      	ldr	r3, [r3, #16]
 8007f9a:	021a      	lsls	r2, r3, #8
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	430a      	orrs	r2, r1
 8007fa2:	619a      	str	r2, [r3, #24]
      break;
 8007fa4:	e084      	b.n	80080b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	68b9      	ldr	r1, [r7, #8]
 8007fac:	4618      	mov	r0, r3
 8007fae:	f000 fb61 	bl	8008674 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	69da      	ldr	r2, [r3, #28]
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f042 0208 	orr.w	r2, r2, #8
 8007fc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	69da      	ldr	r2, [r3, #28]
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f022 0204 	bic.w	r2, r2, #4
 8007fd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	69d9      	ldr	r1, [r3, #28]
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	691a      	ldr	r2, [r3, #16]
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	430a      	orrs	r2, r1
 8007fe2:	61da      	str	r2, [r3, #28]
      break;
 8007fe4:	e064      	b.n	80080b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	68b9      	ldr	r1, [r7, #8]
 8007fec:	4618      	mov	r0, r3
 8007fee:	f000 fbc9 	bl	8008784 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	69da      	ldr	r2, [r3, #28]
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008000:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	69da      	ldr	r2, [r3, #28]
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008010:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	69d9      	ldr	r1, [r3, #28]
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	691b      	ldr	r3, [r3, #16]
 800801c:	021a      	lsls	r2, r3, #8
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	430a      	orrs	r2, r1
 8008024:	61da      	str	r2, [r3, #28]
      break;
 8008026:	e043      	b.n	80080b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	68b9      	ldr	r1, [r7, #8]
 800802e:	4618      	mov	r0, r3
 8008030:	f000 fc32 	bl	8008898 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f042 0208 	orr.w	r2, r2, #8
 8008042:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f022 0204 	bic.w	r2, r2, #4
 8008052:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	691a      	ldr	r2, [r3, #16]
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	430a      	orrs	r2, r1
 8008064:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008066:	e023      	b.n	80080b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	68b9      	ldr	r1, [r7, #8]
 800806e:	4618      	mov	r0, r3
 8008070:	f000 fc76 	bl	8008960 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008082:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008092:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	691b      	ldr	r3, [r3, #16]
 800809e:	021a      	lsls	r2, r3, #8
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	430a      	orrs	r2, r1
 80080a6:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80080a8:	e002      	b.n	80080b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80080aa:	2301      	movs	r3, #1
 80080ac:	75fb      	strb	r3, [r7, #23]
      break;
 80080ae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	2200      	movs	r2, #0
 80080b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80080b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3718      	adds	r7, #24
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}
 80080c2:	bf00      	nop

080080c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b084      	sub	sp, #16
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
 80080cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80080ce:	2300      	movs	r3, #0
 80080d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80080d8:	2b01      	cmp	r3, #1
 80080da:	d101      	bne.n	80080e0 <HAL_TIM_ConfigClockSource+0x1c>
 80080dc:	2302      	movs	r3, #2
 80080de:	e0de      	b.n	800829e <HAL_TIM_ConfigClockSource+0x1da>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2201      	movs	r2, #1
 80080e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2202      	movs	r2, #2
 80080ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	689b      	ldr	r3, [r3, #8]
 80080f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80080fe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008102:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800810a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	68ba      	ldr	r2, [r7, #8]
 8008112:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	4a63      	ldr	r2, [pc, #396]	@ (80082a8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800811a:	4293      	cmp	r3, r2
 800811c:	f000 80a9 	beq.w	8008272 <HAL_TIM_ConfigClockSource+0x1ae>
 8008120:	4a61      	ldr	r2, [pc, #388]	@ (80082a8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008122:	4293      	cmp	r3, r2
 8008124:	f200 80ae 	bhi.w	8008284 <HAL_TIM_ConfigClockSource+0x1c0>
 8008128:	4a60      	ldr	r2, [pc, #384]	@ (80082ac <HAL_TIM_ConfigClockSource+0x1e8>)
 800812a:	4293      	cmp	r3, r2
 800812c:	f000 80a1 	beq.w	8008272 <HAL_TIM_ConfigClockSource+0x1ae>
 8008130:	4a5e      	ldr	r2, [pc, #376]	@ (80082ac <HAL_TIM_ConfigClockSource+0x1e8>)
 8008132:	4293      	cmp	r3, r2
 8008134:	f200 80a6 	bhi.w	8008284 <HAL_TIM_ConfigClockSource+0x1c0>
 8008138:	4a5d      	ldr	r2, [pc, #372]	@ (80082b0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800813a:	4293      	cmp	r3, r2
 800813c:	f000 8099 	beq.w	8008272 <HAL_TIM_ConfigClockSource+0x1ae>
 8008140:	4a5b      	ldr	r2, [pc, #364]	@ (80082b0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8008142:	4293      	cmp	r3, r2
 8008144:	f200 809e 	bhi.w	8008284 <HAL_TIM_ConfigClockSource+0x1c0>
 8008148:	4a5a      	ldr	r2, [pc, #360]	@ (80082b4 <HAL_TIM_ConfigClockSource+0x1f0>)
 800814a:	4293      	cmp	r3, r2
 800814c:	f000 8091 	beq.w	8008272 <HAL_TIM_ConfigClockSource+0x1ae>
 8008150:	4a58      	ldr	r2, [pc, #352]	@ (80082b4 <HAL_TIM_ConfigClockSource+0x1f0>)
 8008152:	4293      	cmp	r3, r2
 8008154:	f200 8096 	bhi.w	8008284 <HAL_TIM_ConfigClockSource+0x1c0>
 8008158:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800815c:	f000 8089 	beq.w	8008272 <HAL_TIM_ConfigClockSource+0x1ae>
 8008160:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008164:	f200 808e 	bhi.w	8008284 <HAL_TIM_ConfigClockSource+0x1c0>
 8008168:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800816c:	d03e      	beq.n	80081ec <HAL_TIM_ConfigClockSource+0x128>
 800816e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008172:	f200 8087 	bhi.w	8008284 <HAL_TIM_ConfigClockSource+0x1c0>
 8008176:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800817a:	f000 8086 	beq.w	800828a <HAL_TIM_ConfigClockSource+0x1c6>
 800817e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008182:	d87f      	bhi.n	8008284 <HAL_TIM_ConfigClockSource+0x1c0>
 8008184:	2b70      	cmp	r3, #112	@ 0x70
 8008186:	d01a      	beq.n	80081be <HAL_TIM_ConfigClockSource+0xfa>
 8008188:	2b70      	cmp	r3, #112	@ 0x70
 800818a:	d87b      	bhi.n	8008284 <HAL_TIM_ConfigClockSource+0x1c0>
 800818c:	2b60      	cmp	r3, #96	@ 0x60
 800818e:	d050      	beq.n	8008232 <HAL_TIM_ConfigClockSource+0x16e>
 8008190:	2b60      	cmp	r3, #96	@ 0x60
 8008192:	d877      	bhi.n	8008284 <HAL_TIM_ConfigClockSource+0x1c0>
 8008194:	2b50      	cmp	r3, #80	@ 0x50
 8008196:	d03c      	beq.n	8008212 <HAL_TIM_ConfigClockSource+0x14e>
 8008198:	2b50      	cmp	r3, #80	@ 0x50
 800819a:	d873      	bhi.n	8008284 <HAL_TIM_ConfigClockSource+0x1c0>
 800819c:	2b40      	cmp	r3, #64	@ 0x40
 800819e:	d058      	beq.n	8008252 <HAL_TIM_ConfigClockSource+0x18e>
 80081a0:	2b40      	cmp	r3, #64	@ 0x40
 80081a2:	d86f      	bhi.n	8008284 <HAL_TIM_ConfigClockSource+0x1c0>
 80081a4:	2b30      	cmp	r3, #48	@ 0x30
 80081a6:	d064      	beq.n	8008272 <HAL_TIM_ConfigClockSource+0x1ae>
 80081a8:	2b30      	cmp	r3, #48	@ 0x30
 80081aa:	d86b      	bhi.n	8008284 <HAL_TIM_ConfigClockSource+0x1c0>
 80081ac:	2b20      	cmp	r3, #32
 80081ae:	d060      	beq.n	8008272 <HAL_TIM_ConfigClockSource+0x1ae>
 80081b0:	2b20      	cmp	r3, #32
 80081b2:	d867      	bhi.n	8008284 <HAL_TIM_ConfigClockSource+0x1c0>
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d05c      	beq.n	8008272 <HAL_TIM_ConfigClockSource+0x1ae>
 80081b8:	2b10      	cmp	r3, #16
 80081ba:	d05a      	beq.n	8008272 <HAL_TIM_ConfigClockSource+0x1ae>
 80081bc:	e062      	b.n	8008284 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80081ce:	f000 fd11 	bl	8008bf4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	689b      	ldr	r3, [r3, #8]
 80081d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80081e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	68ba      	ldr	r2, [r7, #8]
 80081e8:	609a      	str	r2, [r3, #8]
      break;
 80081ea:	e04f      	b.n	800828c <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80081fc:	f000 fcfa 	bl	8008bf4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	689a      	ldr	r2, [r3, #8]
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800820e:	609a      	str	r2, [r3, #8]
      break;
 8008210:	e03c      	b.n	800828c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800821e:	461a      	mov	r2, r3
 8008220:	f000 fc6c 	bl	8008afc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	2150      	movs	r1, #80	@ 0x50
 800822a:	4618      	mov	r0, r3
 800822c:	f000 fcc5 	bl	8008bba <TIM_ITRx_SetConfig>
      break;
 8008230:	e02c      	b.n	800828c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800823e:	461a      	mov	r2, r3
 8008240:	f000 fc8b 	bl	8008b5a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	2160      	movs	r1, #96	@ 0x60
 800824a:	4618      	mov	r0, r3
 800824c:	f000 fcb5 	bl	8008bba <TIM_ITRx_SetConfig>
      break;
 8008250:	e01c      	b.n	800828c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800825e:	461a      	mov	r2, r3
 8008260:	f000 fc4c 	bl	8008afc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	2140      	movs	r1, #64	@ 0x40
 800826a:	4618      	mov	r0, r3
 800826c:	f000 fca5 	bl	8008bba <TIM_ITRx_SetConfig>
      break;
 8008270:	e00c      	b.n	800828c <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681a      	ldr	r2, [r3, #0]
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4619      	mov	r1, r3
 800827c:	4610      	mov	r0, r2
 800827e:	f000 fc9c 	bl	8008bba <TIM_ITRx_SetConfig>
      break;
 8008282:	e003      	b.n	800828c <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8008284:	2301      	movs	r3, #1
 8008286:	73fb      	strb	r3, [r7, #15]
      break;
 8008288:	e000      	b.n	800828c <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800828a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2201      	movs	r2, #1
 8008290:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2200      	movs	r2, #0
 8008298:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800829c:	7bfb      	ldrb	r3, [r7, #15]
}
 800829e:	4618      	mov	r0, r3
 80082a0:	3710      	adds	r7, #16
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bd80      	pop	{r7, pc}
 80082a6:	bf00      	nop
 80082a8:	00100070 	.word	0x00100070
 80082ac:	00100040 	.word	0x00100040
 80082b0:	00100030 	.word	0x00100030
 80082b4:	00100020 	.word	0x00100020

080082b8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80082b8:	b480      	push	{r7}
 80082ba:	b083      	sub	sp, #12
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80082c0:	bf00      	nop
 80082c2:	370c      	adds	r7, #12
 80082c4:	46bd      	mov	sp, r7
 80082c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ca:	4770      	bx	lr

080082cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80082cc:	b480      	push	{r7}
 80082ce:	b083      	sub	sp, #12
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80082d4:	bf00      	nop
 80082d6:	370c      	adds	r7, #12
 80082d8:	46bd      	mov	sp, r7
 80082da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082de:	4770      	bx	lr

080082e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80082e0:	b480      	push	{r7}
 80082e2:	b083      	sub	sp, #12
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80082e8:	bf00      	nop
 80082ea:	370c      	adds	r7, #12
 80082ec:	46bd      	mov	sp, r7
 80082ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f2:	4770      	bx	lr

080082f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80082f4:	b480      	push	{r7}
 80082f6:	b083      	sub	sp, #12
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80082fc:	bf00      	nop
 80082fe:	370c      	adds	r7, #12
 8008300:	46bd      	mov	sp, r7
 8008302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008306:	4770      	bx	lr

08008308 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008308:	b480      	push	{r7}
 800830a:	b085      	sub	sp, #20
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
 8008310:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	4a42      	ldr	r2, [pc, #264]	@ (8008424 <TIM_Base_SetConfig+0x11c>)
 800831c:	4293      	cmp	r3, r2
 800831e:	d00f      	beq.n	8008340 <TIM_Base_SetConfig+0x38>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008326:	d00b      	beq.n	8008340 <TIM_Base_SetConfig+0x38>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	4a3f      	ldr	r2, [pc, #252]	@ (8008428 <TIM_Base_SetConfig+0x120>)
 800832c:	4293      	cmp	r3, r2
 800832e:	d007      	beq.n	8008340 <TIM_Base_SetConfig+0x38>
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	4a3e      	ldr	r2, [pc, #248]	@ (800842c <TIM_Base_SetConfig+0x124>)
 8008334:	4293      	cmp	r3, r2
 8008336:	d003      	beq.n	8008340 <TIM_Base_SetConfig+0x38>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	4a3d      	ldr	r2, [pc, #244]	@ (8008430 <TIM_Base_SetConfig+0x128>)
 800833c:	4293      	cmp	r3, r2
 800833e:	d108      	bne.n	8008352 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008346:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	685b      	ldr	r3, [r3, #4]
 800834c:	68fa      	ldr	r2, [r7, #12]
 800834e:	4313      	orrs	r3, r2
 8008350:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	4a33      	ldr	r2, [pc, #204]	@ (8008424 <TIM_Base_SetConfig+0x11c>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d01b      	beq.n	8008392 <TIM_Base_SetConfig+0x8a>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008360:	d017      	beq.n	8008392 <TIM_Base_SetConfig+0x8a>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	4a30      	ldr	r2, [pc, #192]	@ (8008428 <TIM_Base_SetConfig+0x120>)
 8008366:	4293      	cmp	r3, r2
 8008368:	d013      	beq.n	8008392 <TIM_Base_SetConfig+0x8a>
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	4a2f      	ldr	r2, [pc, #188]	@ (800842c <TIM_Base_SetConfig+0x124>)
 800836e:	4293      	cmp	r3, r2
 8008370:	d00f      	beq.n	8008392 <TIM_Base_SetConfig+0x8a>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	4a2e      	ldr	r2, [pc, #184]	@ (8008430 <TIM_Base_SetConfig+0x128>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d00b      	beq.n	8008392 <TIM_Base_SetConfig+0x8a>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	4a2d      	ldr	r2, [pc, #180]	@ (8008434 <TIM_Base_SetConfig+0x12c>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d007      	beq.n	8008392 <TIM_Base_SetConfig+0x8a>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	4a2c      	ldr	r2, [pc, #176]	@ (8008438 <TIM_Base_SetConfig+0x130>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d003      	beq.n	8008392 <TIM_Base_SetConfig+0x8a>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	4a2b      	ldr	r2, [pc, #172]	@ (800843c <TIM_Base_SetConfig+0x134>)
 800838e:	4293      	cmp	r3, r2
 8008390:	d108      	bne.n	80083a4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008398:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	68db      	ldr	r3, [r3, #12]
 800839e:	68fa      	ldr	r2, [r7, #12]
 80083a0:	4313      	orrs	r3, r2
 80083a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	695b      	ldr	r3, [r3, #20]
 80083ae:	4313      	orrs	r3, r2
 80083b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	68fa      	ldr	r2, [r7, #12]
 80083b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	689a      	ldr	r2, [r3, #8]
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	681a      	ldr	r2, [r3, #0]
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	4a16      	ldr	r2, [pc, #88]	@ (8008424 <TIM_Base_SetConfig+0x11c>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d00f      	beq.n	80083f0 <TIM_Base_SetConfig+0xe8>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	4a17      	ldr	r2, [pc, #92]	@ (8008430 <TIM_Base_SetConfig+0x128>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d00b      	beq.n	80083f0 <TIM_Base_SetConfig+0xe8>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	4a16      	ldr	r2, [pc, #88]	@ (8008434 <TIM_Base_SetConfig+0x12c>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d007      	beq.n	80083f0 <TIM_Base_SetConfig+0xe8>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	4a15      	ldr	r2, [pc, #84]	@ (8008438 <TIM_Base_SetConfig+0x130>)
 80083e4:	4293      	cmp	r3, r2
 80083e6:	d003      	beq.n	80083f0 <TIM_Base_SetConfig+0xe8>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	4a14      	ldr	r2, [pc, #80]	@ (800843c <TIM_Base_SetConfig+0x134>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d103      	bne.n	80083f8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	691a      	ldr	r2, [r3, #16]
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2201      	movs	r2, #1
 80083fc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	691b      	ldr	r3, [r3, #16]
 8008402:	f003 0301 	and.w	r3, r3, #1
 8008406:	2b01      	cmp	r3, #1
 8008408:	d105      	bne.n	8008416 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	691b      	ldr	r3, [r3, #16]
 800840e:	f023 0201 	bic.w	r2, r3, #1
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	611a      	str	r2, [r3, #16]
  }
}
 8008416:	bf00      	nop
 8008418:	3714      	adds	r7, #20
 800841a:	46bd      	mov	sp, r7
 800841c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008420:	4770      	bx	lr
 8008422:	bf00      	nop
 8008424:	40012c00 	.word	0x40012c00
 8008428:	40000400 	.word	0x40000400
 800842c:	40000800 	.word	0x40000800
 8008430:	40013400 	.word	0x40013400
 8008434:	40014000 	.word	0x40014000
 8008438:	40014400 	.word	0x40014400
 800843c:	40014800 	.word	0x40014800

08008440 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008440:	b480      	push	{r7}
 8008442:	b087      	sub	sp, #28
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
 8008448:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6a1b      	ldr	r3, [r3, #32]
 800844e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6a1b      	ldr	r3, [r3, #32]
 8008454:	f023 0201 	bic.w	r2, r3, #1
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	685b      	ldr	r3, [r3, #4]
 8008460:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	699b      	ldr	r3, [r3, #24]
 8008466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800846e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008472:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	f023 0303 	bic.w	r3, r3, #3
 800847a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	68fa      	ldr	r2, [r7, #12]
 8008482:	4313      	orrs	r3, r2
 8008484:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008486:	697b      	ldr	r3, [r7, #20]
 8008488:	f023 0302 	bic.w	r3, r3, #2
 800848c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	689b      	ldr	r3, [r3, #8]
 8008492:	697a      	ldr	r2, [r7, #20]
 8008494:	4313      	orrs	r3, r2
 8008496:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	4a2c      	ldr	r2, [pc, #176]	@ (800854c <TIM_OC1_SetConfig+0x10c>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d00f      	beq.n	80084c0 <TIM_OC1_SetConfig+0x80>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	4a2b      	ldr	r2, [pc, #172]	@ (8008550 <TIM_OC1_SetConfig+0x110>)
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d00b      	beq.n	80084c0 <TIM_OC1_SetConfig+0x80>
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	4a2a      	ldr	r2, [pc, #168]	@ (8008554 <TIM_OC1_SetConfig+0x114>)
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d007      	beq.n	80084c0 <TIM_OC1_SetConfig+0x80>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	4a29      	ldr	r2, [pc, #164]	@ (8008558 <TIM_OC1_SetConfig+0x118>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d003      	beq.n	80084c0 <TIM_OC1_SetConfig+0x80>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	4a28      	ldr	r2, [pc, #160]	@ (800855c <TIM_OC1_SetConfig+0x11c>)
 80084bc:	4293      	cmp	r3, r2
 80084be:	d10c      	bne.n	80084da <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80084c0:	697b      	ldr	r3, [r7, #20]
 80084c2:	f023 0308 	bic.w	r3, r3, #8
 80084c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	68db      	ldr	r3, [r3, #12]
 80084cc:	697a      	ldr	r2, [r7, #20]
 80084ce:	4313      	orrs	r3, r2
 80084d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	f023 0304 	bic.w	r3, r3, #4
 80084d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	4a1b      	ldr	r2, [pc, #108]	@ (800854c <TIM_OC1_SetConfig+0x10c>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d00f      	beq.n	8008502 <TIM_OC1_SetConfig+0xc2>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	4a1a      	ldr	r2, [pc, #104]	@ (8008550 <TIM_OC1_SetConfig+0x110>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d00b      	beq.n	8008502 <TIM_OC1_SetConfig+0xc2>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	4a19      	ldr	r2, [pc, #100]	@ (8008554 <TIM_OC1_SetConfig+0x114>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d007      	beq.n	8008502 <TIM_OC1_SetConfig+0xc2>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	4a18      	ldr	r2, [pc, #96]	@ (8008558 <TIM_OC1_SetConfig+0x118>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d003      	beq.n	8008502 <TIM_OC1_SetConfig+0xc2>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	4a17      	ldr	r2, [pc, #92]	@ (800855c <TIM_OC1_SetConfig+0x11c>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d111      	bne.n	8008526 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008502:	693b      	ldr	r3, [r7, #16]
 8008504:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008508:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800850a:	693b      	ldr	r3, [r7, #16]
 800850c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008510:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	695b      	ldr	r3, [r3, #20]
 8008516:	693a      	ldr	r2, [r7, #16]
 8008518:	4313      	orrs	r3, r2
 800851a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	699b      	ldr	r3, [r3, #24]
 8008520:	693a      	ldr	r2, [r7, #16]
 8008522:	4313      	orrs	r3, r2
 8008524:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	693a      	ldr	r2, [r7, #16]
 800852a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	68fa      	ldr	r2, [r7, #12]
 8008530:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	685a      	ldr	r2, [r3, #4]
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	697a      	ldr	r2, [r7, #20]
 800853e:	621a      	str	r2, [r3, #32]
}
 8008540:	bf00      	nop
 8008542:	371c      	adds	r7, #28
 8008544:	46bd      	mov	sp, r7
 8008546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854a:	4770      	bx	lr
 800854c:	40012c00 	.word	0x40012c00
 8008550:	40013400 	.word	0x40013400
 8008554:	40014000 	.word	0x40014000
 8008558:	40014400 	.word	0x40014400
 800855c:	40014800 	.word	0x40014800

08008560 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008560:	b480      	push	{r7}
 8008562:	b087      	sub	sp, #28
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
 8008568:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6a1b      	ldr	r3, [r3, #32]
 800856e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6a1b      	ldr	r3, [r3, #32]
 8008574:	f023 0210 	bic.w	r2, r3, #16
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	685b      	ldr	r3, [r3, #4]
 8008580:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	699b      	ldr	r3, [r3, #24]
 8008586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800858e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008592:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800859a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	021b      	lsls	r3, r3, #8
 80085a2:	68fa      	ldr	r2, [r7, #12]
 80085a4:	4313      	orrs	r3, r2
 80085a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80085a8:	697b      	ldr	r3, [r7, #20]
 80085aa:	f023 0320 	bic.w	r3, r3, #32
 80085ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	689b      	ldr	r3, [r3, #8]
 80085b4:	011b      	lsls	r3, r3, #4
 80085b6:	697a      	ldr	r2, [r7, #20]
 80085b8:	4313      	orrs	r3, r2
 80085ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	4a28      	ldr	r2, [pc, #160]	@ (8008660 <TIM_OC2_SetConfig+0x100>)
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d003      	beq.n	80085cc <TIM_OC2_SetConfig+0x6c>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	4a27      	ldr	r2, [pc, #156]	@ (8008664 <TIM_OC2_SetConfig+0x104>)
 80085c8:	4293      	cmp	r3, r2
 80085ca:	d10d      	bne.n	80085e8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80085cc:	697b      	ldr	r3, [r7, #20]
 80085ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80085d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	68db      	ldr	r3, [r3, #12]
 80085d8:	011b      	lsls	r3, r3, #4
 80085da:	697a      	ldr	r2, [r7, #20]
 80085dc:	4313      	orrs	r3, r2
 80085de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80085e0:	697b      	ldr	r3, [r7, #20]
 80085e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80085e6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	4a1d      	ldr	r2, [pc, #116]	@ (8008660 <TIM_OC2_SetConfig+0x100>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d00f      	beq.n	8008610 <TIM_OC2_SetConfig+0xb0>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	4a1c      	ldr	r2, [pc, #112]	@ (8008664 <TIM_OC2_SetConfig+0x104>)
 80085f4:	4293      	cmp	r3, r2
 80085f6:	d00b      	beq.n	8008610 <TIM_OC2_SetConfig+0xb0>
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	4a1b      	ldr	r2, [pc, #108]	@ (8008668 <TIM_OC2_SetConfig+0x108>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d007      	beq.n	8008610 <TIM_OC2_SetConfig+0xb0>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	4a1a      	ldr	r2, [pc, #104]	@ (800866c <TIM_OC2_SetConfig+0x10c>)
 8008604:	4293      	cmp	r3, r2
 8008606:	d003      	beq.n	8008610 <TIM_OC2_SetConfig+0xb0>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	4a19      	ldr	r2, [pc, #100]	@ (8008670 <TIM_OC2_SetConfig+0x110>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d113      	bne.n	8008638 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008610:	693b      	ldr	r3, [r7, #16]
 8008612:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008616:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008618:	693b      	ldr	r3, [r7, #16]
 800861a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800861e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	695b      	ldr	r3, [r3, #20]
 8008624:	009b      	lsls	r3, r3, #2
 8008626:	693a      	ldr	r2, [r7, #16]
 8008628:	4313      	orrs	r3, r2
 800862a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	699b      	ldr	r3, [r3, #24]
 8008630:	009b      	lsls	r3, r3, #2
 8008632:	693a      	ldr	r2, [r7, #16]
 8008634:	4313      	orrs	r3, r2
 8008636:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	693a      	ldr	r2, [r7, #16]
 800863c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	68fa      	ldr	r2, [r7, #12]
 8008642:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	685a      	ldr	r2, [r3, #4]
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	697a      	ldr	r2, [r7, #20]
 8008650:	621a      	str	r2, [r3, #32]
}
 8008652:	bf00      	nop
 8008654:	371c      	adds	r7, #28
 8008656:	46bd      	mov	sp, r7
 8008658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865c:	4770      	bx	lr
 800865e:	bf00      	nop
 8008660:	40012c00 	.word	0x40012c00
 8008664:	40013400 	.word	0x40013400
 8008668:	40014000 	.word	0x40014000
 800866c:	40014400 	.word	0x40014400
 8008670:	40014800 	.word	0x40014800

08008674 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008674:	b480      	push	{r7}
 8008676:	b087      	sub	sp, #28
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
 800867c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6a1b      	ldr	r3, [r3, #32]
 8008682:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6a1b      	ldr	r3, [r3, #32]
 8008688:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	685b      	ldr	r3, [r3, #4]
 8008694:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	69db      	ldr	r3, [r3, #28]
 800869a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80086a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	f023 0303 	bic.w	r3, r3, #3
 80086ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	68fa      	ldr	r2, [r7, #12]
 80086b6:	4313      	orrs	r3, r2
 80086b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80086ba:	697b      	ldr	r3, [r7, #20]
 80086bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80086c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	689b      	ldr	r3, [r3, #8]
 80086c6:	021b      	lsls	r3, r3, #8
 80086c8:	697a      	ldr	r2, [r7, #20]
 80086ca:	4313      	orrs	r3, r2
 80086cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	4a27      	ldr	r2, [pc, #156]	@ (8008770 <TIM_OC3_SetConfig+0xfc>)
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d003      	beq.n	80086de <TIM_OC3_SetConfig+0x6a>
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	4a26      	ldr	r2, [pc, #152]	@ (8008774 <TIM_OC3_SetConfig+0x100>)
 80086da:	4293      	cmp	r3, r2
 80086dc:	d10d      	bne.n	80086fa <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80086e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	68db      	ldr	r3, [r3, #12]
 80086ea:	021b      	lsls	r3, r3, #8
 80086ec:	697a      	ldr	r2, [r7, #20]
 80086ee:	4313      	orrs	r3, r2
 80086f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80086f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	4a1c      	ldr	r2, [pc, #112]	@ (8008770 <TIM_OC3_SetConfig+0xfc>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d00f      	beq.n	8008722 <TIM_OC3_SetConfig+0xae>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	4a1b      	ldr	r2, [pc, #108]	@ (8008774 <TIM_OC3_SetConfig+0x100>)
 8008706:	4293      	cmp	r3, r2
 8008708:	d00b      	beq.n	8008722 <TIM_OC3_SetConfig+0xae>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	4a1a      	ldr	r2, [pc, #104]	@ (8008778 <TIM_OC3_SetConfig+0x104>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d007      	beq.n	8008722 <TIM_OC3_SetConfig+0xae>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	4a19      	ldr	r2, [pc, #100]	@ (800877c <TIM_OC3_SetConfig+0x108>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d003      	beq.n	8008722 <TIM_OC3_SetConfig+0xae>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	4a18      	ldr	r2, [pc, #96]	@ (8008780 <TIM_OC3_SetConfig+0x10c>)
 800871e:	4293      	cmp	r3, r2
 8008720:	d113      	bne.n	800874a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008722:	693b      	ldr	r3, [r7, #16]
 8008724:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008728:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800872a:	693b      	ldr	r3, [r7, #16]
 800872c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008730:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	695b      	ldr	r3, [r3, #20]
 8008736:	011b      	lsls	r3, r3, #4
 8008738:	693a      	ldr	r2, [r7, #16]
 800873a:	4313      	orrs	r3, r2
 800873c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	699b      	ldr	r3, [r3, #24]
 8008742:	011b      	lsls	r3, r3, #4
 8008744:	693a      	ldr	r2, [r7, #16]
 8008746:	4313      	orrs	r3, r2
 8008748:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	693a      	ldr	r2, [r7, #16]
 800874e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	68fa      	ldr	r2, [r7, #12]
 8008754:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	685a      	ldr	r2, [r3, #4]
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	697a      	ldr	r2, [r7, #20]
 8008762:	621a      	str	r2, [r3, #32]
}
 8008764:	bf00      	nop
 8008766:	371c      	adds	r7, #28
 8008768:	46bd      	mov	sp, r7
 800876a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876e:	4770      	bx	lr
 8008770:	40012c00 	.word	0x40012c00
 8008774:	40013400 	.word	0x40013400
 8008778:	40014000 	.word	0x40014000
 800877c:	40014400 	.word	0x40014400
 8008780:	40014800 	.word	0x40014800

08008784 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008784:	b480      	push	{r7}
 8008786:	b087      	sub	sp, #28
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
 800878c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6a1b      	ldr	r3, [r3, #32]
 8008792:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6a1b      	ldr	r3, [r3, #32]
 8008798:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	685b      	ldr	r3, [r3, #4]
 80087a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	69db      	ldr	r3, [r3, #28]
 80087aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80087b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80087b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80087be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	021b      	lsls	r3, r3, #8
 80087c6:	68fa      	ldr	r2, [r7, #12]
 80087c8:	4313      	orrs	r3, r2
 80087ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80087cc:	697b      	ldr	r3, [r7, #20]
 80087ce:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80087d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	689b      	ldr	r3, [r3, #8]
 80087d8:	031b      	lsls	r3, r3, #12
 80087da:	697a      	ldr	r2, [r7, #20]
 80087dc:	4313      	orrs	r3, r2
 80087de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	4a28      	ldr	r2, [pc, #160]	@ (8008884 <TIM_OC4_SetConfig+0x100>)
 80087e4:	4293      	cmp	r3, r2
 80087e6:	d003      	beq.n	80087f0 <TIM_OC4_SetConfig+0x6c>
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	4a27      	ldr	r2, [pc, #156]	@ (8008888 <TIM_OC4_SetConfig+0x104>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d10d      	bne.n	800880c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80087f0:	697b      	ldr	r3, [r7, #20]
 80087f2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80087f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	68db      	ldr	r3, [r3, #12]
 80087fc:	031b      	lsls	r3, r3, #12
 80087fe:	697a      	ldr	r2, [r7, #20]
 8008800:	4313      	orrs	r3, r2
 8008802:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008804:	697b      	ldr	r3, [r7, #20]
 8008806:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800880a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	4a1d      	ldr	r2, [pc, #116]	@ (8008884 <TIM_OC4_SetConfig+0x100>)
 8008810:	4293      	cmp	r3, r2
 8008812:	d00f      	beq.n	8008834 <TIM_OC4_SetConfig+0xb0>
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	4a1c      	ldr	r2, [pc, #112]	@ (8008888 <TIM_OC4_SetConfig+0x104>)
 8008818:	4293      	cmp	r3, r2
 800881a:	d00b      	beq.n	8008834 <TIM_OC4_SetConfig+0xb0>
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	4a1b      	ldr	r2, [pc, #108]	@ (800888c <TIM_OC4_SetConfig+0x108>)
 8008820:	4293      	cmp	r3, r2
 8008822:	d007      	beq.n	8008834 <TIM_OC4_SetConfig+0xb0>
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	4a1a      	ldr	r2, [pc, #104]	@ (8008890 <TIM_OC4_SetConfig+0x10c>)
 8008828:	4293      	cmp	r3, r2
 800882a:	d003      	beq.n	8008834 <TIM_OC4_SetConfig+0xb0>
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	4a19      	ldr	r2, [pc, #100]	@ (8008894 <TIM_OC4_SetConfig+0x110>)
 8008830:	4293      	cmp	r3, r2
 8008832:	d113      	bne.n	800885c <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008834:	693b      	ldr	r3, [r7, #16]
 8008836:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800883a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008842:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	695b      	ldr	r3, [r3, #20]
 8008848:	019b      	lsls	r3, r3, #6
 800884a:	693a      	ldr	r2, [r7, #16]
 800884c:	4313      	orrs	r3, r2
 800884e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	699b      	ldr	r3, [r3, #24]
 8008854:	019b      	lsls	r3, r3, #6
 8008856:	693a      	ldr	r2, [r7, #16]
 8008858:	4313      	orrs	r3, r2
 800885a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	693a      	ldr	r2, [r7, #16]
 8008860:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	68fa      	ldr	r2, [r7, #12]
 8008866:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	685a      	ldr	r2, [r3, #4]
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	697a      	ldr	r2, [r7, #20]
 8008874:	621a      	str	r2, [r3, #32]
}
 8008876:	bf00      	nop
 8008878:	371c      	adds	r7, #28
 800887a:	46bd      	mov	sp, r7
 800887c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008880:	4770      	bx	lr
 8008882:	bf00      	nop
 8008884:	40012c00 	.word	0x40012c00
 8008888:	40013400 	.word	0x40013400
 800888c:	40014000 	.word	0x40014000
 8008890:	40014400 	.word	0x40014400
 8008894:	40014800 	.word	0x40014800

08008898 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008898:	b480      	push	{r7}
 800889a:	b087      	sub	sp, #28
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
 80088a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6a1b      	ldr	r3, [r3, #32]
 80088a6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6a1b      	ldr	r3, [r3, #32]
 80088ac:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	685b      	ldr	r3, [r3, #4]
 80088b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80088be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80088c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	68fa      	ldr	r2, [r7, #12]
 80088d2:	4313      	orrs	r3, r2
 80088d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80088d6:	693b      	ldr	r3, [r7, #16]
 80088d8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80088dc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	689b      	ldr	r3, [r3, #8]
 80088e2:	041b      	lsls	r3, r3, #16
 80088e4:	693a      	ldr	r2, [r7, #16]
 80088e6:	4313      	orrs	r3, r2
 80088e8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	4a17      	ldr	r2, [pc, #92]	@ (800894c <TIM_OC5_SetConfig+0xb4>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d00f      	beq.n	8008912 <TIM_OC5_SetConfig+0x7a>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	4a16      	ldr	r2, [pc, #88]	@ (8008950 <TIM_OC5_SetConfig+0xb8>)
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d00b      	beq.n	8008912 <TIM_OC5_SetConfig+0x7a>
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	4a15      	ldr	r2, [pc, #84]	@ (8008954 <TIM_OC5_SetConfig+0xbc>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d007      	beq.n	8008912 <TIM_OC5_SetConfig+0x7a>
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	4a14      	ldr	r2, [pc, #80]	@ (8008958 <TIM_OC5_SetConfig+0xc0>)
 8008906:	4293      	cmp	r3, r2
 8008908:	d003      	beq.n	8008912 <TIM_OC5_SetConfig+0x7a>
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	4a13      	ldr	r2, [pc, #76]	@ (800895c <TIM_OC5_SetConfig+0xc4>)
 800890e:	4293      	cmp	r3, r2
 8008910:	d109      	bne.n	8008926 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008912:	697b      	ldr	r3, [r7, #20]
 8008914:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008918:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	695b      	ldr	r3, [r3, #20]
 800891e:	021b      	lsls	r3, r3, #8
 8008920:	697a      	ldr	r2, [r7, #20]
 8008922:	4313      	orrs	r3, r2
 8008924:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	697a      	ldr	r2, [r7, #20]
 800892a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	68fa      	ldr	r2, [r7, #12]
 8008930:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	685a      	ldr	r2, [r3, #4]
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	693a      	ldr	r2, [r7, #16]
 800893e:	621a      	str	r2, [r3, #32]
}
 8008940:	bf00      	nop
 8008942:	371c      	adds	r7, #28
 8008944:	46bd      	mov	sp, r7
 8008946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894a:	4770      	bx	lr
 800894c:	40012c00 	.word	0x40012c00
 8008950:	40013400 	.word	0x40013400
 8008954:	40014000 	.word	0x40014000
 8008958:	40014400 	.word	0x40014400
 800895c:	40014800 	.word	0x40014800

08008960 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008960:	b480      	push	{r7}
 8008962:	b087      	sub	sp, #28
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
 8008968:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6a1b      	ldr	r3, [r3, #32]
 800896e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6a1b      	ldr	r3, [r3, #32]
 8008974:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	685b      	ldr	r3, [r3, #4]
 8008980:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800898e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008992:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	021b      	lsls	r3, r3, #8
 800899a:	68fa      	ldr	r2, [r7, #12]
 800899c:	4313      	orrs	r3, r2
 800899e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80089a0:	693b      	ldr	r3, [r7, #16]
 80089a2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80089a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	689b      	ldr	r3, [r3, #8]
 80089ac:	051b      	lsls	r3, r3, #20
 80089ae:	693a      	ldr	r2, [r7, #16]
 80089b0:	4313      	orrs	r3, r2
 80089b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	4a18      	ldr	r2, [pc, #96]	@ (8008a18 <TIM_OC6_SetConfig+0xb8>)
 80089b8:	4293      	cmp	r3, r2
 80089ba:	d00f      	beq.n	80089dc <TIM_OC6_SetConfig+0x7c>
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	4a17      	ldr	r2, [pc, #92]	@ (8008a1c <TIM_OC6_SetConfig+0xbc>)
 80089c0:	4293      	cmp	r3, r2
 80089c2:	d00b      	beq.n	80089dc <TIM_OC6_SetConfig+0x7c>
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	4a16      	ldr	r2, [pc, #88]	@ (8008a20 <TIM_OC6_SetConfig+0xc0>)
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d007      	beq.n	80089dc <TIM_OC6_SetConfig+0x7c>
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	4a15      	ldr	r2, [pc, #84]	@ (8008a24 <TIM_OC6_SetConfig+0xc4>)
 80089d0:	4293      	cmp	r3, r2
 80089d2:	d003      	beq.n	80089dc <TIM_OC6_SetConfig+0x7c>
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	4a14      	ldr	r2, [pc, #80]	@ (8008a28 <TIM_OC6_SetConfig+0xc8>)
 80089d8:	4293      	cmp	r3, r2
 80089da:	d109      	bne.n	80089f0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80089e2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	695b      	ldr	r3, [r3, #20]
 80089e8:	029b      	lsls	r3, r3, #10
 80089ea:	697a      	ldr	r2, [r7, #20]
 80089ec:	4313      	orrs	r3, r2
 80089ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	697a      	ldr	r2, [r7, #20]
 80089f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	68fa      	ldr	r2, [r7, #12]
 80089fa:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	685a      	ldr	r2, [r3, #4]
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	693a      	ldr	r2, [r7, #16]
 8008a08:	621a      	str	r2, [r3, #32]
}
 8008a0a:	bf00      	nop
 8008a0c:	371c      	adds	r7, #28
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a14:	4770      	bx	lr
 8008a16:	bf00      	nop
 8008a18:	40012c00 	.word	0x40012c00
 8008a1c:	40013400 	.word	0x40013400
 8008a20:	40014000 	.word	0x40014000
 8008a24:	40014400 	.word	0x40014400
 8008a28:	40014800 	.word	0x40014800

08008a2c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	b087      	sub	sp, #28
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	60f8      	str	r0, [r7, #12]
 8008a34:	60b9      	str	r1, [r7, #8]
 8008a36:	607a      	str	r2, [r7, #4]
 8008a38:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	6a1b      	ldr	r3, [r3, #32]
 8008a3e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	6a1b      	ldr	r3, [r3, #32]
 8008a44:	f023 0201 	bic.w	r2, r3, #1
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	699b      	ldr	r3, [r3, #24]
 8008a50:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	4a24      	ldr	r2, [pc, #144]	@ (8008ae8 <TIM_TI1_SetConfig+0xbc>)
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d013      	beq.n	8008a82 <TIM_TI1_SetConfig+0x56>
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a60:	d00f      	beq.n	8008a82 <TIM_TI1_SetConfig+0x56>
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	4a21      	ldr	r2, [pc, #132]	@ (8008aec <TIM_TI1_SetConfig+0xc0>)
 8008a66:	4293      	cmp	r3, r2
 8008a68:	d00b      	beq.n	8008a82 <TIM_TI1_SetConfig+0x56>
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	4a20      	ldr	r2, [pc, #128]	@ (8008af0 <TIM_TI1_SetConfig+0xc4>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d007      	beq.n	8008a82 <TIM_TI1_SetConfig+0x56>
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	4a1f      	ldr	r2, [pc, #124]	@ (8008af4 <TIM_TI1_SetConfig+0xc8>)
 8008a76:	4293      	cmp	r3, r2
 8008a78:	d003      	beq.n	8008a82 <TIM_TI1_SetConfig+0x56>
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	4a1e      	ldr	r2, [pc, #120]	@ (8008af8 <TIM_TI1_SetConfig+0xcc>)
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d101      	bne.n	8008a86 <TIM_TI1_SetConfig+0x5a>
 8008a82:	2301      	movs	r3, #1
 8008a84:	e000      	b.n	8008a88 <TIM_TI1_SetConfig+0x5c>
 8008a86:	2300      	movs	r3, #0
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d008      	beq.n	8008a9e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008a8c:	697b      	ldr	r3, [r7, #20]
 8008a8e:	f023 0303 	bic.w	r3, r3, #3
 8008a92:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008a94:	697a      	ldr	r2, [r7, #20]
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	4313      	orrs	r3, r2
 8008a9a:	617b      	str	r3, [r7, #20]
 8008a9c:	e003      	b.n	8008aa6 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008a9e:	697b      	ldr	r3, [r7, #20]
 8008aa0:	f043 0301 	orr.w	r3, r3, #1
 8008aa4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008aac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	011b      	lsls	r3, r3, #4
 8008ab2:	b2db      	uxtb	r3, r3
 8008ab4:	697a      	ldr	r2, [r7, #20]
 8008ab6:	4313      	orrs	r3, r2
 8008ab8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008aba:	693b      	ldr	r3, [r7, #16]
 8008abc:	f023 030a 	bic.w	r3, r3, #10
 8008ac0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	f003 030a 	and.w	r3, r3, #10
 8008ac8:	693a      	ldr	r2, [r7, #16]
 8008aca:	4313      	orrs	r3, r2
 8008acc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	697a      	ldr	r2, [r7, #20]
 8008ad2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	693a      	ldr	r2, [r7, #16]
 8008ad8:	621a      	str	r2, [r3, #32]
}
 8008ada:	bf00      	nop
 8008adc:	371c      	adds	r7, #28
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae4:	4770      	bx	lr
 8008ae6:	bf00      	nop
 8008ae8:	40012c00 	.word	0x40012c00
 8008aec:	40000400 	.word	0x40000400
 8008af0:	40000800 	.word	0x40000800
 8008af4:	40013400 	.word	0x40013400
 8008af8:	40014000 	.word	0x40014000

08008afc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008afc:	b480      	push	{r7}
 8008afe:	b087      	sub	sp, #28
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	60f8      	str	r0, [r7, #12]
 8008b04:	60b9      	str	r1, [r7, #8]
 8008b06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	6a1b      	ldr	r3, [r3, #32]
 8008b0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	6a1b      	ldr	r3, [r3, #32]
 8008b12:	f023 0201 	bic.w	r2, r3, #1
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	699b      	ldr	r3, [r3, #24]
 8008b1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008b20:	693b      	ldr	r3, [r7, #16]
 8008b22:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008b26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	011b      	lsls	r3, r3, #4
 8008b2c:	693a      	ldr	r2, [r7, #16]
 8008b2e:	4313      	orrs	r3, r2
 8008b30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008b32:	697b      	ldr	r3, [r7, #20]
 8008b34:	f023 030a 	bic.w	r3, r3, #10
 8008b38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008b3a:	697a      	ldr	r2, [r7, #20]
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	4313      	orrs	r3, r2
 8008b40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	693a      	ldr	r2, [r7, #16]
 8008b46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	697a      	ldr	r2, [r7, #20]
 8008b4c:	621a      	str	r2, [r3, #32]
}
 8008b4e:	bf00      	nop
 8008b50:	371c      	adds	r7, #28
 8008b52:	46bd      	mov	sp, r7
 8008b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b58:	4770      	bx	lr

08008b5a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008b5a:	b480      	push	{r7}
 8008b5c:	b087      	sub	sp, #28
 8008b5e:	af00      	add	r7, sp, #0
 8008b60:	60f8      	str	r0, [r7, #12]
 8008b62:	60b9      	str	r1, [r7, #8]
 8008b64:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	6a1b      	ldr	r3, [r3, #32]
 8008b6a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	6a1b      	ldr	r3, [r3, #32]
 8008b70:	f023 0210 	bic.w	r2, r3, #16
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	699b      	ldr	r3, [r3, #24]
 8008b7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008b7e:	693b      	ldr	r3, [r7, #16]
 8008b80:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008b84:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	031b      	lsls	r3, r3, #12
 8008b8a:	693a      	ldr	r2, [r7, #16]
 8008b8c:	4313      	orrs	r3, r2
 8008b8e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008b90:	697b      	ldr	r3, [r7, #20]
 8008b92:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008b96:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	011b      	lsls	r3, r3, #4
 8008b9c:	697a      	ldr	r2, [r7, #20]
 8008b9e:	4313      	orrs	r3, r2
 8008ba0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	693a      	ldr	r2, [r7, #16]
 8008ba6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	697a      	ldr	r2, [r7, #20]
 8008bac:	621a      	str	r2, [r3, #32]
}
 8008bae:	bf00      	nop
 8008bb0:	371c      	adds	r7, #28
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb8:	4770      	bx	lr

08008bba <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008bba:	b480      	push	{r7}
 8008bbc:	b085      	sub	sp, #20
 8008bbe:	af00      	add	r7, sp, #0
 8008bc0:	6078      	str	r0, [r7, #4]
 8008bc2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	689b      	ldr	r3, [r3, #8]
 8008bc8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008bd0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008bd4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008bd6:	683a      	ldr	r2, [r7, #0]
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	4313      	orrs	r3, r2
 8008bdc:	f043 0307 	orr.w	r3, r3, #7
 8008be0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	68fa      	ldr	r2, [r7, #12]
 8008be6:	609a      	str	r2, [r3, #8]
}
 8008be8:	bf00      	nop
 8008bea:	3714      	adds	r7, #20
 8008bec:	46bd      	mov	sp, r7
 8008bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf2:	4770      	bx	lr

08008bf4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	b087      	sub	sp, #28
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	60f8      	str	r0, [r7, #12]
 8008bfc:	60b9      	str	r1, [r7, #8]
 8008bfe:	607a      	str	r2, [r7, #4]
 8008c00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	689b      	ldr	r3, [r3, #8]
 8008c06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008c08:	697b      	ldr	r3, [r7, #20]
 8008c0a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008c0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	021a      	lsls	r2, r3, #8
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	431a      	orrs	r2, r3
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	4313      	orrs	r3, r2
 8008c1c:	697a      	ldr	r2, [r7, #20]
 8008c1e:	4313      	orrs	r3, r2
 8008c20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	697a      	ldr	r2, [r7, #20]
 8008c26:	609a      	str	r2, [r3, #8]
}
 8008c28:	bf00      	nop
 8008c2a:	371c      	adds	r7, #28
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c32:	4770      	bx	lr

08008c34 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008c34:	b480      	push	{r7}
 8008c36:	b087      	sub	sp, #28
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	60f8      	str	r0, [r7, #12]
 8008c3c:	60b9      	str	r1, [r7, #8]
 8008c3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	f003 031f 	and.w	r3, r3, #31
 8008c46:	2201      	movs	r2, #1
 8008c48:	fa02 f303 	lsl.w	r3, r2, r3
 8008c4c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	6a1a      	ldr	r2, [r3, #32]
 8008c52:	697b      	ldr	r3, [r7, #20]
 8008c54:	43db      	mvns	r3, r3
 8008c56:	401a      	ands	r2, r3
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	6a1a      	ldr	r2, [r3, #32]
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	f003 031f 	and.w	r3, r3, #31
 8008c66:	6879      	ldr	r1, [r7, #4]
 8008c68:	fa01 f303 	lsl.w	r3, r1, r3
 8008c6c:	431a      	orrs	r2, r3
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	621a      	str	r2, [r3, #32]
}
 8008c72:	bf00      	nop
 8008c74:	371c      	adds	r7, #28
 8008c76:	46bd      	mov	sp, r7
 8008c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7c:	4770      	bx	lr

08008c7e <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, const TIM_HallSensor_InitTypeDef *sConfig)
{
 8008c7e:	b580      	push	{r7, lr}
 8008c80:	b08a      	sub	sp, #40	@ 0x28
 8008c82:	af00      	add	r7, sp, #0
 8008c84:	6078      	str	r0, [r7, #4]
 8008c86:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d101      	bne.n	8008c92 <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 8008c8e:	2301      	movs	r3, #1
 8008c90:	e0a0      	b.n	8008dd4 <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008c98:	b2db      	uxtb	r3, r3
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d106      	bne.n	8008cac <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f000 f898 	bl	8008ddc <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2202      	movs	r2, #2
 8008cb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681a      	ldr	r2, [r3, #0]
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	3304      	adds	r3, #4
 8008cbc:	4619      	mov	r1, r3
 8008cbe:	4610      	mov	r0, r2
 8008cc0:	f7ff fb22 	bl	8008308 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6818      	ldr	r0, [r3, #0]
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	6819      	ldr	r1, [r3, #0]
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	689b      	ldr	r3, [r3, #8]
 8008cd0:	2203      	movs	r2, #3
 8008cd2:	f7ff feab 	bl	8008a2c <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	699a      	ldr	r2, [r3, #24]
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f022 020c 	bic.w	r2, r2, #12
 8008ce4:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	6999      	ldr	r1, [r3, #24]
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	685a      	ldr	r2, [r3, #4]
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	430a      	orrs	r2, r1
 8008cf6:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	685a      	ldr	r2, [r3, #4]
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8008d06:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	689b      	ldr	r3, [r3, #8]
 8008d0e:	687a      	ldr	r2, [r7, #4]
 8008d10:	6812      	ldr	r2, [r2, #0]
 8008d12:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008d16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d1a:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	689a      	ldr	r2, [r3, #8]
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008d2a:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	689b      	ldr	r3, [r3, #8]
 8008d32:	687a      	ldr	r2, [r7, #4]
 8008d34:	6812      	ldr	r2, [r2, #0]
 8008d36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008d3a:	f023 0307 	bic.w	r3, r3, #7
 8008d3e:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	689a      	ldr	r2, [r3, #8]
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f042 0204 	orr.w	r2, r2, #4
 8008d4e:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8008d50:	2300      	movs	r3, #0
 8008d52:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8008d54:	2300      	movs	r3, #0
 8008d56:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8008d58:	2370      	movs	r3, #112	@ 0x70
 8008d5a:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	627b      	str	r3, [r7, #36]	@ 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8008d60:	2300      	movs	r3, #0
 8008d62:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008d64:	2300      	movs	r3, #0
 8008d66:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	68db      	ldr	r3, [r3, #12]
 8008d6c:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f107 020c 	add.w	r2, r7, #12
 8008d76:	4611      	mov	r1, r2
 8008d78:	4618      	mov	r0, r3
 8008d7a:	f7ff fbf1 	bl	8008560 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	685b      	ldr	r3, [r3, #4]
 8008d84:	687a      	ldr	r2, [r7, #4]
 8008d86:	6812      	ldr	r2, [r2, #0]
 8008d88:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008d8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d90:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	685a      	ldr	r2, [r3, #4]
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 8008da0:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2201      	movs	r2, #1
 8008da6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2201      	movs	r2, #1
 8008dae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2201      	movs	r2, #1
 8008db6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2201      	movs	r2, #1
 8008dbe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2201      	movs	r2, #1
 8008dc6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2201      	movs	r2, #1
 8008dce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008dd2:	2300      	movs	r3, #0
}
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	3728      	adds	r7, #40	@ 0x28
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	bd80      	pop	{r7, pc}

08008ddc <HAL_TIMEx_HallSensor_MspInit>:
  * @brief  Initializes the TIM Hall Sensor MSP.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval None
  */
__weak void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef *htim)
{
 8008ddc:	b480      	push	{r7}
 8008dde:	b083      	sub	sp, #12
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
   */
}
 8008de4:	bf00      	nop
 8008de6:	370c      	adds	r7, #12
 8008de8:	46bd      	mov	sp, r7
 8008dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dee:	4770      	bx	lr

08008df0 <HAL_TIMEx_HallSensor_Start_IT>:
  * @brief  Starts the TIM Hall Sensor Interface in interrupt mode.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start_IT(TIM_HandleTypeDef *htim)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b084      	sub	sp, #16
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008dfe:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008e06:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008e0e:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008e16:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(htim->Instance));

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008e18:	7bfb      	ldrb	r3, [r7, #15]
 8008e1a:	2b01      	cmp	r3, #1
 8008e1c:	d108      	bne.n	8008e30 <HAL_TIMEx_HallSensor_Start_IT+0x40>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008e1e:	7bbb      	ldrb	r3, [r7, #14]
 8008e20:	2b01      	cmp	r3, #1
 8008e22:	d105      	bne.n	8008e30 <HAL_TIMEx_HallSensor_Start_IT+0x40>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008e24:	7b7b      	ldrb	r3, [r7, #13]
 8008e26:	2b01      	cmp	r3, #1
 8008e28:	d102      	bne.n	8008e30 <HAL_TIMEx_HallSensor_Start_IT+0x40>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008e2a:	7b3b      	ldrb	r3, [r7, #12]
 8008e2c:	2b01      	cmp	r3, #1
 8008e2e:	d001      	beq.n	8008e34 <HAL_TIMEx_HallSensor_Start_IT+0x44>
  {
    return HAL_ERROR;
 8008e30:	2301      	movs	r3, #1
 8008e32:	e05d      	b.n	8008ef0 <HAL_TIMEx_HallSensor_Start_IT+0x100>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2202      	movs	r2, #2
 8008e38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2202      	movs	r2, #2
 8008e40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2202      	movs	r2, #2
 8008e48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2202      	movs	r2, #2
 8008e50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Enable the capture compare Interrupts 1 event */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	68da      	ldr	r2, [r3, #12]
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f042 0202 	orr.w	r2, r2, #2
 8008e62:	60da      	str	r2, [r3, #12]

  /* Enable the Input Capture channel 1
  (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1,
  TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	2201      	movs	r2, #1
 8008e6a:	2100      	movs	r1, #0
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	f7ff fee1 	bl	8008c34 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	4a20      	ldr	r2, [pc, #128]	@ (8008ef8 <HAL_TIMEx_HallSensor_Start_IT+0x108>)
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	d018      	beq.n	8008eae <HAL_TIMEx_HallSensor_Start_IT+0xbe>
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e84:	d013      	beq.n	8008eae <HAL_TIMEx_HallSensor_Start_IT+0xbe>
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	4a1c      	ldr	r2, [pc, #112]	@ (8008efc <HAL_TIMEx_HallSensor_Start_IT+0x10c>)
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d00e      	beq.n	8008eae <HAL_TIMEx_HallSensor_Start_IT+0xbe>
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	4a1a      	ldr	r2, [pc, #104]	@ (8008f00 <HAL_TIMEx_HallSensor_Start_IT+0x110>)
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d009      	beq.n	8008eae <HAL_TIMEx_HallSensor_Start_IT+0xbe>
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	4a19      	ldr	r2, [pc, #100]	@ (8008f04 <HAL_TIMEx_HallSensor_Start_IT+0x114>)
 8008ea0:	4293      	cmp	r3, r2
 8008ea2:	d004      	beq.n	8008eae <HAL_TIMEx_HallSensor_Start_IT+0xbe>
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	4a17      	ldr	r2, [pc, #92]	@ (8008f08 <HAL_TIMEx_HallSensor_Start_IT+0x118>)
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d115      	bne.n	8008eda <HAL_TIMEx_HallSensor_Start_IT+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	689a      	ldr	r2, [r3, #8]
 8008eb4:	4b15      	ldr	r3, [pc, #84]	@ (8008f0c <HAL_TIMEx_HallSensor_Start_IT+0x11c>)
 8008eb6:	4013      	ands	r3, r2
 8008eb8:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	2b06      	cmp	r3, #6
 8008ebe:	d015      	beq.n	8008eec <HAL_TIMEx_HallSensor_Start_IT+0xfc>
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ec6:	d011      	beq.n	8008eec <HAL_TIMEx_HallSensor_Start_IT+0xfc>
    {
      __HAL_TIM_ENABLE(htim);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	681a      	ldr	r2, [r3, #0]
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f042 0201 	orr.w	r2, r2, #1
 8008ed6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ed8:	e008      	b.n	8008eec <HAL_TIMEx_HallSensor_Start_IT+0xfc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	681a      	ldr	r2, [r3, #0]
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f042 0201 	orr.w	r2, r2, #1
 8008ee8:	601a      	str	r2, [r3, #0]
 8008eea:	e000      	b.n	8008eee <HAL_TIMEx_HallSensor_Start_IT+0xfe>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008eec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008eee:	2300      	movs	r3, #0
}
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	3710      	adds	r7, #16
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	bd80      	pop	{r7, pc}
 8008ef8:	40012c00 	.word	0x40012c00
 8008efc:	40000400 	.word	0x40000400
 8008f00:	40000800 	.word	0x40000800
 8008f04:	40013400 	.word	0x40013400
 8008f08:	40014000 	.word	0x40014000
 8008f0c:	00010007 	.word	0x00010007

08008f10 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b084      	sub	sp, #16
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
 8008f18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d109      	bne.n	8008f34 <HAL_TIMEx_PWMN_Start+0x24>
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008f26:	b2db      	uxtb	r3, r3
 8008f28:	2b01      	cmp	r3, #1
 8008f2a:	bf14      	ite	ne
 8008f2c:	2301      	movne	r3, #1
 8008f2e:	2300      	moveq	r3, #0
 8008f30:	b2db      	uxtb	r3, r3
 8008f32:	e022      	b.n	8008f7a <HAL_TIMEx_PWMN_Start+0x6a>
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	2b04      	cmp	r3, #4
 8008f38:	d109      	bne.n	8008f4e <HAL_TIMEx_PWMN_Start+0x3e>
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008f40:	b2db      	uxtb	r3, r3
 8008f42:	2b01      	cmp	r3, #1
 8008f44:	bf14      	ite	ne
 8008f46:	2301      	movne	r3, #1
 8008f48:	2300      	moveq	r3, #0
 8008f4a:	b2db      	uxtb	r3, r3
 8008f4c:	e015      	b.n	8008f7a <HAL_TIMEx_PWMN_Start+0x6a>
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	2b08      	cmp	r3, #8
 8008f52:	d109      	bne.n	8008f68 <HAL_TIMEx_PWMN_Start+0x58>
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8008f5a:	b2db      	uxtb	r3, r3
 8008f5c:	2b01      	cmp	r3, #1
 8008f5e:	bf14      	ite	ne
 8008f60:	2301      	movne	r3, #1
 8008f62:	2300      	moveq	r3, #0
 8008f64:	b2db      	uxtb	r3, r3
 8008f66:	e008      	b.n	8008f7a <HAL_TIMEx_PWMN_Start+0x6a>
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8008f6e:	b2db      	uxtb	r3, r3
 8008f70:	2b01      	cmp	r3, #1
 8008f72:	bf14      	ite	ne
 8008f74:	2301      	movne	r3, #1
 8008f76:	2300      	moveq	r3, #0
 8008f78:	b2db      	uxtb	r3, r3
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d001      	beq.n	8008f82 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8008f7e:	2301      	movs	r3, #1
 8008f80:	e069      	b.n	8009056 <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d104      	bne.n	8008f92 <HAL_TIMEx_PWMN_Start+0x82>
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2202      	movs	r2, #2
 8008f8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008f90:	e013      	b.n	8008fba <HAL_TIMEx_PWMN_Start+0xaa>
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	2b04      	cmp	r3, #4
 8008f96:	d104      	bne.n	8008fa2 <HAL_TIMEx_PWMN_Start+0x92>
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2202      	movs	r2, #2
 8008f9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008fa0:	e00b      	b.n	8008fba <HAL_TIMEx_PWMN_Start+0xaa>
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	2b08      	cmp	r3, #8
 8008fa6:	d104      	bne.n	8008fb2 <HAL_TIMEx_PWMN_Start+0xa2>
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2202      	movs	r2, #2
 8008fac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008fb0:	e003      	b.n	8008fba <HAL_TIMEx_PWMN_Start+0xaa>
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2202      	movs	r2, #2
 8008fb6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	2204      	movs	r2, #4
 8008fc0:	6839      	ldr	r1, [r7, #0]
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	f000 fae2 	bl	800958c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008fd6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	4a20      	ldr	r2, [pc, #128]	@ (8009060 <HAL_TIMEx_PWMN_Start+0x150>)
 8008fde:	4293      	cmp	r3, r2
 8008fe0:	d018      	beq.n	8009014 <HAL_TIMEx_PWMN_Start+0x104>
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008fea:	d013      	beq.n	8009014 <HAL_TIMEx_PWMN_Start+0x104>
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	4a1c      	ldr	r2, [pc, #112]	@ (8009064 <HAL_TIMEx_PWMN_Start+0x154>)
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	d00e      	beq.n	8009014 <HAL_TIMEx_PWMN_Start+0x104>
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	4a1b      	ldr	r2, [pc, #108]	@ (8009068 <HAL_TIMEx_PWMN_Start+0x158>)
 8008ffc:	4293      	cmp	r3, r2
 8008ffe:	d009      	beq.n	8009014 <HAL_TIMEx_PWMN_Start+0x104>
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	4a19      	ldr	r2, [pc, #100]	@ (800906c <HAL_TIMEx_PWMN_Start+0x15c>)
 8009006:	4293      	cmp	r3, r2
 8009008:	d004      	beq.n	8009014 <HAL_TIMEx_PWMN_Start+0x104>
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	4a18      	ldr	r2, [pc, #96]	@ (8009070 <HAL_TIMEx_PWMN_Start+0x160>)
 8009010:	4293      	cmp	r3, r2
 8009012:	d115      	bne.n	8009040 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	689a      	ldr	r2, [r3, #8]
 800901a:	4b16      	ldr	r3, [pc, #88]	@ (8009074 <HAL_TIMEx_PWMN_Start+0x164>)
 800901c:	4013      	ands	r3, r2
 800901e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	2b06      	cmp	r3, #6
 8009024:	d015      	beq.n	8009052 <HAL_TIMEx_PWMN_Start+0x142>
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800902c:	d011      	beq.n	8009052 <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	681a      	ldr	r2, [r3, #0]
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f042 0201 	orr.w	r2, r2, #1
 800903c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800903e:	e008      	b.n	8009052 <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	681a      	ldr	r2, [r3, #0]
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f042 0201 	orr.w	r2, r2, #1
 800904e:	601a      	str	r2, [r3, #0]
 8009050:	e000      	b.n	8009054 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009052:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009054:	2300      	movs	r3, #0
}
 8009056:	4618      	mov	r0, r3
 8009058:	3710      	adds	r7, #16
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}
 800905e:	bf00      	nop
 8009060:	40012c00 	.word	0x40012c00
 8009064:	40000400 	.word	0x40000400
 8009068:	40000800 	.word	0x40000800
 800906c:	40013400 	.word	0x40013400
 8009070:	40014000 	.word	0x40014000
 8009074:	00010007 	.word	0x00010007

08009078 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b082      	sub	sp, #8
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
 8009080:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	2200      	movs	r2, #0
 8009088:	6839      	ldr	r1, [r7, #0]
 800908a:	4618      	mov	r0, r3
 800908c:	f000 fa7e 	bl	800958c <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	6a1a      	ldr	r2, [r3, #32]
 8009096:	f241 1311 	movw	r3, #4369	@ 0x1111
 800909a:	4013      	ands	r3, r2
 800909c:	2b00      	cmp	r3, #0
 800909e:	d10f      	bne.n	80090c0 <HAL_TIMEx_PWMN_Stop+0x48>
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	6a1a      	ldr	r2, [r3, #32]
 80090a6:	f244 4344 	movw	r3, #17476	@ 0x4444
 80090aa:	4013      	ands	r3, r2
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d107      	bne.n	80090c0 <HAL_TIMEx_PWMN_Stop+0x48>
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80090be:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	6a1a      	ldr	r2, [r3, #32]
 80090c6:	f241 1311 	movw	r3, #4369	@ 0x1111
 80090ca:	4013      	ands	r3, r2
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d10f      	bne.n	80090f0 <HAL_TIMEx_PWMN_Stop+0x78>
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	6a1a      	ldr	r2, [r3, #32]
 80090d6:	f244 4344 	movw	r3, #17476	@ 0x4444
 80090da:	4013      	ands	r3, r2
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d107      	bne.n	80090f0 <HAL_TIMEx_PWMN_Stop+0x78>
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	681a      	ldr	r2, [r3, #0]
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f022 0201 	bic.w	r2, r2, #1
 80090ee:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d104      	bne.n	8009100 <HAL_TIMEx_PWMN_Stop+0x88>
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2201      	movs	r2, #1
 80090fa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80090fe:	e013      	b.n	8009128 <HAL_TIMEx_PWMN_Stop+0xb0>
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	2b04      	cmp	r3, #4
 8009104:	d104      	bne.n	8009110 <HAL_TIMEx_PWMN_Stop+0x98>
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2201      	movs	r2, #1
 800910a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800910e:	e00b      	b.n	8009128 <HAL_TIMEx_PWMN_Stop+0xb0>
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	2b08      	cmp	r3, #8
 8009114:	d104      	bne.n	8009120 <HAL_TIMEx_PWMN_Stop+0xa8>
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2201      	movs	r2, #1
 800911a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800911e:	e003      	b.n	8009128 <HAL_TIMEx_PWMN_Stop+0xb0>
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2201      	movs	r2, #1
 8009124:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 8009128:	2300      	movs	r3, #0
}
 800912a:	4618      	mov	r0, r3
 800912c:	3708      	adds	r7, #8
 800912e:	46bd      	mov	sp, r7
 8009130:	bd80      	pop	{r7, pc}
	...

08009134 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009134:	b480      	push	{r7}
 8009136:	b085      	sub	sp, #20
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
 800913c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009144:	2b01      	cmp	r3, #1
 8009146:	d101      	bne.n	800914c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009148:	2302      	movs	r3, #2
 800914a:	e065      	b.n	8009218 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2201      	movs	r2, #1
 8009150:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2202      	movs	r2, #2
 8009158:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	685b      	ldr	r3, [r3, #4]
 8009162:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	689b      	ldr	r3, [r3, #8]
 800916a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	4a2c      	ldr	r2, [pc, #176]	@ (8009224 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009172:	4293      	cmp	r3, r2
 8009174:	d004      	beq.n	8009180 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	4a2b      	ldr	r2, [pc, #172]	@ (8009228 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800917c:	4293      	cmp	r3, r2
 800917e:	d108      	bne.n	8009192 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009186:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	685b      	ldr	r3, [r3, #4]
 800918c:	68fa      	ldr	r2, [r7, #12]
 800918e:	4313      	orrs	r3, r2
 8009190:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009198:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800919c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	68fa      	ldr	r2, [r7, #12]
 80091a4:	4313      	orrs	r3, r2
 80091a6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	68fa      	ldr	r2, [r7, #12]
 80091ae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	4a1b      	ldr	r2, [pc, #108]	@ (8009224 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80091b6:	4293      	cmp	r3, r2
 80091b8:	d018      	beq.n	80091ec <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80091c2:	d013      	beq.n	80091ec <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	4a18      	ldr	r2, [pc, #96]	@ (800922c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80091ca:	4293      	cmp	r3, r2
 80091cc:	d00e      	beq.n	80091ec <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	4a17      	ldr	r2, [pc, #92]	@ (8009230 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80091d4:	4293      	cmp	r3, r2
 80091d6:	d009      	beq.n	80091ec <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	4a12      	ldr	r2, [pc, #72]	@ (8009228 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80091de:	4293      	cmp	r3, r2
 80091e0:	d004      	beq.n	80091ec <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	4a13      	ldr	r2, [pc, #76]	@ (8009234 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80091e8:	4293      	cmp	r3, r2
 80091ea:	d10c      	bne.n	8009206 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80091f2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	689b      	ldr	r3, [r3, #8]
 80091f8:	68ba      	ldr	r2, [r7, #8]
 80091fa:	4313      	orrs	r3, r2
 80091fc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	68ba      	ldr	r2, [r7, #8]
 8009204:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2201      	movs	r2, #1
 800920a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2200      	movs	r2, #0
 8009212:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009216:	2300      	movs	r3, #0
}
 8009218:	4618      	mov	r0, r3
 800921a:	3714      	adds	r7, #20
 800921c:	46bd      	mov	sp, r7
 800921e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009222:	4770      	bx	lr
 8009224:	40012c00 	.word	0x40012c00
 8009228:	40013400 	.word	0x40013400
 800922c:	40000400 	.word	0x40000400
 8009230:	40000800 	.word	0x40000800
 8009234:	40014000 	.word	0x40014000

08009238 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009238:	b480      	push	{r7}
 800923a:	b085      	sub	sp, #20
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
 8009240:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009242:	2300      	movs	r3, #0
 8009244:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800924c:	2b01      	cmp	r3, #1
 800924e:	d101      	bne.n	8009254 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009250:	2302      	movs	r3, #2
 8009252:	e073      	b.n	800933c <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2201      	movs	r2, #1
 8009258:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	68db      	ldr	r3, [r3, #12]
 8009266:	4313      	orrs	r3, r2
 8009268:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	689b      	ldr	r3, [r3, #8]
 8009274:	4313      	orrs	r3, r2
 8009276:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	685b      	ldr	r3, [r3, #4]
 8009282:	4313      	orrs	r3, r2
 8009284:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	4313      	orrs	r3, r2
 8009292:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	691b      	ldr	r3, [r3, #16]
 800929e:	4313      	orrs	r3, r2
 80092a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	695b      	ldr	r3, [r3, #20]
 80092ac:	4313      	orrs	r3, r2
 80092ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092ba:	4313      	orrs	r3, r2
 80092bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	699b      	ldr	r3, [r3, #24]
 80092c8:	041b      	lsls	r3, r3, #16
 80092ca:	4313      	orrs	r3, r2
 80092cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	69db      	ldr	r3, [r3, #28]
 80092d8:	4313      	orrs	r3, r2
 80092da:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	4a19      	ldr	r2, [pc, #100]	@ (8009348 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80092e2:	4293      	cmp	r3, r2
 80092e4:	d004      	beq.n	80092f0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	4a18      	ldr	r2, [pc, #96]	@ (800934c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80092ec:	4293      	cmp	r3, r2
 80092ee:	d11c      	bne.n	800932a <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092fa:	051b      	lsls	r3, r3, #20
 80092fc:	4313      	orrs	r3, r2
 80092fe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	6a1b      	ldr	r3, [r3, #32]
 800930a:	4313      	orrs	r3, r2
 800930c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009318:	4313      	orrs	r3, r2
 800931a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009326:	4313      	orrs	r3, r2
 8009328:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	68fa      	ldr	r2, [r7, #12]
 8009330:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2200      	movs	r2, #0
 8009336:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800933a:	2300      	movs	r3, #0
}
 800933c:	4618      	mov	r0, r3
 800933e:	3714      	adds	r7, #20
 8009340:	46bd      	mov	sp, r7
 8009342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009346:	4770      	bx	lr
 8009348:	40012c00 	.word	0x40012c00
 800934c:	40013400 	.word	0x40013400

08009350 <HAL_TIMEx_ConfigBreakInput>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             const TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)
{
 8009350:	b480      	push	{r7}
 8009352:	b08b      	sub	sp, #44	@ 0x2c
 8009354:	af00      	add	r7, sp, #0
 8009356:	60f8      	str	r0, [r7, #12]
 8009358:	60b9      	str	r1, [r7, #8]
 800935a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800935c:	2300      	movs	r3, #0
 800935e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009368:	2b01      	cmp	r3, #1
 800936a:	d101      	bne.n	8009370 <HAL_TIMEx_ConfigBreakInput+0x20>
 800936c:	2302      	movs	r3, #2
 800936e:	e0c1      	b.n	80094f4 <HAL_TIMEx_ConfigBreakInput+0x1a4>
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	2201      	movs	r2, #1
 8009374:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (sBreakInputConfig->Source)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	3b01      	subs	r3, #1
 800937e:	2b0f      	cmp	r3, #15
 8009380:	d854      	bhi.n	800942c <HAL_TIMEx_ConfigBreakInput+0xdc>
 8009382:	a201      	add	r2, pc, #4	@ (adr r2, 8009388 <HAL_TIMEx_ConfigBreakInput+0x38>)
 8009384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009388:	080093c9 	.word	0x080093c9
 800938c:	080093dd 	.word	0x080093dd
 8009390:	0800942d 	.word	0x0800942d
 8009394:	080093f1 	.word	0x080093f1
 8009398:	0800942d 	.word	0x0800942d
 800939c:	0800942d 	.word	0x0800942d
 80093a0:	0800942d 	.word	0x0800942d
 80093a4:	08009405 	.word	0x08009405
 80093a8:	0800942d 	.word	0x0800942d
 80093ac:	0800942d 	.word	0x0800942d
 80093b0:	0800942d 	.word	0x0800942d
 80093b4:	0800942d 	.word	0x0800942d
 80093b8:	0800942d 	.word	0x0800942d
 80093bc:	0800942d 	.word	0x0800942d
 80093c0:	0800942d 	.word	0x0800942d
 80093c4:	08009419 	.word	0x08009419
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_AF1_BKINE;
 80093c8:	2301      	movs	r3, #1
 80093ca:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 80093cc:	2300      	movs	r3, #0
 80093ce:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKINP;
 80093d0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80093d4:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 80093d6:	2309      	movs	r3, #9
 80093d8:	617b      	str	r3, [r7, #20]
      break;
 80093da:	e030      	b.n	800943e <HAL_TIMEx_ConfigBreakInput+0xee>
    }
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP1E;
 80093dc:	2302      	movs	r3, #2
 80093de:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP1E_Pos;
 80093e0:	2301      	movs	r3, #1
 80093e2:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP1P;
 80093e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80093e8:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP1P_Pos;
 80093ea:	230a      	movs	r3, #10
 80093ec:	617b      	str	r3, [r7, #20]
      break;
 80093ee:	e026      	b.n	800943e <HAL_TIMEx_ConfigBreakInput+0xee>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP2E;
 80093f0:	2304      	movs	r3, #4
 80093f2:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 80093f4:	2302      	movs	r3, #2
 80093f6:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 80093f8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80093fc:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 80093fe:	230b      	movs	r3, #11
 8009400:	617b      	str	r3, [r7, #20]
      break;
 8009402:	e01c      	b.n	800943e <HAL_TIMEx_ConfigBreakInput+0xee>
    }
    case TIM_BREAKINPUTSOURCE_COMP3:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP3E;
 8009404:	2308      	movs	r3, #8
 8009406:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP3E_Pos;
 8009408:	2303      	movs	r3, #3
 800940a:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP3P;
 800940c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009410:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP3P_Pos;
 8009412:	230c      	movs	r3, #12
 8009414:	617b      	str	r3, [r7, #20]
      break;
 8009416:	e012      	b.n	800943e <HAL_TIMEx_ConfigBreakInput+0xee>
    }
    case TIM_BREAKINPUTSOURCE_COMP4:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP4E;
 8009418:	2310      	movs	r3, #16
 800941a:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP4E_Pos;
 800941c:	2304      	movs	r3, #4
 800941e:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP4P;
 8009420:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009424:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP4P_Pos;
 8009426:	230d      	movs	r3, #13
 8009428:	617b      	str	r3, [r7, #20]
      break;
 800942a:	e008      	b.n	800943e <HAL_TIMEx_ConfigBreakInput+0xee>
    }
#endif /* COMP7 */

    default:
    {
      bkin_enable_mask = 0U;
 800942c:	2300      	movs	r3, #0
 800942e:	623b      	str	r3, [r7, #32]
      bkin_polarity_mask = 0U;
 8009430:	2300      	movs	r3, #0
 8009432:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = 0U;
 8009434:	2300      	movs	r3, #0
 8009436:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = 0U;
 8009438:	2300      	movs	r3, #0
 800943a:	617b      	str	r3, [r7, #20]
      break;
 800943c:	bf00      	nop
    }
  }

  switch (BreakInput)
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	2b01      	cmp	r3, #1
 8009442:	d003      	beq.n	800944c <HAL_TIMEx_ConfigBreakInput+0xfc>
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	2b02      	cmp	r3, #2
 8009448:	d025      	beq.n	8009496 <HAL_TIMEx_ConfigBreakInput+0x146>
 800944a:	e049      	b.n	80094e0 <HAL_TIMEx_ConfigBreakInput+0x190>
  {
    case TIM_BREAKINPUT_BRK:
    {
      /* Get the TIMx_AF1 register value */
      tmporx = htim->Instance->AF1;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009452:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 8009454:	6a3b      	ldr	r3, [r7, #32]
 8009456:	43db      	mvns	r3, r3
 8009458:	693a      	ldr	r2, [r7, #16]
 800945a:	4013      	ands	r3, r2
 800945c:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	685a      	ldr	r2, [r3, #4]
 8009462:	69bb      	ldr	r3, [r7, #24]
 8009464:	409a      	lsls	r2, r3
 8009466:	6a3b      	ldr	r3, [r7, #32]
 8009468:	4013      	ands	r3, r2
 800946a:	693a      	ldr	r2, [r7, #16]
 800946c:	4313      	orrs	r3, r2
 800946e:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 8009470:	69fb      	ldr	r3, [r7, #28]
 8009472:	43db      	mvns	r3, r3
 8009474:	693a      	ldr	r2, [r7, #16]
 8009476:	4013      	ands	r3, r2
 8009478:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	689a      	ldr	r2, [r3, #8]
 800947e:	697b      	ldr	r3, [r7, #20]
 8009480:	409a      	lsls	r2, r3
 8009482:	69fb      	ldr	r3, [r7, #28]
 8009484:	4013      	ands	r3, r2
 8009486:	693a      	ldr	r2, [r7, #16]
 8009488:	4313      	orrs	r3, r2
 800948a:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF1 */
      htim->Instance->AF1 = tmporx;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	693a      	ldr	r2, [r7, #16]
 8009492:	661a      	str	r2, [r3, #96]	@ 0x60
      break;
 8009494:	e028      	b.n	80094e8 <HAL_TIMEx_ConfigBreakInput+0x198>
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_AF2 register value */
      tmporx = htim->Instance->AF2;
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800949c:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800949e:	6a3b      	ldr	r3, [r7, #32]
 80094a0:	43db      	mvns	r3, r3
 80094a2:	693a      	ldr	r2, [r7, #16]
 80094a4:	4013      	ands	r3, r2
 80094a6:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	685a      	ldr	r2, [r3, #4]
 80094ac:	69bb      	ldr	r3, [r7, #24]
 80094ae:	409a      	lsls	r2, r3
 80094b0:	6a3b      	ldr	r3, [r7, #32]
 80094b2:	4013      	ands	r3, r2
 80094b4:	693a      	ldr	r2, [r7, #16]
 80094b6:	4313      	orrs	r3, r2
 80094b8:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 80094ba:	69fb      	ldr	r3, [r7, #28]
 80094bc:	43db      	mvns	r3, r3
 80094be:	693a      	ldr	r2, [r7, #16]
 80094c0:	4013      	ands	r3, r2
 80094c2:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	689a      	ldr	r2, [r3, #8]
 80094c8:	697b      	ldr	r3, [r7, #20]
 80094ca:	409a      	lsls	r2, r3
 80094cc:	69fb      	ldr	r3, [r7, #28]
 80094ce:	4013      	ands	r3, r2
 80094d0:	693a      	ldr	r2, [r7, #16]
 80094d2:	4313      	orrs	r3, r2
 80094d4:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	693a      	ldr	r2, [r7, #16]
 80094dc:	665a      	str	r2, [r3, #100]	@ 0x64
      break;
 80094de:	e003      	b.n	80094e8 <HAL_TIMEx_ConfigBreakInput+0x198>
    }
    default:
      status = HAL_ERROR;
 80094e0:	2301      	movs	r3, #1
 80094e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80094e6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	2200      	movs	r2, #0
 80094ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80094f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80094f4:	4618      	mov	r0, r3
 80094f6:	372c      	adds	r7, #44	@ 0x2c
 80094f8:	46bd      	mov	sp, r7
 80094fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fe:	4770      	bx	lr

08009500 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009500:	b480      	push	{r7}
 8009502:	b083      	sub	sp, #12
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009508:	bf00      	nop
 800950a:	370c      	adds	r7, #12
 800950c:	46bd      	mov	sp, r7
 800950e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009512:	4770      	bx	lr

08009514 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009514:	b480      	push	{r7}
 8009516:	b083      	sub	sp, #12
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800951c:	bf00      	nop
 800951e:	370c      	adds	r7, #12
 8009520:	46bd      	mov	sp, r7
 8009522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009526:	4770      	bx	lr

08009528 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009528:	b480      	push	{r7}
 800952a:	b083      	sub	sp, #12
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009530:	bf00      	nop
 8009532:	370c      	adds	r7, #12
 8009534:	46bd      	mov	sp, r7
 8009536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953a:	4770      	bx	lr

0800953c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800953c:	b480      	push	{r7}
 800953e:	b083      	sub	sp, #12
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009544:	bf00      	nop
 8009546:	370c      	adds	r7, #12
 8009548:	46bd      	mov	sp, r7
 800954a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954e:	4770      	bx	lr

08009550 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009550:	b480      	push	{r7}
 8009552:	b083      	sub	sp, #12
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009558:	bf00      	nop
 800955a:	370c      	adds	r7, #12
 800955c:	46bd      	mov	sp, r7
 800955e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009562:	4770      	bx	lr

08009564 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8009564:	b480      	push	{r7}
 8009566:	b083      	sub	sp, #12
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800956c:	bf00      	nop
 800956e:	370c      	adds	r7, #12
 8009570:	46bd      	mov	sp, r7
 8009572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009576:	4770      	bx	lr

08009578 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009578:	b480      	push	{r7}
 800957a:	b083      	sub	sp, #12
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009580:	bf00      	nop
 8009582:	370c      	adds	r7, #12
 8009584:	46bd      	mov	sp, r7
 8009586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958a:	4770      	bx	lr

0800958c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800958c:	b480      	push	{r7}
 800958e:	b087      	sub	sp, #28
 8009590:	af00      	add	r7, sp, #0
 8009592:	60f8      	str	r0, [r7, #12]
 8009594:	60b9      	str	r1, [r7, #8]
 8009596:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	f003 030f 	and.w	r3, r3, #15
 800959e:	2204      	movs	r2, #4
 80095a0:	fa02 f303 	lsl.w	r3, r2, r3
 80095a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	6a1a      	ldr	r2, [r3, #32]
 80095aa:	697b      	ldr	r3, [r7, #20]
 80095ac:	43db      	mvns	r3, r3
 80095ae:	401a      	ands	r2, r3
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	6a1a      	ldr	r2, [r3, #32]
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	f003 030f 	and.w	r3, r3, #15
 80095be:	6879      	ldr	r1, [r7, #4]
 80095c0:	fa01 f303 	lsl.w	r3, r1, r3
 80095c4:	431a      	orrs	r2, r3
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	621a      	str	r2, [r3, #32]
}
 80095ca:	bf00      	nop
 80095cc:	371c      	adds	r7, #28
 80095ce:	46bd      	mov	sp, r7
 80095d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d4:	4770      	bx	lr

080095d6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80095d6:	b580      	push	{r7, lr}
 80095d8:	b082      	sub	sp, #8
 80095da:	af00      	add	r7, sp, #0
 80095dc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d101      	bne.n	80095e8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80095e4:	2301      	movs	r3, #1
 80095e6:	e042      	b.n	800966e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d106      	bne.n	8009600 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2200      	movs	r2, #0
 80095f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80095fa:	6878      	ldr	r0, [r7, #4]
 80095fc:	f7f8 fb42 	bl	8001c84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2224      	movs	r2, #36	@ 0x24
 8009604:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	681a      	ldr	r2, [r3, #0]
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f022 0201 	bic.w	r2, r2, #1
 8009616:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800961c:	2b00      	cmp	r3, #0
 800961e:	d002      	beq.n	8009626 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	f000 fec3 	bl	800a3ac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009626:	6878      	ldr	r0, [r7, #4]
 8009628:	f000 fbf4 	bl	8009e14 <UART_SetConfig>
 800962c:	4603      	mov	r3, r0
 800962e:	2b01      	cmp	r3, #1
 8009630:	d101      	bne.n	8009636 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009632:	2301      	movs	r3, #1
 8009634:	e01b      	b.n	800966e <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	685a      	ldr	r2, [r3, #4]
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009644:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	689a      	ldr	r2, [r3, #8]
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009654:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	681a      	ldr	r2, [r3, #0]
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f042 0201 	orr.w	r2, r2, #1
 8009664:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	f000 ff42 	bl	800a4f0 <UART_CheckIdleState>
 800966c:	4603      	mov	r3, r0
}
 800966e:	4618      	mov	r0, r3
 8009670:	3708      	adds	r7, #8
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}
	...

08009678 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b08a      	sub	sp, #40	@ 0x28
 800967c:	af00      	add	r7, sp, #0
 800967e:	60f8      	str	r0, [r7, #12]
 8009680:	60b9      	str	r1, [r7, #8]
 8009682:	4613      	mov	r3, r2
 8009684:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800968c:	2b20      	cmp	r3, #32
 800968e:	d167      	bne.n	8009760 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d002      	beq.n	800969c <HAL_UART_Transmit_DMA+0x24>
 8009696:	88fb      	ldrh	r3, [r7, #6]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d101      	bne.n	80096a0 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800969c:	2301      	movs	r3, #1
 800969e:	e060      	b.n	8009762 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	68ba      	ldr	r2, [r7, #8]
 80096a4:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	88fa      	ldrh	r2, [r7, #6]
 80096aa:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	88fa      	ldrh	r2, [r7, #6]
 80096b2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	2200      	movs	r2, #0
 80096ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	2221      	movs	r2, #33	@ 0x21
 80096c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d028      	beq.n	8009720 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80096d2:	4a26      	ldr	r2, [pc, #152]	@ (800976c <HAL_UART_Transmit_DMA+0xf4>)
 80096d4:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80096da:	4a25      	ldr	r2, [pc, #148]	@ (8009770 <HAL_UART_Transmit_DMA+0xf8>)
 80096dc:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80096e2:	4a24      	ldr	r2, [pc, #144]	@ (8009774 <HAL_UART_Transmit_DMA+0xfc>)
 80096e4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80096ea:	2200      	movs	r2, #0
 80096ec:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80096f6:	4619      	mov	r1, r3
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	3328      	adds	r3, #40	@ 0x28
 80096fe:	461a      	mov	r2, r3
 8009700:	88fb      	ldrh	r3, [r7, #6]
 8009702:	f7fb fe67 	bl	80053d4 <HAL_DMA_Start_IT>
 8009706:	4603      	mov	r3, r0
 8009708:	2b00      	cmp	r3, #0
 800970a:	d009      	beq.n	8009720 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	2210      	movs	r2, #16
 8009710:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	2220      	movs	r2, #32
 8009718:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800971c:	2301      	movs	r3, #1
 800971e:	e020      	b.n	8009762 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	2240      	movs	r2, #64	@ 0x40
 8009726:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	3308      	adds	r3, #8
 800972e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009730:	697b      	ldr	r3, [r7, #20]
 8009732:	e853 3f00 	ldrex	r3, [r3]
 8009736:	613b      	str	r3, [r7, #16]
   return(result);
 8009738:	693b      	ldr	r3, [r7, #16]
 800973a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800973e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	3308      	adds	r3, #8
 8009746:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009748:	623a      	str	r2, [r7, #32]
 800974a:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800974c:	69f9      	ldr	r1, [r7, #28]
 800974e:	6a3a      	ldr	r2, [r7, #32]
 8009750:	e841 2300 	strex	r3, r2, [r1]
 8009754:	61bb      	str	r3, [r7, #24]
   return(result);
 8009756:	69bb      	ldr	r3, [r7, #24]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d1e5      	bne.n	8009728 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800975c:	2300      	movs	r3, #0
 800975e:	e000      	b.n	8009762 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8009760:	2302      	movs	r3, #2
  }
}
 8009762:	4618      	mov	r0, r3
 8009764:	3728      	adds	r7, #40	@ 0x28
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}
 800976a:	bf00      	nop
 800976c:	0800a86d 	.word	0x0800a86d
 8009770:	0800a907 	.word	0x0800a907
 8009774:	0800a923 	.word	0x0800a923

08009778 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b0ba      	sub	sp, #232	@ 0xe8
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	69db      	ldr	r3, [r3, #28]
 8009786:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	689b      	ldr	r3, [r3, #8]
 800979a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800979e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80097a2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80097a6:	4013      	ands	r3, r2
 80097a8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80097ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d11b      	bne.n	80097ec <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80097b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097b8:	f003 0320 	and.w	r3, r3, #32
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d015      	beq.n	80097ec <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80097c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80097c4:	f003 0320 	and.w	r3, r3, #32
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d105      	bne.n	80097d8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80097cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80097d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d009      	beq.n	80097ec <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80097dc:	2b00      	cmp	r3, #0
 80097de:	f000 82e3 	beq.w	8009da8 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	4798      	blx	r3
      }
      return;
 80097ea:	e2dd      	b.n	8009da8 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80097ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	f000 8123 	beq.w	8009a3c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80097f6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80097fa:	4b8d      	ldr	r3, [pc, #564]	@ (8009a30 <HAL_UART_IRQHandler+0x2b8>)
 80097fc:	4013      	ands	r3, r2
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d106      	bne.n	8009810 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009802:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009806:	4b8b      	ldr	r3, [pc, #556]	@ (8009a34 <HAL_UART_IRQHandler+0x2bc>)
 8009808:	4013      	ands	r3, r2
 800980a:	2b00      	cmp	r3, #0
 800980c:	f000 8116 	beq.w	8009a3c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009810:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009814:	f003 0301 	and.w	r3, r3, #1
 8009818:	2b00      	cmp	r3, #0
 800981a:	d011      	beq.n	8009840 <HAL_UART_IRQHandler+0xc8>
 800981c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009820:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009824:	2b00      	cmp	r3, #0
 8009826:	d00b      	beq.n	8009840 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	2201      	movs	r2, #1
 800982e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009836:	f043 0201 	orr.w	r2, r3, #1
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009840:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009844:	f003 0302 	and.w	r3, r3, #2
 8009848:	2b00      	cmp	r3, #0
 800984a:	d011      	beq.n	8009870 <HAL_UART_IRQHandler+0xf8>
 800984c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009850:	f003 0301 	and.w	r3, r3, #1
 8009854:	2b00      	cmp	r3, #0
 8009856:	d00b      	beq.n	8009870 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	2202      	movs	r2, #2
 800985e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009866:	f043 0204 	orr.w	r2, r3, #4
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009870:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009874:	f003 0304 	and.w	r3, r3, #4
 8009878:	2b00      	cmp	r3, #0
 800987a:	d011      	beq.n	80098a0 <HAL_UART_IRQHandler+0x128>
 800987c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009880:	f003 0301 	and.w	r3, r3, #1
 8009884:	2b00      	cmp	r3, #0
 8009886:	d00b      	beq.n	80098a0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	2204      	movs	r2, #4
 800988e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009896:	f043 0202 	orr.w	r2, r3, #2
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80098a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098a4:	f003 0308 	and.w	r3, r3, #8
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d017      	beq.n	80098dc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80098ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80098b0:	f003 0320 	and.w	r3, r3, #32
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d105      	bne.n	80098c4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80098b8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80098bc:	4b5c      	ldr	r3, [pc, #368]	@ (8009a30 <HAL_UART_IRQHandler+0x2b8>)
 80098be:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d00b      	beq.n	80098dc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	2208      	movs	r2, #8
 80098ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80098d2:	f043 0208 	orr.w	r2, r3, #8
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80098dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d012      	beq.n	800990e <HAL_UART_IRQHandler+0x196>
 80098e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80098ec:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d00c      	beq.n	800990e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80098fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009904:	f043 0220 	orr.w	r2, r3, #32
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009914:	2b00      	cmp	r3, #0
 8009916:	f000 8249 	beq.w	8009dac <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800991a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800991e:	f003 0320 	and.w	r3, r3, #32
 8009922:	2b00      	cmp	r3, #0
 8009924:	d013      	beq.n	800994e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009926:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800992a:	f003 0320 	and.w	r3, r3, #32
 800992e:	2b00      	cmp	r3, #0
 8009930:	d105      	bne.n	800993e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009932:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009936:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800993a:	2b00      	cmp	r3, #0
 800993c:	d007      	beq.n	800994e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009942:	2b00      	cmp	r3, #0
 8009944:	d003      	beq.n	800994e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009954:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	689b      	ldr	r3, [r3, #8]
 800995e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009962:	2b40      	cmp	r3, #64	@ 0x40
 8009964:	d005      	beq.n	8009972 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009966:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800996a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800996e:	2b00      	cmp	r3, #0
 8009970:	d054      	beq.n	8009a1c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009972:	6878      	ldr	r0, [r7, #4]
 8009974:	f000 ff14 	bl	800a7a0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	689b      	ldr	r3, [r3, #8]
 800997e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009982:	2b40      	cmp	r3, #64	@ 0x40
 8009984:	d146      	bne.n	8009a14 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	3308      	adds	r3, #8
 800998c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009990:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009994:	e853 3f00 	ldrex	r3, [r3]
 8009998:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800999c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80099a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80099a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	3308      	adds	r3, #8
 80099ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80099b2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80099b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80099be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80099c2:	e841 2300 	strex	r3, r2, [r1]
 80099c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80099ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d1d9      	bne.n	8009986 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d017      	beq.n	8009a0c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80099e2:	4a15      	ldr	r2, [pc, #84]	@ (8009a38 <HAL_UART_IRQHandler+0x2c0>)
 80099e4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80099ec:	4618      	mov	r0, r3
 80099ee:	f7fb fdc5 	bl	800557c <HAL_DMA_Abort_IT>
 80099f2:	4603      	mov	r3, r0
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d019      	beq.n	8009a2c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80099fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a00:	687a      	ldr	r2, [r7, #4]
 8009a02:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8009a06:	4610      	mov	r0, r2
 8009a08:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a0a:	e00f      	b.n	8009a2c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009a0c:	6878      	ldr	r0, [r7, #4]
 8009a0e:	f000 f9eb 	bl	8009de8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a12:	e00b      	b.n	8009a2c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	f000 f9e7 	bl	8009de8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a1a:	e007      	b.n	8009a2c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009a1c:	6878      	ldr	r0, [r7, #4]
 8009a1e:	f000 f9e3 	bl	8009de8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2200      	movs	r2, #0
 8009a26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8009a2a:	e1bf      	b.n	8009dac <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a2c:	bf00      	nop
    return;
 8009a2e:	e1bd      	b.n	8009dac <HAL_UART_IRQHandler+0x634>
 8009a30:	10000001 	.word	0x10000001
 8009a34:	04000120 	.word	0x04000120
 8009a38:	0800a9a3 	.word	0x0800a9a3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a40:	2b01      	cmp	r3, #1
 8009a42:	f040 8153 	bne.w	8009cec <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009a46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a4a:	f003 0310 	and.w	r3, r3, #16
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	f000 814c 	beq.w	8009cec <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009a54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009a58:	f003 0310 	and.w	r3, r3, #16
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	f000 8145 	beq.w	8009cec <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	2210      	movs	r2, #16
 8009a68:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	689b      	ldr	r3, [r3, #8]
 8009a70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a74:	2b40      	cmp	r3, #64	@ 0x40
 8009a76:	f040 80bb 	bne.w	8009bf0 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	685b      	ldr	r3, [r3, #4]
 8009a84:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009a88:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	f000 818f 	beq.w	8009db0 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009a98:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009a9c:	429a      	cmp	r2, r3
 8009a9e:	f080 8187 	bcs.w	8009db0 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009aa8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	f003 0320 	and.w	r3, r3, #32
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	f040 8087 	bne.w	8009bce <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ac8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009acc:	e853 3f00 	ldrex	r3, [r3]
 8009ad0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009ad4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009ad8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009adc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	461a      	mov	r2, r3
 8009ae6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009aea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009aee:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009af2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009af6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009afa:	e841 2300 	strex	r3, r2, [r1]
 8009afe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009b02:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d1da      	bne.n	8009ac0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	3308      	adds	r3, #8
 8009b10:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b12:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009b14:	e853 3f00 	ldrex	r3, [r3]
 8009b18:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009b1a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009b1c:	f023 0301 	bic.w	r3, r3, #1
 8009b20:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	3308      	adds	r3, #8
 8009b2a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009b2e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009b32:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b34:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009b36:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009b3a:	e841 2300 	strex	r3, r2, [r1]
 8009b3e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009b40:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d1e1      	bne.n	8009b0a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	3308      	adds	r3, #8
 8009b4c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b4e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009b50:	e853 3f00 	ldrex	r3, [r3]
 8009b54:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009b56:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009b58:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009b5c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	3308      	adds	r3, #8
 8009b66:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009b6a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009b6c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b6e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009b70:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009b72:	e841 2300 	strex	r3, r2, [r1]
 8009b76:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009b78:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d1e3      	bne.n	8009b46 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	2220      	movs	r2, #32
 8009b82:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2200      	movs	r2, #0
 8009b8a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b94:	e853 3f00 	ldrex	r3, [r3]
 8009b98:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009b9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009b9c:	f023 0310 	bic.w	r3, r3, #16
 8009ba0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	461a      	mov	r2, r3
 8009baa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009bae:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009bb0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bb2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009bb4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009bb6:	e841 2300 	strex	r3, r2, [r1]
 8009bba:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009bbc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d1e4      	bne.n	8009b8c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009bc8:	4618      	mov	r0, r3
 8009bca:	f7fb fc7e 	bl	80054ca <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	2202      	movs	r2, #2
 8009bd2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009be0:	b29b      	uxth	r3, r3
 8009be2:	1ad3      	subs	r3, r2, r3
 8009be4:	b29b      	uxth	r3, r3
 8009be6:	4619      	mov	r1, r3
 8009be8:	6878      	ldr	r0, [r7, #4]
 8009bea:	f000 f907 	bl	8009dfc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009bee:	e0df      	b.n	8009db0 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009bfc:	b29b      	uxth	r3, r3
 8009bfe:	1ad3      	subs	r3, r2, r3
 8009c00:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009c0a:	b29b      	uxth	r3, r3
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	f000 80d1 	beq.w	8009db4 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8009c12:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	f000 80cc 	beq.w	8009db4 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c24:	e853 3f00 	ldrex	r3, [r3]
 8009c28:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009c2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c2c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009c30:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	461a      	mov	r2, r3
 8009c3a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009c3e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009c40:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c42:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009c44:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009c46:	e841 2300 	strex	r3, r2, [r1]
 8009c4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009c4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d1e4      	bne.n	8009c1c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	3308      	adds	r3, #8
 8009c58:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c5c:	e853 3f00 	ldrex	r3, [r3]
 8009c60:	623b      	str	r3, [r7, #32]
   return(result);
 8009c62:	6a3b      	ldr	r3, [r7, #32]
 8009c64:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009c68:	f023 0301 	bic.w	r3, r3, #1
 8009c6c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	3308      	adds	r3, #8
 8009c76:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009c7a:	633a      	str	r2, [r7, #48]	@ 0x30
 8009c7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c7e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009c80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c82:	e841 2300 	strex	r3, r2, [r1]
 8009c86:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009c88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d1e1      	bne.n	8009c52 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2220      	movs	r2, #32
 8009c92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	2200      	movs	r2, #0
 8009c9a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ca8:	693b      	ldr	r3, [r7, #16]
 8009caa:	e853 3f00 	ldrex	r3, [r3]
 8009cae:	60fb      	str	r3, [r7, #12]
   return(result);
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	f023 0310 	bic.w	r3, r3, #16
 8009cb6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	461a      	mov	r2, r3
 8009cc0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009cc4:	61fb      	str	r3, [r7, #28]
 8009cc6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cc8:	69b9      	ldr	r1, [r7, #24]
 8009cca:	69fa      	ldr	r2, [r7, #28]
 8009ccc:	e841 2300 	strex	r3, r2, [r1]
 8009cd0:	617b      	str	r3, [r7, #20]
   return(result);
 8009cd2:	697b      	ldr	r3, [r7, #20]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d1e4      	bne.n	8009ca2 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2202      	movs	r2, #2
 8009cdc:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009cde:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009ce2:	4619      	mov	r1, r3
 8009ce4:	6878      	ldr	r0, [r7, #4]
 8009ce6:	f000 f889 	bl	8009dfc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009cea:	e063      	b.n	8009db4 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009cec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009cf0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d00e      	beq.n	8009d16 <HAL_UART_IRQHandler+0x59e>
 8009cf8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009cfc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d008      	beq.n	8009d16 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009d0c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009d0e:	6878      	ldr	r0, [r7, #4]
 8009d10:	f000 fe88 	bl	800aa24 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009d14:	e051      	b.n	8009dba <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009d16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d014      	beq.n	8009d4c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009d22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d105      	bne.n	8009d3a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009d2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009d32:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d008      	beq.n	8009d4c <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d03a      	beq.n	8009db8 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009d46:	6878      	ldr	r0, [r7, #4]
 8009d48:	4798      	blx	r3
    }
    return;
 8009d4a:	e035      	b.n	8009db8 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009d4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d009      	beq.n	8009d6c <HAL_UART_IRQHandler+0x5f4>
 8009d58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d003      	beq.n	8009d6c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8009d64:	6878      	ldr	r0, [r7, #4]
 8009d66:	f000 fe32 	bl	800a9ce <UART_EndTransmit_IT>
    return;
 8009d6a:	e026      	b.n	8009dba <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009d6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d70:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d009      	beq.n	8009d8c <HAL_UART_IRQHandler+0x614>
 8009d78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d7c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d003      	beq.n	8009d8c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009d84:	6878      	ldr	r0, [r7, #4]
 8009d86:	f000 fe61 	bl	800aa4c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009d8a:	e016      	b.n	8009dba <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009d8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d90:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d010      	beq.n	8009dba <HAL_UART_IRQHandler+0x642>
 8009d98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	da0c      	bge.n	8009dba <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009da0:	6878      	ldr	r0, [r7, #4]
 8009da2:	f000 fe49 	bl	800aa38 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009da6:	e008      	b.n	8009dba <HAL_UART_IRQHandler+0x642>
      return;
 8009da8:	bf00      	nop
 8009daa:	e006      	b.n	8009dba <HAL_UART_IRQHandler+0x642>
    return;
 8009dac:	bf00      	nop
 8009dae:	e004      	b.n	8009dba <HAL_UART_IRQHandler+0x642>
      return;
 8009db0:	bf00      	nop
 8009db2:	e002      	b.n	8009dba <HAL_UART_IRQHandler+0x642>
      return;
 8009db4:	bf00      	nop
 8009db6:	e000      	b.n	8009dba <HAL_UART_IRQHandler+0x642>
    return;
 8009db8:	bf00      	nop
  }
}
 8009dba:	37e8      	adds	r7, #232	@ 0xe8
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bd80      	pop	{r7, pc}

08009dc0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009dc0:	b480      	push	{r7}
 8009dc2:	b083      	sub	sp, #12
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009dc8:	bf00      	nop
 8009dca:	370c      	adds	r7, #12
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd2:	4770      	bx	lr

08009dd4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009dd4:	b480      	push	{r7}
 8009dd6:	b083      	sub	sp, #12
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009ddc:	bf00      	nop
 8009dde:	370c      	adds	r7, #12
 8009de0:	46bd      	mov	sp, r7
 8009de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de6:	4770      	bx	lr

08009de8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009de8:	b480      	push	{r7}
 8009dea:	b083      	sub	sp, #12
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009df0:	bf00      	nop
 8009df2:	370c      	adds	r7, #12
 8009df4:	46bd      	mov	sp, r7
 8009df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfa:	4770      	bx	lr

08009dfc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009dfc:	b480      	push	{r7}
 8009dfe:	b083      	sub	sp, #12
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
 8009e04:	460b      	mov	r3, r1
 8009e06:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009e08:	bf00      	nop
 8009e0a:	370c      	adds	r7, #12
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e12:	4770      	bx	lr

08009e14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009e14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009e18:	b08c      	sub	sp, #48	@ 0x30
 8009e1a:	af00      	add	r7, sp, #0
 8009e1c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009e1e:	2300      	movs	r3, #0
 8009e20:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009e24:	697b      	ldr	r3, [r7, #20]
 8009e26:	689a      	ldr	r2, [r3, #8]
 8009e28:	697b      	ldr	r3, [r7, #20]
 8009e2a:	691b      	ldr	r3, [r3, #16]
 8009e2c:	431a      	orrs	r2, r3
 8009e2e:	697b      	ldr	r3, [r7, #20]
 8009e30:	695b      	ldr	r3, [r3, #20]
 8009e32:	431a      	orrs	r2, r3
 8009e34:	697b      	ldr	r3, [r7, #20]
 8009e36:	69db      	ldr	r3, [r3, #28]
 8009e38:	4313      	orrs	r3, r2
 8009e3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009e3c:	697b      	ldr	r3, [r7, #20]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	681a      	ldr	r2, [r3, #0]
 8009e42:	4bab      	ldr	r3, [pc, #684]	@ (800a0f0 <UART_SetConfig+0x2dc>)
 8009e44:	4013      	ands	r3, r2
 8009e46:	697a      	ldr	r2, [r7, #20]
 8009e48:	6812      	ldr	r2, [r2, #0]
 8009e4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009e4c:	430b      	orrs	r3, r1
 8009e4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009e50:	697b      	ldr	r3, [r7, #20]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	685b      	ldr	r3, [r3, #4]
 8009e56:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009e5a:	697b      	ldr	r3, [r7, #20]
 8009e5c:	68da      	ldr	r2, [r3, #12]
 8009e5e:	697b      	ldr	r3, [r7, #20]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	430a      	orrs	r2, r1
 8009e64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009e66:	697b      	ldr	r3, [r7, #20]
 8009e68:	699b      	ldr	r3, [r3, #24]
 8009e6a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009e6c:	697b      	ldr	r3, [r7, #20]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	4aa0      	ldr	r2, [pc, #640]	@ (800a0f4 <UART_SetConfig+0x2e0>)
 8009e72:	4293      	cmp	r3, r2
 8009e74:	d004      	beq.n	8009e80 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009e76:	697b      	ldr	r3, [r7, #20]
 8009e78:	6a1b      	ldr	r3, [r3, #32]
 8009e7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009e7c:	4313      	orrs	r3, r2
 8009e7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009e80:	697b      	ldr	r3, [r7, #20]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	689b      	ldr	r3, [r3, #8]
 8009e86:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8009e8a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8009e8e:	697a      	ldr	r2, [r7, #20]
 8009e90:	6812      	ldr	r2, [r2, #0]
 8009e92:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009e94:	430b      	orrs	r3, r1
 8009e96:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009e98:	697b      	ldr	r3, [r7, #20]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e9e:	f023 010f 	bic.w	r1, r3, #15
 8009ea2:	697b      	ldr	r3, [r7, #20]
 8009ea4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009ea6:	697b      	ldr	r3, [r7, #20]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	430a      	orrs	r2, r1
 8009eac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009eae:	697b      	ldr	r3, [r7, #20]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	4a91      	ldr	r2, [pc, #580]	@ (800a0f8 <UART_SetConfig+0x2e4>)
 8009eb4:	4293      	cmp	r3, r2
 8009eb6:	d125      	bne.n	8009f04 <UART_SetConfig+0xf0>
 8009eb8:	4b90      	ldr	r3, [pc, #576]	@ (800a0fc <UART_SetConfig+0x2e8>)
 8009eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ebe:	f003 0303 	and.w	r3, r3, #3
 8009ec2:	2b03      	cmp	r3, #3
 8009ec4:	d81a      	bhi.n	8009efc <UART_SetConfig+0xe8>
 8009ec6:	a201      	add	r2, pc, #4	@ (adr r2, 8009ecc <UART_SetConfig+0xb8>)
 8009ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ecc:	08009edd 	.word	0x08009edd
 8009ed0:	08009eed 	.word	0x08009eed
 8009ed4:	08009ee5 	.word	0x08009ee5
 8009ed8:	08009ef5 	.word	0x08009ef5
 8009edc:	2301      	movs	r3, #1
 8009ede:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ee2:	e0d6      	b.n	800a092 <UART_SetConfig+0x27e>
 8009ee4:	2302      	movs	r3, #2
 8009ee6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009eea:	e0d2      	b.n	800a092 <UART_SetConfig+0x27e>
 8009eec:	2304      	movs	r3, #4
 8009eee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ef2:	e0ce      	b.n	800a092 <UART_SetConfig+0x27e>
 8009ef4:	2308      	movs	r3, #8
 8009ef6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009efa:	e0ca      	b.n	800a092 <UART_SetConfig+0x27e>
 8009efc:	2310      	movs	r3, #16
 8009efe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f02:	e0c6      	b.n	800a092 <UART_SetConfig+0x27e>
 8009f04:	697b      	ldr	r3, [r7, #20]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	4a7d      	ldr	r2, [pc, #500]	@ (800a100 <UART_SetConfig+0x2ec>)
 8009f0a:	4293      	cmp	r3, r2
 8009f0c:	d138      	bne.n	8009f80 <UART_SetConfig+0x16c>
 8009f0e:	4b7b      	ldr	r3, [pc, #492]	@ (800a0fc <UART_SetConfig+0x2e8>)
 8009f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f14:	f003 030c 	and.w	r3, r3, #12
 8009f18:	2b0c      	cmp	r3, #12
 8009f1a:	d82d      	bhi.n	8009f78 <UART_SetConfig+0x164>
 8009f1c:	a201      	add	r2, pc, #4	@ (adr r2, 8009f24 <UART_SetConfig+0x110>)
 8009f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f22:	bf00      	nop
 8009f24:	08009f59 	.word	0x08009f59
 8009f28:	08009f79 	.word	0x08009f79
 8009f2c:	08009f79 	.word	0x08009f79
 8009f30:	08009f79 	.word	0x08009f79
 8009f34:	08009f69 	.word	0x08009f69
 8009f38:	08009f79 	.word	0x08009f79
 8009f3c:	08009f79 	.word	0x08009f79
 8009f40:	08009f79 	.word	0x08009f79
 8009f44:	08009f61 	.word	0x08009f61
 8009f48:	08009f79 	.word	0x08009f79
 8009f4c:	08009f79 	.word	0x08009f79
 8009f50:	08009f79 	.word	0x08009f79
 8009f54:	08009f71 	.word	0x08009f71
 8009f58:	2300      	movs	r3, #0
 8009f5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f5e:	e098      	b.n	800a092 <UART_SetConfig+0x27e>
 8009f60:	2302      	movs	r3, #2
 8009f62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f66:	e094      	b.n	800a092 <UART_SetConfig+0x27e>
 8009f68:	2304      	movs	r3, #4
 8009f6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f6e:	e090      	b.n	800a092 <UART_SetConfig+0x27e>
 8009f70:	2308      	movs	r3, #8
 8009f72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f76:	e08c      	b.n	800a092 <UART_SetConfig+0x27e>
 8009f78:	2310      	movs	r3, #16
 8009f7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f7e:	e088      	b.n	800a092 <UART_SetConfig+0x27e>
 8009f80:	697b      	ldr	r3, [r7, #20]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	4a5f      	ldr	r2, [pc, #380]	@ (800a104 <UART_SetConfig+0x2f0>)
 8009f86:	4293      	cmp	r3, r2
 8009f88:	d125      	bne.n	8009fd6 <UART_SetConfig+0x1c2>
 8009f8a:	4b5c      	ldr	r3, [pc, #368]	@ (800a0fc <UART_SetConfig+0x2e8>)
 8009f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f90:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009f94:	2b30      	cmp	r3, #48	@ 0x30
 8009f96:	d016      	beq.n	8009fc6 <UART_SetConfig+0x1b2>
 8009f98:	2b30      	cmp	r3, #48	@ 0x30
 8009f9a:	d818      	bhi.n	8009fce <UART_SetConfig+0x1ba>
 8009f9c:	2b20      	cmp	r3, #32
 8009f9e:	d00a      	beq.n	8009fb6 <UART_SetConfig+0x1a2>
 8009fa0:	2b20      	cmp	r3, #32
 8009fa2:	d814      	bhi.n	8009fce <UART_SetConfig+0x1ba>
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d002      	beq.n	8009fae <UART_SetConfig+0x19a>
 8009fa8:	2b10      	cmp	r3, #16
 8009faa:	d008      	beq.n	8009fbe <UART_SetConfig+0x1aa>
 8009fac:	e00f      	b.n	8009fce <UART_SetConfig+0x1ba>
 8009fae:	2300      	movs	r3, #0
 8009fb0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fb4:	e06d      	b.n	800a092 <UART_SetConfig+0x27e>
 8009fb6:	2302      	movs	r3, #2
 8009fb8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fbc:	e069      	b.n	800a092 <UART_SetConfig+0x27e>
 8009fbe:	2304      	movs	r3, #4
 8009fc0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fc4:	e065      	b.n	800a092 <UART_SetConfig+0x27e>
 8009fc6:	2308      	movs	r3, #8
 8009fc8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fcc:	e061      	b.n	800a092 <UART_SetConfig+0x27e>
 8009fce:	2310      	movs	r3, #16
 8009fd0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fd4:	e05d      	b.n	800a092 <UART_SetConfig+0x27e>
 8009fd6:	697b      	ldr	r3, [r7, #20]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	4a4b      	ldr	r2, [pc, #300]	@ (800a108 <UART_SetConfig+0x2f4>)
 8009fdc:	4293      	cmp	r3, r2
 8009fde:	d125      	bne.n	800a02c <UART_SetConfig+0x218>
 8009fe0:	4b46      	ldr	r3, [pc, #280]	@ (800a0fc <UART_SetConfig+0x2e8>)
 8009fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009fe6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009fea:	2bc0      	cmp	r3, #192	@ 0xc0
 8009fec:	d016      	beq.n	800a01c <UART_SetConfig+0x208>
 8009fee:	2bc0      	cmp	r3, #192	@ 0xc0
 8009ff0:	d818      	bhi.n	800a024 <UART_SetConfig+0x210>
 8009ff2:	2b80      	cmp	r3, #128	@ 0x80
 8009ff4:	d00a      	beq.n	800a00c <UART_SetConfig+0x1f8>
 8009ff6:	2b80      	cmp	r3, #128	@ 0x80
 8009ff8:	d814      	bhi.n	800a024 <UART_SetConfig+0x210>
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d002      	beq.n	800a004 <UART_SetConfig+0x1f0>
 8009ffe:	2b40      	cmp	r3, #64	@ 0x40
 800a000:	d008      	beq.n	800a014 <UART_SetConfig+0x200>
 800a002:	e00f      	b.n	800a024 <UART_SetConfig+0x210>
 800a004:	2300      	movs	r3, #0
 800a006:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a00a:	e042      	b.n	800a092 <UART_SetConfig+0x27e>
 800a00c:	2302      	movs	r3, #2
 800a00e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a012:	e03e      	b.n	800a092 <UART_SetConfig+0x27e>
 800a014:	2304      	movs	r3, #4
 800a016:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a01a:	e03a      	b.n	800a092 <UART_SetConfig+0x27e>
 800a01c:	2308      	movs	r3, #8
 800a01e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a022:	e036      	b.n	800a092 <UART_SetConfig+0x27e>
 800a024:	2310      	movs	r3, #16
 800a026:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a02a:	e032      	b.n	800a092 <UART_SetConfig+0x27e>
 800a02c:	697b      	ldr	r3, [r7, #20]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	4a30      	ldr	r2, [pc, #192]	@ (800a0f4 <UART_SetConfig+0x2e0>)
 800a032:	4293      	cmp	r3, r2
 800a034:	d12a      	bne.n	800a08c <UART_SetConfig+0x278>
 800a036:	4b31      	ldr	r3, [pc, #196]	@ (800a0fc <UART_SetConfig+0x2e8>)
 800a038:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a03c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a040:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a044:	d01a      	beq.n	800a07c <UART_SetConfig+0x268>
 800a046:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a04a:	d81b      	bhi.n	800a084 <UART_SetConfig+0x270>
 800a04c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a050:	d00c      	beq.n	800a06c <UART_SetConfig+0x258>
 800a052:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a056:	d815      	bhi.n	800a084 <UART_SetConfig+0x270>
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d003      	beq.n	800a064 <UART_SetConfig+0x250>
 800a05c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a060:	d008      	beq.n	800a074 <UART_SetConfig+0x260>
 800a062:	e00f      	b.n	800a084 <UART_SetConfig+0x270>
 800a064:	2300      	movs	r3, #0
 800a066:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a06a:	e012      	b.n	800a092 <UART_SetConfig+0x27e>
 800a06c:	2302      	movs	r3, #2
 800a06e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a072:	e00e      	b.n	800a092 <UART_SetConfig+0x27e>
 800a074:	2304      	movs	r3, #4
 800a076:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a07a:	e00a      	b.n	800a092 <UART_SetConfig+0x27e>
 800a07c:	2308      	movs	r3, #8
 800a07e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a082:	e006      	b.n	800a092 <UART_SetConfig+0x27e>
 800a084:	2310      	movs	r3, #16
 800a086:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a08a:	e002      	b.n	800a092 <UART_SetConfig+0x27e>
 800a08c:	2310      	movs	r3, #16
 800a08e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a092:	697b      	ldr	r3, [r7, #20]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	4a17      	ldr	r2, [pc, #92]	@ (800a0f4 <UART_SetConfig+0x2e0>)
 800a098:	4293      	cmp	r3, r2
 800a09a:	f040 80a8 	bne.w	800a1ee <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a09e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a0a2:	2b08      	cmp	r3, #8
 800a0a4:	d834      	bhi.n	800a110 <UART_SetConfig+0x2fc>
 800a0a6:	a201      	add	r2, pc, #4	@ (adr r2, 800a0ac <UART_SetConfig+0x298>)
 800a0a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0ac:	0800a0d1 	.word	0x0800a0d1
 800a0b0:	0800a111 	.word	0x0800a111
 800a0b4:	0800a0d9 	.word	0x0800a0d9
 800a0b8:	0800a111 	.word	0x0800a111
 800a0bc:	0800a0df 	.word	0x0800a0df
 800a0c0:	0800a111 	.word	0x0800a111
 800a0c4:	0800a111 	.word	0x0800a111
 800a0c8:	0800a111 	.word	0x0800a111
 800a0cc:	0800a0e7 	.word	0x0800a0e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a0d0:	f7fd f880 	bl	80071d4 <HAL_RCC_GetPCLK1Freq>
 800a0d4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a0d6:	e021      	b.n	800a11c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a0d8:	4b0c      	ldr	r3, [pc, #48]	@ (800a10c <UART_SetConfig+0x2f8>)
 800a0da:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a0dc:	e01e      	b.n	800a11c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a0de:	f7fd f80b 	bl	80070f8 <HAL_RCC_GetSysClockFreq>
 800a0e2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a0e4:	e01a      	b.n	800a11c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a0e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a0ea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a0ec:	e016      	b.n	800a11c <UART_SetConfig+0x308>
 800a0ee:	bf00      	nop
 800a0f0:	cfff69f3 	.word	0xcfff69f3
 800a0f4:	40008000 	.word	0x40008000
 800a0f8:	40013800 	.word	0x40013800
 800a0fc:	40021000 	.word	0x40021000
 800a100:	40004400 	.word	0x40004400
 800a104:	40004800 	.word	0x40004800
 800a108:	40004c00 	.word	0x40004c00
 800a10c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800a110:	2300      	movs	r3, #0
 800a112:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a114:	2301      	movs	r3, #1
 800a116:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a11a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a11c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a11e:	2b00      	cmp	r3, #0
 800a120:	f000 812a 	beq.w	800a378 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a124:	697b      	ldr	r3, [r7, #20]
 800a126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a128:	4a9e      	ldr	r2, [pc, #632]	@ (800a3a4 <UART_SetConfig+0x590>)
 800a12a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a12e:	461a      	mov	r2, r3
 800a130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a132:	fbb3 f3f2 	udiv	r3, r3, r2
 800a136:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a138:	697b      	ldr	r3, [r7, #20]
 800a13a:	685a      	ldr	r2, [r3, #4]
 800a13c:	4613      	mov	r3, r2
 800a13e:	005b      	lsls	r3, r3, #1
 800a140:	4413      	add	r3, r2
 800a142:	69ba      	ldr	r2, [r7, #24]
 800a144:	429a      	cmp	r2, r3
 800a146:	d305      	bcc.n	800a154 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a148:	697b      	ldr	r3, [r7, #20]
 800a14a:	685b      	ldr	r3, [r3, #4]
 800a14c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a14e:	69ba      	ldr	r2, [r7, #24]
 800a150:	429a      	cmp	r2, r3
 800a152:	d903      	bls.n	800a15c <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800a154:	2301      	movs	r3, #1
 800a156:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a15a:	e10d      	b.n	800a378 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a15c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a15e:	2200      	movs	r2, #0
 800a160:	60bb      	str	r3, [r7, #8]
 800a162:	60fa      	str	r2, [r7, #12]
 800a164:	697b      	ldr	r3, [r7, #20]
 800a166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a168:	4a8e      	ldr	r2, [pc, #568]	@ (800a3a4 <UART_SetConfig+0x590>)
 800a16a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a16e:	b29b      	uxth	r3, r3
 800a170:	2200      	movs	r2, #0
 800a172:	603b      	str	r3, [r7, #0]
 800a174:	607a      	str	r2, [r7, #4]
 800a176:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a17a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a17e:	f7f6 fa57 	bl	8000630 <__aeabi_uldivmod>
 800a182:	4602      	mov	r2, r0
 800a184:	460b      	mov	r3, r1
 800a186:	4610      	mov	r0, r2
 800a188:	4619      	mov	r1, r3
 800a18a:	f04f 0200 	mov.w	r2, #0
 800a18e:	f04f 0300 	mov.w	r3, #0
 800a192:	020b      	lsls	r3, r1, #8
 800a194:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a198:	0202      	lsls	r2, r0, #8
 800a19a:	6979      	ldr	r1, [r7, #20]
 800a19c:	6849      	ldr	r1, [r1, #4]
 800a19e:	0849      	lsrs	r1, r1, #1
 800a1a0:	2000      	movs	r0, #0
 800a1a2:	460c      	mov	r4, r1
 800a1a4:	4605      	mov	r5, r0
 800a1a6:	eb12 0804 	adds.w	r8, r2, r4
 800a1aa:	eb43 0905 	adc.w	r9, r3, r5
 800a1ae:	697b      	ldr	r3, [r7, #20]
 800a1b0:	685b      	ldr	r3, [r3, #4]
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	469a      	mov	sl, r3
 800a1b6:	4693      	mov	fp, r2
 800a1b8:	4652      	mov	r2, sl
 800a1ba:	465b      	mov	r3, fp
 800a1bc:	4640      	mov	r0, r8
 800a1be:	4649      	mov	r1, r9
 800a1c0:	f7f6 fa36 	bl	8000630 <__aeabi_uldivmod>
 800a1c4:	4602      	mov	r2, r0
 800a1c6:	460b      	mov	r3, r1
 800a1c8:	4613      	mov	r3, r2
 800a1ca:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a1cc:	6a3b      	ldr	r3, [r7, #32]
 800a1ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a1d2:	d308      	bcc.n	800a1e6 <UART_SetConfig+0x3d2>
 800a1d4:	6a3b      	ldr	r3, [r7, #32]
 800a1d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a1da:	d204      	bcs.n	800a1e6 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800a1dc:	697b      	ldr	r3, [r7, #20]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	6a3a      	ldr	r2, [r7, #32]
 800a1e2:	60da      	str	r2, [r3, #12]
 800a1e4:	e0c8      	b.n	800a378 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a1ec:	e0c4      	b.n	800a378 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a1ee:	697b      	ldr	r3, [r7, #20]
 800a1f0:	69db      	ldr	r3, [r3, #28]
 800a1f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a1f6:	d167      	bne.n	800a2c8 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800a1f8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a1fc:	2b08      	cmp	r3, #8
 800a1fe:	d828      	bhi.n	800a252 <UART_SetConfig+0x43e>
 800a200:	a201      	add	r2, pc, #4	@ (adr r2, 800a208 <UART_SetConfig+0x3f4>)
 800a202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a206:	bf00      	nop
 800a208:	0800a22d 	.word	0x0800a22d
 800a20c:	0800a235 	.word	0x0800a235
 800a210:	0800a23d 	.word	0x0800a23d
 800a214:	0800a253 	.word	0x0800a253
 800a218:	0800a243 	.word	0x0800a243
 800a21c:	0800a253 	.word	0x0800a253
 800a220:	0800a253 	.word	0x0800a253
 800a224:	0800a253 	.word	0x0800a253
 800a228:	0800a24b 	.word	0x0800a24b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a22c:	f7fc ffd2 	bl	80071d4 <HAL_RCC_GetPCLK1Freq>
 800a230:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a232:	e014      	b.n	800a25e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a234:	f7fc ffe4 	bl	8007200 <HAL_RCC_GetPCLK2Freq>
 800a238:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a23a:	e010      	b.n	800a25e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a23c:	4b5a      	ldr	r3, [pc, #360]	@ (800a3a8 <UART_SetConfig+0x594>)
 800a23e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a240:	e00d      	b.n	800a25e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a242:	f7fc ff59 	bl	80070f8 <HAL_RCC_GetSysClockFreq>
 800a246:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a248:	e009      	b.n	800a25e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a24a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a24e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a250:	e005      	b.n	800a25e <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800a252:	2300      	movs	r3, #0
 800a254:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a256:	2301      	movs	r3, #1
 800a258:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a25c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a25e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a260:	2b00      	cmp	r3, #0
 800a262:	f000 8089 	beq.w	800a378 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a266:	697b      	ldr	r3, [r7, #20]
 800a268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a26a:	4a4e      	ldr	r2, [pc, #312]	@ (800a3a4 <UART_SetConfig+0x590>)
 800a26c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a270:	461a      	mov	r2, r3
 800a272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a274:	fbb3 f3f2 	udiv	r3, r3, r2
 800a278:	005a      	lsls	r2, r3, #1
 800a27a:	697b      	ldr	r3, [r7, #20]
 800a27c:	685b      	ldr	r3, [r3, #4]
 800a27e:	085b      	lsrs	r3, r3, #1
 800a280:	441a      	add	r2, r3
 800a282:	697b      	ldr	r3, [r7, #20]
 800a284:	685b      	ldr	r3, [r3, #4]
 800a286:	fbb2 f3f3 	udiv	r3, r2, r3
 800a28a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a28c:	6a3b      	ldr	r3, [r7, #32]
 800a28e:	2b0f      	cmp	r3, #15
 800a290:	d916      	bls.n	800a2c0 <UART_SetConfig+0x4ac>
 800a292:	6a3b      	ldr	r3, [r7, #32]
 800a294:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a298:	d212      	bcs.n	800a2c0 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a29a:	6a3b      	ldr	r3, [r7, #32]
 800a29c:	b29b      	uxth	r3, r3
 800a29e:	f023 030f 	bic.w	r3, r3, #15
 800a2a2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a2a4:	6a3b      	ldr	r3, [r7, #32]
 800a2a6:	085b      	lsrs	r3, r3, #1
 800a2a8:	b29b      	uxth	r3, r3
 800a2aa:	f003 0307 	and.w	r3, r3, #7
 800a2ae:	b29a      	uxth	r2, r3
 800a2b0:	8bfb      	ldrh	r3, [r7, #30]
 800a2b2:	4313      	orrs	r3, r2
 800a2b4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a2b6:	697b      	ldr	r3, [r7, #20]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	8bfa      	ldrh	r2, [r7, #30]
 800a2bc:	60da      	str	r2, [r3, #12]
 800a2be:	e05b      	b.n	800a378 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800a2c0:	2301      	movs	r3, #1
 800a2c2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a2c6:	e057      	b.n	800a378 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a2c8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a2cc:	2b08      	cmp	r3, #8
 800a2ce:	d828      	bhi.n	800a322 <UART_SetConfig+0x50e>
 800a2d0:	a201      	add	r2, pc, #4	@ (adr r2, 800a2d8 <UART_SetConfig+0x4c4>)
 800a2d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2d6:	bf00      	nop
 800a2d8:	0800a2fd 	.word	0x0800a2fd
 800a2dc:	0800a305 	.word	0x0800a305
 800a2e0:	0800a30d 	.word	0x0800a30d
 800a2e4:	0800a323 	.word	0x0800a323
 800a2e8:	0800a313 	.word	0x0800a313
 800a2ec:	0800a323 	.word	0x0800a323
 800a2f0:	0800a323 	.word	0x0800a323
 800a2f4:	0800a323 	.word	0x0800a323
 800a2f8:	0800a31b 	.word	0x0800a31b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a2fc:	f7fc ff6a 	bl	80071d4 <HAL_RCC_GetPCLK1Freq>
 800a300:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a302:	e014      	b.n	800a32e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a304:	f7fc ff7c 	bl	8007200 <HAL_RCC_GetPCLK2Freq>
 800a308:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a30a:	e010      	b.n	800a32e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a30c:	4b26      	ldr	r3, [pc, #152]	@ (800a3a8 <UART_SetConfig+0x594>)
 800a30e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a310:	e00d      	b.n	800a32e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a312:	f7fc fef1 	bl	80070f8 <HAL_RCC_GetSysClockFreq>
 800a316:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a318:	e009      	b.n	800a32e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a31a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a31e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a320:	e005      	b.n	800a32e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800a322:	2300      	movs	r3, #0
 800a324:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a326:	2301      	movs	r3, #1
 800a328:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a32c:	bf00      	nop
    }

    if (pclk != 0U)
 800a32e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a330:	2b00      	cmp	r3, #0
 800a332:	d021      	beq.n	800a378 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a334:	697b      	ldr	r3, [r7, #20]
 800a336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a338:	4a1a      	ldr	r2, [pc, #104]	@ (800a3a4 <UART_SetConfig+0x590>)
 800a33a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a33e:	461a      	mov	r2, r3
 800a340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a342:	fbb3 f2f2 	udiv	r2, r3, r2
 800a346:	697b      	ldr	r3, [r7, #20]
 800a348:	685b      	ldr	r3, [r3, #4]
 800a34a:	085b      	lsrs	r3, r3, #1
 800a34c:	441a      	add	r2, r3
 800a34e:	697b      	ldr	r3, [r7, #20]
 800a350:	685b      	ldr	r3, [r3, #4]
 800a352:	fbb2 f3f3 	udiv	r3, r2, r3
 800a356:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a358:	6a3b      	ldr	r3, [r7, #32]
 800a35a:	2b0f      	cmp	r3, #15
 800a35c:	d909      	bls.n	800a372 <UART_SetConfig+0x55e>
 800a35e:	6a3b      	ldr	r3, [r7, #32]
 800a360:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a364:	d205      	bcs.n	800a372 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a366:	6a3b      	ldr	r3, [r7, #32]
 800a368:	b29a      	uxth	r2, r3
 800a36a:	697b      	ldr	r3, [r7, #20]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	60da      	str	r2, [r3, #12]
 800a370:	e002      	b.n	800a378 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800a372:	2301      	movs	r3, #1
 800a374:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a378:	697b      	ldr	r3, [r7, #20]
 800a37a:	2201      	movs	r2, #1
 800a37c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a380:	697b      	ldr	r3, [r7, #20]
 800a382:	2201      	movs	r2, #1
 800a384:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a388:	697b      	ldr	r3, [r7, #20]
 800a38a:	2200      	movs	r2, #0
 800a38c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a38e:	697b      	ldr	r3, [r7, #20]
 800a390:	2200      	movs	r2, #0
 800a392:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a394:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800a398:	4618      	mov	r0, r3
 800a39a:	3730      	adds	r7, #48	@ 0x30
 800a39c:	46bd      	mov	sp, r7
 800a39e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a3a2:	bf00      	nop
 800a3a4:	0800b344 	.word	0x0800b344
 800a3a8:	00f42400 	.word	0x00f42400

0800a3ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a3ac:	b480      	push	{r7}
 800a3ae:	b083      	sub	sp, #12
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3b8:	f003 0308 	and.w	r3, r3, #8
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d00a      	beq.n	800a3d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	685b      	ldr	r3, [r3, #4]
 800a3c6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	430a      	orrs	r2, r1
 800a3d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3da:	f003 0301 	and.w	r3, r3, #1
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d00a      	beq.n	800a3f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	685b      	ldr	r3, [r3, #4]
 800a3e8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	430a      	orrs	r2, r1
 800a3f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3fc:	f003 0302 	and.w	r3, r3, #2
 800a400:	2b00      	cmp	r3, #0
 800a402:	d00a      	beq.n	800a41a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	685b      	ldr	r3, [r3, #4]
 800a40a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	430a      	orrs	r2, r1
 800a418:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a41e:	f003 0304 	and.w	r3, r3, #4
 800a422:	2b00      	cmp	r3, #0
 800a424:	d00a      	beq.n	800a43c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	685b      	ldr	r3, [r3, #4]
 800a42c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	430a      	orrs	r2, r1
 800a43a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a440:	f003 0310 	and.w	r3, r3, #16
 800a444:	2b00      	cmp	r3, #0
 800a446:	d00a      	beq.n	800a45e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	689b      	ldr	r3, [r3, #8]
 800a44e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	430a      	orrs	r2, r1
 800a45c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a462:	f003 0320 	and.w	r3, r3, #32
 800a466:	2b00      	cmp	r3, #0
 800a468:	d00a      	beq.n	800a480 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	689b      	ldr	r3, [r3, #8]
 800a470:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	430a      	orrs	r2, r1
 800a47e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a484:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d01a      	beq.n	800a4c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	685b      	ldr	r3, [r3, #4]
 800a492:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	430a      	orrs	r2, r1
 800a4a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a4a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a4aa:	d10a      	bne.n	800a4c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	685b      	ldr	r3, [r3, #4]
 800a4b2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	430a      	orrs	r2, r1
 800a4c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d00a      	beq.n	800a4e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	685b      	ldr	r3, [r3, #4]
 800a4d4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	430a      	orrs	r2, r1
 800a4e2:	605a      	str	r2, [r3, #4]
  }
}
 800a4e4:	bf00      	nop
 800a4e6:	370c      	adds	r7, #12
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ee:	4770      	bx	lr

0800a4f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b098      	sub	sp, #96	@ 0x60
 800a4f4:	af02      	add	r7, sp, #8
 800a4f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a500:	f7f7 fcdc 	bl	8001ebc <HAL_GetTick>
 800a504:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	f003 0308 	and.w	r3, r3, #8
 800a510:	2b08      	cmp	r3, #8
 800a512:	d12f      	bne.n	800a574 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a514:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a518:	9300      	str	r3, [sp, #0]
 800a51a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a51c:	2200      	movs	r2, #0
 800a51e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a522:	6878      	ldr	r0, [r7, #4]
 800a524:	f000 f88e 	bl	800a644 <UART_WaitOnFlagUntilTimeout>
 800a528:	4603      	mov	r3, r0
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d022      	beq.n	800a574 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a534:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a536:	e853 3f00 	ldrex	r3, [r3]
 800a53a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a53c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a53e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a542:	653b      	str	r3, [r7, #80]	@ 0x50
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	461a      	mov	r2, r3
 800a54a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a54c:	647b      	str	r3, [r7, #68]	@ 0x44
 800a54e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a550:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a552:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a554:	e841 2300 	strex	r3, r2, [r1]
 800a558:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a55a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d1e6      	bne.n	800a52e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2220      	movs	r2, #32
 800a564:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2200      	movs	r2, #0
 800a56c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a570:	2303      	movs	r3, #3
 800a572:	e063      	b.n	800a63c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	f003 0304 	and.w	r3, r3, #4
 800a57e:	2b04      	cmp	r3, #4
 800a580:	d149      	bne.n	800a616 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a582:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a586:	9300      	str	r3, [sp, #0]
 800a588:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a58a:	2200      	movs	r2, #0
 800a58c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a590:	6878      	ldr	r0, [r7, #4]
 800a592:	f000 f857 	bl	800a644 <UART_WaitOnFlagUntilTimeout>
 800a596:	4603      	mov	r3, r0
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d03c      	beq.n	800a616 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5a4:	e853 3f00 	ldrex	r3, [r3]
 800a5a8:	623b      	str	r3, [r7, #32]
   return(result);
 800a5aa:	6a3b      	ldr	r3, [r7, #32]
 800a5ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a5b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	461a      	mov	r2, r3
 800a5b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a5ba:	633b      	str	r3, [r7, #48]	@ 0x30
 800a5bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a5c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a5c2:	e841 2300 	strex	r3, r2, [r1]
 800a5c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a5c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d1e6      	bne.n	800a59c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	3308      	adds	r3, #8
 800a5d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5d6:	693b      	ldr	r3, [r7, #16]
 800a5d8:	e853 3f00 	ldrex	r3, [r3]
 800a5dc:	60fb      	str	r3, [r7, #12]
   return(result);
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	f023 0301 	bic.w	r3, r3, #1
 800a5e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	3308      	adds	r3, #8
 800a5ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a5ee:	61fa      	str	r2, [r7, #28]
 800a5f0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5f2:	69b9      	ldr	r1, [r7, #24]
 800a5f4:	69fa      	ldr	r2, [r7, #28]
 800a5f6:	e841 2300 	strex	r3, r2, [r1]
 800a5fa:	617b      	str	r3, [r7, #20]
   return(result);
 800a5fc:	697b      	ldr	r3, [r7, #20]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d1e5      	bne.n	800a5ce <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	2220      	movs	r2, #32
 800a606:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	2200      	movs	r2, #0
 800a60e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a612:	2303      	movs	r3, #3
 800a614:	e012      	b.n	800a63c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	2220      	movs	r2, #32
 800a61a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2220      	movs	r2, #32
 800a622:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	2200      	movs	r2, #0
 800a62a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2200      	movs	r2, #0
 800a630:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	2200      	movs	r2, #0
 800a636:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a63a:	2300      	movs	r3, #0
}
 800a63c:	4618      	mov	r0, r3
 800a63e:	3758      	adds	r7, #88	@ 0x58
 800a640:	46bd      	mov	sp, r7
 800a642:	bd80      	pop	{r7, pc}

0800a644 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b084      	sub	sp, #16
 800a648:	af00      	add	r7, sp, #0
 800a64a:	60f8      	str	r0, [r7, #12]
 800a64c:	60b9      	str	r1, [r7, #8]
 800a64e:	603b      	str	r3, [r7, #0]
 800a650:	4613      	mov	r3, r2
 800a652:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a654:	e04f      	b.n	800a6f6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a656:	69bb      	ldr	r3, [r7, #24]
 800a658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a65c:	d04b      	beq.n	800a6f6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a65e:	f7f7 fc2d 	bl	8001ebc <HAL_GetTick>
 800a662:	4602      	mov	r2, r0
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	1ad3      	subs	r3, r2, r3
 800a668:	69ba      	ldr	r2, [r7, #24]
 800a66a:	429a      	cmp	r2, r3
 800a66c:	d302      	bcc.n	800a674 <UART_WaitOnFlagUntilTimeout+0x30>
 800a66e:	69bb      	ldr	r3, [r7, #24]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d101      	bne.n	800a678 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a674:	2303      	movs	r3, #3
 800a676:	e04e      	b.n	800a716 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	f003 0304 	and.w	r3, r3, #4
 800a682:	2b00      	cmp	r3, #0
 800a684:	d037      	beq.n	800a6f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a686:	68bb      	ldr	r3, [r7, #8]
 800a688:	2b80      	cmp	r3, #128	@ 0x80
 800a68a:	d034      	beq.n	800a6f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a68c:	68bb      	ldr	r3, [r7, #8]
 800a68e:	2b40      	cmp	r3, #64	@ 0x40
 800a690:	d031      	beq.n	800a6f6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	69db      	ldr	r3, [r3, #28]
 800a698:	f003 0308 	and.w	r3, r3, #8
 800a69c:	2b08      	cmp	r3, #8
 800a69e:	d110      	bne.n	800a6c2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	2208      	movs	r2, #8
 800a6a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a6a8:	68f8      	ldr	r0, [r7, #12]
 800a6aa:	f000 f879 	bl	800a7a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	2208      	movs	r2, #8
 800a6b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a6be:	2301      	movs	r3, #1
 800a6c0:	e029      	b.n	800a716 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	69db      	ldr	r3, [r3, #28]
 800a6c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a6cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a6d0:	d111      	bne.n	800a6f6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a6da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a6dc:	68f8      	ldr	r0, [r7, #12]
 800a6de:	f000 f85f 	bl	800a7a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	2220      	movs	r2, #32
 800a6e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a6f2:	2303      	movs	r3, #3
 800a6f4:	e00f      	b.n	800a716 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	69da      	ldr	r2, [r3, #28]
 800a6fc:	68bb      	ldr	r3, [r7, #8]
 800a6fe:	4013      	ands	r3, r2
 800a700:	68ba      	ldr	r2, [r7, #8]
 800a702:	429a      	cmp	r2, r3
 800a704:	bf0c      	ite	eq
 800a706:	2301      	moveq	r3, #1
 800a708:	2300      	movne	r3, #0
 800a70a:	b2db      	uxtb	r3, r3
 800a70c:	461a      	mov	r2, r3
 800a70e:	79fb      	ldrb	r3, [r7, #7]
 800a710:	429a      	cmp	r2, r3
 800a712:	d0a0      	beq.n	800a656 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a714:	2300      	movs	r3, #0
}
 800a716:	4618      	mov	r0, r3
 800a718:	3710      	adds	r7, #16
 800a71a:	46bd      	mov	sp, r7
 800a71c:	bd80      	pop	{r7, pc}

0800a71e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a71e:	b480      	push	{r7}
 800a720:	b08f      	sub	sp, #60	@ 0x3c
 800a722:	af00      	add	r7, sp, #0
 800a724:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a72c:	6a3b      	ldr	r3, [r7, #32]
 800a72e:	e853 3f00 	ldrex	r3, [r3]
 800a732:	61fb      	str	r3, [r7, #28]
   return(result);
 800a734:	69fb      	ldr	r3, [r7, #28]
 800a736:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a73a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	461a      	mov	r2, r3
 800a742:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a744:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a746:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a748:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a74a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a74c:	e841 2300 	strex	r3, r2, [r1]
 800a750:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a754:	2b00      	cmp	r3, #0
 800a756:	d1e6      	bne.n	800a726 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	3308      	adds	r3, #8
 800a75e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	e853 3f00 	ldrex	r3, [r3]
 800a766:	60bb      	str	r3, [r7, #8]
   return(result);
 800a768:	68bb      	ldr	r3, [r7, #8]
 800a76a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a76e:	633b      	str	r3, [r7, #48]	@ 0x30
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	3308      	adds	r3, #8
 800a776:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a778:	61ba      	str	r2, [r7, #24]
 800a77a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a77c:	6979      	ldr	r1, [r7, #20]
 800a77e:	69ba      	ldr	r2, [r7, #24]
 800a780:	e841 2300 	strex	r3, r2, [r1]
 800a784:	613b      	str	r3, [r7, #16]
   return(result);
 800a786:	693b      	ldr	r3, [r7, #16]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d1e5      	bne.n	800a758 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	2220      	movs	r2, #32
 800a790:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800a794:	bf00      	nop
 800a796:	373c      	adds	r7, #60	@ 0x3c
 800a798:	46bd      	mov	sp, r7
 800a79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79e:	4770      	bx	lr

0800a7a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a7a0:	b480      	push	{r7}
 800a7a2:	b095      	sub	sp, #84	@ 0x54
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7b0:	e853 3f00 	ldrex	r3, [r3]
 800a7b4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a7b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a7bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	461a      	mov	r2, r3
 800a7c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a7c6:	643b      	str	r3, [r7, #64]	@ 0x40
 800a7c8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7ca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a7cc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a7ce:	e841 2300 	strex	r3, r2, [r1]
 800a7d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a7d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d1e6      	bne.n	800a7a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	3308      	adds	r3, #8
 800a7e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7e2:	6a3b      	ldr	r3, [r7, #32]
 800a7e4:	e853 3f00 	ldrex	r3, [r3]
 800a7e8:	61fb      	str	r3, [r7, #28]
   return(result);
 800a7ea:	69fb      	ldr	r3, [r7, #28]
 800a7ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a7f0:	f023 0301 	bic.w	r3, r3, #1
 800a7f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	3308      	adds	r3, #8
 800a7fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a7fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a800:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a802:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a804:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a806:	e841 2300 	strex	r3, r2, [r1]
 800a80a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a80c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d1e3      	bne.n	800a7da <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a816:	2b01      	cmp	r3, #1
 800a818:	d118      	bne.n	800a84c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	e853 3f00 	ldrex	r3, [r3]
 800a826:	60bb      	str	r3, [r7, #8]
   return(result);
 800a828:	68bb      	ldr	r3, [r7, #8]
 800a82a:	f023 0310 	bic.w	r3, r3, #16
 800a82e:	647b      	str	r3, [r7, #68]	@ 0x44
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	461a      	mov	r2, r3
 800a836:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a838:	61bb      	str	r3, [r7, #24]
 800a83a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a83c:	6979      	ldr	r1, [r7, #20]
 800a83e:	69ba      	ldr	r2, [r7, #24]
 800a840:	e841 2300 	strex	r3, r2, [r1]
 800a844:	613b      	str	r3, [r7, #16]
   return(result);
 800a846:	693b      	ldr	r3, [r7, #16]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d1e6      	bne.n	800a81a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	2220      	movs	r2, #32
 800a850:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	2200      	movs	r2, #0
 800a858:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	2200      	movs	r2, #0
 800a85e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a860:	bf00      	nop
 800a862:	3754      	adds	r7, #84	@ 0x54
 800a864:	46bd      	mov	sp, r7
 800a866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86a:	4770      	bx	lr

0800a86c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b090      	sub	sp, #64	@ 0x40
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a878:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	f003 0320 	and.w	r3, r3, #32
 800a884:	2b00      	cmp	r3, #0
 800a886:	d137      	bne.n	800a8f8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800a888:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a88a:	2200      	movs	r2, #0
 800a88c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a890:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	3308      	adds	r3, #8
 800a896:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a89a:	e853 3f00 	ldrex	r3, [r3]
 800a89e:	623b      	str	r3, [r7, #32]
   return(result);
 800a8a0:	6a3b      	ldr	r3, [r7, #32]
 800a8a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a8a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a8a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	3308      	adds	r3, #8
 800a8ae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a8b0:	633a      	str	r2, [r7, #48]	@ 0x30
 800a8b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8b4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a8b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a8b8:	e841 2300 	strex	r3, r2, [r1]
 800a8bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a8be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d1e5      	bne.n	800a890 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a8c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8ca:	693b      	ldr	r3, [r7, #16]
 800a8cc:	e853 3f00 	ldrex	r3, [r3]
 800a8d0:	60fb      	str	r3, [r7, #12]
   return(result);
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a8d8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a8da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	461a      	mov	r2, r3
 800a8e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8e2:	61fb      	str	r3, [r7, #28]
 800a8e4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8e6:	69b9      	ldr	r1, [r7, #24]
 800a8e8:	69fa      	ldr	r2, [r7, #28]
 800a8ea:	e841 2300 	strex	r3, r2, [r1]
 800a8ee:	617b      	str	r3, [r7, #20]
   return(result);
 800a8f0:	697b      	ldr	r3, [r7, #20]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d1e6      	bne.n	800a8c4 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a8f6:	e002      	b.n	800a8fe <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800a8f8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a8fa:	f7ff fa61 	bl	8009dc0 <HAL_UART_TxCpltCallback>
}
 800a8fe:	bf00      	nop
 800a900:	3740      	adds	r7, #64	@ 0x40
 800a902:	46bd      	mov	sp, r7
 800a904:	bd80      	pop	{r7, pc}

0800a906 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a906:	b580      	push	{r7, lr}
 800a908:	b084      	sub	sp, #16
 800a90a:	af00      	add	r7, sp, #0
 800a90c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a912:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a914:	68f8      	ldr	r0, [r7, #12]
 800a916:	f7ff fa5d 	bl	8009dd4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a91a:	bf00      	nop
 800a91c:	3710      	adds	r7, #16
 800a91e:	46bd      	mov	sp, r7
 800a920:	bd80      	pop	{r7, pc}

0800a922 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a922:	b580      	push	{r7, lr}
 800a924:	b086      	sub	sp, #24
 800a926:	af00      	add	r7, sp, #0
 800a928:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a92e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a930:	697b      	ldr	r3, [r7, #20]
 800a932:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a936:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a938:	697b      	ldr	r3, [r7, #20]
 800a93a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a93e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a940:	697b      	ldr	r3, [r7, #20]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	689b      	ldr	r3, [r3, #8]
 800a946:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a94a:	2b80      	cmp	r3, #128	@ 0x80
 800a94c:	d109      	bne.n	800a962 <UART_DMAError+0x40>
 800a94e:	693b      	ldr	r3, [r7, #16]
 800a950:	2b21      	cmp	r3, #33	@ 0x21
 800a952:	d106      	bne.n	800a962 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a954:	697b      	ldr	r3, [r7, #20]
 800a956:	2200      	movs	r2, #0
 800a958:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800a95c:	6978      	ldr	r0, [r7, #20]
 800a95e:	f7ff fede 	bl	800a71e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a962:	697b      	ldr	r3, [r7, #20]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	689b      	ldr	r3, [r3, #8]
 800a968:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a96c:	2b40      	cmp	r3, #64	@ 0x40
 800a96e:	d109      	bne.n	800a984 <UART_DMAError+0x62>
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	2b22      	cmp	r3, #34	@ 0x22
 800a974:	d106      	bne.n	800a984 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a976:	697b      	ldr	r3, [r7, #20]
 800a978:	2200      	movs	r2, #0
 800a97a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800a97e:	6978      	ldr	r0, [r7, #20]
 800a980:	f7ff ff0e 	bl	800a7a0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a984:	697b      	ldr	r3, [r7, #20]
 800a986:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a98a:	f043 0210 	orr.w	r2, r3, #16
 800a98e:	697b      	ldr	r3, [r7, #20]
 800a990:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a994:	6978      	ldr	r0, [r7, #20]
 800a996:	f7ff fa27 	bl	8009de8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a99a:	bf00      	nop
 800a99c:	3718      	adds	r7, #24
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	bd80      	pop	{r7, pc}

0800a9a2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a9a2:	b580      	push	{r7, lr}
 800a9a4:	b084      	sub	sp, #16
 800a9a6:	af00      	add	r7, sp, #0
 800a9a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9ae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a9c0:	68f8      	ldr	r0, [r7, #12]
 800a9c2:	f7ff fa11 	bl	8009de8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a9c6:	bf00      	nop
 800a9c8:	3710      	adds	r7, #16
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	bd80      	pop	{r7, pc}

0800a9ce <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a9ce:	b580      	push	{r7, lr}
 800a9d0:	b088      	sub	sp, #32
 800a9d2:	af00      	add	r7, sp, #0
 800a9d4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	e853 3f00 	ldrex	r3, [r3]
 800a9e2:	60bb      	str	r3, [r7, #8]
   return(result);
 800a9e4:	68bb      	ldr	r3, [r7, #8]
 800a9e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a9ea:	61fb      	str	r3, [r7, #28]
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	461a      	mov	r2, r3
 800a9f2:	69fb      	ldr	r3, [r7, #28]
 800a9f4:	61bb      	str	r3, [r7, #24]
 800a9f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9f8:	6979      	ldr	r1, [r7, #20]
 800a9fa:	69ba      	ldr	r2, [r7, #24]
 800a9fc:	e841 2300 	strex	r3, r2, [r1]
 800aa00:	613b      	str	r3, [r7, #16]
   return(result);
 800aa02:	693b      	ldr	r3, [r7, #16]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d1e6      	bne.n	800a9d6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	2220      	movs	r2, #32
 800aa0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	2200      	movs	r2, #0
 800aa14:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800aa16:	6878      	ldr	r0, [r7, #4]
 800aa18:	f7ff f9d2 	bl	8009dc0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aa1c:	bf00      	nop
 800aa1e:	3720      	adds	r7, #32
 800aa20:	46bd      	mov	sp, r7
 800aa22:	bd80      	pop	{r7, pc}

0800aa24 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800aa24:	b480      	push	{r7}
 800aa26:	b083      	sub	sp, #12
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800aa2c:	bf00      	nop
 800aa2e:	370c      	adds	r7, #12
 800aa30:	46bd      	mov	sp, r7
 800aa32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa36:	4770      	bx	lr

0800aa38 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800aa38:	b480      	push	{r7}
 800aa3a:	b083      	sub	sp, #12
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800aa40:	bf00      	nop
 800aa42:	370c      	adds	r7, #12
 800aa44:	46bd      	mov	sp, r7
 800aa46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4a:	4770      	bx	lr

0800aa4c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800aa4c:	b480      	push	{r7}
 800aa4e:	b083      	sub	sp, #12
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800aa54:	bf00      	nop
 800aa56:	370c      	adds	r7, #12
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5e:	4770      	bx	lr

0800aa60 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800aa60:	b480      	push	{r7}
 800aa62:	b085      	sub	sp, #20
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800aa6e:	2b01      	cmp	r3, #1
 800aa70:	d101      	bne.n	800aa76 <HAL_UARTEx_DisableFifoMode+0x16>
 800aa72:	2302      	movs	r3, #2
 800aa74:	e027      	b.n	800aac6 <HAL_UARTEx_DisableFifoMode+0x66>
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	2201      	movs	r2, #1
 800aa7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	2224      	movs	r2, #36	@ 0x24
 800aa82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	681a      	ldr	r2, [r3, #0]
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	f022 0201 	bic.w	r2, r2, #1
 800aa9c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800aaa4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	68fa      	ldr	r2, [r7, #12]
 800aab2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	2220      	movs	r2, #32
 800aab8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2200      	movs	r2, #0
 800aac0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800aac4:	2300      	movs	r3, #0
}
 800aac6:	4618      	mov	r0, r3
 800aac8:	3714      	adds	r7, #20
 800aaca:	46bd      	mov	sp, r7
 800aacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad0:	4770      	bx	lr

0800aad2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aad2:	b580      	push	{r7, lr}
 800aad4:	b084      	sub	sp, #16
 800aad6:	af00      	add	r7, sp, #0
 800aad8:	6078      	str	r0, [r7, #4]
 800aada:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800aae2:	2b01      	cmp	r3, #1
 800aae4:	d101      	bne.n	800aaea <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800aae6:	2302      	movs	r3, #2
 800aae8:	e02d      	b.n	800ab46 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	2201      	movs	r2, #1
 800aaee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	2224      	movs	r2, #36	@ 0x24
 800aaf6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	681a      	ldr	r2, [r3, #0]
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	f022 0201 	bic.w	r2, r2, #1
 800ab10:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	689b      	ldr	r3, [r3, #8]
 800ab18:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	683a      	ldr	r2, [r7, #0]
 800ab22:	430a      	orrs	r2, r1
 800ab24:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ab26:	6878      	ldr	r0, [r7, #4]
 800ab28:	f000 f850 	bl	800abcc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	68fa      	ldr	r2, [r7, #12]
 800ab32:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	2220      	movs	r2, #32
 800ab38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	2200      	movs	r2, #0
 800ab40:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ab44:	2300      	movs	r3, #0
}
 800ab46:	4618      	mov	r0, r3
 800ab48:	3710      	adds	r7, #16
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	bd80      	pop	{r7, pc}

0800ab4e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ab4e:	b580      	push	{r7, lr}
 800ab50:	b084      	sub	sp, #16
 800ab52:	af00      	add	r7, sp, #0
 800ab54:	6078      	str	r0, [r7, #4]
 800ab56:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ab5e:	2b01      	cmp	r3, #1
 800ab60:	d101      	bne.n	800ab66 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ab62:	2302      	movs	r3, #2
 800ab64:	e02d      	b.n	800abc2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	2201      	movs	r2, #1
 800ab6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	2224      	movs	r2, #36	@ 0x24
 800ab72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	681a      	ldr	r2, [r3, #0]
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	f022 0201 	bic.w	r2, r2, #1
 800ab8c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	689b      	ldr	r3, [r3, #8]
 800ab94:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	683a      	ldr	r2, [r7, #0]
 800ab9e:	430a      	orrs	r2, r1
 800aba0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aba2:	6878      	ldr	r0, [r7, #4]
 800aba4:	f000 f812 	bl	800abcc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	68fa      	ldr	r2, [r7, #12]
 800abae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	2220      	movs	r2, #32
 800abb4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	2200      	movs	r2, #0
 800abbc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800abc0:	2300      	movs	r3, #0
}
 800abc2:	4618      	mov	r0, r3
 800abc4:	3710      	adds	r7, #16
 800abc6:	46bd      	mov	sp, r7
 800abc8:	bd80      	pop	{r7, pc}
	...

0800abcc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800abcc:	b480      	push	{r7}
 800abce:	b085      	sub	sp, #20
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d108      	bne.n	800abee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	2201      	movs	r2, #1
 800abe0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2201      	movs	r2, #1
 800abe8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800abec:	e031      	b.n	800ac52 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800abee:	2308      	movs	r3, #8
 800abf0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800abf2:	2308      	movs	r3, #8
 800abf4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	689b      	ldr	r3, [r3, #8]
 800abfc:	0e5b      	lsrs	r3, r3, #25
 800abfe:	b2db      	uxtb	r3, r3
 800ac00:	f003 0307 	and.w	r3, r3, #7
 800ac04:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	689b      	ldr	r3, [r3, #8]
 800ac0c:	0f5b      	lsrs	r3, r3, #29
 800ac0e:	b2db      	uxtb	r3, r3
 800ac10:	f003 0307 	and.w	r3, r3, #7
 800ac14:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ac16:	7bbb      	ldrb	r3, [r7, #14]
 800ac18:	7b3a      	ldrb	r2, [r7, #12]
 800ac1a:	4911      	ldr	r1, [pc, #68]	@ (800ac60 <UARTEx_SetNbDataToProcess+0x94>)
 800ac1c:	5c8a      	ldrb	r2, [r1, r2]
 800ac1e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ac22:	7b3a      	ldrb	r2, [r7, #12]
 800ac24:	490f      	ldr	r1, [pc, #60]	@ (800ac64 <UARTEx_SetNbDataToProcess+0x98>)
 800ac26:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ac28:	fb93 f3f2 	sdiv	r3, r3, r2
 800ac2c:	b29a      	uxth	r2, r3
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ac34:	7bfb      	ldrb	r3, [r7, #15]
 800ac36:	7b7a      	ldrb	r2, [r7, #13]
 800ac38:	4909      	ldr	r1, [pc, #36]	@ (800ac60 <UARTEx_SetNbDataToProcess+0x94>)
 800ac3a:	5c8a      	ldrb	r2, [r1, r2]
 800ac3c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ac40:	7b7a      	ldrb	r2, [r7, #13]
 800ac42:	4908      	ldr	r1, [pc, #32]	@ (800ac64 <UARTEx_SetNbDataToProcess+0x98>)
 800ac44:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ac46:	fb93 f3f2 	sdiv	r3, r3, r2
 800ac4a:	b29a      	uxth	r2, r3
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800ac52:	bf00      	nop
 800ac54:	3714      	adds	r7, #20
 800ac56:	46bd      	mov	sp, r7
 800ac58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5c:	4770      	bx	lr
 800ac5e:	bf00      	nop
 800ac60:	0800b35c 	.word	0x0800b35c
 800ac64:	0800b364 	.word	0x0800b364

0800ac68 <appInit>:
#endif
/*
deal per 100ms
*/
void appInit()
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	af00      	add	r7, sp, #0
    motorInit();
 800ac6c:	f000 f88e 	bl	800ad8c <motorInit>
}
 800ac70:	bf00      	nop
 800ac72:	bd80      	pop	{r7, pc}

0800ac74 <appRunning>:

void appRunning()
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	af00      	add	r7, sp, #0
#if KEY_ENABLE
    getKeyState(&keyState);
#endif

#if NEED_COMMUNICATION
    uartRxProcess();
 800ac78:	f000 f83e 	bl	800acf8 <uartRxProcess>
            errNo = ntcErr;
        }
    }
#endif

    _1s = getOneSecFlag();
 800ac7c:	f000 faee 	bl	800b25c <getOneSecFlag>
 800ac80:	4603      	mov	r3, r0
 800ac82:	461a      	mov	r2, r3
 800ac84:	4b1a      	ldr	r3, [pc, #104]	@ (800acf0 <appRunning+0x7c>)
 800ac86:	701a      	strb	r2, [r3, #0]

    switch (devState)
 800ac88:	4b1a      	ldr	r3, [pc, #104]	@ (800acf4 <appRunning+0x80>)
 800ac8a:	781b      	ldrb	r3, [r3, #0]
 800ac8c:	2b06      	cmp	r3, #6
 800ac8e:	d823      	bhi.n	800acd8 <appRunning+0x64>
 800ac90:	a201      	add	r2, pc, #4	@ (adr r2, 800ac98 <appRunning+0x24>)
 800ac92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac96:	bf00      	nop
 800ac98:	0800acb5 	.word	0x0800acb5
 800ac9c:	0800acc1 	.word	0x0800acc1
 800aca0:	0800acbb 	.word	0x0800acbb
 800aca4:	0800acd9 	.word	0x0800acd9
 800aca8:	0800acc7 	.word	0x0800acc7
 800acac:	0800accd 	.word	0x0800accd
 800acb0:	0800acd3 	.word	0x0800acd3
    {
    case POWER_ON:
        poweringOn();
 800acb4:	f000 f82e 	bl	800ad14 <poweringOn>
        break;
 800acb8:	e00e      	b.n	800acd8 <appRunning+0x64>

    case STANDBY:
        standingby();
 800acba:	f000 f843 	bl	800ad44 <standingby>
        break;
 800acbe:	e00b      	b.n	800acd8 <appRunning+0x64>

    case SET:
        setting();
 800acc0:	f000 f847 	bl	800ad52 <setting>
        break;
 800acc4:	e008      	b.n	800acd8 <appRunning+0x64>

    case WORK:
        working();
 800acc6:	f000 f84b 	bl	800ad60 <working>
        break;
 800acca:	e005      	b.n	800acd8 <appRunning+0x64>

    case TEST:
        testing();
 800accc:	f000 f84f 	bl	800ad6e <testing>
        break;
 800acd0:	e002      	b.n	800acd8 <appRunning+0x64>

    case FAULT:
        faulting();
 800acd2:	f000 f853 	bl	800ad7c <faulting>
        break;
 800acd6:	bf00      	nop
#if DISPLAY_ENABLE
    displayDataUpdate();
#endif

#if NEED_COMMUNICATION
    uartTxProcess();
 800acd8:	f000 f815 	bl	800ad06 <uartTxProcess>
#endif
    if (_1s)
 800acdc:	4b04      	ldr	r3, [pc, #16]	@ (800acf0 <appRunning+0x7c>)
 800acde:	781b      	ldrb	r3, [r3, #0]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d002      	beq.n	800acea <appRunning+0x76>
//            errNo = 3;
//            FAULT_INIT;
//        }
#endif
        // beepOnce();
        _1s = 0;
 800ace4:	4b02      	ldr	r3, [pc, #8]	@ (800acf0 <appRunning+0x7c>)
 800ace6:	2200      	movs	r2, #0
 800ace8:	701a      	strb	r2, [r3, #0]
    }
}
 800acea:	bf00      	nop
 800acec:	bd80      	pop	{r7, pc}
 800acee:	bf00      	nop
 800acf0:	20000411 	.word	0x20000411
 800acf4:	20000410 	.word	0x20000410

0800acf8 <uartRxProcess>:

#if NEED_COMMUNICATION

static void uartRxProcess()
{
 800acf8:	b480      	push	{r7}
 800acfa:	af00      	add	r7, sp, #0
    //        }
    //
    //        rxUart.len = 0;
    //        rxUart.toProcessData = 0;
    //    }
}
 800acfc:	bf00      	nop
 800acfe:	46bd      	mov	sp, r7
 800ad00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad04:	4770      	bx	lr

0800ad06 <uartTxProcess>:
static void uartTxProcess()
{
 800ad06:	b480      	push	{r7}
 800ad08:	af00      	add	r7, sp, #0
#if SEND_RCC_DATA == 0
    sprintf(tempData, "K%d%dX\n", (int)devState);
#endif
}
 800ad0a:	bf00      	nop
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad12:	4770      	bx	lr

0800ad14 <poweringOn>:
#endif
#if DEBUG_DISPLAY
uchar i;
#endif
static void poweringOn()
{
 800ad14:	b480      	push	{r7}
 800ad16:	af00      	add	r7, sp, #0
    // for (i = 0; i < NUM_OF_COM; i++)
    // {
    //     displayDataBuf[i].byte = 0xFF;
    // }

    if (++cnt >= 10)
 800ad18:	4b08      	ldr	r3, [pc, #32]	@ (800ad3c <poweringOn+0x28>)
 800ad1a:	781b      	ldrb	r3, [r3, #0]
 800ad1c:	3301      	adds	r3, #1
 800ad1e:	b2da      	uxtb	r2, r3
 800ad20:	4b06      	ldr	r3, [pc, #24]	@ (800ad3c <poweringOn+0x28>)
 800ad22:	701a      	strb	r2, [r3, #0]
 800ad24:	4b05      	ldr	r3, [pc, #20]	@ (800ad3c <poweringOn+0x28>)
 800ad26:	781b      	ldrb	r3, [r3, #0]
 800ad28:	2b09      	cmp	r3, #9
 800ad2a:	d902      	bls.n	800ad32 <poweringOn+0x1e>
                STANDBY_INIT;
        }
        else
            STANDBY_INIT;
#else
        STANDBY_INIT;
 800ad2c:	4b04      	ldr	r3, [pc, #16]	@ (800ad40 <poweringOn+0x2c>)
 800ad2e:	2202      	movs	r2, #2
 800ad30:	701a      	strb	r2, [r3, #0]
#endif
    }

#endif
}
 800ad32:	bf00      	nop
 800ad34:	46bd      	mov	sp, r7
 800ad36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3a:	4770      	bx	lr
 800ad3c:	20000412 	.word	0x20000412
 800ad40:	20000410 	.word	0x20000410

0800ad44 <standingby>:

static void standingby()
{
 800ad44:	b480      	push	{r7}
 800ad46:	af00      	add	r7, sp, #0
}
 800ad48:	bf00      	nop
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad50:	4770      	bx	lr

0800ad52 <setting>:
static void setting()
{
 800ad52:	b480      	push	{r7}
 800ad54:	af00      	add	r7, sp, #0
}
 800ad56:	bf00      	nop
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5e:	4770      	bx	lr

0800ad60 <working>:
static void working()
{
 800ad60:	b480      	push	{r7}
 800ad62:	af00      	add	r7, sp, #0
}
 800ad64:	bf00      	nop
 800ad66:	46bd      	mov	sp, r7
 800ad68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6c:	4770      	bx	lr

0800ad6e <testing>:

static void testing()
{
 800ad6e:	b480      	push	{r7}
 800ad70:	af00      	add	r7, sp, #0
}
 800ad72:	bf00      	nop
 800ad74:	46bd      	mov	sp, r7
 800ad76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7a:	4770      	bx	lr

0800ad7c <faulting>:

static void faulting()
{
 800ad7c:	b480      	push	{r7}
 800ad7e:	af00      	add	r7, sp, #0
}
 800ad80:	bf00      	nop
 800ad82:	46bd      	mov	sp, r7
 800ad84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad88:	4770      	bx	lr
	...

0800ad8c <motorInit>:
FocParameters fp1;

static void setPwm1(unsigned short int a, unsigned short int b, unsigned short int c);

void motorInit()
{
 800ad8c:	b480      	push	{r7}
 800ad8e:	af00      	add	r7, sp, #0
    fp1.shaft_angle = 0;
 800ad90:	4b0a      	ldr	r3, [pc, #40]	@ (800adbc <motorInit+0x30>)
 800ad92:	f04f 0200 	mov.w	r2, #0
 800ad96:	601a      	str	r2, [r3, #0]
    fp1.Uq = 2.0f;
 800ad98:	4b08      	ldr	r3, [pc, #32]	@ (800adbc <motorInit+0x30>)
 800ad9a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800ad9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    fp1.pole_pairs = 7;
 800ada2:	4b06      	ldr	r3, [pc, #24]	@ (800adbc <motorInit+0x30>)
 800ada4:	2207      	movs	r2, #7
 800ada6:	711a      	strb	r2, [r3, #4]
    fp1.setPwm = setPwm1;
 800ada8:	4b04      	ldr	r3, [pc, #16]	@ (800adbc <motorInit+0x30>)
 800adaa:	4a05      	ldr	r2, [pc, #20]	@ (800adc0 <motorInit+0x34>)
 800adac:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
}
 800adb0:	bf00      	nop
 800adb2:	46bd      	mov	sp, r7
 800adb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb8:	4770      	bx	lr
 800adba:	bf00      	nop
 800adbc:	20000414 	.word	0x20000414
 800adc0:	0800adc5 	.word	0x0800adc5

0800adc4 <setPwm1>:
    fp->angle_el = _electricalAngle(fp->shaft_angle, fp->pole_pairs);
    SVPWM(fp);
}

static void setPwm1(unsigned short int a, unsigned short int b, unsigned short int c)
{
 800adc4:	b480      	push	{r7}
 800adc6:	b083      	sub	sp, #12
 800adc8:	af00      	add	r7, sp, #0
 800adca:	4603      	mov	r3, r0
 800adcc:	80fb      	strh	r3, [r7, #6]
 800adce:	460b      	mov	r3, r1
 800add0:	80bb      	strh	r3, [r7, #4]
 800add2:	4613      	mov	r3, r2
 800add4:	807b      	strh	r3, [r7, #2]
    TIM1->CCR1 = a;
 800add6:	4a07      	ldr	r2, [pc, #28]	@ (800adf4 <setPwm1+0x30>)
 800add8:	88fb      	ldrh	r3, [r7, #6]
 800adda:	6353      	str	r3, [r2, #52]	@ 0x34
    TIM1->CCR2 = b;
 800addc:	4a05      	ldr	r2, [pc, #20]	@ (800adf4 <setPwm1+0x30>)
 800adde:	88bb      	ldrh	r3, [r7, #4]
 800ade0:	6393      	str	r3, [r2, #56]	@ 0x38
    TIM1->CCR3 = c;
 800ade2:	4a04      	ldr	r2, [pc, #16]	@ (800adf4 <setPwm1+0x30>)
 800ade4:	887b      	ldrh	r3, [r7, #2]
 800ade6:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800ade8:	bf00      	nop
 800adea:	370c      	adds	r7, #12
 800adec:	46bd      	mov	sp, r7
 800adee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf2:	4770      	bx	lr
 800adf4:	40012c00 	.word	0x40012c00

0800adf8 <userMain>:
float HallTheta = 0;
float HallSpeed = 0;
uint8_t HallReadTemp = 0;
static bool powerLost;
void userMain(void)
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	af00      	add	r7, sp, #0
	// {
	// 	_30ms = 0;
	// 	sensoring();
	// }

	if (get100MsFlag())
 800adfc:	f000 fa42 	bl	800b284 <get100MsFlag>
 800ae00:	4603      	mov	r3, r0
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d001      	beq.n	800ae0a <userMain+0x12>
	{
		appRunning();
 800ae06:	f7ff ff35 	bl	800ac74 <appRunning>
	}
}
 800ae0a:	bf00      	nop
 800ae0c:	bd80      	pop	{r7, pc}
	...

0800ae10 <HAL_GPIO_EXTI_Callback>:
void setPowerLost()
{
	powerLost = 1;
}
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b082      	sub	sp, #8
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	4603      	mov	r3, r0
 800ae18:	80fb      	strh	r3, [r7, #6]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(GPIO_Pin);
	if (Button3_Pin == GPIO_Pin)
 800ae1a:	88fb      	ldrh	r3, [r7, #6]
 800ae1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ae20:	d13a      	bne.n	800ae98 <HAL_GPIO_EXTI_Callback+0x88>
	{
		Motor_state = ~Motor_state;
 800ae22:	4b1f      	ldr	r3, [pc, #124]	@ (800aea0 <HAL_GPIO_EXTI_Callback+0x90>)
 800ae24:	781b      	ldrb	r3, [r3, #0]
 800ae26:	43db      	mvns	r3, r3
 800ae28:	b2da      	uxtb	r2, r3
 800ae2a:	4b1d      	ldr	r3, [pc, #116]	@ (800aea0 <HAL_GPIO_EXTI_Callback+0x90>)
 800ae2c:	701a      	strb	r2, [r3, #0]
		if (0 == Motor_state)
 800ae2e:	4b1c      	ldr	r3, [pc, #112]	@ (800aea0 <HAL_GPIO_EXTI_Callback+0x90>)
 800ae30:	781b      	ldrb	r3, [r3, #0]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d118      	bne.n	800ae68 <HAL_GPIO_EXTI_Callback+0x58>
		{
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800ae36:	2100      	movs	r1, #0
 800ae38:	481a      	ldr	r0, [pc, #104]	@ (800aea4 <HAL_GPIO_EXTI_Callback+0x94>)
 800ae3a:	f7fc fe49 	bl	8007ad0 <HAL_TIM_PWM_Stop>
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 800ae3e:	2104      	movs	r1, #4
 800ae40:	4818      	ldr	r0, [pc, #96]	@ (800aea4 <HAL_GPIO_EXTI_Callback+0x94>)
 800ae42:	f7fc fe45 	bl	8007ad0 <HAL_TIM_PWM_Stop>
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 800ae46:	2108      	movs	r1, #8
 800ae48:	4816      	ldr	r0, [pc, #88]	@ (800aea4 <HAL_GPIO_EXTI_Callback+0x94>)
 800ae4a:	f7fc fe41 	bl	8007ad0 <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 800ae4e:	2100      	movs	r1, #0
 800ae50:	4814      	ldr	r0, [pc, #80]	@ (800aea4 <HAL_GPIO_EXTI_Callback+0x94>)
 800ae52:	f7fe f911 	bl	8009078 <HAL_TIMEx_PWMN_Stop>
			HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 800ae56:	2104      	movs	r1, #4
 800ae58:	4812      	ldr	r0, [pc, #72]	@ (800aea4 <HAL_GPIO_EXTI_Callback+0x94>)
 800ae5a:	f7fe f90d 	bl	8009078 <HAL_TIMEx_PWMN_Stop>
			HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3);
 800ae5e:	2108      	movs	r1, #8
 800ae60:	4810      	ldr	r0, [pc, #64]	@ (800aea4 <HAL_GPIO_EXTI_Callback+0x94>)
 800ae62:	f7fe f909 	bl	8009078 <HAL_TIMEx_PWMN_Stop>
		}
	}
	/* NOTE: This function should not be modified, when the callback is needed,
			 the HAL_GPIO_EXTI_Callback could be implemented in the user file
	 */
}
 800ae66:	e017      	b.n	800ae98 <HAL_GPIO_EXTI_Callback+0x88>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800ae68:	2100      	movs	r1, #0
 800ae6a:	480e      	ldr	r0, [pc, #56]	@ (800aea4 <HAL_GPIO_EXTI_Callback+0x94>)
 800ae6c:	f7fc fd30 	bl	80078d0 <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800ae70:	2104      	movs	r1, #4
 800ae72:	480c      	ldr	r0, [pc, #48]	@ (800aea4 <HAL_GPIO_EXTI_Callback+0x94>)
 800ae74:	f7fc fd2c 	bl	80078d0 <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800ae78:	2108      	movs	r1, #8
 800ae7a:	480a      	ldr	r0, [pc, #40]	@ (800aea4 <HAL_GPIO_EXTI_Callback+0x94>)
 800ae7c:	f7fc fd28 	bl	80078d0 <HAL_TIM_PWM_Start>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 800ae80:	2100      	movs	r1, #0
 800ae82:	4808      	ldr	r0, [pc, #32]	@ (800aea4 <HAL_GPIO_EXTI_Callback+0x94>)
 800ae84:	f7fe f844 	bl	8008f10 <HAL_TIMEx_PWMN_Start>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 800ae88:	2104      	movs	r1, #4
 800ae8a:	4806      	ldr	r0, [pc, #24]	@ (800aea4 <HAL_GPIO_EXTI_Callback+0x94>)
 800ae8c:	f7fe f840 	bl	8008f10 <HAL_TIMEx_PWMN_Start>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 800ae90:	2108      	movs	r1, #8
 800ae92:	4804      	ldr	r0, [pc, #16]	@ (800aea4 <HAL_GPIO_EXTI_Callback+0x94>)
 800ae94:	f7fe f83c 	bl	8008f10 <HAL_TIMEx_PWMN_Start>
}
 800ae98:	bf00      	nop
 800ae9a:	3708      	adds	r7, #8
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	bd80      	pop	{r7, pc}
 800aea0:	200004d0 	.word	0x200004d0
 800aea4:	20000280 	.word	0x20000280

0800aea8 <HAL_ADCEx_InjectedConvCpltCallback>:
	USART3->TDR = (uint8_t)ch;
	return ch;
}

void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800aea8:	b5b0      	push	{r4, r5, r7, lr}
 800aeaa:	b082      	sub	sp, #8
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
	static uint8_t cnt;
	/* Prevent unused argument(s) compilation warning */
	UNUSED(hadc);
	if (hadc == &hadc1)
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	4a6f      	ldr	r2, [pc, #444]	@ (800b070 <HAL_ADCEx_InjectedConvCpltCallback+0x1c8>)
 800aeb4:	4293      	cmp	r3, r2
 800aeb6:	f040 80d3 	bne.w	800b060 <HAL_ADCEx_InjectedConvCpltCallback+0x1b8>
	{
		if (ADC_offset == 0)
 800aeba:	4b6e      	ldr	r3, [pc, #440]	@ (800b074 <HAL_ADCEx_InjectedConvCpltCallback+0x1cc>)
 800aebc:	781b      	ldrb	r3, [r3, #0]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d156      	bne.n	800af70 <HAL_ADCEx_InjectedConvCpltCallback+0xc8>
		{
			cnt++;
 800aec2:	4b6d      	ldr	r3, [pc, #436]	@ (800b078 <HAL_ADCEx_InjectedConvCpltCallback+0x1d0>)
 800aec4:	781b      	ldrb	r3, [r3, #0]
 800aec6:	3301      	adds	r3, #1
 800aec8:	b2da      	uxtb	r2, r3
 800aeca:	4b6b      	ldr	r3, [pc, #428]	@ (800b078 <HAL_ADCEx_InjectedConvCpltCallback+0x1d0>)
 800aecc:	701a      	strb	r2, [r3, #0]
			adc1_in1 = hadc1.Instance->JDR1;
 800aece:	4b68      	ldr	r3, [pc, #416]	@ (800b070 <HAL_ADCEx_InjectedConvCpltCallback+0x1c8>)
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aed6:	b29a      	uxth	r2, r3
 800aed8:	4b68      	ldr	r3, [pc, #416]	@ (800b07c <HAL_ADCEx_InjectedConvCpltCallback+0x1d4>)
 800aeda:	801a      	strh	r2, [r3, #0]
			adc1_in2 = hadc2.Instance->JDR1;
 800aedc:	4b68      	ldr	r3, [pc, #416]	@ (800b080 <HAL_ADCEx_InjectedConvCpltCallback+0x1d8>)
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aee4:	b29a      	uxth	r2, r3
 800aee6:	4b67      	ldr	r3, [pc, #412]	@ (800b084 <HAL_ADCEx_InjectedConvCpltCallback+0x1dc>)
 800aee8:	801a      	strh	r2, [r3, #0]
			adc1_in3 = hadc1.Instance->JDR2;
 800aeea:	4b61      	ldr	r3, [pc, #388]	@ (800b070 <HAL_ADCEx_InjectedConvCpltCallback+0x1c8>)
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aef2:	b29a      	uxth	r2, r3
 800aef4:	4b64      	ldr	r3, [pc, #400]	@ (800b088 <HAL_ADCEx_InjectedConvCpltCallback+0x1e0>)
 800aef6:	801a      	strh	r2, [r3, #0]
			IA_Offset += adc1_in1;
 800aef8:	4b64      	ldr	r3, [pc, #400]	@ (800b08c <HAL_ADCEx_InjectedConvCpltCallback+0x1e4>)
 800aefa:	881a      	ldrh	r2, [r3, #0]
 800aefc:	4b5f      	ldr	r3, [pc, #380]	@ (800b07c <HAL_ADCEx_InjectedConvCpltCallback+0x1d4>)
 800aefe:	881b      	ldrh	r3, [r3, #0]
 800af00:	4413      	add	r3, r2
 800af02:	b29a      	uxth	r2, r3
 800af04:	4b61      	ldr	r3, [pc, #388]	@ (800b08c <HAL_ADCEx_InjectedConvCpltCallback+0x1e4>)
 800af06:	801a      	strh	r2, [r3, #0]
			IB_Offset += adc1_in2;
 800af08:	4b61      	ldr	r3, [pc, #388]	@ (800b090 <HAL_ADCEx_InjectedConvCpltCallback+0x1e8>)
 800af0a:	881a      	ldrh	r2, [r3, #0]
 800af0c:	4b5d      	ldr	r3, [pc, #372]	@ (800b084 <HAL_ADCEx_InjectedConvCpltCallback+0x1dc>)
 800af0e:	881b      	ldrh	r3, [r3, #0]
 800af10:	4413      	add	r3, r2
 800af12:	b29a      	uxth	r2, r3
 800af14:	4b5e      	ldr	r3, [pc, #376]	@ (800b090 <HAL_ADCEx_InjectedConvCpltCallback+0x1e8>)
 800af16:	801a      	strh	r2, [r3, #0]
			IC_Offset += adc1_in3;
 800af18:	4b5e      	ldr	r3, [pc, #376]	@ (800b094 <HAL_ADCEx_InjectedConvCpltCallback+0x1ec>)
 800af1a:	881a      	ldrh	r2, [r3, #0]
 800af1c:	4b5a      	ldr	r3, [pc, #360]	@ (800b088 <HAL_ADCEx_InjectedConvCpltCallback+0x1e0>)
 800af1e:	881b      	ldrh	r3, [r3, #0]
 800af20:	4413      	add	r3, r2
 800af22:	b29a      	uxth	r2, r3
 800af24:	4b5b      	ldr	r3, [pc, #364]	@ (800b094 <HAL_ADCEx_InjectedConvCpltCallback+0x1ec>)
 800af26:	801a      	strh	r2, [r3, #0]
			if (cnt >= 10)
 800af28:	4b53      	ldr	r3, [pc, #332]	@ (800b078 <HAL_ADCEx_InjectedConvCpltCallback+0x1d0>)
 800af2a:	781b      	ldrb	r3, [r3, #0]
 800af2c:	2b09      	cmp	r3, #9
 800af2e:	f240 8097 	bls.w	800b060 <HAL_ADCEx_InjectedConvCpltCallback+0x1b8>
			{
				ADC_offset = 1;
 800af32:	4b50      	ldr	r3, [pc, #320]	@ (800b074 <HAL_ADCEx_InjectedConvCpltCallback+0x1cc>)
 800af34:	2201      	movs	r2, #1
 800af36:	701a      	strb	r2, [r3, #0]
				IA_Offset = IA_Offset / 10;
 800af38:	4b54      	ldr	r3, [pc, #336]	@ (800b08c <HAL_ADCEx_InjectedConvCpltCallback+0x1e4>)
 800af3a:	881b      	ldrh	r3, [r3, #0]
 800af3c:	4a56      	ldr	r2, [pc, #344]	@ (800b098 <HAL_ADCEx_InjectedConvCpltCallback+0x1f0>)
 800af3e:	fba2 2303 	umull	r2, r3, r2, r3
 800af42:	08db      	lsrs	r3, r3, #3
 800af44:	b29a      	uxth	r2, r3
 800af46:	4b51      	ldr	r3, [pc, #324]	@ (800b08c <HAL_ADCEx_InjectedConvCpltCallback+0x1e4>)
 800af48:	801a      	strh	r2, [r3, #0]
				IB_Offset = IB_Offset / 10;
 800af4a:	4b51      	ldr	r3, [pc, #324]	@ (800b090 <HAL_ADCEx_InjectedConvCpltCallback+0x1e8>)
 800af4c:	881b      	ldrh	r3, [r3, #0]
 800af4e:	4a52      	ldr	r2, [pc, #328]	@ (800b098 <HAL_ADCEx_InjectedConvCpltCallback+0x1f0>)
 800af50:	fba2 2303 	umull	r2, r3, r2, r3
 800af54:	08db      	lsrs	r3, r3, #3
 800af56:	b29a      	uxth	r2, r3
 800af58:	4b4d      	ldr	r3, [pc, #308]	@ (800b090 <HAL_ADCEx_InjectedConvCpltCallback+0x1e8>)
 800af5a:	801a      	strh	r2, [r3, #0]
				IC_Offset = IC_Offset / 10;
 800af5c:	4b4d      	ldr	r3, [pc, #308]	@ (800b094 <HAL_ADCEx_InjectedConvCpltCallback+0x1ec>)
 800af5e:	881b      	ldrh	r3, [r3, #0]
 800af60:	4a4d      	ldr	r2, [pc, #308]	@ (800b098 <HAL_ADCEx_InjectedConvCpltCallback+0x1f0>)
 800af62:	fba2 2303 	umull	r2, r3, r2, r3
 800af66:	08db      	lsrs	r3, r3, #3
 800af68:	b29a      	uxth	r2, r3
 800af6a:	4b4a      	ldr	r3, [pc, #296]	@ (800b094 <HAL_ADCEx_InjectedConvCpltCallback+0x1ec>)
 800af6c:	801a      	strh	r2, [r3, #0]
	}

	/* NOTE : This function should not be modified. When the callback is needed,
			  function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
	*/
}
 800af6e:	e077      	b.n	800b060 <HAL_ADCEx_InjectedConvCpltCallback+0x1b8>
			adc1_in1 = hadc1.Instance->JDR1;
 800af70:	4b3f      	ldr	r3, [pc, #252]	@ (800b070 <HAL_ADCEx_InjectedConvCpltCallback+0x1c8>)
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af78:	b29a      	uxth	r2, r3
 800af7a:	4b40      	ldr	r3, [pc, #256]	@ (800b07c <HAL_ADCEx_InjectedConvCpltCallback+0x1d4>)
 800af7c:	801a      	strh	r2, [r3, #0]
			adc1_in3 = hadc1.Instance->JDR2;
 800af7e:	4b3c      	ldr	r3, [pc, #240]	@ (800b070 <HAL_ADCEx_InjectedConvCpltCallback+0x1c8>)
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800af86:	b29a      	uxth	r2, r3
 800af88:	4b3f      	ldr	r3, [pc, #252]	@ (800b088 <HAL_ADCEx_InjectedConvCpltCallback+0x1e0>)
 800af8a:	801a      	strh	r2, [r3, #0]
			adc1_in2 = hadc2.Instance->JDR1;
 800af8c:	4b3c      	ldr	r3, [pc, #240]	@ (800b080 <HAL_ADCEx_InjectedConvCpltCallback+0x1d8>)
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af94:	b29a      	uxth	r2, r3
 800af96:	4b3b      	ldr	r3, [pc, #236]	@ (800b084 <HAL_ADCEx_InjectedConvCpltCallback+0x1dc>)
 800af98:	801a      	strh	r2, [r3, #0]
			Ia = (adc1_in1 - IA_Offset) * 0.02197f;
 800af9a:	4b38      	ldr	r3, [pc, #224]	@ (800b07c <HAL_ADCEx_InjectedConvCpltCallback+0x1d4>)
 800af9c:	881b      	ldrh	r3, [r3, #0]
 800af9e:	461a      	mov	r2, r3
 800afa0:	4b3a      	ldr	r3, [pc, #232]	@ (800b08c <HAL_ADCEx_InjectedConvCpltCallback+0x1e4>)
 800afa2:	881b      	ldrh	r3, [r3, #0]
 800afa4:	1ad3      	subs	r3, r2, r3
 800afa6:	ee07 3a90 	vmov	s15, r3
 800afaa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800afae:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 800b09c <HAL_ADCEx_InjectedConvCpltCallback+0x1f4>
 800afb2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800afb6:	4b3a      	ldr	r3, [pc, #232]	@ (800b0a0 <HAL_ADCEx_InjectedConvCpltCallback+0x1f8>)
 800afb8:	edc3 7a00 	vstr	s15, [r3]
			Ib = (adc1_in2 - IB_Offset) * 0.02197f;
 800afbc:	4b31      	ldr	r3, [pc, #196]	@ (800b084 <HAL_ADCEx_InjectedConvCpltCallback+0x1dc>)
 800afbe:	881b      	ldrh	r3, [r3, #0]
 800afc0:	461a      	mov	r2, r3
 800afc2:	4b33      	ldr	r3, [pc, #204]	@ (800b090 <HAL_ADCEx_InjectedConvCpltCallback+0x1e8>)
 800afc4:	881b      	ldrh	r3, [r3, #0]
 800afc6:	1ad3      	subs	r3, r2, r3
 800afc8:	ee07 3a90 	vmov	s15, r3
 800afcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800afd0:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800b09c <HAL_ADCEx_InjectedConvCpltCallback+0x1f4>
 800afd4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800afd8:	4b32      	ldr	r3, [pc, #200]	@ (800b0a4 <HAL_ADCEx_InjectedConvCpltCallback+0x1fc>)
 800afda:	edc3 7a00 	vstr	s15, [r3]
			Ic = (adc1_in3 - IC_Offset) * 0.02197f;
 800afde:	4b2a      	ldr	r3, [pc, #168]	@ (800b088 <HAL_ADCEx_InjectedConvCpltCallback+0x1e0>)
 800afe0:	881b      	ldrh	r3, [r3, #0]
 800afe2:	461a      	mov	r2, r3
 800afe4:	4b2b      	ldr	r3, [pc, #172]	@ (800b094 <HAL_ADCEx_InjectedConvCpltCallback+0x1ec>)
 800afe6:	881b      	ldrh	r3, [r3, #0]
 800afe8:	1ad3      	subs	r3, r2, r3
 800afea:	ee07 3a90 	vmov	s15, r3
 800afee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aff2:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 800b09c <HAL_ADCEx_InjectedConvCpltCallback+0x1f4>
 800aff6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800affa:	4b2b      	ldr	r3, [pc, #172]	@ (800b0a8 <HAL_ADCEx_InjectedConvCpltCallback+0x200>)
 800affc:	edc3 7a00 	vstr	s15, [r3]
			elecAngle += 0.01;
 800b000:	4b2a      	ldr	r3, [pc, #168]	@ (800b0ac <HAL_ADCEx_InjectedConvCpltCallback+0x204>)
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	4618      	mov	r0, r3
 800b006:	f7f5 fa6b 	bl	80004e0 <__aeabi_f2d>
 800b00a:	a317      	add	r3, pc, #92	@ (adr r3, 800b068 <HAL_ADCEx_InjectedConvCpltCallback+0x1c0>)
 800b00c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b010:	f7f5 f908 	bl	8000224 <__adddf3>
 800b014:	4602      	mov	r2, r0
 800b016:	460b      	mov	r3, r1
 800b018:	4610      	mov	r0, r2
 800b01a:	4619      	mov	r1, r3
 800b01c:	f7f5 fab8 	bl	8000590 <__aeabi_d2f>
 800b020:	4603      	mov	r3, r0
 800b022:	4a22      	ldr	r2, [pc, #136]	@ (800b0ac <HAL_ADCEx_InjectedConvCpltCallback+0x204>)
 800b024:	6013      	str	r3, [r2, #0]
			if (elecAngle >= _2PI)
 800b026:	4b21      	ldr	r3, [pc, #132]	@ (800b0ac <HAL_ADCEx_InjectedConvCpltCallback+0x204>)
 800b028:	edd3 7a00 	vldr	s15, [r3]
 800b02c:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 800b0b0 <HAL_ADCEx_InjectedConvCpltCallback+0x208>
 800b030:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b038:	db03      	blt.n	800b042 <HAL_ADCEx_InjectedConvCpltCallback+0x19a>
				elecAngle = 0;
 800b03a:	4b1c      	ldr	r3, [pc, #112]	@ (800b0ac <HAL_ADCEx_InjectedConvCpltCallback+0x204>)
 800b03c:	f04f 0200 	mov.w	r2, #0
 800b040:	601a      	str	r2, [r3, #0]
			dealPer100us();
 800b042:	f000 f84f 	bl	800b0e4 <dealPer100us>
			memcpy(tempData, (uint8_t *)&load_data, sizeof(load_data));
 800b046:	4a1b      	ldr	r2, [pc, #108]	@ (800b0b4 <HAL_ADCEx_InjectedConvCpltCallback+0x20c>)
 800b048:	4b1b      	ldr	r3, [pc, #108]	@ (800b0b8 <HAL_ADCEx_InjectedConvCpltCallback+0x210>)
 800b04a:	4614      	mov	r4, r2
 800b04c:	461d      	mov	r5, r3
 800b04e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b050:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b052:	682b      	ldr	r3, [r5, #0]
 800b054:	6023      	str	r3, [r4, #0]
			HAL_UART_Transmit_DMA(&huart3, (uint8_t *)tempData, 6 * 4);
 800b056:	2218      	movs	r2, #24
 800b058:	4916      	ldr	r1, [pc, #88]	@ (800b0b4 <HAL_ADCEx_InjectedConvCpltCallback+0x20c>)
 800b05a:	4818      	ldr	r0, [pc, #96]	@ (800b0bc <HAL_ADCEx_InjectedConvCpltCallback+0x214>)
 800b05c:	f7fe fb0c 	bl	8009678 <HAL_UART_Transmit_DMA>
}
 800b060:	bf00      	nop
 800b062:	3708      	adds	r7, #8
 800b064:	46bd      	mov	sp, r7
 800b066:	bdb0      	pop	{r4, r5, r7, pc}
 800b068:	47ae147b 	.word	0x47ae147b
 800b06c:	3f847ae1 	.word	0x3f847ae1
 800b070:	20000040 	.word	0x20000040
 800b074:	200004de 	.word	0x200004de
 800b078:	20000510 	.word	0x20000510
 800b07c:	200004d8 	.word	0x200004d8
 800b080:	200000ac 	.word	0x200000ac
 800b084:	200004da 	.word	0x200004da
 800b088:	200004dc 	.word	0x200004dc
 800b08c:	200004d2 	.word	0x200004d2
 800b090:	200004d4 	.word	0x200004d4
 800b094:	200004d6 	.word	0x200004d6
 800b098:	cccccccd 	.word	0xcccccccd
 800b09c:	3cb3fa6e 	.word	0x3cb3fa6e
 800b0a0:	200004c4 	.word	0x200004c4
 800b0a4:	200004c8 	.word	0x200004c8
 800b0a8:	200004cc 	.word	0x200004cc
 800b0ac:	20000514 	.word	0x20000514
 800b0b0:	40c90fdb 	.word	0x40c90fdb
 800b0b4:	2000000c 	.word	0x2000000c
 800b0b8:	200004b0 	.word	0x200004b0
 800b0bc:	20000318 	.word	0x20000318

0800b0c0 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b0c0:	b480      	push	{r7}
 800b0c2:	b083      	sub	sp, #12
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
	// }

	/* NOTE : This function should not be modified, when the callback is needed,
			  the HAL_TIM_IC_CaptureCallback could be implemented in the user file
	 */
}
 800b0c8:	bf00      	nop
 800b0ca:	370c      	adds	r7, #12
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d2:	4770      	bx	lr

0800b0d4 <FDCAN_Config>:

void FDCAN_Config(void)
{
 800b0d4:	b480      	push	{r7}
 800b0d6:	af00      	add	r7, sp, #0
	// TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
	// TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
	// TxHeader.MessageMarker = 0x52;

	// HAL_FDCAN_Start(&hfdcan1);
}
 800b0d8:	bf00      	nop
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e0:	4770      	bx	lr
	...

0800b0e4 <dealPer100us>:
static uchar withoutZeroCnt, powerOnCnt;

static bool _5msFlag, _10msFlag, _20msFlag, _30msFlag, _100msFlag, _500msFlag;

void dealPer100us()
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	af00      	add	r7, sp, #0
    static unsigned char cnt;
    if (++cnt >= 10)
 800b0e8:	4b08      	ldr	r3, [pc, #32]	@ (800b10c <dealPer100us+0x28>)
 800b0ea:	781b      	ldrb	r3, [r3, #0]
 800b0ec:	3301      	adds	r3, #1
 800b0ee:	b2da      	uxtb	r2, r3
 800b0f0:	4b06      	ldr	r3, [pc, #24]	@ (800b10c <dealPer100us+0x28>)
 800b0f2:	701a      	strb	r2, [r3, #0]
 800b0f4:	4b05      	ldr	r3, [pc, #20]	@ (800b10c <dealPer100us+0x28>)
 800b0f6:	781b      	ldrb	r3, [r3, #0]
 800b0f8:	2b09      	cmp	r3, #9
 800b0fa:	d904      	bls.n	800b106 <dealPer100us+0x22>
    {
        cnt = 0;
 800b0fc:	4b03      	ldr	r3, [pc, #12]	@ (800b10c <dealPer100us+0x28>)
 800b0fe:	2200      	movs	r2, #0
 800b100:	701a      	strb	r2, [r3, #0]
        dealPerMs();
 800b102:	f000 f805 	bl	800b110 <dealPerMs>
    }

#if ZERO_POLL
    zeroPolling();
#endif
}
 800b106:	bf00      	nop
 800b108:	bd80      	pop	{r7, pc}
 800b10a:	bf00      	nop
 800b10c:	20000528 	.word	0x20000528

0800b110 <dealPerMs>:

// 定时器中断调用
 void dealPerMs()
{
 800b110:	b480      	push	{r7}
 800b112:	af00      	add	r7, sp, #0
    static unsigned char _5msCnt, _30msCnt, _20msCnt, _100msCnt, _10msCnt;
    static uint _500msCnt;
    if (++_5msCnt >= 5)
 800b114:	4b40      	ldr	r3, [pc, #256]	@ (800b218 <dealPerMs+0x108>)
 800b116:	781b      	ldrb	r3, [r3, #0]
 800b118:	3301      	adds	r3, #1
 800b11a:	b2da      	uxtb	r2, r3
 800b11c:	4b3e      	ldr	r3, [pc, #248]	@ (800b218 <dealPerMs+0x108>)
 800b11e:	701a      	strb	r2, [r3, #0]
 800b120:	4b3d      	ldr	r3, [pc, #244]	@ (800b218 <dealPerMs+0x108>)
 800b122:	781b      	ldrb	r3, [r3, #0]
 800b124:	2b04      	cmp	r3, #4
 800b126:	d905      	bls.n	800b134 <dealPerMs+0x24>
    {
        _5msCnt = 0;
 800b128:	4b3b      	ldr	r3, [pc, #236]	@ (800b218 <dealPerMs+0x108>)
 800b12a:	2200      	movs	r2, #0
 800b12c:	701a      	strb	r2, [r3, #0]
        _5msFlag = 1;
 800b12e:	4b3b      	ldr	r3, [pc, #236]	@ (800b21c <dealPerMs+0x10c>)
 800b130:	2201      	movs	r2, #1
 800b132:	701a      	strb	r2, [r3, #0]
    }

    if (++_10msCnt >= 10)
 800b134:	4b3a      	ldr	r3, [pc, #232]	@ (800b220 <dealPerMs+0x110>)
 800b136:	781b      	ldrb	r3, [r3, #0]
 800b138:	3301      	adds	r3, #1
 800b13a:	b2da      	uxtb	r2, r3
 800b13c:	4b38      	ldr	r3, [pc, #224]	@ (800b220 <dealPerMs+0x110>)
 800b13e:	701a      	strb	r2, [r3, #0]
 800b140:	4b37      	ldr	r3, [pc, #220]	@ (800b220 <dealPerMs+0x110>)
 800b142:	781b      	ldrb	r3, [r3, #0]
 800b144:	2b09      	cmp	r3, #9
 800b146:	d905      	bls.n	800b154 <dealPerMs+0x44>
    {
        _10msCnt = 0;
 800b148:	4b35      	ldr	r3, [pc, #212]	@ (800b220 <dealPerMs+0x110>)
 800b14a:	2200      	movs	r2, #0
 800b14c:	701a      	strb	r2, [r3, #0]
        _10msFlag = 1;
 800b14e:	4b35      	ldr	r3, [pc, #212]	@ (800b224 <dealPerMs+0x114>)
 800b150:	2201      	movs	r2, #1
 800b152:	701a      	strb	r2, [r3, #0]
    }

    if (++_20msCnt >= 20)
 800b154:	4b34      	ldr	r3, [pc, #208]	@ (800b228 <dealPerMs+0x118>)
 800b156:	781b      	ldrb	r3, [r3, #0]
 800b158:	3301      	adds	r3, #1
 800b15a:	b2da      	uxtb	r2, r3
 800b15c:	4b32      	ldr	r3, [pc, #200]	@ (800b228 <dealPerMs+0x118>)
 800b15e:	701a      	strb	r2, [r3, #0]
 800b160:	4b31      	ldr	r3, [pc, #196]	@ (800b228 <dealPerMs+0x118>)
 800b162:	781b      	ldrb	r3, [r3, #0]
 800b164:	2b13      	cmp	r3, #19
 800b166:	d905      	bls.n	800b174 <dealPerMs+0x64>
    {
        _20msCnt = 0;
 800b168:	4b2f      	ldr	r3, [pc, #188]	@ (800b228 <dealPerMs+0x118>)
 800b16a:	2200      	movs	r2, #0
 800b16c:	701a      	strb	r2, [r3, #0]
        _20msFlag = 1;
 800b16e:	4b2f      	ldr	r3, [pc, #188]	@ (800b22c <dealPerMs+0x11c>)
 800b170:	2201      	movs	r2, #1
 800b172:	701a      	strb	r2, [r3, #0]
    }

    if (++_30msCnt >= 30)
 800b174:	4b2e      	ldr	r3, [pc, #184]	@ (800b230 <dealPerMs+0x120>)
 800b176:	781b      	ldrb	r3, [r3, #0]
 800b178:	3301      	adds	r3, #1
 800b17a:	b2da      	uxtb	r2, r3
 800b17c:	4b2c      	ldr	r3, [pc, #176]	@ (800b230 <dealPerMs+0x120>)
 800b17e:	701a      	strb	r2, [r3, #0]
 800b180:	4b2b      	ldr	r3, [pc, #172]	@ (800b230 <dealPerMs+0x120>)
 800b182:	781b      	ldrb	r3, [r3, #0]
 800b184:	2b1d      	cmp	r3, #29
 800b186:	d905      	bls.n	800b194 <dealPerMs+0x84>
    {
        _30msCnt = 0;
 800b188:	4b29      	ldr	r3, [pc, #164]	@ (800b230 <dealPerMs+0x120>)
 800b18a:	2200      	movs	r2, #0
 800b18c:	701a      	strb	r2, [r3, #0]
        _30msFlag = 1;
 800b18e:	4b29      	ldr	r3, [pc, #164]	@ (800b234 <dealPerMs+0x124>)
 800b190:	2201      	movs	r2, #1
 800b192:	701a      	strb	r2, [r3, #0]
    }

    if (++_100msCnt >= 100)
 800b194:	4b28      	ldr	r3, [pc, #160]	@ (800b238 <dealPerMs+0x128>)
 800b196:	781b      	ldrb	r3, [r3, #0]
 800b198:	3301      	adds	r3, #1
 800b19a:	b2da      	uxtb	r2, r3
 800b19c:	4b26      	ldr	r3, [pc, #152]	@ (800b238 <dealPerMs+0x128>)
 800b19e:	701a      	strb	r2, [r3, #0]
 800b1a0:	4b25      	ldr	r3, [pc, #148]	@ (800b238 <dealPerMs+0x128>)
 800b1a2:	781b      	ldrb	r3, [r3, #0]
 800b1a4:	2b63      	cmp	r3, #99	@ 0x63
 800b1a6:	d905      	bls.n	800b1b4 <dealPerMs+0xa4>
    {
        _100msCnt = 0;
 800b1a8:	4b23      	ldr	r3, [pc, #140]	@ (800b238 <dealPerMs+0x128>)
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	701a      	strb	r2, [r3, #0]
        _100msFlag = 1;
 800b1ae:	4b23      	ldr	r3, [pc, #140]	@ (800b23c <dealPerMs+0x12c>)
 800b1b0:	2201      	movs	r2, #1
 800b1b2:	701a      	strb	r2, [r3, #0]
    }

    if (++_500msCnt >= 500)
 800b1b4:	4b22      	ldr	r3, [pc, #136]	@ (800b240 <dealPerMs+0x130>)
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	3301      	adds	r3, #1
 800b1ba:	4a21      	ldr	r2, [pc, #132]	@ (800b240 <dealPerMs+0x130>)
 800b1bc:	6013      	str	r3, [r2, #0]
 800b1be:	4b20      	ldr	r3, [pc, #128]	@ (800b240 <dealPerMs+0x130>)
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800b1c6:	d305      	bcc.n	800b1d4 <dealPerMs+0xc4>
    {
        _500msCnt = 0;
 800b1c8:	4b1d      	ldr	r3, [pc, #116]	@ (800b240 <dealPerMs+0x130>)
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	601a      	str	r2, [r3, #0]
        _500msFlag = 1;
 800b1ce:	4b1d      	ldr	r3, [pc, #116]	@ (800b244 <dealPerMs+0x134>)
 800b1d0:	2201      	movs	r2, #1
 800b1d2:	701a      	strb	r2, [r3, #0]

        cnt = 0;
    }

#else
    frequence = 50;
 800b1d4:	4b1c      	ldr	r3, [pc, #112]	@ (800b248 <dealPerMs+0x138>)
 800b1d6:	2232      	movs	r2, #50	@ 0x32
 800b1d8:	701a      	strb	r2, [r3, #0]
            _1s = 1;
        }
    }
#else

    if (++_1msCnt >= 1000)
 800b1da:	4b1c      	ldr	r3, [pc, #112]	@ (800b24c <dealPerMs+0x13c>)
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	3301      	adds	r3, #1
 800b1e0:	4a1a      	ldr	r2, [pc, #104]	@ (800b24c <dealPerMs+0x13c>)
 800b1e2:	6013      	str	r3, [r2, #0]
 800b1e4:	4b19      	ldr	r3, [pc, #100]	@ (800b24c <dealPerMs+0x13c>)
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b1ec:	d305      	bcc.n	800b1fa <dealPerMs+0xea>
    {
        _1msCnt = 0;
 800b1ee:	4b17      	ldr	r3, [pc, #92]	@ (800b24c <dealPerMs+0x13c>)
 800b1f0:	2200      	movs	r2, #0
 800b1f2:	601a      	str	r2, [r3, #0]
        _1s = 1;
 800b1f4:	4b16      	ldr	r3, [pc, #88]	@ (800b250 <dealPerMs+0x140>)
 800b1f6:	2201      	movs	r2, #1
 800b1f8:	701a      	strb	r2, [r3, #0]
    }
#endif
#if SPEED_UP
    _1s = 1;
#endif
    _1ms = 1;
 800b1fa:	4b16      	ldr	r3, [pc, #88]	@ (800b254 <dealPerMs+0x144>)
 800b1fc:	2201      	movs	r2, #1
 800b1fe:	701a      	strb	r2, [r3, #0]
        memorize();
        // beepOnce();
    }
#else
    if (withoutZeroCnt < ZERO_ERR_TIME)
        withoutZeroCnt++;
 800b200:	4b15      	ldr	r3, [pc, #84]	@ (800b258 <dealPerMs+0x148>)
 800b202:	781b      	ldrb	r3, [r3, #0]
 800b204:	3301      	adds	r3, #1
 800b206:	b2da      	uxtb	r2, r3
 800b208:	4b13      	ldr	r3, [pc, #76]	@ (800b258 <dealPerMs+0x148>)
 800b20a:	701a      	strb	r2, [r3, #0]
    //             }
    //         }
    //         //	else
    //     }
    // #endif
}
 800b20c:	bf00      	nop
 800b20e:	46bd      	mov	sp, r7
 800b210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b214:	4770      	bx	lr
 800b216:	bf00      	nop
 800b218:	20000529 	.word	0x20000529
 800b21c:	20000522 	.word	0x20000522
 800b220:	2000052a 	.word	0x2000052a
 800b224:	20000523 	.word	0x20000523
 800b228:	2000052b 	.word	0x2000052b
 800b22c:	20000524 	.word	0x20000524
 800b230:	2000052c 	.word	0x2000052c
 800b234:	20000525 	.word	0x20000525
 800b238:	2000052d 	.word	0x2000052d
 800b23c:	20000526 	.word	0x20000526
 800b240:	20000530 	.word	0x20000530
 800b244:	20000527 	.word	0x20000527
 800b248:	20000520 	.word	0x20000520
 800b24c:	2000051c 	.word	0x2000051c
 800b250:	20000518 	.word	0x20000518
 800b254:	20000519 	.word	0x20000519
 800b258:	20000521 	.word	0x20000521

0800b25c <getOneSecFlag>:
    }
}
#endif

bool getOneSecFlag()
{
 800b25c:	b480      	push	{r7}
 800b25e:	af00      	add	r7, sp, #0
    if (_1s)
 800b260:	4b07      	ldr	r3, [pc, #28]	@ (800b280 <getOneSecFlag+0x24>)
 800b262:	781b      	ldrb	r3, [r3, #0]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d004      	beq.n	800b272 <getOneSecFlag+0x16>
    {
        _1s = 0;
 800b268:	4b05      	ldr	r3, [pc, #20]	@ (800b280 <getOneSecFlag+0x24>)
 800b26a:	2200      	movs	r2, #0
 800b26c:	701a      	strb	r2, [r3, #0]
        return 1;
 800b26e:	2301      	movs	r3, #1
 800b270:	e000      	b.n	800b274 <getOneSecFlag+0x18>
    }
    else
        return 0;
 800b272:	2300      	movs	r3, #0
}
 800b274:	4618      	mov	r0, r3
 800b276:	46bd      	mov	sp, r7
 800b278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27c:	4770      	bx	lr
 800b27e:	bf00      	nop
 800b280:	20000518 	.word	0x20000518

0800b284 <get100MsFlag>:
        return 0;
    }
}

bool get100MsFlag()
{
 800b284:	b480      	push	{r7}
 800b286:	af00      	add	r7, sp, #0
    if (_100msFlag)
 800b288:	4b07      	ldr	r3, [pc, #28]	@ (800b2a8 <get100MsFlag+0x24>)
 800b28a:	781b      	ldrb	r3, [r3, #0]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d004      	beq.n	800b29a <get100MsFlag+0x16>
    {
        _100msFlag = 0;
 800b290:	4b05      	ldr	r3, [pc, #20]	@ (800b2a8 <get100MsFlag+0x24>)
 800b292:	2200      	movs	r2, #0
 800b294:	701a      	strb	r2, [r3, #0]
        return 1;
 800b296:	2301      	movs	r3, #1
 800b298:	e000      	b.n	800b29c <get100MsFlag+0x18>
    }
    else
    {
        return 0;
 800b29a:	2300      	movs	r3, #0
    }
}
 800b29c:	4618      	mov	r0, r3
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a4:	4770      	bx	lr
 800b2a6:	bf00      	nop
 800b2a8:	20000526 	.word	0x20000526

0800b2ac <memset>:
 800b2ac:	4402      	add	r2, r0
 800b2ae:	4603      	mov	r3, r0
 800b2b0:	4293      	cmp	r3, r2
 800b2b2:	d100      	bne.n	800b2b6 <memset+0xa>
 800b2b4:	4770      	bx	lr
 800b2b6:	f803 1b01 	strb.w	r1, [r3], #1
 800b2ba:	e7f9      	b.n	800b2b0 <memset+0x4>

0800b2bc <__libc_init_array>:
 800b2bc:	b570      	push	{r4, r5, r6, lr}
 800b2be:	4d0d      	ldr	r5, [pc, #52]	@ (800b2f4 <__libc_init_array+0x38>)
 800b2c0:	4c0d      	ldr	r4, [pc, #52]	@ (800b2f8 <__libc_init_array+0x3c>)
 800b2c2:	1b64      	subs	r4, r4, r5
 800b2c4:	10a4      	asrs	r4, r4, #2
 800b2c6:	2600      	movs	r6, #0
 800b2c8:	42a6      	cmp	r6, r4
 800b2ca:	d109      	bne.n	800b2e0 <__libc_init_array+0x24>
 800b2cc:	4d0b      	ldr	r5, [pc, #44]	@ (800b2fc <__libc_init_array+0x40>)
 800b2ce:	4c0c      	ldr	r4, [pc, #48]	@ (800b300 <__libc_init_array+0x44>)
 800b2d0:	f000 f818 	bl	800b304 <_init>
 800b2d4:	1b64      	subs	r4, r4, r5
 800b2d6:	10a4      	asrs	r4, r4, #2
 800b2d8:	2600      	movs	r6, #0
 800b2da:	42a6      	cmp	r6, r4
 800b2dc:	d105      	bne.n	800b2ea <__libc_init_array+0x2e>
 800b2de:	bd70      	pop	{r4, r5, r6, pc}
 800b2e0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b2e4:	4798      	blx	r3
 800b2e6:	3601      	adds	r6, #1
 800b2e8:	e7ee      	b.n	800b2c8 <__libc_init_array+0xc>
 800b2ea:	f855 3b04 	ldr.w	r3, [r5], #4
 800b2ee:	4798      	blx	r3
 800b2f0:	3601      	adds	r6, #1
 800b2f2:	e7f2      	b.n	800b2da <__libc_init_array+0x1e>
 800b2f4:	0800b374 	.word	0x0800b374
 800b2f8:	0800b374 	.word	0x0800b374
 800b2fc:	0800b374 	.word	0x0800b374
 800b300:	0800b378 	.word	0x0800b378

0800b304 <_init>:
 800b304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b306:	bf00      	nop
 800b308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b30a:	bc08      	pop	{r3}
 800b30c:	469e      	mov	lr, r3
 800b30e:	4770      	bx	lr

0800b310 <_fini>:
 800b310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b312:	bf00      	nop
 800b314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b316:	bc08      	pop	{r3}
 800b318:	469e      	mov	lr, r3
 800b31a:	4770      	bx	lr
