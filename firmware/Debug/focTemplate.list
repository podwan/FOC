
focTemplate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001238c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b8  08012570  08012570  00013570  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012b28  08012b28  00014258  2**0
                  CONTENTS
  4 .ARM          00000008  08012b28  08012b28  00013b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012b30  08012b30  00014258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012b30  08012b30  00013b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012b34  08012b34  00013b34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000258  20000000  08012b38  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000086c  20000258  08012d90  00014258  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ac4  08012d90  00014ac4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00014258  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027ca0  00000000  00000000  00014288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006099  00000000  00000000  0003bf28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002028  00000000  00000000  00041fc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000186d  00000000  00000000  00043ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029673  00000000  00000000  0004585d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002f8d9  00000000  00000000  0006eed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eeeb8  00000000  00000000  0009e7a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018d661  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000099e8  00000000  00000000  0018d6a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  0019708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000258 	.word	0x20000258
 80001fc:	00000000 	.word	0x00000000
 8000200:	08012554 	.word	0x08012554

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000025c 	.word	0x2000025c
 800021c:	08012554 	.word	0x08012554

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b09a      	sub	sp, #104	@ 0x68
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800103a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001046:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800104a:	2220      	movs	r2, #32
 800104c:	2100      	movs	r1, #0
 800104e:	4618      	mov	r0, r3
 8001050:	f00e fb7a 	bl	800f748 <memset>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001054:	463b      	mov	r3, r7
 8001056:	223c      	movs	r2, #60	@ 0x3c
 8001058:	2100      	movs	r1, #0
 800105a:	4618      	mov	r0, r3
 800105c:	f00e fb74 	bl	800f748 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001060:	4b4d      	ldr	r3, [pc, #308]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001062:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001066:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8001068:	4b4b      	ldr	r3, [pc, #300]	@ (8001198 <MX_ADC1_Init+0x164>)
 800106a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800106e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001070:	4b49      	ldr	r3, [pc, #292]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001076:	4b48      	ldr	r3, [pc, #288]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001078:	2200      	movs	r2, #0
 800107a:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800107c:	4b46      	ldr	r3, [pc, #280]	@ (8001198 <MX_ADC1_Init+0x164>)
 800107e:	2200      	movs	r2, #0
 8001080:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001082:	4b45      	ldr	r3, [pc, #276]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001084:	2201      	movs	r2, #1
 8001086:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001088:	4b43      	ldr	r3, [pc, #268]	@ (8001198 <MX_ADC1_Init+0x164>)
 800108a:	2204      	movs	r2, #4
 800108c:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800108e:	4b42      	ldr	r3, [pc, #264]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001090:	2200      	movs	r2, #0
 8001092:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001094:	4b40      	ldr	r3, [pc, #256]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001096:	2200      	movs	r2, #0
 8001098:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800109a:	4b3f      	ldr	r3, [pc, #252]	@ (8001198 <MX_ADC1_Init+0x164>)
 800109c:	2201      	movs	r2, #1
 800109e:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010a0:	4b3d      	ldr	r3, [pc, #244]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010a8:	4b3b      	ldr	r3, [pc, #236]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010ae:	4b3a      	ldr	r3, [pc, #232]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010b4:	4b38      	ldr	r3, [pc, #224]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010bc:	4b36      	ldr	r3, [pc, #216]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010be:	2200      	movs	r2, #0
 80010c0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80010c2:	4b35      	ldr	r3, [pc, #212]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010ca:	4833      	ldr	r0, [pc, #204]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010cc:	f001 fda8 	bl	8002c20 <HAL_ADC_Init>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80010d6:	f000 fca4 	bl	8001a22 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010da:	2300      	movs	r3, #0
 80010dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010de:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80010e2:	4619      	mov	r1, r3
 80010e4:	482c      	ldr	r0, [pc, #176]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010e6:	f003 ff9b 	bl	8005020 <HAL_ADCEx_MultiModeConfigChannel>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 80010f0:	f000 fc97 	bl	8001a22 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80010f4:	4b29      	ldr	r3, [pc, #164]	@ (800119c <MX_ADC1_Init+0x168>)
 80010f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010f8:	2306      	movs	r3, #6
 80010fa:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010fc:	2300      	movs	r3, #0
 80010fe:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001100:	237f      	movs	r3, #127	@ 0x7f
 8001102:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001104:	2304      	movs	r3, #4
 8001106:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfig.Offset = 0;
 8001108:	2300      	movs	r3, #0
 800110a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800110c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001110:	4619      	mov	r1, r3
 8001112:	4821      	ldr	r0, [pc, #132]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001114:	f002 fa0a 	bl	800352c <HAL_ADC_ConfigChannel>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 800111e:	f000 fc80 	bl	8001a22 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8001122:	4b1f      	ldr	r3, [pc, #124]	@ (80011a0 <MX_ADC1_Init+0x16c>)
 8001124:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8001126:	2309      	movs	r3, #9
 8001128:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 800112a:	2301      	movs	r3, #1
 800112c:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 800112e:	237f      	movs	r3, #127	@ 0x7f
 8001130:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8001132:	2304      	movs	r3, #4
 8001134:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffset = 0;
 8001136:	2300      	movs	r3, #0
 8001138:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedNbrOfConversion = 2;
 800113a:	2302      	movs	r3, #2
 800113c:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800113e:	2300      	movs	r3, #0
 8001140:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 8001144:	2300      	movs	r3, #0
 8001146:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  sConfigInjected.QueueInjectedContext = DISABLE;
 800114a:	2300      	movs	r3, #0
 800114c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 8001150:	2384      	movs	r3, #132	@ 0x84
 8001152:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8001154:	2380      	movs	r3, #128	@ 0x80
 8001156:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8001158:	2300      	movs	r3, #0
 800115a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800115e:	463b      	mov	r3, r7
 8001160:	4619      	mov	r1, r3
 8001162:	480d      	ldr	r0, [pc, #52]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001164:	f003 fa7c 	bl	8004660 <HAL_ADCEx_InjectedConfigChannel>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_ADC1_Init+0x13e>
  {
    Error_Handler();
 800116e:	f000 fc58 	bl	8001a22 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_12;
 8001172:	4b0c      	ldr	r3, [pc, #48]	@ (80011a4 <MX_ADC1_Init+0x170>)
 8001174:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8001176:	f240 130f 	movw	r3, #271	@ 0x10f
 800117a:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800117c:	463b      	mov	r3, r7
 800117e:	4619      	mov	r1, r3
 8001180:	4805      	ldr	r0, [pc, #20]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001182:	f003 fa6d 	bl	8004660 <HAL_ADCEx_InjectedConfigChannel>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_ADC1_Init+0x15c>
  {
    Error_Handler();
 800118c:	f000 fc49 	bl	8001a22 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001190:	bf00      	nop
 8001192:	3768      	adds	r7, #104	@ 0x68
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	20000274 	.word	0x20000274
 800119c:	2e300800 	.word	0x2e300800
 80011a0:	0c900008 	.word	0x0c900008
 80011a4:	32601000 	.word	0x32601000

080011a8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b098      	sub	sp, #96	@ 0x60
 80011ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80011ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011b2:	223c      	movs	r2, #60	@ 0x3c
 80011b4:	2100      	movs	r1, #0
 80011b6:	4618      	mov	r0, r3
 80011b8:	f00e fac6 	bl	800f748 <memset>
  ADC_ChannelConfTypeDef sConfig = {0};
 80011bc:	1d3b      	adds	r3, r7, #4
 80011be:	2220      	movs	r2, #32
 80011c0:	2100      	movs	r1, #0
 80011c2:	4618      	mov	r0, r3
 80011c4:	f00e fac0 	bl	800f748 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80011c8:	4b3f      	ldr	r3, [pc, #252]	@ (80012c8 <MX_ADC2_Init+0x120>)
 80011ca:	4a40      	ldr	r2, [pc, #256]	@ (80012cc <MX_ADC2_Init+0x124>)
 80011cc:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80011ce:	4b3e      	ldr	r3, [pc, #248]	@ (80012c8 <MX_ADC2_Init+0x120>)
 80011d0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80011d4:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80011d6:	4b3c      	ldr	r3, [pc, #240]	@ (80012c8 <MX_ADC2_Init+0x120>)
 80011d8:	2200      	movs	r2, #0
 80011da:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011dc:	4b3a      	ldr	r3, [pc, #232]	@ (80012c8 <MX_ADC2_Init+0x120>)
 80011de:	2200      	movs	r2, #0
 80011e0:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80011e2:	4b39      	ldr	r3, [pc, #228]	@ (80012c8 <MX_ADC2_Init+0x120>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011e8:	4b37      	ldr	r3, [pc, #220]	@ (80012c8 <MX_ADC2_Init+0x120>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011ee:	4b36      	ldr	r3, [pc, #216]	@ (80012c8 <MX_ADC2_Init+0x120>)
 80011f0:	2204      	movs	r2, #4
 80011f2:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80011f4:	4b34      	ldr	r3, [pc, #208]	@ (80012c8 <MX_ADC2_Init+0x120>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80011fa:	4b33      	ldr	r3, [pc, #204]	@ (80012c8 <MX_ADC2_Init+0x120>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8001200:	4b31      	ldr	r3, [pc, #196]	@ (80012c8 <MX_ADC2_Init+0x120>)
 8001202:	2201      	movs	r2, #1
 8001204:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001206:	4b30      	ldr	r3, [pc, #192]	@ (80012c8 <MX_ADC2_Init+0x120>)
 8001208:	2200      	movs	r2, #0
 800120a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800120e:	4b2e      	ldr	r3, [pc, #184]	@ (80012c8 <MX_ADC2_Init+0x120>)
 8001210:	2200      	movs	r2, #0
 8001212:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001214:	4b2c      	ldr	r3, [pc, #176]	@ (80012c8 <MX_ADC2_Init+0x120>)
 8001216:	2200      	movs	r2, #0
 8001218:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800121a:	4b2b      	ldr	r3, [pc, #172]	@ (80012c8 <MX_ADC2_Init+0x120>)
 800121c:	2200      	movs	r2, #0
 800121e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001222:	4b29      	ldr	r3, [pc, #164]	@ (80012c8 <MX_ADC2_Init+0x120>)
 8001224:	2200      	movs	r2, #0
 8001226:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001228:	4b27      	ldr	r3, [pc, #156]	@ (80012c8 <MX_ADC2_Init+0x120>)
 800122a:	2200      	movs	r2, #0
 800122c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001230:	4825      	ldr	r0, [pc, #148]	@ (80012c8 <MX_ADC2_Init+0x120>)
 8001232:	f001 fcf5 	bl	8002c20 <HAL_ADC_Init>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_ADC2_Init+0x98>
  {
    Error_Handler();
 800123c:	f000 fbf1 	bl	8001a22 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8001240:	4b23      	ldr	r3, [pc, #140]	@ (80012d0 <MX_ADC2_Init+0x128>)
 8001242:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8001244:	2309      	movs	r3, #9
 8001246:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8001248:	2301      	movs	r3, #1
 800124a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 800124c:	237f      	movs	r3, #127	@ 0x7f
 800124e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8001250:	2304      	movs	r3, #4
 8001252:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigInjected.InjectedOffset = 0;
 8001254:	2300      	movs	r3, #0
 8001256:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigInjected.InjectedNbrOfConversion = 1;
 8001258:	2301      	movs	r3, #1
 800125a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800125c:	2300      	movs	r3, #0
 800125e:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  sConfigInjected.AutoInjectedConv = DISABLE;
 8001262:	2300      	movs	r3, #0
 8001264:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  sConfigInjected.QueueInjectedContext = DISABLE;
 8001268:	2300      	movs	r3, #0
 800126a:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 800126e:	2384      	movs	r3, #132	@ 0x84
 8001270:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8001272:	2380      	movs	r3, #128	@ 0x80
 8001274:	653b      	str	r3, [r7, #80]	@ 0x50
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8001276:	2300      	movs	r3, #0
 8001278:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800127c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001280:	4619      	mov	r1, r3
 8001282:	4811      	ldr	r0, [pc, #68]	@ (80012c8 <MX_ADC2_Init+0x120>)
 8001284:	f003 f9ec 	bl	8004660 <HAL_ADCEx_InjectedConfigChannel>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_ADC2_Init+0xea>
  {
    Error_Handler();
 800128e:	f000 fbc8 	bl	8001a22 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001292:	4b10      	ldr	r3, [pc, #64]	@ (80012d4 <MX_ADC2_Init+0x12c>)
 8001294:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001296:	2306      	movs	r3, #6
 8001298:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800129a:	2300      	movs	r3, #0
 800129c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800129e:	237f      	movs	r3, #127	@ 0x7f
 80012a0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012a2:	2304      	movs	r3, #4
 80012a4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80012a6:	2300      	movs	r3, #0
 80012a8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80012aa:	1d3b      	adds	r3, r7, #4
 80012ac:	4619      	mov	r1, r3
 80012ae:	4806      	ldr	r0, [pc, #24]	@ (80012c8 <MX_ADC2_Init+0x120>)
 80012b0:	f002 f93c 	bl	800352c <HAL_ADC_ConfigChannel>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_ADC2_Init+0x116>
  {
    Error_Handler();
 80012ba:	f000 fbb2 	bl	8001a22 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80012be:	bf00      	nop
 80012c0:	3760      	adds	r7, #96	@ 0x60
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	200002e0 	.word	0x200002e0
 80012cc:	50000100 	.word	0x50000100
 80012d0:	0c900008 	.word	0x0c900008
 80012d4:	04300002 	.word	0x04300002

080012d8 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b09e      	sub	sp, #120	@ 0x78
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	60da      	str	r2, [r3, #12]
 80012ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012f0:	f107 0320 	add.w	r3, r7, #32
 80012f4:	2244      	movs	r2, #68	@ 0x44
 80012f6:	2100      	movs	r1, #0
 80012f8:	4618      	mov	r0, r3
 80012fa:	f00e fa25 	bl	800f748 <memset>
  if(adcHandle->Instance==ADC1)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001306:	d15f      	bne.n	80013c8 <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001308:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800130c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800130e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001312:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001314:	f107 0320 	add.w	r3, r7, #32
 8001318:	4618      	mov	r0, r3
 800131a:	f006 f967 	bl	80075ec <HAL_RCCEx_PeriphCLKConfig>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001324:	f000 fb7d 	bl	8001a22 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001328:	4b4f      	ldr	r3, [pc, #316]	@ (8001468 <HAL_ADC_MspInit+0x190>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	3301      	adds	r3, #1
 800132e:	4a4e      	ldr	r2, [pc, #312]	@ (8001468 <HAL_ADC_MspInit+0x190>)
 8001330:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001332:	4b4d      	ldr	r3, [pc, #308]	@ (8001468 <HAL_ADC_MspInit+0x190>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	2b01      	cmp	r3, #1
 8001338:	d10b      	bne.n	8001352 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800133a:	4b4c      	ldr	r3, [pc, #304]	@ (800146c <HAL_ADC_MspInit+0x194>)
 800133c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800133e:	4a4b      	ldr	r2, [pc, #300]	@ (800146c <HAL_ADC_MspInit+0x194>)
 8001340:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001344:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001346:	4b49      	ldr	r3, [pc, #292]	@ (800146c <HAL_ADC_MspInit+0x194>)
 8001348:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800134a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800134e:	61fb      	str	r3, [r7, #28]
 8001350:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001352:	4b46      	ldr	r3, [pc, #280]	@ (800146c <HAL_ADC_MspInit+0x194>)
 8001354:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001356:	4a45      	ldr	r2, [pc, #276]	@ (800146c <HAL_ADC_MspInit+0x194>)
 8001358:	f043 0301 	orr.w	r3, r3, #1
 800135c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800135e:	4b43      	ldr	r3, [pc, #268]	@ (800146c <HAL_ADC_MspInit+0x194>)
 8001360:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	61bb      	str	r3, [r7, #24]
 8001368:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800136a:	4b40      	ldr	r3, [pc, #256]	@ (800146c <HAL_ADC_MspInit+0x194>)
 800136c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800136e:	4a3f      	ldr	r2, [pc, #252]	@ (800146c <HAL_ADC_MspInit+0x194>)
 8001370:	f043 0302 	orr.w	r3, r3, #2
 8001374:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001376:	4b3d      	ldr	r3, [pc, #244]	@ (800146c <HAL_ADC_MspInit+0x194>)
 8001378:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800137a:	f003 0302 	and.w	r3, r3, #2
 800137e:	617b      	str	r3, [r7, #20]
 8001380:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN3
    PB1     ------> ADC1_IN12
    PB12     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001382:	2304      	movs	r3, #4
 8001384:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001386:	2303      	movs	r3, #3
 8001388:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138a:	2300      	movs	r3, #0
 800138c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800138e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001392:	4619      	mov	r1, r3
 8001394:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001398:	f005 f892 	bl	80064c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_12;
 800139c:	f241 0302 	movw	r3, #4098	@ 0x1002
 80013a0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013a2:	2303      	movs	r3, #3
 80013a4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	2300      	movs	r3, #0
 80013a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013aa:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80013ae:	4619      	mov	r1, r3
 80013b0:	482f      	ldr	r0, [pc, #188]	@ (8001470 <HAL_ADC_MspInit+0x198>)
 80013b2:	f005 f885 	bl	80064c0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80013b6:	2200      	movs	r2, #0
 80013b8:	2100      	movs	r1, #0
 80013ba:	2012      	movs	r0, #18
 80013bc:	f004 f98f 	bl	80056de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80013c0:	2012      	movs	r0, #18
 80013c2:	f004 f9a6 	bl	8005712 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80013c6:	e04a      	b.n	800145e <HAL_ADC_MspInit+0x186>
  else if(adcHandle->Instance==ADC2)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a29      	ldr	r2, [pc, #164]	@ (8001474 <HAL_ADC_MspInit+0x19c>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d145      	bne.n	800145e <HAL_ADC_MspInit+0x186>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80013d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80013d6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80013d8:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80013dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013de:	f107 0320 	add.w	r3, r7, #32
 80013e2:	4618      	mov	r0, r3
 80013e4:	f006 f902 	bl	80075ec <HAL_RCCEx_PeriphCLKConfig>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <HAL_ADC_MspInit+0x11a>
      Error_Handler();
 80013ee:	f000 fb18 	bl	8001a22 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80013f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001468 <HAL_ADC_MspInit+0x190>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	3301      	adds	r3, #1
 80013f8:	4a1b      	ldr	r2, [pc, #108]	@ (8001468 <HAL_ADC_MspInit+0x190>)
 80013fa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80013fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001468 <HAL_ADC_MspInit+0x190>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2b01      	cmp	r3, #1
 8001402:	d10b      	bne.n	800141c <HAL_ADC_MspInit+0x144>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001404:	4b19      	ldr	r3, [pc, #100]	@ (800146c <HAL_ADC_MspInit+0x194>)
 8001406:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001408:	4a18      	ldr	r2, [pc, #96]	@ (800146c <HAL_ADC_MspInit+0x194>)
 800140a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800140e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001410:	4b16      	ldr	r3, [pc, #88]	@ (800146c <HAL_ADC_MspInit+0x194>)
 8001412:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001414:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001418:	613b      	str	r3, [r7, #16]
 800141a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800141c:	4b13      	ldr	r3, [pc, #76]	@ (800146c <HAL_ADC_MspInit+0x194>)
 800141e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001420:	4a12      	ldr	r2, [pc, #72]	@ (800146c <HAL_ADC_MspInit+0x194>)
 8001422:	f043 0301 	orr.w	r3, r3, #1
 8001426:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001428:	4b10      	ldr	r3, [pc, #64]	@ (800146c <HAL_ADC_MspInit+0x194>)
 800142a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800142c:	f003 0301 	and.w	r3, r3, #1
 8001430:	60fb      	str	r3, [r7, #12]
 8001432:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6;
 8001434:	2341      	movs	r3, #65	@ 0x41
 8001436:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001438:	2303      	movs	r3, #3
 800143a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	2300      	movs	r3, #0
 800143e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001440:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001444:	4619      	mov	r1, r3
 8001446:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800144a:	f005 f839 	bl	80064c0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800144e:	2200      	movs	r2, #0
 8001450:	2100      	movs	r1, #0
 8001452:	2012      	movs	r0, #18
 8001454:	f004 f943 	bl	80056de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001458:	2012      	movs	r0, #18
 800145a:	f004 f95a 	bl	8005712 <HAL_NVIC_EnableIRQ>
}
 800145e:	bf00      	nop
 8001460:	3778      	adds	r7, #120	@ 0x78
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	2000034c 	.word	0x2000034c
 800146c:	40021000 	.word	0x40021000
 8001470:	48000400 	.word	0x48000400
 8001474:	50000100 	.word	0x50000100

08001478 <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 800147c:	4b0f      	ldr	r3, [pc, #60]	@ (80014bc <MX_COMP1_Init+0x44>)
 800147e:	4a10      	ldr	r2, [pc, #64]	@ (80014c0 <MX_COMP1_Init+0x48>)
 8001480:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO2;
 8001482:	4b0e      	ldr	r3, [pc, #56]	@ (80014bc <MX_COMP1_Init+0x44>)
 8001484:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001488:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH1;
 800148a:	4b0c      	ldr	r3, [pc, #48]	@ (80014bc <MX_COMP1_Init+0x44>)
 800148c:	2240      	movs	r2, #64	@ 0x40
 800148e:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8001490:	4b0a      	ldr	r3, [pc, #40]	@ (80014bc <MX_COMP1_Init+0x44>)
 8001492:	2200      	movs	r2, #0
 8001494:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8001496:	4b09      	ldr	r3, [pc, #36]	@ (80014bc <MX_COMP1_Init+0x44>)
 8001498:	2200      	movs	r2, #0
 800149a:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 800149c:	4b07      	ldr	r3, [pc, #28]	@ (80014bc <MX_COMP1_Init+0x44>)
 800149e:	2200      	movs	r2, #0
 80014a0:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING;
 80014a2:	4b06      	ldr	r3, [pc, #24]	@ (80014bc <MX_COMP1_Init+0x44>)
 80014a4:	2211      	movs	r2, #17
 80014a6:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 80014a8:	4804      	ldr	r0, [pc, #16]	@ (80014bc <MX_COMP1_Init+0x44>)
 80014aa:	f003 ff1b 	bl	80052e4 <HAL_COMP_Init>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_COMP1_Init+0x40>
  {
    Error_Handler();
 80014b4:	f000 fab5 	bl	8001a22 <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 80014b8:	bf00      	nop
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	20000350 	.word	0x20000350
 80014c0:	40010200 	.word	0x40010200

080014c4 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b088      	sub	sp, #32
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014cc:	f107 030c 	add.w	r3, r7, #12
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	605a      	str	r2, [r3, #4]
 80014d6:	609a      	str	r2, [r3, #8]
 80014d8:	60da      	str	r2, [r3, #12]
 80014da:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a13      	ldr	r2, [pc, #76]	@ (8001530 <HAL_COMP_MspInit+0x6c>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d11f      	bne.n	8001526 <HAL_COMP_MspInit+0x62>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014e6:	4b13      	ldr	r3, [pc, #76]	@ (8001534 <HAL_COMP_MspInit+0x70>)
 80014e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ea:	4a12      	ldr	r2, [pc, #72]	@ (8001534 <HAL_COMP_MspInit+0x70>)
 80014ec:	f043 0302 	orr.w	r3, r3, #2
 80014f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014f2:	4b10      	ldr	r3, [pc, #64]	@ (8001534 <HAL_COMP_MspInit+0x70>)
 80014f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014f6:	f003 0302 	and.w	r3, r3, #2
 80014fa:	60bb      	str	r3, [r7, #8]
 80014fc:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration
    PB1     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80014fe:	2302      	movs	r3, #2
 8001500:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001502:	2303      	movs	r3, #3
 8001504:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001506:	2300      	movs	r3, #0
 8001508:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800150a:	f107 030c 	add.w	r3, r7, #12
 800150e:	4619      	mov	r1, r3
 8001510:	4809      	ldr	r0, [pc, #36]	@ (8001538 <HAL_COMP_MspInit+0x74>)
 8001512:	f004 ffd5 	bl	80064c0 <HAL_GPIO_Init>

    /* COMP1 interrupt Init */
    HAL_NVIC_SetPriority(COMP1_2_3_IRQn, 1, 0);
 8001516:	2200      	movs	r2, #0
 8001518:	2101      	movs	r1, #1
 800151a:	2040      	movs	r0, #64	@ 0x40
 800151c:	f004 f8df 	bl	80056de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP1_2_3_IRQn);
 8001520:	2040      	movs	r0, #64	@ 0x40
 8001522:	f004 f8f6 	bl	8005712 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 8001526:	bf00      	nop
 8001528:	3720      	adds	r7, #32
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40010200 	.word	0x40010200
 8001534:	40021000 	.word	0x40021000
 8001538:	48000400 	.word	0x48000400

0800153c <MX_DAC3_Init>:

DAC_HandleTypeDef hdac3;

/* DAC3 init function */
void MX_DAC3_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b08c      	sub	sp, #48	@ 0x30
 8001540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC3_Init 0 */

  /* USER CODE END DAC3_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001542:	463b      	mov	r3, r7
 8001544:	2230      	movs	r2, #48	@ 0x30
 8001546:	2100      	movs	r1, #0
 8001548:	4618      	mov	r0, r3
 800154a:	f00e f8fd 	bl	800f748 <memset>

  /* USER CODE END DAC3_Init 1 */

  /** DAC Initialization
  */
  hdac3.Instance = DAC3;
 800154e:	4b16      	ldr	r3, [pc, #88]	@ (80015a8 <MX_DAC3_Init+0x6c>)
 8001550:	4a16      	ldr	r2, [pc, #88]	@ (80015ac <MX_DAC3_Init+0x70>)
 8001552:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac3) != HAL_OK)
 8001554:	4814      	ldr	r0, [pc, #80]	@ (80015a8 <MX_DAC3_Init+0x6c>)
 8001556:	f004 f8f6 	bl	8005746 <HAL_DAC_Init>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_DAC3_Init+0x28>
  {
    Error_Handler();
 8001560:	f000 fa5f 	bl	8001a22 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001564:	2302      	movs	r3, #2
 8001566:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001568:	2300      	movs	r3, #0
 800156a:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 800156c:	2300      	movs	r3, #0
 800156e:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001570:	2300      	movs	r3, #0
 8001572:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001574:	2300      	movs	r3, #0
 8001576:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001578:	2300      	movs	r3, #0
 800157a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 800157c:	2302      	movs	r3, #2
 800157e:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8001580:	2302      	movs	r3, #2
 8001582:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001584:	2300      	movs	r3, #0
 8001586:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001588:	463b      	mov	r3, r7
 800158a:	2200      	movs	r2, #0
 800158c:	4619      	mov	r1, r3
 800158e:	4806      	ldr	r0, [pc, #24]	@ (80015a8 <MX_DAC3_Init+0x6c>)
 8001590:	f004 f8fc 	bl	800578c <HAL_DAC_ConfigChannel>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_DAC3_Init+0x62>
  {
    Error_Handler();
 800159a:	f000 fa42 	bl	8001a22 <Error_Handler>
  }
  /* USER CODE BEGIN DAC3_Init 2 */

  /* USER CODE END DAC3_Init 2 */

}
 800159e:	bf00      	nop
 80015a0:	3730      	adds	r7, #48	@ 0x30
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	20000374 	.word	0x20000374
 80015ac:	50001000 	.word	0x50001000

080015b0 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]

  if(dacHandle->Instance==DAC3)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a0a      	ldr	r2, [pc, #40]	@ (80015e8 <HAL_DAC_MspInit+0x38>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d10b      	bne.n	80015da <HAL_DAC_MspInit+0x2a>
  {
  /* USER CODE BEGIN DAC3_MspInit 0 */

  /* USER CODE END DAC3_MspInit 0 */
    /* DAC3 clock enable */
    __HAL_RCC_DAC3_CLK_ENABLE();
 80015c2:	4b0a      	ldr	r3, [pc, #40]	@ (80015ec <HAL_DAC_MspInit+0x3c>)
 80015c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015c6:	4a09      	ldr	r2, [pc, #36]	@ (80015ec <HAL_DAC_MspInit+0x3c>)
 80015c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015ce:	4b07      	ldr	r3, [pc, #28]	@ (80015ec <HAL_DAC_MspInit+0x3c>)
 80015d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015d6:	60fb      	str	r3, [r7, #12]
 80015d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DAC3_MspInit 1 */

  /* USER CODE END DAC3_MspInit 1 */
  }
}
 80015da:	bf00      	nop
 80015dc:	3714      	adds	r7, #20
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	50001000 	.word	0x50001000
 80015ec:	40021000 	.word	0x40021000

080015f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80015f6:	4b16      	ldr	r3, [pc, #88]	@ (8001650 <MX_DMA_Init+0x60>)
 80015f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015fa:	4a15      	ldr	r2, [pc, #84]	@ (8001650 <MX_DMA_Init+0x60>)
 80015fc:	f043 0304 	orr.w	r3, r3, #4
 8001600:	6493      	str	r3, [r2, #72]	@ 0x48
 8001602:	4b13      	ldr	r3, [pc, #76]	@ (8001650 <MX_DMA_Init+0x60>)
 8001604:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001606:	f003 0304 	and.w	r3, r3, #4
 800160a:	607b      	str	r3, [r7, #4]
 800160c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800160e:	4b10      	ldr	r3, [pc, #64]	@ (8001650 <MX_DMA_Init+0x60>)
 8001610:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001612:	4a0f      	ldr	r2, [pc, #60]	@ (8001650 <MX_DMA_Init+0x60>)
 8001614:	f043 0301 	orr.w	r3, r3, #1
 8001618:	6493      	str	r3, [r2, #72]	@ 0x48
 800161a:	4b0d      	ldr	r3, [pc, #52]	@ (8001650 <MX_DMA_Init+0x60>)
 800161c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	603b      	str	r3, [r7, #0]
 8001624:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8001626:	2200      	movs	r2, #0
 8001628:	2101      	movs	r1, #1
 800162a:	200b      	movs	r0, #11
 800162c:	f004 f857 	bl	80056de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001630:	200b      	movs	r0, #11
 8001632:	f004 f86e 	bl	8005712 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 1, 0);
 8001636:	2200      	movs	r2, #0
 8001638:	2101      	movs	r1, #1
 800163a:	200c      	movs	r0, #12
 800163c:	f004 f84f 	bl	80056de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001640:	200c      	movs	r0, #12
 8001642:	f004 f866 	bl	8005712 <HAL_NVIC_EnableIRQ>

}
 8001646:	bf00      	nop
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	40021000 	.word	0x40021000

08001654 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001658:	4b1f      	ldr	r3, [pc, #124]	@ (80016d8 <MX_FDCAN1_Init+0x84>)
 800165a:	4a20      	ldr	r2, [pc, #128]	@ (80016dc <MX_FDCAN1_Init+0x88>)
 800165c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800165e:	4b1e      	ldr	r3, [pc, #120]	@ (80016d8 <MX_FDCAN1_Init+0x84>)
 8001660:	2200      	movs	r2, #0
 8001662:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001664:	4b1c      	ldr	r3, [pc, #112]	@ (80016d8 <MX_FDCAN1_Init+0x84>)
 8001666:	2200      	movs	r2, #0
 8001668:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800166a:	4b1b      	ldr	r3, [pc, #108]	@ (80016d8 <MX_FDCAN1_Init+0x84>)
 800166c:	2200      	movs	r2, #0
 800166e:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001670:	4b19      	ldr	r3, [pc, #100]	@ (80016d8 <MX_FDCAN1_Init+0x84>)
 8001672:	2200      	movs	r2, #0
 8001674:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001676:	4b18      	ldr	r3, [pc, #96]	@ (80016d8 <MX_FDCAN1_Init+0x84>)
 8001678:	2200      	movs	r2, #0
 800167a:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800167c:	4b16      	ldr	r3, [pc, #88]	@ (80016d8 <MX_FDCAN1_Init+0x84>)
 800167e:	2200      	movs	r2, #0
 8001680:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 20;
 8001682:	4b15      	ldr	r3, [pc, #84]	@ (80016d8 <MX_FDCAN1_Init+0x84>)
 8001684:	2214      	movs	r2, #20
 8001686:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001688:	4b13      	ldr	r3, [pc, #76]	@ (80016d8 <MX_FDCAN1_Init+0x84>)
 800168a:	2201      	movs	r2, #1
 800168c:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 10;
 800168e:	4b12      	ldr	r3, [pc, #72]	@ (80016d8 <MX_FDCAN1_Init+0x84>)
 8001690:	220a      	movs	r2, #10
 8001692:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 5;
 8001694:	4b10      	ldr	r3, [pc, #64]	@ (80016d8 <MX_FDCAN1_Init+0x84>)
 8001696:	2205      	movs	r2, #5
 8001698:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 20;
 800169a:	4b0f      	ldr	r3, [pc, #60]	@ (80016d8 <MX_FDCAN1_Init+0x84>)
 800169c:	2214      	movs	r2, #20
 800169e:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80016a0:	4b0d      	ldr	r3, [pc, #52]	@ (80016d8 <MX_FDCAN1_Init+0x84>)
 80016a2:	2201      	movs	r2, #1
 80016a4:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 10;
 80016a6:	4b0c      	ldr	r3, [pc, #48]	@ (80016d8 <MX_FDCAN1_Init+0x84>)
 80016a8:	220a      	movs	r2, #10
 80016aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 5;
 80016ac:	4b0a      	ldr	r3, [pc, #40]	@ (80016d8 <MX_FDCAN1_Init+0x84>)
 80016ae:	2205      	movs	r2, #5
 80016b0:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 80016b2:	4b09      	ldr	r3, [pc, #36]	@ (80016d8 <MX_FDCAN1_Init+0x84>)
 80016b4:	2201      	movs	r2, #1
 80016b6:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 1;
 80016b8:	4b07      	ldr	r3, [pc, #28]	@ (80016d8 <MX_FDCAN1_Init+0x84>)
 80016ba:	2201      	movs	r2, #1
 80016bc:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80016be:	4b06      	ldr	r3, [pc, #24]	@ (80016d8 <MX_FDCAN1_Init+0x84>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80016c4:	4804      	ldr	r0, [pc, #16]	@ (80016d8 <MX_FDCAN1_Init+0x84>)
 80016c6:	f004 fd4b 	bl	8006160 <HAL_FDCAN_Init>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 80016d0:	f000 f9a7 	bl	8001a22 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80016d4:	bf00      	nop
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	20000388 	.word	0x20000388
 80016dc:	40006400 	.word	0x40006400

080016e0 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b09a      	sub	sp, #104	@ 0x68
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	605a      	str	r2, [r3, #4]
 80016f2:	609a      	str	r2, [r3, #8]
 80016f4:	60da      	str	r2, [r3, #12]
 80016f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016f8:	f107 0310 	add.w	r3, r7, #16
 80016fc:	2244      	movs	r2, #68	@ 0x44
 80016fe:	2100      	movs	r1, #0
 8001700:	4618      	mov	r0, r3
 8001702:	f00e f821 	bl	800f748 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a20      	ldr	r2, [pc, #128]	@ (800178c <HAL_FDCAN_MspInit+0xac>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d139      	bne.n	8001784 <HAL_FDCAN_MspInit+0xa4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001710:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001714:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001716:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800171a:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800171c:	f107 0310 	add.w	r3, r7, #16
 8001720:	4618      	mov	r0, r3
 8001722:	f005 ff63 	bl	80075ec <HAL_RCCEx_PeriphCLKConfig>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 800172c:	f000 f979 	bl	8001a22 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001730:	4b17      	ldr	r3, [pc, #92]	@ (8001790 <HAL_FDCAN_MspInit+0xb0>)
 8001732:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001734:	4a16      	ldr	r2, [pc, #88]	@ (8001790 <HAL_FDCAN_MspInit+0xb0>)
 8001736:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800173a:	6593      	str	r3, [r2, #88]	@ 0x58
 800173c:	4b14      	ldr	r3, [pc, #80]	@ (8001790 <HAL_FDCAN_MspInit+0xb0>)
 800173e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001740:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001744:	60fb      	str	r3, [r7, #12]
 8001746:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001748:	4b11      	ldr	r3, [pc, #68]	@ (8001790 <HAL_FDCAN_MspInit+0xb0>)
 800174a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800174c:	4a10      	ldr	r2, [pc, #64]	@ (8001790 <HAL_FDCAN_MspInit+0xb0>)
 800174e:	f043 0301 	orr.w	r3, r3, #1
 8001752:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001754:	4b0e      	ldr	r3, [pc, #56]	@ (8001790 <HAL_FDCAN_MspInit+0xb0>)
 8001756:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001758:	f003 0301 	and.w	r3, r3, #1
 800175c:	60bb      	str	r3, [r7, #8]
 800175e:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001760:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001764:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001766:	2302      	movs	r3, #2
 8001768:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176a:	2300      	movs	r3, #0
 800176c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176e:	2300      	movs	r3, #0
 8001770:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001772:	2309      	movs	r3, #9
 8001774:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001776:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800177a:	4619      	mov	r1, r3
 800177c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001780:	f004 fe9e 	bl	80064c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8001784:	bf00      	nop
 8001786:	3768      	adds	r7, #104	@ 0x68
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	40006400 	.word	0x40006400
 8001790:	40021000 	.word	0x40021000

08001794 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b08a      	sub	sp, #40	@ 0x28
 8001798:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800179a:	f107 0314 	add.w	r3, r7, #20
 800179e:	2200      	movs	r2, #0
 80017a0:	601a      	str	r2, [r3, #0]
 80017a2:	605a      	str	r2, [r3, #4]
 80017a4:	609a      	str	r2, [r3, #8]
 80017a6:	60da      	str	r2, [r3, #12]
 80017a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017aa:	4b38      	ldr	r3, [pc, #224]	@ (800188c <MX_GPIO_Init+0xf8>)
 80017ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ae:	4a37      	ldr	r2, [pc, #220]	@ (800188c <MX_GPIO_Init+0xf8>)
 80017b0:	f043 0304 	orr.w	r3, r3, #4
 80017b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017b6:	4b35      	ldr	r3, [pc, #212]	@ (800188c <MX_GPIO_Init+0xf8>)
 80017b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ba:	f003 0304 	and.w	r3, r3, #4
 80017be:	613b      	str	r3, [r7, #16]
 80017c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80017c2:	4b32      	ldr	r3, [pc, #200]	@ (800188c <MX_GPIO_Init+0xf8>)
 80017c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017c6:	4a31      	ldr	r2, [pc, #196]	@ (800188c <MX_GPIO_Init+0xf8>)
 80017c8:	f043 0320 	orr.w	r3, r3, #32
 80017cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017ce:	4b2f      	ldr	r3, [pc, #188]	@ (800188c <MX_GPIO_Init+0xf8>)
 80017d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017d2:	f003 0320 	and.w	r3, r3, #32
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017da:	4b2c      	ldr	r3, [pc, #176]	@ (800188c <MX_GPIO_Init+0xf8>)
 80017dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017de:	4a2b      	ldr	r2, [pc, #172]	@ (800188c <MX_GPIO_Init+0xf8>)
 80017e0:	f043 0301 	orr.w	r3, r3, #1
 80017e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017e6:	4b29      	ldr	r3, [pc, #164]	@ (800188c <MX_GPIO_Init+0xf8>)
 80017e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	60bb      	str	r3, [r7, #8]
 80017f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017f2:	4b26      	ldr	r3, [pc, #152]	@ (800188c <MX_GPIO_Init+0xf8>)
 80017f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017f6:	4a25      	ldr	r2, [pc, #148]	@ (800188c <MX_GPIO_Init+0xf8>)
 80017f8:	f043 0302 	orr.w	r3, r3, #2
 80017fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017fe:	4b23      	ldr	r3, [pc, #140]	@ (800188c <MX_GPIO_Init+0xf8>)
 8001800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	607b      	str	r3, [r7, #4]
 8001808:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 800180a:	2201      	movs	r2, #1
 800180c:	2110      	movs	r1, #16
 800180e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001812:	f004 ffef 	bl	80067f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 8001816:	2200      	movs	r2, #0
 8001818:	2150      	movs	r1, #80	@ 0x50
 800181a:	481d      	ldr	r0, [pc, #116]	@ (8001890 <MX_GPIO_Init+0xfc>)
 800181c:	f004 ffea 	bl	80067f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_GPIO_Port, TEST_Pin, GPIO_PIN_RESET);
 8001820:	2200      	movs	r2, #0
 8001822:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001826:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800182a:	f004 ffe3 	bl	80067f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_10|GPIO_PIN_11;
 800182e:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8001832:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001834:	2300      	movs	r3, #0
 8001836:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001838:	2300      	movs	r3, #0
 800183a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800183c:	f107 0314 	add.w	r3, r7, #20
 8001840:	4619      	mov	r1, r3
 8001842:	4813      	ldr	r0, [pc, #76]	@ (8001890 <MX_GPIO_Init+0xfc>)
 8001844:	f004 fe3c 	bl	80064c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|TEST_Pin;
 8001848:	f248 0310 	movw	r3, #32784	@ 0x8010
 800184c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800184e:	2301      	movs	r3, #1
 8001850:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001852:	2300      	movs	r3, #0
 8001854:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001856:	2303      	movs	r3, #3
 8001858:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800185a:	f107 0314 	add.w	r3, r7, #20
 800185e:	4619      	mov	r1, r3
 8001860:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001864:	f004 fe2c 	bl	80064c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin;
 8001868:	2350      	movs	r3, #80	@ 0x50
 800186a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800186c:	2301      	movs	r3, #1
 800186e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001870:	2300      	movs	r3, #0
 8001872:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001874:	2300      	movs	r3, #0
 8001876:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001878:	f107 0314 	add.w	r3, r7, #20
 800187c:	4619      	mov	r1, r3
 800187e:	4804      	ldr	r0, [pc, #16]	@ (8001890 <MX_GPIO_Init+0xfc>)
 8001880:	f004 fe1e 	bl	80064c0 <HAL_GPIO_Init>

}
 8001884:	bf00      	nop
 8001886:	3728      	adds	r7, #40	@ 0x28
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	40021000 	.word	0x40021000
 8001890:	48000800 	.word	0x48000800

08001894 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001898:	f000 feeb 	bl	8002672 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800189c:	f000 f878 	bl	8001990 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018a0:	f7ff ff78 	bl	8001794 <MX_GPIO_Init>
  MX_DMA_Init();
 80018a4:	f7ff fea4 	bl	80015f0 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80018a8:	f000 fdb0 	bl	800240c <MX_USART3_UART_Init>
  MX_ADC1_Init();
 80018ac:	f7ff fbc2 	bl	8001034 <MX_ADC1_Init>
  MX_ADC2_Init();
 80018b0:	f7ff fc7a 	bl	80011a8 <MX_ADC2_Init>
  MX_OPAMP1_Init();
 80018b4:	f000 f8bc 	bl	8001a30 <MX_OPAMP1_Init>
  MX_OPAMP2_Init();
 80018b8:	f000 f8e2 	bl	8001a80 <MX_OPAMP2_Init>
  MX_OPAMP3_Init();
 80018bc:	f000 f908 	bl	8001ad0 <MX_OPAMP3_Init>
  MX_TIM1_Init();
 80018c0:	f000 fb88 	bl	8001fd4 <MX_TIM1_Init>
  MX_COMP1_Init();
 80018c4:	f7ff fdd8 	bl	8001478 <MX_COMP1_Init>
  MX_DAC3_Init();
 80018c8:	f7ff fe38 	bl	800153c <MX_DAC3_Init>
  MX_FDCAN1_Init();
 80018cc:	f7ff fec2 	bl	8001654 <MX_FDCAN1_Init>
  MX_TIM4_Init();
 80018d0:	f000 fc74 	bl	80021bc <MX_TIM4_Init>
  MX_SPI1_Init();
 80018d4:	f000 f99a 	bl	8001c0c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  appInit();
 80018d8:	f00a f928 	bl	800bb2c <appInit>
  HAL_OPAMP_Start(&hopamp1);
 80018dc:	4824      	ldr	r0, [pc, #144]	@ (8001970 <main+0xdc>)
 80018de:	f005 f871 	bl	80069c4 <HAL_OPAMP_Start>
  HAL_OPAMP_Start(&hopamp2);
 80018e2:	4824      	ldr	r0, [pc, #144]	@ (8001974 <main+0xe0>)
 80018e4:	f005 f86e 	bl	80069c4 <HAL_OPAMP_Start>
  HAL_OPAMP_Start(&hopamp3);
 80018e8:	4823      	ldr	r0, [pc, #140]	@ (8001978 <main+0xe4>)
 80018ea:	f005 f86b 	bl	80069c4 <HAL_OPAMP_Start>
  // HAL_UART_Receive_IT(&huart3, (uint8_t *)&aRxBuffer, 1);
  HAL_UARTEx_ReceiveToIdle_DMA(&huart3, rxBuffer, sizeof(rxBuffer));
 80018ee:	2264      	movs	r2, #100	@ 0x64
 80018f0:	4922      	ldr	r1, [pc, #136]	@ (800197c <main+0xe8>)
 80018f2:	4823      	ldr	r0, [pc, #140]	@ (8001980 <main+0xec>)
 80018f4:	f009 fefd 	bl	800b6f2 <HAL_UARTEx_ReceiveToIdle_DMA>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80018f8:	217f      	movs	r1, #127	@ 0x7f
 80018fa:	4822      	ldr	r0, [pc, #136]	@ (8001984 <main+0xf0>)
 80018fc:	f002 fc90 	bl	8004220 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8001900:	217f      	movs	r1, #127	@ 0x7f
 8001902:	4821      	ldr	r0, [pc, #132]	@ (8001988 <main+0xf4>)
 8001904:	f002 fc8c 	bl	8004220 <HAL_ADCEx_Calibration_Start>
  __HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_JEOC);
 8001908:	4b1e      	ldr	r3, [pc, #120]	@ (8001984 <main+0xf0>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	2220      	movs	r2, #32
 800190e:	601a      	str	r2, [r3, #0]
  __HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_EOC);
 8001910:	4b1c      	ldr	r3, [pc, #112]	@ (8001984 <main+0xf0>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2204      	movs	r2, #4
 8001916:	601a      	str	r2, [r3, #0]
  __HAL_ADC_CLEAR_FLAG(&hadc2, ADC_FLAG_JEOC);
 8001918:	4b1b      	ldr	r3, [pc, #108]	@ (8001988 <main+0xf4>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2220      	movs	r2, #32
 800191e:	601a      	str	r2, [r3, #0]
  HAL_ADCEx_InjectedStart_IT(&hadc1);
 8001920:	4818      	ldr	r0, [pc, #96]	@ (8001984 <main+0xf0>)
 8001922:	f002 fd8f 	bl	8004444 <HAL_ADCEx_InjectedStart_IT>
  HAL_ADCEx_InjectedStart(&hadc2);
 8001926:	4818      	ldr	r0, [pc, #96]	@ (8001988 <main+0xf4>)
 8001928:	f002 fcdc 	bl	80042e4 <HAL_ADCEx_InjectedStart>

  HAL_TIM_Base_Start(&htim1);
 800192c:	4817      	ldr	r0, [pc, #92]	@ (800198c <main+0xf8>)
 800192e:	f006 fce5 	bl	80082fc <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001932:	210c      	movs	r1, #12
 8001934:	4815      	ldr	r0, [pc, #84]	@ (800198c <main+0xf8>)
 8001936:	f006 fda5 	bl	8008484 <HAL_TIM_PWM_Start>
  // HAL_DAC_Start(&hdac3, DAC_CHANNEL_1);
  // //  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
  // HAL_COMP_Start(&hcomp1);
  // HAL_TIMEx_HallSensor_Start_IT(&htim4);
  // FDCAN_Config();
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800193a:	2100      	movs	r1, #0
 800193c:	4813      	ldr	r0, [pc, #76]	@ (800198c <main+0xf8>)
 800193e:	f006 fda1 	bl	8008484 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001942:	2104      	movs	r1, #4
 8001944:	4811      	ldr	r0, [pc, #68]	@ (800198c <main+0xf8>)
 8001946:	f006 fd9d 	bl	8008484 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800194a:	2108      	movs	r1, #8
 800194c:	480f      	ldr	r0, [pc, #60]	@ (800198c <main+0xf8>)
 800194e:	f006 fd99 	bl	8008484 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001952:	2100      	movs	r1, #0
 8001954:	480d      	ldr	r0, [pc, #52]	@ (800198c <main+0xf8>)
 8001956:	f007 fead 	bl	80096b4 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 800195a:	2104      	movs	r1, #4
 800195c:	480b      	ldr	r0, [pc, #44]	@ (800198c <main+0xf8>)
 800195e:	f007 fea9 	bl	80096b4 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8001962:	2108      	movs	r1, #8
 8001964:	4809      	ldr	r0, [pc, #36]	@ (800198c <main+0xf8>)
 8001966:	f007 fea5 	bl	80096b4 <HAL_TIMEx_PWMN_Start>
    //    HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData);
    //    HAL_Delay(10);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    userMain();
 800196a:	f00b fe65 	bl	800d638 <userMain>
 800196e:	e7fc      	b.n	800196a <main+0xd6>
 8001970:	200003ec 	.word	0x200003ec
 8001974:	20000428 	.word	0x20000428
 8001978:	20000464 	.word	0x20000464
 800197c:	2000089c 	.word	0x2000089c
 8001980:	200005a0 	.word	0x200005a0
 8001984:	20000274 	.word	0x20000274
 8001988:	200002e0 	.word	0x200002e0
 800198c:	20000508 	.word	0x20000508

08001990 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b094      	sub	sp, #80	@ 0x50
 8001994:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001996:	f107 0318 	add.w	r3, r7, #24
 800199a:	2238      	movs	r2, #56	@ 0x38
 800199c:	2100      	movs	r1, #0
 800199e:	4618      	mov	r0, r3
 80019a0:	f00d fed2 	bl	800f748 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019a4:	1d3b      	adds	r3, r7, #4
 80019a6:	2200      	movs	r2, #0
 80019a8:	601a      	str	r2, [r3, #0]
 80019aa:	605a      	str	r2, [r3, #4]
 80019ac:	609a      	str	r2, [r3, #8]
 80019ae:	60da      	str	r2, [r3, #12]
 80019b0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80019b2:	2000      	movs	r0, #0
 80019b4:	f005 f838 	bl	8006a28 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019b8:	2301      	movs	r3, #1
 80019ba:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019bc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80019c0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019c2:	2302      	movs	r3, #2
 80019c4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019c6:	2303      	movs	r3, #3
 80019c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV3;
 80019ca:	2303      	movs	r3, #3
 80019cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 40;
 80019ce:	2328      	movs	r3, #40	@ 0x28
 80019d0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019d2:	2302      	movs	r3, #2
 80019d4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80019d6:	2302      	movs	r3, #2
 80019d8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80019da:	2302      	movs	r3, #2
 80019dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019de:	f107 0318 	add.w	r3, r7, #24
 80019e2:	4618      	mov	r0, r3
 80019e4:	f005 f8d4 	bl	8006b90 <HAL_RCC_OscConfig>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80019ee:	f000 f818 	bl	8001a22 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80019f2:	230f      	movs	r3, #15
 80019f4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019f6:	2303      	movs	r3, #3
 80019f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019fa:	2300      	movs	r3, #0
 80019fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019fe:	2300      	movs	r3, #0
 8001a00:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a02:	2300      	movs	r3, #0
 8001a04:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001a06:	1d3b      	adds	r3, r7, #4
 8001a08:	2104      	movs	r1, #4
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f005 fbd2 	bl	80071b4 <HAL_RCC_ClockConfig>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001a16:	f000 f804 	bl	8001a22 <Error_Handler>
  }
}
 8001a1a:	bf00      	nop
 8001a1c:	3750      	adds	r7, #80	@ 0x50
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001a22:	b480      	push	{r7}
 8001a24:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a26:	b672      	cpsid	i
}
 8001a28:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a2a:	bf00      	nop
 8001a2c:	e7fd      	b.n	8001a2a <Error_Handler+0x8>
	...

08001a30 <MX_OPAMP1_Init>:
OPAMP_HandleTypeDef hopamp2;
OPAMP_HandleTypeDef hopamp3;

/* OPAMP1 init function */
void MX_OPAMP1_Init(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8001a34:	4b10      	ldr	r3, [pc, #64]	@ (8001a78 <MX_OPAMP1_Init+0x48>)
 8001a36:	4a11      	ldr	r2, [pc, #68]	@ (8001a7c <MX_OPAMP1_Init+0x4c>)
 8001a38:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8001a3a:	4b0f      	ldr	r3, [pc, #60]	@ (8001a78 <MX_OPAMP1_Init+0x48>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_STANDALONE_MODE;
 8001a40:	4b0d      	ldr	r3, [pc, #52]	@ (8001a78 <MX_OPAMP1_Init+0x48>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	609a      	str	r2, [r3, #8]
  hopamp1.Init.InvertingInput = OPAMP_INVERTINGINPUT_IO0;
 8001a46:	4b0c      	ldr	r3, [pc, #48]	@ (8001a78 <MX_OPAMP1_Init+0x48>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	60da      	str	r2, [r3, #12]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8001a4c:	4b0a      	ldr	r3, [pc, #40]	@ (8001a78 <MX_OPAMP1_Init+0x48>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = DISABLE;
 8001a52:	4b09      	ldr	r3, [pc, #36]	@ (8001a78 <MX_OPAMP1_Init+0x48>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001a58:	4b07      	ldr	r3, [pc, #28]	@ (8001a78 <MX_OPAMP1_Init+0x48>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	619a      	str	r2, [r3, #24]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001a5e:	4b06      	ldr	r3, [pc, #24]	@ (8001a78 <MX_OPAMP1_Init+0x48>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8001a64:	4804      	ldr	r0, [pc, #16]	@ (8001a78 <MX_OPAMP1_Init+0x48>)
 8001a66:	f004 fedd 	bl	8006824 <HAL_OPAMP_Init>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <MX_OPAMP1_Init+0x44>
  {
    Error_Handler();
 8001a70:	f7ff ffd7 	bl	8001a22 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 8001a74:	bf00      	nop
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	200003ec 	.word	0x200003ec
 8001a7c:	40010300 	.word	0x40010300

08001a80 <MX_OPAMP2_Init>:
/* OPAMP2 init function */
void MX_OPAMP2_Init(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP2_Init 0 */

  /* USER CODE BEGIN OPAMP2_Init 1 */

  /* USER CODE END OPAMP2_Init 1 */
  hopamp2.Instance = OPAMP2;
 8001a84:	4b10      	ldr	r3, [pc, #64]	@ (8001ac8 <MX_OPAMP2_Init+0x48>)
 8001a86:	4a11      	ldr	r2, [pc, #68]	@ (8001acc <MX_OPAMP2_Init+0x4c>)
 8001a88:	601a      	str	r2, [r3, #0]
  hopamp2.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8001a8a:	4b0f      	ldr	r3, [pc, #60]	@ (8001ac8 <MX_OPAMP2_Init+0x48>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	605a      	str	r2, [r3, #4]
  hopamp2.Init.Mode = OPAMP_STANDALONE_MODE;
 8001a90:	4b0d      	ldr	r3, [pc, #52]	@ (8001ac8 <MX_OPAMP2_Init+0x48>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	609a      	str	r2, [r3, #8]
  hopamp2.Init.InvertingInput = OPAMP_INVERTINGINPUT_IO0;
 8001a96:	4b0c      	ldr	r3, [pc, #48]	@ (8001ac8 <MX_OPAMP2_Init+0x48>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	60da      	str	r2, [r3, #12]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8001a9c:	4b0a      	ldr	r3, [pc, #40]	@ (8001ac8 <MX_OPAMP2_Init+0x48>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	611a      	str	r2, [r3, #16]
  hopamp2.Init.InternalOutput = DISABLE;
 8001aa2:	4b09      	ldr	r3, [pc, #36]	@ (8001ac8 <MX_OPAMP2_Init+0x48>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	751a      	strb	r2, [r3, #20]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001aa8:	4b07      	ldr	r3, [pc, #28]	@ (8001ac8 <MX_OPAMP2_Init+0x48>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	619a      	str	r2, [r3, #24]
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001aae:	4b06      	ldr	r3, [pc, #24]	@ (8001ac8 <MX_OPAMP2_Init+0x48>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 8001ab4:	4804      	ldr	r0, [pc, #16]	@ (8001ac8 <MX_OPAMP2_Init+0x48>)
 8001ab6:	f004 feb5 	bl	8006824 <HAL_OPAMP_Init>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <MX_OPAMP2_Init+0x44>
  {
    Error_Handler();
 8001ac0:	f7ff ffaf 	bl	8001a22 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP2_Init 2 */

  /* USER CODE END OPAMP2_Init 2 */

}
 8001ac4:	bf00      	nop
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	20000428 	.word	0x20000428
 8001acc:	40010304 	.word	0x40010304

08001ad0 <MX_OPAMP3_Init>:
/* OPAMP3 init function */
void MX_OPAMP3_Init(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP3_Init 0 */

  /* USER CODE BEGIN OPAMP3_Init 1 */

  /* USER CODE END OPAMP3_Init 1 */
  hopamp3.Instance = OPAMP3;
 8001ad4:	4b10      	ldr	r3, [pc, #64]	@ (8001b18 <MX_OPAMP3_Init+0x48>)
 8001ad6:	4a11      	ldr	r2, [pc, #68]	@ (8001b1c <MX_OPAMP3_Init+0x4c>)
 8001ad8:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8001ada:	4b0f      	ldr	r3, [pc, #60]	@ (8001b18 <MX_OPAMP3_Init+0x48>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_STANDALONE_MODE;
 8001ae0:	4b0d      	ldr	r3, [pc, #52]	@ (8001b18 <MX_OPAMP3_Init+0x48>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	609a      	str	r2, [r3, #8]
  hopamp3.Init.InvertingInput = OPAMP_INVERTINGINPUT_IO0;
 8001ae6:	4b0c      	ldr	r3, [pc, #48]	@ (8001b18 <MX_OPAMP3_Init+0x48>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	60da      	str	r2, [r3, #12]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8001aec:	4b0a      	ldr	r3, [pc, #40]	@ (8001b18 <MX_OPAMP3_Init+0x48>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = DISABLE;
 8001af2:	4b09      	ldr	r3, [pc, #36]	@ (8001b18 <MX_OPAMP3_Init+0x48>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001af8:	4b07      	ldr	r3, [pc, #28]	@ (8001b18 <MX_OPAMP3_Init+0x48>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	619a      	str	r2, [r3, #24]
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001afe:	4b06      	ldr	r3, [pc, #24]	@ (8001b18 <MX_OPAMP3_Init+0x48>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 8001b04:	4804      	ldr	r0, [pc, #16]	@ (8001b18 <MX_OPAMP3_Init+0x48>)
 8001b06:	f004 fe8d 	bl	8006824 <HAL_OPAMP_Init>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <MX_OPAMP3_Init+0x44>
  {
    Error_Handler();
 8001b10:	f7ff ff87 	bl	8001a22 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP3_Init 2 */

  /* USER CODE END OPAMP3_Init 2 */

}
 8001b14:	bf00      	nop
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	20000464 	.word	0x20000464
 8001b1c:	40010308 	.word	0x40010308

08001b20 <HAL_OPAMP_MspInit>:

void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* opampHandle)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b08a      	sub	sp, #40	@ 0x28
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b28:	f107 0314 	add.w	r3, r7, #20
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	605a      	str	r2, [r3, #4]
 8001b32:	609a      	str	r2, [r3, #8]
 8001b34:	60da      	str	r2, [r3, #12]
 8001b36:	611a      	str	r2, [r3, #16]
  if(opampHandle->Instance==OPAMP1)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a2e      	ldr	r2, [pc, #184]	@ (8001bf8 <HAL_OPAMP_MspInit+0xd8>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d119      	bne.n	8001b76 <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b42:	4b2e      	ldr	r3, [pc, #184]	@ (8001bfc <HAL_OPAMP_MspInit+0xdc>)
 8001b44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b46:	4a2d      	ldr	r2, [pc, #180]	@ (8001bfc <HAL_OPAMP_MspInit+0xdc>)
 8001b48:	f043 0301 	orr.w	r3, r3, #1
 8001b4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b4e:	4b2b      	ldr	r3, [pc, #172]	@ (8001bfc <HAL_OPAMP_MspInit+0xdc>)
 8001b50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	613b      	str	r3, [r7, #16]
 8001b58:	693b      	ldr	r3, [r7, #16]
    /**OPAMP1 GPIO Configuration
    PA1     ------> OPAMP1_VINP
    PA2     ------> OPAMP1_VOUT
    PA3     ------> OPAMP1_VINM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001b5a:	230e      	movs	r3, #14
 8001b5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b62:	2300      	movs	r3, #0
 8001b64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b66:	f107 0314 	add.w	r3, r7, #20
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b70:	f004 fca6 	bl	80064c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN OPAMP3_MspInit 1 */

  /* USER CODE END OPAMP3_MspInit 1 */
  }
}
 8001b74:	e03b      	b.n	8001bee <HAL_OPAMP_MspInit+0xce>
  else if(opampHandle->Instance==OPAMP2)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a21      	ldr	r2, [pc, #132]	@ (8001c00 <HAL_OPAMP_MspInit+0xe0>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d119      	bne.n	8001bb4 <HAL_OPAMP_MspInit+0x94>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b80:	4b1e      	ldr	r3, [pc, #120]	@ (8001bfc <HAL_OPAMP_MspInit+0xdc>)
 8001b82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b84:	4a1d      	ldr	r2, [pc, #116]	@ (8001bfc <HAL_OPAMP_MspInit+0xdc>)
 8001b86:	f043 0301 	orr.w	r3, r3, #1
 8001b8a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b8c:	4b1b      	ldr	r3, [pc, #108]	@ (8001bfc <HAL_OPAMP_MspInit+0xdc>)
 8001b8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b90:	f003 0301 	and.w	r3, r3, #1
 8001b94:	60fb      	str	r3, [r7, #12]
 8001b96:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001b98:	23e0      	movs	r3, #224	@ 0xe0
 8001b9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ba4:	f107 0314 	add.w	r3, r7, #20
 8001ba8:	4619      	mov	r1, r3
 8001baa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bae:	f004 fc87 	bl	80064c0 <HAL_GPIO_Init>
}
 8001bb2:	e01c      	b.n	8001bee <HAL_OPAMP_MspInit+0xce>
  else if(opampHandle->Instance==OPAMP3)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a12      	ldr	r2, [pc, #72]	@ (8001c04 <HAL_OPAMP_MspInit+0xe4>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d117      	bne.n	8001bee <HAL_OPAMP_MspInit+0xce>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bbe:	4b0f      	ldr	r3, [pc, #60]	@ (8001bfc <HAL_OPAMP_MspInit+0xdc>)
 8001bc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bc2:	4a0e      	ldr	r2, [pc, #56]	@ (8001bfc <HAL_OPAMP_MspInit+0xdc>)
 8001bc4:	f043 0302 	orr.w	r3, r3, #2
 8001bc8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bca:	4b0c      	ldr	r3, [pc, #48]	@ (8001bfc <HAL_OPAMP_MspInit+0xdc>)
 8001bcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bce:	f003 0302 	and.w	r3, r3, #2
 8001bd2:	60bb      	str	r3, [r7, #8]
 8001bd4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001bd6:	2307      	movs	r3, #7
 8001bd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bde:	2300      	movs	r3, #0
 8001be0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001be2:	f107 0314 	add.w	r3, r7, #20
 8001be6:	4619      	mov	r1, r3
 8001be8:	4807      	ldr	r0, [pc, #28]	@ (8001c08 <HAL_OPAMP_MspInit+0xe8>)
 8001bea:	f004 fc69 	bl	80064c0 <HAL_GPIO_Init>
}
 8001bee:	bf00      	nop
 8001bf0:	3728      	adds	r7, #40	@ 0x28
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	40010300 	.word	0x40010300
 8001bfc:	40021000 	.word	0x40021000
 8001c00:	40010304 	.word	0x40010304
 8001c04:	40010308 	.word	0x40010308
 8001c08:	48000400 	.word	0x48000400

08001c0c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001c10:	4b1b      	ldr	r3, [pc, #108]	@ (8001c80 <MX_SPI1_Init+0x74>)
 8001c12:	4a1c      	ldr	r2, [pc, #112]	@ (8001c84 <MX_SPI1_Init+0x78>)
 8001c14:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c16:	4b1a      	ldr	r3, [pc, #104]	@ (8001c80 <MX_SPI1_Init+0x74>)
 8001c18:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001c1c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c1e:	4b18      	ldr	r3, [pc, #96]	@ (8001c80 <MX_SPI1_Init+0x74>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001c24:	4b16      	ldr	r3, [pc, #88]	@ (8001c80 <MX_SPI1_Init+0x74>)
 8001c26:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 8001c2a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c2c:	4b14      	ldr	r3, [pc, #80]	@ (8001c80 <MX_SPI1_Init+0x74>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001c32:	4b13      	ldr	r3, [pc, #76]	@ (8001c80 <MX_SPI1_Init+0x74>)
 8001c34:	2201      	movs	r2, #1
 8001c36:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c38:	4b11      	ldr	r3, [pc, #68]	@ (8001c80 <MX_SPI1_Init+0x74>)
 8001c3a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c3e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001c40:	4b0f      	ldr	r3, [pc, #60]	@ (8001c80 <MX_SPI1_Init+0x74>)
 8001c42:	2218      	movs	r2, #24
 8001c44:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c46:	4b0e      	ldr	r3, [pc, #56]	@ (8001c80 <MX_SPI1_Init+0x74>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c80 <MX_SPI1_Init+0x74>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c52:	4b0b      	ldr	r3, [pc, #44]	@ (8001c80 <MX_SPI1_Init+0x74>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001c58:	4b09      	ldr	r3, [pc, #36]	@ (8001c80 <MX_SPI1_Init+0x74>)
 8001c5a:	2207      	movs	r2, #7
 8001c5c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001c5e:	4b08      	ldr	r3, [pc, #32]	@ (8001c80 <MX_SPI1_Init+0x74>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001c64:	4b06      	ldr	r3, [pc, #24]	@ (8001c80 <MX_SPI1_Init+0x74>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001c6a:	4805      	ldr	r0, [pc, #20]	@ (8001c80 <MX_SPI1_Init+0x74>)
 8001c6c:	f005 feae 	bl	80079cc <HAL_SPI_Init>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001c76:	f7ff fed4 	bl	8001a22 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001c7a:	bf00      	nop
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	200004a0 	.word	0x200004a0
 8001c84:	40013000 	.word	0x40013000

08001c88 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b08a      	sub	sp, #40	@ 0x28
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c90:	f107 0314 	add.w	r3, r7, #20
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	605a      	str	r2, [r3, #4]
 8001c9a:	609a      	str	r2, [r3, #8]
 8001c9c:	60da      	str	r2, [r3, #12]
 8001c9e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a17      	ldr	r2, [pc, #92]	@ (8001d04 <HAL_SPI_MspInit+0x7c>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d127      	bne.n	8001cfa <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001caa:	4b17      	ldr	r3, [pc, #92]	@ (8001d08 <HAL_SPI_MspInit+0x80>)
 8001cac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cae:	4a16      	ldr	r2, [pc, #88]	@ (8001d08 <HAL_SPI_MspInit+0x80>)
 8001cb0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001cb4:	6613      	str	r3, [r2, #96]	@ 0x60
 8001cb6:	4b14      	ldr	r3, [pc, #80]	@ (8001d08 <HAL_SPI_MspInit+0x80>)
 8001cb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001cbe:	613b      	str	r3, [r7, #16]
 8001cc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cc2:	4b11      	ldr	r3, [pc, #68]	@ (8001d08 <HAL_SPI_MspInit+0x80>)
 8001cc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cc6:	4a10      	ldr	r2, [pc, #64]	@ (8001d08 <HAL_SPI_MspInit+0x80>)
 8001cc8:	f043 0302 	orr.w	r3, r3, #2
 8001ccc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cce:	4b0e      	ldr	r3, [pc, #56]	@ (8001d08 <HAL_SPI_MspInit+0x80>)
 8001cd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	60fb      	str	r3, [r7, #12]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001cda:	2338      	movs	r3, #56	@ 0x38
 8001cdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cde:	2302      	movs	r3, #2
 8001ce0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001cea:	2305      	movs	r3, #5
 8001cec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cee:	f107 0314 	add.w	r3, r7, #20
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	4805      	ldr	r0, [pc, #20]	@ (8001d0c <HAL_SPI_MspInit+0x84>)
 8001cf6:	f004 fbe3 	bl	80064c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001cfa:	bf00      	nop
 8001cfc:	3728      	adds	r7, #40	@ 0x28
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	40013000 	.word	0x40013000
 8001d08:	40021000 	.word	0x40021000
 8001d0c:	48000400 	.word	0x48000400

08001d10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d16:	4b0f      	ldr	r3, [pc, #60]	@ (8001d54 <HAL_MspInit+0x44>)
 8001d18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d1a:	4a0e      	ldr	r2, [pc, #56]	@ (8001d54 <HAL_MspInit+0x44>)
 8001d1c:	f043 0301 	orr.w	r3, r3, #1
 8001d20:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d22:	4b0c      	ldr	r3, [pc, #48]	@ (8001d54 <HAL_MspInit+0x44>)
 8001d24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	607b      	str	r3, [r7, #4]
 8001d2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d2e:	4b09      	ldr	r3, [pc, #36]	@ (8001d54 <HAL_MspInit+0x44>)
 8001d30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d32:	4a08      	ldr	r2, [pc, #32]	@ (8001d54 <HAL_MspInit+0x44>)
 8001d34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d38:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d3a:	4b06      	ldr	r3, [pc, #24]	@ (8001d54 <HAL_MspInit+0x44>)
 8001d3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d42:	603b      	str	r3, [r7, #0]
 8001d44:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001d46:	f004 ff13 	bl	8006b70 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d4a:	bf00      	nop
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	40021000 	.word	0x40021000

08001d58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d5c:	bf00      	nop
 8001d5e:	e7fd      	b.n	8001d5c <NMI_Handler+0x4>

08001d60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d64:	bf00      	nop
 8001d66:	e7fd      	b.n	8001d64 <HardFault_Handler+0x4>

08001d68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d6c:	bf00      	nop
 8001d6e:	e7fd      	b.n	8001d6c <MemManage_Handler+0x4>

08001d70 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d74:	bf00      	nop
 8001d76:	e7fd      	b.n	8001d74 <BusFault_Handler+0x4>

08001d78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d7c:	bf00      	nop
 8001d7e:	e7fd      	b.n	8001d7c <UsageFault_Handler+0x4>

08001d80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d84:	bf00      	nop
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr

08001d8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d92:	bf00      	nop
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001da0:	bf00      	nop
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr

08001daa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dae:	f000 fcb3 	bl	8002718 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001db2:	bf00      	nop
 8001db4:	bd80      	pop	{r7, pc}
	...

08001db8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001dbc:	4802      	ldr	r0, [pc, #8]	@ (8001dc8 <DMA1_Channel1_IRQHandler+0x10>)
 8001dbe:	f004 f880 	bl	8005ec2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001dc2:	bf00      	nop
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	20000634 	.word	0x20000634

08001dcc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001dd0:	4802      	ldr	r0, [pc, #8]	@ (8001ddc <DMA1_Channel2_IRQHandler+0x10>)
 8001dd2:	f004 f876 	bl	8005ec2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001dd6:	bf00      	nop
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	20000694 	.word	0x20000694

08001de0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001de4:	4803      	ldr	r0, [pc, #12]	@ (8001df4 <ADC1_2_IRQHandler+0x14>)
 8001de6:	f001 f969 	bl	80030bc <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001dea:	4803      	ldr	r0, [pc, #12]	@ (8001df8 <ADC1_2_IRQHandler+0x18>)
 8001dec:	f001 f966 	bl	80030bc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001df0:	bf00      	nop
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	20000274 	.word	0x20000274
 8001df8:	200002e0 	.word	0x200002e0

08001dfc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001e00:	4802      	ldr	r0, [pc, #8]	@ (8001e0c <USART3_IRQHandler+0x10>)
 8001e02:	f008 f8d3 	bl	8009fac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001e06:	bf00      	nop
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	200005a0 	.word	0x200005a0

08001e10 <COMP1_2_3_IRQHandler>:

/**
  * @brief This function handles COMP1, COMP2 and COMP3 interrupts through EXTI lines 21, 22 and 29.
  */
void COMP1_2_3_IRQHandler(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP1_2_3_IRQn 0 */

  /* USER CODE END COMP1_2_3_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp1);
 8001e14:	4802      	ldr	r0, [pc, #8]	@ (8001e20 <COMP1_2_3_IRQHandler+0x10>)
 8001e16:	f003 fb41 	bl	800549c <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP1_2_3_IRQn 1 */

  /* USER CODE END COMP1_2_3_IRQn 1 */
}
 8001e1a:	bf00      	nop
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	20000350 	.word	0x20000350

08001e24 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  return 1;
 8001e28:	2301      	movs	r3, #1
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <_kill>:

int _kill(int pid, int sig)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e3e:	f00d fce7 	bl	800f810 <__errno>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2216      	movs	r2, #22
 8001e46:	601a      	str	r2, [r3, #0]
  return -1;
 8001e48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3708      	adds	r7, #8
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <_exit>:

void _exit (int status)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f7ff ffe7 	bl	8001e34 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e66:	bf00      	nop
 8001e68:	e7fd      	b.n	8001e66 <_exit+0x12>

08001e6a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b086      	sub	sp, #24
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	60f8      	str	r0, [r7, #12]
 8001e72:	60b9      	str	r1, [r7, #8]
 8001e74:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e76:	2300      	movs	r3, #0
 8001e78:	617b      	str	r3, [r7, #20]
 8001e7a:	e00a      	b.n	8001e92 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e7c:	f3af 8000 	nop.w
 8001e80:	4601      	mov	r1, r0
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	1c5a      	adds	r2, r3, #1
 8001e86:	60ba      	str	r2, [r7, #8]
 8001e88:	b2ca      	uxtb	r2, r1
 8001e8a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	3301      	adds	r3, #1
 8001e90:	617b      	str	r3, [r7, #20]
 8001e92:	697a      	ldr	r2, [r7, #20]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	dbf0      	blt.n	8001e7c <_read+0x12>
  }

  return len;
 8001e9a:	687b      	ldr	r3, [r7, #4]
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3718      	adds	r7, #24
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b086      	sub	sp, #24
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	60b9      	str	r1, [r7, #8]
 8001eae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	617b      	str	r3, [r7, #20]
 8001eb4:	e009      	b.n	8001eca <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	1c5a      	adds	r2, r3, #1
 8001eba:	60ba      	str	r2, [r7, #8]
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	617b      	str	r3, [r7, #20]
 8001eca:	697a      	ldr	r2, [r7, #20]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	dbf1      	blt.n	8001eb6 <_write+0x12>
  }
  return len;
 8001ed2:	687b      	ldr	r3, [r7, #4]
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3718      	adds	r7, #24
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <_close>:

int _close(int file)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ee4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f04:	605a      	str	r2, [r3, #4]
  return 0;
 8001f06:	2300      	movs	r3, #0
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <_isatty>:

int _isatty(int file)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f1c:	2301      	movs	r3, #1
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr

08001f2a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	b085      	sub	sp, #20
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	60f8      	str	r0, [r7, #12]
 8001f32:	60b9      	str	r1, [r7, #8]
 8001f34:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f36:	2300      	movs	r3, #0
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3714      	adds	r7, #20
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b086      	sub	sp, #24
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f4c:	4a14      	ldr	r2, [pc, #80]	@ (8001fa0 <_sbrk+0x5c>)
 8001f4e:	4b15      	ldr	r3, [pc, #84]	@ (8001fa4 <_sbrk+0x60>)
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f58:	4b13      	ldr	r3, [pc, #76]	@ (8001fa8 <_sbrk+0x64>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d102      	bne.n	8001f66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f60:	4b11      	ldr	r3, [pc, #68]	@ (8001fa8 <_sbrk+0x64>)
 8001f62:	4a12      	ldr	r2, [pc, #72]	@ (8001fac <_sbrk+0x68>)
 8001f64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f66:	4b10      	ldr	r3, [pc, #64]	@ (8001fa8 <_sbrk+0x64>)
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	693a      	ldr	r2, [r7, #16]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d207      	bcs.n	8001f84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f74:	f00d fc4c 	bl	800f810 <__errno>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	220c      	movs	r2, #12
 8001f7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f82:	e009      	b.n	8001f98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f84:	4b08      	ldr	r3, [pc, #32]	@ (8001fa8 <_sbrk+0x64>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f8a:	4b07      	ldr	r3, [pc, #28]	@ (8001fa8 <_sbrk+0x64>)
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4413      	add	r3, r2
 8001f92:	4a05      	ldr	r2, [pc, #20]	@ (8001fa8 <_sbrk+0x64>)
 8001f94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f96:	68fb      	ldr	r3, [r7, #12]
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3718      	adds	r7, #24
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	20008000 	.word	0x20008000
 8001fa4:	00000400 	.word	0x00000400
 8001fa8:	20000504 	.word	0x20000504
 8001fac:	20000ac8 	.word	0x20000ac8

08001fb0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001fb4:	4b06      	ldr	r3, [pc, #24]	@ (8001fd0 <SystemInit+0x20>)
 8001fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fba:	4a05      	ldr	r2, [pc, #20]	@ (8001fd0 <SystemInit+0x20>)
 8001fbc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001fc0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fc4:	bf00      	nop
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	e000ed00 	.word	0xe000ed00

08001fd4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b09e      	sub	sp, #120	@ 0x78
 8001fd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fda:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001fde:	2200      	movs	r2, #0
 8001fe0:	601a      	str	r2, [r3, #0]
 8001fe2:	605a      	str	r2, [r3, #4]
 8001fe4:	609a      	str	r2, [r3, #8]
 8001fe6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fe8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001fec:	2200      	movs	r2, #0
 8001fee:	601a      	str	r2, [r3, #0]
 8001ff0:	605a      	str	r2, [r3, #4]
 8001ff2:	609a      	str	r2, [r3, #8]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8001ff4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]
 8001ffc:	605a      	str	r2, [r3, #4]
 8001ffe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002000:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]
 8002008:	605a      	str	r2, [r3, #4]
 800200a:	609a      	str	r2, [r3, #8]
 800200c:	60da      	str	r2, [r3, #12]
 800200e:	611a      	str	r2, [r3, #16]
 8002010:	615a      	str	r2, [r3, #20]
 8002012:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002014:	463b      	mov	r3, r7
 8002016:	2234      	movs	r2, #52	@ 0x34
 8002018:	2100      	movs	r1, #0
 800201a:	4618      	mov	r0, r3
 800201c:	f00d fb94 	bl	800f748 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002020:	4b64      	ldr	r3, [pc, #400]	@ (80021b4 <MX_TIM1_Init+0x1e0>)
 8002022:	4a65      	ldr	r2, [pc, #404]	@ (80021b8 <MX_TIM1_Init+0x1e4>)
 8002024:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1-1;
 8002026:	4b63      	ldr	r3, [pc, #396]	@ (80021b4 <MX_TIM1_Init+0x1e0>)
 8002028:	2200      	movs	r2, #0
 800202a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800202c:	4b61      	ldr	r3, [pc, #388]	@ (80021b4 <MX_TIM1_Init+0x1e0>)
 800202e:	2220      	movs	r2, #32
 8002030:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7999;
 8002032:	4b60      	ldr	r3, [pc, #384]	@ (80021b4 <MX_TIM1_Init+0x1e0>)
 8002034:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8002038:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 800203a:	4b5e      	ldr	r3, [pc, #376]	@ (80021b4 <MX_TIM1_Init+0x1e0>)
 800203c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002040:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 8002042:	4b5c      	ldr	r3, [pc, #368]	@ (80021b4 <MX_TIM1_Init+0x1e0>)
 8002044:	2201      	movs	r2, #1
 8002046:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002048:	4b5a      	ldr	r3, [pc, #360]	@ (80021b4 <MX_TIM1_Init+0x1e0>)
 800204a:	2200      	movs	r2, #0
 800204c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800204e:	4859      	ldr	r0, [pc, #356]	@ (80021b4 <MX_TIM1_Init+0x1e0>)
 8002050:	f006 f8fc 	bl	800824c <HAL_TIM_Base_Init>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800205a:	f7ff fce2 	bl	8001a22 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800205e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002062:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002064:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002068:	4619      	mov	r1, r3
 800206a:	4852      	ldr	r0, [pc, #328]	@ (80021b4 <MX_TIM1_Init+0x1e0>)
 800206c:	f006 fcb4 	bl	80089d8 <HAL_TIM_ConfigClockSource>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002076:	f7ff fcd4 	bl	8001a22 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800207a:	484e      	ldr	r0, [pc, #312]	@ (80021b4 <MX_TIM1_Init+0x1e0>)
 800207c:	f006 f9a0 	bl	80083c0 <HAL_TIM_PWM_Init>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8002086:	f7ff fccc 	bl	8001a22 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 800208a:	2370      	movs	r3, #112	@ 0x70
 800208c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800208e:	2300      	movs	r3, #0
 8002090:	663b      	str	r3, [r7, #96]	@ 0x60
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002092:	2300      	movs	r3, #0
 8002094:	667b      	str	r3, [r7, #100]	@ 0x64
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002096:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800209a:	4619      	mov	r1, r3
 800209c:	4845      	ldr	r0, [pc, #276]	@ (80021b4 <MX_TIM1_Init+0x1e0>)
 800209e:	f007 fc1b 	bl	80098d8 <HAL_TIMEx_MasterConfigSynchronization>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d001      	beq.n	80020ac <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 80020a8:	f7ff fcbb 	bl	8001a22 <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP1;
 80020ac:	2302      	movs	r3, #2
 80020ae:	653b      	str	r3, [r7, #80]	@ 0x50
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 80020b0:	2301      	movs	r3, #1
 80020b2:	657b      	str	r3, [r7, #84]	@ 0x54
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 80020b4:	2300      	movs	r3, #0
 80020b6:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 80020b8:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80020bc:	461a      	mov	r2, r3
 80020be:	2101      	movs	r1, #1
 80020c0:	483c      	ldr	r0, [pc, #240]	@ (80021b4 <MX_TIM1_Init+0x1e0>)
 80020c2:	f007 fd17 	bl	8009af4 <HAL_TIMEx_ConfigBreakInput>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80020cc:	f7ff fca9 	bl	8001a22 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020d0:	2360      	movs	r3, #96	@ 0x60
 80020d2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 80020d4:	2300      	movs	r3, #0
 80020d6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020d8:	2300      	movs	r3, #0
 80020da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80020dc:	2300      	movs	r3, #0
 80020de:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020e0:	2300      	movs	r3, #0
 80020e2:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80020e4:	2300      	movs	r3, #0
 80020e6:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80020e8:	2300      	movs	r3, #0
 80020ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020ec:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80020f0:	2200      	movs	r2, #0
 80020f2:	4619      	mov	r1, r3
 80020f4:	482f      	ldr	r0, [pc, #188]	@ (80021b4 <MX_TIM1_Init+0x1e0>)
 80020f6:	f006 fb5b 	bl	80087b0 <HAL_TIM_PWM_ConfigChannel>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 8002100:	f7ff fc8f 	bl	8001a22 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002104:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002108:	2204      	movs	r2, #4
 800210a:	4619      	mov	r1, r3
 800210c:	4829      	ldr	r0, [pc, #164]	@ (80021b4 <MX_TIM1_Init+0x1e0>)
 800210e:	f006 fb4f 	bl	80087b0 <HAL_TIM_PWM_ConfigChannel>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d001      	beq.n	800211c <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 8002118:	f7ff fc83 	bl	8001a22 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800211c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002120:	2208      	movs	r2, #8
 8002122:	4619      	mov	r1, r3
 8002124:	4823      	ldr	r0, [pc, #140]	@ (80021b4 <MX_TIM1_Init+0x1e0>)
 8002126:	f006 fb43 	bl	80087b0 <HAL_TIM_PWM_ConfigChannel>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d001      	beq.n	8002134 <MX_TIM1_Init+0x160>
  {
    Error_Handler();
 8002130:	f7ff fc77 	bl	8001a22 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8002134:	2370      	movs	r3, #112	@ 0x70
 8002136:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 7998;
 8002138:	f641 733e 	movw	r3, #7998	@ 0x1f3e
 800213c:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800213e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002142:	220c      	movs	r2, #12
 8002144:	4619      	mov	r1, r3
 8002146:	481b      	ldr	r0, [pc, #108]	@ (80021b4 <MX_TIM1_Init+0x1e0>)
 8002148:	f006 fb32 	bl	80087b0 <HAL_TIM_PWM_ConfigChannel>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <MX_TIM1_Init+0x182>
  {
    Error_Handler();
 8002152:	f7ff fc66 	bl	8001a22 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002156:	2300      	movs	r3, #0
 8002158:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800215a:	2300      	movs	r3, #0
 800215c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800215e:	2300      	movs	r3, #0
 8002160:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 120;
 8002162:	2378      	movs	r3, #120	@ 0x78
 8002164:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8002166:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800216a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800216c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002170:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 2;
 8002172:	2302      	movs	r3, #2
 8002174:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002176:	2300      	movs	r3, #0
 8002178:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800217a:	2300      	movs	r3, #0
 800217c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800217e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002182:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002184:	2300      	movs	r3, #0
 8002186:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002188:	2300      	movs	r3, #0
 800218a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800218c:	2300      	movs	r3, #0
 800218e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002190:	463b      	mov	r3, r7
 8002192:	4619      	mov	r1, r3
 8002194:	4807      	ldr	r0, [pc, #28]	@ (80021b4 <MX_TIM1_Init+0x1e0>)
 8002196:	f007 fc21 	bl	80099dc <HAL_TIMEx_ConfigBreakDeadTime>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d001      	beq.n	80021a4 <MX_TIM1_Init+0x1d0>
  {
    Error_Handler();
 80021a0:	f7ff fc3f 	bl	8001a22 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80021a4:	4803      	ldr	r0, [pc, #12]	@ (80021b4 <MX_TIM1_Init+0x1e0>)
 80021a6:	f000 f8c9 	bl	800233c <HAL_TIM_MspPostInit>

}
 80021aa:	bf00      	nop
 80021ac:	3778      	adds	r7, #120	@ 0x78
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	20000508 	.word	0x20000508
 80021b8:	40012c00 	.word	0x40012c00

080021bc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b08c      	sub	sp, #48	@ 0x30
 80021c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021c2:	f107 0320 	add.w	r3, r7, #32
 80021c6:	2200      	movs	r2, #0
 80021c8:	601a      	str	r2, [r3, #0]
 80021ca:	605a      	str	r2, [r3, #4]
 80021cc:	609a      	str	r2, [r3, #8]
 80021ce:	60da      	str	r2, [r3, #12]
  TIM_HallSensor_InitTypeDef sConfig = {0};
 80021d0:	f107 0310 	add.w	r3, r7, #16
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]
 80021d8:	605a      	str	r2, [r3, #4]
 80021da:	609a      	str	r2, [r3, #8]
 80021dc:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021de:	1d3b      	adds	r3, r7, #4
 80021e0:	2200      	movs	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]
 80021e4:	605a      	str	r2, [r3, #4]
 80021e6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80021e8:	4b26      	ldr	r3, [pc, #152]	@ (8002284 <MX_TIM4_Init+0xc8>)
 80021ea:	4a27      	ldr	r2, [pc, #156]	@ (8002288 <MX_TIM4_Init+0xcc>)
 80021ec:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16-1;
 80021ee:	4b25      	ldr	r3, [pc, #148]	@ (8002284 <MX_TIM4_Init+0xc8>)
 80021f0:	220f      	movs	r2, #15
 80021f2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021f4:	4b23      	ldr	r3, [pc, #140]	@ (8002284 <MX_TIM4_Init+0xc8>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80021fa:	4b22      	ldr	r3, [pc, #136]	@ (8002284 <MX_TIM4_Init+0xc8>)
 80021fc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002200:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002202:	4b20      	ldr	r3, [pc, #128]	@ (8002284 <MX_TIM4_Init+0xc8>)
 8002204:	2200      	movs	r2, #0
 8002206:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002208:	4b1e      	ldr	r3, [pc, #120]	@ (8002284 <MX_TIM4_Init+0xc8>)
 800220a:	2200      	movs	r2, #0
 800220c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800220e:	481d      	ldr	r0, [pc, #116]	@ (8002284 <MX_TIM4_Init+0xc8>)
 8002210:	f006 f81c 	bl	800824c <HAL_TIM_Base_Init>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 800221a:	f7ff fc02 	bl	8001a22 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800221e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002222:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002224:	f107 0320 	add.w	r3, r7, #32
 8002228:	4619      	mov	r1, r3
 800222a:	4816      	ldr	r0, [pc, #88]	@ (8002284 <MX_TIM4_Init+0xc8>)
 800222c:	f006 fbd4 	bl	80089d8 <HAL_TIM_ConfigClockSource>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8002236:	f7ff fbf4 	bl	8001a22 <Error_Handler>
  }
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800223a:	2300      	movs	r3, #0
 800223c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800223e:	2300      	movs	r3, #0
 8002240:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 10;
 8002242:	230a      	movs	r3, #10
 8002244:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 5;
 8002246:	2305      	movs	r3, #5
 8002248:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim4, &sConfig) != HAL_OK)
 800224a:	f107 0310 	add.w	r3, r7, #16
 800224e:	4619      	mov	r1, r3
 8002250:	480c      	ldr	r0, [pc, #48]	@ (8002284 <MX_TIM4_Init+0xc8>)
 8002252:	f007 f976 	bl	8009542 <HAL_TIMEx_HallSensor_Init>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d001      	beq.n	8002260 <MX_TIM4_Init+0xa4>
  {
    Error_Handler();
 800225c:	f7ff fbe1 	bl	8001a22 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8002260:	2350      	movs	r3, #80	@ 0x50
 8002262:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002264:	2300      	movs	r3, #0
 8002266:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002268:	1d3b      	adds	r3, r7, #4
 800226a:	4619      	mov	r1, r3
 800226c:	4805      	ldr	r0, [pc, #20]	@ (8002284 <MX_TIM4_Init+0xc8>)
 800226e:	f007 fb33 	bl	80098d8 <HAL_TIMEx_MasterConfigSynchronization>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d001      	beq.n	800227c <MX_TIM4_Init+0xc0>
  {
    Error_Handler();
 8002278:	f7ff fbd3 	bl	8001a22 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800227c:	bf00      	nop
 800227e:	3730      	adds	r7, #48	@ 0x30
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	20000554 	.word	0x20000554
 8002288:	40000800 	.word	0x40000800

0800228c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b08a      	sub	sp, #40	@ 0x28
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002294:	f107 0314 	add.w	r3, r7, #20
 8002298:	2200      	movs	r2, #0
 800229a:	601a      	str	r2, [r3, #0]
 800229c:	605a      	str	r2, [r3, #4]
 800229e:	609a      	str	r2, [r3, #8]
 80022a0:	60da      	str	r2, [r3, #12]
 80022a2:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a20      	ldr	r2, [pc, #128]	@ (800232c <HAL_TIM_Base_MspInit+0xa0>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d10c      	bne.n	80022c8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80022ae:	4b20      	ldr	r3, [pc, #128]	@ (8002330 <HAL_TIM_Base_MspInit+0xa4>)
 80022b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022b2:	4a1f      	ldr	r2, [pc, #124]	@ (8002330 <HAL_TIM_Base_MspInit+0xa4>)
 80022b4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80022b8:	6613      	str	r3, [r2, #96]	@ 0x60
 80022ba:	4b1d      	ldr	r3, [pc, #116]	@ (8002330 <HAL_TIM_Base_MspInit+0xa4>)
 80022bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80022c2:	613b      	str	r3, [r7, #16]
 80022c4:	693b      	ldr	r3, [r7, #16]

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80022c6:	e02d      	b.n	8002324 <HAL_TIM_Base_MspInit+0x98>
  else if(tim_baseHandle->Instance==TIM4)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a19      	ldr	r2, [pc, #100]	@ (8002334 <HAL_TIM_Base_MspInit+0xa8>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d128      	bne.n	8002324 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80022d2:	4b17      	ldr	r3, [pc, #92]	@ (8002330 <HAL_TIM_Base_MspInit+0xa4>)
 80022d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022d6:	4a16      	ldr	r2, [pc, #88]	@ (8002330 <HAL_TIM_Base_MspInit+0xa4>)
 80022d8:	f043 0304 	orr.w	r3, r3, #4
 80022dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80022de:	4b14      	ldr	r3, [pc, #80]	@ (8002330 <HAL_TIM_Base_MspInit+0xa4>)
 80022e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022e2:	f003 0304 	and.w	r3, r3, #4
 80022e6:	60fb      	str	r3, [r7, #12]
 80022e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ea:	4b11      	ldr	r3, [pc, #68]	@ (8002330 <HAL_TIM_Base_MspInit+0xa4>)
 80022ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022ee:	4a10      	ldr	r2, [pc, #64]	@ (8002330 <HAL_TIM_Base_MspInit+0xa4>)
 80022f0:	f043 0302 	orr.w	r3, r3, #2
 80022f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022f6:	4b0e      	ldr	r3, [pc, #56]	@ (8002330 <HAL_TIM_Base_MspInit+0xa4>)
 80022f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	60bb      	str	r3, [r7, #8]
 8002300:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8002302:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8002306:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002308:	2302      	movs	r3, #2
 800230a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230c:	2300      	movs	r3, #0
 800230e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002310:	2300      	movs	r3, #0
 8002312:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002314:	2302      	movs	r3, #2
 8002316:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002318:	f107 0314 	add.w	r3, r7, #20
 800231c:	4619      	mov	r1, r3
 800231e:	4806      	ldr	r0, [pc, #24]	@ (8002338 <HAL_TIM_Base_MspInit+0xac>)
 8002320:	f004 f8ce 	bl	80064c0 <HAL_GPIO_Init>
}
 8002324:	bf00      	nop
 8002326:	3728      	adds	r7, #40	@ 0x28
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	40012c00 	.word	0x40012c00
 8002330:	40021000 	.word	0x40021000
 8002334:	40000800 	.word	0x40000800
 8002338:	48000400 	.word	0x48000400

0800233c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b08a      	sub	sp, #40	@ 0x28
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002344:	f107 0314 	add.w	r3, r7, #20
 8002348:	2200      	movs	r2, #0
 800234a:	601a      	str	r2, [r3, #0]
 800234c:	605a      	str	r2, [r3, #4]
 800234e:	609a      	str	r2, [r3, #8]
 8002350:	60da      	str	r2, [r3, #12]
 8002352:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a29      	ldr	r2, [pc, #164]	@ (8002400 <HAL_TIM_MspPostInit+0xc4>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d14b      	bne.n	80023f6 <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800235e:	4b29      	ldr	r3, [pc, #164]	@ (8002404 <HAL_TIM_MspPostInit+0xc8>)
 8002360:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002362:	4a28      	ldr	r2, [pc, #160]	@ (8002404 <HAL_TIM_MspPostInit+0xc8>)
 8002364:	f043 0302 	orr.w	r3, r3, #2
 8002368:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800236a:	4b26      	ldr	r3, [pc, #152]	@ (8002404 <HAL_TIM_MspPostInit+0xc8>)
 800236c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800236e:	f003 0302 	and.w	r3, r3, #2
 8002372:	613b      	str	r3, [r7, #16]
 8002374:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002376:	4b23      	ldr	r3, [pc, #140]	@ (8002404 <HAL_TIM_MspPostInit+0xc8>)
 8002378:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800237a:	4a22      	ldr	r2, [pc, #136]	@ (8002404 <HAL_TIM_MspPostInit+0xc8>)
 800237c:	f043 0301 	orr.w	r3, r3, #1
 8002380:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002382:	4b20      	ldr	r3, [pc, #128]	@ (8002404 <HAL_TIM_MspPostInit+0xc8>)
 8002384:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002386:	f003 0301 	and.w	r3, r3, #1
 800238a:	60fb      	str	r3, [r7, #12]
 800238c:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800238e:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8002392:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002394:	2302      	movs	r3, #2
 8002396:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002398:	2300      	movs	r3, #0
 800239a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800239c:	2300      	movs	r3, #0
 800239e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80023a0:	2306      	movs	r3, #6
 80023a2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023a4:	f107 0314 	add.w	r3, r7, #20
 80023a8:	4619      	mov	r1, r3
 80023aa:	4817      	ldr	r0, [pc, #92]	@ (8002408 <HAL_TIM_MspPostInit+0xcc>)
 80023ac:	f004 f888 	bl	80064c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80023b0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80023b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b6:	2302      	movs	r3, #2
 80023b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ba:	2300      	movs	r3, #0
 80023bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023be:	2300      	movs	r3, #0
 80023c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 80023c2:	2304      	movs	r3, #4
 80023c4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023c6:	f107 0314 	add.w	r3, r7, #20
 80023ca:	4619      	mov	r1, r3
 80023cc:	480e      	ldr	r0, [pc, #56]	@ (8002408 <HAL_TIM_MspPostInit+0xcc>)
 80023ce:	f004 f877 	bl	80064c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80023d2:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80023d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d8:	2302      	movs	r3, #2
 80023da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023dc:	2300      	movs	r3, #0
 80023de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e0:	2300      	movs	r3, #0
 80023e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80023e4:	2306      	movs	r3, #6
 80023e6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023e8:	f107 0314 	add.w	r3, r7, #20
 80023ec:	4619      	mov	r1, r3
 80023ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023f2:	f004 f865 	bl	80064c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80023f6:	bf00      	nop
 80023f8:	3728      	adds	r7, #40	@ 0x28
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	40012c00 	.word	0x40012c00
 8002404:	40021000 	.word	0x40021000
 8002408:	48000400 	.word	0x48000400

0800240c <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002410:	4b22      	ldr	r3, [pc, #136]	@ (800249c <MX_USART3_UART_Init+0x90>)
 8002412:	4a23      	ldr	r2, [pc, #140]	@ (80024a0 <MX_USART3_UART_Init+0x94>)
 8002414:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 8002416:	4b21      	ldr	r3, [pc, #132]	@ (800249c <MX_USART3_UART_Init+0x90>)
 8002418:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 800241c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800241e:	4b1f      	ldr	r3, [pc, #124]	@ (800249c <MX_USART3_UART_Init+0x90>)
 8002420:	2200      	movs	r2, #0
 8002422:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002424:	4b1d      	ldr	r3, [pc, #116]	@ (800249c <MX_USART3_UART_Init+0x90>)
 8002426:	2200      	movs	r2, #0
 8002428:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800242a:	4b1c      	ldr	r3, [pc, #112]	@ (800249c <MX_USART3_UART_Init+0x90>)
 800242c:	2200      	movs	r2, #0
 800242e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002430:	4b1a      	ldr	r3, [pc, #104]	@ (800249c <MX_USART3_UART_Init+0x90>)
 8002432:	220c      	movs	r2, #12
 8002434:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002436:	4b19      	ldr	r3, [pc, #100]	@ (800249c <MX_USART3_UART_Init+0x90>)
 8002438:	2200      	movs	r2, #0
 800243a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800243c:	4b17      	ldr	r3, [pc, #92]	@ (800249c <MX_USART3_UART_Init+0x90>)
 800243e:	2200      	movs	r2, #0
 8002440:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002442:	4b16      	ldr	r3, [pc, #88]	@ (800249c <MX_USART3_UART_Init+0x90>)
 8002444:	2200      	movs	r2, #0
 8002446:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002448:	4b14      	ldr	r3, [pc, #80]	@ (800249c <MX_USART3_UART_Init+0x90>)
 800244a:	2200      	movs	r2, #0
 800244c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800244e:	4b13      	ldr	r3, [pc, #76]	@ (800249c <MX_USART3_UART_Init+0x90>)
 8002450:	2200      	movs	r2, #0
 8002452:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002454:	4811      	ldr	r0, [pc, #68]	@ (800249c <MX_USART3_UART_Init+0x90>)
 8002456:	f007 fc4a 	bl	8009cee <HAL_UART_Init>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d001      	beq.n	8002464 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002460:	f7ff fadf 	bl	8001a22 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002464:	2100      	movs	r1, #0
 8002466:	480d      	ldr	r0, [pc, #52]	@ (800249c <MX_USART3_UART_Init+0x90>)
 8002468:	f009 f8c7 	bl	800b5fa <HAL_UARTEx_SetTxFifoThreshold>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002472:	f7ff fad6 	bl	8001a22 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002476:	2100      	movs	r1, #0
 8002478:	4808      	ldr	r0, [pc, #32]	@ (800249c <MX_USART3_UART_Init+0x90>)
 800247a:	f009 f8fc 	bl	800b676 <HAL_UARTEx_SetRxFifoThreshold>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d001      	beq.n	8002488 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002484:	f7ff facd 	bl	8001a22 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002488:	4804      	ldr	r0, [pc, #16]	@ (800249c <MX_USART3_UART_Init+0x90>)
 800248a:	f009 f87d 	bl	800b588 <HAL_UARTEx_DisableFifoMode>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d001      	beq.n	8002498 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002494:	f7ff fac5 	bl	8001a22 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002498:	bf00      	nop
 800249a:	bd80      	pop	{r7, pc}
 800249c:	200005a0 	.word	0x200005a0
 80024a0:	40004800 	.word	0x40004800

080024a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b09a      	sub	sp, #104	@ 0x68
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ac:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80024b0:	2200      	movs	r2, #0
 80024b2:	601a      	str	r2, [r3, #0]
 80024b4:	605a      	str	r2, [r3, #4]
 80024b6:	609a      	str	r2, [r3, #8]
 80024b8:	60da      	str	r2, [r3, #12]
 80024ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024bc:	f107 0310 	add.w	r3, r7, #16
 80024c0:	2244      	movs	r2, #68	@ 0x44
 80024c2:	2100      	movs	r1, #0
 80024c4:	4618      	mov	r0, r3
 80024c6:	f00d f93f 	bl	800f748 <memset>
  if(uartHandle->Instance==USART3)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a4d      	ldr	r2, [pc, #308]	@ (8002604 <HAL_UART_MspInit+0x160>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	f040 8092 	bne.w	80025fa <HAL_UART_MspInit+0x156>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80024d6:	2304      	movs	r3, #4
 80024d8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80024da:	2300      	movs	r3, #0
 80024dc:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024de:	f107 0310 	add.w	r3, r7, #16
 80024e2:	4618      	mov	r0, r3
 80024e4:	f005 f882 	bl	80075ec <HAL_RCCEx_PeriphCLKConfig>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80024ee:	f7ff fa98 	bl	8001a22 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80024f2:	4b45      	ldr	r3, [pc, #276]	@ (8002608 <HAL_UART_MspInit+0x164>)
 80024f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024f6:	4a44      	ldr	r2, [pc, #272]	@ (8002608 <HAL_UART_MspInit+0x164>)
 80024f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80024fe:	4b42      	ldr	r3, [pc, #264]	@ (8002608 <HAL_UART_MspInit+0x164>)
 8002500:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002502:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002506:	60fb      	str	r3, [r7, #12]
 8002508:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800250a:	4b3f      	ldr	r3, [pc, #252]	@ (8002608 <HAL_UART_MspInit+0x164>)
 800250c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800250e:	4a3e      	ldr	r2, [pc, #248]	@ (8002608 <HAL_UART_MspInit+0x164>)
 8002510:	f043 0302 	orr.w	r3, r3, #2
 8002514:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002516:	4b3c      	ldr	r3, [pc, #240]	@ (8002608 <HAL_UART_MspInit+0x164>)
 8002518:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800251a:	f003 0302 	and.w	r3, r3, #2
 800251e:	60bb      	str	r3, [r7, #8]
 8002520:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002522:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002526:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002528:	2302      	movs	r3, #2
 800252a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252c:	2300      	movs	r3, #0
 800252e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002530:	2300      	movs	r3, #0
 8002532:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002534:	2307      	movs	r3, #7
 8002536:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002538:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800253c:	4619      	mov	r1, r3
 800253e:	4833      	ldr	r0, [pc, #204]	@ (800260c <HAL_UART_MspInit+0x168>)
 8002540:	f003 ffbe 	bl	80064c0 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel1;
 8002544:	4b32      	ldr	r3, [pc, #200]	@ (8002610 <HAL_UART_MspInit+0x16c>)
 8002546:	4a33      	ldr	r2, [pc, #204]	@ (8002614 <HAL_UART_MspInit+0x170>)
 8002548:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 800254a:	4b31      	ldr	r3, [pc, #196]	@ (8002610 <HAL_UART_MspInit+0x16c>)
 800254c:	221d      	movs	r2, #29
 800254e:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002550:	4b2f      	ldr	r3, [pc, #188]	@ (8002610 <HAL_UART_MspInit+0x16c>)
 8002552:	2210      	movs	r2, #16
 8002554:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002556:	4b2e      	ldr	r3, [pc, #184]	@ (8002610 <HAL_UART_MspInit+0x16c>)
 8002558:	2200      	movs	r2, #0
 800255a:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800255c:	4b2c      	ldr	r3, [pc, #176]	@ (8002610 <HAL_UART_MspInit+0x16c>)
 800255e:	2280      	movs	r2, #128	@ 0x80
 8002560:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002562:	4b2b      	ldr	r3, [pc, #172]	@ (8002610 <HAL_UART_MspInit+0x16c>)
 8002564:	2200      	movs	r2, #0
 8002566:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002568:	4b29      	ldr	r3, [pc, #164]	@ (8002610 <HAL_UART_MspInit+0x16c>)
 800256a:	2200      	movs	r2, #0
 800256c:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800256e:	4b28      	ldr	r3, [pc, #160]	@ (8002610 <HAL_UART_MspInit+0x16c>)
 8002570:	2200      	movs	r2, #0
 8002572:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002574:	4b26      	ldr	r3, [pc, #152]	@ (8002610 <HAL_UART_MspInit+0x16c>)
 8002576:	2200      	movs	r2, #0
 8002578:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800257a:	4825      	ldr	r0, [pc, #148]	@ (8002610 <HAL_UART_MspInit+0x16c>)
 800257c:	f003 fabe 	bl	8005afc <HAL_DMA_Init>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8002586:	f7ff fa4c 	bl	8001a22 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a20      	ldr	r2, [pc, #128]	@ (8002610 <HAL_UART_MspInit+0x16c>)
 800258e:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002590:	4a1f      	ldr	r2, [pc, #124]	@ (8002610 <HAL_UART_MspInit+0x16c>)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel2;
 8002596:	4b20      	ldr	r3, [pc, #128]	@ (8002618 <HAL_UART_MspInit+0x174>)
 8002598:	4a20      	ldr	r2, [pc, #128]	@ (800261c <HAL_UART_MspInit+0x178>)
 800259a:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800259c:	4b1e      	ldr	r3, [pc, #120]	@ (8002618 <HAL_UART_MspInit+0x174>)
 800259e:	221c      	movs	r2, #28
 80025a0:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80025a2:	4b1d      	ldr	r3, [pc, #116]	@ (8002618 <HAL_UART_MspInit+0x174>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025a8:	4b1b      	ldr	r3, [pc, #108]	@ (8002618 <HAL_UART_MspInit+0x174>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80025ae:	4b1a      	ldr	r3, [pc, #104]	@ (8002618 <HAL_UART_MspInit+0x174>)
 80025b0:	2280      	movs	r2, #128	@ 0x80
 80025b2:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025b4:	4b18      	ldr	r3, [pc, #96]	@ (8002618 <HAL_UART_MspInit+0x174>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025ba:	4b17      	ldr	r3, [pc, #92]	@ (8002618 <HAL_UART_MspInit+0x174>)
 80025bc:	2200      	movs	r2, #0
 80025be:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80025c0:	4b15      	ldr	r3, [pc, #84]	@ (8002618 <HAL_UART_MspInit+0x174>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80025c6:	4b14      	ldr	r3, [pc, #80]	@ (8002618 <HAL_UART_MspInit+0x174>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80025cc:	4812      	ldr	r0, [pc, #72]	@ (8002618 <HAL_UART_MspInit+0x174>)
 80025ce:	f003 fa95 	bl	8005afc <HAL_DMA_Init>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d001      	beq.n	80025dc <HAL_UART_MspInit+0x138>
    {
      Error_Handler();
 80025d8:	f7ff fa23 	bl	8001a22 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	4a0e      	ldr	r2, [pc, #56]	@ (8002618 <HAL_UART_MspInit+0x174>)
 80025e0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80025e4:	4a0c      	ldr	r2, [pc, #48]	@ (8002618 <HAL_UART_MspInit+0x174>)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 80025ea:	2200      	movs	r2, #0
 80025ec:	2101      	movs	r1, #1
 80025ee:	2027      	movs	r0, #39	@ 0x27
 80025f0:	f003 f875 	bl	80056de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80025f4:	2027      	movs	r0, #39	@ 0x27
 80025f6:	f003 f88c 	bl	8005712 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80025fa:	bf00      	nop
 80025fc:	3768      	adds	r7, #104	@ 0x68
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	40004800 	.word	0x40004800
 8002608:	40021000 	.word	0x40021000
 800260c:	48000400 	.word	0x48000400
 8002610:	20000634 	.word	0x20000634
 8002614:	40020008 	.word	0x40020008
 8002618:	20000694 	.word	0x20000694
 800261c:	4002001c 	.word	0x4002001c

08002620 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002620:	480d      	ldr	r0, [pc, #52]	@ (8002658 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002622:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002624:	f7ff fcc4 	bl	8001fb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002628:	480c      	ldr	r0, [pc, #48]	@ (800265c <LoopForever+0x6>)
  ldr r1, =_edata
 800262a:	490d      	ldr	r1, [pc, #52]	@ (8002660 <LoopForever+0xa>)
  ldr r2, =_sidata
 800262c:	4a0d      	ldr	r2, [pc, #52]	@ (8002664 <LoopForever+0xe>)
  movs r3, #0
 800262e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002630:	e002      	b.n	8002638 <LoopCopyDataInit>

08002632 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002632:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002634:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002636:	3304      	adds	r3, #4

08002638 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002638:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800263a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800263c:	d3f9      	bcc.n	8002632 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800263e:	4a0a      	ldr	r2, [pc, #40]	@ (8002668 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002640:	4c0a      	ldr	r4, [pc, #40]	@ (800266c <LoopForever+0x16>)
  movs r3, #0
 8002642:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002644:	e001      	b.n	800264a <LoopFillZerobss>

08002646 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002646:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002648:	3204      	adds	r2, #4

0800264a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800264a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800264c:	d3fb      	bcc.n	8002646 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800264e:	f00d f8e5 	bl	800f81c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002652:	f7ff f91f 	bl	8001894 <main>

08002656 <LoopForever>:

LoopForever:
    b LoopForever
 8002656:	e7fe      	b.n	8002656 <LoopForever>
  ldr   r0, =_estack
 8002658:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800265c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002660:	20000258 	.word	0x20000258
  ldr r2, =_sidata
 8002664:	08012b38 	.word	0x08012b38
  ldr r2, =_sbss
 8002668:	20000258 	.word	0x20000258
  ldr r4, =_ebss
 800266c:	20000ac4 	.word	0x20000ac4

08002670 <COMP4_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002670:	e7fe      	b.n	8002670 <COMP4_IRQHandler>

08002672 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002672:	b580      	push	{r7, lr}
 8002674:	b082      	sub	sp, #8
 8002676:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002678:	2300      	movs	r3, #0
 800267a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800267c:	2003      	movs	r0, #3
 800267e:	f003 f823 	bl	80056c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002682:	200f      	movs	r0, #15
 8002684:	f000 f80e 	bl	80026a4 <HAL_InitTick>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d002      	beq.n	8002694 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	71fb      	strb	r3, [r7, #7]
 8002692:	e001      	b.n	8002698 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002694:	f7ff fb3c 	bl	8001d10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002698:	79fb      	ldrb	r3, [r7, #7]

}
 800269a:	4618      	mov	r0, r3
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
	...

080026a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80026ac:	2300      	movs	r3, #0
 80026ae:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80026b0:	4b16      	ldr	r3, [pc, #88]	@ (800270c <HAL_InitTick+0x68>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d022      	beq.n	80026fe <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80026b8:	4b15      	ldr	r3, [pc, #84]	@ (8002710 <HAL_InitTick+0x6c>)
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	4b13      	ldr	r3, [pc, #76]	@ (800270c <HAL_InitTick+0x68>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80026c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80026c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026cc:	4618      	mov	r0, r3
 80026ce:	f003 f82e 	bl	800572e <HAL_SYSTICK_Config>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d10f      	bne.n	80026f8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2b0f      	cmp	r3, #15
 80026dc:	d809      	bhi.n	80026f2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026de:	2200      	movs	r2, #0
 80026e0:	6879      	ldr	r1, [r7, #4]
 80026e2:	f04f 30ff 	mov.w	r0, #4294967295
 80026e6:	f002 fffa 	bl	80056de <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80026ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002714 <HAL_InitTick+0x70>)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6013      	str	r3, [r2, #0]
 80026f0:	e007      	b.n	8002702 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	73fb      	strb	r3, [r7, #15]
 80026f6:	e004      	b.n	8002702 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	73fb      	strb	r3, [r7, #15]
 80026fc:	e001      	b.n	8002702 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002702:	7bfb      	ldrb	r3, [r7, #15]
}
 8002704:	4618      	mov	r0, r3
 8002706:	3710      	adds	r7, #16
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	20000008 	.word	0x20000008
 8002710:	20000000 	.word	0x20000000
 8002714:	20000004 	.word	0x20000004

08002718 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800271c:	4b05      	ldr	r3, [pc, #20]	@ (8002734 <HAL_IncTick+0x1c>)
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	4b05      	ldr	r3, [pc, #20]	@ (8002738 <HAL_IncTick+0x20>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4413      	add	r3, r2
 8002726:	4a03      	ldr	r2, [pc, #12]	@ (8002734 <HAL_IncTick+0x1c>)
 8002728:	6013      	str	r3, [r2, #0]
}
 800272a:	bf00      	nop
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr
 8002734:	200006f4 	.word	0x200006f4
 8002738:	20000008 	.word	0x20000008

0800273c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  return uwTick;
 8002740:	4b03      	ldr	r3, [pc, #12]	@ (8002750 <HAL_GetTick+0x14>)
 8002742:	681b      	ldr	r3, [r3, #0]
}
 8002744:	4618      	mov	r0, r3
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	200006f4 	.word	0x200006f4

08002754 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	431a      	orrs	r2, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	609a      	str	r2, [r3, #8]
}
 800276e:	bf00      	nop
 8002770:	370c      	adds	r7, #12
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr

0800277a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800277a:	b480      	push	{r7}
 800277c:	b083      	sub	sp, #12
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
 8002782:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	431a      	orrs	r2, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	609a      	str	r2, [r3, #8]
}
 8002794:	bf00      	nop
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	370c      	adds	r7, #12
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr

080027bc <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80027bc:	b480      	push	{r7}
 80027be:	b087      	sub	sp, #28
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	60f8      	str	r0, [r7, #12]
 80027c4:	60b9      	str	r1, [r7, #8]
 80027c6:	607a      	str	r2, [r7, #4]
 80027c8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	3360      	adds	r3, #96	@ 0x60
 80027ce:	461a      	mov	r2, r3
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	4413      	add	r3, r2
 80027d6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	4b08      	ldr	r3, [pc, #32]	@ (8002800 <LL_ADC_SetOffset+0x44>)
 80027de:	4013      	ands	r3, r2
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80027e6:	683a      	ldr	r2, [r7, #0]
 80027e8:	430a      	orrs	r2, r1
 80027ea:	4313      	orrs	r3, r2
 80027ec:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80027f4:	bf00      	nop
 80027f6:	371c      	adds	r7, #28
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr
 8002800:	03fff000 	.word	0x03fff000

08002804 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002804:	b480      	push	{r7}
 8002806:	b085      	sub	sp, #20
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	3360      	adds	r3, #96	@ 0x60
 8002812:	461a      	mov	r2, r3
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	4413      	add	r3, r2
 800281a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002824:	4618      	mov	r0, r3
 8002826:	3714      	adds	r7, #20
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr

08002830 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002830:	b480      	push	{r7}
 8002832:	b087      	sub	sp, #28
 8002834:	af00      	add	r7, sp, #0
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	60b9      	str	r1, [r7, #8]
 800283a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	3360      	adds	r3, #96	@ 0x60
 8002840:	461a      	mov	r2, r3
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	4413      	add	r3, r2
 8002848:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	431a      	orrs	r2, r3
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800285a:	bf00      	nop
 800285c:	371c      	adds	r7, #28
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr

08002866 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002866:	b480      	push	{r7}
 8002868:	b087      	sub	sp, #28
 800286a:	af00      	add	r7, sp, #0
 800286c:	60f8      	str	r0, [r7, #12]
 800286e:	60b9      	str	r1, [r7, #8]
 8002870:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	3360      	adds	r3, #96	@ 0x60
 8002876:	461a      	mov	r2, r3
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	4413      	add	r3, r2
 800287e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	431a      	orrs	r2, r3
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002890:	bf00      	nop
 8002892:	371c      	adds	r7, #28
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800289c:	b480      	push	{r7}
 800289e:	b087      	sub	sp, #28
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	60b9      	str	r1, [r7, #8]
 80028a6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	3360      	adds	r3, #96	@ 0x60
 80028ac:	461a      	mov	r2, r3
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	4413      	add	r3, r2
 80028b4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	431a      	orrs	r2, r3
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80028c6:	bf00      	nop
 80028c8:	371c      	adds	r7, #28
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr

080028d2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80028d2:	b480      	push	{r7}
 80028d4:	b083      	sub	sp, #12
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
 80028da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	695b      	ldr	r3, [r3, #20]
 80028e0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	431a      	orrs	r2, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	615a      	str	r2, [r3, #20]
}
 80028ec:	bf00      	nop
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002908:	2b00      	cmp	r3, #0
 800290a:	d101      	bne.n	8002910 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800290c:	2301      	movs	r3, #1
 800290e:	e000      	b.n	8002912 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr

0800291e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800291e:	b480      	push	{r7}
 8002920:	b087      	sub	sp, #28
 8002922:	af00      	add	r7, sp, #0
 8002924:	60f8      	str	r0, [r7, #12]
 8002926:	60b9      	str	r1, [r7, #8]
 8002928:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	3330      	adds	r3, #48	@ 0x30
 800292e:	461a      	mov	r2, r3
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	0a1b      	lsrs	r3, r3, #8
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	f003 030c 	and.w	r3, r3, #12
 800293a:	4413      	add	r3, r2
 800293c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	f003 031f 	and.w	r3, r3, #31
 8002948:	211f      	movs	r1, #31
 800294a:	fa01 f303 	lsl.w	r3, r1, r3
 800294e:	43db      	mvns	r3, r3
 8002950:	401a      	ands	r2, r3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	0e9b      	lsrs	r3, r3, #26
 8002956:	f003 011f 	and.w	r1, r3, #31
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	f003 031f 	and.w	r3, r3, #31
 8002960:	fa01 f303 	lsl.w	r3, r1, r3
 8002964:	431a      	orrs	r2, r3
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800296a:	bf00      	nop
 800296c:	371c      	adds	r7, #28
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr

08002976 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002976:	b480      	push	{r7}
 8002978:	b083      	sub	sp, #12
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002982:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002986:	2b00      	cmp	r3, #0
 8002988:	d101      	bne.n	800298e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800298a:	2301      	movs	r3, #1
 800298c:	e000      	b.n	8002990 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800298e:	2300      	movs	r3, #0
}
 8002990:	4618      	mov	r0, r3
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800299c:	b480      	push	{r7}
 800299e:	b087      	sub	sp, #28
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	60b9      	str	r1, [r7, #8]
 80029a6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	3314      	adds	r3, #20
 80029ac:	461a      	mov	r2, r3
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	0e5b      	lsrs	r3, r3, #25
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	f003 0304 	and.w	r3, r3, #4
 80029b8:	4413      	add	r3, r2
 80029ba:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	0d1b      	lsrs	r3, r3, #20
 80029c4:	f003 031f 	and.w	r3, r3, #31
 80029c8:	2107      	movs	r1, #7
 80029ca:	fa01 f303 	lsl.w	r3, r1, r3
 80029ce:	43db      	mvns	r3, r3
 80029d0:	401a      	ands	r2, r3
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	0d1b      	lsrs	r3, r3, #20
 80029d6:	f003 031f 	and.w	r3, r3, #31
 80029da:	6879      	ldr	r1, [r7, #4]
 80029dc:	fa01 f303 	lsl.w	r3, r1, r3
 80029e0:	431a      	orrs	r2, r3
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80029e6:	bf00      	nop
 80029e8:	371c      	adds	r7, #28
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
	...

080029f4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b085      	sub	sp, #20
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	60b9      	str	r1, [r7, #8]
 80029fe:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a0c:	43db      	mvns	r3, r3
 8002a0e:	401a      	ands	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f003 0318 	and.w	r3, r3, #24
 8002a16:	4908      	ldr	r1, [pc, #32]	@ (8002a38 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002a18:	40d9      	lsrs	r1, r3
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	400b      	ands	r3, r1
 8002a1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a22:	431a      	orrs	r2, r3
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002a2a:	bf00      	nop
 8002a2c:	3714      	adds	r7, #20
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	0007ffff 	.word	0x0007ffff

08002a3c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	f003 031f 	and.w	r3, r3, #31
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	370c      	adds	r7, #12
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002a84:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	6093      	str	r3, [r2, #8]
}
 8002a8c:	bf00      	nop
 8002a8e:	370c      	adds	r7, #12
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr

08002a98 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002aa8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002aac:	d101      	bne.n	8002ab2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e000      	b.n	8002ab4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002ab2:	2300      	movs	r3, #0
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	370c      	adds	r7, #12
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr

08002ac0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002ad0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002ad4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002adc:	bf00      	nop
 8002ade:	370c      	adds	r7, #12
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr

08002ae8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002af8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002afc:	d101      	bne.n	8002b02 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002afe:	2301      	movs	r3, #1
 8002b00:	e000      	b.n	8002b04 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002b02:	2300      	movs	r3, #0
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	370c      	adds	r7, #12
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr

08002b10 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002b20:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002b24:	f043 0201 	orr.w	r2, r3, #1
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002b2c:	bf00      	nop
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr

08002b38 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002b48:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002b4c:	f043 0202 	orr.w	r2, r3, #2
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002b54:	bf00      	nop
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	f003 0301 	and.w	r3, r3, #1
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d101      	bne.n	8002b78 <LL_ADC_IsEnabled+0x18>
 8002b74:	2301      	movs	r3, #1
 8002b76:	e000      	b.n	8002b7a <LL_ADC_IsEnabled+0x1a>
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	370c      	adds	r7, #12
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr

08002b86 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002b86:	b480      	push	{r7}
 8002b88:	b083      	sub	sp, #12
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f003 0302 	and.w	r3, r3, #2
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d101      	bne.n	8002b9e <LL_ADC_IsDisableOngoing+0x18>
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e000      	b.n	8002ba0 <LL_ADC_IsDisableOngoing+0x1a>
 8002b9e:	2300      	movs	r3, #0
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002bbc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002bc0:	f043 0204 	orr.w	r2, r3, #4
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002bc8:	bf00      	nop
 8002bca:	370c      	adds	r7, #12
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr

08002bd4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	f003 0304 	and.w	r3, r3, #4
 8002be4:	2b04      	cmp	r3, #4
 8002be6:	d101      	bne.n	8002bec <LL_ADC_REG_IsConversionOngoing+0x18>
 8002be8:	2301      	movs	r3, #1
 8002bea:	e000      	b.n	8002bee <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	370c      	adds	r7, #12
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr

08002bfa <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	b083      	sub	sp, #12
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	f003 0308 	and.w	r3, r3, #8
 8002c0a:	2b08      	cmp	r3, #8
 8002c0c:	d101      	bne.n	8002c12 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e000      	b.n	8002c14 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002c12:	2300      	movs	r3, #0
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	370c      	adds	r7, #12
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr

08002c20 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c20:	b590      	push	{r4, r7, lr}
 8002c22:	b089      	sub	sp, #36	@ 0x24
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d101      	bne.n	8002c3a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e167      	b.n	8002f0a <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	695b      	ldr	r3, [r3, #20]
 8002c3e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d109      	bne.n	8002c5c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f7fe fb45 	bl	80012d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7ff ff19 	bl	8002a98 <LL_ADC_IsDeepPowerDownEnabled>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d004      	beq.n	8002c76 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7ff feff 	bl	8002a74 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7ff ff34 	bl	8002ae8 <LL_ADC_IsInternalRegulatorEnabled>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d115      	bne.n	8002cb2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f7ff ff18 	bl	8002ac0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c90:	4ba0      	ldr	r3, [pc, #640]	@ (8002f14 <HAL_ADC_Init+0x2f4>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	099b      	lsrs	r3, r3, #6
 8002c96:	4aa0      	ldr	r2, [pc, #640]	@ (8002f18 <HAL_ADC_Init+0x2f8>)
 8002c98:	fba2 2303 	umull	r2, r3, r2, r3
 8002c9c:	099b      	lsrs	r3, r3, #6
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	005b      	lsls	r3, r3, #1
 8002ca2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002ca4:	e002      	b.n	8002cac <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	3b01      	subs	r3, #1
 8002caa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d1f9      	bne.n	8002ca6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7ff ff16 	bl	8002ae8 <LL_ADC_IsInternalRegulatorEnabled>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d10d      	bne.n	8002cde <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cc6:	f043 0210 	orr.w	r2, r3, #16
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cd2:	f043 0201 	orr.w	r2, r3, #1
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f7ff ff76 	bl	8002bd4 <LL_ADC_REG_IsConversionOngoing>
 8002ce8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cee:	f003 0310 	and.w	r3, r3, #16
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	f040 8100 	bne.w	8002ef8 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	f040 80fc 	bne.w	8002ef8 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d04:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002d08:	f043 0202 	orr.w	r2, r3, #2
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4618      	mov	r0, r3
 8002d16:	f7ff ff23 	bl	8002b60 <LL_ADC_IsEnabled>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d111      	bne.n	8002d44 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d20:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002d24:	f7ff ff1c 	bl	8002b60 <LL_ADC_IsEnabled>
 8002d28:	4604      	mov	r4, r0
 8002d2a:	487c      	ldr	r0, [pc, #496]	@ (8002f1c <HAL_ADC_Init+0x2fc>)
 8002d2c:	f7ff ff18 	bl	8002b60 <LL_ADC_IsEnabled>
 8002d30:	4603      	mov	r3, r0
 8002d32:	4323      	orrs	r3, r4
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d105      	bne.n	8002d44 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	4878      	ldr	r0, [pc, #480]	@ (8002f20 <HAL_ADC_Init+0x300>)
 8002d40:	f7ff fd08 	bl	8002754 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	7f5b      	ldrb	r3, [r3, #29]
 8002d48:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d4e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002d54:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002d5a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002d62:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d64:	4313      	orrs	r3, r2
 8002d66:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d106      	bne.n	8002d80 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d76:	3b01      	subs	r3, #1
 8002d78:	045b      	lsls	r3, r3, #17
 8002d7a:	69ba      	ldr	r2, [r7, #24]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d009      	beq.n	8002d9c <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d8c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d94:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002d96:	69ba      	ldr	r2, [r7, #24]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	68da      	ldr	r2, [r3, #12]
 8002da2:	4b60      	ldr	r3, [pc, #384]	@ (8002f24 <HAL_ADC_Init+0x304>)
 8002da4:	4013      	ands	r3, r2
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	6812      	ldr	r2, [r2, #0]
 8002daa:	69b9      	ldr	r1, [r7, #24]
 8002dac:	430b      	orrs	r3, r1
 8002dae:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	691b      	ldr	r3, [r3, #16]
 8002db6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f7ff ff15 	bl	8002bfa <LL_ADC_INJ_IsConversionOngoing>
 8002dd0:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d16d      	bne.n	8002eb4 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d16a      	bne.n	8002eb4 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002de2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002dea:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002dec:	4313      	orrs	r3, r2
 8002dee:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002dfa:	f023 0302 	bic.w	r3, r3, #2
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	6812      	ldr	r2, [r2, #0]
 8002e02:	69b9      	ldr	r1, [r7, #24]
 8002e04:	430b      	orrs	r3, r1
 8002e06:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	691b      	ldr	r3, [r3, #16]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d017      	beq.n	8002e40 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	691a      	ldr	r2, [r3, #16]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002e1e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002e28:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002e2c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	6911      	ldr	r1, [r2, #16]
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	6812      	ldr	r2, [r2, #0]
 8002e38:	430b      	orrs	r3, r1
 8002e3a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002e3e:	e013      	b.n	8002e68 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	691a      	ldr	r2, [r3, #16]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002e4e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	6812      	ldr	r2, [r2, #0]
 8002e5c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002e60:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002e64:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d118      	bne.n	8002ea4 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	691b      	ldr	r3, [r3, #16]
 8002e78:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002e7c:	f023 0304 	bic.w	r3, r3, #4
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002e88:	4311      	orrs	r1, r2
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002e8e:	4311      	orrs	r1, r2
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002e94:	430a      	orrs	r2, r1
 8002e96:	431a      	orrs	r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f042 0201 	orr.w	r2, r2, #1
 8002ea0:	611a      	str	r2, [r3, #16]
 8002ea2:	e007      	b.n	8002eb4 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	691a      	ldr	r2, [r3, #16]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f022 0201 	bic.w	r2, r2, #1
 8002eb2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	695b      	ldr	r3, [r3, #20]
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d10c      	bne.n	8002ed6 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ec2:	f023 010f 	bic.w	r1, r3, #15
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a1b      	ldr	r3, [r3, #32]
 8002eca:	1e5a      	subs	r2, r3, #1
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	631a      	str	r2, [r3, #48]	@ 0x30
 8002ed4:	e007      	b.n	8002ee6 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f022 020f 	bic.w	r2, r2, #15
 8002ee4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eea:	f023 0303 	bic.w	r3, r3, #3
 8002eee:	f043 0201 	orr.w	r2, r3, #1
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002ef6:	e007      	b.n	8002f08 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002efc:	f043 0210 	orr.w	r2, r3, #16
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002f08:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3724      	adds	r7, #36	@ 0x24
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd90      	pop	{r4, r7, pc}
 8002f12:	bf00      	nop
 8002f14:	20000000 	.word	0x20000000
 8002f18:	053e2d63 	.word	0x053e2d63
 8002f1c:	50000100 	.word	0x50000100
 8002f20:	50000300 	.word	0x50000300
 8002f24:	fff04007 	.word	0xfff04007

08002f28 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b086      	sub	sp, #24
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f30:	4859      	ldr	r0, [pc, #356]	@ (8003098 <HAL_ADC_Start+0x170>)
 8002f32:	f7ff fd83 	bl	8002a3c <LL_ADC_GetMultimode>
 8002f36:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f7ff fe49 	bl	8002bd4 <LL_ADC_REG_IsConversionOngoing>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	f040 809f 	bne.w	8003088 <HAL_ADC_Start+0x160>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d101      	bne.n	8002f58 <HAL_ADC_Start+0x30>
 8002f54:	2302      	movs	r3, #2
 8002f56:	e09a      	b.n	800308e <HAL_ADC_Start+0x166>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f000 fed3 	bl	8003d0c <ADC_Enable>
 8002f66:	4603      	mov	r3, r0
 8002f68:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002f6a:	7dfb      	ldrb	r3, [r7, #23]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	f040 8086 	bne.w	800307e <HAL_ADC_Start+0x156>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f76:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002f7a:	f023 0301 	bic.w	r3, r3, #1
 8002f7e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a44      	ldr	r2, [pc, #272]	@ (800309c <HAL_ADC_Start+0x174>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d002      	beq.n	8002f96 <HAL_ADC_Start+0x6e>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	e001      	b.n	8002f9a <HAL_ADC_Start+0x72>
 8002f96:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	6812      	ldr	r2, [r2, #0]
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d002      	beq.n	8002fa8 <HAL_ADC_Start+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d105      	bne.n	8002fb4 <HAL_ADC_Start+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fac:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fb8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002fbc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fc0:	d106      	bne.n	8002fd0 <HAL_ADC_Start+0xa8>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fc6:	f023 0206 	bic.w	r2, r3, #6
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	661a      	str	r2, [r3, #96]	@ 0x60
 8002fce:	e002      	b.n	8002fd6 <HAL_ADC_Start+0xae>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	221c      	movs	r2, #28
 8002fdc:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a2c      	ldr	r2, [pc, #176]	@ (800309c <HAL_ADC_Start+0x174>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d002      	beq.n	8002ff6 <HAL_ADC_Start+0xce>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	e001      	b.n	8002ffa <HAL_ADC_Start+0xd2>
 8002ff6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	6812      	ldr	r2, [r2, #0]
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d008      	beq.n	8003014 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d005      	beq.n	8003014 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	2b05      	cmp	r3, #5
 800300c:	d002      	beq.n	8003014 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	2b09      	cmp	r3, #9
 8003012:	d114      	bne.n	800303e <HAL_ADC_Start+0x116>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d007      	beq.n	8003032 <HAL_ADC_Start+0x10a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003026:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800302a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4618      	mov	r0, r3
 8003038:	f7ff fdb8 	bl	8002bac <LL_ADC_REG_StartConversion>
 800303c:	e026      	b.n	800308c <HAL_ADC_Start+0x164>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003042:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a13      	ldr	r2, [pc, #76]	@ (800309c <HAL_ADC_Start+0x174>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d002      	beq.n	800305a <HAL_ADC_Start+0x132>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	e001      	b.n	800305e <HAL_ADC_Start+0x136>
 800305a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800305e:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d00f      	beq.n	800308c <HAL_ADC_Start+0x164>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003070:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003074:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800307c:	e006      	b.n	800308c <HAL_ADC_Start+0x164>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8003086:	e001      	b.n	800308c <HAL_ADC_Start+0x164>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003088:	2302      	movs	r3, #2
 800308a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800308c:	7dfb      	ldrb	r3, [r7, #23]
}
 800308e:	4618      	mov	r0, r3
 8003090:	3718      	adds	r7, #24
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	50000300 	.word	0x50000300
 800309c:	50000100 	.word	0x50000100

080030a0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	370c      	adds	r7, #12
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
	...

080030bc <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b08a      	sub	sp, #40	@ 0x28
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80030c4:	2300      	movs	r3, #0
 80030c6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80030d8:	4883      	ldr	r0, [pc, #524]	@ (80032e8 <HAL_ADC_IRQHandler+0x22c>)
 80030da:	f7ff fcaf 	bl	8002a3c <LL_ADC_GetMultimode>
 80030de:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	f003 0302 	and.w	r3, r3, #2
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d017      	beq.n	800311a <HAL_ADC_IRQHandler+0x5e>
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	f003 0302 	and.w	r3, r3, #2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d012      	beq.n	800311a <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030f8:	f003 0310 	and.w	r3, r3, #16
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d105      	bne.n	800310c <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003104:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f001 fa9d 	bl	800464c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2202      	movs	r2, #2
 8003118:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	f003 0304 	and.w	r3, r3, #4
 8003120:	2b00      	cmp	r3, #0
 8003122:	d004      	beq.n	800312e <HAL_ADC_IRQHandler+0x72>
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	f003 0304 	and.w	r3, r3, #4
 800312a:	2b00      	cmp	r3, #0
 800312c:	d10a      	bne.n	8003144 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003134:	2b00      	cmp	r3, #0
 8003136:	f000 8085 	beq.w	8003244 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	f003 0308 	and.w	r3, r3, #8
 8003140:	2b00      	cmp	r3, #0
 8003142:	d07f      	beq.n	8003244 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003148:	f003 0310 	and.w	r3, r3, #16
 800314c:	2b00      	cmp	r3, #0
 800314e:	d105      	bne.n	800315c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003154:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4618      	mov	r0, r3
 8003162:	f7ff fbc9 	bl	80028f8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d064      	beq.n	8003236 <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a5e      	ldr	r2, [pc, #376]	@ (80032ec <HAL_ADC_IRQHandler+0x230>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d002      	beq.n	800317c <HAL_ADC_IRQHandler+0xc0>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	e001      	b.n	8003180 <HAL_ADC_IRQHandler+0xc4>
 800317c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	6812      	ldr	r2, [r2, #0]
 8003184:	4293      	cmp	r3, r2
 8003186:	d008      	beq.n	800319a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d005      	beq.n	800319a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	2b05      	cmp	r3, #5
 8003192:	d002      	beq.n	800319a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	2b09      	cmp	r3, #9
 8003198:	d104      	bne.n	80031a4 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	623b      	str	r3, [r7, #32]
 80031a2:	e00d      	b.n	80031c0 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a50      	ldr	r2, [pc, #320]	@ (80032ec <HAL_ADC_IRQHandler+0x230>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d002      	beq.n	80031b4 <HAL_ADC_IRQHandler+0xf8>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	e001      	b.n	80031b8 <HAL_ADC_IRQHandler+0xfc>
 80031b4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80031b8:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80031c0:	6a3b      	ldr	r3, [r7, #32]
 80031c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d135      	bne.n	8003236 <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0308 	and.w	r3, r3, #8
 80031d4:	2b08      	cmp	r3, #8
 80031d6:	d12e      	bne.n	8003236 <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4618      	mov	r0, r3
 80031de:	f7ff fcf9 	bl	8002bd4 <LL_ADC_REG_IsConversionOngoing>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d11a      	bne.n	800321e <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	685a      	ldr	r2, [r3, #4]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f022 020c 	bic.w	r2, r2, #12
 80031f6:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031fc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003208:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d112      	bne.n	8003236 <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003214:	f043 0201 	orr.w	r2, r3, #1
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800321c:	e00b      	b.n	8003236 <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003222:	f043 0210 	orr.w	r2, r3, #16
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800322e:	f043 0201 	orr.w	r2, r3, #1
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f000 f95a 	bl	80034f0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	220c      	movs	r2, #12
 8003242:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	f003 0320 	and.w	r3, r3, #32
 800324a:	2b00      	cmp	r3, #0
 800324c:	d004      	beq.n	8003258 <HAL_ADC_IRQHandler+0x19c>
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	f003 0320 	and.w	r3, r3, #32
 8003254:	2b00      	cmp	r3, #0
 8003256:	d10b      	bne.n	8003270 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800325e:	2b00      	cmp	r3, #0
 8003260:	f000 809e 	beq.w	80033a0 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003264:	69bb      	ldr	r3, [r7, #24]
 8003266:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800326a:	2b00      	cmp	r3, #0
 800326c:	f000 8098 	beq.w	80033a0 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003274:	f003 0310 	and.w	r3, r3, #16
 8003278:	2b00      	cmp	r3, #0
 800327a:	d105      	bne.n	8003288 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003280:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4618      	mov	r0, r3
 800328e:	f7ff fb72 	bl	8002976 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003292:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4618      	mov	r0, r3
 800329a:	f7ff fb2d 	bl	80028f8 <LL_ADC_REG_IsTriggerSourceSWStart>
 800329e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a11      	ldr	r2, [pc, #68]	@ (80032ec <HAL_ADC_IRQHandler+0x230>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d002      	beq.n	80032b0 <HAL_ADC_IRQHandler+0x1f4>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	e001      	b.n	80032b4 <HAL_ADC_IRQHandler+0x1f8>
 80032b0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	6812      	ldr	r2, [r2, #0]
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d008      	beq.n	80032ce <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d005      	beq.n	80032ce <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	2b06      	cmp	r3, #6
 80032c6:	d002      	beq.n	80032ce <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	2b07      	cmp	r3, #7
 80032cc:	d104      	bne.n	80032d8 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	623b      	str	r3, [r7, #32]
 80032d6:	e011      	b.n	80032fc <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a03      	ldr	r2, [pc, #12]	@ (80032ec <HAL_ADC_IRQHandler+0x230>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d006      	beq.n	80032f0 <HAL_ADC_IRQHandler+0x234>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	e005      	b.n	80032f4 <HAL_ADC_IRQHandler+0x238>
 80032e8:	50000300 	.word	0x50000300
 80032ec:	50000100 	.word	0x50000100
 80032f0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80032f4:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d047      	beq.n	8003392 <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003302:	6a3b      	ldr	r3, [r7, #32]
 8003304:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d007      	beq.n	800331c <HAL_ADC_IRQHandler+0x260>
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d03f      	beq.n	8003392 <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003312:	6a3b      	ldr	r3, [r7, #32]
 8003314:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003318:	2b00      	cmp	r3, #0
 800331a:	d13a      	bne.n	8003392 <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003326:	2b40      	cmp	r3, #64	@ 0x40
 8003328:	d133      	bne.n	8003392 <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800332a:	6a3b      	ldr	r3, [r7, #32]
 800332c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d12e      	bne.n	8003392 <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4618      	mov	r0, r3
 800333a:	f7ff fc5e 	bl	8002bfa <LL_ADC_INJ_IsConversionOngoing>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d11a      	bne.n	800337a <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	685a      	ldr	r2, [r3, #4]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003352:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003358:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003364:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003368:	2b00      	cmp	r3, #0
 800336a:	d112      	bne.n	8003392 <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003370:	f043 0201 	orr.w	r2, r3, #1
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003378:	e00b      	b.n	8003392 <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800337e:	f043 0210 	orr.w	r2, r3, #16
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800338a:	f043 0201 	orr.w	r2, r3, #1
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f008 fd48 	bl	800be28 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2260      	movs	r2, #96	@ 0x60
 800339e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d011      	beq.n	80033ce <HAL_ADC_IRQHandler+0x312>
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d00c      	beq.n	80033ce <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033b8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f000 f89f 	bl	8003504 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	2280      	movs	r2, #128	@ 0x80
 80033cc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d012      	beq.n	80033fe <HAL_ADC_IRQHandler+0x342>
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00d      	beq.n	80033fe <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033e6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f001 f918 	bl	8004624 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80033fc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003404:	2b00      	cmp	r3, #0
 8003406:	d012      	beq.n	800342e <HAL_ADC_IRQHandler+0x372>
 8003408:	69bb      	ldr	r3, [r7, #24]
 800340a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800340e:	2b00      	cmp	r3, #0
 8003410:	d00d      	beq.n	800342e <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003416:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f001 f90a 	bl	8004638 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800342c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	f003 0310 	and.w	r3, r3, #16
 8003434:	2b00      	cmp	r3, #0
 8003436:	d036      	beq.n	80034a6 <HAL_ADC_IRQHandler+0x3ea>
 8003438:	69bb      	ldr	r3, [r7, #24]
 800343a:	f003 0310 	and.w	r3, r3, #16
 800343e:	2b00      	cmp	r3, #0
 8003440:	d031      	beq.n	80034a6 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003446:	2b00      	cmp	r3, #0
 8003448:	d102      	bne.n	8003450 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 800344a:	2301      	movs	r3, #1
 800344c:	627b      	str	r3, [r7, #36]	@ 0x24
 800344e:	e014      	b.n	800347a <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d008      	beq.n	8003468 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003456:	4825      	ldr	r0, [pc, #148]	@ (80034ec <HAL_ADC_IRQHandler+0x430>)
 8003458:	f7ff fafe 	bl	8002a58 <LL_ADC_GetMultiDMATransfer>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d00b      	beq.n	800347a <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8003462:	2301      	movs	r3, #1
 8003464:	627b      	str	r3, [r7, #36]	@ 0x24
 8003466:	e008      	b.n	800347a <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	f003 0301 	and.w	r3, r3, #1
 8003472:	2b00      	cmp	r3, #0
 8003474:	d001      	beq.n	800347a <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8003476:	2301      	movs	r3, #1
 8003478:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800347a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800347c:	2b01      	cmp	r3, #1
 800347e:	d10e      	bne.n	800349e <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003484:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003490:	f043 0202 	orr.w	r2, r3, #2
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f000 f83d 	bl	8003518 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	2210      	movs	r2, #16
 80034a4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d018      	beq.n	80034e2 <HAL_ADC_IRQHandler+0x426>
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d013      	beq.n	80034e2 <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034be:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034ca:	f043 0208 	orr.w	r2, r3, #8
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80034da:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f001 f897 	bl	8004610 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80034e2:	bf00      	nop
 80034e4:	3728      	adds	r7, #40	@ 0x28
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	50000300 	.word	0x50000300

080034f0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80034f8:	bf00      	nop
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800350c:	bf00      	nop
 800350e:	370c      	adds	r7, #12
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003520:	bf00      	nop
 8003522:	370c      	adds	r7, #12
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b0b6      	sub	sp, #216	@ 0xd8
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003536:	2300      	movs	r3, #0
 8003538:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800353c:	2300      	movs	r3, #0
 800353e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003546:	2b01      	cmp	r3, #1
 8003548:	d101      	bne.n	800354e <HAL_ADC_ConfigChannel+0x22>
 800354a:	2302      	movs	r3, #2
 800354c:	e3c8      	b.n	8003ce0 <HAL_ADC_ConfigChannel+0x7b4>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2201      	movs	r2, #1
 8003552:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4618      	mov	r0, r3
 800355c:	f7ff fb3a 	bl	8002bd4 <LL_ADC_REG_IsConversionOngoing>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	f040 83ad 	bne.w	8003cc2 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6818      	ldr	r0, [r3, #0]
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	6859      	ldr	r1, [r3, #4]
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	461a      	mov	r2, r3
 8003576:	f7ff f9d2 	bl	800291e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4618      	mov	r0, r3
 8003580:	f7ff fb28 	bl	8002bd4 <LL_ADC_REG_IsConversionOngoing>
 8003584:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4618      	mov	r0, r3
 800358e:	f7ff fb34 	bl	8002bfa <LL_ADC_INJ_IsConversionOngoing>
 8003592:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003596:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800359a:	2b00      	cmp	r3, #0
 800359c:	f040 81d9 	bne.w	8003952 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80035a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	f040 81d4 	bne.w	8003952 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80035b2:	d10f      	bne.n	80035d4 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6818      	ldr	r0, [r3, #0]
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2200      	movs	r2, #0
 80035be:	4619      	mov	r1, r3
 80035c0:	f7ff f9ec 	bl	800299c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80035cc:	4618      	mov	r0, r3
 80035ce:	f7ff f980 	bl	80028d2 <LL_ADC_SetSamplingTimeCommonConfig>
 80035d2:	e00e      	b.n	80035f2 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6818      	ldr	r0, [r3, #0]
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	6819      	ldr	r1, [r3, #0]
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	461a      	mov	r2, r3
 80035e2:	f7ff f9db 	bl	800299c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	2100      	movs	r1, #0
 80035ec:	4618      	mov	r0, r3
 80035ee:	f7ff f970 	bl	80028d2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	695a      	ldr	r2, [r3, #20]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	08db      	lsrs	r3, r3, #3
 80035fe:	f003 0303 	and.w	r3, r3, #3
 8003602:	005b      	lsls	r3, r3, #1
 8003604:	fa02 f303 	lsl.w	r3, r2, r3
 8003608:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	691b      	ldr	r3, [r3, #16]
 8003610:	2b04      	cmp	r3, #4
 8003612:	d022      	beq.n	800365a <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6818      	ldr	r0, [r3, #0]
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	6919      	ldr	r1, [r3, #16]
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003624:	f7ff f8ca 	bl	80027bc <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6818      	ldr	r0, [r3, #0]
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	6919      	ldr	r1, [r3, #16]
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	699b      	ldr	r3, [r3, #24]
 8003634:	461a      	mov	r2, r3
 8003636:	f7ff f916 	bl	8002866 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6818      	ldr	r0, [r3, #0]
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003646:	2b01      	cmp	r3, #1
 8003648:	d102      	bne.n	8003650 <HAL_ADC_ConfigChannel+0x124>
 800364a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800364e:	e000      	b.n	8003652 <HAL_ADC_ConfigChannel+0x126>
 8003650:	2300      	movs	r3, #0
 8003652:	461a      	mov	r2, r3
 8003654:	f7ff f922 	bl	800289c <LL_ADC_SetOffsetSaturation>
 8003658:	e17b      	b.n	8003952 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2100      	movs	r1, #0
 8003660:	4618      	mov	r0, r3
 8003662:	f7ff f8cf 	bl	8002804 <LL_ADC_GetOffsetChannel>
 8003666:	4603      	mov	r3, r0
 8003668:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800366c:	2b00      	cmp	r3, #0
 800366e:	d10a      	bne.n	8003686 <HAL_ADC_ConfigChannel+0x15a>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2100      	movs	r1, #0
 8003676:	4618      	mov	r0, r3
 8003678:	f7ff f8c4 	bl	8002804 <LL_ADC_GetOffsetChannel>
 800367c:	4603      	mov	r3, r0
 800367e:	0e9b      	lsrs	r3, r3, #26
 8003680:	f003 021f 	and.w	r2, r3, #31
 8003684:	e01e      	b.n	80036c4 <HAL_ADC_ConfigChannel+0x198>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2100      	movs	r1, #0
 800368c:	4618      	mov	r0, r3
 800368e:	f7ff f8b9 	bl	8002804 <LL_ADC_GetOffsetChannel>
 8003692:	4603      	mov	r3, r0
 8003694:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003698:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800369c:	fa93 f3a3 	rbit	r3, r3
 80036a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80036a4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80036a8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80036ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d101      	bne.n	80036b8 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80036b4:	2320      	movs	r3, #32
 80036b6:	e004      	b.n	80036c2 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80036b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80036bc:	fab3 f383 	clz	r3, r3
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d105      	bne.n	80036dc <HAL_ADC_ConfigChannel+0x1b0>
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	0e9b      	lsrs	r3, r3, #26
 80036d6:	f003 031f 	and.w	r3, r3, #31
 80036da:	e018      	b.n	800370e <HAL_ADC_ConfigChannel+0x1e2>
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80036e8:	fa93 f3a3 	rbit	r3, r3
 80036ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80036f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80036f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80036f8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d101      	bne.n	8003704 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8003700:	2320      	movs	r3, #32
 8003702:	e004      	b.n	800370e <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8003704:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003708:	fab3 f383 	clz	r3, r3
 800370c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800370e:	429a      	cmp	r2, r3
 8003710:	d106      	bne.n	8003720 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2200      	movs	r2, #0
 8003718:	2100      	movs	r1, #0
 800371a:	4618      	mov	r0, r3
 800371c:	f7ff f888 	bl	8002830 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2101      	movs	r1, #1
 8003726:	4618      	mov	r0, r3
 8003728:	f7ff f86c 	bl	8002804 <LL_ADC_GetOffsetChannel>
 800372c:	4603      	mov	r3, r0
 800372e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003732:	2b00      	cmp	r3, #0
 8003734:	d10a      	bne.n	800374c <HAL_ADC_ConfigChannel+0x220>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2101      	movs	r1, #1
 800373c:	4618      	mov	r0, r3
 800373e:	f7ff f861 	bl	8002804 <LL_ADC_GetOffsetChannel>
 8003742:	4603      	mov	r3, r0
 8003744:	0e9b      	lsrs	r3, r3, #26
 8003746:	f003 021f 	and.w	r2, r3, #31
 800374a:	e01e      	b.n	800378a <HAL_ADC_ConfigChannel+0x25e>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2101      	movs	r1, #1
 8003752:	4618      	mov	r0, r3
 8003754:	f7ff f856 	bl	8002804 <LL_ADC_GetOffsetChannel>
 8003758:	4603      	mov	r3, r0
 800375a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800375e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003762:	fa93 f3a3 	rbit	r3, r3
 8003766:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800376a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800376e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003772:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003776:	2b00      	cmp	r3, #0
 8003778:	d101      	bne.n	800377e <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 800377a:	2320      	movs	r3, #32
 800377c:	e004      	b.n	8003788 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 800377e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003782:	fab3 f383 	clz	r3, r3
 8003786:	b2db      	uxtb	r3, r3
 8003788:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003792:	2b00      	cmp	r3, #0
 8003794:	d105      	bne.n	80037a2 <HAL_ADC_ConfigChannel+0x276>
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	0e9b      	lsrs	r3, r3, #26
 800379c:	f003 031f 	and.w	r3, r3, #31
 80037a0:	e018      	b.n	80037d4 <HAL_ADC_ConfigChannel+0x2a8>
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80037ae:	fa93 f3a3 	rbit	r3, r3
 80037b2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80037b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80037ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80037be:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d101      	bne.n	80037ca <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 80037c6:	2320      	movs	r3, #32
 80037c8:	e004      	b.n	80037d4 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 80037ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80037ce:	fab3 f383 	clz	r3, r3
 80037d2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d106      	bne.n	80037e6 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2200      	movs	r2, #0
 80037de:	2101      	movs	r1, #1
 80037e0:	4618      	mov	r0, r3
 80037e2:	f7ff f825 	bl	8002830 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2102      	movs	r1, #2
 80037ec:	4618      	mov	r0, r3
 80037ee:	f7ff f809 	bl	8002804 <LL_ADC_GetOffsetChannel>
 80037f2:	4603      	mov	r3, r0
 80037f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d10a      	bne.n	8003812 <HAL_ADC_ConfigChannel+0x2e6>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2102      	movs	r1, #2
 8003802:	4618      	mov	r0, r3
 8003804:	f7fe fffe 	bl	8002804 <LL_ADC_GetOffsetChannel>
 8003808:	4603      	mov	r3, r0
 800380a:	0e9b      	lsrs	r3, r3, #26
 800380c:	f003 021f 	and.w	r2, r3, #31
 8003810:	e01e      	b.n	8003850 <HAL_ADC_ConfigChannel+0x324>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	2102      	movs	r1, #2
 8003818:	4618      	mov	r0, r3
 800381a:	f7fe fff3 	bl	8002804 <LL_ADC_GetOffsetChannel>
 800381e:	4603      	mov	r3, r0
 8003820:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003824:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003828:	fa93 f3a3 	rbit	r3, r3
 800382c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003830:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003834:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003838:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800383c:	2b00      	cmp	r3, #0
 800383e:	d101      	bne.n	8003844 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8003840:	2320      	movs	r3, #32
 8003842:	e004      	b.n	800384e <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8003844:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003848:	fab3 f383 	clz	r3, r3
 800384c:	b2db      	uxtb	r3, r3
 800384e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003858:	2b00      	cmp	r3, #0
 800385a:	d105      	bne.n	8003868 <HAL_ADC_ConfigChannel+0x33c>
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	0e9b      	lsrs	r3, r3, #26
 8003862:	f003 031f 	and.w	r3, r3, #31
 8003866:	e016      	b.n	8003896 <HAL_ADC_ConfigChannel+0x36a>
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003870:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003874:	fa93 f3a3 	rbit	r3, r3
 8003878:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800387a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800387c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003880:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003884:	2b00      	cmp	r3, #0
 8003886:	d101      	bne.n	800388c <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8003888:	2320      	movs	r3, #32
 800388a:	e004      	b.n	8003896 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 800388c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003890:	fab3 f383 	clz	r3, r3
 8003894:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003896:	429a      	cmp	r2, r3
 8003898:	d106      	bne.n	80038a8 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	2200      	movs	r2, #0
 80038a0:	2102      	movs	r1, #2
 80038a2:	4618      	mov	r0, r3
 80038a4:	f7fe ffc4 	bl	8002830 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2103      	movs	r1, #3
 80038ae:	4618      	mov	r0, r3
 80038b0:	f7fe ffa8 	bl	8002804 <LL_ADC_GetOffsetChannel>
 80038b4:	4603      	mov	r3, r0
 80038b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d10a      	bne.n	80038d4 <HAL_ADC_ConfigChannel+0x3a8>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	2103      	movs	r1, #3
 80038c4:	4618      	mov	r0, r3
 80038c6:	f7fe ff9d 	bl	8002804 <LL_ADC_GetOffsetChannel>
 80038ca:	4603      	mov	r3, r0
 80038cc:	0e9b      	lsrs	r3, r3, #26
 80038ce:	f003 021f 	and.w	r2, r3, #31
 80038d2:	e017      	b.n	8003904 <HAL_ADC_ConfigChannel+0x3d8>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2103      	movs	r1, #3
 80038da:	4618      	mov	r0, r3
 80038dc:	f7fe ff92 	bl	8002804 <LL_ADC_GetOffsetChannel>
 80038e0:	4603      	mov	r3, r0
 80038e2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80038e6:	fa93 f3a3 	rbit	r3, r3
 80038ea:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80038ec:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80038ee:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80038f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d101      	bne.n	80038fa <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80038f6:	2320      	movs	r3, #32
 80038f8:	e003      	b.n	8003902 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80038fa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80038fc:	fab3 f383 	clz	r3, r3
 8003900:	b2db      	uxtb	r3, r3
 8003902:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800390c:	2b00      	cmp	r3, #0
 800390e:	d105      	bne.n	800391c <HAL_ADC_ConfigChannel+0x3f0>
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	0e9b      	lsrs	r3, r3, #26
 8003916:	f003 031f 	and.w	r3, r3, #31
 800391a:	e011      	b.n	8003940 <HAL_ADC_ConfigChannel+0x414>
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003922:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003924:	fa93 f3a3 	rbit	r3, r3
 8003928:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800392a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800392c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800392e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003930:	2b00      	cmp	r3, #0
 8003932:	d101      	bne.n	8003938 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8003934:	2320      	movs	r3, #32
 8003936:	e003      	b.n	8003940 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8003938:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800393a:	fab3 f383 	clz	r3, r3
 800393e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003940:	429a      	cmp	r2, r3
 8003942:	d106      	bne.n	8003952 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2200      	movs	r2, #0
 800394a:	2103      	movs	r1, #3
 800394c:	4618      	mov	r0, r3
 800394e:	f7fe ff6f 	bl	8002830 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4618      	mov	r0, r3
 8003958:	f7ff f902 	bl	8002b60 <LL_ADC_IsEnabled>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	f040 8140 	bne.w	8003be4 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6818      	ldr	r0, [r3, #0]
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	6819      	ldr	r1, [r3, #0]
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	461a      	mov	r2, r3
 8003972:	f7ff f83f 	bl	80029f4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	4a8f      	ldr	r2, [pc, #572]	@ (8003bb8 <HAL_ADC_ConfigChannel+0x68c>)
 800397c:	4293      	cmp	r3, r2
 800397e:	f040 8131 	bne.w	8003be4 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800398e:	2b00      	cmp	r3, #0
 8003990:	d10b      	bne.n	80039aa <HAL_ADC_ConfigChannel+0x47e>
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	0e9b      	lsrs	r3, r3, #26
 8003998:	3301      	adds	r3, #1
 800399a:	f003 031f 	and.w	r3, r3, #31
 800399e:	2b09      	cmp	r3, #9
 80039a0:	bf94      	ite	ls
 80039a2:	2301      	movls	r3, #1
 80039a4:	2300      	movhi	r3, #0
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	e019      	b.n	80039de <HAL_ADC_ConfigChannel+0x4b2>
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80039b2:	fa93 f3a3 	rbit	r3, r3
 80039b6:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80039b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80039ba:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80039bc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d101      	bne.n	80039c6 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80039c2:	2320      	movs	r3, #32
 80039c4:	e003      	b.n	80039ce <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80039c6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80039c8:	fab3 f383 	clz	r3, r3
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	3301      	adds	r3, #1
 80039d0:	f003 031f 	and.w	r3, r3, #31
 80039d4:	2b09      	cmp	r3, #9
 80039d6:	bf94      	ite	ls
 80039d8:	2301      	movls	r3, #1
 80039da:	2300      	movhi	r3, #0
 80039dc:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d079      	beq.n	8003ad6 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d107      	bne.n	80039fe <HAL_ADC_ConfigChannel+0x4d2>
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	0e9b      	lsrs	r3, r3, #26
 80039f4:	3301      	adds	r3, #1
 80039f6:	069b      	lsls	r3, r3, #26
 80039f8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80039fc:	e015      	b.n	8003a2a <HAL_ADC_ConfigChannel+0x4fe>
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a06:	fa93 f3a3 	rbit	r3, r3
 8003a0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003a0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a0e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003a10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d101      	bne.n	8003a1a <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8003a16:	2320      	movs	r3, #32
 8003a18:	e003      	b.n	8003a22 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8003a1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a1c:	fab3 f383 	clz	r3, r3
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	3301      	adds	r3, #1
 8003a24:	069b      	lsls	r3, r3, #26
 8003a26:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d109      	bne.n	8003a4a <HAL_ADC_ConfigChannel+0x51e>
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	0e9b      	lsrs	r3, r3, #26
 8003a3c:	3301      	adds	r3, #1
 8003a3e:	f003 031f 	and.w	r3, r3, #31
 8003a42:	2101      	movs	r1, #1
 8003a44:	fa01 f303 	lsl.w	r3, r1, r3
 8003a48:	e017      	b.n	8003a7a <HAL_ADC_ConfigChannel+0x54e>
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a52:	fa93 f3a3 	rbit	r3, r3
 8003a56:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003a58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a5a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003a5c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d101      	bne.n	8003a66 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8003a62:	2320      	movs	r3, #32
 8003a64:	e003      	b.n	8003a6e <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8003a66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a68:	fab3 f383 	clz	r3, r3
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	3301      	adds	r3, #1
 8003a70:	f003 031f 	and.w	r3, r3, #31
 8003a74:	2101      	movs	r1, #1
 8003a76:	fa01 f303 	lsl.w	r3, r1, r3
 8003a7a:	ea42 0103 	orr.w	r1, r2, r3
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d10a      	bne.n	8003aa0 <HAL_ADC_ConfigChannel+0x574>
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	0e9b      	lsrs	r3, r3, #26
 8003a90:	3301      	adds	r3, #1
 8003a92:	f003 021f 	and.w	r2, r3, #31
 8003a96:	4613      	mov	r3, r2
 8003a98:	005b      	lsls	r3, r3, #1
 8003a9a:	4413      	add	r3, r2
 8003a9c:	051b      	lsls	r3, r3, #20
 8003a9e:	e018      	b.n	8003ad2 <HAL_ADC_ConfigChannel+0x5a6>
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003aa8:	fa93 f3a3 	rbit	r3, r3
 8003aac:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003aae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ab0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003ab2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d101      	bne.n	8003abc <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8003ab8:	2320      	movs	r3, #32
 8003aba:	e003      	b.n	8003ac4 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8003abc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003abe:	fab3 f383 	clz	r3, r3
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	f003 021f 	and.w	r2, r3, #31
 8003aca:	4613      	mov	r3, r2
 8003acc:	005b      	lsls	r3, r3, #1
 8003ace:	4413      	add	r3, r2
 8003ad0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ad2:	430b      	orrs	r3, r1
 8003ad4:	e081      	b.n	8003bda <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d107      	bne.n	8003af2 <HAL_ADC_ConfigChannel+0x5c6>
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	0e9b      	lsrs	r3, r3, #26
 8003ae8:	3301      	adds	r3, #1
 8003aea:	069b      	lsls	r3, r3, #26
 8003aec:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003af0:	e015      	b.n	8003b1e <HAL_ADC_ConfigChannel+0x5f2>
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003af8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003afa:	fa93 f3a3 	rbit	r3, r3
 8003afe:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003b00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b02:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003b04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d101      	bne.n	8003b0e <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8003b0a:	2320      	movs	r3, #32
 8003b0c:	e003      	b.n	8003b16 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8003b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b10:	fab3 f383 	clz	r3, r3
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	3301      	adds	r3, #1
 8003b18:	069b      	lsls	r3, r3, #26
 8003b1a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d109      	bne.n	8003b3e <HAL_ADC_ConfigChannel+0x612>
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	0e9b      	lsrs	r3, r3, #26
 8003b30:	3301      	adds	r3, #1
 8003b32:	f003 031f 	and.w	r3, r3, #31
 8003b36:	2101      	movs	r1, #1
 8003b38:	fa01 f303 	lsl.w	r3, r1, r3
 8003b3c:	e017      	b.n	8003b6e <HAL_ADC_ConfigChannel+0x642>
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b44:	6a3b      	ldr	r3, [r7, #32]
 8003b46:	fa93 f3a3 	rbit	r3, r3
 8003b4a:	61fb      	str	r3, [r7, #28]
  return result;
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d101      	bne.n	8003b5a <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8003b56:	2320      	movs	r3, #32
 8003b58:	e003      	b.n	8003b62 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8003b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b5c:	fab3 f383 	clz	r3, r3
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	3301      	adds	r3, #1
 8003b64:	f003 031f 	and.w	r3, r3, #31
 8003b68:	2101      	movs	r1, #1
 8003b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b6e:	ea42 0103 	orr.w	r1, r2, r3
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d10d      	bne.n	8003b9a <HAL_ADC_ConfigChannel+0x66e>
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	0e9b      	lsrs	r3, r3, #26
 8003b84:	3301      	adds	r3, #1
 8003b86:	f003 021f 	and.w	r2, r3, #31
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	005b      	lsls	r3, r3, #1
 8003b8e:	4413      	add	r3, r2
 8003b90:	3b1e      	subs	r3, #30
 8003b92:	051b      	lsls	r3, r3, #20
 8003b94:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003b98:	e01e      	b.n	8003bd8 <HAL_ADC_ConfigChannel+0x6ac>
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	fa93 f3a3 	rbit	r3, r3
 8003ba6:	613b      	str	r3, [r7, #16]
  return result;
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003bac:	69bb      	ldr	r3, [r7, #24]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d104      	bne.n	8003bbc <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8003bb2:	2320      	movs	r3, #32
 8003bb4:	e006      	b.n	8003bc4 <HAL_ADC_ConfigChannel+0x698>
 8003bb6:	bf00      	nop
 8003bb8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003bbc:	69bb      	ldr	r3, [r7, #24]
 8003bbe:	fab3 f383 	clz	r3, r3
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	3301      	adds	r3, #1
 8003bc6:	f003 021f 	and.w	r2, r3, #31
 8003bca:	4613      	mov	r3, r2
 8003bcc:	005b      	lsls	r3, r3, #1
 8003bce:	4413      	add	r3, r2
 8003bd0:	3b1e      	subs	r3, #30
 8003bd2:	051b      	lsls	r3, r3, #20
 8003bd4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003bd8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003bda:	683a      	ldr	r2, [r7, #0]
 8003bdc:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003bde:	4619      	mov	r1, r3
 8003be0:	f7fe fedc 	bl	800299c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	4b3f      	ldr	r3, [pc, #252]	@ (8003ce8 <HAL_ADC_ConfigChannel+0x7bc>)
 8003bea:	4013      	ands	r3, r2
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d071      	beq.n	8003cd4 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003bf0:	483e      	ldr	r0, [pc, #248]	@ (8003cec <HAL_ADC_ConfigChannel+0x7c0>)
 8003bf2:	f7fe fdd5 	bl	80027a0 <LL_ADC_GetCommonPathInternalCh>
 8003bf6:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a3c      	ldr	r2, [pc, #240]	@ (8003cf0 <HAL_ADC_ConfigChannel+0x7c4>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d004      	beq.n	8003c0e <HAL_ADC_ConfigChannel+0x6e2>
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a3a      	ldr	r2, [pc, #232]	@ (8003cf4 <HAL_ADC_ConfigChannel+0x7c8>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d127      	bne.n	8003c5e <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003c0e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003c12:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d121      	bne.n	8003c5e <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c22:	d157      	bne.n	8003cd4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c24:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003c28:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	482f      	ldr	r0, [pc, #188]	@ (8003cec <HAL_ADC_ConfigChannel+0x7c0>)
 8003c30:	f7fe fda3 	bl	800277a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003c34:	4b30      	ldr	r3, [pc, #192]	@ (8003cf8 <HAL_ADC_ConfigChannel+0x7cc>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	099b      	lsrs	r3, r3, #6
 8003c3a:	4a30      	ldr	r2, [pc, #192]	@ (8003cfc <HAL_ADC_ConfigChannel+0x7d0>)
 8003c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c40:	099b      	lsrs	r3, r3, #6
 8003c42:	1c5a      	adds	r2, r3, #1
 8003c44:	4613      	mov	r3, r2
 8003c46:	005b      	lsls	r3, r3, #1
 8003c48:	4413      	add	r3, r2
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003c4e:	e002      	b.n	8003c56 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	3b01      	subs	r3, #1
 8003c54:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d1f9      	bne.n	8003c50 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003c5c:	e03a      	b.n	8003cd4 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a27      	ldr	r2, [pc, #156]	@ (8003d00 <HAL_ADC_ConfigChannel+0x7d4>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d113      	bne.n	8003c90 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003c68:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003c6c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d10d      	bne.n	8003c90 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a22      	ldr	r2, [pc, #136]	@ (8003d04 <HAL_ADC_ConfigChannel+0x7d8>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d02a      	beq.n	8003cd4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c7e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003c82:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c86:	4619      	mov	r1, r3
 8003c88:	4818      	ldr	r0, [pc, #96]	@ (8003cec <HAL_ADC_ConfigChannel+0x7c0>)
 8003c8a:	f7fe fd76 	bl	800277a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003c8e:	e021      	b.n	8003cd4 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a1c      	ldr	r2, [pc, #112]	@ (8003d08 <HAL_ADC_ConfigChannel+0x7dc>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d11c      	bne.n	8003cd4 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003c9a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003c9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d116      	bne.n	8003cd4 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a16      	ldr	r2, [pc, #88]	@ (8003d04 <HAL_ADC_ConfigChannel+0x7d8>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d011      	beq.n	8003cd4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003cb0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003cb4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003cb8:	4619      	mov	r1, r3
 8003cba:	480c      	ldr	r0, [pc, #48]	@ (8003cec <HAL_ADC_ConfigChannel+0x7c0>)
 8003cbc:	f7fe fd5d 	bl	800277a <LL_ADC_SetCommonPathInternalCh>
 8003cc0:	e008      	b.n	8003cd4 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cc6:	f043 0220 	orr.w	r2, r3, #32
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003cdc:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	37d8      	adds	r7, #216	@ 0xd8
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	80080000 	.word	0x80080000
 8003cec:	50000300 	.word	0x50000300
 8003cf0:	c3210000 	.word	0xc3210000
 8003cf4:	90c00010 	.word	0x90c00010
 8003cf8:	20000000 	.word	0x20000000
 8003cfc:	053e2d63 	.word	0x053e2d63
 8003d00:	c7520000 	.word	0xc7520000
 8003d04:	50000100 	.word	0x50000100
 8003d08:	cb840000 	.word	0xcb840000

08003d0c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003d14:	2300      	movs	r3, #0
 8003d16:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f7fe ff1f 	bl	8002b60 <LL_ADC_IsEnabled>
 8003d22:	4603      	mov	r3, r0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d169      	bne.n	8003dfc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	689a      	ldr	r2, [r3, #8]
 8003d2e:	4b36      	ldr	r3, [pc, #216]	@ (8003e08 <ADC_Enable+0xfc>)
 8003d30:	4013      	ands	r3, r2
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d00d      	beq.n	8003d52 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d3a:	f043 0210 	orr.w	r2, r3, #16
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d46:	f043 0201 	orr.w	r2, r3, #1
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e055      	b.n	8003dfe <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4618      	mov	r0, r3
 8003d58:	f7fe feda 	bl	8002b10 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003d5c:	482b      	ldr	r0, [pc, #172]	@ (8003e0c <ADC_Enable+0x100>)
 8003d5e:	f7fe fd1f 	bl	80027a0 <LL_ADC_GetCommonPathInternalCh>
 8003d62:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003d64:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d013      	beq.n	8003d94 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003d6c:	4b28      	ldr	r3, [pc, #160]	@ (8003e10 <ADC_Enable+0x104>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	099b      	lsrs	r3, r3, #6
 8003d72:	4a28      	ldr	r2, [pc, #160]	@ (8003e14 <ADC_Enable+0x108>)
 8003d74:	fba2 2303 	umull	r2, r3, r2, r3
 8003d78:	099b      	lsrs	r3, r3, #6
 8003d7a:	1c5a      	adds	r2, r3, #1
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	005b      	lsls	r3, r3, #1
 8003d80:	4413      	add	r3, r2
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003d86:	e002      	b.n	8003d8e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	3b01      	subs	r3, #1
 8003d8c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d1f9      	bne.n	8003d88 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003d94:	f7fe fcd2 	bl	800273c <HAL_GetTick>
 8003d98:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d9a:	e028      	b.n	8003dee <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4618      	mov	r0, r3
 8003da2:	f7fe fedd 	bl	8002b60 <LL_ADC_IsEnabled>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d104      	bne.n	8003db6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4618      	mov	r0, r3
 8003db2:	f7fe fead 	bl	8002b10 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003db6:	f7fe fcc1 	bl	800273c <HAL_GetTick>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d914      	bls.n	8003dee <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 0301 	and.w	r3, r3, #1
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d00d      	beq.n	8003dee <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dd6:	f043 0210 	orr.w	r2, r3, #16
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003de2:	f043 0201 	orr.w	r2, r3, #1
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e007      	b.n	8003dfe <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 0301 	and.w	r3, r3, #1
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d1cf      	bne.n	8003d9c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003dfc:	2300      	movs	r3, #0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3710      	adds	r7, #16
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	8000003f 	.word	0x8000003f
 8003e0c:	50000300 	.word	0x50000300
 8003e10:	20000000 	.word	0x20000000
 8003e14:	053e2d63 	.word	0x053e2d63

08003e18 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4618      	mov	r0, r3
 8003e26:	f7fe feae 	bl	8002b86 <LL_ADC_IsDisableOngoing>
 8003e2a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4618      	mov	r0, r3
 8003e32:	f7fe fe95 	bl	8002b60 <LL_ADC_IsEnabled>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d047      	beq.n	8003ecc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d144      	bne.n	8003ecc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	f003 030d 	and.w	r3, r3, #13
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d10c      	bne.n	8003e6a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4618      	mov	r0, r3
 8003e56:	f7fe fe6f 	bl	8002b38 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	2203      	movs	r2, #3
 8003e60:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003e62:	f7fe fc6b 	bl	800273c <HAL_GetTick>
 8003e66:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003e68:	e029      	b.n	8003ebe <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e6e:	f043 0210 	orr.w	r2, r3, #16
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e7a:	f043 0201 	orr.w	r2, r3, #1
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e023      	b.n	8003ece <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003e86:	f7fe fc59 	bl	800273c <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d914      	bls.n	8003ebe <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	f003 0301 	and.w	r3, r3, #1
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d00d      	beq.n	8003ebe <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ea6:	f043 0210 	orr.w	r2, r3, #16
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003eb2:	f043 0201 	orr.w	r2, r3, #1
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e007      	b.n	8003ece <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	f003 0301 	and.w	r3, r3, #1
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d1dc      	bne.n	8003e86 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3710      	adds	r7, #16
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}

08003ed6 <LL_ADC_SetCommonPathInternalCh>:
{
 8003ed6:	b480      	push	{r7}
 8003ed8:	b083      	sub	sp, #12
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	6078      	str	r0, [r7, #4]
 8003ede:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	431a      	orrs	r2, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	609a      	str	r2, [r3, #8]
}
 8003ef0:	bf00      	nop
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <LL_ADC_GetCommonPathInternalCh>:
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	370c      	adds	r7, #12
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr

08003f18 <LL_ADC_SetOffset>:
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b087      	sub	sp, #28
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	60b9      	str	r1, [r7, #8]
 8003f22:	607a      	str	r2, [r7, #4]
 8003f24:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	3360      	adds	r3, #96	@ 0x60
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	4413      	add	r3, r2
 8003f32:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	4b08      	ldr	r3, [pc, #32]	@ (8003f5c <LL_ADC_SetOffset+0x44>)
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8003f42:	683a      	ldr	r2, [r7, #0]
 8003f44:	430a      	orrs	r2, r1
 8003f46:	4313      	orrs	r3, r2
 8003f48:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	601a      	str	r2, [r3, #0]
}
 8003f50:	bf00      	nop
 8003f52:	371c      	adds	r7, #28
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr
 8003f5c:	03fff000 	.word	0x03fff000

08003f60 <LL_ADC_GetOffsetChannel>:
{
 8003f60:	b480      	push	{r7}
 8003f62:	b085      	sub	sp, #20
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	3360      	adds	r3, #96	@ 0x60
 8003f6e:	461a      	mov	r2, r3
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	4413      	add	r3, r2
 8003f76:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3714      	adds	r7, #20
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <LL_ADC_SetOffsetState>:
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b087      	sub	sp, #28
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	60b9      	str	r1, [r7, #8]
 8003f96:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	3360      	adds	r3, #96	@ 0x60
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	4413      	add	r3, r2
 8003fa4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	431a      	orrs	r2, r3
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	601a      	str	r2, [r3, #0]
}
 8003fb6:	bf00      	nop
 8003fb8:	371c      	adds	r7, #28
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr

08003fc2 <LL_ADC_SetOffsetSign>:
{
 8003fc2:	b480      	push	{r7}
 8003fc4:	b087      	sub	sp, #28
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	60f8      	str	r0, [r7, #12]
 8003fca:	60b9      	str	r1, [r7, #8]
 8003fcc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	3360      	adds	r3, #96	@ 0x60
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	4413      	add	r3, r2
 8003fda:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	431a      	orrs	r2, r3
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	601a      	str	r2, [r3, #0]
}
 8003fec:	bf00      	nop
 8003fee:	371c      	adds	r7, #28
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <LL_ADC_SetOffsetSaturation>:
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b087      	sub	sp, #28
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	60f8      	str	r0, [r7, #12]
 8004000:	60b9      	str	r1, [r7, #8]
 8004002:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	3360      	adds	r3, #96	@ 0x60
 8004008:	461a      	mov	r2, r3
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	4413      	add	r3, r2
 8004010:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	431a      	orrs	r2, r3
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	601a      	str	r2, [r3, #0]
}
 8004022:	bf00      	nop
 8004024:	371c      	adds	r7, #28
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr

0800402e <LL_ADC_SetSamplingTimeCommonConfig>:
{
 800402e:	b480      	push	{r7}
 8004030:	b083      	sub	sp, #12
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
 8004036:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	695b      	ldr	r3, [r3, #20]
 800403c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	431a      	orrs	r2, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	615a      	str	r2, [r3, #20]
}
 8004048:	bf00      	nop
 800404a:	370c      	adds	r7, #12
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <LL_ADC_INJ_GetTrigAuto>:
{
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
}
 8004064:	4618      	mov	r0, r3
 8004066:	370c      	adds	r7, #12
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr

08004070 <LL_ADC_SetChannelSamplingTime>:
{
 8004070:	b480      	push	{r7}
 8004072:	b087      	sub	sp, #28
 8004074:	af00      	add	r7, sp, #0
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	60b9      	str	r1, [r7, #8]
 800407a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	3314      	adds	r3, #20
 8004080:	461a      	mov	r2, r3
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	0e5b      	lsrs	r3, r3, #25
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	f003 0304 	and.w	r3, r3, #4
 800408c:	4413      	add	r3, r2
 800408e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	0d1b      	lsrs	r3, r3, #20
 8004098:	f003 031f 	and.w	r3, r3, #31
 800409c:	2107      	movs	r1, #7
 800409e:	fa01 f303 	lsl.w	r3, r1, r3
 80040a2:	43db      	mvns	r3, r3
 80040a4:	401a      	ands	r2, r3
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	0d1b      	lsrs	r3, r3, #20
 80040aa:	f003 031f 	and.w	r3, r3, #31
 80040ae:	6879      	ldr	r1, [r7, #4]
 80040b0:	fa01 f303 	lsl.w	r3, r1, r3
 80040b4:	431a      	orrs	r2, r3
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	601a      	str	r2, [r3, #0]
}
 80040ba:	bf00      	nop
 80040bc:	371c      	adds	r7, #28
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr
	...

080040c8 <LL_ADC_SetChannelSingleDiff>:
{
 80040c8:	b480      	push	{r7}
 80040ca:	b085      	sub	sp, #20
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040e0:	43db      	mvns	r3, r3
 80040e2:	401a      	ands	r2, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f003 0318 	and.w	r3, r3, #24
 80040ea:	4908      	ldr	r1, [pc, #32]	@ (800410c <LL_ADC_SetChannelSingleDiff+0x44>)
 80040ec:	40d9      	lsrs	r1, r3
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	400b      	ands	r3, r1
 80040f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040f6:	431a      	orrs	r2, r3
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 80040fe:	bf00      	nop
 8004100:	3714      	adds	r7, #20
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop
 800410c:	0007ffff 	.word	0x0007ffff

08004110 <LL_ADC_GetMultimode>:
{
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	f003 031f 	and.w	r3, r3, #31
}
 8004120:	4618      	mov	r0, r3
 8004122:	370c      	adds	r7, #12
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <LL_ADC_IsEnabled>:
{
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	f003 0301 	and.w	r3, r3, #1
 800413c:	2b01      	cmp	r3, #1
 800413e:	d101      	bne.n	8004144 <LL_ADC_IsEnabled+0x18>
 8004140:	2301      	movs	r3, #1
 8004142:	e000      	b.n	8004146 <LL_ADC_IsEnabled+0x1a>
 8004144:	2300      	movs	r3, #0
}
 8004146:	4618      	mov	r0, r3
 8004148:	370c      	adds	r7, #12
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr

08004152 <LL_ADC_StartCalibration>:
{
 8004152:	b480      	push	{r7}
 8004154:	b083      	sub	sp, #12
 8004156:	af00      	add	r7, sp, #0
 8004158:	6078      	str	r0, [r7, #4]
 800415a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8004164:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004168:	683a      	ldr	r2, [r7, #0]
 800416a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800416e:	4313      	orrs	r3, r2
 8004170:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	609a      	str	r2, [r3, #8]
}
 8004178:	bf00      	nop
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <LL_ADC_IsCalibrationOnGoing>:
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004194:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004198:	d101      	bne.n	800419e <LL_ADC_IsCalibrationOnGoing+0x1a>
 800419a:	2301      	movs	r3, #1
 800419c:	e000      	b.n	80041a0 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800419e:	2300      	movs	r3, #0
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <LL_ADC_REG_IsConversionOngoing>:
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	f003 0304 	and.w	r3, r3, #4
 80041bc:	2b04      	cmp	r3, #4
 80041be:	d101      	bne.n	80041c4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80041c0:	2301      	movs	r3, #1
 80041c2:	e000      	b.n	80041c6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80041c4:	2300      	movs	r3, #0
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	370c      	adds	r7, #12
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr

080041d2 <LL_ADC_INJ_StartConversion>:
{
 80041d2:	b480      	push	{r7}
 80041d4:	b083      	sub	sp, #12
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80041e2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80041e6:	f043 0208 	orr.w	r2, r3, #8
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	609a      	str	r2, [r3, #8]
}
 80041ee:	bf00      	nop
 80041f0:	370c      	adds	r7, #12
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr

080041fa <LL_ADC_INJ_IsConversionOngoing>:
{
 80041fa:	b480      	push	{r7}
 80041fc:	b083      	sub	sp, #12
 80041fe:	af00      	add	r7, sp, #0
 8004200:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	f003 0308 	and.w	r3, r3, #8
 800420a:	2b08      	cmp	r3, #8
 800420c:	d101      	bne.n	8004212 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800420e:	2301      	movs	r3, #1
 8004210:	e000      	b.n	8004214 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004212:	2300      	movs	r3, #0
}
 8004214:	4618      	mov	r0, r3
 8004216:	370c      	adds	r7, #12
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr

08004220 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800422a:	2300      	movs	r3, #0
 800422c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004234:	2b01      	cmp	r3, #1
 8004236:	d101      	bne.n	800423c <HAL_ADCEx_Calibration_Start+0x1c>
 8004238:	2302      	movs	r3, #2
 800423a:	e04d      	b.n	80042d8 <HAL_ADCEx_Calibration_Start+0xb8>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f7ff fde7 	bl	8003e18 <ADC_Disable>
 800424a:	4603      	mov	r3, r0
 800424c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800424e:	7bfb      	ldrb	r3, [r7, #15]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d136      	bne.n	80042c2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004258:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800425c:	f023 0302 	bic.w	r3, r3, #2
 8004260:	f043 0202 	orr.w	r2, r3, #2
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	6839      	ldr	r1, [r7, #0]
 800426e:	4618      	mov	r0, r3
 8004270:	f7ff ff6f 	bl	8004152 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004274:	e014      	b.n	80042a0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	3301      	adds	r3, #1
 800427a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	4a18      	ldr	r2, [pc, #96]	@ (80042e0 <HAL_ADCEx_Calibration_Start+0xc0>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d90d      	bls.n	80042a0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004288:	f023 0312 	bic.w	r3, r3, #18
 800428c:	f043 0210 	orr.w	r2, r3, #16
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e01b      	b.n	80042d8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4618      	mov	r0, r3
 80042a6:	f7ff ff6d 	bl	8004184 <LL_ADC_IsCalibrationOnGoing>
 80042aa:	4603      	mov	r3, r0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d1e2      	bne.n	8004276 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042b4:	f023 0303 	bic.w	r3, r3, #3
 80042b8:	f043 0201 	orr.w	r2, r3, #1
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	65da      	str	r2, [r3, #92]	@ 0x5c
 80042c0:	e005      	b.n	80042ce <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042c6:	f043 0210 	orr.w	r2, r3, #16
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80042d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3710      	adds	r7, #16
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	0004de01 	.word	0x0004de01

080042e4 <HAL_ADCEx_InjectedStart>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef *hadc)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b086      	sub	sp, #24
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80042ec:	4853      	ldr	r0, [pc, #332]	@ (800443c <HAL_ADCEx_InjectedStart+0x158>)
 80042ee:	f7ff ff0f 	bl	8004110 <LL_ADC_GetMultimode>
 80042f2:	6178      	str	r0, [r7, #20]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4618      	mov	r0, r3
 80042fa:	f7ff ff7e 	bl	80041fa <LL_ADC_INJ_IsConversionOngoing>
 80042fe:	4603      	mov	r3, r0
 8004300:	2b00      	cmp	r3, #0
 8004302:	d001      	beq.n	8004308 <HAL_ADCEx_InjectedStart+0x24>
  {
    return HAL_BUSY;
 8004304:	2302      	movs	r3, #2
 8004306:	e094      	b.n	8004432 <HAL_ADCEx_InjectedStart+0x14e>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004312:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800431a:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800431e:	2b00      	cmp	r3, #0
 8004320:	d10a      	bne.n	8004338 <HAL_ADCEx_InjectedStart+0x54>
        && (tmp_config_injected_queue == 0UL)
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d107      	bne.n	8004338 <HAL_ADCEx_InjectedStart+0x54>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800432c:	f043 0220 	orr.w	r2, r3, #32
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e07c      	b.n	8004432 <HAL_ADCEx_InjectedStart+0x14e>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800433e:	2b01      	cmp	r3, #1
 8004340:	d101      	bne.n	8004346 <HAL_ADCEx_InjectedStart+0x62>
 8004342:	2302      	movs	r3, #2
 8004344:	e075      	b.n	8004432 <HAL_ADCEx_InjectedStart+0x14e>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2201      	movs	r2, #1
 800434a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f7ff fcdc 	bl	8003d0c <ADC_Enable>
 8004354:	4603      	mov	r3, r0
 8004356:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004358:	7bfb      	ldrb	r3, [r7, #15]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d164      	bne.n	8004428 <HAL_ADCEx_InjectedStart+0x144>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004362:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004366:	2b00      	cmp	r3, #0
 8004368:	d006      	beq.n	8004378 <HAL_ADCEx_InjectedStart+0x94>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800436e:	f023 0208 	bic.w	r2, r3, #8
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	661a      	str	r2, [r3, #96]	@ 0x60
 8004376:	e002      	b.n	800437e <HAL_ADCEx_InjectedStart+0x9a>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004382:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004386:	f023 0301 	bic.w	r3, r3, #1
 800438a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a2a      	ldr	r2, [pc, #168]	@ (8004440 <HAL_ADCEx_InjectedStart+0x15c>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d002      	beq.n	80043a2 <HAL_ADCEx_InjectedStart+0xbe>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	e001      	b.n	80043a6 <HAL_ADCEx_InjectedStart+0xc2>
 80043a2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	6812      	ldr	r2, [r2, #0]
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d002      	beq.n	80043b4 <HAL_ADCEx_InjectedStart+0xd0>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d105      	bne.n	80043c0 <HAL_ADCEx_InjectedStart+0xdc>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043b8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2260      	movs	r2, #96	@ 0x60
 80043c6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a1a      	ldr	r2, [pc, #104]	@ (8004440 <HAL_ADCEx_InjectedStart+0x15c>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d002      	beq.n	80043e0 <HAL_ADCEx_InjectedStart+0xfc>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	e001      	b.n	80043e4 <HAL_ADCEx_InjectedStart+0x100>
 80043e0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80043e4:	687a      	ldr	r2, [r7, #4]
 80043e6:	6812      	ldr	r2, [r2, #0]
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d008      	beq.n	80043fe <HAL_ADCEx_InjectedStart+0x11a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d005      	beq.n	80043fe <HAL_ADCEx_InjectedStart+0x11a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	2b06      	cmp	r3, #6
 80043f6:	d002      	beq.n	80043fe <HAL_ADCEx_InjectedStart+0x11a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	2b07      	cmp	r3, #7
 80043fc:	d10d      	bne.n	800441a <HAL_ADCEx_InjectedStart+0x136>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4618      	mov	r0, r3
 8004404:	f7ff fe26 	bl	8004054 <LL_ADC_INJ_GetTrigAuto>
 8004408:	4603      	mov	r3, r0
 800440a:	2b00      	cmp	r3, #0
 800440c:	d110      	bne.n	8004430 <HAL_ADCEx_InjectedStart+0x14c>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4618      	mov	r0, r3
 8004414:	f7ff fedd 	bl	80041d2 <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8004418:	e00a      	b.n	8004430 <HAL_ADCEx_InjectedStart+0x14c>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800441e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004426:	e003      	b.n	8004430 <HAL_ADCEx_InjectedStart+0x14c>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 8004430:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004432:	4618      	mov	r0, r3
 8004434:	3718      	adds	r7, #24
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop
 800443c:	50000300 	.word	0x50000300
 8004440:	50000100 	.word	0x50000100

08004444 <HAL_ADCEx_InjectedStart_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef *hadc)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b086      	sub	sp, #24
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800444c:	486e      	ldr	r0, [pc, #440]	@ (8004608 <HAL_ADCEx_InjectedStart_IT+0x1c4>)
 800444e:	f7ff fe5f 	bl	8004110 <LL_ADC_GetMultimode>
 8004452:	6178      	str	r0, [r7, #20]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4618      	mov	r0, r3
 800445a:	f7ff fece 	bl	80041fa <LL_ADC_INJ_IsConversionOngoing>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d001      	beq.n	8004468 <HAL_ADCEx_InjectedStart_IT+0x24>
  {
    return HAL_BUSY;
 8004464:	2302      	movs	r3, #2
 8004466:	e0ca      	b.n	80045fe <HAL_ADCEx_InjectedStart_IT+0x1ba>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004472:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800447a:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800447e:	2b00      	cmp	r3, #0
 8004480:	d10a      	bne.n	8004498 <HAL_ADCEx_InjectedStart_IT+0x54>
        && (tmp_config_injected_queue == 0UL)
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d107      	bne.n	8004498 <HAL_ADCEx_InjectedStart_IT+0x54>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800448c:	f043 0220 	orr.w	r2, r3, #32
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e0b2      	b.n	80045fe <HAL_ADCEx_InjectedStart_IT+0x1ba>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d101      	bne.n	80044a6 <HAL_ADCEx_InjectedStart_IT+0x62>
 80044a2:	2302      	movs	r3, #2
 80044a4:	e0ab      	b.n	80045fe <HAL_ADCEx_InjectedStart_IT+0x1ba>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2201      	movs	r2, #1
 80044aa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f7ff fc2c 	bl	8003d0c <ADC_Enable>
 80044b4:	4603      	mov	r3, r0
 80044b6:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80044b8:	7bfb      	ldrb	r3, [r7, #15]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	f040 809a 	bne.w	80045f4 <HAL_ADCEx_InjectedStart_IT+0x1b0>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d006      	beq.n	80044da <HAL_ADCEx_InjectedStart_IT+0x96>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044d0:	f023 0208 	bic.w	r2, r3, #8
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	661a      	str	r2, [r3, #96]	@ 0x60
 80044d8:	e002      	b.n	80044e0 <HAL_ADCEx_InjectedStart_IT+0x9c>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044e4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80044e8:	f023 0301 	bic.w	r3, r3, #1
 80044ec:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a44      	ldr	r2, [pc, #272]	@ (800460c <HAL_ADCEx_InjectedStart_IT+0x1c8>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d002      	beq.n	8004504 <HAL_ADCEx_InjectedStart_IT+0xc0>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	e001      	b.n	8004508 <HAL_ADCEx_InjectedStart_IT+0xc4>
 8004504:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	6812      	ldr	r2, [r2, #0]
 800450c:	4293      	cmp	r3, r2
 800450e:	d002      	beq.n	8004516 <HAL_ADCEx_InjectedStart_IT+0xd2>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d105      	bne.n	8004522 <HAL_ADCEx_InjectedStart_IT+0xde>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800451a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	2260      	movs	r2, #96	@ 0x60
 8004528:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      /* Enable ADC Injected context queue overflow interrupt if this feature   */
      /* is enabled.                                                            */
      if ((hadc->Instance->CFGR & ADC_CFGR_JQM) != 0UL)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800453c:	2b00      	cmp	r3, #0
 800453e:	d007      	beq.n	8004550 <HAL_ADCEx_InjectedStart_IT+0x10c>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_FLAG_JQOVF);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	685a      	ldr	r2, [r3, #4]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800454e:	605a      	str	r2, [r3, #4]
      }

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	699b      	ldr	r3, [r3, #24]
 8004554:	2b08      	cmp	r3, #8
 8004556:	d110      	bne.n	800457a <HAL_ADCEx_InjectedStart_IT+0x136>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	685a      	ldr	r2, [r3, #4]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f022 0220 	bic.w	r2, r2, #32
 8004566:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	685a      	ldr	r2, [r3, #4]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004576:	605a      	str	r2, [r3, #4]
          break;
 8004578:	e010      	b.n	800459c <HAL_ADCEx_InjectedStart_IT+0x158>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	685a      	ldr	r2, [r3, #4]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004588:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	685a      	ldr	r2, [r3, #4]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f042 0220 	orr.w	r2, r2, #32
 8004598:	605a      	str	r2, [r3, #4]
          break;
 800459a:	bf00      	nop
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a1a      	ldr	r2, [pc, #104]	@ (800460c <HAL_ADCEx_InjectedStart_IT+0x1c8>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d002      	beq.n	80045ac <HAL_ADCEx_InjectedStart_IT+0x168>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	e001      	b.n	80045b0 <HAL_ADCEx_InjectedStart_IT+0x16c>
 80045ac:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	6812      	ldr	r2, [r2, #0]
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d008      	beq.n	80045ca <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d005      	beq.n	80045ca <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	2b06      	cmp	r3, #6
 80045c2:	d002      	beq.n	80045ca <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	2b07      	cmp	r3, #7
 80045c8:	d10d      	bne.n	80045e6 <HAL_ADCEx_InjectedStart_IT+0x1a2>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4618      	mov	r0, r3
 80045d0:	f7ff fd40 	bl	8004054 <LL_ADC_INJ_GetTrigAuto>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d110      	bne.n	80045fc <HAL_ADCEx_InjectedStart_IT+0x1b8>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4618      	mov	r0, r3
 80045e0:	f7ff fdf7 	bl	80041d2 <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 80045e4:	e00a      	b.n	80045fc <HAL_ADCEx_InjectedStart_IT+0x1b8>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045ea:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80045f2:	e003      	b.n	80045fc <HAL_ADCEx_InjectedStart_IT+0x1b8>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 80045fc:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3718      	adds	r7, #24
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop
 8004608:	50000300 	.word	0x50000300
 800460c:	50000100 	.word	0x50000100

08004610 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004610:	b480      	push	{r7}
 8004612:	b083      	sub	sp, #12
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004618:	bf00      	nop
 800461a:	370c      	adds	r7, #12
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr

08004624 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800462c:	bf00      	nop
 800462e:	370c      	adds	r7, #12
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr

08004638 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004640:	bf00      	nop
 8004642:	370c      	adds	r7, #12
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr

0800464c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004654:	bf00      	nop
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <HAL_ADCEx_InjectedConfigChannel>:
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc,
                                                  const ADC_InjectionConfTypeDef *pConfigInjected)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b0b6      	sub	sp, #216	@ 0xd8
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800466a:	2300      	movs	r3, #0
 800466c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 8004670:	2300      	movs	r3, #0
 8004672:	60bb      	str	r3, [r7, #8]

  uint32_t tmp_jsqr_context_queue_being_built = 0U;
 8004674:	2300      	movs	r3, #0
 8004676:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004680:	2b01      	cmp	r3, #1
 8004682:	d102      	bne.n	800468a <HAL_ADCEx_InjectedConfigChannel+0x2a>
 8004684:	2302      	movs	r3, #2
 8004686:	f000 bcb5 	b.w	8004ff4 <HAL_ADCEx_InjectedConfigChannel+0x994>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2201      	movs	r2, #1
 800468e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	695b      	ldr	r3, [r3, #20]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d003      	beq.n	80046a2 <HAL_ADCEx_InjectedConfigChannel+0x42>
      (pConfigInjected->InjectedNbrOfConversion == 1U))
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	6a1b      	ldr	r3, [r3, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d130      	bne.n	8004704 <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	2b09      	cmp	r3, #9
 80046a8:	d179      	bne.n	800479e <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d010      	beq.n	80046d4 <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	0e9b      	lsrs	r3, r3, #26
 80046b8:	025b      	lsls	r3, r3, #9
 80046ba:	f403 5278 	and.w	r2, r3, #15872	@ 0x3e00
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046c2:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 80046c6:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 80046cc:	4313      	orrs	r3, r2
 80046ce:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80046d2:	e007      	b.n	80046e4 <HAL_ADCEx_InjectedConfigChannel+0x84>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	0e9b      	lsrs	r3, r3, #26
 80046da:	025b      	lsls	r3, r3, #9
 80046dc:	f403 5378 	and.w	r3, r3, #15872	@ 0x3e00
 80046e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_jsqr_context_queue_being_built);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80046ea:	4b84      	ldr	r3, [pc, #528]	@ (80048fc <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 80046ec:	4013      	ands	r3, r2
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	6812      	ldr	r2, [r2, #0]
 80046f2:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80046f6:	430b      	orrs	r3, r1
 80046f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_jsqr_context_queue_being_built;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004700:	665a      	str	r2, [r3, #100]	@ 0x64
    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8004702:	e04c      	b.n	800479e <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004708:	2b00      	cmp	r3, #0
 800470a:	d11d      	bne.n	8004748 <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = pConfigInjected->InjectedNbrOfConversion;
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	6a1a      	ldr	r2, [r3, #32]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	669a      	str	r2, [r3, #104]	@ 0x68
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800471e:	2b00      	cmp	r3, #0
 8004720:	d00d      	beq.n	800473e <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	6a1b      	ldr	r3, [r3, #32]
 8004726:	1e5a      	subs	r2, r3, #1
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800472c:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 8004730:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 8004736:	4313      	orrs	r3, r2
 8004738:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800473c:	e004      	b.n	8004748 <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U));
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	6a1b      	ldr	r3, [r3, #32]
 8004742:	3b01      	subs	r3, #1
 8004744:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, pConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built |= ADC_JSQR_RK(pConfigInjected->InjectedChannel, pConfigInjected->InjectedRank);
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	0e9b      	lsrs	r3, r3, #26
 800474e:	f003 021f 	and.w	r2, r3, #31
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	f003 031f 	and.w	r3, r3, #31
 800475a:	fa02 f303 	lsl.w	r3, r2, r3
 800475e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004762:	4313      	orrs	r3, r2
 8004764:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800476c:	1e5a      	subs	r2, r3, #1
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	669a      	str	r2, [r3, #104]	@ 0x68

    /* 3. tmp_jsqr_context_queue_being_built is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004776:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800477a:	431a      	orrs	r2, r3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	665a      	str	r2, [r3, #100]	@ 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004784:	2b00      	cmp	r3, #0
 8004786:	d10a      	bne.n	800479e <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800478e:	4b5b      	ldr	r3, [pc, #364]	@ (80048fc <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8004790:	4013      	ands	r3, r2
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	6e51      	ldr	r1, [r2, #100]	@ 0x64
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	6812      	ldr	r2, [r2, #0]
 800479a:	430b      	orrs	r3, r1
 800479c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4618      	mov	r0, r3
 80047a4:	f7ff fd29 	bl	80041fa <LL_ADC_INJ_IsConversionOngoing>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d124      	bne.n	80047f8 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (pConfigInjected->AutoInjectedConv == DISABLE)
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d112      	bne.n	80047de <HAL_ADCEx_InjectedConfigChannel+0x17e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80047c8:	055a      	lsls	r2, r3, #21
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80047d0:	051b      	lsls	r3, r3, #20
 80047d2:	431a      	orrs	r2, r3
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	430a      	orrs	r2, r1
 80047da:	60da      	str	r2, [r3, #12]
 80047dc:	e00c      	b.n	80047f8 <HAL_ADCEx_InjectedConfigChannel+0x198>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80047ee:	055a      	lsls	r2, r3, #21
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	430a      	orrs	r2, r1
 80047f6:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4618      	mov	r0, r3
 80047fe:	f7ff fcd5 	bl	80041ac <LL_ADC_REG_IsConversionOngoing>
 8004802:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4618      	mov	r0, r3
 800480c:	f7ff fcf5 	bl	80041fa <LL_ADC_INJ_IsConversionOngoing>
 8004810:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004814:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004818:	2b00      	cmp	r3, #0
 800481a:	f040 822e 	bne.w	8004c7a <HAL_ADCEx_InjectedConfigChannel+0x61a>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800481e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004822:	2b00      	cmp	r3, #0
 8004824:	f040 8229 	bne.w	8004c7a <HAL_ADCEx_InjectedConfigChannel+0x61a>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((pConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800482c:	2b00      	cmp	r3, #0
 800482e:	d003      	beq.n	8004838 <HAL_ADCEx_InjectedConfigChannel+0x1d8>
        || (pConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004834:	2b00      	cmp	r3, #0
 8004836:	d116      	bne.n	8004866 <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800483e:	2b01      	cmp	r3, #1
 8004840:	d108      	bne.n	8004854 <HAL_ADCEx_InjectedConfigChannel+0x1f4>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	68da      	ldr	r2, [r3, #12]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8004850:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8004852:	e01f      	b.n	8004894 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	68da      	ldr	r2, [r3, #12]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 8004862:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8004864:	e016      	b.n	8004894 <HAL_ADCEx_InjectedConfigChannel+0x234>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800486c:	2b01      	cmp	r3, #1
 800486e:	d109      	bne.n	8004884 <HAL_ADCEx_InjectedConfigChannel+0x224>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004874:	f043 0220 	orr.w	r2, r3, #32
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	65da      	str	r2, [r3, #92]	@ 0x5c

        tmp_hal_status = HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004882:	e007      	b.n	8004894 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	68da      	ldr	r2, [r3, #12]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 8004892:	60da      	str	r2, [r3, #12]
      }
    }

    if (pConfigInjected->InjecOversamplingMode == ENABLE)
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800489a:	2b01      	cmp	r3, #1
 800489c:	d110      	bne.n	80048c0 <HAL_ADCEx_InjectedConfigChannel+0x260>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	691b      	ldr	r3, [r3, #16]
 80048a4:	f423 72ff 	bic.w	r2, r3, #510	@ 0x1fe
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048b0:	430b      	orrs	r3, r1
 80048b2:	431a      	orrs	r2, r3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f042 0202 	orr.w	r2, r2, #2
 80048bc:	611a      	str	r2, [r3, #16]
 80048be:	e007      	b.n	80048d0 <HAL_ADCEx_InjectedConfigChannel+0x270>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	691a      	ldr	r2, [r3, #16]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f022 0202 	bic.w	r2, r2, #2
 80048ce:	611a      	str	r2, [r3, #16]
    }

    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (pConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80048d8:	d112      	bne.n	8004900 <HAL_ADCEx_InjectedConfigChannel+0x2a0>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6818      	ldr	r0, [r3, #0]
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	2200      	movs	r2, #0
 80048e4:	4619      	mov	r1, r3
 80048e6:	f7ff fbc3 	bl	8004070 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80048f2:	4618      	mov	r0, r3
 80048f4:	f7ff fb9b 	bl	800402e <LL_ADC_SetSamplingTimeCommonConfig>
 80048f8:	e011      	b.n	800491e <HAL_ADCEx_InjectedConfigChannel+0x2be>
 80048fa:	bf00      	nop
 80048fc:	04104000 	.word	0x04104000
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6818      	ldr	r0, [r3, #0]
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	6819      	ldr	r1, [r3, #0]
                                    pConfigInjected->InjectedSamplingTime);
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	689b      	ldr	r3, [r3, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 800490c:	461a      	mov	r2, r3
 800490e:	f7ff fbaf 	bl	8004070 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	2100      	movs	r1, #0
 8004918:	4618      	mov	r0, r3
 800491a:	f7ff fb88 	bl	800402e <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, pConfigInjected->InjectedOffset);
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	695a      	ldr	r2, [r3, #20]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	08db      	lsrs	r3, r3, #3
 800492a:	f003 0303 	and.w	r3, r3, #3
 800492e:	005b      	lsls	r3, r3, #1
 8004930:	fa02 f303 	lsl.w	r3, r2, r3
 8004934:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

    if (pConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	691b      	ldr	r3, [r3, #16]
 800493c:	2b04      	cmp	r3, #4
 800493e:	d022      	beq.n	8004986 <HAL_ADCEx_InjectedConfigChannel+0x326>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedChannel,
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6818      	ldr	r0, [r3, #0]
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	6919      	ldr	r1, [r3, #16]
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004950:	f7ff fae2 	bl	8003f18 <LL_ADC_SetOffset>
                       tmp_offset_shifted);

      /* Set ADC selected offset sign & saturation */
      LL_ADC_SetOffsetSign(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedOffsetSign);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6818      	ldr	r0, [r3, #0]
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	6919      	ldr	r1, [r3, #16]
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	699b      	ldr	r3, [r3, #24]
 8004960:	461a      	mov	r2, r3
 8004962:	f7ff fb2e 	bl	8003fc2 <LL_ADC_SetOffsetSign>
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6818      	ldr	r0, [r3, #0]
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	6919      	ldr	r1, [r3, #16]
                                 (pConfigInjected->InjectedOffsetSaturation == ENABLE) ?
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	7f1b      	ldrb	r3, [r3, #28]
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 8004972:	2b01      	cmp	r3, #1
 8004974:	d102      	bne.n	800497c <HAL_ADCEx_InjectedConfigChannel+0x31c>
 8004976:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800497a:	e000      	b.n	800497e <HAL_ADCEx_InjectedConfigChannel+0x31e>
 800497c:	2300      	movs	r3, #0
 800497e:	461a      	mov	r2, r3
 8004980:	f7ff fb3a 	bl	8003ff8 <LL_ADC_SetOffsetSaturation>
 8004984:	e179      	b.n	8004c7a <HAL_ADCEx_InjectedConfigChannel+0x61a>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	2100      	movs	r1, #0
 800498c:	4618      	mov	r0, r3
 800498e:	f7ff fae7 	bl	8003f60 <LL_ADC_GetOffsetChannel>
 8004992:	4603      	mov	r3, r0
 8004994:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004998:	2b00      	cmp	r3, #0
 800499a:	d10a      	bne.n	80049b2 <HAL_ADCEx_InjectedConfigChannel+0x352>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2100      	movs	r1, #0
 80049a2:	4618      	mov	r0, r3
 80049a4:	f7ff fadc 	bl	8003f60 <LL_ADC_GetOffsetChannel>
 80049a8:	4603      	mov	r3, r0
 80049aa:	0e9b      	lsrs	r3, r3, #26
 80049ac:	f003 021f 	and.w	r2, r3, #31
 80049b0:	e01e      	b.n	80049f0 <HAL_ADCEx_InjectedConfigChannel+0x390>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	2100      	movs	r1, #0
 80049b8:	4618      	mov	r0, r3
 80049ba:	f7ff fad1 	bl	8003f60 <LL_ADC_GetOffsetChannel>
 80049be:	4603      	mov	r3, r0
 80049c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049c4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80049c8:	fa93 f3a3 	rbit	r3, r3
 80049cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 80049d0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80049d4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 80049d8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d101      	bne.n	80049e4 <HAL_ADCEx_InjectedConfigChannel+0x384>
    return 32U;
 80049e0:	2320      	movs	r3, #32
 80049e2:	e004      	b.n	80049ee <HAL_ADCEx_InjectedConfigChannel+0x38e>
  return __builtin_clz(value);
 80049e4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80049e8:	fab3 f383 	clz	r3, r3
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d105      	bne.n	8004a08 <HAL_ADCEx_InjectedConfigChannel+0x3a8>
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	0e9b      	lsrs	r3, r3, #26
 8004a02:	f003 031f 	and.w	r3, r3, #31
 8004a06:	e018      	b.n	8004a3a <HAL_ADCEx_InjectedConfigChannel+0x3da>
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004a14:	fa93 f3a3 	rbit	r3, r3
 8004a18:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8004a1c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004a20:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8004a24:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d101      	bne.n	8004a30 <HAL_ADCEx_InjectedConfigChannel+0x3d0>
    return 32U;
 8004a2c:	2320      	movs	r3, #32
 8004a2e:	e004      	b.n	8004a3a <HAL_ADCEx_InjectedConfigChannel+0x3da>
  return __builtin_clz(value);
 8004a30:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004a34:	fab3 f383 	clz	r3, r3
 8004a38:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d106      	bne.n	8004a4c <HAL_ADCEx_InjectedConfigChannel+0x3ec>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	2200      	movs	r2, #0
 8004a44:	2100      	movs	r1, #0
 8004a46:	4618      	mov	r0, r3
 8004a48:	f7ff faa0 	bl	8003f8c <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	2101      	movs	r1, #1
 8004a52:	4618      	mov	r0, r3
 8004a54:	f7ff fa84 	bl	8003f60 <LL_ADC_GetOffsetChannel>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d10a      	bne.n	8004a78 <HAL_ADCEx_InjectedConfigChannel+0x418>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	2101      	movs	r1, #1
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f7ff fa79 	bl	8003f60 <LL_ADC_GetOffsetChannel>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	0e9b      	lsrs	r3, r3, #26
 8004a72:	f003 021f 	and.w	r2, r3, #31
 8004a76:	e01e      	b.n	8004ab6 <HAL_ADCEx_InjectedConfigChannel+0x456>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	2101      	movs	r1, #1
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f7ff fa6e 	bl	8003f60 <LL_ADC_GetOffsetChannel>
 8004a84:	4603      	mov	r3, r0
 8004a86:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004a8e:	fa93 f3a3 	rbit	r3, r3
 8004a92:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8004a96:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004a9a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8004a9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d101      	bne.n	8004aaa <HAL_ADCEx_InjectedConfigChannel+0x44a>
    return 32U;
 8004aa6:	2320      	movs	r3, #32
 8004aa8:	e004      	b.n	8004ab4 <HAL_ADCEx_InjectedConfigChannel+0x454>
  return __builtin_clz(value);
 8004aaa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004aae:	fab3 f383 	clz	r3, r3
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d105      	bne.n	8004ace <HAL_ADCEx_InjectedConfigChannel+0x46e>
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	0e9b      	lsrs	r3, r3, #26
 8004ac8:	f003 031f 	and.w	r3, r3, #31
 8004acc:	e018      	b.n	8004b00 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ad6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004ada:	fa93 f3a3 	rbit	r3, r3
 8004ade:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8004ae2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004ae6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8004aea:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d101      	bne.n	8004af6 <HAL_ADCEx_InjectedConfigChannel+0x496>
    return 32U;
 8004af2:	2320      	movs	r3, #32
 8004af4:	e004      	b.n	8004b00 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
  return __builtin_clz(value);
 8004af6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004afa:	fab3 f383 	clz	r3, r3
 8004afe:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d106      	bne.n	8004b12 <HAL_ADCEx_InjectedConfigChannel+0x4b2>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	2101      	movs	r1, #1
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f7ff fa3d 	bl	8003f8c <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	2102      	movs	r1, #2
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f7ff fa21 	bl	8003f60 <LL_ADC_GetOffsetChannel>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d10a      	bne.n	8004b3e <HAL_ADCEx_InjectedConfigChannel+0x4de>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	2102      	movs	r1, #2
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f7ff fa16 	bl	8003f60 <LL_ADC_GetOffsetChannel>
 8004b34:	4603      	mov	r3, r0
 8004b36:	0e9b      	lsrs	r3, r3, #26
 8004b38:	f003 021f 	and.w	r2, r3, #31
 8004b3c:	e01e      	b.n	8004b7c <HAL_ADCEx_InjectedConfigChannel+0x51c>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	2102      	movs	r1, #2
 8004b44:	4618      	mov	r0, r3
 8004b46:	f7ff fa0b 	bl	8003f60 <LL_ADC_GetOffsetChannel>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b50:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004b54:	fa93 f3a3 	rbit	r3, r3
 8004b58:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8004b5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004b60:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8004b64:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d101      	bne.n	8004b70 <HAL_ADCEx_InjectedConfigChannel+0x510>
    return 32U;
 8004b6c:	2320      	movs	r3, #32
 8004b6e:	e004      	b.n	8004b7a <HAL_ADCEx_InjectedConfigChannel+0x51a>
  return __builtin_clz(value);
 8004b70:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b74:	fab3 f383 	clz	r3, r3
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d105      	bne.n	8004b94 <HAL_ADCEx_InjectedConfigChannel+0x534>
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	0e9b      	lsrs	r3, r3, #26
 8004b8e:	f003 031f 	and.w	r3, r3, #31
 8004b92:	e014      	b.n	8004bbe <HAL_ADCEx_InjectedConfigChannel+0x55e>
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b9a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004b9c:	fa93 f3a3 	rbit	r3, r3
 8004ba0:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8004ba2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004ba4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8004ba8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d101      	bne.n	8004bb4 <HAL_ADCEx_InjectedConfigChannel+0x554>
    return 32U;
 8004bb0:	2320      	movs	r3, #32
 8004bb2:	e004      	b.n	8004bbe <HAL_ADCEx_InjectedConfigChannel+0x55e>
  return __builtin_clz(value);
 8004bb4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004bb8:	fab3 f383 	clz	r3, r3
 8004bbc:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d106      	bne.n	8004bd0 <HAL_ADCEx_InjectedConfigChannel+0x570>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	2102      	movs	r1, #2
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f7ff f9de 	bl	8003f8c <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2103      	movs	r1, #3
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f7ff f9c2 	bl	8003f60 <LL_ADC_GetOffsetChannel>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d10a      	bne.n	8004bfc <HAL_ADCEx_InjectedConfigChannel+0x59c>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	2103      	movs	r1, #3
 8004bec:	4618      	mov	r0, r3
 8004bee:	f7ff f9b7 	bl	8003f60 <LL_ADC_GetOffsetChannel>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	0e9b      	lsrs	r3, r3, #26
 8004bf6:	f003 021f 	and.w	r2, r3, #31
 8004bfa:	e017      	b.n	8004c2c <HAL_ADCEx_InjectedConfigChannel+0x5cc>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	2103      	movs	r1, #3
 8004c02:	4618      	mov	r0, r3
 8004c04:	f7ff f9ac 	bl	8003f60 <LL_ADC_GetOffsetChannel>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c0c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004c0e:	fa93 f3a3 	rbit	r3, r3
 8004c12:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004c14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c16:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8004c18:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d101      	bne.n	8004c22 <HAL_ADCEx_InjectedConfigChannel+0x5c2>
    return 32U;
 8004c1e:	2320      	movs	r3, #32
 8004c20:	e003      	b.n	8004c2a <HAL_ADCEx_InjectedConfigChannel+0x5ca>
  return __builtin_clz(value);
 8004c22:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c24:	fab3 f383 	clz	r3, r3
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d105      	bne.n	8004c44 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	0e9b      	lsrs	r3, r3, #26
 8004c3e:	f003 031f 	and.w	r3, r3, #31
 8004c42:	e011      	b.n	8004c68 <HAL_ADCEx_InjectedConfigChannel+0x608>
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c4a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004c4c:	fa93 f3a3 	rbit	r3, r3
 8004c50:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8004c52:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004c54:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8004c56:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d101      	bne.n	8004c60 <HAL_ADCEx_InjectedConfigChannel+0x600>
    return 32U;
 8004c5c:	2320      	movs	r3, #32
 8004c5e:	e003      	b.n	8004c68 <HAL_ADCEx_InjectedConfigChannel+0x608>
  return __builtin_clz(value);
 8004c60:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004c62:	fab3 f383 	clz	r3, r3
 8004c66:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d106      	bne.n	8004c7a <HAL_ADCEx_InjectedConfigChannel+0x61a>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	2200      	movs	r2, #0
 8004c72:	2103      	movs	r1, #3
 8004c74:	4618      	mov	r0, r3
 8004c76:	f7ff f989 	bl	8003f8c <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f7ff fa54 	bl	800412c <LL_ADC_IsEnabled>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	f040 8140 	bne.w	8004f0c <HAL_ADCEx_InjectedConfigChannel+0x8ac>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6818      	ldr	r0, [r3, #0]
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	6819      	ldr	r1, [r3, #0]
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	461a      	mov	r2, r3
 8004c9a:	f7ff fa15 	bl	80040c8 <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (pConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	4a8f      	ldr	r2, [pc, #572]	@ (8004ee0 <HAL_ADCEx_InjectedConfigChannel+0x880>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	f040 8131 	bne.w	8004f0c <HAL_ADCEx_InjectedConfigChannel+0x8ac>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6818      	ldr	r0, [r3, #0]
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d10b      	bne.n	8004cd2 <HAL_ADCEx_InjectedConfigChannel+0x672>
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	0e9b      	lsrs	r3, r3, #26
 8004cc0:	3301      	adds	r3, #1
 8004cc2:	f003 031f 	and.w	r3, r3, #31
 8004cc6:	2b09      	cmp	r3, #9
 8004cc8:	bf94      	ite	ls
 8004cca:	2301      	movls	r3, #1
 8004ccc:	2300      	movhi	r3, #0
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	e019      	b.n	8004d06 <HAL_ADCEx_InjectedConfigChannel+0x6a6>
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cd8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004cda:	fa93 f3a3 	rbit	r3, r3
 8004cde:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8004ce0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ce2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8004ce4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d101      	bne.n	8004cee <HAL_ADCEx_InjectedConfigChannel+0x68e>
    return 32U;
 8004cea:	2320      	movs	r3, #32
 8004cec:	e003      	b.n	8004cf6 <HAL_ADCEx_InjectedConfigChannel+0x696>
  return __builtin_clz(value);
 8004cee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004cf0:	fab3 f383 	clz	r3, r3
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	3301      	adds	r3, #1
 8004cf8:	f003 031f 	and.w	r3, r3, #31
 8004cfc:	2b09      	cmp	r3, #9
 8004cfe:	bf94      	ite	ls
 8004d00:	2301      	movls	r3, #1
 8004d02:	2300      	movhi	r3, #0
 8004d04:	b2db      	uxtb	r3, r3
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d079      	beq.n	8004dfe <HAL_ADCEx_InjectedConfigChannel+0x79e>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d107      	bne.n	8004d26 <HAL_ADCEx_InjectedConfigChannel+0x6c6>
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	0e9b      	lsrs	r3, r3, #26
 8004d1c:	3301      	adds	r3, #1
 8004d1e:	069b      	lsls	r3, r3, #26
 8004d20:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004d24:	e015      	b.n	8004d52 <HAL_ADCEx_InjectedConfigChannel+0x6f2>
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d2e:	fa93 f3a3 	rbit	r3, r3
 8004d32:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8004d34:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d36:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8004d38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d101      	bne.n	8004d42 <HAL_ADCEx_InjectedConfigChannel+0x6e2>
    return 32U;
 8004d3e:	2320      	movs	r3, #32
 8004d40:	e003      	b.n	8004d4a <HAL_ADCEx_InjectedConfigChannel+0x6ea>
  return __builtin_clz(value);
 8004d42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d44:	fab3 f383 	clz	r3, r3
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	3301      	adds	r3, #1
 8004d4c:	069b      	lsls	r3, r3, #26
 8004d4e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d109      	bne.n	8004d72 <HAL_ADCEx_InjectedConfigChannel+0x712>
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	0e9b      	lsrs	r3, r3, #26
 8004d64:	3301      	adds	r3, #1
 8004d66:	f003 031f 	and.w	r3, r3, #31
 8004d6a:	2101      	movs	r1, #1
 8004d6c:	fa01 f303 	lsl.w	r3, r1, r3
 8004d70:	e017      	b.n	8004da2 <HAL_ADCEx_InjectedConfigChannel+0x742>
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d7a:	fa93 f3a3 	rbit	r3, r3
 8004d7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8004d80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d82:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8004d84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d101      	bne.n	8004d8e <HAL_ADCEx_InjectedConfigChannel+0x72e>
    return 32U;
 8004d8a:	2320      	movs	r3, #32
 8004d8c:	e003      	b.n	8004d96 <HAL_ADCEx_InjectedConfigChannel+0x736>
  return __builtin_clz(value);
 8004d8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d90:	fab3 f383 	clz	r3, r3
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	3301      	adds	r3, #1
 8004d98:	f003 031f 	and.w	r3, r3, #31
 8004d9c:	2101      	movs	r1, #1
 8004d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8004da2:	ea42 0103 	orr.w	r1, r2, r3
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d10a      	bne.n	8004dc8 <HAL_ADCEx_InjectedConfigChannel+0x768>
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	0e9b      	lsrs	r3, r3, #26
 8004db8:	3301      	adds	r3, #1
 8004dba:	f003 021f 	and.w	r2, r3, #31
 8004dbe:	4613      	mov	r3, r2
 8004dc0:	005b      	lsls	r3, r3, #1
 8004dc2:	4413      	add	r3, r2
 8004dc4:	051b      	lsls	r3, r3, #20
 8004dc6:	e018      	b.n	8004dfa <HAL_ADCEx_InjectedConfigChannel+0x79a>
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dd0:	fa93 f3a3 	rbit	r3, r3
 8004dd4:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8004dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dd8:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8004dda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d101      	bne.n	8004de4 <HAL_ADCEx_InjectedConfigChannel+0x784>
    return 32U;
 8004de0:	2320      	movs	r3, #32
 8004de2:	e003      	b.n	8004dec <HAL_ADCEx_InjectedConfigChannel+0x78c>
  return __builtin_clz(value);
 8004de4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004de6:	fab3 f383 	clz	r3, r3
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	3301      	adds	r3, #1
 8004dee:	f003 021f 	and.w	r2, r3, #31
 8004df2:	4613      	mov	r3, r2
 8004df4:	005b      	lsls	r3, r3, #1
 8004df6:	4413      	add	r3, r2
 8004df8:	051b      	lsls	r3, r3, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004dfa:	430b      	orrs	r3, r1
 8004dfc:	e081      	b.n	8004f02 <HAL_ADCEx_InjectedConfigChannel+0x8a2>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d107      	bne.n	8004e1a <HAL_ADCEx_InjectedConfigChannel+0x7ba>
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	0e9b      	lsrs	r3, r3, #26
 8004e10:	3301      	adds	r3, #1
 8004e12:	069b      	lsls	r3, r3, #26
 8004e14:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004e18:	e015      	b.n	8004e46 <HAL_ADCEx_InjectedConfigChannel+0x7e6>
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e22:	fa93 f3a3 	rbit	r3, r3
 8004e26:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8004e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8004e2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d101      	bne.n	8004e36 <HAL_ADCEx_InjectedConfigChannel+0x7d6>
    return 32U;
 8004e32:	2320      	movs	r3, #32
 8004e34:	e003      	b.n	8004e3e <HAL_ADCEx_InjectedConfigChannel+0x7de>
  return __builtin_clz(value);
 8004e36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e38:	fab3 f383 	clz	r3, r3
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	3301      	adds	r3, #1
 8004e40:	069b      	lsls	r3, r3, #26
 8004e42:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d109      	bne.n	8004e66 <HAL_ADCEx_InjectedConfigChannel+0x806>
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	0e9b      	lsrs	r3, r3, #26
 8004e58:	3301      	adds	r3, #1
 8004e5a:	f003 031f 	and.w	r3, r3, #31
 8004e5e:	2101      	movs	r1, #1
 8004e60:	fa01 f303 	lsl.w	r3, r1, r3
 8004e64:	e017      	b.n	8004e96 <HAL_ADCEx_InjectedConfigChannel+0x836>
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	fa93 f3a3 	rbit	r3, r3
 8004e72:	61bb      	str	r3, [r7, #24]
  return result;
 8004e74:	69bb      	ldr	r3, [r7, #24]
 8004e76:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004e78:	6a3b      	ldr	r3, [r7, #32]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d101      	bne.n	8004e82 <HAL_ADCEx_InjectedConfigChannel+0x822>
    return 32U;
 8004e7e:	2320      	movs	r3, #32
 8004e80:	e003      	b.n	8004e8a <HAL_ADCEx_InjectedConfigChannel+0x82a>
  return __builtin_clz(value);
 8004e82:	6a3b      	ldr	r3, [r7, #32]
 8004e84:	fab3 f383 	clz	r3, r3
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	3301      	adds	r3, #1
 8004e8c:	f003 031f 	and.w	r3, r3, #31
 8004e90:	2101      	movs	r1, #1
 8004e92:	fa01 f303 	lsl.w	r3, r1, r3
 8004e96:	ea42 0103 	orr.w	r1, r2, r3
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d10d      	bne.n	8004ec2 <HAL_ADCEx_InjectedConfigChannel+0x862>
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	0e9b      	lsrs	r3, r3, #26
 8004eac:	3301      	adds	r3, #1
 8004eae:	f003 021f 	and.w	r2, r3, #31
 8004eb2:	4613      	mov	r3, r2
 8004eb4:	005b      	lsls	r3, r3, #1
 8004eb6:	4413      	add	r3, r2
 8004eb8:	3b1e      	subs	r3, #30
 8004eba:	051b      	lsls	r3, r3, #20
 8004ebc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004ec0:	e01e      	b.n	8004f00 <HAL_ADCEx_InjectedConfigChannel+0x8a0>
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	fa93 f3a3 	rbit	r3, r3
 8004ece:	60fb      	str	r3, [r7, #12]
  return result;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d104      	bne.n	8004ee4 <HAL_ADCEx_InjectedConfigChannel+0x884>
    return 32U;
 8004eda:	2320      	movs	r3, #32
 8004edc:	e006      	b.n	8004eec <HAL_ADCEx_InjectedConfigChannel+0x88c>
 8004ede:	bf00      	nop
 8004ee0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	fab3 f383 	clz	r3, r3
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	3301      	adds	r3, #1
 8004eee:	f003 021f 	and.w	r2, r3, #31
 8004ef2:	4613      	mov	r3, r2
 8004ef4:	005b      	lsls	r3, r3, #1
 8004ef6:	4413      	add	r3, r2
 8004ef8:	3b1e      	subs	r3, #30
 8004efa:	051b      	lsls	r3, r3, #20
 8004efc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f00:	430b      	orrs	r3, r1
                                                 (__LL_ADC_CHANNEL_TO_DECIMAL_NB(
                                                    (uint32_t)pConfigInjected->InjectedChannel)
                                                  + 1UL) & 0x1FUL)),
                                    pConfigInjected->InjectedSamplingTime);
 8004f02:	683a      	ldr	r2, [r7, #0]
 8004f04:	6892      	ldr	r2, [r2, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f06:	4619      	mov	r1, r3
 8004f08:	f7ff f8b2 	bl	8004070 <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfigInjected->InjectedChannel))
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	4b3a      	ldr	r3, [pc, #232]	@ (8004ffc <HAL_ADCEx_InjectedConfigChannel+0x99c>)
 8004f12:	4013      	ands	r3, r2
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d067      	beq.n	8004fe8 <HAL_ADCEx_InjectedConfigChannel+0x988>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004f18:	4839      	ldr	r0, [pc, #228]	@ (8005000 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8004f1a:	f7fe ffef 	bl	8003efc <LL_ADC_GetCommonPathInternalCh>
 8004f1e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a37      	ldr	r2, [pc, #220]	@ (8005004 <HAL_ADCEx_InjectedConfigChannel+0x9a4>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d004      	beq.n	8004f36 <HAL_ADCEx_InjectedConfigChannel+0x8d6>
         || (pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a35      	ldr	r2, [pc, #212]	@ (8005008 <HAL_ADCEx_InjectedConfigChannel+0x9a8>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d127      	bne.n	8004f86 <HAL_ADCEx_InjectedConfigChannel+0x926>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004f36:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004f3a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d121      	bne.n	8004f86 <HAL_ADCEx_InjectedConfigChannel+0x926>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f4a:	d14d      	bne.n	8004fe8 <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004f4c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004f50:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004f54:	4619      	mov	r1, r3
 8004f56:	482a      	ldr	r0, [pc, #168]	@ (8005000 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8004f58:	f7fe ffbd 	bl	8003ed6 <LL_ADC_SetCommonPathInternalCh>
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                           * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8004f5c:	4b2b      	ldr	r3, [pc, #172]	@ (800500c <HAL_ADCEx_InjectedConfigChannel+0x9ac>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	099b      	lsrs	r3, r3, #6
 8004f62:	4a2b      	ldr	r2, [pc, #172]	@ (8005010 <HAL_ADCEx_InjectedConfigChannel+0x9b0>)
 8004f64:	fba2 2303 	umull	r2, r3, r2, r3
 8004f68:	099a      	lsrs	r2, r3, #6
 8004f6a:	4613      	mov	r3, r2
 8004f6c:	005b      	lsls	r3, r3, #1
 8004f6e:	4413      	add	r3, r2
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	3318      	adds	r3, #24
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 8004f74:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8004f76:	e002      	b.n	8004f7e <HAL_ADCEx_InjectedConfigChannel+0x91e>
        {
          wait_loop_index--;
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	3b01      	subs	r3, #1
 8004f7c:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d1f9      	bne.n	8004f78 <HAL_ADCEx_InjectedConfigChannel+0x918>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004f84:	e030      	b.n	8004fe8 <HAL_ADCEx_InjectedConfigChannel+0x988>
        }
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a22      	ldr	r2, [pc, #136]	@ (8005014 <HAL_ADCEx_InjectedConfigChannel+0x9b4>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d113      	bne.n	8004fb8 <HAL_ADCEx_InjectedConfigChannel+0x958>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004f90:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004f94:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d10d      	bne.n	8004fb8 <HAL_ADCEx_InjectedConfigChannel+0x958>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a1d      	ldr	r2, [pc, #116]	@ (8005018 <HAL_ADCEx_InjectedConfigChannel+0x9b8>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d020      	beq.n	8004fe8 <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004fa6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004faa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004fae:	4619      	mov	r1, r3
 8004fb0:	4813      	ldr	r0, [pc, #76]	@ (8005000 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8004fb2:	f7fe ff90 	bl	8003ed6 <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004fb6:	e017      	b.n	8004fe8 <HAL_ADCEx_InjectedConfigChannel+0x988>
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a17      	ldr	r2, [pc, #92]	@ (800501c <HAL_ADCEx_InjectedConfigChannel+0x9bc>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d112      	bne.n	8004fe8 <HAL_ADCEx_InjectedConfigChannel+0x988>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004fc2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004fc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d10c      	bne.n	8004fe8 <HAL_ADCEx_InjectedConfigChannel+0x988>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a11      	ldr	r2, [pc, #68]	@ (8005018 <HAL_ADCEx_InjectedConfigChannel+0x9b8>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d007      	beq.n	8004fe8 <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004fd8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004fdc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004fe0:	4619      	mov	r1, r3
 8004fe2:	4807      	ldr	r0, [pc, #28]	@ (8005000 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8004fe4:	f7fe ff77 	bl	8003ed6 <LL_ADC_SetCommonPathInternalCh>
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004ff0:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	37d8      	adds	r7, #216	@ 0xd8
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}
 8004ffc:	80080000 	.word	0x80080000
 8005000:	50000300 	.word	0x50000300
 8005004:	c3210000 	.word	0xc3210000
 8005008:	90c00010 	.word	0x90c00010
 800500c:	20000000 	.word	0x20000000
 8005010:	053e2d63 	.word	0x053e2d63
 8005014:	c7520000 	.word	0xc7520000
 8005018:	50000100 	.word	0x50000100
 800501c:	cb840000 	.word	0xcb840000

08005020 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8005020:	b590      	push	{r4, r7, lr}
 8005022:	b0a1      	sub	sp, #132	@ 0x84
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800502a:	2300      	movs	r3, #0
 800502c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005036:	2b01      	cmp	r3, #1
 8005038:	d101      	bne.n	800503e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800503a:	2302      	movs	r3, #2
 800503c:	e08b      	b.n	8005156 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2201      	movs	r2, #1
 8005042:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8005046:	2300      	movs	r3, #0
 8005048:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800504a:	2300      	movs	r3, #0
 800504c:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005056:	d102      	bne.n	800505e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005058:	4b41      	ldr	r3, [pc, #260]	@ (8005160 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800505a:	60bb      	str	r3, [r7, #8]
 800505c:	e001      	b.n	8005062 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800505e:	2300      	movs	r3, #0
 8005060:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d10b      	bne.n	8005080 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800506c:	f043 0220 	orr.w	r2, r3, #32
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2200      	movs	r2, #0
 8005078:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	e06a      	b.n	8005156 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	4618      	mov	r0, r3
 8005084:	f7ff f892 	bl	80041ac <LL_ADC_REG_IsConversionOngoing>
 8005088:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4618      	mov	r0, r3
 8005090:	f7ff f88c 	bl	80041ac <LL_ADC_REG_IsConversionOngoing>
 8005094:	4603      	mov	r3, r0
 8005096:	2b00      	cmp	r3, #0
 8005098:	d14c      	bne.n	8005134 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800509a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800509c:	2b00      	cmp	r3, #0
 800509e:	d149      	bne.n	8005134 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80050a0:	4b30      	ldr	r3, [pc, #192]	@ (8005164 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80050a2:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d028      	beq.n	80050fe <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80050ac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	6859      	ldr	r1, [r3, #4]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80050be:	035b      	lsls	r3, r3, #13
 80050c0:	430b      	orrs	r3, r1
 80050c2:	431a      	orrs	r2, r3
 80050c4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80050c6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80050c8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80050cc:	f7ff f82e 	bl	800412c <LL_ADC_IsEnabled>
 80050d0:	4604      	mov	r4, r0
 80050d2:	4823      	ldr	r0, [pc, #140]	@ (8005160 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80050d4:	f7ff f82a 	bl	800412c <LL_ADC_IsEnabled>
 80050d8:	4603      	mov	r3, r0
 80050da:	4323      	orrs	r3, r4
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d133      	bne.n	8005148 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80050e0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80050e8:	f023 030f 	bic.w	r3, r3, #15
 80050ec:	683a      	ldr	r2, [r7, #0]
 80050ee:	6811      	ldr	r1, [r2, #0]
 80050f0:	683a      	ldr	r2, [r7, #0]
 80050f2:	6892      	ldr	r2, [r2, #8]
 80050f4:	430a      	orrs	r2, r1
 80050f6:	431a      	orrs	r2, r3
 80050f8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80050fa:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80050fc:	e024      	b.n	8005148 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80050fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005106:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005108:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800510a:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800510e:	f7ff f80d 	bl	800412c <LL_ADC_IsEnabled>
 8005112:	4604      	mov	r4, r0
 8005114:	4812      	ldr	r0, [pc, #72]	@ (8005160 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8005116:	f7ff f809 	bl	800412c <LL_ADC_IsEnabled>
 800511a:	4603      	mov	r3, r0
 800511c:	4323      	orrs	r3, r4
 800511e:	2b00      	cmp	r3, #0
 8005120:	d112      	bne.n	8005148 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005122:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800512a:	f023 030f 	bic.w	r3, r3, #15
 800512e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005130:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005132:	e009      	b.n	8005148 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005138:	f043 0220 	orr.w	r2, r3, #32
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8005146:	e000      	b.n	800514a <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005148:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005152:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8005156:	4618      	mov	r0, r3
 8005158:	3784      	adds	r7, #132	@ 0x84
 800515a:	46bd      	mov	sp, r7
 800515c:	bd90      	pop	{r4, r7, pc}
 800515e:	bf00      	nop
 8005160:	50000100 	.word	0x50000100
 8005164:	50000300 	.word	0x50000300

08005168 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8005168:	b480      	push	{r7}
 800516a:	b083      	sub	sp, #12
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8005170:	4b05      	ldr	r3, [pc, #20]	@ (8005188 <LL_EXTI_EnableIT_0_31+0x20>)
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	4904      	ldr	r1, [pc, #16]	@ (8005188 <LL_EXTI_EnableIT_0_31+0x20>)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4313      	orrs	r3, r2
 800517a:	600b      	str	r3, [r1, #0]
}
 800517c:	bf00      	nop
 800517e:	370c      	adds	r7, #12
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr
 8005188:	40010400 	.word	0x40010400

0800518c <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 800518c:	b480      	push	{r7}
 800518e:	b083      	sub	sp, #12
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8005194:	4b06      	ldr	r3, [pc, #24]	@ (80051b0 <LL_EXTI_DisableIT_0_31+0x24>)
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	43db      	mvns	r3, r3
 800519c:	4904      	ldr	r1, [pc, #16]	@ (80051b0 <LL_EXTI_DisableIT_0_31+0x24>)
 800519e:	4013      	ands	r3, r2
 80051a0:	600b      	str	r3, [r1, #0]
}
 80051a2:	bf00      	nop
 80051a4:	370c      	adds	r7, #12
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr
 80051ae:	bf00      	nop
 80051b0:	40010400 	.word	0x40010400

080051b4 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b083      	sub	sp, #12
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 80051bc:	4b05      	ldr	r3, [pc, #20]	@ (80051d4 <LL_EXTI_EnableEvent_0_31+0x20>)
 80051be:	685a      	ldr	r2, [r3, #4]
 80051c0:	4904      	ldr	r1, [pc, #16]	@ (80051d4 <LL_EXTI_EnableEvent_0_31+0x20>)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	4313      	orrs	r3, r2
 80051c6:	604b      	str	r3, [r1, #4]

}
 80051c8:	bf00      	nop
 80051ca:	370c      	adds	r7, #12
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr
 80051d4:	40010400 	.word	0x40010400

080051d8 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 80051d8:	b480      	push	{r7}
 80051da:	b083      	sub	sp, #12
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 80051e0:	4b06      	ldr	r3, [pc, #24]	@ (80051fc <LL_EXTI_DisableEvent_0_31+0x24>)
 80051e2:	685a      	ldr	r2, [r3, #4]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	43db      	mvns	r3, r3
 80051e8:	4904      	ldr	r1, [pc, #16]	@ (80051fc <LL_EXTI_DisableEvent_0_31+0x24>)
 80051ea:	4013      	ands	r3, r2
 80051ec:	604b      	str	r3, [r1, #4]
}
 80051ee:	bf00      	nop
 80051f0:	370c      	adds	r7, #12
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr
 80051fa:	bf00      	nop
 80051fc:	40010400 	.word	0x40010400

08005200 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8005200:	b480      	push	{r7}
 8005202:	b083      	sub	sp, #12
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8005208:	4b05      	ldr	r3, [pc, #20]	@ (8005220 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800520a:	689a      	ldr	r2, [r3, #8]
 800520c:	4904      	ldr	r1, [pc, #16]	@ (8005220 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	4313      	orrs	r3, r2
 8005212:	608b      	str	r3, [r1, #8]

}
 8005214:	bf00      	nop
 8005216:	370c      	adds	r7, #12
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr
 8005220:	40010400 	.word	0x40010400

08005224 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8005224:	b480      	push	{r7}
 8005226:	b083      	sub	sp, #12
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800522c:	4b06      	ldr	r3, [pc, #24]	@ (8005248 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800522e:	689a      	ldr	r2, [r3, #8]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	43db      	mvns	r3, r3
 8005234:	4904      	ldr	r1, [pc, #16]	@ (8005248 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8005236:	4013      	ands	r3, r2
 8005238:	608b      	str	r3, [r1, #8]

}
 800523a:	bf00      	nop
 800523c:	370c      	adds	r7, #12
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr
 8005246:	bf00      	nop
 8005248:	40010400 	.word	0x40010400

0800524c <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 800524c:	b480      	push	{r7}
 800524e:	b083      	sub	sp, #12
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8005254:	4b05      	ldr	r3, [pc, #20]	@ (800526c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8005256:	68da      	ldr	r2, [r3, #12]
 8005258:	4904      	ldr	r1, [pc, #16]	@ (800526c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4313      	orrs	r3, r2
 800525e:	60cb      	str	r3, [r1, #12]
}
 8005260:	bf00      	nop
 8005262:	370c      	adds	r7, #12
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr
 800526c:	40010400 	.word	0x40010400

08005270 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8005270:	b480      	push	{r7}
 8005272:	b083      	sub	sp, #12
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8005278:	4b06      	ldr	r3, [pc, #24]	@ (8005294 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800527a:	68da      	ldr	r2, [r3, #12]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	43db      	mvns	r3, r3
 8005280:	4904      	ldr	r1, [pc, #16]	@ (8005294 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8005282:	4013      	ands	r3, r2
 8005284:	60cb      	str	r3, [r1, #12]
}
 8005286:	bf00      	nop
 8005288:	370c      	adds	r7, #12
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr
 8005292:	bf00      	nop
 8005294:	40010400 	.word	0x40010400

08005298 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 80052a0:	4b07      	ldr	r3, [pc, #28]	@ (80052c0 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 80052a2:	695a      	ldr	r2, [r3, #20]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4013      	ands	r3, r2
 80052a8:	687a      	ldr	r2, [r7, #4]
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d101      	bne.n	80052b2 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 80052ae:	2301      	movs	r3, #1
 80052b0:	e000      	b.n	80052b4 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 80052b2:	2300      	movs	r3, #0
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	370c      	adds	r7, #12
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr
 80052c0:	40010400 	.word	0x40010400

080052c4 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b083      	sub	sp, #12
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80052cc:	4a04      	ldr	r2, [pc, #16]	@ (80052e0 <LL_EXTI_ClearFlag_0_31+0x1c>)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6153      	str	r3, [r2, #20]
}
 80052d2:	bf00      	nop
 80052d4:	370c      	adds	r7, #12
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr
 80052de:	bf00      	nop
 80052e0:	40010400 	.word	0x40010400

080052e4 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b088      	sub	sp, #32
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 80052ec:	2300      	movs	r3, #0
 80052ee:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80052f0:	2300      	movs	r3, #0
 80052f2:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d102      	bne.n	8005300 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	77fb      	strb	r3, [r7, #31]
 80052fe:	e0bc      	b.n	800547a <HAL_COMP_Init+0x196>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800530a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800530e:	d102      	bne.n	8005316 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	77fb      	strb	r3, [r7, #31]
 8005314:	e0b1      	b.n	800547a <HAL_COMP_Init+0x196>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if (hcomp->State == HAL_COMP_STATE_RESET)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	7f5b      	ldrb	r3, [r3, #29]
 800531a:	b2db      	uxtb	r3, r3
 800531c:	2b00      	cmp	r3, #0
 800531e:	d108      	bne.n	8005332 <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f7fc f8c9 	bl	80014c4 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800533c:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.InputMinus
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	695b      	ldr	r3, [r3, #20]
 800534c:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (hcomp->Init.InputMinus
 8005358:	4313      	orrs	r3, r2
 800535a:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	4b48      	ldr	r3, [pc, #288]	@ (8005484 <HAL_COMP_Init+0x1a0>)
 8005364:	4013      	ands	r3, r2
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	6812      	ldr	r2, [r2, #0]
 800536a:	6979      	ldr	r1, [r7, #20]
 800536c:	430b      	orrs	r3, r1
 800536e:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800537a:	2b00      	cmp	r3, #0
 800537c:	d016      	beq.n	80053ac <HAL_COMP_Init+0xc8>
 800537e:	69bb      	ldr	r3, [r7, #24]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d113      	bne.n	80053ac <HAL_COMP_Init+0xc8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005384:	4b40      	ldr	r3, [pc, #256]	@ (8005488 <HAL_COMP_Init+0x1a4>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	099b      	lsrs	r3, r3, #6
 800538a:	4a40      	ldr	r2, [pc, #256]	@ (800548c <HAL_COMP_Init+0x1a8>)
 800538c:	fba2 2303 	umull	r2, r3, r2, r3
 8005390:	099b      	lsrs	r3, r3, #6
 8005392:	1c5a      	adds	r2, r3, #1
 8005394:	4613      	mov	r3, r2
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	4413      	add	r3, r2
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 800539e:	e002      	b.n	80053a6 <HAL_COMP_Init+0xc2>
      {
        wait_loop_index--;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	3b01      	subs	r3, #1
 80053a4:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d1f9      	bne.n	80053a0 <HAL_COMP_Init+0xbc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a37      	ldr	r2, [pc, #220]	@ (8005490 <HAL_COMP_Init+0x1ac>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d012      	beq.n	80053dc <HAL_COMP_Init+0xf8>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a36      	ldr	r2, [pc, #216]	@ (8005494 <HAL_COMP_Init+0x1b0>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d00a      	beq.n	80053d6 <HAL_COMP_Init+0xf2>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a34      	ldr	r2, [pc, #208]	@ (8005498 <HAL_COMP_Init+0x1b4>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d102      	bne.n	80053d0 <HAL_COMP_Init+0xec>
 80053ca:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80053ce:	e007      	b.n	80053e0 <HAL_COMP_Init+0xfc>
 80053d0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80053d4:	e004      	b.n	80053e0 <HAL_COMP_Init+0xfc>
 80053d6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80053da:	e001      	b.n	80053e0 <HAL_COMP_Init+0xfc>
 80053dc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80053e0:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	699b      	ldr	r3, [r3, #24]
 80053e6:	f003 0303 	and.w	r3, r3, #3
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d037      	beq.n	800545e <HAL_COMP_Init+0x17a>
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	699b      	ldr	r3, [r3, #24]
 80053f2:	f003 0310 	and.w	r3, r3, #16
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d003      	beq.n	8005402 <HAL_COMP_Init+0x11e>
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 80053fa:	6938      	ldr	r0, [r7, #16]
 80053fc:	f7ff ff00 	bl	8005200 <LL_EXTI_EnableRisingTrig_0_31>
 8005400:	e002      	b.n	8005408 <HAL_COMP_Init+0x124>
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8005402:	6938      	ldr	r0, [r7, #16]
 8005404:	f7ff ff0e 	bl	8005224 <LL_EXTI_DisableRisingTrig_0_31>
#endif /* COMP7 */
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	699b      	ldr	r3, [r3, #24]
 800540c:	f003 0320 	and.w	r3, r3, #32
 8005410:	2b00      	cmp	r3, #0
 8005412:	d003      	beq.n	800541c <HAL_COMP_Init+0x138>
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8005414:	6938      	ldr	r0, [r7, #16]
 8005416:	f7ff ff19 	bl	800524c <LL_EXTI_EnableFallingTrig_0_31>
 800541a:	e002      	b.n	8005422 <HAL_COMP_Init+0x13e>
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 800541c:	6938      	ldr	r0, [r7, #16]
 800541e:	f7ff ff27 	bl	8005270 <LL_EXTI_DisableFallingTrig_0_31>
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
      }
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
 8005422:	6938      	ldr	r0, [r7, #16]
 8005424:	f7ff ff4e 	bl	80052c4 <LL_EXTI_ClearFlag_0_31>
#endif /* COMP7 */

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	699b      	ldr	r3, [r3, #24]
 800542c:	f003 0302 	and.w	r3, r3, #2
 8005430:	2b00      	cmp	r3, #0
 8005432:	d003      	beq.n	800543c <HAL_COMP_Init+0x158>
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
        }
#else
        LL_EXTI_EnableEvent_0_31(exti_line);
 8005434:	6938      	ldr	r0, [r7, #16]
 8005436:	f7ff febd 	bl	80051b4 <LL_EXTI_EnableEvent_0_31>
 800543a:	e002      	b.n	8005442 <HAL_COMP_Init+0x15e>
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
        }
#else
        LL_EXTI_DisableEvent_0_31(exti_line);
 800543c:	6938      	ldr	r0, [r7, #16]
 800543e:	f7ff fecb 	bl	80051d8 <LL_EXTI_DisableEvent_0_31>
#endif /* COMP7 */
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	699b      	ldr	r3, [r3, #24]
 8005446:	f003 0301 	and.w	r3, r3, #1
 800544a:	2b00      	cmp	r3, #0
 800544c:	d003      	beq.n	8005456 <HAL_COMP_Init+0x172>
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
        }
#else
        LL_EXTI_EnableIT_0_31(exti_line);
 800544e:	6938      	ldr	r0, [r7, #16]
 8005450:	f7ff fe8a 	bl	8005168 <LL_EXTI_EnableIT_0_31>
 8005454:	e009      	b.n	800546a <HAL_COMP_Init+0x186>
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
        }
#else
        LL_EXTI_DisableIT_0_31(exti_line);
 8005456:	6938      	ldr	r0, [r7, #16]
 8005458:	f7ff fe98 	bl	800518c <LL_EXTI_DisableIT_0_31>
 800545c:	e005      	b.n	800546a <HAL_COMP_Init+0x186>
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
      }
#else
      LL_EXTI_DisableEvent_0_31(exti_line);
 800545e:	6938      	ldr	r0, [r7, #16]
 8005460:	f7ff feba 	bl	80051d8 <LL_EXTI_DisableEvent_0_31>
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
      }
#else
      LL_EXTI_DisableIT_0_31(exti_line);
 8005464:	6938      	ldr	r0, [r7, #16]
 8005466:	f7ff fe91 	bl	800518c <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	7f5b      	ldrb	r3, [r3, #29]
 800546e:	b2db      	uxtb	r3, r3
 8005470:	2b00      	cmp	r3, #0
 8005472:	d102      	bne.n	800547a <HAL_COMP_Init+0x196>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 800547a:	7ffb      	ldrb	r3, [r7, #31]
}
 800547c:	4618      	mov	r0, r3
 800547e:	3720      	adds	r7, #32
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}
 8005484:	ff007e0f 	.word	0xff007e0f
 8005488:	20000000 	.word	0x20000000
 800548c:	053e2d63 	.word	0x053e2d63
 8005490:	40010200 	.word	0x40010200
 8005494:	40010204 	.word	0x40010204
 8005498:	40010208 	.word	0x40010208

0800549c <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ handler.
  * @param  hcomp  COMP handle
  * @retval None
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b084      	sub	sp, #16
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a17      	ldr	r2, [pc, #92]	@ (8005508 <HAL_COMP_IRQHandler+0x6c>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d012      	beq.n	80054d4 <HAL_COMP_IRQHandler+0x38>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a16      	ldr	r2, [pc, #88]	@ (800550c <HAL_COMP_IRQHandler+0x70>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d00a      	beq.n	80054ce <HAL_COMP_IRQHandler+0x32>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a14      	ldr	r2, [pc, #80]	@ (8005510 <HAL_COMP_IRQHandler+0x74>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d102      	bne.n	80054c8 <HAL_COMP_IRQHandler+0x2c>
 80054c2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80054c6:	e007      	b.n	80054d8 <HAL_COMP_IRQHandler+0x3c>
 80054c8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80054cc:	e004      	b.n	80054d8 <HAL_COMP_IRQHandler+0x3c>
 80054ce:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80054d2:	e001      	b.n	80054d8 <HAL_COMP_IRQHandler+0x3c>
 80054d4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80054d8:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_comp_exti_flag_set = 0UL;
 80054da:	2300      	movs	r3, #0
 80054dc:	60fb      	str	r3, [r7, #12]
    {
      tmp_comp_exti_flag_set = 1UL;
    }
  }
#else
  if (LL_EXTI_IsActiveFlag_0_31(exti_line) != 0UL)
 80054de:	68b8      	ldr	r0, [r7, #8]
 80054e0:	f7ff feda 	bl	8005298 <LL_EXTI_IsActiveFlag_0_31>
 80054e4:	4603      	mov	r3, r0
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d001      	beq.n	80054ee <HAL_COMP_IRQHandler+0x52>
  {
    tmp_comp_exti_flag_set = 1UL;
 80054ea:	2301      	movs	r3, #1
 80054ec:	60fb      	str	r3, [r7, #12]
  }
#endif /* COMP7 */

  if (tmp_comp_exti_flag_set != 0UL)
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d005      	beq.n	8005500 <HAL_COMP_IRQHandler+0x64>
    else
    {
      LL_EXTI_ClearFlag_0_31(exti_line);
    }
#else
    LL_EXTI_ClearFlag_0_31(exti_line);
 80054f4:	68b8      	ldr	r0, [r7, #8]
 80054f6:	f7ff fee5 	bl	80052c4 <LL_EXTI_ClearFlag_0_31>

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f000 f80a 	bl	8005514 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }
}
 8005500:	bf00      	nop
 8005502:	3710      	adds	r7, #16
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}
 8005508:	40010200 	.word	0x40010200
 800550c:	40010204 	.word	0x40010204
 8005510:	40010208 	.word	0x40010208

08005514 <HAL_COMP_TriggerCallback>:
  * @brief  Comparator trigger callback.
  * @param  hcomp  COMP handle
  * @retval None
  */
__weak void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp)
{
 8005514:	b480      	push	{r7}
 8005516:	b083      	sub	sp, #12
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  UNUSED(hcomp);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_COMP_TriggerCallback should be implemented in the user file
   */
}
 800551c:	bf00      	nop
 800551e:	370c      	adds	r7, #12
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr

08005528 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005528:	b480      	push	{r7}
 800552a:	b085      	sub	sp, #20
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f003 0307 	and.w	r3, r3, #7
 8005536:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005538:	4b0c      	ldr	r3, [pc, #48]	@ (800556c <__NVIC_SetPriorityGrouping+0x44>)
 800553a:	68db      	ldr	r3, [r3, #12]
 800553c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800553e:	68ba      	ldr	r2, [r7, #8]
 8005540:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005544:	4013      	ands	r3, r2
 8005546:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005550:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005554:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005558:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800555a:	4a04      	ldr	r2, [pc, #16]	@ (800556c <__NVIC_SetPriorityGrouping+0x44>)
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	60d3      	str	r3, [r2, #12]
}
 8005560:	bf00      	nop
 8005562:	3714      	adds	r7, #20
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr
 800556c:	e000ed00 	.word	0xe000ed00

08005570 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005570:	b480      	push	{r7}
 8005572:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005574:	4b04      	ldr	r3, [pc, #16]	@ (8005588 <__NVIC_GetPriorityGrouping+0x18>)
 8005576:	68db      	ldr	r3, [r3, #12]
 8005578:	0a1b      	lsrs	r3, r3, #8
 800557a:	f003 0307 	and.w	r3, r3, #7
}
 800557e:	4618      	mov	r0, r3
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr
 8005588:	e000ed00 	.word	0xe000ed00

0800558c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
 8005592:	4603      	mov	r3, r0
 8005594:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800559a:	2b00      	cmp	r3, #0
 800559c:	db0b      	blt.n	80055b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800559e:	79fb      	ldrb	r3, [r7, #7]
 80055a0:	f003 021f 	and.w	r2, r3, #31
 80055a4:	4907      	ldr	r1, [pc, #28]	@ (80055c4 <__NVIC_EnableIRQ+0x38>)
 80055a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055aa:	095b      	lsrs	r3, r3, #5
 80055ac:	2001      	movs	r0, #1
 80055ae:	fa00 f202 	lsl.w	r2, r0, r2
 80055b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80055b6:	bf00      	nop
 80055b8:	370c      	adds	r7, #12
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr
 80055c2:	bf00      	nop
 80055c4:	e000e100 	.word	0xe000e100

080055c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b083      	sub	sp, #12
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	4603      	mov	r3, r0
 80055d0:	6039      	str	r1, [r7, #0]
 80055d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	db0a      	blt.n	80055f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	b2da      	uxtb	r2, r3
 80055e0:	490c      	ldr	r1, [pc, #48]	@ (8005614 <__NVIC_SetPriority+0x4c>)
 80055e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055e6:	0112      	lsls	r2, r2, #4
 80055e8:	b2d2      	uxtb	r2, r2
 80055ea:	440b      	add	r3, r1
 80055ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80055f0:	e00a      	b.n	8005608 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	b2da      	uxtb	r2, r3
 80055f6:	4908      	ldr	r1, [pc, #32]	@ (8005618 <__NVIC_SetPriority+0x50>)
 80055f8:	79fb      	ldrb	r3, [r7, #7]
 80055fa:	f003 030f 	and.w	r3, r3, #15
 80055fe:	3b04      	subs	r3, #4
 8005600:	0112      	lsls	r2, r2, #4
 8005602:	b2d2      	uxtb	r2, r2
 8005604:	440b      	add	r3, r1
 8005606:	761a      	strb	r2, [r3, #24]
}
 8005608:	bf00      	nop
 800560a:	370c      	adds	r7, #12
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr
 8005614:	e000e100 	.word	0xe000e100
 8005618:	e000ed00 	.word	0xe000ed00

0800561c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800561c:	b480      	push	{r7}
 800561e:	b089      	sub	sp, #36	@ 0x24
 8005620:	af00      	add	r7, sp, #0
 8005622:	60f8      	str	r0, [r7, #12]
 8005624:	60b9      	str	r1, [r7, #8]
 8005626:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f003 0307 	and.w	r3, r3, #7
 800562e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005630:	69fb      	ldr	r3, [r7, #28]
 8005632:	f1c3 0307 	rsb	r3, r3, #7
 8005636:	2b04      	cmp	r3, #4
 8005638:	bf28      	it	cs
 800563a:	2304      	movcs	r3, #4
 800563c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	3304      	adds	r3, #4
 8005642:	2b06      	cmp	r3, #6
 8005644:	d902      	bls.n	800564c <NVIC_EncodePriority+0x30>
 8005646:	69fb      	ldr	r3, [r7, #28]
 8005648:	3b03      	subs	r3, #3
 800564a:	e000      	b.n	800564e <NVIC_EncodePriority+0x32>
 800564c:	2300      	movs	r3, #0
 800564e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005650:	f04f 32ff 	mov.w	r2, #4294967295
 8005654:	69bb      	ldr	r3, [r7, #24]
 8005656:	fa02 f303 	lsl.w	r3, r2, r3
 800565a:	43da      	mvns	r2, r3
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	401a      	ands	r2, r3
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005664:	f04f 31ff 	mov.w	r1, #4294967295
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	fa01 f303 	lsl.w	r3, r1, r3
 800566e:	43d9      	mvns	r1, r3
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005674:	4313      	orrs	r3, r2
         );
}
 8005676:	4618      	mov	r0, r3
 8005678:	3724      	adds	r7, #36	@ 0x24
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr
	...

08005684 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b082      	sub	sp, #8
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	3b01      	subs	r3, #1
 8005690:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005694:	d301      	bcc.n	800569a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005696:	2301      	movs	r3, #1
 8005698:	e00f      	b.n	80056ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800569a:	4a0a      	ldr	r2, [pc, #40]	@ (80056c4 <SysTick_Config+0x40>)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	3b01      	subs	r3, #1
 80056a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80056a2:	210f      	movs	r1, #15
 80056a4:	f04f 30ff 	mov.w	r0, #4294967295
 80056a8:	f7ff ff8e 	bl	80055c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80056ac:	4b05      	ldr	r3, [pc, #20]	@ (80056c4 <SysTick_Config+0x40>)
 80056ae:	2200      	movs	r2, #0
 80056b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80056b2:	4b04      	ldr	r3, [pc, #16]	@ (80056c4 <SysTick_Config+0x40>)
 80056b4:	2207      	movs	r2, #7
 80056b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80056b8:	2300      	movs	r3, #0
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3708      	adds	r7, #8
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}
 80056c2:	bf00      	nop
 80056c4:	e000e010 	.word	0xe000e010

080056c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b082      	sub	sp, #8
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f7ff ff29 	bl	8005528 <__NVIC_SetPriorityGrouping>
}
 80056d6:	bf00      	nop
 80056d8:	3708      	adds	r7, #8
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}

080056de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80056de:	b580      	push	{r7, lr}
 80056e0:	b086      	sub	sp, #24
 80056e2:	af00      	add	r7, sp, #0
 80056e4:	4603      	mov	r3, r0
 80056e6:	60b9      	str	r1, [r7, #8]
 80056e8:	607a      	str	r2, [r7, #4]
 80056ea:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80056ec:	f7ff ff40 	bl	8005570 <__NVIC_GetPriorityGrouping>
 80056f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	68b9      	ldr	r1, [r7, #8]
 80056f6:	6978      	ldr	r0, [r7, #20]
 80056f8:	f7ff ff90 	bl	800561c <NVIC_EncodePriority>
 80056fc:	4602      	mov	r2, r0
 80056fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005702:	4611      	mov	r1, r2
 8005704:	4618      	mov	r0, r3
 8005706:	f7ff ff5f 	bl	80055c8 <__NVIC_SetPriority>
}
 800570a:	bf00      	nop
 800570c:	3718      	adds	r7, #24
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}

08005712 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005712:	b580      	push	{r7, lr}
 8005714:	b082      	sub	sp, #8
 8005716:	af00      	add	r7, sp, #0
 8005718:	4603      	mov	r3, r0
 800571a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800571c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005720:	4618      	mov	r0, r3
 8005722:	f7ff ff33 	bl	800558c <__NVIC_EnableIRQ>
}
 8005726:	bf00      	nop
 8005728:	3708      	adds	r7, #8
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}

0800572e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800572e:	b580      	push	{r7, lr}
 8005730:	b082      	sub	sp, #8
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f7ff ffa4 	bl	8005684 <SysTick_Config>
 800573c:	4603      	mov	r3, r0
}
 800573e:	4618      	mov	r0, r3
 8005740:	3708      	adds	r7, #8
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}

08005746 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005746:	b580      	push	{r7, lr}
 8005748:	b082      	sub	sp, #8
 800574a:	af00      	add	r7, sp, #0
 800574c:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d101      	bne.n	8005758 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	e014      	b.n	8005782 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	791b      	ldrb	r3, [r3, #4]
 800575c:	b2db      	uxtb	r3, r3
 800575e:	2b00      	cmp	r3, #0
 8005760:	d105      	bne.n	800576e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2200      	movs	r2, #0
 8005766:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f7fb ff21 	bl	80015b0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2202      	movs	r2, #2
 8005772:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2201      	movs	r2, #1
 800577e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005780:	2300      	movs	r3, #0
}
 8005782:	4618      	mov	r0, r3
 8005784:	3708      	adds	r7, #8
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}
	...

0800578c <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b08a      	sub	sp, #40	@ 0x28
 8005790:	af00      	add	r7, sp, #0
 8005792:	60f8      	str	r0, [r7, #12]
 8005794:	60b9      	str	r1, [r7, #8]
 8005796:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005798:	2300      	movs	r3, #0
 800579a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d002      	beq.n	80057a8 <HAL_DAC_ConfigChannel+0x1c>
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d101      	bne.n	80057ac <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	e19e      	b.n	8005aea <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	795b      	ldrb	r3, [r3, #5]
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d101      	bne.n	80057b8 <HAL_DAC_ConfigChannel+0x2c>
 80057b4:	2302      	movs	r3, #2
 80057b6:	e198      	b.n	8005aea <HAL_DAC_ConfigChannel+0x35e>
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2201      	movs	r2, #1
 80057bc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2202      	movs	r2, #2
 80057c2:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	2b04      	cmp	r3, #4
 80057ca:	d17a      	bne.n	80058c2 <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80057cc:	f7fc ffb6 	bl	800273c <HAL_GetTick>
 80057d0:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d13d      	bne.n	8005854 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80057d8:	e018      	b.n	800580c <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80057da:	f7fc ffaf 	bl	800273c <HAL_GetTick>
 80057de:	4602      	mov	r2, r0
 80057e0:	69bb      	ldr	r3, [r7, #24]
 80057e2:	1ad3      	subs	r3, r2, r3
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d911      	bls.n	800580c <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d00a      	beq.n	800580c <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	691b      	ldr	r3, [r3, #16]
 80057fa:	f043 0208 	orr.w	r2, r3, #8
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2203      	movs	r2, #3
 8005806:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005808:	2303      	movs	r3, #3
 800580a:	e16e      	b.n	8005aea <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005812:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005816:	2b00      	cmp	r3, #0
 8005818:	d1df      	bne.n	80057da <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	68ba      	ldr	r2, [r7, #8]
 8005820:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005822:	641a      	str	r2, [r3, #64]	@ 0x40
 8005824:	e020      	b.n	8005868 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005826:	f7fc ff89 	bl	800273c <HAL_GetTick>
 800582a:	4602      	mov	r2, r0
 800582c:	69bb      	ldr	r3, [r7, #24]
 800582e:	1ad3      	subs	r3, r2, r3
 8005830:	2b01      	cmp	r3, #1
 8005832:	d90f      	bls.n	8005854 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800583a:	2b00      	cmp	r3, #0
 800583c:	da0a      	bge.n	8005854 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	691b      	ldr	r3, [r3, #16]
 8005842:	f043 0208 	orr.w	r2, r3, #8
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2203      	movs	r2, #3
 800584e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005850:	2303      	movs	r3, #3
 8005852:	e14a      	b.n	8005aea <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800585a:	2b00      	cmp	r3, #0
 800585c:	dbe3      	blt.n	8005826 <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	68ba      	ldr	r2, [r7, #8]
 8005864:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005866:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f003 0310 	and.w	r3, r3, #16
 8005874:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8005878:	fa01 f303 	lsl.w	r3, r1, r3
 800587c:	43db      	mvns	r3, r3
 800587e:	ea02 0103 	and.w	r1, r2, r3
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f003 0310 	and.w	r3, r3, #16
 800588c:	409a      	lsls	r2, r3
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	430a      	orrs	r2, r1
 8005894:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f003 0310 	and.w	r3, r3, #16
 80058a2:	21ff      	movs	r1, #255	@ 0xff
 80058a4:	fa01 f303 	lsl.w	r3, r1, r3
 80058a8:	43db      	mvns	r3, r3
 80058aa:	ea02 0103 	and.w	r1, r2, r3
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f003 0310 	and.w	r3, r3, #16
 80058b8:	409a      	lsls	r2, r3
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	430a      	orrs	r2, r1
 80058c0:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	69db      	ldr	r3, [r3, #28]
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d11d      	bne.n	8005906 <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058d0:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f003 0310 	and.w	r3, r3, #16
 80058d8:	221f      	movs	r2, #31
 80058da:	fa02 f303 	lsl.w	r3, r2, r3
 80058de:	43db      	mvns	r3, r3
 80058e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058e2:	4013      	ands	r3, r2
 80058e4:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	6a1b      	ldr	r3, [r3, #32]
 80058ea:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f003 0310 	and.w	r3, r3, #16
 80058f2:	697a      	ldr	r2, [r7, #20]
 80058f4:	fa02 f303 	lsl.w	r3, r2, r3
 80058f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058fa:	4313      	orrs	r3, r2
 80058fc:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005904:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800590c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f003 0310 	and.w	r3, r3, #16
 8005914:	2207      	movs	r2, #7
 8005916:	fa02 f303 	lsl.w	r3, r2, r3
 800591a:	43db      	mvns	r3, r3
 800591c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800591e:	4013      	ands	r3, r2
 8005920:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	699b      	ldr	r3, [r3, #24]
 8005926:	2b01      	cmp	r3, #1
 8005928:	d102      	bne.n	8005930 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 800592a:	2300      	movs	r3, #0
 800592c:	623b      	str	r3, [r7, #32]
 800592e:	e00f      	b.n	8005950 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	699b      	ldr	r3, [r3, #24]
 8005934:	2b02      	cmp	r3, #2
 8005936:	d102      	bne.n	800593e <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8005938:	2301      	movs	r3, #1
 800593a:	623b      	str	r3, [r7, #32]
 800593c:	e008      	b.n	8005950 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	695b      	ldr	r3, [r3, #20]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d102      	bne.n	800594c <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8005946:	2301      	movs	r3, #1
 8005948:	623b      	str	r3, [r7, #32]
 800594a:	e001      	b.n	8005950 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800594c:	2300      	movs	r3, #0
 800594e:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	689a      	ldr	r2, [r3, #8]
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	695b      	ldr	r3, [r3, #20]
 8005958:	4313      	orrs	r3, r2
 800595a:	6a3a      	ldr	r2, [r7, #32]
 800595c:	4313      	orrs	r3, r2
 800595e:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f003 0310 	and.w	r3, r3, #16
 8005966:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800596a:	fa02 f303 	lsl.w	r3, r2, r3
 800596e:	43db      	mvns	r3, r3
 8005970:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005972:	4013      	ands	r3, r2
 8005974:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	791b      	ldrb	r3, [r3, #4]
 800597a:	2b01      	cmp	r3, #1
 800597c:	d102      	bne.n	8005984 <HAL_DAC_ConfigChannel+0x1f8>
 800597e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005982:	e000      	b.n	8005986 <HAL_DAC_ConfigChannel+0x1fa>
 8005984:	2300      	movs	r3, #0
 8005986:	697a      	ldr	r2, [r7, #20]
 8005988:	4313      	orrs	r3, r2
 800598a:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	f003 0310 	and.w	r3, r3, #16
 8005992:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005996:	fa02 f303 	lsl.w	r3, r2, r3
 800599a:	43db      	mvns	r3, r3
 800599c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800599e:	4013      	ands	r3, r2
 80059a0:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	795b      	ldrb	r3, [r3, #5]
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d102      	bne.n	80059b0 <HAL_DAC_ConfigChannel+0x224>
 80059aa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80059ae:	e000      	b.n	80059b2 <HAL_DAC_ConfigChannel+0x226>
 80059b0:	2300      	movs	r3, #0
 80059b2:	697a      	ldr	r2, [r7, #20]
 80059b4:	4313      	orrs	r3, r2
 80059b6:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80059b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ba:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80059be:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	2b02      	cmp	r3, #2
 80059c6:	d114      	bne.n	80059f2 <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80059c8:	f001 fd92 	bl	80074f0 <HAL_RCC_GetHCLKFreq>
 80059cc:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	4a48      	ldr	r2, [pc, #288]	@ (8005af4 <HAL_DAC_ConfigChannel+0x368>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d904      	bls.n	80059e0 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80059d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80059de:	e00f      	b.n	8005a00 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	4a45      	ldr	r2, [pc, #276]	@ (8005af8 <HAL_DAC_ConfigChannel+0x36c>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d90a      	bls.n	80059fe <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80059e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80059ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80059f0:	e006      	b.n	8005a00 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059f8:	4313      	orrs	r3, r2
 80059fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80059fc:	e000      	b.n	8005a00 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80059fe:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f003 0310 	and.w	r3, r3, #16
 8005a06:	697a      	ldr	r2, [r7, #20]
 8005a08:	fa02 f303 	lsl.w	r3, r2, r3
 8005a0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a18:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	6819      	ldr	r1, [r3, #0]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f003 0310 	and.w	r3, r3, #16
 8005a26:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a2e:	43da      	mvns	r2, r3
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	400a      	ands	r2, r1
 8005a36:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f003 0310 	and.w	r3, r3, #16
 8005a46:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8005a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a4e:	43db      	mvns	r3, r3
 8005a50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a52:	4013      	ands	r3, r2
 8005a54:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	68db      	ldr	r3, [r3, #12]
 8005a5a:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f003 0310 	and.w	r3, r3, #16
 8005a62:	697a      	ldr	r2, [r7, #20]
 8005a64:	fa02 f303 	lsl.w	r3, r2, r3
 8005a68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a74:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	6819      	ldr	r1, [r3, #0]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f003 0310 	and.w	r3, r3, #16
 8005a82:	22c0      	movs	r2, #192	@ 0xc0
 8005a84:	fa02 f303 	lsl.w	r3, r2, r3
 8005a88:	43da      	mvns	r2, r3
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	400a      	ands	r2, r1
 8005a90:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	089b      	lsrs	r3, r3, #2
 8005a98:	f003 030f 	and.w	r3, r3, #15
 8005a9c:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	691b      	ldr	r3, [r3, #16]
 8005aa2:	089b      	lsrs	r3, r3, #2
 8005aa4:	021b      	lsls	r3, r3, #8
 8005aa6:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005aaa:	697a      	ldr	r2, [r7, #20]
 8005aac:	4313      	orrs	r3, r2
 8005aae:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f003 0310 	and.w	r3, r3, #16
 8005abc:	f640 710f 	movw	r1, #3855	@ 0xf0f
 8005ac0:	fa01 f303 	lsl.w	r3, r1, r3
 8005ac4:	43db      	mvns	r3, r3
 8005ac6:	ea02 0103 	and.w	r1, r2, r3
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f003 0310 	and.w	r3, r3, #16
 8005ad0:	697a      	ldr	r2, [r7, #20]
 8005ad2:	409a      	lsls	r2, r3
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	430a      	orrs	r2, r1
 8005ada:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8005ae8:	7ffb      	ldrb	r3, [r7, #31]
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3728      	adds	r7, #40	@ 0x28
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}
 8005af2:	bf00      	nop
 8005af4:	09896800 	.word	0x09896800
 8005af8:	04c4b400 	.word	0x04c4b400

08005afc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b084      	sub	sp, #16
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d101      	bne.n	8005b0e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e08d      	b.n	8005c2a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	461a      	mov	r2, r3
 8005b14:	4b47      	ldr	r3, [pc, #284]	@ (8005c34 <HAL_DMA_Init+0x138>)
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d80f      	bhi.n	8005b3a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	461a      	mov	r2, r3
 8005b20:	4b45      	ldr	r3, [pc, #276]	@ (8005c38 <HAL_DMA_Init+0x13c>)
 8005b22:	4413      	add	r3, r2
 8005b24:	4a45      	ldr	r2, [pc, #276]	@ (8005c3c <HAL_DMA_Init+0x140>)
 8005b26:	fba2 2303 	umull	r2, r3, r2, r3
 8005b2a:	091b      	lsrs	r3, r3, #4
 8005b2c:	009a      	lsls	r2, r3, #2
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4a42      	ldr	r2, [pc, #264]	@ (8005c40 <HAL_DMA_Init+0x144>)
 8005b36:	641a      	str	r2, [r3, #64]	@ 0x40
 8005b38:	e00e      	b.n	8005b58 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	461a      	mov	r2, r3
 8005b40:	4b40      	ldr	r3, [pc, #256]	@ (8005c44 <HAL_DMA_Init+0x148>)
 8005b42:	4413      	add	r3, r2
 8005b44:	4a3d      	ldr	r2, [pc, #244]	@ (8005c3c <HAL_DMA_Init+0x140>)
 8005b46:	fba2 2303 	umull	r2, r3, r2, r3
 8005b4a:	091b      	lsrs	r3, r3, #4
 8005b4c:	009a      	lsls	r2, r3, #2
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4a3c      	ldr	r2, [pc, #240]	@ (8005c48 <HAL_DMA_Init+0x14c>)
 8005b56:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2202      	movs	r2, #2
 8005b5c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8005b6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b72:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005b7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	691b      	ldr	r3, [r3, #16]
 8005b82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	699b      	ldr	r3, [r3, #24]
 8005b8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a1b      	ldr	r3, [r3, #32]
 8005b9a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005b9c:	68fa      	ldr	r2, [r7, #12]
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	68fa      	ldr	r2, [r7, #12]
 8005ba8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f000 fa76 	bl	800609c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005bb8:	d102      	bne.n	8005bc0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	685a      	ldr	r2, [r3, #4]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bc8:	b2d2      	uxtb	r2, r2
 8005bca:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bd0:	687a      	ldr	r2, [r7, #4]
 8005bd2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005bd4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d010      	beq.n	8005c00 <HAL_DMA_Init+0x104>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	2b04      	cmp	r3, #4
 8005be4:	d80c      	bhi.n	8005c00 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f000 fa96 	bl	8006118 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bf8:	687a      	ldr	r2, [r7, #4]
 8005bfa:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005bfc:	605a      	str	r2, [r3, #4]
 8005bfe:	e008      	b.n	8005c12 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2200      	movs	r2, #0
 8005c04:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2200      	movs	r2, #0
 8005c16:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2200      	movs	r2, #0
 8005c24:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005c28:	2300      	movs	r3, #0
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3710      	adds	r7, #16
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
 8005c32:	bf00      	nop
 8005c34:	40020407 	.word	0x40020407
 8005c38:	bffdfff8 	.word	0xbffdfff8
 8005c3c:	cccccccd 	.word	0xcccccccd
 8005c40:	40020000 	.word	0x40020000
 8005c44:	bffdfbf8 	.word	0xbffdfbf8
 8005c48:	40020400 	.word	0x40020400

08005c4c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b086      	sub	sp, #24
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	60f8      	str	r0, [r7, #12]
 8005c54:	60b9      	str	r1, [r7, #8]
 8005c56:	607a      	str	r2, [r7, #4]
 8005c58:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d101      	bne.n	8005c6c <HAL_DMA_Start_IT+0x20>
 8005c68:	2302      	movs	r3, #2
 8005c6a:	e066      	b.n	8005d3a <HAL_DMA_Start_IT+0xee>
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005c7a:	b2db      	uxtb	r3, r3
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d155      	bne.n	8005d2c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2202      	movs	r2, #2
 8005c84:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f022 0201 	bic.w	r2, r2, #1
 8005c9c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	687a      	ldr	r2, [r7, #4]
 8005ca2:	68b9      	ldr	r1, [r7, #8]
 8005ca4:	68f8      	ldr	r0, [r7, #12]
 8005ca6:	f000 f9bb 	bl	8006020 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d008      	beq.n	8005cc4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f042 020e 	orr.w	r2, r2, #14
 8005cc0:	601a      	str	r2, [r3, #0]
 8005cc2:	e00f      	b.n	8005ce4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	681a      	ldr	r2, [r3, #0]
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f022 0204 	bic.w	r2, r2, #4
 8005cd2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f042 020a 	orr.w	r2, r2, #10
 8005ce2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d007      	beq.n	8005d02 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005cfc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005d00:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d007      	beq.n	8005d1a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d14:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005d18:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f042 0201 	orr.w	r2, r2, #1
 8005d28:	601a      	str	r2, [r3, #0]
 8005d2a:	e005      	b.n	8005d38 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005d34:	2302      	movs	r3, #2
 8005d36:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005d38:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3718      	adds	r7, #24
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}

08005d42 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005d42:	b480      	push	{r7}
 8005d44:	b085      	sub	sp, #20
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005d54:	b2db      	uxtb	r3, r3
 8005d56:	2b02      	cmp	r3, #2
 8005d58:	d005      	beq.n	8005d66 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2204      	movs	r2, #4
 8005d5e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005d60:	2301      	movs	r3, #1
 8005d62:	73fb      	strb	r3, [r7, #15]
 8005d64:	e037      	b.n	8005dd6 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f022 020e 	bic.w	r2, r2, #14
 8005d74:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d80:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005d84:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f022 0201 	bic.w	r2, r2, #1
 8005d94:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d9a:	f003 021f 	and.w	r2, r3, #31
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005da2:	2101      	movs	r1, #1
 8005da4:	fa01 f202 	lsl.w	r2, r1, r2
 8005da8:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005db2:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d00c      	beq.n	8005dd6 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dc6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005dca:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005dd4:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2201      	movs	r2, #1
 8005dda:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2200      	movs	r2, #0
 8005de2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8005de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3714      	adds	r7, #20
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr

08005df4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b084      	sub	sp, #16
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005e06:	b2db      	uxtb	r3, r3
 8005e08:	2b02      	cmp	r3, #2
 8005e0a:	d00d      	beq.n	8005e28 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2204      	movs	r2, #4
 8005e10:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2201      	movs	r2, #1
 8005e16:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	73fb      	strb	r3, [r7, #15]
 8005e26:	e047      	b.n	8005eb8 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	681a      	ldr	r2, [r3, #0]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f022 020e 	bic.w	r2, r2, #14
 8005e36:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f022 0201 	bic.w	r2, r2, #1
 8005e46:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e4c:	681a      	ldr	r2, [r3, #0]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e52:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005e56:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e5c:	f003 021f 	and.w	r2, r3, #31
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e64:	2101      	movs	r1, #1
 8005e66:	fa01 f202 	lsl.w	r2, r1, r2
 8005e6a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e70:	687a      	ldr	r2, [r7, #4]
 8005e72:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005e74:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d00c      	beq.n	8005e98 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e88:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005e8c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005e96:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d003      	beq.n	8005eb8 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	4798      	blx	r3
    }
  }
  return status;
 8005eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3710      	adds	r7, #16
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}

08005ec2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005ec2:	b580      	push	{r7, lr}
 8005ec4:	b084      	sub	sp, #16
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ede:	f003 031f 	and.w	r3, r3, #31
 8005ee2:	2204      	movs	r2, #4
 8005ee4:	409a      	lsls	r2, r3
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	4013      	ands	r3, r2
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d026      	beq.n	8005f3c <HAL_DMA_IRQHandler+0x7a>
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	f003 0304 	and.w	r3, r3, #4
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d021      	beq.n	8005f3c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f003 0320 	and.w	r3, r3, #32
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d107      	bne.n	8005f16 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	681a      	ldr	r2, [r3, #0]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f022 0204 	bic.w	r2, r2, #4
 8005f14:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f1a:	f003 021f 	and.w	r2, r3, #31
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f22:	2104      	movs	r1, #4
 8005f24:	fa01 f202 	lsl.w	r2, r1, r2
 8005f28:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d071      	beq.n	8006016 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005f3a:	e06c      	b.n	8006016 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f40:	f003 031f 	and.w	r3, r3, #31
 8005f44:	2202      	movs	r2, #2
 8005f46:	409a      	lsls	r2, r3
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	4013      	ands	r3, r2
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d02e      	beq.n	8005fae <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	f003 0302 	and.w	r3, r3, #2
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d029      	beq.n	8005fae <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f003 0320 	and.w	r3, r3, #32
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d10b      	bne.n	8005f80 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f022 020a 	bic.w	r2, r2, #10
 8005f76:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f84:	f003 021f 	and.w	r2, r3, #31
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f8c:	2102      	movs	r1, #2
 8005f8e:	fa01 f202 	lsl.w	r2, r1, r2
 8005f92:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2200      	movs	r2, #0
 8005f98:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d038      	beq.n	8006016 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005fac:	e033      	b.n	8006016 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fb2:	f003 031f 	and.w	r3, r3, #31
 8005fb6:	2208      	movs	r2, #8
 8005fb8:	409a      	lsls	r2, r3
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	4013      	ands	r3, r2
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d02a      	beq.n	8006018 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	f003 0308 	and.w	r3, r3, #8
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d025      	beq.n	8006018 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f022 020e 	bic.w	r2, r2, #14
 8005fda:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fe0:	f003 021f 	and.w	r2, r3, #31
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fe8:	2101      	movs	r1, #1
 8005fea:	fa01 f202 	lsl.w	r2, r1, r2
 8005fee:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2200      	movs	r2, #0
 8006002:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800600a:	2b00      	cmp	r3, #0
 800600c:	d004      	beq.n	8006018 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006016:	bf00      	nop
 8006018:	bf00      	nop
}
 800601a:	3710      	adds	r7, #16
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}

08006020 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006020:	b480      	push	{r7}
 8006022:	b085      	sub	sp, #20
 8006024:	af00      	add	r7, sp, #0
 8006026:	60f8      	str	r0, [r7, #12]
 8006028:	60b9      	str	r1, [r7, #8]
 800602a:	607a      	str	r2, [r7, #4]
 800602c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006032:	68fa      	ldr	r2, [r7, #12]
 8006034:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006036:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800603c:	2b00      	cmp	r3, #0
 800603e:	d004      	beq.n	800604a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006044:	68fa      	ldr	r2, [r7, #12]
 8006046:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006048:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800604e:	f003 021f 	and.w	r2, r3, #31
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006056:	2101      	movs	r1, #1
 8006058:	fa01 f202 	lsl.w	r2, r1, r2
 800605c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	683a      	ldr	r2, [r7, #0]
 8006064:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	2b10      	cmp	r3, #16
 800606c:	d108      	bne.n	8006080 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	68ba      	ldr	r2, [r7, #8]
 800607c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800607e:	e007      	b.n	8006090 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	68ba      	ldr	r2, [r7, #8]
 8006086:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	60da      	str	r2, [r3, #12]
}
 8006090:	bf00      	nop
 8006092:	3714      	adds	r7, #20
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr

0800609c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800609c:	b480      	push	{r7}
 800609e:	b087      	sub	sp, #28
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	461a      	mov	r2, r3
 80060aa:	4b16      	ldr	r3, [pc, #88]	@ (8006104 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d802      	bhi.n	80060b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80060b0:	4b15      	ldr	r3, [pc, #84]	@ (8006108 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80060b2:	617b      	str	r3, [r7, #20]
 80060b4:	e001      	b.n	80060ba <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80060b6:	4b15      	ldr	r3, [pc, #84]	@ (800610c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80060b8:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	b2db      	uxtb	r3, r3
 80060c4:	3b08      	subs	r3, #8
 80060c6:	4a12      	ldr	r2, [pc, #72]	@ (8006110 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80060c8:	fba2 2303 	umull	r2, r3, r2, r3
 80060cc:	091b      	lsrs	r3, r3, #4
 80060ce:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060d4:	089b      	lsrs	r3, r3, #2
 80060d6:	009a      	lsls	r2, r3, #2
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	4413      	add	r3, r2
 80060dc:	461a      	mov	r2, r3
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	4a0b      	ldr	r2, [pc, #44]	@ (8006114 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80060e6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f003 031f 	and.w	r3, r3, #31
 80060ee:	2201      	movs	r2, #1
 80060f0:	409a      	lsls	r2, r3
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80060f6:	bf00      	nop
 80060f8:	371c      	adds	r7, #28
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr
 8006102:	bf00      	nop
 8006104:	40020407 	.word	0x40020407
 8006108:	40020800 	.word	0x40020800
 800610c:	40020820 	.word	0x40020820
 8006110:	cccccccd 	.word	0xcccccccd
 8006114:	40020880 	.word	0x40020880

08006118 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006118:	b480      	push	{r7}
 800611a:	b085      	sub	sp, #20
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	b2db      	uxtb	r3, r3
 8006126:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006128:	68fa      	ldr	r2, [r7, #12]
 800612a:	4b0b      	ldr	r3, [pc, #44]	@ (8006158 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800612c:	4413      	add	r3, r2
 800612e:	009b      	lsls	r3, r3, #2
 8006130:	461a      	mov	r2, r3
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	4a08      	ldr	r2, [pc, #32]	@ (800615c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800613a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	3b01      	subs	r3, #1
 8006140:	f003 031f 	and.w	r3, r3, #31
 8006144:	2201      	movs	r2, #1
 8006146:	409a      	lsls	r2, r3
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800614c:	bf00      	nop
 800614e:	3714      	adds	r7, #20
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr
 8006158:	1000823f 	.word	0x1000823f
 800615c:	40020940 	.word	0x40020940

08006160 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b084      	sub	sp, #16
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d101      	bne.n	8006172 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	e147      	b.n	8006402 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006178:	b2db      	uxtb	r3, r3
 800617a:	2b00      	cmp	r3, #0
 800617c:	d106      	bne.n	800618c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2200      	movs	r2, #0
 8006182:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f7fb faaa 	bl	80016e0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	699a      	ldr	r2, [r3, #24]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f022 0210 	bic.w	r2, r2, #16
 800619a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800619c:	f7fc face 	bl	800273c <HAL_GetTick>
 80061a0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80061a2:	e012      	b.n	80061ca <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80061a4:	f7fc faca 	bl	800273c <HAL_GetTick>
 80061a8:	4602      	mov	r2, r0
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	1ad3      	subs	r3, r2, r3
 80061ae:	2b0a      	cmp	r3, #10
 80061b0:	d90b      	bls.n	80061ca <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061b6:	f043 0201 	orr.w	r2, r3, #1
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2203      	movs	r2, #3
 80061c2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80061c6:	2301      	movs	r3, #1
 80061c8:	e11b      	b.n	8006402 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	699b      	ldr	r3, [r3, #24]
 80061d0:	f003 0308 	and.w	r3, r3, #8
 80061d4:	2b08      	cmp	r3, #8
 80061d6:	d0e5      	beq.n	80061a4 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	699a      	ldr	r2, [r3, #24]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f042 0201 	orr.w	r2, r2, #1
 80061e6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80061e8:	f7fc faa8 	bl	800273c <HAL_GetTick>
 80061ec:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80061ee:	e012      	b.n	8006216 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80061f0:	f7fc faa4 	bl	800273c <HAL_GetTick>
 80061f4:	4602      	mov	r2, r0
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	1ad3      	subs	r3, r2, r3
 80061fa:	2b0a      	cmp	r3, #10
 80061fc:	d90b      	bls.n	8006216 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006202:	f043 0201 	orr.w	r2, r3, #1
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2203      	movs	r2, #3
 800620e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	e0f5      	b.n	8006402 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	699b      	ldr	r3, [r3, #24]
 800621c:	f003 0301 	and.w	r3, r3, #1
 8006220:	2b00      	cmp	r3, #0
 8006222:	d0e5      	beq.n	80061f0 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	699a      	ldr	r2, [r3, #24]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f042 0202 	orr.w	r2, r2, #2
 8006232:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a74      	ldr	r2, [pc, #464]	@ (800640c <HAL_FDCAN_Init+0x2ac>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d103      	bne.n	8006246 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800623e:	4a74      	ldr	r2, [pc, #464]	@ (8006410 <HAL_FDCAN_Init+0x2b0>)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	7c1b      	ldrb	r3, [r3, #16]
 800624a:	2b01      	cmp	r3, #1
 800624c:	d108      	bne.n	8006260 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	699a      	ldr	r2, [r3, #24]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800625c:	619a      	str	r2, [r3, #24]
 800625e:	e007      	b.n	8006270 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	699a      	ldr	r2, [r3, #24]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800626e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	7c5b      	ldrb	r3, [r3, #17]
 8006274:	2b01      	cmp	r3, #1
 8006276:	d108      	bne.n	800628a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	699a      	ldr	r2, [r3, #24]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006286:	619a      	str	r2, [r3, #24]
 8006288:	e007      	b.n	800629a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	699a      	ldr	r2, [r3, #24]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006298:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	7c9b      	ldrb	r3, [r3, #18]
 800629e:	2b01      	cmp	r3, #1
 80062a0:	d108      	bne.n	80062b4 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	699a      	ldr	r2, [r3, #24]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80062b0:	619a      	str	r2, [r3, #24]
 80062b2:	e007      	b.n	80062c4 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	699a      	ldr	r2, [r3, #24]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80062c2:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	699b      	ldr	r3, [r3, #24]
 80062ca:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	689a      	ldr	r2, [r3, #8]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	430a      	orrs	r2, r1
 80062d8:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	699a      	ldr	r2, [r3, #24]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80062e8:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	691a      	ldr	r2, [r3, #16]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f022 0210 	bic.w	r2, r2, #16
 80062f8:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	68db      	ldr	r3, [r3, #12]
 80062fe:	2b01      	cmp	r3, #1
 8006300:	d108      	bne.n	8006314 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	699a      	ldr	r2, [r3, #24]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f042 0204 	orr.w	r2, r2, #4
 8006310:	619a      	str	r2, [r3, #24]
 8006312:	e02c      	b.n	800636e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	68db      	ldr	r3, [r3, #12]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d028      	beq.n	800636e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	2b02      	cmp	r3, #2
 8006322:	d01c      	beq.n	800635e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	699a      	ldr	r2, [r3, #24]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006332:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	691a      	ldr	r2, [r3, #16]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f042 0210 	orr.w	r2, r2, #16
 8006342:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	68db      	ldr	r3, [r3, #12]
 8006348:	2b03      	cmp	r3, #3
 800634a:	d110      	bne.n	800636e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	699a      	ldr	r2, [r3, #24]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f042 0220 	orr.w	r2, r2, #32
 800635a:	619a      	str	r2, [r3, #24]
 800635c:	e007      	b.n	800636e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	699a      	ldr	r2, [r3, #24]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f042 0220 	orr.w	r2, r2, #32
 800636c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	699b      	ldr	r3, [r3, #24]
 8006372:	3b01      	subs	r3, #1
 8006374:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	69db      	ldr	r3, [r3, #28]
 800637a:	3b01      	subs	r3, #1
 800637c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800637e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6a1b      	ldr	r3, [r3, #32]
 8006384:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006386:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	695b      	ldr	r3, [r3, #20]
 800638e:	3b01      	subs	r3, #1
 8006390:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006396:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006398:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	689b      	ldr	r3, [r3, #8]
 800639e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80063a2:	d115      	bne.n	80063d0 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063a8:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063ae:	3b01      	subs	r3, #1
 80063b0:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80063b2:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063b8:	3b01      	subs	r3, #1
 80063ba:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80063bc:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063c4:	3b01      	subs	r3, #1
 80063c6:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80063cc:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80063ce:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	430a      	orrs	r2, r1
 80063e2:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f000 f814 	bl	8006414 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2200      	movs	r2, #0
 80063f0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2200      	movs	r2, #0
 80063f6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2201      	movs	r2, #1
 80063fc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8006400:	2300      	movs	r3, #0
}
 8006402:	4618      	mov	r0, r3
 8006404:	3710      	adds	r7, #16
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}
 800640a:	bf00      	nop
 800640c:	40006400 	.word	0x40006400
 8006410:	40006500 	.word	0x40006500

08006414 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8006414:	b480      	push	{r7}
 8006416:	b085      	sub	sp, #20
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 800641c:	4b27      	ldr	r3, [pc, #156]	@ (80064bc <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 800641e:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	68ba      	ldr	r2, [r7, #8]
 8006424:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800642e:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006436:	041a      	lsls	r2, r3, #16
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	430a      	orrs	r2, r1
 800643e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006454:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800645c:	061a      	lsls	r2, r3, #24
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	430a      	orrs	r2, r1
 8006464:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	60fb      	str	r3, [r7, #12]
 8006494:	e005      	b.n	80064a2 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2200      	movs	r2, #0
 800649a:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	3304      	adds	r3, #4
 80064a0:	60fb      	str	r3, [r7, #12]
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80064a8:	68fa      	ldr	r2, [r7, #12]
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d3f3      	bcc.n	8006496 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 80064ae:	bf00      	nop
 80064b0:	bf00      	nop
 80064b2:	3714      	adds	r7, #20
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr
 80064bc:	4000a400 	.word	0x4000a400

080064c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b087      	sub	sp, #28
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
 80064c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80064ca:	2300      	movs	r3, #0
 80064cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80064ce:	e15a      	b.n	8006786 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	2101      	movs	r1, #1
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	fa01 f303 	lsl.w	r3, r1, r3
 80064dc:	4013      	ands	r3, r2
 80064de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	f000 814c 	beq.w	8006780 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	f003 0303 	and.w	r3, r3, #3
 80064f0:	2b01      	cmp	r3, #1
 80064f2:	d005      	beq.n	8006500 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80064fc:	2b02      	cmp	r3, #2
 80064fe:	d130      	bne.n	8006562 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	005b      	lsls	r3, r3, #1
 800650a:	2203      	movs	r2, #3
 800650c:	fa02 f303 	lsl.w	r3, r2, r3
 8006510:	43db      	mvns	r3, r3
 8006512:	693a      	ldr	r2, [r7, #16]
 8006514:	4013      	ands	r3, r2
 8006516:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	68da      	ldr	r2, [r3, #12]
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	005b      	lsls	r3, r3, #1
 8006520:	fa02 f303 	lsl.w	r3, r2, r3
 8006524:	693a      	ldr	r2, [r7, #16]
 8006526:	4313      	orrs	r3, r2
 8006528:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	693a      	ldr	r2, [r7, #16]
 800652e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006536:	2201      	movs	r2, #1
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	fa02 f303 	lsl.w	r3, r2, r3
 800653e:	43db      	mvns	r3, r3
 8006540:	693a      	ldr	r2, [r7, #16]
 8006542:	4013      	ands	r3, r2
 8006544:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	091b      	lsrs	r3, r3, #4
 800654c:	f003 0201 	and.w	r2, r3, #1
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	fa02 f303 	lsl.w	r3, r2, r3
 8006556:	693a      	ldr	r2, [r7, #16]
 8006558:	4313      	orrs	r3, r2
 800655a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	693a      	ldr	r2, [r7, #16]
 8006560:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	f003 0303 	and.w	r3, r3, #3
 800656a:	2b03      	cmp	r3, #3
 800656c:	d017      	beq.n	800659e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	68db      	ldr	r3, [r3, #12]
 8006572:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	005b      	lsls	r3, r3, #1
 8006578:	2203      	movs	r2, #3
 800657a:	fa02 f303 	lsl.w	r3, r2, r3
 800657e:	43db      	mvns	r3, r3
 8006580:	693a      	ldr	r2, [r7, #16]
 8006582:	4013      	ands	r3, r2
 8006584:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	689a      	ldr	r2, [r3, #8]
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	005b      	lsls	r3, r3, #1
 800658e:	fa02 f303 	lsl.w	r3, r2, r3
 8006592:	693a      	ldr	r2, [r7, #16]
 8006594:	4313      	orrs	r3, r2
 8006596:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	693a      	ldr	r2, [r7, #16]
 800659c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	f003 0303 	and.w	r3, r3, #3
 80065a6:	2b02      	cmp	r3, #2
 80065a8:	d123      	bne.n	80065f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	08da      	lsrs	r2, r3, #3
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	3208      	adds	r2, #8
 80065b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	f003 0307 	and.w	r3, r3, #7
 80065be:	009b      	lsls	r3, r3, #2
 80065c0:	220f      	movs	r2, #15
 80065c2:	fa02 f303 	lsl.w	r3, r2, r3
 80065c6:	43db      	mvns	r3, r3
 80065c8:	693a      	ldr	r2, [r7, #16]
 80065ca:	4013      	ands	r3, r2
 80065cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	691a      	ldr	r2, [r3, #16]
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	f003 0307 	and.w	r3, r3, #7
 80065d8:	009b      	lsls	r3, r3, #2
 80065da:	fa02 f303 	lsl.w	r3, r2, r3
 80065de:	693a      	ldr	r2, [r7, #16]
 80065e0:	4313      	orrs	r3, r2
 80065e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	08da      	lsrs	r2, r3, #3
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	3208      	adds	r2, #8
 80065ec:	6939      	ldr	r1, [r7, #16]
 80065ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	005b      	lsls	r3, r3, #1
 80065fc:	2203      	movs	r2, #3
 80065fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006602:	43db      	mvns	r3, r3
 8006604:	693a      	ldr	r2, [r7, #16]
 8006606:	4013      	ands	r3, r2
 8006608:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	f003 0203 	and.w	r2, r3, #3
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	005b      	lsls	r3, r3, #1
 8006616:	fa02 f303 	lsl.w	r3, r2, r3
 800661a:	693a      	ldr	r2, [r7, #16]
 800661c:	4313      	orrs	r3, r2
 800661e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	693a      	ldr	r2, [r7, #16]
 8006624:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800662e:	2b00      	cmp	r3, #0
 8006630:	f000 80a6 	beq.w	8006780 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006634:	4b5b      	ldr	r3, [pc, #364]	@ (80067a4 <HAL_GPIO_Init+0x2e4>)
 8006636:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006638:	4a5a      	ldr	r2, [pc, #360]	@ (80067a4 <HAL_GPIO_Init+0x2e4>)
 800663a:	f043 0301 	orr.w	r3, r3, #1
 800663e:	6613      	str	r3, [r2, #96]	@ 0x60
 8006640:	4b58      	ldr	r3, [pc, #352]	@ (80067a4 <HAL_GPIO_Init+0x2e4>)
 8006642:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006644:	f003 0301 	and.w	r3, r3, #1
 8006648:	60bb      	str	r3, [r7, #8]
 800664a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800664c:	4a56      	ldr	r2, [pc, #344]	@ (80067a8 <HAL_GPIO_Init+0x2e8>)
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	089b      	lsrs	r3, r3, #2
 8006652:	3302      	adds	r3, #2
 8006654:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006658:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	f003 0303 	and.w	r3, r3, #3
 8006660:	009b      	lsls	r3, r3, #2
 8006662:	220f      	movs	r2, #15
 8006664:	fa02 f303 	lsl.w	r3, r2, r3
 8006668:	43db      	mvns	r3, r3
 800666a:	693a      	ldr	r2, [r7, #16]
 800666c:	4013      	ands	r3, r2
 800666e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8006676:	d01f      	beq.n	80066b8 <HAL_GPIO_Init+0x1f8>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	4a4c      	ldr	r2, [pc, #304]	@ (80067ac <HAL_GPIO_Init+0x2ec>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d019      	beq.n	80066b4 <HAL_GPIO_Init+0x1f4>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	4a4b      	ldr	r2, [pc, #300]	@ (80067b0 <HAL_GPIO_Init+0x2f0>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d013      	beq.n	80066b0 <HAL_GPIO_Init+0x1f0>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	4a4a      	ldr	r2, [pc, #296]	@ (80067b4 <HAL_GPIO_Init+0x2f4>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d00d      	beq.n	80066ac <HAL_GPIO_Init+0x1ec>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	4a49      	ldr	r2, [pc, #292]	@ (80067b8 <HAL_GPIO_Init+0x2f8>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d007      	beq.n	80066a8 <HAL_GPIO_Init+0x1e8>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	4a48      	ldr	r2, [pc, #288]	@ (80067bc <HAL_GPIO_Init+0x2fc>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d101      	bne.n	80066a4 <HAL_GPIO_Init+0x1e4>
 80066a0:	2305      	movs	r3, #5
 80066a2:	e00a      	b.n	80066ba <HAL_GPIO_Init+0x1fa>
 80066a4:	2306      	movs	r3, #6
 80066a6:	e008      	b.n	80066ba <HAL_GPIO_Init+0x1fa>
 80066a8:	2304      	movs	r3, #4
 80066aa:	e006      	b.n	80066ba <HAL_GPIO_Init+0x1fa>
 80066ac:	2303      	movs	r3, #3
 80066ae:	e004      	b.n	80066ba <HAL_GPIO_Init+0x1fa>
 80066b0:	2302      	movs	r3, #2
 80066b2:	e002      	b.n	80066ba <HAL_GPIO_Init+0x1fa>
 80066b4:	2301      	movs	r3, #1
 80066b6:	e000      	b.n	80066ba <HAL_GPIO_Init+0x1fa>
 80066b8:	2300      	movs	r3, #0
 80066ba:	697a      	ldr	r2, [r7, #20]
 80066bc:	f002 0203 	and.w	r2, r2, #3
 80066c0:	0092      	lsls	r2, r2, #2
 80066c2:	4093      	lsls	r3, r2
 80066c4:	693a      	ldr	r2, [r7, #16]
 80066c6:	4313      	orrs	r3, r2
 80066c8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80066ca:	4937      	ldr	r1, [pc, #220]	@ (80067a8 <HAL_GPIO_Init+0x2e8>)
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	089b      	lsrs	r3, r3, #2
 80066d0:	3302      	adds	r3, #2
 80066d2:	693a      	ldr	r2, [r7, #16]
 80066d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80066d8:	4b39      	ldr	r3, [pc, #228]	@ (80067c0 <HAL_GPIO_Init+0x300>)
 80066da:	689b      	ldr	r3, [r3, #8]
 80066dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	43db      	mvns	r3, r3
 80066e2:	693a      	ldr	r2, [r7, #16]
 80066e4:	4013      	ands	r3, r2
 80066e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d003      	beq.n	80066fc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80066f4:	693a      	ldr	r2, [r7, #16]
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	4313      	orrs	r3, r2
 80066fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80066fc:	4a30      	ldr	r2, [pc, #192]	@ (80067c0 <HAL_GPIO_Init+0x300>)
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006702:	4b2f      	ldr	r3, [pc, #188]	@ (80067c0 <HAL_GPIO_Init+0x300>)
 8006704:	68db      	ldr	r3, [r3, #12]
 8006706:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	43db      	mvns	r3, r3
 800670c:	693a      	ldr	r2, [r7, #16]
 800670e:	4013      	ands	r3, r2
 8006710:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800671a:	2b00      	cmp	r3, #0
 800671c:	d003      	beq.n	8006726 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800671e:	693a      	ldr	r2, [r7, #16]
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	4313      	orrs	r3, r2
 8006724:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006726:	4a26      	ldr	r2, [pc, #152]	@ (80067c0 <HAL_GPIO_Init+0x300>)
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800672c:	4b24      	ldr	r3, [pc, #144]	@ (80067c0 <HAL_GPIO_Init+0x300>)
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	43db      	mvns	r3, r3
 8006736:	693a      	ldr	r2, [r7, #16]
 8006738:	4013      	ands	r3, r2
 800673a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006744:	2b00      	cmp	r3, #0
 8006746:	d003      	beq.n	8006750 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006748:	693a      	ldr	r2, [r7, #16]
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	4313      	orrs	r3, r2
 800674e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006750:	4a1b      	ldr	r2, [pc, #108]	@ (80067c0 <HAL_GPIO_Init+0x300>)
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006756:	4b1a      	ldr	r3, [pc, #104]	@ (80067c0 <HAL_GPIO_Init+0x300>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	43db      	mvns	r3, r3
 8006760:	693a      	ldr	r2, [r7, #16]
 8006762:	4013      	ands	r3, r2
 8006764:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800676e:	2b00      	cmp	r3, #0
 8006770:	d003      	beq.n	800677a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8006772:	693a      	ldr	r2, [r7, #16]
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	4313      	orrs	r3, r2
 8006778:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800677a:	4a11      	ldr	r2, [pc, #68]	@ (80067c0 <HAL_GPIO_Init+0x300>)
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	3301      	adds	r3, #1
 8006784:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	fa22 f303 	lsr.w	r3, r2, r3
 8006790:	2b00      	cmp	r3, #0
 8006792:	f47f ae9d 	bne.w	80064d0 <HAL_GPIO_Init+0x10>
  }
}
 8006796:	bf00      	nop
 8006798:	bf00      	nop
 800679a:	371c      	adds	r7, #28
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr
 80067a4:	40021000 	.word	0x40021000
 80067a8:	40010000 	.word	0x40010000
 80067ac:	48000400 	.word	0x48000400
 80067b0:	48000800 	.word	0x48000800
 80067b4:	48000c00 	.word	0x48000c00
 80067b8:	48001000 	.word	0x48001000
 80067bc:	48001400 	.word	0x48001400
 80067c0:	40010400 	.word	0x40010400

080067c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b085      	sub	sp, #20
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	460b      	mov	r3, r1
 80067ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	691a      	ldr	r2, [r3, #16]
 80067d4:	887b      	ldrh	r3, [r7, #2]
 80067d6:	4013      	ands	r3, r2
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d002      	beq.n	80067e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80067dc:	2301      	movs	r3, #1
 80067de:	73fb      	strb	r3, [r7, #15]
 80067e0:	e001      	b.n	80067e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80067e2:	2300      	movs	r3, #0
 80067e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80067e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3714      	adds	r7, #20
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr

080067f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b083      	sub	sp, #12
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
 80067fc:	460b      	mov	r3, r1
 80067fe:	807b      	strh	r3, [r7, #2]
 8006800:	4613      	mov	r3, r2
 8006802:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006804:	787b      	ldrb	r3, [r7, #1]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d003      	beq.n	8006812 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800680a:	887a      	ldrh	r2, [r7, #2]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006810:	e002      	b.n	8006818 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006812:	887a      	ldrh	r2, [r7, #2]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006818:	bf00      	nop
 800681a:	370c      	adds	r7, #12
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr

08006824 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b084      	sub	sp, #16
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800682c:	2300      	movs	r3, #0
 800682e:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d101      	bne.n	800683a <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 8006836:	2301      	movs	r3, #1
 8006838:	e0bb      	b.n	80069b2 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8006840:	b2db      	uxtb	r3, r3
 8006842:	2b05      	cmp	r3, #5
 8006844:	d101      	bne.n	800684a <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8006846:	2301      	movs	r3, #1
 8006848:	e0b3      	b.n	80069b2 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8006850:	b2db      	uxtb	r3, r3
 8006852:	2b02      	cmp	r3, #2
 8006854:	d101      	bne.n	800685a <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	e0ab      	b.n	80069b2 <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800685a:	4b58      	ldr	r3, [pc, #352]	@ (80069bc <HAL_OPAMP_Init+0x198>)
 800685c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800685e:	4a57      	ldr	r2, [pc, #348]	@ (80069bc <HAL_OPAMP_Init+0x198>)
 8006860:	f043 0301 	orr.w	r3, r3, #1
 8006864:	6613      	str	r3, [r2, #96]	@ 0x60
 8006866:	4b55      	ldr	r3, [pc, #340]	@ (80069bc <HAL_OPAMP_Init+0x198>)
 8006868:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800686a:	f003 0301 	and.w	r3, r3, #1
 800686e:	60bb      	str	r3, [r7, #8]
 8006870:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8006878:	b2db      	uxtb	r3, r3
 800687a:	2b00      	cmp	r3, #0
 800687c:	d103      	bne.n	8006886 <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2200      	movs	r2, #0
 8006882:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f7fb f94a 	bl	8001b20 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	689b      	ldr	r3, [r3, #8]
 8006890:	2b40      	cmp	r3, #64	@ 0x40
 8006892:	d003      	beq.n	800689c <HAL_OPAMP_Init+0x78>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	689b      	ldr	r3, [r3, #8]
 8006898:	2b60      	cmp	r3, #96	@ 0x60
 800689a:	d133      	bne.n	8006904 <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f023 0110 	bic.w	r1, r3, #16
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	430a      	orrs	r2, r1
 80068b0:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	681a      	ldr	r2, [r3, #0]
 80068b8:	4b41      	ldr	r3, [pc, #260]	@ (80069c0 <HAL_OPAMP_Init+0x19c>)
 80068ba:	4013      	ands	r3, r2
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	6851      	ldr	r1, [r2, #4]
 80068c0:	687a      	ldr	r2, [r7, #4]
 80068c2:	6892      	ldr	r2, [r2, #8]
 80068c4:	4311      	orrs	r1, r2
 80068c6:	687a      	ldr	r2, [r7, #4]
 80068c8:	6912      	ldr	r2, [r2, #16]
 80068ca:	430a      	orrs	r2, r1
 80068cc:	6879      	ldr	r1, [r7, #4]
 80068ce:	7d09      	ldrb	r1, [r1, #20]
 80068d0:	2901      	cmp	r1, #1
 80068d2:	d102      	bne.n	80068da <HAL_OPAMP_Init+0xb6>
 80068d4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80068d8:	e000      	b.n	80068dc <HAL_OPAMP_Init+0xb8>
 80068da:	2100      	movs	r1, #0
 80068dc:	4311      	orrs	r1, r2
 80068de:	687a      	ldr	r2, [r7, #4]
 80068e0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80068e2:	4311      	orrs	r1, r2
 80068e4:	687a      	ldr	r2, [r7, #4]
 80068e6:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80068e8:	4311      	orrs	r1, r2
 80068ea:	687a      	ldr	r2, [r7, #4]
 80068ec:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80068ee:	04d2      	lsls	r2, r2, #19
 80068f0:	4311      	orrs	r1, r2
 80068f2:	687a      	ldr	r2, [r7, #4]
 80068f4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80068f6:	0612      	lsls	r2, r2, #24
 80068f8:	4311      	orrs	r1, r2
 80068fa:	687a      	ldr	r2, [r7, #4]
 80068fc:	6812      	ldr	r2, [r2, #0]
 80068fe:	430b      	orrs	r3, r1
 8006900:	6013      	str	r3, [r2, #0]
 8006902:	e035      	b.n	8006970 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f023 0110 	bic.w	r1, r3, #16
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	430a      	orrs	r2, r1
 8006918:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	681a      	ldr	r2, [r3, #0]
 8006920:	4b27      	ldr	r3, [pc, #156]	@ (80069c0 <HAL_OPAMP_Init+0x19c>)
 8006922:	4013      	ands	r3, r2
 8006924:	687a      	ldr	r2, [r7, #4]
 8006926:	6851      	ldr	r1, [r2, #4]
 8006928:	687a      	ldr	r2, [r7, #4]
 800692a:	6892      	ldr	r2, [r2, #8]
 800692c:	4311      	orrs	r1, r2
 800692e:	687a      	ldr	r2, [r7, #4]
 8006930:	68d2      	ldr	r2, [r2, #12]
 8006932:	4311      	orrs	r1, r2
 8006934:	687a      	ldr	r2, [r7, #4]
 8006936:	6912      	ldr	r2, [r2, #16]
 8006938:	430a      	orrs	r2, r1
 800693a:	6879      	ldr	r1, [r7, #4]
 800693c:	7d09      	ldrb	r1, [r1, #20]
 800693e:	2901      	cmp	r1, #1
 8006940:	d102      	bne.n	8006948 <HAL_OPAMP_Init+0x124>
 8006942:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006946:	e000      	b.n	800694a <HAL_OPAMP_Init+0x126>
 8006948:	2100      	movs	r1, #0
 800694a:	4311      	orrs	r1, r2
 800694c:	687a      	ldr	r2, [r7, #4]
 800694e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006950:	4311      	orrs	r1, r2
 8006952:	687a      	ldr	r2, [r7, #4]
 8006954:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006956:	4311      	orrs	r1, r2
 8006958:	687a      	ldr	r2, [r7, #4]
 800695a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800695c:	04d2      	lsls	r2, r2, #19
 800695e:	4311      	orrs	r1, r2
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006964:	0612      	lsls	r2, r2, #24
 8006966:	4311      	orrs	r1, r2
 8006968:	687a      	ldr	r2, [r7, #4]
 800696a:	6812      	ldr	r2, [r2, #0]
 800696c:	430b      	orrs	r3, r1
 800696e:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	699b      	ldr	r3, [r3, #24]
 8006976:	2b00      	cmp	r3, #0
 8006978:	db10      	blt.n	800699c <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	699b      	ldr	r3, [r3, #24]
 8006980:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	699a      	ldr	r2, [r3, #24]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	69db      	ldr	r3, [r3, #28]
 800698c:	431a      	orrs	r2, r3
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6a1b      	ldr	r3, [r3, #32]
 8006992:	431a      	orrs	r2, r3
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	430a      	orrs	r2, r1
 800699a:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80069a2:	b2db      	uxtb	r3, r3
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d103      	bne.n	80069b0 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2201      	movs	r2, #1
 80069ac:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 80069b0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3710      	adds	r7, #16
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}
 80069ba:	bf00      	nop
 80069bc:	40021000 	.word	0x40021000
 80069c0:	e0003e11 	.word	0xe0003e11

080069c4 <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b085      	sub	sp, #20
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80069cc:	2300      	movs	r3, #0
 80069ce:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d102      	bne.n	80069dc <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 80069d6:	2301      	movs	r3, #1
 80069d8:	73fb      	strb	r3, [r7, #15]
 80069da:	e01d      	b.n	8006a18 <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80069e2:	b2db      	uxtb	r3, r3
 80069e4:	2b05      	cmp	r3, #5
 80069e6:	d102      	bne.n	80069ee <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 80069e8:	2301      	movs	r3, #1
 80069ea:	73fb      	strb	r3, [r7, #15]
 80069ec:	e014      	b.n	8006a18 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80069f4:	b2db      	uxtb	r3, r3
 80069f6:	2b01      	cmp	r3, #1
 80069f8:	d10c      	bne.n	8006a14 <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	681a      	ldr	r2, [r3, #0]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f042 0201 	orr.w	r2, r2, #1
 8006a08:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2204      	movs	r2, #4
 8006a0e:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8006a12:	e001      	b.n	8006a18 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 8006a14:	2301      	movs	r3, #1
 8006a16:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 8006a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3714      	adds	r7, #20
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a24:	4770      	bx	lr
	...

08006a28 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b085      	sub	sp, #20
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d141      	bne.n	8006aba <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006a36:	4b4b      	ldr	r3, [pc, #300]	@ (8006b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006a3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a42:	d131      	bne.n	8006aa8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006a44:	4b47      	ldr	r3, [pc, #284]	@ (8006b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a4a:	4a46      	ldr	r2, [pc, #280]	@ (8006b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006a50:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006a54:	4b43      	ldr	r3, [pc, #268]	@ (8006b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006a5c:	4a41      	ldr	r2, [pc, #260]	@ (8006b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a5e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006a62:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006a64:	4b40      	ldr	r3, [pc, #256]	@ (8006b68 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	2232      	movs	r2, #50	@ 0x32
 8006a6a:	fb02 f303 	mul.w	r3, r2, r3
 8006a6e:	4a3f      	ldr	r2, [pc, #252]	@ (8006b6c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006a70:	fba2 2303 	umull	r2, r3, r2, r3
 8006a74:	0c9b      	lsrs	r3, r3, #18
 8006a76:	3301      	adds	r3, #1
 8006a78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006a7a:	e002      	b.n	8006a82 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	3b01      	subs	r3, #1
 8006a80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006a82:	4b38      	ldr	r3, [pc, #224]	@ (8006b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a84:	695b      	ldr	r3, [r3, #20]
 8006a86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a8e:	d102      	bne.n	8006a96 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d1f2      	bne.n	8006a7c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006a96:	4b33      	ldr	r3, [pc, #204]	@ (8006b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a98:	695b      	ldr	r3, [r3, #20]
 8006a9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006aa2:	d158      	bne.n	8006b56 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006aa4:	2303      	movs	r3, #3
 8006aa6:	e057      	b.n	8006b58 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006aa8:	4b2e      	ldr	r3, [pc, #184]	@ (8006b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006aaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006aae:	4a2d      	ldr	r2, [pc, #180]	@ (8006b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ab0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ab4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006ab8:	e04d      	b.n	8006b56 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ac0:	d141      	bne.n	8006b46 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006ac2:	4b28      	ldr	r3, [pc, #160]	@ (8006b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006aca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ace:	d131      	bne.n	8006b34 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006ad0:	4b24      	ldr	r3, [pc, #144]	@ (8006b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ad2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ad6:	4a23      	ldr	r2, [pc, #140]	@ (8006b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ad8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006adc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006ae0:	4b20      	ldr	r3, [pc, #128]	@ (8006b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006ae8:	4a1e      	ldr	r2, [pc, #120]	@ (8006b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006aea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006aee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006af0:	4b1d      	ldr	r3, [pc, #116]	@ (8006b68 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	2232      	movs	r2, #50	@ 0x32
 8006af6:	fb02 f303 	mul.w	r3, r2, r3
 8006afa:	4a1c      	ldr	r2, [pc, #112]	@ (8006b6c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006afc:	fba2 2303 	umull	r2, r3, r2, r3
 8006b00:	0c9b      	lsrs	r3, r3, #18
 8006b02:	3301      	adds	r3, #1
 8006b04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006b06:	e002      	b.n	8006b0e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	3b01      	subs	r3, #1
 8006b0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006b0e:	4b15      	ldr	r3, [pc, #84]	@ (8006b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b10:	695b      	ldr	r3, [r3, #20]
 8006b12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b1a:	d102      	bne.n	8006b22 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d1f2      	bne.n	8006b08 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006b22:	4b10      	ldr	r3, [pc, #64]	@ (8006b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b24:	695b      	ldr	r3, [r3, #20]
 8006b26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b2e:	d112      	bne.n	8006b56 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006b30:	2303      	movs	r3, #3
 8006b32:	e011      	b.n	8006b58 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006b34:	4b0b      	ldr	r3, [pc, #44]	@ (8006b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b3a:	4a0a      	ldr	r2, [pc, #40]	@ (8006b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b40:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006b44:	e007      	b.n	8006b56 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006b46:	4b07      	ldr	r3, [pc, #28]	@ (8006b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006b4e:	4a05      	ldr	r2, [pc, #20]	@ (8006b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b50:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006b54:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006b56:	2300      	movs	r3, #0
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3714      	adds	r7, #20
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b62:	4770      	bx	lr
 8006b64:	40007000 	.word	0x40007000
 8006b68:	20000000 	.word	0x20000000
 8006b6c:	431bde83 	.word	0x431bde83

08006b70 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006b70:	b480      	push	{r7}
 8006b72:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006b74:	4b05      	ldr	r3, [pc, #20]	@ (8006b8c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006b76:	689b      	ldr	r3, [r3, #8]
 8006b78:	4a04      	ldr	r2, [pc, #16]	@ (8006b8c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006b7a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006b7e:	6093      	str	r3, [r2, #8]
}
 8006b80:	bf00      	nop
 8006b82:	46bd      	mov	sp, r7
 8006b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b88:	4770      	bx	lr
 8006b8a:	bf00      	nop
 8006b8c:	40007000 	.word	0x40007000

08006b90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b088      	sub	sp, #32
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d101      	bne.n	8006ba2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	e2fe      	b.n	80071a0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f003 0301 	and.w	r3, r3, #1
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d075      	beq.n	8006c9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006bae:	4b97      	ldr	r3, [pc, #604]	@ (8006e0c <HAL_RCC_OscConfig+0x27c>)
 8006bb0:	689b      	ldr	r3, [r3, #8]
 8006bb2:	f003 030c 	and.w	r3, r3, #12
 8006bb6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006bb8:	4b94      	ldr	r3, [pc, #592]	@ (8006e0c <HAL_RCC_OscConfig+0x27c>)
 8006bba:	68db      	ldr	r3, [r3, #12]
 8006bbc:	f003 0303 	and.w	r3, r3, #3
 8006bc0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006bc2:	69bb      	ldr	r3, [r7, #24]
 8006bc4:	2b0c      	cmp	r3, #12
 8006bc6:	d102      	bne.n	8006bce <HAL_RCC_OscConfig+0x3e>
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	2b03      	cmp	r3, #3
 8006bcc:	d002      	beq.n	8006bd4 <HAL_RCC_OscConfig+0x44>
 8006bce:	69bb      	ldr	r3, [r7, #24]
 8006bd0:	2b08      	cmp	r3, #8
 8006bd2:	d10b      	bne.n	8006bec <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006bd4:	4b8d      	ldr	r3, [pc, #564]	@ (8006e0c <HAL_RCC_OscConfig+0x27c>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d05b      	beq.n	8006c98 <HAL_RCC_OscConfig+0x108>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d157      	bne.n	8006c98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006be8:	2301      	movs	r3, #1
 8006bea:	e2d9      	b.n	80071a0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006bf4:	d106      	bne.n	8006c04 <HAL_RCC_OscConfig+0x74>
 8006bf6:	4b85      	ldr	r3, [pc, #532]	@ (8006e0c <HAL_RCC_OscConfig+0x27c>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a84      	ldr	r2, [pc, #528]	@ (8006e0c <HAL_RCC_OscConfig+0x27c>)
 8006bfc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c00:	6013      	str	r3, [r2, #0]
 8006c02:	e01d      	b.n	8006c40 <HAL_RCC_OscConfig+0xb0>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006c0c:	d10c      	bne.n	8006c28 <HAL_RCC_OscConfig+0x98>
 8006c0e:	4b7f      	ldr	r3, [pc, #508]	@ (8006e0c <HAL_RCC_OscConfig+0x27c>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a7e      	ldr	r2, [pc, #504]	@ (8006e0c <HAL_RCC_OscConfig+0x27c>)
 8006c14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006c18:	6013      	str	r3, [r2, #0]
 8006c1a:	4b7c      	ldr	r3, [pc, #496]	@ (8006e0c <HAL_RCC_OscConfig+0x27c>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a7b      	ldr	r2, [pc, #492]	@ (8006e0c <HAL_RCC_OscConfig+0x27c>)
 8006c20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c24:	6013      	str	r3, [r2, #0]
 8006c26:	e00b      	b.n	8006c40 <HAL_RCC_OscConfig+0xb0>
 8006c28:	4b78      	ldr	r3, [pc, #480]	@ (8006e0c <HAL_RCC_OscConfig+0x27c>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a77      	ldr	r2, [pc, #476]	@ (8006e0c <HAL_RCC_OscConfig+0x27c>)
 8006c2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006c32:	6013      	str	r3, [r2, #0]
 8006c34:	4b75      	ldr	r3, [pc, #468]	@ (8006e0c <HAL_RCC_OscConfig+0x27c>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a74      	ldr	r2, [pc, #464]	@ (8006e0c <HAL_RCC_OscConfig+0x27c>)
 8006c3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006c3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d013      	beq.n	8006c70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c48:	f7fb fd78 	bl	800273c <HAL_GetTick>
 8006c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006c4e:	e008      	b.n	8006c62 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c50:	f7fb fd74 	bl	800273c <HAL_GetTick>
 8006c54:	4602      	mov	r2, r0
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	1ad3      	subs	r3, r2, r3
 8006c5a:	2b64      	cmp	r3, #100	@ 0x64
 8006c5c:	d901      	bls.n	8006c62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006c5e:	2303      	movs	r3, #3
 8006c60:	e29e      	b.n	80071a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006c62:	4b6a      	ldr	r3, [pc, #424]	@ (8006e0c <HAL_RCC_OscConfig+0x27c>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d0f0      	beq.n	8006c50 <HAL_RCC_OscConfig+0xc0>
 8006c6e:	e014      	b.n	8006c9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c70:	f7fb fd64 	bl	800273c <HAL_GetTick>
 8006c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006c76:	e008      	b.n	8006c8a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c78:	f7fb fd60 	bl	800273c <HAL_GetTick>
 8006c7c:	4602      	mov	r2, r0
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	1ad3      	subs	r3, r2, r3
 8006c82:	2b64      	cmp	r3, #100	@ 0x64
 8006c84:	d901      	bls.n	8006c8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006c86:	2303      	movs	r3, #3
 8006c88:	e28a      	b.n	80071a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006c8a:	4b60      	ldr	r3, [pc, #384]	@ (8006e0c <HAL_RCC_OscConfig+0x27c>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d1f0      	bne.n	8006c78 <HAL_RCC_OscConfig+0xe8>
 8006c96:	e000      	b.n	8006c9a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f003 0302 	and.w	r3, r3, #2
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d075      	beq.n	8006d92 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ca6:	4b59      	ldr	r3, [pc, #356]	@ (8006e0c <HAL_RCC_OscConfig+0x27c>)
 8006ca8:	689b      	ldr	r3, [r3, #8]
 8006caa:	f003 030c 	and.w	r3, r3, #12
 8006cae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006cb0:	4b56      	ldr	r3, [pc, #344]	@ (8006e0c <HAL_RCC_OscConfig+0x27c>)
 8006cb2:	68db      	ldr	r3, [r3, #12]
 8006cb4:	f003 0303 	and.w	r3, r3, #3
 8006cb8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006cba:	69bb      	ldr	r3, [r7, #24]
 8006cbc:	2b0c      	cmp	r3, #12
 8006cbe:	d102      	bne.n	8006cc6 <HAL_RCC_OscConfig+0x136>
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	2b02      	cmp	r3, #2
 8006cc4:	d002      	beq.n	8006ccc <HAL_RCC_OscConfig+0x13c>
 8006cc6:	69bb      	ldr	r3, [r7, #24]
 8006cc8:	2b04      	cmp	r3, #4
 8006cca:	d11f      	bne.n	8006d0c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ccc:	4b4f      	ldr	r3, [pc, #316]	@ (8006e0c <HAL_RCC_OscConfig+0x27c>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d005      	beq.n	8006ce4 <HAL_RCC_OscConfig+0x154>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	68db      	ldr	r3, [r3, #12]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d101      	bne.n	8006ce4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	e25d      	b.n	80071a0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ce4:	4b49      	ldr	r3, [pc, #292]	@ (8006e0c <HAL_RCC_OscConfig+0x27c>)
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	691b      	ldr	r3, [r3, #16]
 8006cf0:	061b      	lsls	r3, r3, #24
 8006cf2:	4946      	ldr	r1, [pc, #280]	@ (8006e0c <HAL_RCC_OscConfig+0x27c>)
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006cf8:	4b45      	ldr	r3, [pc, #276]	@ (8006e10 <HAL_RCC_OscConfig+0x280>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f7fb fcd1 	bl	80026a4 <HAL_InitTick>
 8006d02:	4603      	mov	r3, r0
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d043      	beq.n	8006d90 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	e249      	b.n	80071a0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	68db      	ldr	r3, [r3, #12]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d023      	beq.n	8006d5c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006d14:	4b3d      	ldr	r3, [pc, #244]	@ (8006e0c <HAL_RCC_OscConfig+0x27c>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a3c      	ldr	r2, [pc, #240]	@ (8006e0c <HAL_RCC_OscConfig+0x27c>)
 8006d1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d20:	f7fb fd0c 	bl	800273c <HAL_GetTick>
 8006d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006d26:	e008      	b.n	8006d3a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d28:	f7fb fd08 	bl	800273c <HAL_GetTick>
 8006d2c:	4602      	mov	r2, r0
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	1ad3      	subs	r3, r2, r3
 8006d32:	2b02      	cmp	r3, #2
 8006d34:	d901      	bls.n	8006d3a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006d36:	2303      	movs	r3, #3
 8006d38:	e232      	b.n	80071a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006d3a:	4b34      	ldr	r3, [pc, #208]	@ (8006e0c <HAL_RCC_OscConfig+0x27c>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d0f0      	beq.n	8006d28 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d46:	4b31      	ldr	r3, [pc, #196]	@ (8006e0c <HAL_RCC_OscConfig+0x27c>)
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	691b      	ldr	r3, [r3, #16]
 8006d52:	061b      	lsls	r3, r3, #24
 8006d54:	492d      	ldr	r1, [pc, #180]	@ (8006e0c <HAL_RCC_OscConfig+0x27c>)
 8006d56:	4313      	orrs	r3, r2
 8006d58:	604b      	str	r3, [r1, #4]
 8006d5a:	e01a      	b.n	8006d92 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006d5c:	4b2b      	ldr	r3, [pc, #172]	@ (8006e0c <HAL_RCC_OscConfig+0x27c>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a2a      	ldr	r2, [pc, #168]	@ (8006e0c <HAL_RCC_OscConfig+0x27c>)
 8006d62:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006d66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d68:	f7fb fce8 	bl	800273c <HAL_GetTick>
 8006d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006d6e:	e008      	b.n	8006d82 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d70:	f7fb fce4 	bl	800273c <HAL_GetTick>
 8006d74:	4602      	mov	r2, r0
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	1ad3      	subs	r3, r2, r3
 8006d7a:	2b02      	cmp	r3, #2
 8006d7c:	d901      	bls.n	8006d82 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006d7e:	2303      	movs	r3, #3
 8006d80:	e20e      	b.n	80071a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006d82:	4b22      	ldr	r3, [pc, #136]	@ (8006e0c <HAL_RCC_OscConfig+0x27c>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d1f0      	bne.n	8006d70 <HAL_RCC_OscConfig+0x1e0>
 8006d8e:	e000      	b.n	8006d92 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006d90:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f003 0308 	and.w	r3, r3, #8
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d041      	beq.n	8006e22 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	695b      	ldr	r3, [r3, #20]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d01c      	beq.n	8006de0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006da6:	4b19      	ldr	r3, [pc, #100]	@ (8006e0c <HAL_RCC_OscConfig+0x27c>)
 8006da8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006dac:	4a17      	ldr	r2, [pc, #92]	@ (8006e0c <HAL_RCC_OscConfig+0x27c>)
 8006dae:	f043 0301 	orr.w	r3, r3, #1
 8006db2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006db6:	f7fb fcc1 	bl	800273c <HAL_GetTick>
 8006dba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006dbc:	e008      	b.n	8006dd0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006dbe:	f7fb fcbd 	bl	800273c <HAL_GetTick>
 8006dc2:	4602      	mov	r2, r0
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	1ad3      	subs	r3, r2, r3
 8006dc8:	2b02      	cmp	r3, #2
 8006dca:	d901      	bls.n	8006dd0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006dcc:	2303      	movs	r3, #3
 8006dce:	e1e7      	b.n	80071a0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006dd0:	4b0e      	ldr	r3, [pc, #56]	@ (8006e0c <HAL_RCC_OscConfig+0x27c>)
 8006dd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006dd6:	f003 0302 	and.w	r3, r3, #2
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d0ef      	beq.n	8006dbe <HAL_RCC_OscConfig+0x22e>
 8006dde:	e020      	b.n	8006e22 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006de0:	4b0a      	ldr	r3, [pc, #40]	@ (8006e0c <HAL_RCC_OscConfig+0x27c>)
 8006de2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006de6:	4a09      	ldr	r2, [pc, #36]	@ (8006e0c <HAL_RCC_OscConfig+0x27c>)
 8006de8:	f023 0301 	bic.w	r3, r3, #1
 8006dec:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006df0:	f7fb fca4 	bl	800273c <HAL_GetTick>
 8006df4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006df6:	e00d      	b.n	8006e14 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006df8:	f7fb fca0 	bl	800273c <HAL_GetTick>
 8006dfc:	4602      	mov	r2, r0
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	1ad3      	subs	r3, r2, r3
 8006e02:	2b02      	cmp	r3, #2
 8006e04:	d906      	bls.n	8006e14 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006e06:	2303      	movs	r3, #3
 8006e08:	e1ca      	b.n	80071a0 <HAL_RCC_OscConfig+0x610>
 8006e0a:	bf00      	nop
 8006e0c:	40021000 	.word	0x40021000
 8006e10:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006e14:	4b8c      	ldr	r3, [pc, #560]	@ (8007048 <HAL_RCC_OscConfig+0x4b8>)
 8006e16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006e1a:	f003 0302 	and.w	r3, r3, #2
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d1ea      	bne.n	8006df8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f003 0304 	and.w	r3, r3, #4
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	f000 80a6 	beq.w	8006f7c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006e30:	2300      	movs	r3, #0
 8006e32:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006e34:	4b84      	ldr	r3, [pc, #528]	@ (8007048 <HAL_RCC_OscConfig+0x4b8>)
 8006e36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d101      	bne.n	8006e44 <HAL_RCC_OscConfig+0x2b4>
 8006e40:	2301      	movs	r3, #1
 8006e42:	e000      	b.n	8006e46 <HAL_RCC_OscConfig+0x2b6>
 8006e44:	2300      	movs	r3, #0
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d00d      	beq.n	8006e66 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e4a:	4b7f      	ldr	r3, [pc, #508]	@ (8007048 <HAL_RCC_OscConfig+0x4b8>)
 8006e4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e4e:	4a7e      	ldr	r2, [pc, #504]	@ (8007048 <HAL_RCC_OscConfig+0x4b8>)
 8006e50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006e54:	6593      	str	r3, [r2, #88]	@ 0x58
 8006e56:	4b7c      	ldr	r3, [pc, #496]	@ (8007048 <HAL_RCC_OscConfig+0x4b8>)
 8006e58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e5e:	60fb      	str	r3, [r7, #12]
 8006e60:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006e62:	2301      	movs	r3, #1
 8006e64:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006e66:	4b79      	ldr	r3, [pc, #484]	@ (800704c <HAL_RCC_OscConfig+0x4bc>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d118      	bne.n	8006ea4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006e72:	4b76      	ldr	r3, [pc, #472]	@ (800704c <HAL_RCC_OscConfig+0x4bc>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a75      	ldr	r2, [pc, #468]	@ (800704c <HAL_RCC_OscConfig+0x4bc>)
 8006e78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e7e:	f7fb fc5d 	bl	800273c <HAL_GetTick>
 8006e82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006e84:	e008      	b.n	8006e98 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e86:	f7fb fc59 	bl	800273c <HAL_GetTick>
 8006e8a:	4602      	mov	r2, r0
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	1ad3      	subs	r3, r2, r3
 8006e90:	2b02      	cmp	r3, #2
 8006e92:	d901      	bls.n	8006e98 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006e94:	2303      	movs	r3, #3
 8006e96:	e183      	b.n	80071a0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006e98:	4b6c      	ldr	r3, [pc, #432]	@ (800704c <HAL_RCC_OscConfig+0x4bc>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d0f0      	beq.n	8006e86 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	689b      	ldr	r3, [r3, #8]
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	d108      	bne.n	8006ebe <HAL_RCC_OscConfig+0x32e>
 8006eac:	4b66      	ldr	r3, [pc, #408]	@ (8007048 <HAL_RCC_OscConfig+0x4b8>)
 8006eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006eb2:	4a65      	ldr	r2, [pc, #404]	@ (8007048 <HAL_RCC_OscConfig+0x4b8>)
 8006eb4:	f043 0301 	orr.w	r3, r3, #1
 8006eb8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006ebc:	e024      	b.n	8006f08 <HAL_RCC_OscConfig+0x378>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	689b      	ldr	r3, [r3, #8]
 8006ec2:	2b05      	cmp	r3, #5
 8006ec4:	d110      	bne.n	8006ee8 <HAL_RCC_OscConfig+0x358>
 8006ec6:	4b60      	ldr	r3, [pc, #384]	@ (8007048 <HAL_RCC_OscConfig+0x4b8>)
 8006ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ecc:	4a5e      	ldr	r2, [pc, #376]	@ (8007048 <HAL_RCC_OscConfig+0x4b8>)
 8006ece:	f043 0304 	orr.w	r3, r3, #4
 8006ed2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006ed6:	4b5c      	ldr	r3, [pc, #368]	@ (8007048 <HAL_RCC_OscConfig+0x4b8>)
 8006ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006edc:	4a5a      	ldr	r2, [pc, #360]	@ (8007048 <HAL_RCC_OscConfig+0x4b8>)
 8006ede:	f043 0301 	orr.w	r3, r3, #1
 8006ee2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006ee6:	e00f      	b.n	8006f08 <HAL_RCC_OscConfig+0x378>
 8006ee8:	4b57      	ldr	r3, [pc, #348]	@ (8007048 <HAL_RCC_OscConfig+0x4b8>)
 8006eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006eee:	4a56      	ldr	r2, [pc, #344]	@ (8007048 <HAL_RCC_OscConfig+0x4b8>)
 8006ef0:	f023 0301 	bic.w	r3, r3, #1
 8006ef4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006ef8:	4b53      	ldr	r3, [pc, #332]	@ (8007048 <HAL_RCC_OscConfig+0x4b8>)
 8006efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006efe:	4a52      	ldr	r2, [pc, #328]	@ (8007048 <HAL_RCC_OscConfig+0x4b8>)
 8006f00:	f023 0304 	bic.w	r3, r3, #4
 8006f04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	689b      	ldr	r3, [r3, #8]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d016      	beq.n	8006f3e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f10:	f7fb fc14 	bl	800273c <HAL_GetTick>
 8006f14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006f16:	e00a      	b.n	8006f2e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f18:	f7fb fc10 	bl	800273c <HAL_GetTick>
 8006f1c:	4602      	mov	r2, r0
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	1ad3      	subs	r3, r2, r3
 8006f22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d901      	bls.n	8006f2e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006f2a:	2303      	movs	r3, #3
 8006f2c:	e138      	b.n	80071a0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006f2e:	4b46      	ldr	r3, [pc, #280]	@ (8007048 <HAL_RCC_OscConfig+0x4b8>)
 8006f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f34:	f003 0302 	and.w	r3, r3, #2
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d0ed      	beq.n	8006f18 <HAL_RCC_OscConfig+0x388>
 8006f3c:	e015      	b.n	8006f6a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f3e:	f7fb fbfd 	bl	800273c <HAL_GetTick>
 8006f42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006f44:	e00a      	b.n	8006f5c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f46:	f7fb fbf9 	bl	800273c <HAL_GetTick>
 8006f4a:	4602      	mov	r2, r0
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	1ad3      	subs	r3, r2, r3
 8006f50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d901      	bls.n	8006f5c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006f58:	2303      	movs	r3, #3
 8006f5a:	e121      	b.n	80071a0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006f5c:	4b3a      	ldr	r3, [pc, #232]	@ (8007048 <HAL_RCC_OscConfig+0x4b8>)
 8006f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f62:	f003 0302 	and.w	r3, r3, #2
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d1ed      	bne.n	8006f46 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006f6a:	7ffb      	ldrb	r3, [r7, #31]
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	d105      	bne.n	8006f7c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f70:	4b35      	ldr	r3, [pc, #212]	@ (8007048 <HAL_RCC_OscConfig+0x4b8>)
 8006f72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f74:	4a34      	ldr	r2, [pc, #208]	@ (8007048 <HAL_RCC_OscConfig+0x4b8>)
 8006f76:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006f7a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f003 0320 	and.w	r3, r3, #32
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d03c      	beq.n	8007002 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	699b      	ldr	r3, [r3, #24]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d01c      	beq.n	8006fca <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006f90:	4b2d      	ldr	r3, [pc, #180]	@ (8007048 <HAL_RCC_OscConfig+0x4b8>)
 8006f92:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006f96:	4a2c      	ldr	r2, [pc, #176]	@ (8007048 <HAL_RCC_OscConfig+0x4b8>)
 8006f98:	f043 0301 	orr.w	r3, r3, #1
 8006f9c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fa0:	f7fb fbcc 	bl	800273c <HAL_GetTick>
 8006fa4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006fa6:	e008      	b.n	8006fba <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006fa8:	f7fb fbc8 	bl	800273c <HAL_GetTick>
 8006fac:	4602      	mov	r2, r0
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	1ad3      	subs	r3, r2, r3
 8006fb2:	2b02      	cmp	r3, #2
 8006fb4:	d901      	bls.n	8006fba <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006fb6:	2303      	movs	r3, #3
 8006fb8:	e0f2      	b.n	80071a0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006fba:	4b23      	ldr	r3, [pc, #140]	@ (8007048 <HAL_RCC_OscConfig+0x4b8>)
 8006fbc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006fc0:	f003 0302 	and.w	r3, r3, #2
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d0ef      	beq.n	8006fa8 <HAL_RCC_OscConfig+0x418>
 8006fc8:	e01b      	b.n	8007002 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006fca:	4b1f      	ldr	r3, [pc, #124]	@ (8007048 <HAL_RCC_OscConfig+0x4b8>)
 8006fcc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006fd0:	4a1d      	ldr	r2, [pc, #116]	@ (8007048 <HAL_RCC_OscConfig+0x4b8>)
 8006fd2:	f023 0301 	bic.w	r3, r3, #1
 8006fd6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fda:	f7fb fbaf 	bl	800273c <HAL_GetTick>
 8006fde:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006fe0:	e008      	b.n	8006ff4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006fe2:	f7fb fbab 	bl	800273c <HAL_GetTick>
 8006fe6:	4602      	mov	r2, r0
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	1ad3      	subs	r3, r2, r3
 8006fec:	2b02      	cmp	r3, #2
 8006fee:	d901      	bls.n	8006ff4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006ff0:	2303      	movs	r3, #3
 8006ff2:	e0d5      	b.n	80071a0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006ff4:	4b14      	ldr	r3, [pc, #80]	@ (8007048 <HAL_RCC_OscConfig+0x4b8>)
 8006ff6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006ffa:	f003 0302 	and.w	r3, r3, #2
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d1ef      	bne.n	8006fe2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	69db      	ldr	r3, [r3, #28]
 8007006:	2b00      	cmp	r3, #0
 8007008:	f000 80c9 	beq.w	800719e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800700c:	4b0e      	ldr	r3, [pc, #56]	@ (8007048 <HAL_RCC_OscConfig+0x4b8>)
 800700e:	689b      	ldr	r3, [r3, #8]
 8007010:	f003 030c 	and.w	r3, r3, #12
 8007014:	2b0c      	cmp	r3, #12
 8007016:	f000 8083 	beq.w	8007120 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	69db      	ldr	r3, [r3, #28]
 800701e:	2b02      	cmp	r3, #2
 8007020:	d15e      	bne.n	80070e0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007022:	4b09      	ldr	r3, [pc, #36]	@ (8007048 <HAL_RCC_OscConfig+0x4b8>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a08      	ldr	r2, [pc, #32]	@ (8007048 <HAL_RCC_OscConfig+0x4b8>)
 8007028:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800702c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800702e:	f7fb fb85 	bl	800273c <HAL_GetTick>
 8007032:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007034:	e00c      	b.n	8007050 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007036:	f7fb fb81 	bl	800273c <HAL_GetTick>
 800703a:	4602      	mov	r2, r0
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	1ad3      	subs	r3, r2, r3
 8007040:	2b02      	cmp	r3, #2
 8007042:	d905      	bls.n	8007050 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8007044:	2303      	movs	r3, #3
 8007046:	e0ab      	b.n	80071a0 <HAL_RCC_OscConfig+0x610>
 8007048:	40021000 	.word	0x40021000
 800704c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007050:	4b55      	ldr	r3, [pc, #340]	@ (80071a8 <HAL_RCC_OscConfig+0x618>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007058:	2b00      	cmp	r3, #0
 800705a:	d1ec      	bne.n	8007036 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800705c:	4b52      	ldr	r3, [pc, #328]	@ (80071a8 <HAL_RCC_OscConfig+0x618>)
 800705e:	68da      	ldr	r2, [r3, #12]
 8007060:	4b52      	ldr	r3, [pc, #328]	@ (80071ac <HAL_RCC_OscConfig+0x61c>)
 8007062:	4013      	ands	r3, r2
 8007064:	687a      	ldr	r2, [r7, #4]
 8007066:	6a11      	ldr	r1, [r2, #32]
 8007068:	687a      	ldr	r2, [r7, #4]
 800706a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800706c:	3a01      	subs	r2, #1
 800706e:	0112      	lsls	r2, r2, #4
 8007070:	4311      	orrs	r1, r2
 8007072:	687a      	ldr	r2, [r7, #4]
 8007074:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8007076:	0212      	lsls	r2, r2, #8
 8007078:	4311      	orrs	r1, r2
 800707a:	687a      	ldr	r2, [r7, #4]
 800707c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800707e:	0852      	lsrs	r2, r2, #1
 8007080:	3a01      	subs	r2, #1
 8007082:	0552      	lsls	r2, r2, #21
 8007084:	4311      	orrs	r1, r2
 8007086:	687a      	ldr	r2, [r7, #4]
 8007088:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800708a:	0852      	lsrs	r2, r2, #1
 800708c:	3a01      	subs	r2, #1
 800708e:	0652      	lsls	r2, r2, #25
 8007090:	4311      	orrs	r1, r2
 8007092:	687a      	ldr	r2, [r7, #4]
 8007094:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007096:	06d2      	lsls	r2, r2, #27
 8007098:	430a      	orrs	r2, r1
 800709a:	4943      	ldr	r1, [pc, #268]	@ (80071a8 <HAL_RCC_OscConfig+0x618>)
 800709c:	4313      	orrs	r3, r2
 800709e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80070a0:	4b41      	ldr	r3, [pc, #260]	@ (80071a8 <HAL_RCC_OscConfig+0x618>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a40      	ldr	r2, [pc, #256]	@ (80071a8 <HAL_RCC_OscConfig+0x618>)
 80070a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80070aa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80070ac:	4b3e      	ldr	r3, [pc, #248]	@ (80071a8 <HAL_RCC_OscConfig+0x618>)
 80070ae:	68db      	ldr	r3, [r3, #12]
 80070b0:	4a3d      	ldr	r2, [pc, #244]	@ (80071a8 <HAL_RCC_OscConfig+0x618>)
 80070b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80070b6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070b8:	f7fb fb40 	bl	800273c <HAL_GetTick>
 80070bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80070be:	e008      	b.n	80070d2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070c0:	f7fb fb3c 	bl	800273c <HAL_GetTick>
 80070c4:	4602      	mov	r2, r0
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	1ad3      	subs	r3, r2, r3
 80070ca:	2b02      	cmp	r3, #2
 80070cc:	d901      	bls.n	80070d2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80070ce:	2303      	movs	r3, #3
 80070d0:	e066      	b.n	80071a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80070d2:	4b35      	ldr	r3, [pc, #212]	@ (80071a8 <HAL_RCC_OscConfig+0x618>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d0f0      	beq.n	80070c0 <HAL_RCC_OscConfig+0x530>
 80070de:	e05e      	b.n	800719e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80070e0:	4b31      	ldr	r3, [pc, #196]	@ (80071a8 <HAL_RCC_OscConfig+0x618>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a30      	ldr	r2, [pc, #192]	@ (80071a8 <HAL_RCC_OscConfig+0x618>)
 80070e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80070ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070ec:	f7fb fb26 	bl	800273c <HAL_GetTick>
 80070f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80070f2:	e008      	b.n	8007106 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070f4:	f7fb fb22 	bl	800273c <HAL_GetTick>
 80070f8:	4602      	mov	r2, r0
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	1ad3      	subs	r3, r2, r3
 80070fe:	2b02      	cmp	r3, #2
 8007100:	d901      	bls.n	8007106 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8007102:	2303      	movs	r3, #3
 8007104:	e04c      	b.n	80071a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007106:	4b28      	ldr	r3, [pc, #160]	@ (80071a8 <HAL_RCC_OscConfig+0x618>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800710e:	2b00      	cmp	r3, #0
 8007110:	d1f0      	bne.n	80070f4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8007112:	4b25      	ldr	r3, [pc, #148]	@ (80071a8 <HAL_RCC_OscConfig+0x618>)
 8007114:	68da      	ldr	r2, [r3, #12]
 8007116:	4924      	ldr	r1, [pc, #144]	@ (80071a8 <HAL_RCC_OscConfig+0x618>)
 8007118:	4b25      	ldr	r3, [pc, #148]	@ (80071b0 <HAL_RCC_OscConfig+0x620>)
 800711a:	4013      	ands	r3, r2
 800711c:	60cb      	str	r3, [r1, #12]
 800711e:	e03e      	b.n	800719e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	69db      	ldr	r3, [r3, #28]
 8007124:	2b01      	cmp	r3, #1
 8007126:	d101      	bne.n	800712c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8007128:	2301      	movs	r3, #1
 800712a:	e039      	b.n	80071a0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800712c:	4b1e      	ldr	r3, [pc, #120]	@ (80071a8 <HAL_RCC_OscConfig+0x618>)
 800712e:	68db      	ldr	r3, [r3, #12]
 8007130:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	f003 0203 	and.w	r2, r3, #3
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6a1b      	ldr	r3, [r3, #32]
 800713c:	429a      	cmp	r2, r3
 800713e:	d12c      	bne.n	800719a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800714a:	3b01      	subs	r3, #1
 800714c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800714e:	429a      	cmp	r2, r3
 8007150:	d123      	bne.n	800719a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800715c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800715e:	429a      	cmp	r2, r3
 8007160:	d11b      	bne.n	800719a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800716c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800716e:	429a      	cmp	r2, r3
 8007170:	d113      	bne.n	800719a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800717c:	085b      	lsrs	r3, r3, #1
 800717e:	3b01      	subs	r3, #1
 8007180:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007182:	429a      	cmp	r2, r3
 8007184:	d109      	bne.n	800719a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007190:	085b      	lsrs	r3, r3, #1
 8007192:	3b01      	subs	r3, #1
 8007194:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007196:	429a      	cmp	r2, r3
 8007198:	d001      	beq.n	800719e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800719a:	2301      	movs	r3, #1
 800719c:	e000      	b.n	80071a0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800719e:	2300      	movs	r3, #0
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3720      	adds	r7, #32
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}
 80071a8:	40021000 	.word	0x40021000
 80071ac:	019f800c 	.word	0x019f800c
 80071b0:	feeefffc 	.word	0xfeeefffc

080071b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b086      	sub	sp, #24
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
 80071bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80071be:	2300      	movs	r3, #0
 80071c0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d101      	bne.n	80071cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80071c8:	2301      	movs	r3, #1
 80071ca:	e11e      	b.n	800740a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80071cc:	4b91      	ldr	r3, [pc, #580]	@ (8007414 <HAL_RCC_ClockConfig+0x260>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f003 030f 	and.w	r3, r3, #15
 80071d4:	683a      	ldr	r2, [r7, #0]
 80071d6:	429a      	cmp	r2, r3
 80071d8:	d910      	bls.n	80071fc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071da:	4b8e      	ldr	r3, [pc, #568]	@ (8007414 <HAL_RCC_ClockConfig+0x260>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f023 020f 	bic.w	r2, r3, #15
 80071e2:	498c      	ldr	r1, [pc, #560]	@ (8007414 <HAL_RCC_ClockConfig+0x260>)
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	4313      	orrs	r3, r2
 80071e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80071ea:	4b8a      	ldr	r3, [pc, #552]	@ (8007414 <HAL_RCC_ClockConfig+0x260>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f003 030f 	and.w	r3, r3, #15
 80071f2:	683a      	ldr	r2, [r7, #0]
 80071f4:	429a      	cmp	r2, r3
 80071f6:	d001      	beq.n	80071fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80071f8:	2301      	movs	r3, #1
 80071fa:	e106      	b.n	800740a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f003 0301 	and.w	r3, r3, #1
 8007204:	2b00      	cmp	r3, #0
 8007206:	d073      	beq.n	80072f0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	2b03      	cmp	r3, #3
 800720e:	d129      	bne.n	8007264 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007210:	4b81      	ldr	r3, [pc, #516]	@ (8007418 <HAL_RCC_ClockConfig+0x264>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007218:	2b00      	cmp	r3, #0
 800721a:	d101      	bne.n	8007220 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800721c:	2301      	movs	r3, #1
 800721e:	e0f4      	b.n	800740a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007220:	f000 f99e 	bl	8007560 <RCC_GetSysClockFreqFromPLLSource>
 8007224:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	4a7c      	ldr	r2, [pc, #496]	@ (800741c <HAL_RCC_ClockConfig+0x268>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d93f      	bls.n	80072ae <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800722e:	4b7a      	ldr	r3, [pc, #488]	@ (8007418 <HAL_RCC_ClockConfig+0x264>)
 8007230:	689b      	ldr	r3, [r3, #8]
 8007232:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007236:	2b00      	cmp	r3, #0
 8007238:	d009      	beq.n	800724e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007242:	2b00      	cmp	r3, #0
 8007244:	d033      	beq.n	80072ae <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800724a:	2b00      	cmp	r3, #0
 800724c:	d12f      	bne.n	80072ae <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800724e:	4b72      	ldr	r3, [pc, #456]	@ (8007418 <HAL_RCC_ClockConfig+0x264>)
 8007250:	689b      	ldr	r3, [r3, #8]
 8007252:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007256:	4a70      	ldr	r2, [pc, #448]	@ (8007418 <HAL_RCC_ClockConfig+0x264>)
 8007258:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800725c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800725e:	2380      	movs	r3, #128	@ 0x80
 8007260:	617b      	str	r3, [r7, #20]
 8007262:	e024      	b.n	80072ae <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	2b02      	cmp	r3, #2
 800726a:	d107      	bne.n	800727c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800726c:	4b6a      	ldr	r3, [pc, #424]	@ (8007418 <HAL_RCC_ClockConfig+0x264>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007274:	2b00      	cmp	r3, #0
 8007276:	d109      	bne.n	800728c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007278:	2301      	movs	r3, #1
 800727a:	e0c6      	b.n	800740a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800727c:	4b66      	ldr	r3, [pc, #408]	@ (8007418 <HAL_RCC_ClockConfig+0x264>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007284:	2b00      	cmp	r3, #0
 8007286:	d101      	bne.n	800728c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007288:	2301      	movs	r3, #1
 800728a:	e0be      	b.n	800740a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800728c:	f000 f8ce 	bl	800742c <HAL_RCC_GetSysClockFreq>
 8007290:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	4a61      	ldr	r2, [pc, #388]	@ (800741c <HAL_RCC_ClockConfig+0x268>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d909      	bls.n	80072ae <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800729a:	4b5f      	ldr	r3, [pc, #380]	@ (8007418 <HAL_RCC_ClockConfig+0x264>)
 800729c:	689b      	ldr	r3, [r3, #8]
 800729e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80072a2:	4a5d      	ldr	r2, [pc, #372]	@ (8007418 <HAL_RCC_ClockConfig+0x264>)
 80072a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072a8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80072aa:	2380      	movs	r3, #128	@ 0x80
 80072ac:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80072ae:	4b5a      	ldr	r3, [pc, #360]	@ (8007418 <HAL_RCC_ClockConfig+0x264>)
 80072b0:	689b      	ldr	r3, [r3, #8]
 80072b2:	f023 0203 	bic.w	r2, r3, #3
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	4957      	ldr	r1, [pc, #348]	@ (8007418 <HAL_RCC_ClockConfig+0x264>)
 80072bc:	4313      	orrs	r3, r2
 80072be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072c0:	f7fb fa3c 	bl	800273c <HAL_GetTick>
 80072c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072c6:	e00a      	b.n	80072de <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80072c8:	f7fb fa38 	bl	800273c <HAL_GetTick>
 80072cc:	4602      	mov	r2, r0
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	1ad3      	subs	r3, r2, r3
 80072d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d901      	bls.n	80072de <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80072da:	2303      	movs	r3, #3
 80072dc:	e095      	b.n	800740a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072de:	4b4e      	ldr	r3, [pc, #312]	@ (8007418 <HAL_RCC_ClockConfig+0x264>)
 80072e0:	689b      	ldr	r3, [r3, #8]
 80072e2:	f003 020c 	and.w	r2, r3, #12
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	685b      	ldr	r3, [r3, #4]
 80072ea:	009b      	lsls	r3, r3, #2
 80072ec:	429a      	cmp	r2, r3
 80072ee:	d1eb      	bne.n	80072c8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f003 0302 	and.w	r3, r3, #2
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d023      	beq.n	8007344 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f003 0304 	and.w	r3, r3, #4
 8007304:	2b00      	cmp	r3, #0
 8007306:	d005      	beq.n	8007314 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007308:	4b43      	ldr	r3, [pc, #268]	@ (8007418 <HAL_RCC_ClockConfig+0x264>)
 800730a:	689b      	ldr	r3, [r3, #8]
 800730c:	4a42      	ldr	r2, [pc, #264]	@ (8007418 <HAL_RCC_ClockConfig+0x264>)
 800730e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007312:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f003 0308 	and.w	r3, r3, #8
 800731c:	2b00      	cmp	r3, #0
 800731e:	d007      	beq.n	8007330 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007320:	4b3d      	ldr	r3, [pc, #244]	@ (8007418 <HAL_RCC_ClockConfig+0x264>)
 8007322:	689b      	ldr	r3, [r3, #8]
 8007324:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007328:	4a3b      	ldr	r2, [pc, #236]	@ (8007418 <HAL_RCC_ClockConfig+0x264>)
 800732a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800732e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007330:	4b39      	ldr	r3, [pc, #228]	@ (8007418 <HAL_RCC_ClockConfig+0x264>)
 8007332:	689b      	ldr	r3, [r3, #8]
 8007334:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	689b      	ldr	r3, [r3, #8]
 800733c:	4936      	ldr	r1, [pc, #216]	@ (8007418 <HAL_RCC_ClockConfig+0x264>)
 800733e:	4313      	orrs	r3, r2
 8007340:	608b      	str	r3, [r1, #8]
 8007342:	e008      	b.n	8007356 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	2b80      	cmp	r3, #128	@ 0x80
 8007348:	d105      	bne.n	8007356 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800734a:	4b33      	ldr	r3, [pc, #204]	@ (8007418 <HAL_RCC_ClockConfig+0x264>)
 800734c:	689b      	ldr	r3, [r3, #8]
 800734e:	4a32      	ldr	r2, [pc, #200]	@ (8007418 <HAL_RCC_ClockConfig+0x264>)
 8007350:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007354:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007356:	4b2f      	ldr	r3, [pc, #188]	@ (8007414 <HAL_RCC_ClockConfig+0x260>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f003 030f 	and.w	r3, r3, #15
 800735e:	683a      	ldr	r2, [r7, #0]
 8007360:	429a      	cmp	r2, r3
 8007362:	d21d      	bcs.n	80073a0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007364:	4b2b      	ldr	r3, [pc, #172]	@ (8007414 <HAL_RCC_ClockConfig+0x260>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f023 020f 	bic.w	r2, r3, #15
 800736c:	4929      	ldr	r1, [pc, #164]	@ (8007414 <HAL_RCC_ClockConfig+0x260>)
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	4313      	orrs	r3, r2
 8007372:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007374:	f7fb f9e2 	bl	800273c <HAL_GetTick>
 8007378:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800737a:	e00a      	b.n	8007392 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800737c:	f7fb f9de 	bl	800273c <HAL_GetTick>
 8007380:	4602      	mov	r2, r0
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	1ad3      	subs	r3, r2, r3
 8007386:	f241 3288 	movw	r2, #5000	@ 0x1388
 800738a:	4293      	cmp	r3, r2
 800738c:	d901      	bls.n	8007392 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800738e:	2303      	movs	r3, #3
 8007390:	e03b      	b.n	800740a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007392:	4b20      	ldr	r3, [pc, #128]	@ (8007414 <HAL_RCC_ClockConfig+0x260>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f003 030f 	and.w	r3, r3, #15
 800739a:	683a      	ldr	r2, [r7, #0]
 800739c:	429a      	cmp	r2, r3
 800739e:	d1ed      	bne.n	800737c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f003 0304 	and.w	r3, r3, #4
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d008      	beq.n	80073be <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80073ac:	4b1a      	ldr	r3, [pc, #104]	@ (8007418 <HAL_RCC_ClockConfig+0x264>)
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	68db      	ldr	r3, [r3, #12]
 80073b8:	4917      	ldr	r1, [pc, #92]	@ (8007418 <HAL_RCC_ClockConfig+0x264>)
 80073ba:	4313      	orrs	r3, r2
 80073bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f003 0308 	and.w	r3, r3, #8
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d009      	beq.n	80073de <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80073ca:	4b13      	ldr	r3, [pc, #76]	@ (8007418 <HAL_RCC_ClockConfig+0x264>)
 80073cc:	689b      	ldr	r3, [r3, #8]
 80073ce:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	691b      	ldr	r3, [r3, #16]
 80073d6:	00db      	lsls	r3, r3, #3
 80073d8:	490f      	ldr	r1, [pc, #60]	@ (8007418 <HAL_RCC_ClockConfig+0x264>)
 80073da:	4313      	orrs	r3, r2
 80073dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80073de:	f000 f825 	bl	800742c <HAL_RCC_GetSysClockFreq>
 80073e2:	4602      	mov	r2, r0
 80073e4:	4b0c      	ldr	r3, [pc, #48]	@ (8007418 <HAL_RCC_ClockConfig+0x264>)
 80073e6:	689b      	ldr	r3, [r3, #8]
 80073e8:	091b      	lsrs	r3, r3, #4
 80073ea:	f003 030f 	and.w	r3, r3, #15
 80073ee:	490c      	ldr	r1, [pc, #48]	@ (8007420 <HAL_RCC_ClockConfig+0x26c>)
 80073f0:	5ccb      	ldrb	r3, [r1, r3]
 80073f2:	f003 031f 	and.w	r3, r3, #31
 80073f6:	fa22 f303 	lsr.w	r3, r2, r3
 80073fa:	4a0a      	ldr	r2, [pc, #40]	@ (8007424 <HAL_RCC_ClockConfig+0x270>)
 80073fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80073fe:	4b0a      	ldr	r3, [pc, #40]	@ (8007428 <HAL_RCC_ClockConfig+0x274>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4618      	mov	r0, r3
 8007404:	f7fb f94e 	bl	80026a4 <HAL_InitTick>
 8007408:	4603      	mov	r3, r0
}
 800740a:	4618      	mov	r0, r3
 800740c:	3718      	adds	r7, #24
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}
 8007412:	bf00      	nop
 8007414:	40022000 	.word	0x40022000
 8007418:	40021000 	.word	0x40021000
 800741c:	04c4b400 	.word	0x04c4b400
 8007420:	080126ac 	.word	0x080126ac
 8007424:	20000000 	.word	0x20000000
 8007428:	20000004 	.word	0x20000004

0800742c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800742c:	b480      	push	{r7}
 800742e:	b087      	sub	sp, #28
 8007430:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007432:	4b2c      	ldr	r3, [pc, #176]	@ (80074e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007434:	689b      	ldr	r3, [r3, #8]
 8007436:	f003 030c 	and.w	r3, r3, #12
 800743a:	2b04      	cmp	r3, #4
 800743c:	d102      	bne.n	8007444 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800743e:	4b2a      	ldr	r3, [pc, #168]	@ (80074e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007440:	613b      	str	r3, [r7, #16]
 8007442:	e047      	b.n	80074d4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007444:	4b27      	ldr	r3, [pc, #156]	@ (80074e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007446:	689b      	ldr	r3, [r3, #8]
 8007448:	f003 030c 	and.w	r3, r3, #12
 800744c:	2b08      	cmp	r3, #8
 800744e:	d102      	bne.n	8007456 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007450:	4b26      	ldr	r3, [pc, #152]	@ (80074ec <HAL_RCC_GetSysClockFreq+0xc0>)
 8007452:	613b      	str	r3, [r7, #16]
 8007454:	e03e      	b.n	80074d4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007456:	4b23      	ldr	r3, [pc, #140]	@ (80074e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007458:	689b      	ldr	r3, [r3, #8]
 800745a:	f003 030c 	and.w	r3, r3, #12
 800745e:	2b0c      	cmp	r3, #12
 8007460:	d136      	bne.n	80074d0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007462:	4b20      	ldr	r3, [pc, #128]	@ (80074e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007464:	68db      	ldr	r3, [r3, #12]
 8007466:	f003 0303 	and.w	r3, r3, #3
 800746a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800746c:	4b1d      	ldr	r3, [pc, #116]	@ (80074e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800746e:	68db      	ldr	r3, [r3, #12]
 8007470:	091b      	lsrs	r3, r3, #4
 8007472:	f003 030f 	and.w	r3, r3, #15
 8007476:	3301      	adds	r3, #1
 8007478:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2b03      	cmp	r3, #3
 800747e:	d10c      	bne.n	800749a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007480:	4a1a      	ldr	r2, [pc, #104]	@ (80074ec <HAL_RCC_GetSysClockFreq+0xc0>)
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	fbb2 f3f3 	udiv	r3, r2, r3
 8007488:	4a16      	ldr	r2, [pc, #88]	@ (80074e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800748a:	68d2      	ldr	r2, [r2, #12]
 800748c:	0a12      	lsrs	r2, r2, #8
 800748e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007492:	fb02 f303 	mul.w	r3, r2, r3
 8007496:	617b      	str	r3, [r7, #20]
      break;
 8007498:	e00c      	b.n	80074b4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800749a:	4a13      	ldr	r2, [pc, #76]	@ (80074e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	fbb2 f3f3 	udiv	r3, r2, r3
 80074a2:	4a10      	ldr	r2, [pc, #64]	@ (80074e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80074a4:	68d2      	ldr	r2, [r2, #12]
 80074a6:	0a12      	lsrs	r2, r2, #8
 80074a8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80074ac:	fb02 f303 	mul.w	r3, r2, r3
 80074b0:	617b      	str	r3, [r7, #20]
      break;
 80074b2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80074b4:	4b0b      	ldr	r3, [pc, #44]	@ (80074e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80074b6:	68db      	ldr	r3, [r3, #12]
 80074b8:	0e5b      	lsrs	r3, r3, #25
 80074ba:	f003 0303 	and.w	r3, r3, #3
 80074be:	3301      	adds	r3, #1
 80074c0:	005b      	lsls	r3, r3, #1
 80074c2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80074c4:	697a      	ldr	r2, [r7, #20]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80074cc:	613b      	str	r3, [r7, #16]
 80074ce:	e001      	b.n	80074d4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80074d0:	2300      	movs	r3, #0
 80074d2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80074d4:	693b      	ldr	r3, [r7, #16]
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	371c      	adds	r7, #28
 80074da:	46bd      	mov	sp, r7
 80074dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e0:	4770      	bx	lr
 80074e2:	bf00      	nop
 80074e4:	40021000 	.word	0x40021000
 80074e8:	00f42400 	.word	0x00f42400
 80074ec:	016e3600 	.word	0x016e3600

080074f0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80074f0:	b480      	push	{r7}
 80074f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80074f4:	4b03      	ldr	r3, [pc, #12]	@ (8007504 <HAL_RCC_GetHCLKFreq+0x14>)
 80074f6:	681b      	ldr	r3, [r3, #0]
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	46bd      	mov	sp, r7
 80074fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007500:	4770      	bx	lr
 8007502:	bf00      	nop
 8007504:	20000000 	.word	0x20000000

08007508 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800750c:	f7ff fff0 	bl	80074f0 <HAL_RCC_GetHCLKFreq>
 8007510:	4602      	mov	r2, r0
 8007512:	4b06      	ldr	r3, [pc, #24]	@ (800752c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007514:	689b      	ldr	r3, [r3, #8]
 8007516:	0a1b      	lsrs	r3, r3, #8
 8007518:	f003 0307 	and.w	r3, r3, #7
 800751c:	4904      	ldr	r1, [pc, #16]	@ (8007530 <HAL_RCC_GetPCLK1Freq+0x28>)
 800751e:	5ccb      	ldrb	r3, [r1, r3]
 8007520:	f003 031f 	and.w	r3, r3, #31
 8007524:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007528:	4618      	mov	r0, r3
 800752a:	bd80      	pop	{r7, pc}
 800752c:	40021000 	.word	0x40021000
 8007530:	080126bc 	.word	0x080126bc

08007534 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007538:	f7ff ffda 	bl	80074f0 <HAL_RCC_GetHCLKFreq>
 800753c:	4602      	mov	r2, r0
 800753e:	4b06      	ldr	r3, [pc, #24]	@ (8007558 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007540:	689b      	ldr	r3, [r3, #8]
 8007542:	0adb      	lsrs	r3, r3, #11
 8007544:	f003 0307 	and.w	r3, r3, #7
 8007548:	4904      	ldr	r1, [pc, #16]	@ (800755c <HAL_RCC_GetPCLK2Freq+0x28>)
 800754a:	5ccb      	ldrb	r3, [r1, r3]
 800754c:	f003 031f 	and.w	r3, r3, #31
 8007550:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007554:	4618      	mov	r0, r3
 8007556:	bd80      	pop	{r7, pc}
 8007558:	40021000 	.word	0x40021000
 800755c:	080126bc 	.word	0x080126bc

08007560 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007560:	b480      	push	{r7}
 8007562:	b087      	sub	sp, #28
 8007564:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007566:	4b1e      	ldr	r3, [pc, #120]	@ (80075e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007568:	68db      	ldr	r3, [r3, #12]
 800756a:	f003 0303 	and.w	r3, r3, #3
 800756e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007570:	4b1b      	ldr	r3, [pc, #108]	@ (80075e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007572:	68db      	ldr	r3, [r3, #12]
 8007574:	091b      	lsrs	r3, r3, #4
 8007576:	f003 030f 	and.w	r3, r3, #15
 800757a:	3301      	adds	r3, #1
 800757c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	2b03      	cmp	r3, #3
 8007582:	d10c      	bne.n	800759e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007584:	4a17      	ldr	r2, [pc, #92]	@ (80075e4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	fbb2 f3f3 	udiv	r3, r2, r3
 800758c:	4a14      	ldr	r2, [pc, #80]	@ (80075e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800758e:	68d2      	ldr	r2, [r2, #12]
 8007590:	0a12      	lsrs	r2, r2, #8
 8007592:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007596:	fb02 f303 	mul.w	r3, r2, r3
 800759a:	617b      	str	r3, [r7, #20]
    break;
 800759c:	e00c      	b.n	80075b8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800759e:	4a12      	ldr	r2, [pc, #72]	@ (80075e8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80075a6:	4a0e      	ldr	r2, [pc, #56]	@ (80075e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80075a8:	68d2      	ldr	r2, [r2, #12]
 80075aa:	0a12      	lsrs	r2, r2, #8
 80075ac:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80075b0:	fb02 f303 	mul.w	r3, r2, r3
 80075b4:	617b      	str	r3, [r7, #20]
    break;
 80075b6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80075b8:	4b09      	ldr	r3, [pc, #36]	@ (80075e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80075ba:	68db      	ldr	r3, [r3, #12]
 80075bc:	0e5b      	lsrs	r3, r3, #25
 80075be:	f003 0303 	and.w	r3, r3, #3
 80075c2:	3301      	adds	r3, #1
 80075c4:	005b      	lsls	r3, r3, #1
 80075c6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80075c8:	697a      	ldr	r2, [r7, #20]
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80075d0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80075d2:	687b      	ldr	r3, [r7, #4]
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	371c      	adds	r7, #28
 80075d8:	46bd      	mov	sp, r7
 80075da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075de:	4770      	bx	lr
 80075e0:	40021000 	.word	0x40021000
 80075e4:	016e3600 	.word	0x016e3600
 80075e8:	00f42400 	.word	0x00f42400

080075ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b086      	sub	sp, #24
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80075f4:	2300      	movs	r3, #0
 80075f6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80075f8:	2300      	movs	r3, #0
 80075fa:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007604:	2b00      	cmp	r3, #0
 8007606:	f000 8098 	beq.w	800773a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800760a:	2300      	movs	r3, #0
 800760c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800760e:	4b43      	ldr	r3, [pc, #268]	@ (800771c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007610:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007612:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007616:	2b00      	cmp	r3, #0
 8007618:	d10d      	bne.n	8007636 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800761a:	4b40      	ldr	r3, [pc, #256]	@ (800771c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800761c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800761e:	4a3f      	ldr	r2, [pc, #252]	@ (800771c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007620:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007624:	6593      	str	r3, [r2, #88]	@ 0x58
 8007626:	4b3d      	ldr	r3, [pc, #244]	@ (800771c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007628:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800762a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800762e:	60bb      	str	r3, [r7, #8]
 8007630:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007632:	2301      	movs	r3, #1
 8007634:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007636:	4b3a      	ldr	r3, [pc, #232]	@ (8007720 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a39      	ldr	r2, [pc, #228]	@ (8007720 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800763c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007640:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007642:	f7fb f87b 	bl	800273c <HAL_GetTick>
 8007646:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007648:	e009      	b.n	800765e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800764a:	f7fb f877 	bl	800273c <HAL_GetTick>
 800764e:	4602      	mov	r2, r0
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	1ad3      	subs	r3, r2, r3
 8007654:	2b02      	cmp	r3, #2
 8007656:	d902      	bls.n	800765e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007658:	2303      	movs	r3, #3
 800765a:	74fb      	strb	r3, [r7, #19]
        break;
 800765c:	e005      	b.n	800766a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800765e:	4b30      	ldr	r3, [pc, #192]	@ (8007720 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007666:	2b00      	cmp	r3, #0
 8007668:	d0ef      	beq.n	800764a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800766a:	7cfb      	ldrb	r3, [r7, #19]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d159      	bne.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007670:	4b2a      	ldr	r3, [pc, #168]	@ (800771c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007672:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007676:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800767a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d01e      	beq.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007686:	697a      	ldr	r2, [r7, #20]
 8007688:	429a      	cmp	r2, r3
 800768a:	d019      	beq.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800768c:	4b23      	ldr	r3, [pc, #140]	@ (800771c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800768e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007692:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007696:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007698:	4b20      	ldr	r3, [pc, #128]	@ (800771c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800769a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800769e:	4a1f      	ldr	r2, [pc, #124]	@ (800771c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80076a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80076a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80076a8:	4b1c      	ldr	r3, [pc, #112]	@ (800771c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80076aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076ae:	4a1b      	ldr	r2, [pc, #108]	@ (800771c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80076b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80076b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80076b8:	4a18      	ldr	r2, [pc, #96]	@ (800771c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	f003 0301 	and.w	r3, r3, #1
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d016      	beq.n	80076f8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076ca:	f7fb f837 	bl	800273c <HAL_GetTick>
 80076ce:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80076d0:	e00b      	b.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80076d2:	f7fb f833 	bl	800273c <HAL_GetTick>
 80076d6:	4602      	mov	r2, r0
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	1ad3      	subs	r3, r2, r3
 80076dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d902      	bls.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80076e4:	2303      	movs	r3, #3
 80076e6:	74fb      	strb	r3, [r7, #19]
            break;
 80076e8:	e006      	b.n	80076f8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80076ea:	4b0c      	ldr	r3, [pc, #48]	@ (800771c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80076ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076f0:	f003 0302 	and.w	r3, r3, #2
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d0ec      	beq.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80076f8:	7cfb      	ldrb	r3, [r7, #19]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d10b      	bne.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80076fe:	4b07      	ldr	r3, [pc, #28]	@ (800771c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007700:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007704:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800770c:	4903      	ldr	r1, [pc, #12]	@ (800771c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800770e:	4313      	orrs	r3, r2
 8007710:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007714:	e008      	b.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007716:	7cfb      	ldrb	r3, [r7, #19]
 8007718:	74bb      	strb	r3, [r7, #18]
 800771a:	e005      	b.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800771c:	40021000 	.word	0x40021000
 8007720:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007724:	7cfb      	ldrb	r3, [r7, #19]
 8007726:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007728:	7c7b      	ldrb	r3, [r7, #17]
 800772a:	2b01      	cmp	r3, #1
 800772c:	d105      	bne.n	800773a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800772e:	4ba6      	ldr	r3, [pc, #664]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007730:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007732:	4aa5      	ldr	r2, [pc, #660]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007734:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007738:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f003 0301 	and.w	r3, r3, #1
 8007742:	2b00      	cmp	r3, #0
 8007744:	d00a      	beq.n	800775c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007746:	4ba0      	ldr	r3, [pc, #640]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007748:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800774c:	f023 0203 	bic.w	r2, r3, #3
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	499c      	ldr	r1, [pc, #624]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007756:	4313      	orrs	r3, r2
 8007758:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f003 0302 	and.w	r3, r3, #2
 8007764:	2b00      	cmp	r3, #0
 8007766:	d00a      	beq.n	800777e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007768:	4b97      	ldr	r3, [pc, #604]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800776a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800776e:	f023 020c 	bic.w	r2, r3, #12
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	689b      	ldr	r3, [r3, #8]
 8007776:	4994      	ldr	r1, [pc, #592]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007778:	4313      	orrs	r3, r2
 800777a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f003 0304 	and.w	r3, r3, #4
 8007786:	2b00      	cmp	r3, #0
 8007788:	d00a      	beq.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800778a:	4b8f      	ldr	r3, [pc, #572]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800778c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007790:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	68db      	ldr	r3, [r3, #12]
 8007798:	498b      	ldr	r1, [pc, #556]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800779a:	4313      	orrs	r3, r2
 800779c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f003 0308 	and.w	r3, r3, #8
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d00a      	beq.n	80077c2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80077ac:	4b86      	ldr	r3, [pc, #536]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80077ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077b2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	691b      	ldr	r3, [r3, #16]
 80077ba:	4983      	ldr	r1, [pc, #524]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80077bc:	4313      	orrs	r3, r2
 80077be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f003 0320 	and.w	r3, r3, #32
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d00a      	beq.n	80077e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80077ce:	4b7e      	ldr	r3, [pc, #504]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80077d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077d4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	695b      	ldr	r3, [r3, #20]
 80077dc:	497a      	ldr	r1, [pc, #488]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80077de:	4313      	orrs	r3, r2
 80077e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d00a      	beq.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80077f0:	4b75      	ldr	r3, [pc, #468]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80077f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077f6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	699b      	ldr	r3, [r3, #24]
 80077fe:	4972      	ldr	r1, [pc, #456]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007800:	4313      	orrs	r3, r2
 8007802:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800780e:	2b00      	cmp	r3, #0
 8007810:	d00a      	beq.n	8007828 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007812:	4b6d      	ldr	r3, [pc, #436]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007814:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007818:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	69db      	ldr	r3, [r3, #28]
 8007820:	4969      	ldr	r1, [pc, #420]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007822:	4313      	orrs	r3, r2
 8007824:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007830:	2b00      	cmp	r3, #0
 8007832:	d00a      	beq.n	800784a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007834:	4b64      	ldr	r3, [pc, #400]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007836:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800783a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6a1b      	ldr	r3, [r3, #32]
 8007842:	4961      	ldr	r1, [pc, #388]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007844:	4313      	orrs	r3, r2
 8007846:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007852:	2b00      	cmp	r3, #0
 8007854:	d00a      	beq.n	800786c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007856:	4b5c      	ldr	r3, [pc, #368]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007858:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800785c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007864:	4958      	ldr	r1, [pc, #352]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007866:	4313      	orrs	r3, r2
 8007868:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007874:	2b00      	cmp	r3, #0
 8007876:	d015      	beq.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007878:	4b53      	ldr	r3, [pc, #332]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800787a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800787e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007886:	4950      	ldr	r1, [pc, #320]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007888:	4313      	orrs	r3, r2
 800788a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007892:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007896:	d105      	bne.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007898:	4b4b      	ldr	r3, [pc, #300]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800789a:	68db      	ldr	r3, [r3, #12]
 800789c:	4a4a      	ldr	r2, [pc, #296]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800789e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80078a2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d015      	beq.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80078b0:	4b45      	ldr	r3, [pc, #276]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80078b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078b6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078be:	4942      	ldr	r1, [pc, #264]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80078c0:	4313      	orrs	r3, r2
 80078c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80078ce:	d105      	bne.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80078d0:	4b3d      	ldr	r3, [pc, #244]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80078d2:	68db      	ldr	r3, [r3, #12]
 80078d4:	4a3c      	ldr	r2, [pc, #240]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80078d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80078da:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d015      	beq.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80078e8:	4b37      	ldr	r3, [pc, #220]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80078ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078ee:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078f6:	4934      	ldr	r1, [pc, #208]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80078f8:	4313      	orrs	r3, r2
 80078fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007902:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007906:	d105      	bne.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007908:	4b2f      	ldr	r3, [pc, #188]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800790a:	68db      	ldr	r3, [r3, #12]
 800790c:	4a2e      	ldr	r2, [pc, #184]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800790e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007912:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800791c:	2b00      	cmp	r3, #0
 800791e:	d015      	beq.n	800794c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007920:	4b29      	ldr	r3, [pc, #164]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007922:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007926:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800792e:	4926      	ldr	r1, [pc, #152]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007930:	4313      	orrs	r3, r2
 8007932:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800793a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800793e:	d105      	bne.n	800794c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007940:	4b21      	ldr	r3, [pc, #132]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007942:	68db      	ldr	r3, [r3, #12]
 8007944:	4a20      	ldr	r2, [pc, #128]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007946:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800794a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007954:	2b00      	cmp	r3, #0
 8007956:	d015      	beq.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007958:	4b1b      	ldr	r3, [pc, #108]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800795a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800795e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007966:	4918      	ldr	r1, [pc, #96]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007968:	4313      	orrs	r3, r2
 800796a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007972:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007976:	d105      	bne.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007978:	4b13      	ldr	r3, [pc, #76]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800797a:	68db      	ldr	r3, [r3, #12]
 800797c:	4a12      	ldr	r2, [pc, #72]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800797e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007982:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800798c:	2b00      	cmp	r3, #0
 800798e:	d015      	beq.n	80079bc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007990:	4b0d      	ldr	r3, [pc, #52]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007992:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007996:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800799e:	490a      	ldr	r1, [pc, #40]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80079a0:	4313      	orrs	r3, r2
 80079a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80079ae:	d105      	bne.n	80079bc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80079b0:	4b05      	ldr	r3, [pc, #20]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80079b2:	68db      	ldr	r3, [r3, #12]
 80079b4:	4a04      	ldr	r2, [pc, #16]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80079b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80079ba:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80079bc:	7cbb      	ldrb	r3, [r7, #18]
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3718      	adds	r7, #24
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}
 80079c6:	bf00      	nop
 80079c8:	40021000 	.word	0x40021000

080079cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b084      	sub	sp, #16
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d101      	bne.n	80079de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80079da:	2301      	movs	r3, #1
 80079dc:	e09d      	b.n	8007b1a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d108      	bne.n	80079f8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	685b      	ldr	r3, [r3, #4]
 80079ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80079ee:	d009      	beq.n	8007a04 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2200      	movs	r2, #0
 80079f4:	61da      	str	r2, [r3, #28]
 80079f6:	e005      	b.n	8007a04 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2200      	movs	r2, #0
 80079fc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2200      	movs	r2, #0
 8007a02:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2200      	movs	r2, #0
 8007a08:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007a10:	b2db      	uxtb	r3, r3
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d106      	bne.n	8007a24 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f7fa f932 	bl	8001c88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2202      	movs	r2, #2
 8007a28:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	681a      	ldr	r2, [r3, #0]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007a3a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	68db      	ldr	r3, [r3, #12]
 8007a40:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007a44:	d902      	bls.n	8007a4c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007a46:	2300      	movs	r3, #0
 8007a48:	60fb      	str	r3, [r7, #12]
 8007a4a:	e002      	b.n	8007a52 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007a4c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007a50:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	68db      	ldr	r3, [r3, #12]
 8007a56:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8007a5a:	d007      	beq.n	8007a6c <HAL_SPI_Init+0xa0>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	68db      	ldr	r3, [r3, #12]
 8007a60:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007a64:	d002      	beq.n	8007a6c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	685b      	ldr	r3, [r3, #4]
 8007a70:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	689b      	ldr	r3, [r3, #8]
 8007a78:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007a7c:	431a      	orrs	r2, r3
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	691b      	ldr	r3, [r3, #16]
 8007a82:	f003 0302 	and.w	r3, r3, #2
 8007a86:	431a      	orrs	r2, r3
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	695b      	ldr	r3, [r3, #20]
 8007a8c:	f003 0301 	and.w	r3, r3, #1
 8007a90:	431a      	orrs	r2, r3
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	699b      	ldr	r3, [r3, #24]
 8007a96:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007a9a:	431a      	orrs	r2, r3
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	69db      	ldr	r3, [r3, #28]
 8007aa0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007aa4:	431a      	orrs	r2, r3
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6a1b      	ldr	r3, [r3, #32]
 8007aaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007aae:	ea42 0103 	orr.w	r1, r2, r3
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ab6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	430a      	orrs	r2, r1
 8007ac0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	699b      	ldr	r3, [r3, #24]
 8007ac6:	0c1b      	lsrs	r3, r3, #16
 8007ac8:	f003 0204 	and.w	r2, r3, #4
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ad0:	f003 0310 	and.w	r3, r3, #16
 8007ad4:	431a      	orrs	r2, r3
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ada:	f003 0308 	and.w	r3, r3, #8
 8007ade:	431a      	orrs	r2, r3
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	68db      	ldr	r3, [r3, #12]
 8007ae4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007ae8:	ea42 0103 	orr.w	r1, r2, r3
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	430a      	orrs	r2, r1
 8007af8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	69da      	ldr	r2, [r3, #28]
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007b08:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2201      	movs	r2, #1
 8007b14:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8007b18:	2300      	movs	r3, #0
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3710      	adds	r7, #16
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}

08007b22 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007b22:	b580      	push	{r7, lr}
 8007b24:	b08a      	sub	sp, #40	@ 0x28
 8007b26:	af00      	add	r7, sp, #0
 8007b28:	60f8      	str	r0, [r7, #12]
 8007b2a:	60b9      	str	r1, [r7, #8]
 8007b2c:	607a      	str	r2, [r7, #4]
 8007b2e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007b30:	2301      	movs	r3, #1
 8007b32:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007b34:	2300      	movs	r3, #0
 8007b36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007b40:	2b01      	cmp	r3, #1
 8007b42:	d101      	bne.n	8007b48 <HAL_SPI_TransmitReceive+0x26>
 8007b44:	2302      	movs	r3, #2
 8007b46:	e20a      	b.n	8007f5e <HAL_SPI_TransmitReceive+0x43c>
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2201      	movs	r2, #1
 8007b4c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007b50:	f7fa fdf4 	bl	800273c <HAL_GetTick>
 8007b54:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007b5c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	685b      	ldr	r3, [r3, #4]
 8007b62:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007b64:	887b      	ldrh	r3, [r7, #2]
 8007b66:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8007b68:	887b      	ldrh	r3, [r7, #2]
 8007b6a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007b6c:	7efb      	ldrb	r3, [r7, #27]
 8007b6e:	2b01      	cmp	r3, #1
 8007b70:	d00e      	beq.n	8007b90 <HAL_SPI_TransmitReceive+0x6e>
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007b78:	d106      	bne.n	8007b88 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	689b      	ldr	r3, [r3, #8]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d102      	bne.n	8007b88 <HAL_SPI_TransmitReceive+0x66>
 8007b82:	7efb      	ldrb	r3, [r7, #27]
 8007b84:	2b04      	cmp	r3, #4
 8007b86:	d003      	beq.n	8007b90 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007b88:	2302      	movs	r3, #2
 8007b8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8007b8e:	e1e0      	b.n	8007f52 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d005      	beq.n	8007ba2 <HAL_SPI_TransmitReceive+0x80>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d002      	beq.n	8007ba2 <HAL_SPI_TransmitReceive+0x80>
 8007b9c:	887b      	ldrh	r3, [r7, #2]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d103      	bne.n	8007baa <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8007ba8:	e1d3      	b.n	8007f52 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007bb0:	b2db      	uxtb	r3, r3
 8007bb2:	2b04      	cmp	r3, #4
 8007bb4:	d003      	beq.n	8007bbe <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	2205      	movs	r2, #5
 8007bba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	687a      	ldr	r2, [r7, #4]
 8007bc8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	887a      	ldrh	r2, [r7, #2]
 8007bce:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	887a      	ldrh	r2, [r7, #2]
 8007bd6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	68ba      	ldr	r2, [r7, #8]
 8007bde:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	887a      	ldrh	r2, [r7, #2]
 8007be4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	887a      	ldrh	r2, [r7, #2]
 8007bea:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	68db      	ldr	r3, [r3, #12]
 8007bfc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007c00:	d802      	bhi.n	8007c08 <HAL_SPI_TransmitReceive+0xe6>
 8007c02:	8a3b      	ldrh	r3, [r7, #16]
 8007c04:	2b01      	cmp	r3, #1
 8007c06:	d908      	bls.n	8007c1a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	685a      	ldr	r2, [r3, #4]
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007c16:	605a      	str	r2, [r3, #4]
 8007c18:	e007      	b.n	8007c2a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	685a      	ldr	r2, [r3, #4]
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007c28:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c34:	2b40      	cmp	r3, #64	@ 0x40
 8007c36:	d007      	beq.n	8007c48 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	681a      	ldr	r2, [r3, #0]
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007c46:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	68db      	ldr	r3, [r3, #12]
 8007c4c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007c50:	f240 8081 	bls.w	8007d56 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	685b      	ldr	r3, [r3, #4]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d002      	beq.n	8007c62 <HAL_SPI_TransmitReceive+0x140>
 8007c5c:	8a7b      	ldrh	r3, [r7, #18]
 8007c5e:	2b01      	cmp	r3, #1
 8007c60:	d16d      	bne.n	8007d3e <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c66:	881a      	ldrh	r2, [r3, #0]
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c72:	1c9a      	adds	r2, r3, #2
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c7c:	b29b      	uxth	r3, r3
 8007c7e:	3b01      	subs	r3, #1
 8007c80:	b29a      	uxth	r2, r3
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c86:	e05a      	b.n	8007d3e <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	689b      	ldr	r3, [r3, #8]
 8007c8e:	f003 0302 	and.w	r3, r3, #2
 8007c92:	2b02      	cmp	r3, #2
 8007c94:	d11b      	bne.n	8007cce <HAL_SPI_TransmitReceive+0x1ac>
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c9a:	b29b      	uxth	r3, r3
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d016      	beq.n	8007cce <HAL_SPI_TransmitReceive+0x1ac>
 8007ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ca2:	2b01      	cmp	r3, #1
 8007ca4:	d113      	bne.n	8007cce <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007caa:	881a      	ldrh	r2, [r3, #0]
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cb6:	1c9a      	adds	r2, r3, #2
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007cc0:	b29b      	uxth	r3, r3
 8007cc2:	3b01      	subs	r3, #1
 8007cc4:	b29a      	uxth	r2, r3
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	689b      	ldr	r3, [r3, #8]
 8007cd4:	f003 0301 	and.w	r3, r3, #1
 8007cd8:	2b01      	cmp	r3, #1
 8007cda:	d11c      	bne.n	8007d16 <HAL_SPI_TransmitReceive+0x1f4>
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007ce2:	b29b      	uxth	r3, r3
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d016      	beq.n	8007d16 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	68da      	ldr	r2, [r3, #12]
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cf2:	b292      	uxth	r2, r2
 8007cf4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cfa:	1c9a      	adds	r2, r3, #2
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007d06:	b29b      	uxth	r3, r3
 8007d08:	3b01      	subs	r3, #1
 8007d0a:	b29a      	uxth	r2, r3
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007d12:	2301      	movs	r3, #1
 8007d14:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007d16:	f7fa fd11 	bl	800273c <HAL_GetTick>
 8007d1a:	4602      	mov	r2, r0
 8007d1c:	69fb      	ldr	r3, [r7, #28]
 8007d1e:	1ad3      	subs	r3, r2, r3
 8007d20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d22:	429a      	cmp	r2, r3
 8007d24:	d80b      	bhi.n	8007d3e <HAL_SPI_TransmitReceive+0x21c>
 8007d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d2c:	d007      	beq.n	8007d3e <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8007d2e:	2303      	movs	r3, #3
 8007d30:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	2201      	movs	r2, #1
 8007d38:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8007d3c:	e109      	b.n	8007f52 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d42:	b29b      	uxth	r3, r3
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d19f      	bne.n	8007c88 <HAL_SPI_TransmitReceive+0x166>
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007d4e:	b29b      	uxth	r3, r3
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d199      	bne.n	8007c88 <HAL_SPI_TransmitReceive+0x166>
 8007d54:	e0e3      	b.n	8007f1e <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	685b      	ldr	r3, [r3, #4]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d003      	beq.n	8007d66 <HAL_SPI_TransmitReceive+0x244>
 8007d5e:	8a7b      	ldrh	r3, [r7, #18]
 8007d60:	2b01      	cmp	r3, #1
 8007d62:	f040 80cf 	bne.w	8007f04 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d6a:	b29b      	uxth	r3, r3
 8007d6c:	2b01      	cmp	r3, #1
 8007d6e:	d912      	bls.n	8007d96 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d74:	881a      	ldrh	r2, [r3, #0]
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d80:	1c9a      	adds	r2, r3, #2
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d8a:	b29b      	uxth	r3, r3
 8007d8c:	3b02      	subs	r3, #2
 8007d8e:	b29a      	uxth	r2, r3
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007d94:	e0b6      	b.n	8007f04 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	330c      	adds	r3, #12
 8007da0:	7812      	ldrb	r2, [r2, #0]
 8007da2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007da8:	1c5a      	adds	r2, r3, #1
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007db2:	b29b      	uxth	r3, r3
 8007db4:	3b01      	subs	r3, #1
 8007db6:	b29a      	uxth	r2, r3
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007dbc:	e0a2      	b.n	8007f04 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	689b      	ldr	r3, [r3, #8]
 8007dc4:	f003 0302 	and.w	r3, r3, #2
 8007dc8:	2b02      	cmp	r3, #2
 8007dca:	d134      	bne.n	8007e36 <HAL_SPI_TransmitReceive+0x314>
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007dd0:	b29b      	uxth	r3, r3
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d02f      	beq.n	8007e36 <HAL_SPI_TransmitReceive+0x314>
 8007dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dd8:	2b01      	cmp	r3, #1
 8007dda:	d12c      	bne.n	8007e36 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007de0:	b29b      	uxth	r3, r3
 8007de2:	2b01      	cmp	r3, #1
 8007de4:	d912      	bls.n	8007e0c <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dea:	881a      	ldrh	r2, [r3, #0]
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007df6:	1c9a      	adds	r2, r3, #2
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007e00:	b29b      	uxth	r3, r3
 8007e02:	3b02      	subs	r3, #2
 8007e04:	b29a      	uxth	r2, r3
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007e0a:	e012      	b.n	8007e32 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	330c      	adds	r3, #12
 8007e16:	7812      	ldrb	r2, [r2, #0]
 8007e18:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e1e:	1c5a      	adds	r2, r3, #1
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007e28:	b29b      	uxth	r3, r3
 8007e2a:	3b01      	subs	r3, #1
 8007e2c:	b29a      	uxth	r2, r3
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007e32:	2300      	movs	r3, #0
 8007e34:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	689b      	ldr	r3, [r3, #8]
 8007e3c:	f003 0301 	and.w	r3, r3, #1
 8007e40:	2b01      	cmp	r3, #1
 8007e42:	d148      	bne.n	8007ed6 <HAL_SPI_TransmitReceive+0x3b4>
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007e4a:	b29b      	uxth	r3, r3
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d042      	beq.n	8007ed6 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007e56:	b29b      	uxth	r3, r3
 8007e58:	2b01      	cmp	r3, #1
 8007e5a:	d923      	bls.n	8007ea4 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	68da      	ldr	r2, [r3, #12]
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e66:	b292      	uxth	r2, r2
 8007e68:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e6e:	1c9a      	adds	r2, r3, #2
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007e7a:	b29b      	uxth	r3, r3
 8007e7c:	3b02      	subs	r3, #2
 8007e7e:	b29a      	uxth	r2, r3
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007e8c:	b29b      	uxth	r3, r3
 8007e8e:	2b01      	cmp	r3, #1
 8007e90:	d81f      	bhi.n	8007ed2 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	685a      	ldr	r2, [r3, #4]
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007ea0:	605a      	str	r2, [r3, #4]
 8007ea2:	e016      	b.n	8007ed2 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f103 020c 	add.w	r2, r3, #12
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007eb0:	7812      	ldrb	r2, [r2, #0]
 8007eb2:	b2d2      	uxtb	r2, r2
 8007eb4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007eba:	1c5a      	adds	r2, r3, #1
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007ec6:	b29b      	uxth	r3, r3
 8007ec8:	3b01      	subs	r3, #1
 8007eca:	b29a      	uxth	r2, r3
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007ed6:	f7fa fc31 	bl	800273c <HAL_GetTick>
 8007eda:	4602      	mov	r2, r0
 8007edc:	69fb      	ldr	r3, [r7, #28]
 8007ede:	1ad3      	subs	r3, r2, r3
 8007ee0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ee2:	429a      	cmp	r2, r3
 8007ee4:	d803      	bhi.n	8007eee <HAL_SPI_TransmitReceive+0x3cc>
 8007ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eec:	d102      	bne.n	8007ef4 <HAL_SPI_TransmitReceive+0x3d2>
 8007eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d107      	bne.n	8007f04 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8007ef4:	2303      	movs	r3, #3
 8007ef6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	2201      	movs	r2, #1
 8007efe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8007f02:	e026      	b.n	8007f52 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007f08:	b29b      	uxth	r3, r3
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	f47f af57 	bne.w	8007dbe <HAL_SPI_TransmitReceive+0x29c>
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007f16:	b29b      	uxth	r3, r3
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	f47f af50 	bne.w	8007dbe <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007f1e:	69fa      	ldr	r2, [r7, #28]
 8007f20:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007f22:	68f8      	ldr	r0, [r7, #12]
 8007f24:	f000 f94c 	bl	80081c0 <SPI_EndRxTxTransaction>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d005      	beq.n	8007f3a <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8007f2e:	2301      	movs	r3, #1
 8007f30:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	2220      	movs	r2, #32
 8007f38:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d003      	beq.n	8007f4a <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8007f42:	2301      	movs	r3, #1
 8007f44:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007f48:	e003      	b.n	8007f52 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	2201      	movs	r2, #1
 8007f4e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	2200      	movs	r2, #0
 8007f56:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8007f5a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3728      	adds	r7, #40	@ 0x28
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}

08007f66 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007f66:	b480      	push	{r7}
 8007f68:	b083      	sub	sp, #12
 8007f6a:	af00      	add	r7, sp, #0
 8007f6c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007f74:	b2db      	uxtb	r3, r3
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	370c      	adds	r7, #12
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f80:	4770      	bx	lr
	...

08007f84 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b088      	sub	sp, #32
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	60f8      	str	r0, [r7, #12]
 8007f8c:	60b9      	str	r1, [r7, #8]
 8007f8e:	603b      	str	r3, [r7, #0]
 8007f90:	4613      	mov	r3, r2
 8007f92:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007f94:	f7fa fbd2 	bl	800273c <HAL_GetTick>
 8007f98:	4602      	mov	r2, r0
 8007f9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f9c:	1a9b      	subs	r3, r3, r2
 8007f9e:	683a      	ldr	r2, [r7, #0]
 8007fa0:	4413      	add	r3, r2
 8007fa2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007fa4:	f7fa fbca 	bl	800273c <HAL_GetTick>
 8007fa8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007faa:	4b39      	ldr	r3, [pc, #228]	@ (8008090 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	015b      	lsls	r3, r3, #5
 8007fb0:	0d1b      	lsrs	r3, r3, #20
 8007fb2:	69fa      	ldr	r2, [r7, #28]
 8007fb4:	fb02 f303 	mul.w	r3, r2, r3
 8007fb8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007fba:	e054      	b.n	8008066 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fc2:	d050      	beq.n	8008066 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007fc4:	f7fa fbba 	bl	800273c <HAL_GetTick>
 8007fc8:	4602      	mov	r2, r0
 8007fca:	69bb      	ldr	r3, [r7, #24]
 8007fcc:	1ad3      	subs	r3, r2, r3
 8007fce:	69fa      	ldr	r2, [r7, #28]
 8007fd0:	429a      	cmp	r2, r3
 8007fd2:	d902      	bls.n	8007fda <SPI_WaitFlagStateUntilTimeout+0x56>
 8007fd4:	69fb      	ldr	r3, [r7, #28]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d13d      	bne.n	8008056 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	685a      	ldr	r2, [r3, #4]
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007fe8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	685b      	ldr	r3, [r3, #4]
 8007fee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007ff2:	d111      	bne.n	8008018 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	689b      	ldr	r3, [r3, #8]
 8007ff8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007ffc:	d004      	beq.n	8008008 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	689b      	ldr	r3, [r3, #8]
 8008002:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008006:	d107      	bne.n	8008018 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	681a      	ldr	r2, [r3, #0]
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008016:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800801c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008020:	d10f      	bne.n	8008042 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	681a      	ldr	r2, [r3, #0]
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008030:	601a      	str	r2, [r3, #0]
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	681a      	ldr	r2, [r3, #0]
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008040:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	2201      	movs	r2, #1
 8008046:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	2200      	movs	r2, #0
 800804e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8008052:	2303      	movs	r3, #3
 8008054:	e017      	b.n	8008086 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d101      	bne.n	8008060 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800805c:	2300      	movs	r3, #0
 800805e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008060:	697b      	ldr	r3, [r7, #20]
 8008062:	3b01      	subs	r3, #1
 8008064:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	689a      	ldr	r2, [r3, #8]
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	4013      	ands	r3, r2
 8008070:	68ba      	ldr	r2, [r7, #8]
 8008072:	429a      	cmp	r2, r3
 8008074:	bf0c      	ite	eq
 8008076:	2301      	moveq	r3, #1
 8008078:	2300      	movne	r3, #0
 800807a:	b2db      	uxtb	r3, r3
 800807c:	461a      	mov	r2, r3
 800807e:	79fb      	ldrb	r3, [r7, #7]
 8008080:	429a      	cmp	r2, r3
 8008082:	d19b      	bne.n	8007fbc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008084:	2300      	movs	r3, #0
}
 8008086:	4618      	mov	r0, r3
 8008088:	3720      	adds	r7, #32
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}
 800808e:	bf00      	nop
 8008090:	20000000 	.word	0x20000000

08008094 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b08a      	sub	sp, #40	@ 0x28
 8008098:	af00      	add	r7, sp, #0
 800809a:	60f8      	str	r0, [r7, #12]
 800809c:	60b9      	str	r1, [r7, #8]
 800809e:	607a      	str	r2, [r7, #4]
 80080a0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80080a2:	2300      	movs	r3, #0
 80080a4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80080a6:	f7fa fb49 	bl	800273c <HAL_GetTick>
 80080aa:	4602      	mov	r2, r0
 80080ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080ae:	1a9b      	subs	r3, r3, r2
 80080b0:	683a      	ldr	r2, [r7, #0]
 80080b2:	4413      	add	r3, r2
 80080b4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80080b6:	f7fa fb41 	bl	800273c <HAL_GetTick>
 80080ba:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	330c      	adds	r3, #12
 80080c2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80080c4:	4b3d      	ldr	r3, [pc, #244]	@ (80081bc <SPI_WaitFifoStateUntilTimeout+0x128>)
 80080c6:	681a      	ldr	r2, [r3, #0]
 80080c8:	4613      	mov	r3, r2
 80080ca:	009b      	lsls	r3, r3, #2
 80080cc:	4413      	add	r3, r2
 80080ce:	00da      	lsls	r2, r3, #3
 80080d0:	1ad3      	subs	r3, r2, r3
 80080d2:	0d1b      	lsrs	r3, r3, #20
 80080d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80080d6:	fb02 f303 	mul.w	r3, r2, r3
 80080da:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80080dc:	e060      	b.n	80081a0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80080e4:	d107      	bne.n	80080f6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d104      	bne.n	80080f6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80080ec:	69fb      	ldr	r3, [r7, #28]
 80080ee:	781b      	ldrb	r3, [r3, #0]
 80080f0:	b2db      	uxtb	r3, r3
 80080f2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80080f4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080fc:	d050      	beq.n	80081a0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80080fe:	f7fa fb1d 	bl	800273c <HAL_GetTick>
 8008102:	4602      	mov	r2, r0
 8008104:	6a3b      	ldr	r3, [r7, #32]
 8008106:	1ad3      	subs	r3, r2, r3
 8008108:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800810a:	429a      	cmp	r2, r3
 800810c:	d902      	bls.n	8008114 <SPI_WaitFifoStateUntilTimeout+0x80>
 800810e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008110:	2b00      	cmp	r3, #0
 8008112:	d13d      	bne.n	8008190 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	685a      	ldr	r2, [r3, #4]
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008122:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	685b      	ldr	r3, [r3, #4]
 8008128:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800812c:	d111      	bne.n	8008152 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	689b      	ldr	r3, [r3, #8]
 8008132:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008136:	d004      	beq.n	8008142 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	689b      	ldr	r3, [r3, #8]
 800813c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008140:	d107      	bne.n	8008152 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	681a      	ldr	r2, [r3, #0]
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008150:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008156:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800815a:	d10f      	bne.n	800817c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	681a      	ldr	r2, [r3, #0]
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800816a:	601a      	str	r2, [r3, #0]
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	681a      	ldr	r2, [r3, #0]
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800817a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	2201      	movs	r2, #1
 8008180:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	2200      	movs	r2, #0
 8008188:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800818c:	2303      	movs	r3, #3
 800818e:	e010      	b.n	80081b2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008190:	69bb      	ldr	r3, [r7, #24]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d101      	bne.n	800819a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8008196:	2300      	movs	r3, #0
 8008198:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800819a:	69bb      	ldr	r3, [r7, #24]
 800819c:	3b01      	subs	r3, #1
 800819e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	689a      	ldr	r2, [r3, #8]
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	4013      	ands	r3, r2
 80081aa:	687a      	ldr	r2, [r7, #4]
 80081ac:	429a      	cmp	r2, r3
 80081ae:	d196      	bne.n	80080de <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80081b0:	2300      	movs	r3, #0
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3728      	adds	r7, #40	@ 0x28
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}
 80081ba:	bf00      	nop
 80081bc:	20000000 	.word	0x20000000

080081c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b086      	sub	sp, #24
 80081c4:	af02      	add	r7, sp, #8
 80081c6:	60f8      	str	r0, [r7, #12]
 80081c8:	60b9      	str	r1, [r7, #8]
 80081ca:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	9300      	str	r3, [sp, #0]
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	2200      	movs	r2, #0
 80081d4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80081d8:	68f8      	ldr	r0, [r7, #12]
 80081da:	f7ff ff5b 	bl	8008094 <SPI_WaitFifoStateUntilTimeout>
 80081de:	4603      	mov	r3, r0
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d007      	beq.n	80081f4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80081e8:	f043 0220 	orr.w	r2, r3, #32
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80081f0:	2303      	movs	r3, #3
 80081f2:	e027      	b.n	8008244 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	9300      	str	r3, [sp, #0]
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	2200      	movs	r2, #0
 80081fc:	2180      	movs	r1, #128	@ 0x80
 80081fe:	68f8      	ldr	r0, [r7, #12]
 8008200:	f7ff fec0 	bl	8007f84 <SPI_WaitFlagStateUntilTimeout>
 8008204:	4603      	mov	r3, r0
 8008206:	2b00      	cmp	r3, #0
 8008208:	d007      	beq.n	800821a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800820e:	f043 0220 	orr.w	r2, r3, #32
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008216:	2303      	movs	r3, #3
 8008218:	e014      	b.n	8008244 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	9300      	str	r3, [sp, #0]
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	2200      	movs	r2, #0
 8008222:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8008226:	68f8      	ldr	r0, [r7, #12]
 8008228:	f7ff ff34 	bl	8008094 <SPI_WaitFifoStateUntilTimeout>
 800822c:	4603      	mov	r3, r0
 800822e:	2b00      	cmp	r3, #0
 8008230:	d007      	beq.n	8008242 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008236:	f043 0220 	orr.w	r2, r3, #32
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800823e:	2303      	movs	r3, #3
 8008240:	e000      	b.n	8008244 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008242:	2300      	movs	r3, #0
}
 8008244:	4618      	mov	r0, r3
 8008246:	3710      	adds	r7, #16
 8008248:	46bd      	mov	sp, r7
 800824a:	bd80      	pop	{r7, pc}

0800824c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b082      	sub	sp, #8
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d101      	bne.n	800825e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800825a:	2301      	movs	r3, #1
 800825c:	e049      	b.n	80082f2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008264:	b2db      	uxtb	r3, r3
 8008266:	2b00      	cmp	r3, #0
 8008268:	d106      	bne.n	8008278 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2200      	movs	r2, #0
 800826e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f7fa f80a 	bl	800228c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2202      	movs	r2, #2
 800827c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681a      	ldr	r2, [r3, #0]
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	3304      	adds	r3, #4
 8008288:	4619      	mov	r1, r3
 800828a:	4610      	mov	r0, r2
 800828c:	f000 fc9e 	bl	8008bcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2201      	movs	r2, #1
 8008294:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2201      	movs	r2, #1
 800829c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2201      	movs	r2, #1
 80082a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2201      	movs	r2, #1
 80082ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2201      	movs	r2, #1
 80082b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2201      	movs	r2, #1
 80082bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2201      	movs	r2, #1
 80082c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2201      	movs	r2, #1
 80082cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2201      	movs	r2, #1
 80082d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2201      	movs	r2, #1
 80082dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2201      	movs	r2, #1
 80082e4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2201      	movs	r2, #1
 80082ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80082f0:	2300      	movs	r3, #0
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3708      	adds	r7, #8
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}
	...

080082fc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b085      	sub	sp, #20
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800830a:	b2db      	uxtb	r3, r3
 800830c:	2b01      	cmp	r3, #1
 800830e:	d001      	beq.n	8008314 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008310:	2301      	movs	r3, #1
 8008312:	e042      	b.n	800839a <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2202      	movs	r2, #2
 8008318:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	4a21      	ldr	r2, [pc, #132]	@ (80083a8 <HAL_TIM_Base_Start+0xac>)
 8008322:	4293      	cmp	r3, r2
 8008324:	d018      	beq.n	8008358 <HAL_TIM_Base_Start+0x5c>
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800832e:	d013      	beq.n	8008358 <HAL_TIM_Base_Start+0x5c>
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	4a1d      	ldr	r2, [pc, #116]	@ (80083ac <HAL_TIM_Base_Start+0xb0>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d00e      	beq.n	8008358 <HAL_TIM_Base_Start+0x5c>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	4a1c      	ldr	r2, [pc, #112]	@ (80083b0 <HAL_TIM_Base_Start+0xb4>)
 8008340:	4293      	cmp	r3, r2
 8008342:	d009      	beq.n	8008358 <HAL_TIM_Base_Start+0x5c>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	4a1a      	ldr	r2, [pc, #104]	@ (80083b4 <HAL_TIM_Base_Start+0xb8>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d004      	beq.n	8008358 <HAL_TIM_Base_Start+0x5c>
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	4a19      	ldr	r2, [pc, #100]	@ (80083b8 <HAL_TIM_Base_Start+0xbc>)
 8008354:	4293      	cmp	r3, r2
 8008356:	d115      	bne.n	8008384 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	689a      	ldr	r2, [r3, #8]
 800835e:	4b17      	ldr	r3, [pc, #92]	@ (80083bc <HAL_TIM_Base_Start+0xc0>)
 8008360:	4013      	ands	r3, r2
 8008362:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	2b06      	cmp	r3, #6
 8008368:	d015      	beq.n	8008396 <HAL_TIM_Base_Start+0x9a>
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008370:	d011      	beq.n	8008396 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	681a      	ldr	r2, [r3, #0]
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f042 0201 	orr.w	r2, r2, #1
 8008380:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008382:	e008      	b.n	8008396 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	681a      	ldr	r2, [r3, #0]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f042 0201 	orr.w	r2, r2, #1
 8008392:	601a      	str	r2, [r3, #0]
 8008394:	e000      	b.n	8008398 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008396:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008398:	2300      	movs	r3, #0
}
 800839a:	4618      	mov	r0, r3
 800839c:	3714      	adds	r7, #20
 800839e:	46bd      	mov	sp, r7
 80083a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a4:	4770      	bx	lr
 80083a6:	bf00      	nop
 80083a8:	40012c00 	.word	0x40012c00
 80083ac:	40000400 	.word	0x40000400
 80083b0:	40000800 	.word	0x40000800
 80083b4:	40013400 	.word	0x40013400
 80083b8:	40014000 	.word	0x40014000
 80083bc:	00010007 	.word	0x00010007

080083c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b082      	sub	sp, #8
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d101      	bne.n	80083d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80083ce:	2301      	movs	r3, #1
 80083d0:	e049      	b.n	8008466 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80083d8:	b2db      	uxtb	r3, r3
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d106      	bne.n	80083ec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2200      	movs	r2, #0
 80083e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f000 f841 	bl	800846e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2202      	movs	r2, #2
 80083f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681a      	ldr	r2, [r3, #0]
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	3304      	adds	r3, #4
 80083fc:	4619      	mov	r1, r3
 80083fe:	4610      	mov	r0, r2
 8008400:	f000 fbe4 	bl	8008bcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2201      	movs	r2, #1
 8008408:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2201      	movs	r2, #1
 8008410:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2201      	movs	r2, #1
 8008418:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2201      	movs	r2, #1
 8008420:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2201      	movs	r2, #1
 8008428:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2201      	movs	r2, #1
 8008430:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2201      	movs	r2, #1
 8008438:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2201      	movs	r2, #1
 8008440:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2201      	movs	r2, #1
 8008448:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2201      	movs	r2, #1
 8008450:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2201      	movs	r2, #1
 8008458:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2201      	movs	r2, #1
 8008460:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008464:	2300      	movs	r3, #0
}
 8008466:	4618      	mov	r0, r3
 8008468:	3708      	adds	r7, #8
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}

0800846e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800846e:	b480      	push	{r7}
 8008470:	b083      	sub	sp, #12
 8008472:	af00      	add	r7, sp, #0
 8008474:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008476:	bf00      	nop
 8008478:	370c      	adds	r7, #12
 800847a:	46bd      	mov	sp, r7
 800847c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008480:	4770      	bx	lr
	...

08008484 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b084      	sub	sp, #16
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
 800848c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d109      	bne.n	80084a8 <HAL_TIM_PWM_Start+0x24>
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800849a:	b2db      	uxtb	r3, r3
 800849c:	2b01      	cmp	r3, #1
 800849e:	bf14      	ite	ne
 80084a0:	2301      	movne	r3, #1
 80084a2:	2300      	moveq	r3, #0
 80084a4:	b2db      	uxtb	r3, r3
 80084a6:	e03c      	b.n	8008522 <HAL_TIM_PWM_Start+0x9e>
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	2b04      	cmp	r3, #4
 80084ac:	d109      	bne.n	80084c2 <HAL_TIM_PWM_Start+0x3e>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80084b4:	b2db      	uxtb	r3, r3
 80084b6:	2b01      	cmp	r3, #1
 80084b8:	bf14      	ite	ne
 80084ba:	2301      	movne	r3, #1
 80084bc:	2300      	moveq	r3, #0
 80084be:	b2db      	uxtb	r3, r3
 80084c0:	e02f      	b.n	8008522 <HAL_TIM_PWM_Start+0x9e>
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	2b08      	cmp	r3, #8
 80084c6:	d109      	bne.n	80084dc <HAL_TIM_PWM_Start+0x58>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80084ce:	b2db      	uxtb	r3, r3
 80084d0:	2b01      	cmp	r3, #1
 80084d2:	bf14      	ite	ne
 80084d4:	2301      	movne	r3, #1
 80084d6:	2300      	moveq	r3, #0
 80084d8:	b2db      	uxtb	r3, r3
 80084da:	e022      	b.n	8008522 <HAL_TIM_PWM_Start+0x9e>
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	2b0c      	cmp	r3, #12
 80084e0:	d109      	bne.n	80084f6 <HAL_TIM_PWM_Start+0x72>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80084e8:	b2db      	uxtb	r3, r3
 80084ea:	2b01      	cmp	r3, #1
 80084ec:	bf14      	ite	ne
 80084ee:	2301      	movne	r3, #1
 80084f0:	2300      	moveq	r3, #0
 80084f2:	b2db      	uxtb	r3, r3
 80084f4:	e015      	b.n	8008522 <HAL_TIM_PWM_Start+0x9e>
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	2b10      	cmp	r3, #16
 80084fa:	d109      	bne.n	8008510 <HAL_TIM_PWM_Start+0x8c>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008502:	b2db      	uxtb	r3, r3
 8008504:	2b01      	cmp	r3, #1
 8008506:	bf14      	ite	ne
 8008508:	2301      	movne	r3, #1
 800850a:	2300      	moveq	r3, #0
 800850c:	b2db      	uxtb	r3, r3
 800850e:	e008      	b.n	8008522 <HAL_TIM_PWM_Start+0x9e>
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008516:	b2db      	uxtb	r3, r3
 8008518:	2b01      	cmp	r3, #1
 800851a:	bf14      	ite	ne
 800851c:	2301      	movne	r3, #1
 800851e:	2300      	moveq	r3, #0
 8008520:	b2db      	uxtb	r3, r3
 8008522:	2b00      	cmp	r3, #0
 8008524:	d001      	beq.n	800852a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008526:	2301      	movs	r3, #1
 8008528:	e097      	b.n	800865a <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d104      	bne.n	800853a <HAL_TIM_PWM_Start+0xb6>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2202      	movs	r2, #2
 8008534:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008538:	e023      	b.n	8008582 <HAL_TIM_PWM_Start+0xfe>
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	2b04      	cmp	r3, #4
 800853e:	d104      	bne.n	800854a <HAL_TIM_PWM_Start+0xc6>
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2202      	movs	r2, #2
 8008544:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008548:	e01b      	b.n	8008582 <HAL_TIM_PWM_Start+0xfe>
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	2b08      	cmp	r3, #8
 800854e:	d104      	bne.n	800855a <HAL_TIM_PWM_Start+0xd6>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2202      	movs	r2, #2
 8008554:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008558:	e013      	b.n	8008582 <HAL_TIM_PWM_Start+0xfe>
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	2b0c      	cmp	r3, #12
 800855e:	d104      	bne.n	800856a <HAL_TIM_PWM_Start+0xe6>
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2202      	movs	r2, #2
 8008564:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008568:	e00b      	b.n	8008582 <HAL_TIM_PWM_Start+0xfe>
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	2b10      	cmp	r3, #16
 800856e:	d104      	bne.n	800857a <HAL_TIM_PWM_Start+0xf6>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2202      	movs	r2, #2
 8008574:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008578:	e003      	b.n	8008582 <HAL_TIM_PWM_Start+0xfe>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2202      	movs	r2, #2
 800857e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	2201      	movs	r2, #1
 8008588:	6839      	ldr	r1, [r7, #0]
 800858a:	4618      	mov	r0, r3
 800858c:	f000 ffb4 	bl	80094f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4a33      	ldr	r2, [pc, #204]	@ (8008664 <HAL_TIM_PWM_Start+0x1e0>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d013      	beq.n	80085c2 <HAL_TIM_PWM_Start+0x13e>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	4a32      	ldr	r2, [pc, #200]	@ (8008668 <HAL_TIM_PWM_Start+0x1e4>)
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d00e      	beq.n	80085c2 <HAL_TIM_PWM_Start+0x13e>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4a30      	ldr	r2, [pc, #192]	@ (800866c <HAL_TIM_PWM_Start+0x1e8>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d009      	beq.n	80085c2 <HAL_TIM_PWM_Start+0x13e>
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	4a2f      	ldr	r2, [pc, #188]	@ (8008670 <HAL_TIM_PWM_Start+0x1ec>)
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d004      	beq.n	80085c2 <HAL_TIM_PWM_Start+0x13e>
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	4a2d      	ldr	r2, [pc, #180]	@ (8008674 <HAL_TIM_PWM_Start+0x1f0>)
 80085be:	4293      	cmp	r3, r2
 80085c0:	d101      	bne.n	80085c6 <HAL_TIM_PWM_Start+0x142>
 80085c2:	2301      	movs	r3, #1
 80085c4:	e000      	b.n	80085c8 <HAL_TIM_PWM_Start+0x144>
 80085c6:	2300      	movs	r3, #0
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d007      	beq.n	80085dc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80085da:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	4a20      	ldr	r2, [pc, #128]	@ (8008664 <HAL_TIM_PWM_Start+0x1e0>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d018      	beq.n	8008618 <HAL_TIM_PWM_Start+0x194>
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80085ee:	d013      	beq.n	8008618 <HAL_TIM_PWM_Start+0x194>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	4a20      	ldr	r2, [pc, #128]	@ (8008678 <HAL_TIM_PWM_Start+0x1f4>)
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d00e      	beq.n	8008618 <HAL_TIM_PWM_Start+0x194>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	4a1f      	ldr	r2, [pc, #124]	@ (800867c <HAL_TIM_PWM_Start+0x1f8>)
 8008600:	4293      	cmp	r3, r2
 8008602:	d009      	beq.n	8008618 <HAL_TIM_PWM_Start+0x194>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	4a17      	ldr	r2, [pc, #92]	@ (8008668 <HAL_TIM_PWM_Start+0x1e4>)
 800860a:	4293      	cmp	r3, r2
 800860c:	d004      	beq.n	8008618 <HAL_TIM_PWM_Start+0x194>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	4a16      	ldr	r2, [pc, #88]	@ (800866c <HAL_TIM_PWM_Start+0x1e8>)
 8008614:	4293      	cmp	r3, r2
 8008616:	d115      	bne.n	8008644 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	689a      	ldr	r2, [r3, #8]
 800861e:	4b18      	ldr	r3, [pc, #96]	@ (8008680 <HAL_TIM_PWM_Start+0x1fc>)
 8008620:	4013      	ands	r3, r2
 8008622:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	2b06      	cmp	r3, #6
 8008628:	d015      	beq.n	8008656 <HAL_TIM_PWM_Start+0x1d2>
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008630:	d011      	beq.n	8008656 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	681a      	ldr	r2, [r3, #0]
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f042 0201 	orr.w	r2, r2, #1
 8008640:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008642:	e008      	b.n	8008656 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	681a      	ldr	r2, [r3, #0]
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f042 0201 	orr.w	r2, r2, #1
 8008652:	601a      	str	r2, [r3, #0]
 8008654:	e000      	b.n	8008658 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008656:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008658:	2300      	movs	r3, #0
}
 800865a:	4618      	mov	r0, r3
 800865c:	3710      	adds	r7, #16
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}
 8008662:	bf00      	nop
 8008664:	40012c00 	.word	0x40012c00
 8008668:	40013400 	.word	0x40013400
 800866c:	40014000 	.word	0x40014000
 8008670:	40014400 	.word	0x40014400
 8008674:	40014800 	.word	0x40014800
 8008678:	40000400 	.word	0x40000400
 800867c:	40000800 	.word	0x40000800
 8008680:	00010007 	.word	0x00010007

08008684 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b082      	sub	sp, #8
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
 800868c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	2200      	movs	r2, #0
 8008694:	6839      	ldr	r1, [r7, #0]
 8008696:	4618      	mov	r0, r3
 8008698:	f000 ff2e 	bl	80094f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a3e      	ldr	r2, [pc, #248]	@ (800879c <HAL_TIM_PWM_Stop+0x118>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d013      	beq.n	80086ce <HAL_TIM_PWM_Stop+0x4a>
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4a3d      	ldr	r2, [pc, #244]	@ (80087a0 <HAL_TIM_PWM_Stop+0x11c>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d00e      	beq.n	80086ce <HAL_TIM_PWM_Stop+0x4a>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	4a3b      	ldr	r2, [pc, #236]	@ (80087a4 <HAL_TIM_PWM_Stop+0x120>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d009      	beq.n	80086ce <HAL_TIM_PWM_Stop+0x4a>
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	4a3a      	ldr	r2, [pc, #232]	@ (80087a8 <HAL_TIM_PWM_Stop+0x124>)
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d004      	beq.n	80086ce <HAL_TIM_PWM_Stop+0x4a>
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	4a38      	ldr	r2, [pc, #224]	@ (80087ac <HAL_TIM_PWM_Stop+0x128>)
 80086ca:	4293      	cmp	r3, r2
 80086cc:	d101      	bne.n	80086d2 <HAL_TIM_PWM_Stop+0x4e>
 80086ce:	2301      	movs	r3, #1
 80086d0:	e000      	b.n	80086d4 <HAL_TIM_PWM_Stop+0x50>
 80086d2:	2300      	movs	r3, #0
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d017      	beq.n	8008708 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	6a1a      	ldr	r2, [r3, #32]
 80086de:	f241 1311 	movw	r3, #4369	@ 0x1111
 80086e2:	4013      	ands	r3, r2
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d10f      	bne.n	8008708 <HAL_TIM_PWM_Stop+0x84>
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	6a1a      	ldr	r2, [r3, #32]
 80086ee:	f244 4344 	movw	r3, #17476	@ 0x4444
 80086f2:	4013      	ands	r3, r2
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d107      	bne.n	8008708 <HAL_TIM_PWM_Stop+0x84>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008706:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	6a1a      	ldr	r2, [r3, #32]
 800870e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008712:	4013      	ands	r3, r2
 8008714:	2b00      	cmp	r3, #0
 8008716:	d10f      	bne.n	8008738 <HAL_TIM_PWM_Stop+0xb4>
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	6a1a      	ldr	r2, [r3, #32]
 800871e:	f244 4344 	movw	r3, #17476	@ 0x4444
 8008722:	4013      	ands	r3, r2
 8008724:	2b00      	cmp	r3, #0
 8008726:	d107      	bne.n	8008738 <HAL_TIM_PWM_Stop+0xb4>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	681a      	ldr	r2, [r3, #0]
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f022 0201 	bic.w	r2, r2, #1
 8008736:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d104      	bne.n	8008748 <HAL_TIM_PWM_Stop+0xc4>
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2201      	movs	r2, #1
 8008742:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008746:	e023      	b.n	8008790 <HAL_TIM_PWM_Stop+0x10c>
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	2b04      	cmp	r3, #4
 800874c:	d104      	bne.n	8008758 <HAL_TIM_PWM_Stop+0xd4>
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2201      	movs	r2, #1
 8008752:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008756:	e01b      	b.n	8008790 <HAL_TIM_PWM_Stop+0x10c>
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	2b08      	cmp	r3, #8
 800875c:	d104      	bne.n	8008768 <HAL_TIM_PWM_Stop+0xe4>
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2201      	movs	r2, #1
 8008762:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008766:	e013      	b.n	8008790 <HAL_TIM_PWM_Stop+0x10c>
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	2b0c      	cmp	r3, #12
 800876c:	d104      	bne.n	8008778 <HAL_TIM_PWM_Stop+0xf4>
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2201      	movs	r2, #1
 8008772:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008776:	e00b      	b.n	8008790 <HAL_TIM_PWM_Stop+0x10c>
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	2b10      	cmp	r3, #16
 800877c:	d104      	bne.n	8008788 <HAL_TIM_PWM_Stop+0x104>
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2201      	movs	r2, #1
 8008782:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008786:	e003      	b.n	8008790 <HAL_TIM_PWM_Stop+0x10c>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2201      	movs	r2, #1
 800878c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8008790:	2300      	movs	r3, #0
}
 8008792:	4618      	mov	r0, r3
 8008794:	3708      	adds	r7, #8
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}
 800879a:	bf00      	nop
 800879c:	40012c00 	.word	0x40012c00
 80087a0:	40013400 	.word	0x40013400
 80087a4:	40014000 	.word	0x40014000
 80087a8:	40014400 	.word	0x40014400
 80087ac:	40014800 	.word	0x40014800

080087b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b086      	sub	sp, #24
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	60f8      	str	r0, [r7, #12]
 80087b8:	60b9      	str	r1, [r7, #8]
 80087ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80087bc:	2300      	movs	r3, #0
 80087be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80087c6:	2b01      	cmp	r3, #1
 80087c8:	d101      	bne.n	80087ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80087ca:	2302      	movs	r3, #2
 80087cc:	e0ff      	b.n	80089ce <HAL_TIM_PWM_ConfigChannel+0x21e>
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	2201      	movs	r2, #1
 80087d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2b14      	cmp	r3, #20
 80087da:	f200 80f0 	bhi.w	80089be <HAL_TIM_PWM_ConfigChannel+0x20e>
 80087de:	a201      	add	r2, pc, #4	@ (adr r2, 80087e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80087e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087e4:	08008839 	.word	0x08008839
 80087e8:	080089bf 	.word	0x080089bf
 80087ec:	080089bf 	.word	0x080089bf
 80087f0:	080089bf 	.word	0x080089bf
 80087f4:	08008879 	.word	0x08008879
 80087f8:	080089bf 	.word	0x080089bf
 80087fc:	080089bf 	.word	0x080089bf
 8008800:	080089bf 	.word	0x080089bf
 8008804:	080088bb 	.word	0x080088bb
 8008808:	080089bf 	.word	0x080089bf
 800880c:	080089bf 	.word	0x080089bf
 8008810:	080089bf 	.word	0x080089bf
 8008814:	080088fb 	.word	0x080088fb
 8008818:	080089bf 	.word	0x080089bf
 800881c:	080089bf 	.word	0x080089bf
 8008820:	080089bf 	.word	0x080089bf
 8008824:	0800893d 	.word	0x0800893d
 8008828:	080089bf 	.word	0x080089bf
 800882c:	080089bf 	.word	0x080089bf
 8008830:	080089bf 	.word	0x080089bf
 8008834:	0800897d 	.word	0x0800897d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	68b9      	ldr	r1, [r7, #8]
 800883e:	4618      	mov	r0, r3
 8008840:	f000 fa60 	bl	8008d04 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	699a      	ldr	r2, [r3, #24]
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f042 0208 	orr.w	r2, r2, #8
 8008852:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	699a      	ldr	r2, [r3, #24]
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f022 0204 	bic.w	r2, r2, #4
 8008862:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	6999      	ldr	r1, [r3, #24]
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	691a      	ldr	r2, [r3, #16]
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	430a      	orrs	r2, r1
 8008874:	619a      	str	r2, [r3, #24]
      break;
 8008876:	e0a5      	b.n	80089c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	68b9      	ldr	r1, [r7, #8]
 800887e:	4618      	mov	r0, r3
 8008880:	f000 fad0 	bl	8008e24 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	699a      	ldr	r2, [r3, #24]
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008892:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	699a      	ldr	r2, [r3, #24]
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80088a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	6999      	ldr	r1, [r3, #24]
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	691b      	ldr	r3, [r3, #16]
 80088ae:	021a      	lsls	r2, r3, #8
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	430a      	orrs	r2, r1
 80088b6:	619a      	str	r2, [r3, #24]
      break;
 80088b8:	e084      	b.n	80089c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	68b9      	ldr	r1, [r7, #8]
 80088c0:	4618      	mov	r0, r3
 80088c2:	f000 fb39 	bl	8008f38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	69da      	ldr	r2, [r3, #28]
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f042 0208 	orr.w	r2, r2, #8
 80088d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	69da      	ldr	r2, [r3, #28]
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f022 0204 	bic.w	r2, r2, #4
 80088e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	69d9      	ldr	r1, [r3, #28]
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	691a      	ldr	r2, [r3, #16]
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	430a      	orrs	r2, r1
 80088f6:	61da      	str	r2, [r3, #28]
      break;
 80088f8:	e064      	b.n	80089c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	68b9      	ldr	r1, [r7, #8]
 8008900:	4618      	mov	r0, r3
 8008902:	f000 fba1 	bl	8009048 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	69da      	ldr	r2, [r3, #28]
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008914:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	69da      	ldr	r2, [r3, #28]
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008924:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	69d9      	ldr	r1, [r3, #28]
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	691b      	ldr	r3, [r3, #16]
 8008930:	021a      	lsls	r2, r3, #8
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	430a      	orrs	r2, r1
 8008938:	61da      	str	r2, [r3, #28]
      break;
 800893a:	e043      	b.n	80089c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	68b9      	ldr	r1, [r7, #8]
 8008942:	4618      	mov	r0, r3
 8008944:	f000 fc0a 	bl	800915c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f042 0208 	orr.w	r2, r2, #8
 8008956:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f022 0204 	bic.w	r2, r2, #4
 8008966:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800896e:	68bb      	ldr	r3, [r7, #8]
 8008970:	691a      	ldr	r2, [r3, #16]
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	430a      	orrs	r2, r1
 8008978:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800897a:	e023      	b.n	80089c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	68b9      	ldr	r1, [r7, #8]
 8008982:	4618      	mov	r0, r3
 8008984:	f000 fc4e 	bl	8009224 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008996:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80089a6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80089ae:	68bb      	ldr	r3, [r7, #8]
 80089b0:	691b      	ldr	r3, [r3, #16]
 80089b2:	021a      	lsls	r2, r3, #8
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	430a      	orrs	r2, r1
 80089ba:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80089bc:	e002      	b.n	80089c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80089be:	2301      	movs	r3, #1
 80089c0:	75fb      	strb	r3, [r7, #23]
      break;
 80089c2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	2200      	movs	r2, #0
 80089c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80089cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	3718      	adds	r7, #24
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bd80      	pop	{r7, pc}
 80089d6:	bf00      	nop

080089d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b084      	sub	sp, #16
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
 80089e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80089e2:	2300      	movs	r3, #0
 80089e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80089ec:	2b01      	cmp	r3, #1
 80089ee:	d101      	bne.n	80089f4 <HAL_TIM_ConfigClockSource+0x1c>
 80089f0:	2302      	movs	r3, #2
 80089f2:	e0de      	b.n	8008bb2 <HAL_TIM_ConfigClockSource+0x1da>
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2201      	movs	r2, #1
 80089f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2202      	movs	r2, #2
 8008a00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	689b      	ldr	r3, [r3, #8]
 8008a0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008a0c:	68bb      	ldr	r3, [r7, #8]
 8008a0e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8008a12:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008a16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008a1e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	68ba      	ldr	r2, [r7, #8]
 8008a26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	4a63      	ldr	r2, [pc, #396]	@ (8008bbc <HAL_TIM_ConfigClockSource+0x1e4>)
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	f000 80a9 	beq.w	8008b86 <HAL_TIM_ConfigClockSource+0x1ae>
 8008a34:	4a61      	ldr	r2, [pc, #388]	@ (8008bbc <HAL_TIM_ConfigClockSource+0x1e4>)
 8008a36:	4293      	cmp	r3, r2
 8008a38:	f200 80ae 	bhi.w	8008b98 <HAL_TIM_ConfigClockSource+0x1c0>
 8008a3c:	4a60      	ldr	r2, [pc, #384]	@ (8008bc0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	f000 80a1 	beq.w	8008b86 <HAL_TIM_ConfigClockSource+0x1ae>
 8008a44:	4a5e      	ldr	r2, [pc, #376]	@ (8008bc0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	f200 80a6 	bhi.w	8008b98 <HAL_TIM_ConfigClockSource+0x1c0>
 8008a4c:	4a5d      	ldr	r2, [pc, #372]	@ (8008bc4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	f000 8099 	beq.w	8008b86 <HAL_TIM_ConfigClockSource+0x1ae>
 8008a54:	4a5b      	ldr	r2, [pc, #364]	@ (8008bc4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8008a56:	4293      	cmp	r3, r2
 8008a58:	f200 809e 	bhi.w	8008b98 <HAL_TIM_ConfigClockSource+0x1c0>
 8008a5c:	4a5a      	ldr	r2, [pc, #360]	@ (8008bc8 <HAL_TIM_ConfigClockSource+0x1f0>)
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	f000 8091 	beq.w	8008b86 <HAL_TIM_ConfigClockSource+0x1ae>
 8008a64:	4a58      	ldr	r2, [pc, #352]	@ (8008bc8 <HAL_TIM_ConfigClockSource+0x1f0>)
 8008a66:	4293      	cmp	r3, r2
 8008a68:	f200 8096 	bhi.w	8008b98 <HAL_TIM_ConfigClockSource+0x1c0>
 8008a6c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008a70:	f000 8089 	beq.w	8008b86 <HAL_TIM_ConfigClockSource+0x1ae>
 8008a74:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008a78:	f200 808e 	bhi.w	8008b98 <HAL_TIM_ConfigClockSource+0x1c0>
 8008a7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a80:	d03e      	beq.n	8008b00 <HAL_TIM_ConfigClockSource+0x128>
 8008a82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a86:	f200 8087 	bhi.w	8008b98 <HAL_TIM_ConfigClockSource+0x1c0>
 8008a8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a8e:	f000 8086 	beq.w	8008b9e <HAL_TIM_ConfigClockSource+0x1c6>
 8008a92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a96:	d87f      	bhi.n	8008b98 <HAL_TIM_ConfigClockSource+0x1c0>
 8008a98:	2b70      	cmp	r3, #112	@ 0x70
 8008a9a:	d01a      	beq.n	8008ad2 <HAL_TIM_ConfigClockSource+0xfa>
 8008a9c:	2b70      	cmp	r3, #112	@ 0x70
 8008a9e:	d87b      	bhi.n	8008b98 <HAL_TIM_ConfigClockSource+0x1c0>
 8008aa0:	2b60      	cmp	r3, #96	@ 0x60
 8008aa2:	d050      	beq.n	8008b46 <HAL_TIM_ConfigClockSource+0x16e>
 8008aa4:	2b60      	cmp	r3, #96	@ 0x60
 8008aa6:	d877      	bhi.n	8008b98 <HAL_TIM_ConfigClockSource+0x1c0>
 8008aa8:	2b50      	cmp	r3, #80	@ 0x50
 8008aaa:	d03c      	beq.n	8008b26 <HAL_TIM_ConfigClockSource+0x14e>
 8008aac:	2b50      	cmp	r3, #80	@ 0x50
 8008aae:	d873      	bhi.n	8008b98 <HAL_TIM_ConfigClockSource+0x1c0>
 8008ab0:	2b40      	cmp	r3, #64	@ 0x40
 8008ab2:	d058      	beq.n	8008b66 <HAL_TIM_ConfigClockSource+0x18e>
 8008ab4:	2b40      	cmp	r3, #64	@ 0x40
 8008ab6:	d86f      	bhi.n	8008b98 <HAL_TIM_ConfigClockSource+0x1c0>
 8008ab8:	2b30      	cmp	r3, #48	@ 0x30
 8008aba:	d064      	beq.n	8008b86 <HAL_TIM_ConfigClockSource+0x1ae>
 8008abc:	2b30      	cmp	r3, #48	@ 0x30
 8008abe:	d86b      	bhi.n	8008b98 <HAL_TIM_ConfigClockSource+0x1c0>
 8008ac0:	2b20      	cmp	r3, #32
 8008ac2:	d060      	beq.n	8008b86 <HAL_TIM_ConfigClockSource+0x1ae>
 8008ac4:	2b20      	cmp	r3, #32
 8008ac6:	d867      	bhi.n	8008b98 <HAL_TIM_ConfigClockSource+0x1c0>
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d05c      	beq.n	8008b86 <HAL_TIM_ConfigClockSource+0x1ae>
 8008acc:	2b10      	cmp	r3, #16
 8008ace:	d05a      	beq.n	8008b86 <HAL_TIM_ConfigClockSource+0x1ae>
 8008ad0:	e062      	b.n	8008b98 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008ae2:	f000 fce9 	bl	80094b8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	689b      	ldr	r3, [r3, #8]
 8008aec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008af4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	68ba      	ldr	r2, [r7, #8]
 8008afc:	609a      	str	r2, [r3, #8]
      break;
 8008afe:	e04f      	b.n	8008ba0 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008b10:	f000 fcd2 	bl	80094b8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	689a      	ldr	r2, [r3, #8]
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008b22:	609a      	str	r2, [r3, #8]
      break;
 8008b24:	e03c      	b.n	8008ba0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b32:	461a      	mov	r2, r3
 8008b34:	f000 fc44 	bl	80093c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	2150      	movs	r1, #80	@ 0x50
 8008b3e:	4618      	mov	r0, r3
 8008b40:	f000 fc9d 	bl	800947e <TIM_ITRx_SetConfig>
      break;
 8008b44:	e02c      	b.n	8008ba0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008b52:	461a      	mov	r2, r3
 8008b54:	f000 fc63 	bl	800941e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	2160      	movs	r1, #96	@ 0x60
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f000 fc8d 	bl	800947e <TIM_ITRx_SetConfig>
      break;
 8008b64:	e01c      	b.n	8008ba0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b72:	461a      	mov	r2, r3
 8008b74:	f000 fc24 	bl	80093c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	2140      	movs	r1, #64	@ 0x40
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f000 fc7d 	bl	800947e <TIM_ITRx_SetConfig>
      break;
 8008b84:	e00c      	b.n	8008ba0 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681a      	ldr	r2, [r3, #0]
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	4619      	mov	r1, r3
 8008b90:	4610      	mov	r0, r2
 8008b92:	f000 fc74 	bl	800947e <TIM_ITRx_SetConfig>
      break;
 8008b96:	e003      	b.n	8008ba0 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8008b98:	2301      	movs	r3, #1
 8008b9a:	73fb      	strb	r3, [r7, #15]
      break;
 8008b9c:	e000      	b.n	8008ba0 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8008b9e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2200      	movs	r2, #0
 8008bac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	3710      	adds	r7, #16
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}
 8008bba:	bf00      	nop
 8008bbc:	00100070 	.word	0x00100070
 8008bc0:	00100040 	.word	0x00100040
 8008bc4:	00100030 	.word	0x00100030
 8008bc8:	00100020 	.word	0x00100020

08008bcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008bcc:	b480      	push	{r7}
 8008bce:	b085      	sub	sp, #20
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
 8008bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	4a42      	ldr	r2, [pc, #264]	@ (8008ce8 <TIM_Base_SetConfig+0x11c>)
 8008be0:	4293      	cmp	r3, r2
 8008be2:	d00f      	beq.n	8008c04 <TIM_Base_SetConfig+0x38>
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008bea:	d00b      	beq.n	8008c04 <TIM_Base_SetConfig+0x38>
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	4a3f      	ldr	r2, [pc, #252]	@ (8008cec <TIM_Base_SetConfig+0x120>)
 8008bf0:	4293      	cmp	r3, r2
 8008bf2:	d007      	beq.n	8008c04 <TIM_Base_SetConfig+0x38>
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	4a3e      	ldr	r2, [pc, #248]	@ (8008cf0 <TIM_Base_SetConfig+0x124>)
 8008bf8:	4293      	cmp	r3, r2
 8008bfa:	d003      	beq.n	8008c04 <TIM_Base_SetConfig+0x38>
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	4a3d      	ldr	r2, [pc, #244]	@ (8008cf4 <TIM_Base_SetConfig+0x128>)
 8008c00:	4293      	cmp	r3, r2
 8008c02:	d108      	bne.n	8008c16 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	685b      	ldr	r3, [r3, #4]
 8008c10:	68fa      	ldr	r2, [r7, #12]
 8008c12:	4313      	orrs	r3, r2
 8008c14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	4a33      	ldr	r2, [pc, #204]	@ (8008ce8 <TIM_Base_SetConfig+0x11c>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d01b      	beq.n	8008c56 <TIM_Base_SetConfig+0x8a>
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c24:	d017      	beq.n	8008c56 <TIM_Base_SetConfig+0x8a>
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	4a30      	ldr	r2, [pc, #192]	@ (8008cec <TIM_Base_SetConfig+0x120>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	d013      	beq.n	8008c56 <TIM_Base_SetConfig+0x8a>
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	4a2f      	ldr	r2, [pc, #188]	@ (8008cf0 <TIM_Base_SetConfig+0x124>)
 8008c32:	4293      	cmp	r3, r2
 8008c34:	d00f      	beq.n	8008c56 <TIM_Base_SetConfig+0x8a>
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	4a2e      	ldr	r2, [pc, #184]	@ (8008cf4 <TIM_Base_SetConfig+0x128>)
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d00b      	beq.n	8008c56 <TIM_Base_SetConfig+0x8a>
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	4a2d      	ldr	r2, [pc, #180]	@ (8008cf8 <TIM_Base_SetConfig+0x12c>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d007      	beq.n	8008c56 <TIM_Base_SetConfig+0x8a>
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	4a2c      	ldr	r2, [pc, #176]	@ (8008cfc <TIM_Base_SetConfig+0x130>)
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d003      	beq.n	8008c56 <TIM_Base_SetConfig+0x8a>
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	4a2b      	ldr	r2, [pc, #172]	@ (8008d00 <TIM_Base_SetConfig+0x134>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d108      	bne.n	8008c68 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008c5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	68db      	ldr	r3, [r3, #12]
 8008c62:	68fa      	ldr	r2, [r7, #12]
 8008c64:	4313      	orrs	r3, r2
 8008c66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	695b      	ldr	r3, [r3, #20]
 8008c72:	4313      	orrs	r3, r2
 8008c74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	68fa      	ldr	r2, [r7, #12]
 8008c7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	689a      	ldr	r2, [r3, #8]
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	681a      	ldr	r2, [r3, #0]
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	4a16      	ldr	r2, [pc, #88]	@ (8008ce8 <TIM_Base_SetConfig+0x11c>)
 8008c90:	4293      	cmp	r3, r2
 8008c92:	d00f      	beq.n	8008cb4 <TIM_Base_SetConfig+0xe8>
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	4a17      	ldr	r2, [pc, #92]	@ (8008cf4 <TIM_Base_SetConfig+0x128>)
 8008c98:	4293      	cmp	r3, r2
 8008c9a:	d00b      	beq.n	8008cb4 <TIM_Base_SetConfig+0xe8>
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	4a16      	ldr	r2, [pc, #88]	@ (8008cf8 <TIM_Base_SetConfig+0x12c>)
 8008ca0:	4293      	cmp	r3, r2
 8008ca2:	d007      	beq.n	8008cb4 <TIM_Base_SetConfig+0xe8>
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	4a15      	ldr	r2, [pc, #84]	@ (8008cfc <TIM_Base_SetConfig+0x130>)
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	d003      	beq.n	8008cb4 <TIM_Base_SetConfig+0xe8>
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	4a14      	ldr	r2, [pc, #80]	@ (8008d00 <TIM_Base_SetConfig+0x134>)
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	d103      	bne.n	8008cbc <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	691a      	ldr	r2, [r3, #16]
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2201      	movs	r2, #1
 8008cc0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	691b      	ldr	r3, [r3, #16]
 8008cc6:	f003 0301 	and.w	r3, r3, #1
 8008cca:	2b01      	cmp	r3, #1
 8008ccc:	d105      	bne.n	8008cda <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	691b      	ldr	r3, [r3, #16]
 8008cd2:	f023 0201 	bic.w	r2, r3, #1
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	611a      	str	r2, [r3, #16]
  }
}
 8008cda:	bf00      	nop
 8008cdc:	3714      	adds	r7, #20
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce4:	4770      	bx	lr
 8008ce6:	bf00      	nop
 8008ce8:	40012c00 	.word	0x40012c00
 8008cec:	40000400 	.word	0x40000400
 8008cf0:	40000800 	.word	0x40000800
 8008cf4:	40013400 	.word	0x40013400
 8008cf8:	40014000 	.word	0x40014000
 8008cfc:	40014400 	.word	0x40014400
 8008d00:	40014800 	.word	0x40014800

08008d04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008d04:	b480      	push	{r7}
 8008d06:	b087      	sub	sp, #28
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
 8008d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6a1b      	ldr	r3, [r3, #32]
 8008d12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	6a1b      	ldr	r3, [r3, #32]
 8008d18:	f023 0201 	bic.w	r2, r3, #1
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	685b      	ldr	r3, [r3, #4]
 8008d24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	699b      	ldr	r3, [r3, #24]
 8008d2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008d32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	f023 0303 	bic.w	r3, r3, #3
 8008d3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	68fa      	ldr	r2, [r7, #12]
 8008d46:	4313      	orrs	r3, r2
 8008d48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008d4a:	697b      	ldr	r3, [r7, #20]
 8008d4c:	f023 0302 	bic.w	r3, r3, #2
 8008d50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	689b      	ldr	r3, [r3, #8]
 8008d56:	697a      	ldr	r2, [r7, #20]
 8008d58:	4313      	orrs	r3, r2
 8008d5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	4a2c      	ldr	r2, [pc, #176]	@ (8008e10 <TIM_OC1_SetConfig+0x10c>)
 8008d60:	4293      	cmp	r3, r2
 8008d62:	d00f      	beq.n	8008d84 <TIM_OC1_SetConfig+0x80>
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	4a2b      	ldr	r2, [pc, #172]	@ (8008e14 <TIM_OC1_SetConfig+0x110>)
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	d00b      	beq.n	8008d84 <TIM_OC1_SetConfig+0x80>
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	4a2a      	ldr	r2, [pc, #168]	@ (8008e18 <TIM_OC1_SetConfig+0x114>)
 8008d70:	4293      	cmp	r3, r2
 8008d72:	d007      	beq.n	8008d84 <TIM_OC1_SetConfig+0x80>
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	4a29      	ldr	r2, [pc, #164]	@ (8008e1c <TIM_OC1_SetConfig+0x118>)
 8008d78:	4293      	cmp	r3, r2
 8008d7a:	d003      	beq.n	8008d84 <TIM_OC1_SetConfig+0x80>
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	4a28      	ldr	r2, [pc, #160]	@ (8008e20 <TIM_OC1_SetConfig+0x11c>)
 8008d80:	4293      	cmp	r3, r2
 8008d82:	d10c      	bne.n	8008d9e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008d84:	697b      	ldr	r3, [r7, #20]
 8008d86:	f023 0308 	bic.w	r3, r3, #8
 8008d8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	68db      	ldr	r3, [r3, #12]
 8008d90:	697a      	ldr	r2, [r7, #20]
 8008d92:	4313      	orrs	r3, r2
 8008d94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008d96:	697b      	ldr	r3, [r7, #20]
 8008d98:	f023 0304 	bic.w	r3, r3, #4
 8008d9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	4a1b      	ldr	r2, [pc, #108]	@ (8008e10 <TIM_OC1_SetConfig+0x10c>)
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d00f      	beq.n	8008dc6 <TIM_OC1_SetConfig+0xc2>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	4a1a      	ldr	r2, [pc, #104]	@ (8008e14 <TIM_OC1_SetConfig+0x110>)
 8008daa:	4293      	cmp	r3, r2
 8008dac:	d00b      	beq.n	8008dc6 <TIM_OC1_SetConfig+0xc2>
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	4a19      	ldr	r2, [pc, #100]	@ (8008e18 <TIM_OC1_SetConfig+0x114>)
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d007      	beq.n	8008dc6 <TIM_OC1_SetConfig+0xc2>
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	4a18      	ldr	r2, [pc, #96]	@ (8008e1c <TIM_OC1_SetConfig+0x118>)
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d003      	beq.n	8008dc6 <TIM_OC1_SetConfig+0xc2>
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	4a17      	ldr	r2, [pc, #92]	@ (8008e20 <TIM_OC1_SetConfig+0x11c>)
 8008dc2:	4293      	cmp	r3, r2
 8008dc4:	d111      	bne.n	8008dea <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008dc6:	693b      	ldr	r3, [r7, #16]
 8008dc8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008dcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008dce:	693b      	ldr	r3, [r7, #16]
 8008dd0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008dd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	695b      	ldr	r3, [r3, #20]
 8008dda:	693a      	ldr	r2, [r7, #16]
 8008ddc:	4313      	orrs	r3, r2
 8008dde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	699b      	ldr	r3, [r3, #24]
 8008de4:	693a      	ldr	r2, [r7, #16]
 8008de6:	4313      	orrs	r3, r2
 8008de8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	693a      	ldr	r2, [r7, #16]
 8008dee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	68fa      	ldr	r2, [r7, #12]
 8008df4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	685a      	ldr	r2, [r3, #4]
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	697a      	ldr	r2, [r7, #20]
 8008e02:	621a      	str	r2, [r3, #32]
}
 8008e04:	bf00      	nop
 8008e06:	371c      	adds	r7, #28
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0e:	4770      	bx	lr
 8008e10:	40012c00 	.word	0x40012c00
 8008e14:	40013400 	.word	0x40013400
 8008e18:	40014000 	.word	0x40014000
 8008e1c:	40014400 	.word	0x40014400
 8008e20:	40014800 	.word	0x40014800

08008e24 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008e24:	b480      	push	{r7}
 8008e26:	b087      	sub	sp, #28
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
 8008e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	6a1b      	ldr	r3, [r3, #32]
 8008e32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	6a1b      	ldr	r3, [r3, #32]
 8008e38:	f023 0210 	bic.w	r2, r3, #16
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	685b      	ldr	r3, [r3, #4]
 8008e44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	699b      	ldr	r3, [r3, #24]
 8008e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008e52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008e5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	021b      	lsls	r3, r3, #8
 8008e66:	68fa      	ldr	r2, [r7, #12]
 8008e68:	4313      	orrs	r3, r2
 8008e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008e6c:	697b      	ldr	r3, [r7, #20]
 8008e6e:	f023 0320 	bic.w	r3, r3, #32
 8008e72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	689b      	ldr	r3, [r3, #8]
 8008e78:	011b      	lsls	r3, r3, #4
 8008e7a:	697a      	ldr	r2, [r7, #20]
 8008e7c:	4313      	orrs	r3, r2
 8008e7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	4a28      	ldr	r2, [pc, #160]	@ (8008f24 <TIM_OC2_SetConfig+0x100>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d003      	beq.n	8008e90 <TIM_OC2_SetConfig+0x6c>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	4a27      	ldr	r2, [pc, #156]	@ (8008f28 <TIM_OC2_SetConfig+0x104>)
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d10d      	bne.n	8008eac <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008e90:	697b      	ldr	r3, [r7, #20]
 8008e92:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008e96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	68db      	ldr	r3, [r3, #12]
 8008e9c:	011b      	lsls	r3, r3, #4
 8008e9e:	697a      	ldr	r2, [r7, #20]
 8008ea0:	4313      	orrs	r3, r2
 8008ea2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008ea4:	697b      	ldr	r3, [r7, #20]
 8008ea6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008eaa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	4a1d      	ldr	r2, [pc, #116]	@ (8008f24 <TIM_OC2_SetConfig+0x100>)
 8008eb0:	4293      	cmp	r3, r2
 8008eb2:	d00f      	beq.n	8008ed4 <TIM_OC2_SetConfig+0xb0>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	4a1c      	ldr	r2, [pc, #112]	@ (8008f28 <TIM_OC2_SetConfig+0x104>)
 8008eb8:	4293      	cmp	r3, r2
 8008eba:	d00b      	beq.n	8008ed4 <TIM_OC2_SetConfig+0xb0>
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	4a1b      	ldr	r2, [pc, #108]	@ (8008f2c <TIM_OC2_SetConfig+0x108>)
 8008ec0:	4293      	cmp	r3, r2
 8008ec2:	d007      	beq.n	8008ed4 <TIM_OC2_SetConfig+0xb0>
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	4a1a      	ldr	r2, [pc, #104]	@ (8008f30 <TIM_OC2_SetConfig+0x10c>)
 8008ec8:	4293      	cmp	r3, r2
 8008eca:	d003      	beq.n	8008ed4 <TIM_OC2_SetConfig+0xb0>
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	4a19      	ldr	r2, [pc, #100]	@ (8008f34 <TIM_OC2_SetConfig+0x110>)
 8008ed0:	4293      	cmp	r3, r2
 8008ed2:	d113      	bne.n	8008efc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008ed4:	693b      	ldr	r3, [r7, #16]
 8008ed6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008eda:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008edc:	693b      	ldr	r3, [r7, #16]
 8008ede:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008ee2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	695b      	ldr	r3, [r3, #20]
 8008ee8:	009b      	lsls	r3, r3, #2
 8008eea:	693a      	ldr	r2, [r7, #16]
 8008eec:	4313      	orrs	r3, r2
 8008eee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	699b      	ldr	r3, [r3, #24]
 8008ef4:	009b      	lsls	r3, r3, #2
 8008ef6:	693a      	ldr	r2, [r7, #16]
 8008ef8:	4313      	orrs	r3, r2
 8008efa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	693a      	ldr	r2, [r7, #16]
 8008f00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	68fa      	ldr	r2, [r7, #12]
 8008f06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	685a      	ldr	r2, [r3, #4]
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	697a      	ldr	r2, [r7, #20]
 8008f14:	621a      	str	r2, [r3, #32]
}
 8008f16:	bf00      	nop
 8008f18:	371c      	adds	r7, #28
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f20:	4770      	bx	lr
 8008f22:	bf00      	nop
 8008f24:	40012c00 	.word	0x40012c00
 8008f28:	40013400 	.word	0x40013400
 8008f2c:	40014000 	.word	0x40014000
 8008f30:	40014400 	.word	0x40014400
 8008f34:	40014800 	.word	0x40014800

08008f38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b087      	sub	sp, #28
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
 8008f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	6a1b      	ldr	r3, [r3, #32]
 8008f46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6a1b      	ldr	r3, [r3, #32]
 8008f4c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	685b      	ldr	r3, [r3, #4]
 8008f58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	69db      	ldr	r3, [r3, #28]
 8008f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008f66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	f023 0303 	bic.w	r3, r3, #3
 8008f72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	68fa      	ldr	r2, [r7, #12]
 8008f7a:	4313      	orrs	r3, r2
 8008f7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008f7e:	697b      	ldr	r3, [r7, #20]
 8008f80:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008f84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	689b      	ldr	r3, [r3, #8]
 8008f8a:	021b      	lsls	r3, r3, #8
 8008f8c:	697a      	ldr	r2, [r7, #20]
 8008f8e:	4313      	orrs	r3, r2
 8008f90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	4a27      	ldr	r2, [pc, #156]	@ (8009034 <TIM_OC3_SetConfig+0xfc>)
 8008f96:	4293      	cmp	r3, r2
 8008f98:	d003      	beq.n	8008fa2 <TIM_OC3_SetConfig+0x6a>
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	4a26      	ldr	r2, [pc, #152]	@ (8009038 <TIM_OC3_SetConfig+0x100>)
 8008f9e:	4293      	cmp	r3, r2
 8008fa0:	d10d      	bne.n	8008fbe <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008fa2:	697b      	ldr	r3, [r7, #20]
 8008fa4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008fa8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	68db      	ldr	r3, [r3, #12]
 8008fae:	021b      	lsls	r3, r3, #8
 8008fb0:	697a      	ldr	r2, [r7, #20]
 8008fb2:	4313      	orrs	r3, r2
 8008fb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008fb6:	697b      	ldr	r3, [r7, #20]
 8008fb8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008fbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	4a1c      	ldr	r2, [pc, #112]	@ (8009034 <TIM_OC3_SetConfig+0xfc>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d00f      	beq.n	8008fe6 <TIM_OC3_SetConfig+0xae>
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	4a1b      	ldr	r2, [pc, #108]	@ (8009038 <TIM_OC3_SetConfig+0x100>)
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	d00b      	beq.n	8008fe6 <TIM_OC3_SetConfig+0xae>
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	4a1a      	ldr	r2, [pc, #104]	@ (800903c <TIM_OC3_SetConfig+0x104>)
 8008fd2:	4293      	cmp	r3, r2
 8008fd4:	d007      	beq.n	8008fe6 <TIM_OC3_SetConfig+0xae>
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	4a19      	ldr	r2, [pc, #100]	@ (8009040 <TIM_OC3_SetConfig+0x108>)
 8008fda:	4293      	cmp	r3, r2
 8008fdc:	d003      	beq.n	8008fe6 <TIM_OC3_SetConfig+0xae>
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	4a18      	ldr	r2, [pc, #96]	@ (8009044 <TIM_OC3_SetConfig+0x10c>)
 8008fe2:	4293      	cmp	r3, r2
 8008fe4:	d113      	bne.n	800900e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008fe6:	693b      	ldr	r3, [r7, #16]
 8008fe8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008fec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008fee:	693b      	ldr	r3, [r7, #16]
 8008ff0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008ff4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	695b      	ldr	r3, [r3, #20]
 8008ffa:	011b      	lsls	r3, r3, #4
 8008ffc:	693a      	ldr	r2, [r7, #16]
 8008ffe:	4313      	orrs	r3, r2
 8009000:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	699b      	ldr	r3, [r3, #24]
 8009006:	011b      	lsls	r3, r3, #4
 8009008:	693a      	ldr	r2, [r7, #16]
 800900a:	4313      	orrs	r3, r2
 800900c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	693a      	ldr	r2, [r7, #16]
 8009012:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	68fa      	ldr	r2, [r7, #12]
 8009018:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	685a      	ldr	r2, [r3, #4]
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	697a      	ldr	r2, [r7, #20]
 8009026:	621a      	str	r2, [r3, #32]
}
 8009028:	bf00      	nop
 800902a:	371c      	adds	r7, #28
 800902c:	46bd      	mov	sp, r7
 800902e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009032:	4770      	bx	lr
 8009034:	40012c00 	.word	0x40012c00
 8009038:	40013400 	.word	0x40013400
 800903c:	40014000 	.word	0x40014000
 8009040:	40014400 	.word	0x40014400
 8009044:	40014800 	.word	0x40014800

08009048 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009048:	b480      	push	{r7}
 800904a:	b087      	sub	sp, #28
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
 8009050:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6a1b      	ldr	r3, [r3, #32]
 8009056:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6a1b      	ldr	r3, [r3, #32]
 800905c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	685b      	ldr	r3, [r3, #4]
 8009068:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	69db      	ldr	r3, [r3, #28]
 800906e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009076:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800907a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009082:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	021b      	lsls	r3, r3, #8
 800908a:	68fa      	ldr	r2, [r7, #12]
 800908c:	4313      	orrs	r3, r2
 800908e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009090:	697b      	ldr	r3, [r7, #20]
 8009092:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009096:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	689b      	ldr	r3, [r3, #8]
 800909c:	031b      	lsls	r3, r3, #12
 800909e:	697a      	ldr	r2, [r7, #20]
 80090a0:	4313      	orrs	r3, r2
 80090a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	4a28      	ldr	r2, [pc, #160]	@ (8009148 <TIM_OC4_SetConfig+0x100>)
 80090a8:	4293      	cmp	r3, r2
 80090aa:	d003      	beq.n	80090b4 <TIM_OC4_SetConfig+0x6c>
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	4a27      	ldr	r2, [pc, #156]	@ (800914c <TIM_OC4_SetConfig+0x104>)
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d10d      	bne.n	80090d0 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80090b4:	697b      	ldr	r3, [r7, #20]
 80090b6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80090ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	68db      	ldr	r3, [r3, #12]
 80090c0:	031b      	lsls	r3, r3, #12
 80090c2:	697a      	ldr	r2, [r7, #20]
 80090c4:	4313      	orrs	r3, r2
 80090c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80090c8:	697b      	ldr	r3, [r7, #20]
 80090ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80090ce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	4a1d      	ldr	r2, [pc, #116]	@ (8009148 <TIM_OC4_SetConfig+0x100>)
 80090d4:	4293      	cmp	r3, r2
 80090d6:	d00f      	beq.n	80090f8 <TIM_OC4_SetConfig+0xb0>
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	4a1c      	ldr	r2, [pc, #112]	@ (800914c <TIM_OC4_SetConfig+0x104>)
 80090dc:	4293      	cmp	r3, r2
 80090de:	d00b      	beq.n	80090f8 <TIM_OC4_SetConfig+0xb0>
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	4a1b      	ldr	r2, [pc, #108]	@ (8009150 <TIM_OC4_SetConfig+0x108>)
 80090e4:	4293      	cmp	r3, r2
 80090e6:	d007      	beq.n	80090f8 <TIM_OC4_SetConfig+0xb0>
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	4a1a      	ldr	r2, [pc, #104]	@ (8009154 <TIM_OC4_SetConfig+0x10c>)
 80090ec:	4293      	cmp	r3, r2
 80090ee:	d003      	beq.n	80090f8 <TIM_OC4_SetConfig+0xb0>
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	4a19      	ldr	r2, [pc, #100]	@ (8009158 <TIM_OC4_SetConfig+0x110>)
 80090f4:	4293      	cmp	r3, r2
 80090f6:	d113      	bne.n	8009120 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80090f8:	693b      	ldr	r3, [r7, #16]
 80090fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80090fe:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8009100:	693b      	ldr	r3, [r7, #16]
 8009102:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009106:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	695b      	ldr	r3, [r3, #20]
 800910c:	019b      	lsls	r3, r3, #6
 800910e:	693a      	ldr	r2, [r7, #16]
 8009110:	4313      	orrs	r3, r2
 8009112:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	699b      	ldr	r3, [r3, #24]
 8009118:	019b      	lsls	r3, r3, #6
 800911a:	693a      	ldr	r2, [r7, #16]
 800911c:	4313      	orrs	r3, r2
 800911e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	693a      	ldr	r2, [r7, #16]
 8009124:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	68fa      	ldr	r2, [r7, #12]
 800912a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	685a      	ldr	r2, [r3, #4]
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	697a      	ldr	r2, [r7, #20]
 8009138:	621a      	str	r2, [r3, #32]
}
 800913a:	bf00      	nop
 800913c:	371c      	adds	r7, #28
 800913e:	46bd      	mov	sp, r7
 8009140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009144:	4770      	bx	lr
 8009146:	bf00      	nop
 8009148:	40012c00 	.word	0x40012c00
 800914c:	40013400 	.word	0x40013400
 8009150:	40014000 	.word	0x40014000
 8009154:	40014400 	.word	0x40014400
 8009158:	40014800 	.word	0x40014800

0800915c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800915c:	b480      	push	{r7}
 800915e:	b087      	sub	sp, #28
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
 8009164:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6a1b      	ldr	r3, [r3, #32]
 800916a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	6a1b      	ldr	r3, [r3, #32]
 8009170:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	685b      	ldr	r3, [r3, #4]
 800917c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800918a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800918e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	68fa      	ldr	r2, [r7, #12]
 8009196:	4313      	orrs	r3, r2
 8009198:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800919a:	693b      	ldr	r3, [r7, #16]
 800919c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80091a0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	689b      	ldr	r3, [r3, #8]
 80091a6:	041b      	lsls	r3, r3, #16
 80091a8:	693a      	ldr	r2, [r7, #16]
 80091aa:	4313      	orrs	r3, r2
 80091ac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	4a17      	ldr	r2, [pc, #92]	@ (8009210 <TIM_OC5_SetConfig+0xb4>)
 80091b2:	4293      	cmp	r3, r2
 80091b4:	d00f      	beq.n	80091d6 <TIM_OC5_SetConfig+0x7a>
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	4a16      	ldr	r2, [pc, #88]	@ (8009214 <TIM_OC5_SetConfig+0xb8>)
 80091ba:	4293      	cmp	r3, r2
 80091bc:	d00b      	beq.n	80091d6 <TIM_OC5_SetConfig+0x7a>
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	4a15      	ldr	r2, [pc, #84]	@ (8009218 <TIM_OC5_SetConfig+0xbc>)
 80091c2:	4293      	cmp	r3, r2
 80091c4:	d007      	beq.n	80091d6 <TIM_OC5_SetConfig+0x7a>
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	4a14      	ldr	r2, [pc, #80]	@ (800921c <TIM_OC5_SetConfig+0xc0>)
 80091ca:	4293      	cmp	r3, r2
 80091cc:	d003      	beq.n	80091d6 <TIM_OC5_SetConfig+0x7a>
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	4a13      	ldr	r2, [pc, #76]	@ (8009220 <TIM_OC5_SetConfig+0xc4>)
 80091d2:	4293      	cmp	r3, r2
 80091d4:	d109      	bne.n	80091ea <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80091d6:	697b      	ldr	r3, [r7, #20]
 80091d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80091dc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	695b      	ldr	r3, [r3, #20]
 80091e2:	021b      	lsls	r3, r3, #8
 80091e4:	697a      	ldr	r2, [r7, #20]
 80091e6:	4313      	orrs	r3, r2
 80091e8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	697a      	ldr	r2, [r7, #20]
 80091ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	68fa      	ldr	r2, [r7, #12]
 80091f4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	685a      	ldr	r2, [r3, #4]
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	693a      	ldr	r2, [r7, #16]
 8009202:	621a      	str	r2, [r3, #32]
}
 8009204:	bf00      	nop
 8009206:	371c      	adds	r7, #28
 8009208:	46bd      	mov	sp, r7
 800920a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920e:	4770      	bx	lr
 8009210:	40012c00 	.word	0x40012c00
 8009214:	40013400 	.word	0x40013400
 8009218:	40014000 	.word	0x40014000
 800921c:	40014400 	.word	0x40014400
 8009220:	40014800 	.word	0x40014800

08009224 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009224:	b480      	push	{r7}
 8009226:	b087      	sub	sp, #28
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
 800922c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6a1b      	ldr	r3, [r3, #32]
 8009232:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	6a1b      	ldr	r3, [r3, #32]
 8009238:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	685b      	ldr	r3, [r3, #4]
 8009244:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800924a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009252:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009256:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	021b      	lsls	r3, r3, #8
 800925e:	68fa      	ldr	r2, [r7, #12]
 8009260:	4313      	orrs	r3, r2
 8009262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009264:	693b      	ldr	r3, [r7, #16]
 8009266:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800926a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	689b      	ldr	r3, [r3, #8]
 8009270:	051b      	lsls	r3, r3, #20
 8009272:	693a      	ldr	r2, [r7, #16]
 8009274:	4313      	orrs	r3, r2
 8009276:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	4a18      	ldr	r2, [pc, #96]	@ (80092dc <TIM_OC6_SetConfig+0xb8>)
 800927c:	4293      	cmp	r3, r2
 800927e:	d00f      	beq.n	80092a0 <TIM_OC6_SetConfig+0x7c>
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	4a17      	ldr	r2, [pc, #92]	@ (80092e0 <TIM_OC6_SetConfig+0xbc>)
 8009284:	4293      	cmp	r3, r2
 8009286:	d00b      	beq.n	80092a0 <TIM_OC6_SetConfig+0x7c>
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	4a16      	ldr	r2, [pc, #88]	@ (80092e4 <TIM_OC6_SetConfig+0xc0>)
 800928c:	4293      	cmp	r3, r2
 800928e:	d007      	beq.n	80092a0 <TIM_OC6_SetConfig+0x7c>
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	4a15      	ldr	r2, [pc, #84]	@ (80092e8 <TIM_OC6_SetConfig+0xc4>)
 8009294:	4293      	cmp	r3, r2
 8009296:	d003      	beq.n	80092a0 <TIM_OC6_SetConfig+0x7c>
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	4a14      	ldr	r2, [pc, #80]	@ (80092ec <TIM_OC6_SetConfig+0xc8>)
 800929c:	4293      	cmp	r3, r2
 800929e:	d109      	bne.n	80092b4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80092a0:	697b      	ldr	r3, [r7, #20]
 80092a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80092a6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	695b      	ldr	r3, [r3, #20]
 80092ac:	029b      	lsls	r3, r3, #10
 80092ae:	697a      	ldr	r2, [r7, #20]
 80092b0:	4313      	orrs	r3, r2
 80092b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	697a      	ldr	r2, [r7, #20]
 80092b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	68fa      	ldr	r2, [r7, #12]
 80092be:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	685a      	ldr	r2, [r3, #4]
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	693a      	ldr	r2, [r7, #16]
 80092cc:	621a      	str	r2, [r3, #32]
}
 80092ce:	bf00      	nop
 80092d0:	371c      	adds	r7, #28
 80092d2:	46bd      	mov	sp, r7
 80092d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d8:	4770      	bx	lr
 80092da:	bf00      	nop
 80092dc:	40012c00 	.word	0x40012c00
 80092e0:	40013400 	.word	0x40013400
 80092e4:	40014000 	.word	0x40014000
 80092e8:	40014400 	.word	0x40014400
 80092ec:	40014800 	.word	0x40014800

080092f0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80092f0:	b480      	push	{r7}
 80092f2:	b087      	sub	sp, #28
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	60f8      	str	r0, [r7, #12]
 80092f8:	60b9      	str	r1, [r7, #8]
 80092fa:	607a      	str	r2, [r7, #4]
 80092fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	6a1b      	ldr	r3, [r3, #32]
 8009302:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	6a1b      	ldr	r3, [r3, #32]
 8009308:	f023 0201 	bic.w	r2, r3, #1
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	699b      	ldr	r3, [r3, #24]
 8009314:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	4a24      	ldr	r2, [pc, #144]	@ (80093ac <TIM_TI1_SetConfig+0xbc>)
 800931a:	4293      	cmp	r3, r2
 800931c:	d013      	beq.n	8009346 <TIM_TI1_SetConfig+0x56>
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009324:	d00f      	beq.n	8009346 <TIM_TI1_SetConfig+0x56>
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	4a21      	ldr	r2, [pc, #132]	@ (80093b0 <TIM_TI1_SetConfig+0xc0>)
 800932a:	4293      	cmp	r3, r2
 800932c:	d00b      	beq.n	8009346 <TIM_TI1_SetConfig+0x56>
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	4a20      	ldr	r2, [pc, #128]	@ (80093b4 <TIM_TI1_SetConfig+0xc4>)
 8009332:	4293      	cmp	r3, r2
 8009334:	d007      	beq.n	8009346 <TIM_TI1_SetConfig+0x56>
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	4a1f      	ldr	r2, [pc, #124]	@ (80093b8 <TIM_TI1_SetConfig+0xc8>)
 800933a:	4293      	cmp	r3, r2
 800933c:	d003      	beq.n	8009346 <TIM_TI1_SetConfig+0x56>
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	4a1e      	ldr	r2, [pc, #120]	@ (80093bc <TIM_TI1_SetConfig+0xcc>)
 8009342:	4293      	cmp	r3, r2
 8009344:	d101      	bne.n	800934a <TIM_TI1_SetConfig+0x5a>
 8009346:	2301      	movs	r3, #1
 8009348:	e000      	b.n	800934c <TIM_TI1_SetConfig+0x5c>
 800934a:	2300      	movs	r3, #0
 800934c:	2b00      	cmp	r3, #0
 800934e:	d008      	beq.n	8009362 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009350:	697b      	ldr	r3, [r7, #20]
 8009352:	f023 0303 	bic.w	r3, r3, #3
 8009356:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009358:	697a      	ldr	r2, [r7, #20]
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	4313      	orrs	r3, r2
 800935e:	617b      	str	r3, [r7, #20]
 8009360:	e003      	b.n	800936a <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8009362:	697b      	ldr	r3, [r7, #20]
 8009364:	f043 0301 	orr.w	r3, r3, #1
 8009368:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009370:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	011b      	lsls	r3, r3, #4
 8009376:	b2db      	uxtb	r3, r3
 8009378:	697a      	ldr	r2, [r7, #20]
 800937a:	4313      	orrs	r3, r2
 800937c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800937e:	693b      	ldr	r3, [r7, #16]
 8009380:	f023 030a 	bic.w	r3, r3, #10
 8009384:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8009386:	68bb      	ldr	r3, [r7, #8]
 8009388:	f003 030a 	and.w	r3, r3, #10
 800938c:	693a      	ldr	r2, [r7, #16]
 800938e:	4313      	orrs	r3, r2
 8009390:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	697a      	ldr	r2, [r7, #20]
 8009396:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	693a      	ldr	r2, [r7, #16]
 800939c:	621a      	str	r2, [r3, #32]
}
 800939e:	bf00      	nop
 80093a0:	371c      	adds	r7, #28
 80093a2:	46bd      	mov	sp, r7
 80093a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a8:	4770      	bx	lr
 80093aa:	bf00      	nop
 80093ac:	40012c00 	.word	0x40012c00
 80093b0:	40000400 	.word	0x40000400
 80093b4:	40000800 	.word	0x40000800
 80093b8:	40013400 	.word	0x40013400
 80093bc:	40014000 	.word	0x40014000

080093c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80093c0:	b480      	push	{r7}
 80093c2:	b087      	sub	sp, #28
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	60f8      	str	r0, [r7, #12]
 80093c8:	60b9      	str	r1, [r7, #8]
 80093ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	6a1b      	ldr	r3, [r3, #32]
 80093d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	6a1b      	ldr	r3, [r3, #32]
 80093d6:	f023 0201 	bic.w	r2, r3, #1
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	699b      	ldr	r3, [r3, #24]
 80093e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80093e4:	693b      	ldr	r3, [r7, #16]
 80093e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80093ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	011b      	lsls	r3, r3, #4
 80093f0:	693a      	ldr	r2, [r7, #16]
 80093f2:	4313      	orrs	r3, r2
 80093f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80093f6:	697b      	ldr	r3, [r7, #20]
 80093f8:	f023 030a 	bic.w	r3, r3, #10
 80093fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80093fe:	697a      	ldr	r2, [r7, #20]
 8009400:	68bb      	ldr	r3, [r7, #8]
 8009402:	4313      	orrs	r3, r2
 8009404:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	693a      	ldr	r2, [r7, #16]
 800940a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	697a      	ldr	r2, [r7, #20]
 8009410:	621a      	str	r2, [r3, #32]
}
 8009412:	bf00      	nop
 8009414:	371c      	adds	r7, #28
 8009416:	46bd      	mov	sp, r7
 8009418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941c:	4770      	bx	lr

0800941e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800941e:	b480      	push	{r7}
 8009420:	b087      	sub	sp, #28
 8009422:	af00      	add	r7, sp, #0
 8009424:	60f8      	str	r0, [r7, #12]
 8009426:	60b9      	str	r1, [r7, #8]
 8009428:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	6a1b      	ldr	r3, [r3, #32]
 800942e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	6a1b      	ldr	r3, [r3, #32]
 8009434:	f023 0210 	bic.w	r2, r3, #16
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	699b      	ldr	r3, [r3, #24]
 8009440:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009442:	693b      	ldr	r3, [r7, #16]
 8009444:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009448:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	031b      	lsls	r3, r3, #12
 800944e:	693a      	ldr	r2, [r7, #16]
 8009450:	4313      	orrs	r3, r2
 8009452:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009454:	697b      	ldr	r3, [r7, #20]
 8009456:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800945a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800945c:	68bb      	ldr	r3, [r7, #8]
 800945e:	011b      	lsls	r3, r3, #4
 8009460:	697a      	ldr	r2, [r7, #20]
 8009462:	4313      	orrs	r3, r2
 8009464:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	693a      	ldr	r2, [r7, #16]
 800946a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	697a      	ldr	r2, [r7, #20]
 8009470:	621a      	str	r2, [r3, #32]
}
 8009472:	bf00      	nop
 8009474:	371c      	adds	r7, #28
 8009476:	46bd      	mov	sp, r7
 8009478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947c:	4770      	bx	lr

0800947e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800947e:	b480      	push	{r7}
 8009480:	b085      	sub	sp, #20
 8009482:	af00      	add	r7, sp, #0
 8009484:	6078      	str	r0, [r7, #4]
 8009486:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	689b      	ldr	r3, [r3, #8]
 800948c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8009494:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009498:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800949a:	683a      	ldr	r2, [r7, #0]
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	4313      	orrs	r3, r2
 80094a0:	f043 0307 	orr.w	r3, r3, #7
 80094a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	68fa      	ldr	r2, [r7, #12]
 80094aa:	609a      	str	r2, [r3, #8]
}
 80094ac:	bf00      	nop
 80094ae:	3714      	adds	r7, #20
 80094b0:	46bd      	mov	sp, r7
 80094b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b6:	4770      	bx	lr

080094b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80094b8:	b480      	push	{r7}
 80094ba:	b087      	sub	sp, #28
 80094bc:	af00      	add	r7, sp, #0
 80094be:	60f8      	str	r0, [r7, #12]
 80094c0:	60b9      	str	r1, [r7, #8]
 80094c2:	607a      	str	r2, [r7, #4]
 80094c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	689b      	ldr	r3, [r3, #8]
 80094ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80094cc:	697b      	ldr	r3, [r7, #20]
 80094ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80094d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	021a      	lsls	r2, r3, #8
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	431a      	orrs	r2, r3
 80094dc:	68bb      	ldr	r3, [r7, #8]
 80094de:	4313      	orrs	r3, r2
 80094e0:	697a      	ldr	r2, [r7, #20]
 80094e2:	4313      	orrs	r3, r2
 80094e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	697a      	ldr	r2, [r7, #20]
 80094ea:	609a      	str	r2, [r3, #8]
}
 80094ec:	bf00      	nop
 80094ee:	371c      	adds	r7, #28
 80094f0:	46bd      	mov	sp, r7
 80094f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f6:	4770      	bx	lr

080094f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80094f8:	b480      	push	{r7}
 80094fa:	b087      	sub	sp, #28
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	60f8      	str	r0, [r7, #12]
 8009500:	60b9      	str	r1, [r7, #8]
 8009502:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	f003 031f 	and.w	r3, r3, #31
 800950a:	2201      	movs	r2, #1
 800950c:	fa02 f303 	lsl.w	r3, r2, r3
 8009510:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	6a1a      	ldr	r2, [r3, #32]
 8009516:	697b      	ldr	r3, [r7, #20]
 8009518:	43db      	mvns	r3, r3
 800951a:	401a      	ands	r2, r3
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	6a1a      	ldr	r2, [r3, #32]
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	f003 031f 	and.w	r3, r3, #31
 800952a:	6879      	ldr	r1, [r7, #4]
 800952c:	fa01 f303 	lsl.w	r3, r1, r3
 8009530:	431a      	orrs	r2, r3
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	621a      	str	r2, [r3, #32]
}
 8009536:	bf00      	nop
 8009538:	371c      	adds	r7, #28
 800953a:	46bd      	mov	sp, r7
 800953c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009540:	4770      	bx	lr

08009542 <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, const TIM_HallSensor_InitTypeDef *sConfig)
{
 8009542:	b580      	push	{r7, lr}
 8009544:	b08a      	sub	sp, #40	@ 0x28
 8009546:	af00      	add	r7, sp, #0
 8009548:	6078      	str	r0, [r7, #4]
 800954a:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d101      	bne.n	8009556 <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 8009552:	2301      	movs	r3, #1
 8009554:	e0a0      	b.n	8009698 <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800955c:	b2db      	uxtb	r3, r3
 800955e:	2b00      	cmp	r3, #0
 8009560:	d106      	bne.n	8009570 <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2200      	movs	r2, #0
 8009566:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	f000 f898 	bl	80096a0 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2202      	movs	r2, #2
 8009574:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681a      	ldr	r2, [r3, #0]
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	3304      	adds	r3, #4
 8009580:	4619      	mov	r1, r3
 8009582:	4610      	mov	r0, r2
 8009584:	f7ff fb22 	bl	8008bcc <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	6818      	ldr	r0, [r3, #0]
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	6819      	ldr	r1, [r3, #0]
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	689b      	ldr	r3, [r3, #8]
 8009594:	2203      	movs	r2, #3
 8009596:	f7ff feab 	bl	80092f0 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	699a      	ldr	r2, [r3, #24]
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f022 020c 	bic.w	r2, r2, #12
 80095a8:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	6999      	ldr	r1, [r3, #24]
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	685a      	ldr	r2, [r3, #4]
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	430a      	orrs	r2, r1
 80095ba:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	685a      	ldr	r2, [r3, #4]
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80095ca:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	689b      	ldr	r3, [r3, #8]
 80095d2:	687a      	ldr	r2, [r7, #4]
 80095d4:	6812      	ldr	r2, [r2, #0]
 80095d6:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80095da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80095de:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	689a      	ldr	r2, [r3, #8]
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80095ee:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	689b      	ldr	r3, [r3, #8]
 80095f6:	687a      	ldr	r2, [r7, #4]
 80095f8:	6812      	ldr	r2, [r2, #0]
 80095fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80095fe:	f023 0307 	bic.w	r3, r3, #7
 8009602:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	689a      	ldr	r2, [r3, #8]
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f042 0204 	orr.w	r2, r2, #4
 8009612:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8009614:	2300      	movs	r3, #0
 8009616:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8009618:	2300      	movs	r3, #0
 800961a:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 800961c:	2370      	movs	r3, #112	@ 0x70
 800961e:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8009620:	2300      	movs	r3, #0
 8009622:	627b      	str	r3, [r7, #36]	@ 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8009624:	2300      	movs	r3, #0
 8009626:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009628:	2300      	movs	r3, #0
 800962a:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	68db      	ldr	r3, [r3, #12]
 8009630:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	f107 020c 	add.w	r2, r7, #12
 800963a:	4611      	mov	r1, r2
 800963c:	4618      	mov	r0, r3
 800963e:	f7ff fbf1 	bl	8008e24 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	685b      	ldr	r3, [r3, #4]
 8009648:	687a      	ldr	r2, [r7, #4]
 800964a:	6812      	ldr	r2, [r2, #0]
 800964c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009650:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009654:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	685a      	ldr	r2, [r3, #4]
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 8009664:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	2201      	movs	r2, #1
 800966a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2201      	movs	r2, #1
 8009672:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2201      	movs	r2, #1
 800967a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2201      	movs	r2, #1
 8009682:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2201      	movs	r2, #1
 800968a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2201      	movs	r2, #1
 8009692:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009696:	2300      	movs	r3, #0
}
 8009698:	4618      	mov	r0, r3
 800969a:	3728      	adds	r7, #40	@ 0x28
 800969c:	46bd      	mov	sp, r7
 800969e:	bd80      	pop	{r7, pc}

080096a0 <HAL_TIMEx_HallSensor_MspInit>:
  * @brief  Initializes the TIM Hall Sensor MSP.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval None
  */
__weak void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef *htim)
{
 80096a0:	b480      	push	{r7}
 80096a2:	b083      	sub	sp, #12
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
   */
}
 80096a8:	bf00      	nop
 80096aa:	370c      	adds	r7, #12
 80096ac:	46bd      	mov	sp, r7
 80096ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b2:	4770      	bx	lr

080096b4 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b084      	sub	sp, #16
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
 80096bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d109      	bne.n	80096d8 <HAL_TIMEx_PWMN_Start+0x24>
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80096ca:	b2db      	uxtb	r3, r3
 80096cc:	2b01      	cmp	r3, #1
 80096ce:	bf14      	ite	ne
 80096d0:	2301      	movne	r3, #1
 80096d2:	2300      	moveq	r3, #0
 80096d4:	b2db      	uxtb	r3, r3
 80096d6:	e022      	b.n	800971e <HAL_TIMEx_PWMN_Start+0x6a>
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	2b04      	cmp	r3, #4
 80096dc:	d109      	bne.n	80096f2 <HAL_TIMEx_PWMN_Start+0x3e>
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80096e4:	b2db      	uxtb	r3, r3
 80096e6:	2b01      	cmp	r3, #1
 80096e8:	bf14      	ite	ne
 80096ea:	2301      	movne	r3, #1
 80096ec:	2300      	moveq	r3, #0
 80096ee:	b2db      	uxtb	r3, r3
 80096f0:	e015      	b.n	800971e <HAL_TIMEx_PWMN_Start+0x6a>
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	2b08      	cmp	r3, #8
 80096f6:	d109      	bne.n	800970c <HAL_TIMEx_PWMN_Start+0x58>
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80096fe:	b2db      	uxtb	r3, r3
 8009700:	2b01      	cmp	r3, #1
 8009702:	bf14      	ite	ne
 8009704:	2301      	movne	r3, #1
 8009706:	2300      	moveq	r3, #0
 8009708:	b2db      	uxtb	r3, r3
 800970a:	e008      	b.n	800971e <HAL_TIMEx_PWMN_Start+0x6a>
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8009712:	b2db      	uxtb	r3, r3
 8009714:	2b01      	cmp	r3, #1
 8009716:	bf14      	ite	ne
 8009718:	2301      	movne	r3, #1
 800971a:	2300      	moveq	r3, #0
 800971c:	b2db      	uxtb	r3, r3
 800971e:	2b00      	cmp	r3, #0
 8009720:	d001      	beq.n	8009726 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8009722:	2301      	movs	r3, #1
 8009724:	e069      	b.n	80097fa <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d104      	bne.n	8009736 <HAL_TIMEx_PWMN_Start+0x82>
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2202      	movs	r2, #2
 8009730:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009734:	e013      	b.n	800975e <HAL_TIMEx_PWMN_Start+0xaa>
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	2b04      	cmp	r3, #4
 800973a:	d104      	bne.n	8009746 <HAL_TIMEx_PWMN_Start+0x92>
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2202      	movs	r2, #2
 8009740:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009744:	e00b      	b.n	800975e <HAL_TIMEx_PWMN_Start+0xaa>
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	2b08      	cmp	r3, #8
 800974a:	d104      	bne.n	8009756 <HAL_TIMEx_PWMN_Start+0xa2>
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2202      	movs	r2, #2
 8009750:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009754:	e003      	b.n	800975e <HAL_TIMEx_PWMN_Start+0xaa>
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2202      	movs	r2, #2
 800975a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	2204      	movs	r2, #4
 8009764:	6839      	ldr	r1, [r7, #0]
 8009766:	4618      	mov	r0, r3
 8009768:	f000 fa9c 	bl	8009ca4 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800977a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	4a20      	ldr	r2, [pc, #128]	@ (8009804 <HAL_TIMEx_PWMN_Start+0x150>)
 8009782:	4293      	cmp	r3, r2
 8009784:	d018      	beq.n	80097b8 <HAL_TIMEx_PWMN_Start+0x104>
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800978e:	d013      	beq.n	80097b8 <HAL_TIMEx_PWMN_Start+0x104>
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	4a1c      	ldr	r2, [pc, #112]	@ (8009808 <HAL_TIMEx_PWMN_Start+0x154>)
 8009796:	4293      	cmp	r3, r2
 8009798:	d00e      	beq.n	80097b8 <HAL_TIMEx_PWMN_Start+0x104>
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	4a1b      	ldr	r2, [pc, #108]	@ (800980c <HAL_TIMEx_PWMN_Start+0x158>)
 80097a0:	4293      	cmp	r3, r2
 80097a2:	d009      	beq.n	80097b8 <HAL_TIMEx_PWMN_Start+0x104>
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	4a19      	ldr	r2, [pc, #100]	@ (8009810 <HAL_TIMEx_PWMN_Start+0x15c>)
 80097aa:	4293      	cmp	r3, r2
 80097ac:	d004      	beq.n	80097b8 <HAL_TIMEx_PWMN_Start+0x104>
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	4a18      	ldr	r2, [pc, #96]	@ (8009814 <HAL_TIMEx_PWMN_Start+0x160>)
 80097b4:	4293      	cmp	r3, r2
 80097b6:	d115      	bne.n	80097e4 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	689a      	ldr	r2, [r3, #8]
 80097be:	4b16      	ldr	r3, [pc, #88]	@ (8009818 <HAL_TIMEx_PWMN_Start+0x164>)
 80097c0:	4013      	ands	r3, r2
 80097c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	2b06      	cmp	r3, #6
 80097c8:	d015      	beq.n	80097f6 <HAL_TIMEx_PWMN_Start+0x142>
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80097d0:	d011      	beq.n	80097f6 <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	681a      	ldr	r2, [r3, #0]
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f042 0201 	orr.w	r2, r2, #1
 80097e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80097e2:	e008      	b.n	80097f6 <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	681a      	ldr	r2, [r3, #0]
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f042 0201 	orr.w	r2, r2, #1
 80097f2:	601a      	str	r2, [r3, #0]
 80097f4:	e000      	b.n	80097f8 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80097f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80097f8:	2300      	movs	r3, #0
}
 80097fa:	4618      	mov	r0, r3
 80097fc:	3710      	adds	r7, #16
 80097fe:	46bd      	mov	sp, r7
 8009800:	bd80      	pop	{r7, pc}
 8009802:	bf00      	nop
 8009804:	40012c00 	.word	0x40012c00
 8009808:	40000400 	.word	0x40000400
 800980c:	40000800 	.word	0x40000800
 8009810:	40013400 	.word	0x40013400
 8009814:	40014000 	.word	0x40014000
 8009818:	00010007 	.word	0x00010007

0800981c <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b082      	sub	sp, #8
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
 8009824:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	2200      	movs	r2, #0
 800982c:	6839      	ldr	r1, [r7, #0]
 800982e:	4618      	mov	r0, r3
 8009830:	f000 fa38 	bl	8009ca4 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	6a1a      	ldr	r2, [r3, #32]
 800983a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800983e:	4013      	ands	r3, r2
 8009840:	2b00      	cmp	r3, #0
 8009842:	d10f      	bne.n	8009864 <HAL_TIMEx_PWMN_Stop+0x48>
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	6a1a      	ldr	r2, [r3, #32]
 800984a:	f244 4344 	movw	r3, #17476	@ 0x4444
 800984e:	4013      	ands	r3, r2
 8009850:	2b00      	cmp	r3, #0
 8009852:	d107      	bne.n	8009864 <HAL_TIMEx_PWMN_Stop+0x48>
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009862:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	6a1a      	ldr	r2, [r3, #32]
 800986a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800986e:	4013      	ands	r3, r2
 8009870:	2b00      	cmp	r3, #0
 8009872:	d10f      	bne.n	8009894 <HAL_TIMEx_PWMN_Stop+0x78>
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	6a1a      	ldr	r2, [r3, #32]
 800987a:	f244 4344 	movw	r3, #17476	@ 0x4444
 800987e:	4013      	ands	r3, r2
 8009880:	2b00      	cmp	r3, #0
 8009882:	d107      	bne.n	8009894 <HAL_TIMEx_PWMN_Stop+0x78>
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	681a      	ldr	r2, [r3, #0]
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	f022 0201 	bic.w	r2, r2, #1
 8009892:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d104      	bne.n	80098a4 <HAL_TIMEx_PWMN_Stop+0x88>
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2201      	movs	r2, #1
 800989e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80098a2:	e013      	b.n	80098cc <HAL_TIMEx_PWMN_Stop+0xb0>
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	2b04      	cmp	r3, #4
 80098a8:	d104      	bne.n	80098b4 <HAL_TIMEx_PWMN_Stop+0x98>
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	2201      	movs	r2, #1
 80098ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80098b2:	e00b      	b.n	80098cc <HAL_TIMEx_PWMN_Stop+0xb0>
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	2b08      	cmp	r3, #8
 80098b8:	d104      	bne.n	80098c4 <HAL_TIMEx_PWMN_Stop+0xa8>
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	2201      	movs	r2, #1
 80098be:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80098c2:	e003      	b.n	80098cc <HAL_TIMEx_PWMN_Stop+0xb0>
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2201      	movs	r2, #1
 80098c8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 80098cc:	2300      	movs	r3, #0
}
 80098ce:	4618      	mov	r0, r3
 80098d0:	3708      	adds	r7, #8
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bd80      	pop	{r7, pc}
	...

080098d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80098d8:	b480      	push	{r7}
 80098da:	b085      	sub	sp, #20
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
 80098e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80098e8:	2b01      	cmp	r3, #1
 80098ea:	d101      	bne.n	80098f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80098ec:	2302      	movs	r3, #2
 80098ee:	e065      	b.n	80099bc <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2201      	movs	r2, #1
 80098f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2202      	movs	r2, #2
 80098fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	685b      	ldr	r3, [r3, #4]
 8009906:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	689b      	ldr	r3, [r3, #8]
 800990e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	4a2c      	ldr	r2, [pc, #176]	@ (80099c8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009916:	4293      	cmp	r3, r2
 8009918:	d004      	beq.n	8009924 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	4a2b      	ldr	r2, [pc, #172]	@ (80099cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009920:	4293      	cmp	r3, r2
 8009922:	d108      	bne.n	8009936 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800992a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	685b      	ldr	r3, [r3, #4]
 8009930:	68fa      	ldr	r2, [r7, #12]
 8009932:	4313      	orrs	r3, r2
 8009934:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800993c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009940:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	68fa      	ldr	r2, [r7, #12]
 8009948:	4313      	orrs	r3, r2
 800994a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	68fa      	ldr	r2, [r7, #12]
 8009952:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	4a1b      	ldr	r2, [pc, #108]	@ (80099c8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800995a:	4293      	cmp	r3, r2
 800995c:	d018      	beq.n	8009990 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009966:	d013      	beq.n	8009990 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	4a18      	ldr	r2, [pc, #96]	@ (80099d0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800996e:	4293      	cmp	r3, r2
 8009970:	d00e      	beq.n	8009990 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	4a17      	ldr	r2, [pc, #92]	@ (80099d4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009978:	4293      	cmp	r3, r2
 800997a:	d009      	beq.n	8009990 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	4a12      	ldr	r2, [pc, #72]	@ (80099cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009982:	4293      	cmp	r3, r2
 8009984:	d004      	beq.n	8009990 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	4a13      	ldr	r2, [pc, #76]	@ (80099d8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800998c:	4293      	cmp	r3, r2
 800998e:	d10c      	bne.n	80099aa <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009990:	68bb      	ldr	r3, [r7, #8]
 8009992:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009996:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	689b      	ldr	r3, [r3, #8]
 800999c:	68ba      	ldr	r2, [r7, #8]
 800999e:	4313      	orrs	r3, r2
 80099a0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	68ba      	ldr	r2, [r7, #8]
 80099a8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	2201      	movs	r2, #1
 80099ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	2200      	movs	r2, #0
 80099b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80099ba:	2300      	movs	r3, #0
}
 80099bc:	4618      	mov	r0, r3
 80099be:	3714      	adds	r7, #20
 80099c0:	46bd      	mov	sp, r7
 80099c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c6:	4770      	bx	lr
 80099c8:	40012c00 	.word	0x40012c00
 80099cc:	40013400 	.word	0x40013400
 80099d0:	40000400 	.word	0x40000400
 80099d4:	40000800 	.word	0x40000800
 80099d8:	40014000 	.word	0x40014000

080099dc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80099dc:	b480      	push	{r7}
 80099de:	b085      	sub	sp, #20
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
 80099e4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80099e6:	2300      	movs	r3, #0
 80099e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80099f0:	2b01      	cmp	r3, #1
 80099f2:	d101      	bne.n	80099f8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80099f4:	2302      	movs	r3, #2
 80099f6:	e073      	b.n	8009ae0 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2201      	movs	r2, #1
 80099fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	68db      	ldr	r3, [r3, #12]
 8009a0a:	4313      	orrs	r3, r2
 8009a0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	689b      	ldr	r3, [r3, #8]
 8009a18:	4313      	orrs	r3, r2
 8009a1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	685b      	ldr	r3, [r3, #4]
 8009a26:	4313      	orrs	r3, r2
 8009a28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	4313      	orrs	r3, r2
 8009a36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	691b      	ldr	r3, [r3, #16]
 8009a42:	4313      	orrs	r3, r2
 8009a44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	695b      	ldr	r3, [r3, #20]
 8009a50:	4313      	orrs	r3, r2
 8009a52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a5e:	4313      	orrs	r3, r2
 8009a60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	699b      	ldr	r3, [r3, #24]
 8009a6c:	041b      	lsls	r3, r3, #16
 8009a6e:	4313      	orrs	r3, r2
 8009a70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	69db      	ldr	r3, [r3, #28]
 8009a7c:	4313      	orrs	r3, r2
 8009a7e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	4a19      	ldr	r2, [pc, #100]	@ (8009aec <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8009a86:	4293      	cmp	r3, r2
 8009a88:	d004      	beq.n	8009a94 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	4a18      	ldr	r2, [pc, #96]	@ (8009af0 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8009a90:	4293      	cmp	r3, r2
 8009a92:	d11c      	bne.n	8009ace <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a9e:	051b      	lsls	r3, r3, #20
 8009aa0:	4313      	orrs	r3, r2
 8009aa2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	6a1b      	ldr	r3, [r3, #32]
 8009aae:	4313      	orrs	r3, r2
 8009ab0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009abc:	4313      	orrs	r3, r2
 8009abe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009aca:	4313      	orrs	r3, r2
 8009acc:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	68fa      	ldr	r2, [r7, #12]
 8009ad4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	2200      	movs	r2, #0
 8009ada:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009ade:	2300      	movs	r3, #0
}
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	3714      	adds	r7, #20
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aea:	4770      	bx	lr
 8009aec:	40012c00 	.word	0x40012c00
 8009af0:	40013400 	.word	0x40013400

08009af4 <HAL_TIMEx_ConfigBreakInput>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             const TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)
{
 8009af4:	b480      	push	{r7}
 8009af6:	b08b      	sub	sp, #44	@ 0x2c
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	60f8      	str	r0, [r7, #12]
 8009afc:	60b9      	str	r1, [r7, #8]
 8009afe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009b00:	2300      	movs	r3, #0
 8009b02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009b0c:	2b01      	cmp	r3, #1
 8009b0e:	d101      	bne.n	8009b14 <HAL_TIMEx_ConfigBreakInput+0x20>
 8009b10:	2302      	movs	r3, #2
 8009b12:	e0c1      	b.n	8009c98 <HAL_TIMEx_ConfigBreakInput+0x1a4>
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	2201      	movs	r2, #1
 8009b18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (sBreakInputConfig->Source)
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	3b01      	subs	r3, #1
 8009b22:	2b0f      	cmp	r3, #15
 8009b24:	d854      	bhi.n	8009bd0 <HAL_TIMEx_ConfigBreakInput+0xdc>
 8009b26:	a201      	add	r2, pc, #4	@ (adr r2, 8009b2c <HAL_TIMEx_ConfigBreakInput+0x38>)
 8009b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b2c:	08009b6d 	.word	0x08009b6d
 8009b30:	08009b81 	.word	0x08009b81
 8009b34:	08009bd1 	.word	0x08009bd1
 8009b38:	08009b95 	.word	0x08009b95
 8009b3c:	08009bd1 	.word	0x08009bd1
 8009b40:	08009bd1 	.word	0x08009bd1
 8009b44:	08009bd1 	.word	0x08009bd1
 8009b48:	08009ba9 	.word	0x08009ba9
 8009b4c:	08009bd1 	.word	0x08009bd1
 8009b50:	08009bd1 	.word	0x08009bd1
 8009b54:	08009bd1 	.word	0x08009bd1
 8009b58:	08009bd1 	.word	0x08009bd1
 8009b5c:	08009bd1 	.word	0x08009bd1
 8009b60:	08009bd1 	.word	0x08009bd1
 8009b64:	08009bd1 	.word	0x08009bd1
 8009b68:	08009bbd 	.word	0x08009bbd
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_AF1_BKINE;
 8009b6c:	2301      	movs	r3, #1
 8009b6e:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 8009b70:	2300      	movs	r3, #0
 8009b72:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKINP;
 8009b74:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009b78:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 8009b7a:	2309      	movs	r3, #9
 8009b7c:	617b      	str	r3, [r7, #20]
      break;
 8009b7e:	e030      	b.n	8009be2 <HAL_TIMEx_ConfigBreakInput+0xee>
    }
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP1E;
 8009b80:	2302      	movs	r3, #2
 8009b82:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP1E_Pos;
 8009b84:	2301      	movs	r3, #1
 8009b86:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP1P;
 8009b88:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009b8c:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP1P_Pos;
 8009b8e:	230a      	movs	r3, #10
 8009b90:	617b      	str	r3, [r7, #20]
      break;
 8009b92:	e026      	b.n	8009be2 <HAL_TIMEx_ConfigBreakInput+0xee>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP2E;
 8009b94:	2304      	movs	r3, #4
 8009b96:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 8009b98:	2302      	movs	r3, #2
 8009b9a:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 8009b9c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009ba0:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 8009ba2:	230b      	movs	r3, #11
 8009ba4:	617b      	str	r3, [r7, #20]
      break;
 8009ba6:	e01c      	b.n	8009be2 <HAL_TIMEx_ConfigBreakInput+0xee>
    }
    case TIM_BREAKINPUTSOURCE_COMP3:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP3E;
 8009ba8:	2308      	movs	r3, #8
 8009baa:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP3E_Pos;
 8009bac:	2303      	movs	r3, #3
 8009bae:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP3P;
 8009bb0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009bb4:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP3P_Pos;
 8009bb6:	230c      	movs	r3, #12
 8009bb8:	617b      	str	r3, [r7, #20]
      break;
 8009bba:	e012      	b.n	8009be2 <HAL_TIMEx_ConfigBreakInput+0xee>
    }
    case TIM_BREAKINPUTSOURCE_COMP4:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP4E;
 8009bbc:	2310      	movs	r3, #16
 8009bbe:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP4E_Pos;
 8009bc0:	2304      	movs	r3, #4
 8009bc2:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP4P;
 8009bc4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009bc8:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP4P_Pos;
 8009bca:	230d      	movs	r3, #13
 8009bcc:	617b      	str	r3, [r7, #20]
      break;
 8009bce:	e008      	b.n	8009be2 <HAL_TIMEx_ConfigBreakInput+0xee>
    }
#endif /* COMP7 */

    default:
    {
      bkin_enable_mask = 0U;
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	623b      	str	r3, [r7, #32]
      bkin_polarity_mask = 0U;
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = 0U;
 8009bd8:	2300      	movs	r3, #0
 8009bda:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = 0U;
 8009bdc:	2300      	movs	r3, #0
 8009bde:	617b      	str	r3, [r7, #20]
      break;
 8009be0:	bf00      	nop
    }
  }

  switch (BreakInput)
 8009be2:	68bb      	ldr	r3, [r7, #8]
 8009be4:	2b01      	cmp	r3, #1
 8009be6:	d003      	beq.n	8009bf0 <HAL_TIMEx_ConfigBreakInput+0xfc>
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	2b02      	cmp	r3, #2
 8009bec:	d025      	beq.n	8009c3a <HAL_TIMEx_ConfigBreakInput+0x146>
 8009bee:	e049      	b.n	8009c84 <HAL_TIMEx_ConfigBreakInput+0x190>
  {
    case TIM_BREAKINPUT_BRK:
    {
      /* Get the TIMx_AF1 register value */
      tmporx = htim->Instance->AF1;
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009bf6:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 8009bf8:	6a3b      	ldr	r3, [r7, #32]
 8009bfa:	43db      	mvns	r3, r3
 8009bfc:	693a      	ldr	r2, [r7, #16]
 8009bfe:	4013      	ands	r3, r2
 8009c00:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	685a      	ldr	r2, [r3, #4]
 8009c06:	69bb      	ldr	r3, [r7, #24]
 8009c08:	409a      	lsls	r2, r3
 8009c0a:	6a3b      	ldr	r3, [r7, #32]
 8009c0c:	4013      	ands	r3, r2
 8009c0e:	693a      	ldr	r2, [r7, #16]
 8009c10:	4313      	orrs	r3, r2
 8009c12:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 8009c14:	69fb      	ldr	r3, [r7, #28]
 8009c16:	43db      	mvns	r3, r3
 8009c18:	693a      	ldr	r2, [r7, #16]
 8009c1a:	4013      	ands	r3, r2
 8009c1c:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	689a      	ldr	r2, [r3, #8]
 8009c22:	697b      	ldr	r3, [r7, #20]
 8009c24:	409a      	lsls	r2, r3
 8009c26:	69fb      	ldr	r3, [r7, #28]
 8009c28:	4013      	ands	r3, r2
 8009c2a:	693a      	ldr	r2, [r7, #16]
 8009c2c:	4313      	orrs	r3, r2
 8009c2e:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF1 */
      htim->Instance->AF1 = tmporx;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	693a      	ldr	r2, [r7, #16]
 8009c36:	661a      	str	r2, [r3, #96]	@ 0x60
      break;
 8009c38:	e028      	b.n	8009c8c <HAL_TIMEx_ConfigBreakInput+0x198>
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_AF2 register value */
      tmporx = htim->Instance->AF2;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009c40:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 8009c42:	6a3b      	ldr	r3, [r7, #32]
 8009c44:	43db      	mvns	r3, r3
 8009c46:	693a      	ldr	r2, [r7, #16]
 8009c48:	4013      	ands	r3, r2
 8009c4a:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	685a      	ldr	r2, [r3, #4]
 8009c50:	69bb      	ldr	r3, [r7, #24]
 8009c52:	409a      	lsls	r2, r3
 8009c54:	6a3b      	ldr	r3, [r7, #32]
 8009c56:	4013      	ands	r3, r2
 8009c58:	693a      	ldr	r2, [r7, #16]
 8009c5a:	4313      	orrs	r3, r2
 8009c5c:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 8009c5e:	69fb      	ldr	r3, [r7, #28]
 8009c60:	43db      	mvns	r3, r3
 8009c62:	693a      	ldr	r2, [r7, #16]
 8009c64:	4013      	ands	r3, r2
 8009c66:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	689a      	ldr	r2, [r3, #8]
 8009c6c:	697b      	ldr	r3, [r7, #20]
 8009c6e:	409a      	lsls	r2, r3
 8009c70:	69fb      	ldr	r3, [r7, #28]
 8009c72:	4013      	ands	r3, r2
 8009c74:	693a      	ldr	r2, [r7, #16]
 8009c76:	4313      	orrs	r3, r2
 8009c78:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	693a      	ldr	r2, [r7, #16]
 8009c80:	665a      	str	r2, [r3, #100]	@ 0x64
      break;
 8009c82:	e003      	b.n	8009c8c <HAL_TIMEx_ConfigBreakInput+0x198>
    }
    default:
      status = HAL_ERROR;
 8009c84:	2301      	movs	r3, #1
 8009c86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8009c8a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	2200      	movs	r2, #0
 8009c90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009c94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8009c98:	4618      	mov	r0, r3
 8009c9a:	372c      	adds	r7, #44	@ 0x2c
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca2:	4770      	bx	lr

08009ca4 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8009ca4:	b480      	push	{r7}
 8009ca6:	b087      	sub	sp, #28
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	60f8      	str	r0, [r7, #12]
 8009cac:	60b9      	str	r1, [r7, #8]
 8009cae:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8009cb0:	68bb      	ldr	r3, [r7, #8]
 8009cb2:	f003 030f 	and.w	r3, r3, #15
 8009cb6:	2204      	movs	r2, #4
 8009cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8009cbc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	6a1a      	ldr	r2, [r3, #32]
 8009cc2:	697b      	ldr	r3, [r7, #20]
 8009cc4:	43db      	mvns	r3, r3
 8009cc6:	401a      	ands	r2, r3
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	6a1a      	ldr	r2, [r3, #32]
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	f003 030f 	and.w	r3, r3, #15
 8009cd6:	6879      	ldr	r1, [r7, #4]
 8009cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8009cdc:	431a      	orrs	r2, r3
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	621a      	str	r2, [r3, #32]
}
 8009ce2:	bf00      	nop
 8009ce4:	371c      	adds	r7, #28
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cec:	4770      	bx	lr

08009cee <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009cee:	b580      	push	{r7, lr}
 8009cf0:	b082      	sub	sp, #8
 8009cf2:	af00      	add	r7, sp, #0
 8009cf4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d101      	bne.n	8009d00 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009cfc:	2301      	movs	r3, #1
 8009cfe:	e042      	b.n	8009d86 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d106      	bne.n	8009d18 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009d12:	6878      	ldr	r0, [r7, #4]
 8009d14:	f7f8 fbc6 	bl	80024a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2224      	movs	r2, #36	@ 0x24
 8009d1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	681a      	ldr	r2, [r3, #0]
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	f022 0201 	bic.w	r2, r2, #1
 8009d2e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d002      	beq.n	8009d3e <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009d38:	6878      	ldr	r0, [r7, #4]
 8009d3a:	f000 ff6f 	bl	800ac1c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f000 fca0 	bl	800a684 <UART_SetConfig>
 8009d44:	4603      	mov	r3, r0
 8009d46:	2b01      	cmp	r3, #1
 8009d48:	d101      	bne.n	8009d4e <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009d4a:	2301      	movs	r3, #1
 8009d4c:	e01b      	b.n	8009d86 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	685a      	ldr	r2, [r3, #4]
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009d5c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	689a      	ldr	r2, [r3, #8]
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009d6c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	681a      	ldr	r2, [r3, #0]
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	f042 0201 	orr.w	r2, r2, #1
 8009d7c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	f000 ffee 	bl	800ad60 <UART_CheckIdleState>
 8009d84:	4603      	mov	r3, r0
}
 8009d86:	4618      	mov	r0, r3
 8009d88:	3708      	adds	r7, #8
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	bd80      	pop	{r7, pc}

08009d8e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009d8e:	b580      	push	{r7, lr}
 8009d90:	b08a      	sub	sp, #40	@ 0x28
 8009d92:	af02      	add	r7, sp, #8
 8009d94:	60f8      	str	r0, [r7, #12]
 8009d96:	60b9      	str	r1, [r7, #8]
 8009d98:	603b      	str	r3, [r7, #0]
 8009d9a:	4613      	mov	r3, r2
 8009d9c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009da4:	2b20      	cmp	r3, #32
 8009da6:	d17b      	bne.n	8009ea0 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8009da8:	68bb      	ldr	r3, [r7, #8]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d002      	beq.n	8009db4 <HAL_UART_Transmit+0x26>
 8009dae:	88fb      	ldrh	r3, [r7, #6]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d101      	bne.n	8009db8 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009db4:	2301      	movs	r3, #1
 8009db6:	e074      	b.n	8009ea2 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	2200      	movs	r2, #0
 8009dbc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	2221      	movs	r2, #33	@ 0x21
 8009dc4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009dc8:	f7f8 fcb8 	bl	800273c <HAL_GetTick>
 8009dcc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	88fa      	ldrh	r2, [r7, #6]
 8009dd2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	88fa      	ldrh	r2, [r7, #6]
 8009dda:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	689b      	ldr	r3, [r3, #8]
 8009de2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009de6:	d108      	bne.n	8009dfa <HAL_UART_Transmit+0x6c>
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	691b      	ldr	r3, [r3, #16]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d104      	bne.n	8009dfa <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009df0:	2300      	movs	r3, #0
 8009df2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009df4:	68bb      	ldr	r3, [r7, #8]
 8009df6:	61bb      	str	r3, [r7, #24]
 8009df8:	e003      	b.n	8009e02 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009dfa:	68bb      	ldr	r3, [r7, #8]
 8009dfc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009dfe:	2300      	movs	r3, #0
 8009e00:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009e02:	e030      	b.n	8009e66 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	9300      	str	r3, [sp, #0]
 8009e08:	697b      	ldr	r3, [r7, #20]
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	2180      	movs	r1, #128	@ 0x80
 8009e0e:	68f8      	ldr	r0, [r7, #12]
 8009e10:	f001 f850 	bl	800aeb4 <UART_WaitOnFlagUntilTimeout>
 8009e14:	4603      	mov	r3, r0
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d005      	beq.n	8009e26 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	2220      	movs	r2, #32
 8009e1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8009e22:	2303      	movs	r3, #3
 8009e24:	e03d      	b.n	8009ea2 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8009e26:	69fb      	ldr	r3, [r7, #28]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d10b      	bne.n	8009e44 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009e2c:	69bb      	ldr	r3, [r7, #24]
 8009e2e:	881b      	ldrh	r3, [r3, #0]
 8009e30:	461a      	mov	r2, r3
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009e3a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009e3c:	69bb      	ldr	r3, [r7, #24]
 8009e3e:	3302      	adds	r3, #2
 8009e40:	61bb      	str	r3, [r7, #24]
 8009e42:	e007      	b.n	8009e54 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009e44:	69fb      	ldr	r3, [r7, #28]
 8009e46:	781a      	ldrb	r2, [r3, #0]
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009e4e:	69fb      	ldr	r3, [r7, #28]
 8009e50:	3301      	adds	r3, #1
 8009e52:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009e5a:	b29b      	uxth	r3, r3
 8009e5c:	3b01      	subs	r3, #1
 8009e5e:	b29a      	uxth	r2, r3
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009e6c:	b29b      	uxth	r3, r3
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d1c8      	bne.n	8009e04 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009e72:	683b      	ldr	r3, [r7, #0]
 8009e74:	9300      	str	r3, [sp, #0]
 8009e76:	697b      	ldr	r3, [r7, #20]
 8009e78:	2200      	movs	r2, #0
 8009e7a:	2140      	movs	r1, #64	@ 0x40
 8009e7c:	68f8      	ldr	r0, [r7, #12]
 8009e7e:	f001 f819 	bl	800aeb4 <UART_WaitOnFlagUntilTimeout>
 8009e82:	4603      	mov	r3, r0
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d005      	beq.n	8009e94 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	2220      	movs	r2, #32
 8009e8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8009e90:	2303      	movs	r3, #3
 8009e92:	e006      	b.n	8009ea2 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	2220      	movs	r2, #32
 8009e98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	e000      	b.n	8009ea2 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8009ea0:	2302      	movs	r3, #2
  }
}
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	3720      	adds	r7, #32
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bd80      	pop	{r7, pc}
	...

08009eac <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b08a      	sub	sp, #40	@ 0x28
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	60f8      	str	r0, [r7, #12]
 8009eb4:	60b9      	str	r1, [r7, #8]
 8009eb6:	4613      	mov	r3, r2
 8009eb8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ec0:	2b20      	cmp	r3, #32
 8009ec2:	d167      	bne.n	8009f94 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d002      	beq.n	8009ed0 <HAL_UART_Transmit_DMA+0x24>
 8009eca:	88fb      	ldrh	r3, [r7, #6]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d101      	bne.n	8009ed4 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8009ed0:	2301      	movs	r3, #1
 8009ed2:	e060      	b.n	8009f96 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	68ba      	ldr	r2, [r7, #8]
 8009ed8:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	88fa      	ldrh	r2, [r7, #6]
 8009ede:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	88fa      	ldrh	r2, [r7, #6]
 8009ee6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	2200      	movs	r2, #0
 8009eee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	2221      	movs	r2, #33	@ 0x21
 8009ef6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d028      	beq.n	8009f54 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009f06:	4a26      	ldr	r2, [pc, #152]	@ (8009fa0 <HAL_UART_Transmit_DMA+0xf4>)
 8009f08:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009f0e:	4a25      	ldr	r2, [pc, #148]	@ (8009fa4 <HAL_UART_Transmit_DMA+0xf8>)
 8009f10:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009f16:	4a24      	ldr	r2, [pc, #144]	@ (8009fa8 <HAL_UART_Transmit_DMA+0xfc>)
 8009f18:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009f1e:	2200      	movs	r2, #0
 8009f20:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f2a:	4619      	mov	r1, r3
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	3328      	adds	r3, #40	@ 0x28
 8009f32:	461a      	mov	r2, r3
 8009f34:	88fb      	ldrh	r3, [r7, #6]
 8009f36:	f7fb fe89 	bl	8005c4c <HAL_DMA_Start_IT>
 8009f3a:	4603      	mov	r3, r0
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d009      	beq.n	8009f54 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	2210      	movs	r2, #16
 8009f44:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	2220      	movs	r2, #32
 8009f4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8009f50:	2301      	movs	r3, #1
 8009f52:	e020      	b.n	8009f96 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	2240      	movs	r2, #64	@ 0x40
 8009f5a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	3308      	adds	r3, #8
 8009f62:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f64:	697b      	ldr	r3, [r7, #20]
 8009f66:	e853 3f00 	ldrex	r3, [r3]
 8009f6a:	613b      	str	r3, [r7, #16]
   return(result);
 8009f6c:	693b      	ldr	r3, [r7, #16]
 8009f6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009f72:	627b      	str	r3, [r7, #36]	@ 0x24
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	3308      	adds	r3, #8
 8009f7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009f7c:	623a      	str	r2, [r7, #32]
 8009f7e:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f80:	69f9      	ldr	r1, [r7, #28]
 8009f82:	6a3a      	ldr	r2, [r7, #32]
 8009f84:	e841 2300 	strex	r3, r2, [r1]
 8009f88:	61bb      	str	r3, [r7, #24]
   return(result);
 8009f8a:	69bb      	ldr	r3, [r7, #24]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d1e5      	bne.n	8009f5c <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8009f90:	2300      	movs	r3, #0
 8009f92:	e000      	b.n	8009f96 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8009f94:	2302      	movs	r3, #2
  }
}
 8009f96:	4618      	mov	r0, r3
 8009f98:	3728      	adds	r7, #40	@ 0x28
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	bd80      	pop	{r7, pc}
 8009f9e:	bf00      	nop
 8009fa0:	0800b22b 	.word	0x0800b22b
 8009fa4:	0800b2c5 	.word	0x0800b2c5
 8009fa8:	0800b44b 	.word	0x0800b44b

08009fac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b0ba      	sub	sp, #232	@ 0xe8
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	69db      	ldr	r3, [r3, #28]
 8009fba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	689b      	ldr	r3, [r3, #8]
 8009fce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009fd2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8009fd6:	f640 030f 	movw	r3, #2063	@ 0x80f
 8009fda:	4013      	ands	r3, r2
 8009fdc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009fe0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d11b      	bne.n	800a020 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009fe8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009fec:	f003 0320 	and.w	r3, r3, #32
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d015      	beq.n	800a020 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009ff4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ff8:	f003 0320 	and.w	r3, r3, #32
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d105      	bne.n	800a00c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a000:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a004:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d009      	beq.n	800a020 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a010:	2b00      	cmp	r3, #0
 800a012:	f000 82e3 	beq.w	800a5dc <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a01a:	6878      	ldr	r0, [r7, #4]
 800a01c:	4798      	blx	r3
      }
      return;
 800a01e:	e2dd      	b.n	800a5dc <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a020:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a024:	2b00      	cmp	r3, #0
 800a026:	f000 8123 	beq.w	800a270 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a02a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a02e:	4b8d      	ldr	r3, [pc, #564]	@ (800a264 <HAL_UART_IRQHandler+0x2b8>)
 800a030:	4013      	ands	r3, r2
 800a032:	2b00      	cmp	r3, #0
 800a034:	d106      	bne.n	800a044 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a036:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800a03a:	4b8b      	ldr	r3, [pc, #556]	@ (800a268 <HAL_UART_IRQHandler+0x2bc>)
 800a03c:	4013      	ands	r3, r2
 800a03e:	2b00      	cmp	r3, #0
 800a040:	f000 8116 	beq.w	800a270 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a044:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a048:	f003 0301 	and.w	r3, r3, #1
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d011      	beq.n	800a074 <HAL_UART_IRQHandler+0xc8>
 800a050:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a054:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d00b      	beq.n	800a074 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	2201      	movs	r2, #1
 800a062:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a06a:	f043 0201 	orr.w	r2, r3, #1
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a074:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a078:	f003 0302 	and.w	r3, r3, #2
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d011      	beq.n	800a0a4 <HAL_UART_IRQHandler+0xf8>
 800a080:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a084:	f003 0301 	and.w	r3, r3, #1
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d00b      	beq.n	800a0a4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	2202      	movs	r2, #2
 800a092:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a09a:	f043 0204 	orr.w	r2, r3, #4
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a0a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a0a8:	f003 0304 	and.w	r3, r3, #4
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d011      	beq.n	800a0d4 <HAL_UART_IRQHandler+0x128>
 800a0b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a0b4:	f003 0301 	and.w	r3, r3, #1
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d00b      	beq.n	800a0d4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	2204      	movs	r2, #4
 800a0c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a0ca:	f043 0202 	orr.w	r2, r3, #2
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a0d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a0d8:	f003 0308 	and.w	r3, r3, #8
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d017      	beq.n	800a110 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a0e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a0e4:	f003 0320 	and.w	r3, r3, #32
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d105      	bne.n	800a0f8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a0ec:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a0f0:	4b5c      	ldr	r3, [pc, #368]	@ (800a264 <HAL_UART_IRQHandler+0x2b8>)
 800a0f2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d00b      	beq.n	800a110 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	2208      	movs	r2, #8
 800a0fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a106:	f043 0208 	orr.w	r2, r3, #8
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a110:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a114:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d012      	beq.n	800a142 <HAL_UART_IRQHandler+0x196>
 800a11c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a120:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a124:	2b00      	cmp	r3, #0
 800a126:	d00c      	beq.n	800a142 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a130:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a138:	f043 0220 	orr.w	r2, r3, #32
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a148:	2b00      	cmp	r3, #0
 800a14a:	f000 8249 	beq.w	800a5e0 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a14e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a152:	f003 0320 	and.w	r3, r3, #32
 800a156:	2b00      	cmp	r3, #0
 800a158:	d013      	beq.n	800a182 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a15a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a15e:	f003 0320 	and.w	r3, r3, #32
 800a162:	2b00      	cmp	r3, #0
 800a164:	d105      	bne.n	800a172 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a166:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a16a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d007      	beq.n	800a182 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a176:	2b00      	cmp	r3, #0
 800a178:	d003      	beq.n	800a182 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a17e:	6878      	ldr	r0, [r7, #4]
 800a180:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a188:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	689b      	ldr	r3, [r3, #8]
 800a192:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a196:	2b40      	cmp	r3, #64	@ 0x40
 800a198:	d005      	beq.n	800a1a6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a19a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a19e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d054      	beq.n	800a250 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a1a6:	6878      	ldr	r0, [r7, #4]
 800a1a8:	f000 ffd9 	bl	800b15e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	689b      	ldr	r3, [r3, #8]
 800a1b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a1b6:	2b40      	cmp	r3, #64	@ 0x40
 800a1b8:	d146      	bne.n	800a248 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	3308      	adds	r3, #8
 800a1c0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a1c8:	e853 3f00 	ldrex	r3, [r3]
 800a1cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a1d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a1d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a1d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	3308      	adds	r3, #8
 800a1e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a1e6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a1ea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a1f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a1f6:	e841 2300 	strex	r3, r2, [r1]
 800a1fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a1fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a202:	2b00      	cmp	r3, #0
 800a204:	d1d9      	bne.n	800a1ba <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d017      	beq.n	800a240 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a216:	4a15      	ldr	r2, [pc, #84]	@ (800a26c <HAL_UART_IRQHandler+0x2c0>)
 800a218:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a220:	4618      	mov	r0, r3
 800a222:	f7fb fde7 	bl	8005df4 <HAL_DMA_Abort_IT>
 800a226:	4603      	mov	r3, r0
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d019      	beq.n	800a260 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a232:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a234:	687a      	ldr	r2, [r7, #4]
 800a236:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800a23a:	4610      	mov	r0, r2
 800a23c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a23e:	e00f      	b.n	800a260 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a240:	6878      	ldr	r0, [r7, #4]
 800a242:	f000 f9ff 	bl	800a644 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a246:	e00b      	b.n	800a260 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a248:	6878      	ldr	r0, [r7, #4]
 800a24a:	f000 f9fb 	bl	800a644 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a24e:	e007      	b.n	800a260 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a250:	6878      	ldr	r0, [r7, #4]
 800a252:	f000 f9f7 	bl	800a644 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	2200      	movs	r2, #0
 800a25a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800a25e:	e1bf      	b.n	800a5e0 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a260:	bf00      	nop
    return;
 800a262:	e1bd      	b.n	800a5e0 <HAL_UART_IRQHandler+0x634>
 800a264:	10000001 	.word	0x10000001
 800a268:	04000120 	.word	0x04000120
 800a26c:	0800b4cb 	.word	0x0800b4cb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a274:	2b01      	cmp	r3, #1
 800a276:	f040 8153 	bne.w	800a520 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a27a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a27e:	f003 0310 	and.w	r3, r3, #16
 800a282:	2b00      	cmp	r3, #0
 800a284:	f000 814c 	beq.w	800a520 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a288:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a28c:	f003 0310 	and.w	r3, r3, #16
 800a290:	2b00      	cmp	r3, #0
 800a292:	f000 8145 	beq.w	800a520 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	2210      	movs	r2, #16
 800a29c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	689b      	ldr	r3, [r3, #8]
 800a2a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a2a8:	2b40      	cmp	r3, #64	@ 0x40
 800a2aa:	f040 80bb 	bne.w	800a424 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	685b      	ldr	r3, [r3, #4]
 800a2b8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a2bc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	f000 818f 	beq.w	800a5e4 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a2cc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a2d0:	429a      	cmp	r2, r3
 800a2d2:	f080 8187 	bcs.w	800a5e4 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a2dc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	f003 0320 	and.w	r3, r3, #32
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	f040 8087 	bne.w	800a402 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a300:	e853 3f00 	ldrex	r3, [r3]
 800a304:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a308:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a30c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a310:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	461a      	mov	r2, r3
 800a31a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a31e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a322:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a326:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a32a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a32e:	e841 2300 	strex	r3, r2, [r1]
 800a332:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a336:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d1da      	bne.n	800a2f4 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	3308      	adds	r3, #8
 800a344:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a346:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a348:	e853 3f00 	ldrex	r3, [r3]
 800a34c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a34e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a350:	f023 0301 	bic.w	r3, r3, #1
 800a354:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	3308      	adds	r3, #8
 800a35e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a362:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a366:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a368:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a36a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a36e:	e841 2300 	strex	r3, r2, [r1]
 800a372:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a374:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a376:	2b00      	cmp	r3, #0
 800a378:	d1e1      	bne.n	800a33e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	3308      	adds	r3, #8
 800a380:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a382:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a384:	e853 3f00 	ldrex	r3, [r3]
 800a388:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a38a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a38c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a390:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	3308      	adds	r3, #8
 800a39a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a39e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a3a0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3a2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a3a4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a3a6:	e841 2300 	strex	r3, r2, [r1]
 800a3aa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a3ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d1e3      	bne.n	800a37a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2220      	movs	r2, #32
 800a3b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	2200      	movs	r2, #0
 800a3be:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a3c8:	e853 3f00 	ldrex	r3, [r3]
 800a3cc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a3ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a3d0:	f023 0310 	bic.w	r3, r3, #16
 800a3d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	461a      	mov	r2, r3
 800a3de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a3e2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a3e4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3e6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a3e8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a3ea:	e841 2300 	strex	r3, r2, [r1]
 800a3ee:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a3f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d1e4      	bne.n	800a3c0 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	f7fb fca0 	bl	8005d42 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	2202      	movs	r2, #2
 800a406:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a414:	b29b      	uxth	r3, r3
 800a416:	1ad3      	subs	r3, r2, r3
 800a418:	b29b      	uxth	r3, r3
 800a41a:	4619      	mov	r1, r3
 800a41c:	6878      	ldr	r0, [r7, #4]
 800a41e:	f001 fd31 	bl	800be84 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a422:	e0df      	b.n	800a5e4 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a430:	b29b      	uxth	r3, r3
 800a432:	1ad3      	subs	r3, r2, r3
 800a434:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a43e:	b29b      	uxth	r3, r3
 800a440:	2b00      	cmp	r3, #0
 800a442:	f000 80d1 	beq.w	800a5e8 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800a446:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	f000 80cc 	beq.w	800a5e8 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a456:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a458:	e853 3f00 	ldrex	r3, [r3]
 800a45c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a45e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a460:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a464:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	461a      	mov	r2, r3
 800a46e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a472:	647b      	str	r3, [r7, #68]	@ 0x44
 800a474:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a476:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a478:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a47a:	e841 2300 	strex	r3, r2, [r1]
 800a47e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a480:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a482:	2b00      	cmp	r3, #0
 800a484:	d1e4      	bne.n	800a450 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	3308      	adds	r3, #8
 800a48c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a48e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a490:	e853 3f00 	ldrex	r3, [r3]
 800a494:	623b      	str	r3, [r7, #32]
   return(result);
 800a496:	6a3b      	ldr	r3, [r7, #32]
 800a498:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a49c:	f023 0301 	bic.w	r3, r3, #1
 800a4a0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	3308      	adds	r3, #8
 800a4aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a4ae:	633a      	str	r2, [r7, #48]	@ 0x30
 800a4b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a4b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a4b6:	e841 2300 	strex	r3, r2, [r1]
 800a4ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a4bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d1e1      	bne.n	800a486 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	2220      	movs	r2, #32
 800a4c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4dc:	693b      	ldr	r3, [r7, #16]
 800a4de:	e853 3f00 	ldrex	r3, [r3]
 800a4e2:	60fb      	str	r3, [r7, #12]
   return(result);
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	f023 0310 	bic.w	r3, r3, #16
 800a4ea:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	461a      	mov	r2, r3
 800a4f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a4f8:	61fb      	str	r3, [r7, #28]
 800a4fa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4fc:	69b9      	ldr	r1, [r7, #24]
 800a4fe:	69fa      	ldr	r2, [r7, #28]
 800a500:	e841 2300 	strex	r3, r2, [r1]
 800a504:	617b      	str	r3, [r7, #20]
   return(result);
 800a506:	697b      	ldr	r3, [r7, #20]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d1e4      	bne.n	800a4d6 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2202      	movs	r2, #2
 800a510:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a512:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a516:	4619      	mov	r1, r3
 800a518:	6878      	ldr	r0, [r7, #4]
 800a51a:	f001 fcb3 	bl	800be84 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a51e:	e063      	b.n	800a5e8 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a520:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a524:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d00e      	beq.n	800a54a <HAL_UART_IRQHandler+0x59e>
 800a52c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a530:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a534:	2b00      	cmp	r3, #0
 800a536:	d008      	beq.n	800a54a <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800a540:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a542:	6878      	ldr	r0, [r7, #4]
 800a544:	f001 f802 	bl	800b54c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a548:	e051      	b.n	800a5ee <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a54a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a54e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a552:	2b00      	cmp	r3, #0
 800a554:	d014      	beq.n	800a580 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a556:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a55a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d105      	bne.n	800a56e <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a562:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a566:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d008      	beq.n	800a580 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a572:	2b00      	cmp	r3, #0
 800a574:	d03a      	beq.n	800a5ec <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a57a:	6878      	ldr	r0, [r7, #4]
 800a57c:	4798      	blx	r3
    }
    return;
 800a57e:	e035      	b.n	800a5ec <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a580:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a584:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d009      	beq.n	800a5a0 <HAL_UART_IRQHandler+0x5f4>
 800a58c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a590:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a594:	2b00      	cmp	r3, #0
 800a596:	d003      	beq.n	800a5a0 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800a598:	6878      	ldr	r0, [r7, #4]
 800a59a:	f000 ffac 	bl	800b4f6 <UART_EndTransmit_IT>
    return;
 800a59e:	e026      	b.n	800a5ee <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a5a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a5a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d009      	beq.n	800a5c0 <HAL_UART_IRQHandler+0x614>
 800a5ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a5b0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d003      	beq.n	800a5c0 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a5b8:	6878      	ldr	r0, [r7, #4]
 800a5ba:	f000 ffdb 	bl	800b574 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a5be:	e016      	b.n	800a5ee <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a5c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a5c4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d010      	beq.n	800a5ee <HAL_UART_IRQHandler+0x642>
 800a5cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	da0c      	bge.n	800a5ee <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a5d4:	6878      	ldr	r0, [r7, #4]
 800a5d6:	f000 ffc3 	bl	800b560 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a5da:	e008      	b.n	800a5ee <HAL_UART_IRQHandler+0x642>
      return;
 800a5dc:	bf00      	nop
 800a5de:	e006      	b.n	800a5ee <HAL_UART_IRQHandler+0x642>
    return;
 800a5e0:	bf00      	nop
 800a5e2:	e004      	b.n	800a5ee <HAL_UART_IRQHandler+0x642>
      return;
 800a5e4:	bf00      	nop
 800a5e6:	e002      	b.n	800a5ee <HAL_UART_IRQHandler+0x642>
      return;
 800a5e8:	bf00      	nop
 800a5ea:	e000      	b.n	800a5ee <HAL_UART_IRQHandler+0x642>
    return;
 800a5ec:	bf00      	nop
  }
}
 800a5ee:	37e8      	adds	r7, #232	@ 0xe8
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	bd80      	pop	{r7, pc}

0800a5f4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a5f4:	b480      	push	{r7}
 800a5f6:	b083      	sub	sp, #12
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a5fc:	bf00      	nop
 800a5fe:	370c      	adds	r7, #12
 800a600:	46bd      	mov	sp, r7
 800a602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a606:	4770      	bx	lr

0800a608 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a608:	b480      	push	{r7}
 800a60a:	b083      	sub	sp, #12
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800a610:	bf00      	nop
 800a612:	370c      	adds	r7, #12
 800a614:	46bd      	mov	sp, r7
 800a616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61a:	4770      	bx	lr

0800a61c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a61c:	b480      	push	{r7}
 800a61e:	b083      	sub	sp, #12
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800a624:	bf00      	nop
 800a626:	370c      	adds	r7, #12
 800a628:	46bd      	mov	sp, r7
 800a62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62e:	4770      	bx	lr

0800a630 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a630:	b480      	push	{r7}
 800a632:	b083      	sub	sp, #12
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800a638:	bf00      	nop
 800a63a:	370c      	adds	r7, #12
 800a63c:	46bd      	mov	sp, r7
 800a63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a642:	4770      	bx	lr

0800a644 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a644:	b480      	push	{r7}
 800a646:	b083      	sub	sp, #12
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a64c:	bf00      	nop
 800a64e:	370c      	adds	r7, #12
 800a650:	46bd      	mov	sp, r7
 800a652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a656:	4770      	bx	lr

0800a658 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 800a658:	b480      	push	{r7}
 800a65a:	b085      	sub	sp, #20
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a666:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a66e:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 800a670:	68fa      	ldr	r2, [r7, #12]
 800a672:	68bb      	ldr	r3, [r7, #8]
 800a674:	4313      	orrs	r3, r2
}
 800a676:	4618      	mov	r0, r3
 800a678:	3714      	adds	r7, #20
 800a67a:	46bd      	mov	sp, r7
 800a67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a680:	4770      	bx	lr
	...

0800a684 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a684:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a688:	b08c      	sub	sp, #48	@ 0x30
 800a68a:	af00      	add	r7, sp, #0
 800a68c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a68e:	2300      	movs	r3, #0
 800a690:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a694:	697b      	ldr	r3, [r7, #20]
 800a696:	689a      	ldr	r2, [r3, #8]
 800a698:	697b      	ldr	r3, [r7, #20]
 800a69a:	691b      	ldr	r3, [r3, #16]
 800a69c:	431a      	orrs	r2, r3
 800a69e:	697b      	ldr	r3, [r7, #20]
 800a6a0:	695b      	ldr	r3, [r3, #20]
 800a6a2:	431a      	orrs	r2, r3
 800a6a4:	697b      	ldr	r3, [r7, #20]
 800a6a6:	69db      	ldr	r3, [r3, #28]
 800a6a8:	4313      	orrs	r3, r2
 800a6aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a6ac:	697b      	ldr	r3, [r7, #20]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	681a      	ldr	r2, [r3, #0]
 800a6b2:	4bab      	ldr	r3, [pc, #684]	@ (800a960 <UART_SetConfig+0x2dc>)
 800a6b4:	4013      	ands	r3, r2
 800a6b6:	697a      	ldr	r2, [r7, #20]
 800a6b8:	6812      	ldr	r2, [r2, #0]
 800a6ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a6bc:	430b      	orrs	r3, r1
 800a6be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a6c0:	697b      	ldr	r3, [r7, #20]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	685b      	ldr	r3, [r3, #4]
 800a6c6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a6ca:	697b      	ldr	r3, [r7, #20]
 800a6cc:	68da      	ldr	r2, [r3, #12]
 800a6ce:	697b      	ldr	r3, [r7, #20]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	430a      	orrs	r2, r1
 800a6d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a6d6:	697b      	ldr	r3, [r7, #20]
 800a6d8:	699b      	ldr	r3, [r3, #24]
 800a6da:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a6dc:	697b      	ldr	r3, [r7, #20]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	4aa0      	ldr	r2, [pc, #640]	@ (800a964 <UART_SetConfig+0x2e0>)
 800a6e2:	4293      	cmp	r3, r2
 800a6e4:	d004      	beq.n	800a6f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a6e6:	697b      	ldr	r3, [r7, #20]
 800a6e8:	6a1b      	ldr	r3, [r3, #32]
 800a6ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a6ec:	4313      	orrs	r3, r2
 800a6ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a6f0:	697b      	ldr	r3, [r7, #20]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	689b      	ldr	r3, [r3, #8]
 800a6f6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800a6fa:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800a6fe:	697a      	ldr	r2, [r7, #20]
 800a700:	6812      	ldr	r2, [r2, #0]
 800a702:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a704:	430b      	orrs	r3, r1
 800a706:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a708:	697b      	ldr	r3, [r7, #20]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a70e:	f023 010f 	bic.w	r1, r3, #15
 800a712:	697b      	ldr	r3, [r7, #20]
 800a714:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a716:	697b      	ldr	r3, [r7, #20]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	430a      	orrs	r2, r1
 800a71c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a71e:	697b      	ldr	r3, [r7, #20]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	4a91      	ldr	r2, [pc, #580]	@ (800a968 <UART_SetConfig+0x2e4>)
 800a724:	4293      	cmp	r3, r2
 800a726:	d125      	bne.n	800a774 <UART_SetConfig+0xf0>
 800a728:	4b90      	ldr	r3, [pc, #576]	@ (800a96c <UART_SetConfig+0x2e8>)
 800a72a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a72e:	f003 0303 	and.w	r3, r3, #3
 800a732:	2b03      	cmp	r3, #3
 800a734:	d81a      	bhi.n	800a76c <UART_SetConfig+0xe8>
 800a736:	a201      	add	r2, pc, #4	@ (adr r2, 800a73c <UART_SetConfig+0xb8>)
 800a738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a73c:	0800a74d 	.word	0x0800a74d
 800a740:	0800a75d 	.word	0x0800a75d
 800a744:	0800a755 	.word	0x0800a755
 800a748:	0800a765 	.word	0x0800a765
 800a74c:	2301      	movs	r3, #1
 800a74e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a752:	e0d6      	b.n	800a902 <UART_SetConfig+0x27e>
 800a754:	2302      	movs	r3, #2
 800a756:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a75a:	e0d2      	b.n	800a902 <UART_SetConfig+0x27e>
 800a75c:	2304      	movs	r3, #4
 800a75e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a762:	e0ce      	b.n	800a902 <UART_SetConfig+0x27e>
 800a764:	2308      	movs	r3, #8
 800a766:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a76a:	e0ca      	b.n	800a902 <UART_SetConfig+0x27e>
 800a76c:	2310      	movs	r3, #16
 800a76e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a772:	e0c6      	b.n	800a902 <UART_SetConfig+0x27e>
 800a774:	697b      	ldr	r3, [r7, #20]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	4a7d      	ldr	r2, [pc, #500]	@ (800a970 <UART_SetConfig+0x2ec>)
 800a77a:	4293      	cmp	r3, r2
 800a77c:	d138      	bne.n	800a7f0 <UART_SetConfig+0x16c>
 800a77e:	4b7b      	ldr	r3, [pc, #492]	@ (800a96c <UART_SetConfig+0x2e8>)
 800a780:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a784:	f003 030c 	and.w	r3, r3, #12
 800a788:	2b0c      	cmp	r3, #12
 800a78a:	d82d      	bhi.n	800a7e8 <UART_SetConfig+0x164>
 800a78c:	a201      	add	r2, pc, #4	@ (adr r2, 800a794 <UART_SetConfig+0x110>)
 800a78e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a792:	bf00      	nop
 800a794:	0800a7c9 	.word	0x0800a7c9
 800a798:	0800a7e9 	.word	0x0800a7e9
 800a79c:	0800a7e9 	.word	0x0800a7e9
 800a7a0:	0800a7e9 	.word	0x0800a7e9
 800a7a4:	0800a7d9 	.word	0x0800a7d9
 800a7a8:	0800a7e9 	.word	0x0800a7e9
 800a7ac:	0800a7e9 	.word	0x0800a7e9
 800a7b0:	0800a7e9 	.word	0x0800a7e9
 800a7b4:	0800a7d1 	.word	0x0800a7d1
 800a7b8:	0800a7e9 	.word	0x0800a7e9
 800a7bc:	0800a7e9 	.word	0x0800a7e9
 800a7c0:	0800a7e9 	.word	0x0800a7e9
 800a7c4:	0800a7e1 	.word	0x0800a7e1
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a7ce:	e098      	b.n	800a902 <UART_SetConfig+0x27e>
 800a7d0:	2302      	movs	r3, #2
 800a7d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a7d6:	e094      	b.n	800a902 <UART_SetConfig+0x27e>
 800a7d8:	2304      	movs	r3, #4
 800a7da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a7de:	e090      	b.n	800a902 <UART_SetConfig+0x27e>
 800a7e0:	2308      	movs	r3, #8
 800a7e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a7e6:	e08c      	b.n	800a902 <UART_SetConfig+0x27e>
 800a7e8:	2310      	movs	r3, #16
 800a7ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a7ee:	e088      	b.n	800a902 <UART_SetConfig+0x27e>
 800a7f0:	697b      	ldr	r3, [r7, #20]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	4a5f      	ldr	r2, [pc, #380]	@ (800a974 <UART_SetConfig+0x2f0>)
 800a7f6:	4293      	cmp	r3, r2
 800a7f8:	d125      	bne.n	800a846 <UART_SetConfig+0x1c2>
 800a7fa:	4b5c      	ldr	r3, [pc, #368]	@ (800a96c <UART_SetConfig+0x2e8>)
 800a7fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a800:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a804:	2b30      	cmp	r3, #48	@ 0x30
 800a806:	d016      	beq.n	800a836 <UART_SetConfig+0x1b2>
 800a808:	2b30      	cmp	r3, #48	@ 0x30
 800a80a:	d818      	bhi.n	800a83e <UART_SetConfig+0x1ba>
 800a80c:	2b20      	cmp	r3, #32
 800a80e:	d00a      	beq.n	800a826 <UART_SetConfig+0x1a2>
 800a810:	2b20      	cmp	r3, #32
 800a812:	d814      	bhi.n	800a83e <UART_SetConfig+0x1ba>
 800a814:	2b00      	cmp	r3, #0
 800a816:	d002      	beq.n	800a81e <UART_SetConfig+0x19a>
 800a818:	2b10      	cmp	r3, #16
 800a81a:	d008      	beq.n	800a82e <UART_SetConfig+0x1aa>
 800a81c:	e00f      	b.n	800a83e <UART_SetConfig+0x1ba>
 800a81e:	2300      	movs	r3, #0
 800a820:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a824:	e06d      	b.n	800a902 <UART_SetConfig+0x27e>
 800a826:	2302      	movs	r3, #2
 800a828:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a82c:	e069      	b.n	800a902 <UART_SetConfig+0x27e>
 800a82e:	2304      	movs	r3, #4
 800a830:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a834:	e065      	b.n	800a902 <UART_SetConfig+0x27e>
 800a836:	2308      	movs	r3, #8
 800a838:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a83c:	e061      	b.n	800a902 <UART_SetConfig+0x27e>
 800a83e:	2310      	movs	r3, #16
 800a840:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a844:	e05d      	b.n	800a902 <UART_SetConfig+0x27e>
 800a846:	697b      	ldr	r3, [r7, #20]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	4a4b      	ldr	r2, [pc, #300]	@ (800a978 <UART_SetConfig+0x2f4>)
 800a84c:	4293      	cmp	r3, r2
 800a84e:	d125      	bne.n	800a89c <UART_SetConfig+0x218>
 800a850:	4b46      	ldr	r3, [pc, #280]	@ (800a96c <UART_SetConfig+0x2e8>)
 800a852:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a856:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a85a:	2bc0      	cmp	r3, #192	@ 0xc0
 800a85c:	d016      	beq.n	800a88c <UART_SetConfig+0x208>
 800a85e:	2bc0      	cmp	r3, #192	@ 0xc0
 800a860:	d818      	bhi.n	800a894 <UART_SetConfig+0x210>
 800a862:	2b80      	cmp	r3, #128	@ 0x80
 800a864:	d00a      	beq.n	800a87c <UART_SetConfig+0x1f8>
 800a866:	2b80      	cmp	r3, #128	@ 0x80
 800a868:	d814      	bhi.n	800a894 <UART_SetConfig+0x210>
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d002      	beq.n	800a874 <UART_SetConfig+0x1f0>
 800a86e:	2b40      	cmp	r3, #64	@ 0x40
 800a870:	d008      	beq.n	800a884 <UART_SetConfig+0x200>
 800a872:	e00f      	b.n	800a894 <UART_SetConfig+0x210>
 800a874:	2300      	movs	r3, #0
 800a876:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a87a:	e042      	b.n	800a902 <UART_SetConfig+0x27e>
 800a87c:	2302      	movs	r3, #2
 800a87e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a882:	e03e      	b.n	800a902 <UART_SetConfig+0x27e>
 800a884:	2304      	movs	r3, #4
 800a886:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a88a:	e03a      	b.n	800a902 <UART_SetConfig+0x27e>
 800a88c:	2308      	movs	r3, #8
 800a88e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a892:	e036      	b.n	800a902 <UART_SetConfig+0x27e>
 800a894:	2310      	movs	r3, #16
 800a896:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a89a:	e032      	b.n	800a902 <UART_SetConfig+0x27e>
 800a89c:	697b      	ldr	r3, [r7, #20]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	4a30      	ldr	r2, [pc, #192]	@ (800a964 <UART_SetConfig+0x2e0>)
 800a8a2:	4293      	cmp	r3, r2
 800a8a4:	d12a      	bne.n	800a8fc <UART_SetConfig+0x278>
 800a8a6:	4b31      	ldr	r3, [pc, #196]	@ (800a96c <UART_SetConfig+0x2e8>)
 800a8a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a8ac:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a8b0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a8b4:	d01a      	beq.n	800a8ec <UART_SetConfig+0x268>
 800a8b6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a8ba:	d81b      	bhi.n	800a8f4 <UART_SetConfig+0x270>
 800a8bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a8c0:	d00c      	beq.n	800a8dc <UART_SetConfig+0x258>
 800a8c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a8c6:	d815      	bhi.n	800a8f4 <UART_SetConfig+0x270>
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d003      	beq.n	800a8d4 <UART_SetConfig+0x250>
 800a8cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a8d0:	d008      	beq.n	800a8e4 <UART_SetConfig+0x260>
 800a8d2:	e00f      	b.n	800a8f4 <UART_SetConfig+0x270>
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a8da:	e012      	b.n	800a902 <UART_SetConfig+0x27e>
 800a8dc:	2302      	movs	r3, #2
 800a8de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a8e2:	e00e      	b.n	800a902 <UART_SetConfig+0x27e>
 800a8e4:	2304      	movs	r3, #4
 800a8e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a8ea:	e00a      	b.n	800a902 <UART_SetConfig+0x27e>
 800a8ec:	2308      	movs	r3, #8
 800a8ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a8f2:	e006      	b.n	800a902 <UART_SetConfig+0x27e>
 800a8f4:	2310      	movs	r3, #16
 800a8f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a8fa:	e002      	b.n	800a902 <UART_SetConfig+0x27e>
 800a8fc:	2310      	movs	r3, #16
 800a8fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a902:	697b      	ldr	r3, [r7, #20]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	4a17      	ldr	r2, [pc, #92]	@ (800a964 <UART_SetConfig+0x2e0>)
 800a908:	4293      	cmp	r3, r2
 800a90a:	f040 80a8 	bne.w	800aa5e <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a90e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a912:	2b08      	cmp	r3, #8
 800a914:	d834      	bhi.n	800a980 <UART_SetConfig+0x2fc>
 800a916:	a201      	add	r2, pc, #4	@ (adr r2, 800a91c <UART_SetConfig+0x298>)
 800a918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a91c:	0800a941 	.word	0x0800a941
 800a920:	0800a981 	.word	0x0800a981
 800a924:	0800a949 	.word	0x0800a949
 800a928:	0800a981 	.word	0x0800a981
 800a92c:	0800a94f 	.word	0x0800a94f
 800a930:	0800a981 	.word	0x0800a981
 800a934:	0800a981 	.word	0x0800a981
 800a938:	0800a981 	.word	0x0800a981
 800a93c:	0800a957 	.word	0x0800a957
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a940:	f7fc fde2 	bl	8007508 <HAL_RCC_GetPCLK1Freq>
 800a944:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a946:	e021      	b.n	800a98c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a948:	4b0c      	ldr	r3, [pc, #48]	@ (800a97c <UART_SetConfig+0x2f8>)
 800a94a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a94c:	e01e      	b.n	800a98c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a94e:	f7fc fd6d 	bl	800742c <HAL_RCC_GetSysClockFreq>
 800a952:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a954:	e01a      	b.n	800a98c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a956:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a95a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a95c:	e016      	b.n	800a98c <UART_SetConfig+0x308>
 800a95e:	bf00      	nop
 800a960:	cfff69f3 	.word	0xcfff69f3
 800a964:	40008000 	.word	0x40008000
 800a968:	40013800 	.word	0x40013800
 800a96c:	40021000 	.word	0x40021000
 800a970:	40004400 	.word	0x40004400
 800a974:	40004800 	.word	0x40004800
 800a978:	40004c00 	.word	0x40004c00
 800a97c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800a980:	2300      	movs	r3, #0
 800a982:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a984:	2301      	movs	r3, #1
 800a986:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a98a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a98c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a98e:	2b00      	cmp	r3, #0
 800a990:	f000 812a 	beq.w	800abe8 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a994:	697b      	ldr	r3, [r7, #20]
 800a996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a998:	4a9e      	ldr	r2, [pc, #632]	@ (800ac14 <UART_SetConfig+0x590>)
 800a99a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a99e:	461a      	mov	r2, r3
 800a9a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9a2:	fbb3 f3f2 	udiv	r3, r3, r2
 800a9a6:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a9a8:	697b      	ldr	r3, [r7, #20]
 800a9aa:	685a      	ldr	r2, [r3, #4]
 800a9ac:	4613      	mov	r3, r2
 800a9ae:	005b      	lsls	r3, r3, #1
 800a9b0:	4413      	add	r3, r2
 800a9b2:	69ba      	ldr	r2, [r7, #24]
 800a9b4:	429a      	cmp	r2, r3
 800a9b6:	d305      	bcc.n	800a9c4 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a9b8:	697b      	ldr	r3, [r7, #20]
 800a9ba:	685b      	ldr	r3, [r3, #4]
 800a9bc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a9be:	69ba      	ldr	r2, [r7, #24]
 800a9c0:	429a      	cmp	r2, r3
 800a9c2:	d903      	bls.n	800a9cc <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800a9c4:	2301      	movs	r3, #1
 800a9c6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a9ca:	e10d      	b.n	800abe8 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a9cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	60bb      	str	r3, [r7, #8]
 800a9d2:	60fa      	str	r2, [r7, #12]
 800a9d4:	697b      	ldr	r3, [r7, #20]
 800a9d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9d8:	4a8e      	ldr	r2, [pc, #568]	@ (800ac14 <UART_SetConfig+0x590>)
 800a9da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a9de:	b29b      	uxth	r3, r3
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	603b      	str	r3, [r7, #0]
 800a9e4:	607a      	str	r2, [r7, #4]
 800a9e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a9ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a9ee:	f7f6 f973 	bl	8000cd8 <__aeabi_uldivmod>
 800a9f2:	4602      	mov	r2, r0
 800a9f4:	460b      	mov	r3, r1
 800a9f6:	4610      	mov	r0, r2
 800a9f8:	4619      	mov	r1, r3
 800a9fa:	f04f 0200 	mov.w	r2, #0
 800a9fe:	f04f 0300 	mov.w	r3, #0
 800aa02:	020b      	lsls	r3, r1, #8
 800aa04:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800aa08:	0202      	lsls	r2, r0, #8
 800aa0a:	6979      	ldr	r1, [r7, #20]
 800aa0c:	6849      	ldr	r1, [r1, #4]
 800aa0e:	0849      	lsrs	r1, r1, #1
 800aa10:	2000      	movs	r0, #0
 800aa12:	460c      	mov	r4, r1
 800aa14:	4605      	mov	r5, r0
 800aa16:	eb12 0804 	adds.w	r8, r2, r4
 800aa1a:	eb43 0905 	adc.w	r9, r3, r5
 800aa1e:	697b      	ldr	r3, [r7, #20]
 800aa20:	685b      	ldr	r3, [r3, #4]
 800aa22:	2200      	movs	r2, #0
 800aa24:	469a      	mov	sl, r3
 800aa26:	4693      	mov	fp, r2
 800aa28:	4652      	mov	r2, sl
 800aa2a:	465b      	mov	r3, fp
 800aa2c:	4640      	mov	r0, r8
 800aa2e:	4649      	mov	r1, r9
 800aa30:	f7f6 f952 	bl	8000cd8 <__aeabi_uldivmod>
 800aa34:	4602      	mov	r2, r0
 800aa36:	460b      	mov	r3, r1
 800aa38:	4613      	mov	r3, r2
 800aa3a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800aa3c:	6a3b      	ldr	r3, [r7, #32]
 800aa3e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800aa42:	d308      	bcc.n	800aa56 <UART_SetConfig+0x3d2>
 800aa44:	6a3b      	ldr	r3, [r7, #32]
 800aa46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aa4a:	d204      	bcs.n	800aa56 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800aa4c:	697b      	ldr	r3, [r7, #20]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	6a3a      	ldr	r2, [r7, #32]
 800aa52:	60da      	str	r2, [r3, #12]
 800aa54:	e0c8      	b.n	800abe8 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800aa56:	2301      	movs	r3, #1
 800aa58:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800aa5c:	e0c4      	b.n	800abe8 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aa5e:	697b      	ldr	r3, [r7, #20]
 800aa60:	69db      	ldr	r3, [r3, #28]
 800aa62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800aa66:	d167      	bne.n	800ab38 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800aa68:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800aa6c:	2b08      	cmp	r3, #8
 800aa6e:	d828      	bhi.n	800aac2 <UART_SetConfig+0x43e>
 800aa70:	a201      	add	r2, pc, #4	@ (adr r2, 800aa78 <UART_SetConfig+0x3f4>)
 800aa72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa76:	bf00      	nop
 800aa78:	0800aa9d 	.word	0x0800aa9d
 800aa7c:	0800aaa5 	.word	0x0800aaa5
 800aa80:	0800aaad 	.word	0x0800aaad
 800aa84:	0800aac3 	.word	0x0800aac3
 800aa88:	0800aab3 	.word	0x0800aab3
 800aa8c:	0800aac3 	.word	0x0800aac3
 800aa90:	0800aac3 	.word	0x0800aac3
 800aa94:	0800aac3 	.word	0x0800aac3
 800aa98:	0800aabb 	.word	0x0800aabb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aa9c:	f7fc fd34 	bl	8007508 <HAL_RCC_GetPCLK1Freq>
 800aaa0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800aaa2:	e014      	b.n	800aace <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aaa4:	f7fc fd46 	bl	8007534 <HAL_RCC_GetPCLK2Freq>
 800aaa8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800aaaa:	e010      	b.n	800aace <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800aaac:	4b5a      	ldr	r3, [pc, #360]	@ (800ac18 <UART_SetConfig+0x594>)
 800aaae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800aab0:	e00d      	b.n	800aace <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aab2:	f7fc fcbb 	bl	800742c <HAL_RCC_GetSysClockFreq>
 800aab6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800aab8:	e009      	b.n	800aace <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aaba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aabe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800aac0:	e005      	b.n	800aace <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800aac2:	2300      	movs	r3, #0
 800aac4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800aac6:	2301      	movs	r3, #1
 800aac8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800aacc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800aace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	f000 8089 	beq.w	800abe8 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aad6:	697b      	ldr	r3, [r7, #20]
 800aad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aada:	4a4e      	ldr	r2, [pc, #312]	@ (800ac14 <UART_SetConfig+0x590>)
 800aadc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aae0:	461a      	mov	r2, r3
 800aae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aae4:	fbb3 f3f2 	udiv	r3, r3, r2
 800aae8:	005a      	lsls	r2, r3, #1
 800aaea:	697b      	ldr	r3, [r7, #20]
 800aaec:	685b      	ldr	r3, [r3, #4]
 800aaee:	085b      	lsrs	r3, r3, #1
 800aaf0:	441a      	add	r2, r3
 800aaf2:	697b      	ldr	r3, [r7, #20]
 800aaf4:	685b      	ldr	r3, [r3, #4]
 800aaf6:	fbb2 f3f3 	udiv	r3, r2, r3
 800aafa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aafc:	6a3b      	ldr	r3, [r7, #32]
 800aafe:	2b0f      	cmp	r3, #15
 800ab00:	d916      	bls.n	800ab30 <UART_SetConfig+0x4ac>
 800ab02:	6a3b      	ldr	r3, [r7, #32]
 800ab04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ab08:	d212      	bcs.n	800ab30 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ab0a:	6a3b      	ldr	r3, [r7, #32]
 800ab0c:	b29b      	uxth	r3, r3
 800ab0e:	f023 030f 	bic.w	r3, r3, #15
 800ab12:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ab14:	6a3b      	ldr	r3, [r7, #32]
 800ab16:	085b      	lsrs	r3, r3, #1
 800ab18:	b29b      	uxth	r3, r3
 800ab1a:	f003 0307 	and.w	r3, r3, #7
 800ab1e:	b29a      	uxth	r2, r3
 800ab20:	8bfb      	ldrh	r3, [r7, #30]
 800ab22:	4313      	orrs	r3, r2
 800ab24:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800ab26:	697b      	ldr	r3, [r7, #20]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	8bfa      	ldrh	r2, [r7, #30]
 800ab2c:	60da      	str	r2, [r3, #12]
 800ab2e:	e05b      	b.n	800abe8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800ab30:	2301      	movs	r3, #1
 800ab32:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800ab36:	e057      	b.n	800abe8 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ab38:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ab3c:	2b08      	cmp	r3, #8
 800ab3e:	d828      	bhi.n	800ab92 <UART_SetConfig+0x50e>
 800ab40:	a201      	add	r2, pc, #4	@ (adr r2, 800ab48 <UART_SetConfig+0x4c4>)
 800ab42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab46:	bf00      	nop
 800ab48:	0800ab6d 	.word	0x0800ab6d
 800ab4c:	0800ab75 	.word	0x0800ab75
 800ab50:	0800ab7d 	.word	0x0800ab7d
 800ab54:	0800ab93 	.word	0x0800ab93
 800ab58:	0800ab83 	.word	0x0800ab83
 800ab5c:	0800ab93 	.word	0x0800ab93
 800ab60:	0800ab93 	.word	0x0800ab93
 800ab64:	0800ab93 	.word	0x0800ab93
 800ab68:	0800ab8b 	.word	0x0800ab8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ab6c:	f7fc fccc 	bl	8007508 <HAL_RCC_GetPCLK1Freq>
 800ab70:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ab72:	e014      	b.n	800ab9e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ab74:	f7fc fcde 	bl	8007534 <HAL_RCC_GetPCLK2Freq>
 800ab78:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ab7a:	e010      	b.n	800ab9e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ab7c:	4b26      	ldr	r3, [pc, #152]	@ (800ac18 <UART_SetConfig+0x594>)
 800ab7e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ab80:	e00d      	b.n	800ab9e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ab82:	f7fc fc53 	bl	800742c <HAL_RCC_GetSysClockFreq>
 800ab86:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ab88:	e009      	b.n	800ab9e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ab8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ab8e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ab90:	e005      	b.n	800ab9e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800ab92:	2300      	movs	r3, #0
 800ab94:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800ab96:	2301      	movs	r3, #1
 800ab98:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800ab9c:	bf00      	nop
    }

    if (pclk != 0U)
 800ab9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d021      	beq.n	800abe8 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aba4:	697b      	ldr	r3, [r7, #20]
 800aba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aba8:	4a1a      	ldr	r2, [pc, #104]	@ (800ac14 <UART_SetConfig+0x590>)
 800abaa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800abae:	461a      	mov	r2, r3
 800abb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abb2:	fbb3 f2f2 	udiv	r2, r3, r2
 800abb6:	697b      	ldr	r3, [r7, #20]
 800abb8:	685b      	ldr	r3, [r3, #4]
 800abba:	085b      	lsrs	r3, r3, #1
 800abbc:	441a      	add	r2, r3
 800abbe:	697b      	ldr	r3, [r7, #20]
 800abc0:	685b      	ldr	r3, [r3, #4]
 800abc2:	fbb2 f3f3 	udiv	r3, r2, r3
 800abc6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800abc8:	6a3b      	ldr	r3, [r7, #32]
 800abca:	2b0f      	cmp	r3, #15
 800abcc:	d909      	bls.n	800abe2 <UART_SetConfig+0x55e>
 800abce:	6a3b      	ldr	r3, [r7, #32]
 800abd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800abd4:	d205      	bcs.n	800abe2 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800abd6:	6a3b      	ldr	r3, [r7, #32]
 800abd8:	b29a      	uxth	r2, r3
 800abda:	697b      	ldr	r3, [r7, #20]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	60da      	str	r2, [r3, #12]
 800abe0:	e002      	b.n	800abe8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800abe2:	2301      	movs	r3, #1
 800abe4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800abe8:	697b      	ldr	r3, [r7, #20]
 800abea:	2201      	movs	r2, #1
 800abec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800abf0:	697b      	ldr	r3, [r7, #20]
 800abf2:	2201      	movs	r2, #1
 800abf4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800abf8:	697b      	ldr	r3, [r7, #20]
 800abfa:	2200      	movs	r2, #0
 800abfc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800abfe:	697b      	ldr	r3, [r7, #20]
 800ac00:	2200      	movs	r2, #0
 800ac02:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800ac04:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800ac08:	4618      	mov	r0, r3
 800ac0a:	3730      	adds	r7, #48	@ 0x30
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ac12:	bf00      	nop
 800ac14:	080126c4 	.word	0x080126c4
 800ac18:	00f42400 	.word	0x00f42400

0800ac1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ac1c:	b480      	push	{r7}
 800ac1e:	b083      	sub	sp, #12
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac28:	f003 0308 	and.w	r3, r3, #8
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d00a      	beq.n	800ac46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	685b      	ldr	r3, [r3, #4]
 800ac36:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	430a      	orrs	r2, r1
 800ac44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac4a:	f003 0301 	and.w	r3, r3, #1
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d00a      	beq.n	800ac68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	685b      	ldr	r3, [r3, #4]
 800ac58:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	430a      	orrs	r2, r1
 800ac66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac6c:	f003 0302 	and.w	r3, r3, #2
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d00a      	beq.n	800ac8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	685b      	ldr	r3, [r3, #4]
 800ac7a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	430a      	orrs	r2, r1
 800ac88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac8e:	f003 0304 	and.w	r3, r3, #4
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d00a      	beq.n	800acac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	685b      	ldr	r3, [r3, #4]
 800ac9c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	430a      	orrs	r2, r1
 800acaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acb0:	f003 0310 	and.w	r3, r3, #16
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d00a      	beq.n	800acce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	689b      	ldr	r3, [r3, #8]
 800acbe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	430a      	orrs	r2, r1
 800accc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acd2:	f003 0320 	and.w	r3, r3, #32
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d00a      	beq.n	800acf0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	689b      	ldr	r3, [r3, #8]
 800ace0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	430a      	orrs	r2, r1
 800acee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d01a      	beq.n	800ad32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	685b      	ldr	r3, [r3, #4]
 800ad02:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	430a      	orrs	r2, r1
 800ad10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad16:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ad1a:	d10a      	bne.n	800ad32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	685b      	ldr	r3, [r3, #4]
 800ad22:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	430a      	orrs	r2, r1
 800ad30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d00a      	beq.n	800ad54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	685b      	ldr	r3, [r3, #4]
 800ad44:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	430a      	orrs	r2, r1
 800ad52:	605a      	str	r2, [r3, #4]
  }
}
 800ad54:	bf00      	nop
 800ad56:	370c      	adds	r7, #12
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5e:	4770      	bx	lr

0800ad60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b098      	sub	sp, #96	@ 0x60
 800ad64:	af02      	add	r7, sp, #8
 800ad66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ad70:	f7f7 fce4 	bl	800273c <HAL_GetTick>
 800ad74:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	f003 0308 	and.w	r3, r3, #8
 800ad80:	2b08      	cmp	r3, #8
 800ad82:	d12f      	bne.n	800ade4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ad84:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ad88:	9300      	str	r3, [sp, #0]
 800ad8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800ad92:	6878      	ldr	r0, [r7, #4]
 800ad94:	f000 f88e 	bl	800aeb4 <UART_WaitOnFlagUntilTimeout>
 800ad98:	4603      	mov	r3, r0
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d022      	beq.n	800ade4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ada4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ada6:	e853 3f00 	ldrex	r3, [r3]
 800adaa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800adac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800adae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800adb2:	653b      	str	r3, [r7, #80]	@ 0x50
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	461a      	mov	r2, r3
 800adba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800adbc:	647b      	str	r3, [r7, #68]	@ 0x44
 800adbe:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adc0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800adc2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800adc4:	e841 2300 	strex	r3, r2, [r1]
 800adc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800adca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d1e6      	bne.n	800ad9e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	2220      	movs	r2, #32
 800add4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	2200      	movs	r2, #0
 800addc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ade0:	2303      	movs	r3, #3
 800ade2:	e063      	b.n	800aeac <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	f003 0304 	and.w	r3, r3, #4
 800adee:	2b04      	cmp	r3, #4
 800adf0:	d149      	bne.n	800ae86 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800adf2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800adf6:	9300      	str	r3, [sp, #0]
 800adf8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800adfa:	2200      	movs	r2, #0
 800adfc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800ae00:	6878      	ldr	r0, [r7, #4]
 800ae02:	f000 f857 	bl	800aeb4 <UART_WaitOnFlagUntilTimeout>
 800ae06:	4603      	mov	r3, r0
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d03c      	beq.n	800ae86 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae14:	e853 3f00 	ldrex	r3, [r3]
 800ae18:	623b      	str	r3, [r7, #32]
   return(result);
 800ae1a:	6a3b      	ldr	r3, [r7, #32]
 800ae1c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ae20:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	461a      	mov	r2, r3
 800ae28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ae2a:	633b      	str	r3, [r7, #48]	@ 0x30
 800ae2c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae2e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ae30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ae32:	e841 2300 	strex	r3, r2, [r1]
 800ae36:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ae38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d1e6      	bne.n	800ae0c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	3308      	adds	r3, #8
 800ae44:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae46:	693b      	ldr	r3, [r7, #16]
 800ae48:	e853 3f00 	ldrex	r3, [r3]
 800ae4c:	60fb      	str	r3, [r7, #12]
   return(result);
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	f023 0301 	bic.w	r3, r3, #1
 800ae54:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	3308      	adds	r3, #8
 800ae5c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ae5e:	61fa      	str	r2, [r7, #28]
 800ae60:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae62:	69b9      	ldr	r1, [r7, #24]
 800ae64:	69fa      	ldr	r2, [r7, #28]
 800ae66:	e841 2300 	strex	r3, r2, [r1]
 800ae6a:	617b      	str	r3, [r7, #20]
   return(result);
 800ae6c:	697b      	ldr	r3, [r7, #20]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d1e5      	bne.n	800ae3e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	2220      	movs	r2, #32
 800ae76:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	2200      	movs	r2, #0
 800ae7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ae82:	2303      	movs	r3, #3
 800ae84:	e012      	b.n	800aeac <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	2220      	movs	r2, #32
 800ae8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	2220      	movs	r2, #32
 800ae92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	2200      	movs	r2, #0
 800ae9a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	2200      	movs	r2, #0
 800aea0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	2200      	movs	r2, #0
 800aea6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800aeaa:	2300      	movs	r3, #0
}
 800aeac:	4618      	mov	r0, r3
 800aeae:	3758      	adds	r7, #88	@ 0x58
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	bd80      	pop	{r7, pc}

0800aeb4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b084      	sub	sp, #16
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	60f8      	str	r0, [r7, #12]
 800aebc:	60b9      	str	r1, [r7, #8]
 800aebe:	603b      	str	r3, [r7, #0]
 800aec0:	4613      	mov	r3, r2
 800aec2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aec4:	e04f      	b.n	800af66 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aec6:	69bb      	ldr	r3, [r7, #24]
 800aec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aecc:	d04b      	beq.n	800af66 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aece:	f7f7 fc35 	bl	800273c <HAL_GetTick>
 800aed2:	4602      	mov	r2, r0
 800aed4:	683b      	ldr	r3, [r7, #0]
 800aed6:	1ad3      	subs	r3, r2, r3
 800aed8:	69ba      	ldr	r2, [r7, #24]
 800aeda:	429a      	cmp	r2, r3
 800aedc:	d302      	bcc.n	800aee4 <UART_WaitOnFlagUntilTimeout+0x30>
 800aede:	69bb      	ldr	r3, [r7, #24]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d101      	bne.n	800aee8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800aee4:	2303      	movs	r3, #3
 800aee6:	e04e      	b.n	800af86 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	f003 0304 	and.w	r3, r3, #4
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d037      	beq.n	800af66 <UART_WaitOnFlagUntilTimeout+0xb2>
 800aef6:	68bb      	ldr	r3, [r7, #8]
 800aef8:	2b80      	cmp	r3, #128	@ 0x80
 800aefa:	d034      	beq.n	800af66 <UART_WaitOnFlagUntilTimeout+0xb2>
 800aefc:	68bb      	ldr	r3, [r7, #8]
 800aefe:	2b40      	cmp	r3, #64	@ 0x40
 800af00:	d031      	beq.n	800af66 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	69db      	ldr	r3, [r3, #28]
 800af08:	f003 0308 	and.w	r3, r3, #8
 800af0c:	2b08      	cmp	r3, #8
 800af0e:	d110      	bne.n	800af32 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	2208      	movs	r2, #8
 800af16:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800af18:	68f8      	ldr	r0, [r7, #12]
 800af1a:	f000 f920 	bl	800b15e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	2208      	movs	r2, #8
 800af22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	2200      	movs	r2, #0
 800af2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800af2e:	2301      	movs	r3, #1
 800af30:	e029      	b.n	800af86 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	69db      	ldr	r3, [r3, #28]
 800af38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800af3c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800af40:	d111      	bne.n	800af66 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800af4a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800af4c:	68f8      	ldr	r0, [r7, #12]
 800af4e:	f000 f906 	bl	800b15e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	2220      	movs	r2, #32
 800af56:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	2200      	movs	r2, #0
 800af5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800af62:	2303      	movs	r3, #3
 800af64:	e00f      	b.n	800af86 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	69da      	ldr	r2, [r3, #28]
 800af6c:	68bb      	ldr	r3, [r7, #8]
 800af6e:	4013      	ands	r3, r2
 800af70:	68ba      	ldr	r2, [r7, #8]
 800af72:	429a      	cmp	r2, r3
 800af74:	bf0c      	ite	eq
 800af76:	2301      	moveq	r3, #1
 800af78:	2300      	movne	r3, #0
 800af7a:	b2db      	uxtb	r3, r3
 800af7c:	461a      	mov	r2, r3
 800af7e:	79fb      	ldrb	r3, [r7, #7]
 800af80:	429a      	cmp	r2, r3
 800af82:	d0a0      	beq.n	800aec6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800af84:	2300      	movs	r3, #0
}
 800af86:	4618      	mov	r0, r3
 800af88:	3710      	adds	r7, #16
 800af8a:	46bd      	mov	sp, r7
 800af8c:	bd80      	pop	{r7, pc}
	...

0800af90 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b096      	sub	sp, #88	@ 0x58
 800af94:	af00      	add	r7, sp, #0
 800af96:	60f8      	str	r0, [r7, #12]
 800af98:	60b9      	str	r1, [r7, #8]
 800af9a:	4613      	mov	r3, r2
 800af9c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	68ba      	ldr	r2, [r7, #8]
 800afa2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	88fa      	ldrh	r2, [r7, #6]
 800afa8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	2200      	movs	r2, #0
 800afb0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	2222      	movs	r2, #34	@ 0x22
 800afb8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d02d      	beq.n	800b022 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800afcc:	4a40      	ldr	r2, [pc, #256]	@ (800b0d0 <UART_Start_Receive_DMA+0x140>)
 800afce:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800afd6:	4a3f      	ldr	r2, [pc, #252]	@ (800b0d4 <UART_Start_Receive_DMA+0x144>)
 800afd8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800afe0:	4a3d      	ldr	r2, [pc, #244]	@ (800b0d8 <UART_Start_Receive_DMA+0x148>)
 800afe2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800afea:	2200      	movs	r2, #0
 800afec:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	3324      	adds	r3, #36	@ 0x24
 800affa:	4619      	mov	r1, r3
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b000:	461a      	mov	r2, r3
 800b002:	88fb      	ldrh	r3, [r7, #6]
 800b004:	f7fa fe22 	bl	8005c4c <HAL_DMA_Start_IT>
 800b008:	4603      	mov	r3, r0
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d009      	beq.n	800b022 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	2210      	movs	r2, #16
 800b012:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	2220      	movs	r2, #32
 800b01a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800b01e:	2301      	movs	r3, #1
 800b020:	e051      	b.n	800b0c6 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	691b      	ldr	r3, [r3, #16]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d018      	beq.n	800b05c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b030:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b032:	e853 3f00 	ldrex	r3, [r3]
 800b036:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b038:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b03a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b03e:	657b      	str	r3, [r7, #84]	@ 0x54
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	461a      	mov	r2, r3
 800b046:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b048:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b04a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b04c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b04e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b050:	e841 2300 	strex	r3, r2, [r1]
 800b054:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800b056:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d1e6      	bne.n	800b02a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	3308      	adds	r3, #8
 800b062:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b066:	e853 3f00 	ldrex	r3, [r3]
 800b06a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b06c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b06e:	f043 0301 	orr.w	r3, r3, #1
 800b072:	653b      	str	r3, [r7, #80]	@ 0x50
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	3308      	adds	r3, #8
 800b07a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b07c:	637a      	str	r2, [r7, #52]	@ 0x34
 800b07e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b080:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b082:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b084:	e841 2300 	strex	r3, r2, [r1]
 800b088:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b08a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d1e5      	bne.n	800b05c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	3308      	adds	r3, #8
 800b096:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b098:	697b      	ldr	r3, [r7, #20]
 800b09a:	e853 3f00 	ldrex	r3, [r3]
 800b09e:	613b      	str	r3, [r7, #16]
   return(result);
 800b0a0:	693b      	ldr	r3, [r7, #16]
 800b0a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b0a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	3308      	adds	r3, #8
 800b0ae:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b0b0:	623a      	str	r2, [r7, #32]
 800b0b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0b4:	69f9      	ldr	r1, [r7, #28]
 800b0b6:	6a3a      	ldr	r2, [r7, #32]
 800b0b8:	e841 2300 	strex	r3, r2, [r1]
 800b0bc:	61bb      	str	r3, [r7, #24]
   return(result);
 800b0be:	69bb      	ldr	r3, [r7, #24]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d1e5      	bne.n	800b090 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800b0c4:	2300      	movs	r3, #0
}
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	3758      	adds	r7, #88	@ 0x58
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bd80      	pop	{r7, pc}
 800b0ce:	bf00      	nop
 800b0d0:	0800b2e1 	.word	0x0800b2e1
 800b0d4:	0800b40d 	.word	0x0800b40d
 800b0d8:	0800b44b 	.word	0x0800b44b

0800b0dc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b0dc:	b480      	push	{r7}
 800b0de:	b08f      	sub	sp, #60	@ 0x3c
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0ea:	6a3b      	ldr	r3, [r7, #32]
 800b0ec:	e853 3f00 	ldrex	r3, [r3]
 800b0f0:	61fb      	str	r3, [r7, #28]
   return(result);
 800b0f2:	69fb      	ldr	r3, [r7, #28]
 800b0f4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b0f8:	637b      	str	r3, [r7, #52]	@ 0x34
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	461a      	mov	r2, r3
 800b100:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b102:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b104:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b106:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b108:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b10a:	e841 2300 	strex	r3, r2, [r1]
 800b10e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b112:	2b00      	cmp	r3, #0
 800b114:	d1e6      	bne.n	800b0e4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	3308      	adds	r3, #8
 800b11c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	e853 3f00 	ldrex	r3, [r3]
 800b124:	60bb      	str	r3, [r7, #8]
   return(result);
 800b126:	68bb      	ldr	r3, [r7, #8]
 800b128:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800b12c:	633b      	str	r3, [r7, #48]	@ 0x30
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	3308      	adds	r3, #8
 800b134:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b136:	61ba      	str	r2, [r7, #24]
 800b138:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b13a:	6979      	ldr	r1, [r7, #20]
 800b13c:	69ba      	ldr	r2, [r7, #24]
 800b13e:	e841 2300 	strex	r3, r2, [r1]
 800b142:	613b      	str	r3, [r7, #16]
   return(result);
 800b144:	693b      	ldr	r3, [r7, #16]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d1e5      	bne.n	800b116 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	2220      	movs	r2, #32
 800b14e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800b152:	bf00      	nop
 800b154:	373c      	adds	r7, #60	@ 0x3c
 800b156:	46bd      	mov	sp, r7
 800b158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15c:	4770      	bx	lr

0800b15e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b15e:	b480      	push	{r7}
 800b160:	b095      	sub	sp, #84	@ 0x54
 800b162:	af00      	add	r7, sp, #0
 800b164:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b16c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b16e:	e853 3f00 	ldrex	r3, [r3]
 800b172:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b176:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b17a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	461a      	mov	r2, r3
 800b182:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b184:	643b      	str	r3, [r7, #64]	@ 0x40
 800b186:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b188:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b18a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b18c:	e841 2300 	strex	r3, r2, [r1]
 800b190:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b192:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b194:	2b00      	cmp	r3, #0
 800b196:	d1e6      	bne.n	800b166 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	3308      	adds	r3, #8
 800b19e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1a0:	6a3b      	ldr	r3, [r7, #32]
 800b1a2:	e853 3f00 	ldrex	r3, [r3]
 800b1a6:	61fb      	str	r3, [r7, #28]
   return(result);
 800b1a8:	69fb      	ldr	r3, [r7, #28]
 800b1aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b1ae:	f023 0301 	bic.w	r3, r3, #1
 800b1b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	3308      	adds	r3, #8
 800b1ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b1bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b1be:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b1c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b1c4:	e841 2300 	strex	r3, r2, [r1]
 800b1c8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b1ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d1e3      	bne.n	800b198 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b1d4:	2b01      	cmp	r3, #1
 800b1d6:	d118      	bne.n	800b20a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	e853 3f00 	ldrex	r3, [r3]
 800b1e4:	60bb      	str	r3, [r7, #8]
   return(result);
 800b1e6:	68bb      	ldr	r3, [r7, #8]
 800b1e8:	f023 0310 	bic.w	r3, r3, #16
 800b1ec:	647b      	str	r3, [r7, #68]	@ 0x44
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	461a      	mov	r2, r3
 800b1f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b1f6:	61bb      	str	r3, [r7, #24]
 800b1f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1fa:	6979      	ldr	r1, [r7, #20]
 800b1fc:	69ba      	ldr	r2, [r7, #24]
 800b1fe:	e841 2300 	strex	r3, r2, [r1]
 800b202:	613b      	str	r3, [r7, #16]
   return(result);
 800b204:	693b      	ldr	r3, [r7, #16]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d1e6      	bne.n	800b1d8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	2220      	movs	r2, #32
 800b20e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	2200      	movs	r2, #0
 800b216:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	2200      	movs	r2, #0
 800b21c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b21e:	bf00      	nop
 800b220:	3754      	adds	r7, #84	@ 0x54
 800b222:	46bd      	mov	sp, r7
 800b224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b228:	4770      	bx	lr

0800b22a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b22a:	b580      	push	{r7, lr}
 800b22c:	b090      	sub	sp, #64	@ 0x40
 800b22e:	af00      	add	r7, sp, #0
 800b230:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b236:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	f003 0320 	and.w	r3, r3, #32
 800b242:	2b00      	cmp	r3, #0
 800b244:	d137      	bne.n	800b2b6 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800b246:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b248:	2200      	movs	r2, #0
 800b24a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b24e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	3308      	adds	r3, #8
 800b254:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b258:	e853 3f00 	ldrex	r3, [r3]
 800b25c:	623b      	str	r3, [r7, #32]
   return(result);
 800b25e:	6a3b      	ldr	r3, [r7, #32]
 800b260:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b264:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b266:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	3308      	adds	r3, #8
 800b26c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b26e:	633a      	str	r2, [r7, #48]	@ 0x30
 800b270:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b272:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b274:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b276:	e841 2300 	strex	r3, r2, [r1]
 800b27a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b27c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d1e5      	bne.n	800b24e <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b282:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b288:	693b      	ldr	r3, [r7, #16]
 800b28a:	e853 3f00 	ldrex	r3, [r3]
 800b28e:	60fb      	str	r3, [r7, #12]
   return(result);
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b296:	637b      	str	r3, [r7, #52]	@ 0x34
 800b298:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	461a      	mov	r2, r3
 800b29e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b2a0:	61fb      	str	r3, [r7, #28]
 800b2a2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2a4:	69b9      	ldr	r1, [r7, #24]
 800b2a6:	69fa      	ldr	r2, [r7, #28]
 800b2a8:	e841 2300 	strex	r3, r2, [r1]
 800b2ac:	617b      	str	r3, [r7, #20]
   return(result);
 800b2ae:	697b      	ldr	r3, [r7, #20]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d1e6      	bne.n	800b282 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b2b4:	e002      	b.n	800b2bc <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800b2b6:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800b2b8:	f7ff f99c 	bl	800a5f4 <HAL_UART_TxCpltCallback>
}
 800b2bc:	bf00      	nop
 800b2be:	3740      	adds	r7, #64	@ 0x40
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	bd80      	pop	{r7, pc}

0800b2c4 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b084      	sub	sp, #16
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2d0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800b2d2:	68f8      	ldr	r0, [r7, #12]
 800b2d4:	f7ff f998 	bl	800a608 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b2d8:	bf00      	nop
 800b2da:	3710      	adds	r7, #16
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	bd80      	pop	{r7, pc}

0800b2e0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b09c      	sub	sp, #112	@ 0x70
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2ec:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	f003 0320 	and.w	r3, r3, #32
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d171      	bne.n	800b3e0 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800b2fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b2fe:	2200      	movs	r2, #0
 800b300:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b304:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b30a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b30c:	e853 3f00 	ldrex	r3, [r3]
 800b310:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b312:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b314:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b318:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b31a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	461a      	mov	r2, r3
 800b320:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b322:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b324:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b326:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b328:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b32a:	e841 2300 	strex	r3, r2, [r1]
 800b32e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b330:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b332:	2b00      	cmp	r3, #0
 800b334:	d1e6      	bne.n	800b304 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b336:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	3308      	adds	r3, #8
 800b33c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b33e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b340:	e853 3f00 	ldrex	r3, [r3]
 800b344:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b346:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b348:	f023 0301 	bic.w	r3, r3, #1
 800b34c:	667b      	str	r3, [r7, #100]	@ 0x64
 800b34e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	3308      	adds	r3, #8
 800b354:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b356:	647a      	str	r2, [r7, #68]	@ 0x44
 800b358:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b35a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b35c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b35e:	e841 2300 	strex	r3, r2, [r1]
 800b362:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b364:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b366:	2b00      	cmp	r3, #0
 800b368:	d1e5      	bne.n	800b336 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b36a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	3308      	adds	r3, #8
 800b370:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b374:	e853 3f00 	ldrex	r3, [r3]
 800b378:	623b      	str	r3, [r7, #32]
   return(result);
 800b37a:	6a3b      	ldr	r3, [r7, #32]
 800b37c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b380:	663b      	str	r3, [r7, #96]	@ 0x60
 800b382:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	3308      	adds	r3, #8
 800b388:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b38a:	633a      	str	r2, [r7, #48]	@ 0x30
 800b38c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b38e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b390:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b392:	e841 2300 	strex	r3, r2, [r1]
 800b396:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d1e5      	bne.n	800b36a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b39e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b3a0:	2220      	movs	r2, #32
 800b3a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b3a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b3a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b3aa:	2b01      	cmp	r3, #1
 800b3ac:	d118      	bne.n	800b3e0 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b3ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3b4:	693b      	ldr	r3, [r7, #16]
 800b3b6:	e853 3f00 	ldrex	r3, [r3]
 800b3ba:	60fb      	str	r3, [r7, #12]
   return(result);
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	f023 0310 	bic.w	r3, r3, #16
 800b3c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b3c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	461a      	mov	r2, r3
 800b3ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b3cc:	61fb      	str	r3, [r7, #28]
 800b3ce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3d0:	69b9      	ldr	r1, [r7, #24]
 800b3d2:	69fa      	ldr	r2, [r7, #28]
 800b3d4:	e841 2300 	strex	r3, r2, [r1]
 800b3d8:	617b      	str	r3, [r7, #20]
   return(result);
 800b3da:	697b      	ldr	r3, [r7, #20]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d1e6      	bne.n	800b3ae <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b3e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b3e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b3e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b3ea:	2b01      	cmp	r3, #1
 800b3ec:	d107      	bne.n	800b3fe <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b3ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b3f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b3f4:	4619      	mov	r1, r3
 800b3f6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b3f8:	f000 fd44 	bl	800be84 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b3fc:	e002      	b.n	800b404 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800b3fe:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b400:	f7ff f90c 	bl	800a61c <HAL_UART_RxCpltCallback>
}
 800b404:	bf00      	nop
 800b406:	3770      	adds	r7, #112	@ 0x70
 800b408:	46bd      	mov	sp, r7
 800b40a:	bd80      	pop	{r7, pc}

0800b40c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b084      	sub	sp, #16
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b418:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	2201      	movs	r2, #1
 800b41e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b424:	2b01      	cmp	r3, #1
 800b426:	d109      	bne.n	800b43c <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b42e:	085b      	lsrs	r3, r3, #1
 800b430:	b29b      	uxth	r3, r3
 800b432:	4619      	mov	r1, r3
 800b434:	68f8      	ldr	r0, [r7, #12]
 800b436:	f000 fd25 	bl	800be84 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b43a:	e002      	b.n	800b442 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800b43c:	68f8      	ldr	r0, [r7, #12]
 800b43e:	f7ff f8f7 	bl	800a630 <HAL_UART_RxHalfCpltCallback>
}
 800b442:	bf00      	nop
 800b444:	3710      	adds	r7, #16
 800b446:	46bd      	mov	sp, r7
 800b448:	bd80      	pop	{r7, pc}

0800b44a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b44a:	b580      	push	{r7, lr}
 800b44c:	b086      	sub	sp, #24
 800b44e:	af00      	add	r7, sp, #0
 800b450:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b456:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b458:	697b      	ldr	r3, [r7, #20]
 800b45a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b45e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b460:	697b      	ldr	r3, [r7, #20]
 800b462:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b466:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b468:	697b      	ldr	r3, [r7, #20]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	689b      	ldr	r3, [r3, #8]
 800b46e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b472:	2b80      	cmp	r3, #128	@ 0x80
 800b474:	d109      	bne.n	800b48a <UART_DMAError+0x40>
 800b476:	693b      	ldr	r3, [r7, #16]
 800b478:	2b21      	cmp	r3, #33	@ 0x21
 800b47a:	d106      	bne.n	800b48a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b47c:	697b      	ldr	r3, [r7, #20]
 800b47e:	2200      	movs	r2, #0
 800b480:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800b484:	6978      	ldr	r0, [r7, #20]
 800b486:	f7ff fe29 	bl	800b0dc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b48a:	697b      	ldr	r3, [r7, #20]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	689b      	ldr	r3, [r3, #8]
 800b490:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b494:	2b40      	cmp	r3, #64	@ 0x40
 800b496:	d109      	bne.n	800b4ac <UART_DMAError+0x62>
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	2b22      	cmp	r3, #34	@ 0x22
 800b49c:	d106      	bne.n	800b4ac <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b49e:	697b      	ldr	r3, [r7, #20]
 800b4a0:	2200      	movs	r2, #0
 800b4a2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800b4a6:	6978      	ldr	r0, [r7, #20]
 800b4a8:	f7ff fe59 	bl	800b15e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b4ac:	697b      	ldr	r3, [r7, #20]
 800b4ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b4b2:	f043 0210 	orr.w	r2, r3, #16
 800b4b6:	697b      	ldr	r3, [r7, #20]
 800b4b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b4bc:	6978      	ldr	r0, [r7, #20]
 800b4be:	f7ff f8c1 	bl	800a644 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b4c2:	bf00      	nop
 800b4c4:	3718      	adds	r7, #24
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	bd80      	pop	{r7, pc}

0800b4ca <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b4ca:	b580      	push	{r7, lr}
 800b4cc:	b084      	sub	sp, #16
 800b4ce:	af00      	add	r7, sp, #0
 800b4d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	2200      	movs	r2, #0
 800b4dc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b4e8:	68f8      	ldr	r0, [r7, #12]
 800b4ea:	f7ff f8ab 	bl	800a644 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b4ee:	bf00      	nop
 800b4f0:	3710      	adds	r7, #16
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	bd80      	pop	{r7, pc}

0800b4f6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b4f6:	b580      	push	{r7, lr}
 800b4f8:	b088      	sub	sp, #32
 800b4fa:	af00      	add	r7, sp, #0
 800b4fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	e853 3f00 	ldrex	r3, [r3]
 800b50a:	60bb      	str	r3, [r7, #8]
   return(result);
 800b50c:	68bb      	ldr	r3, [r7, #8]
 800b50e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b512:	61fb      	str	r3, [r7, #28]
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	461a      	mov	r2, r3
 800b51a:	69fb      	ldr	r3, [r7, #28]
 800b51c:	61bb      	str	r3, [r7, #24]
 800b51e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b520:	6979      	ldr	r1, [r7, #20]
 800b522:	69ba      	ldr	r2, [r7, #24]
 800b524:	e841 2300 	strex	r3, r2, [r1]
 800b528:	613b      	str	r3, [r7, #16]
   return(result);
 800b52a:	693b      	ldr	r3, [r7, #16]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d1e6      	bne.n	800b4fe <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	2220      	movs	r2, #32
 800b534:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	2200      	movs	r2, #0
 800b53c:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b53e:	6878      	ldr	r0, [r7, #4]
 800b540:	f7ff f858 	bl	800a5f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b544:	bf00      	nop
 800b546:	3720      	adds	r7, #32
 800b548:	46bd      	mov	sp, r7
 800b54a:	bd80      	pop	{r7, pc}

0800b54c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b54c:	b480      	push	{r7}
 800b54e:	b083      	sub	sp, #12
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b554:	bf00      	nop
 800b556:	370c      	adds	r7, #12
 800b558:	46bd      	mov	sp, r7
 800b55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55e:	4770      	bx	lr

0800b560 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b560:	b480      	push	{r7}
 800b562:	b083      	sub	sp, #12
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b568:	bf00      	nop
 800b56a:	370c      	adds	r7, #12
 800b56c:	46bd      	mov	sp, r7
 800b56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b572:	4770      	bx	lr

0800b574 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b574:	b480      	push	{r7}
 800b576:	b083      	sub	sp, #12
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b57c:	bf00      	nop
 800b57e:	370c      	adds	r7, #12
 800b580:	46bd      	mov	sp, r7
 800b582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b586:	4770      	bx	lr

0800b588 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b588:	b480      	push	{r7}
 800b58a:	b085      	sub	sp, #20
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b596:	2b01      	cmp	r3, #1
 800b598:	d101      	bne.n	800b59e <HAL_UARTEx_DisableFifoMode+0x16>
 800b59a:	2302      	movs	r3, #2
 800b59c:	e027      	b.n	800b5ee <HAL_UARTEx_DisableFifoMode+0x66>
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	2201      	movs	r2, #1
 800b5a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	2224      	movs	r2, #36	@ 0x24
 800b5aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	681a      	ldr	r2, [r3, #0]
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	f022 0201 	bic.w	r2, r2, #1
 800b5c4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b5cc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	68fa      	ldr	r2, [r7, #12]
 800b5da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	2220      	movs	r2, #32
 800b5e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b5ec:	2300      	movs	r3, #0
}
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	3714      	adds	r7, #20
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f8:	4770      	bx	lr

0800b5fa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b5fa:	b580      	push	{r7, lr}
 800b5fc:	b084      	sub	sp, #16
 800b5fe:	af00      	add	r7, sp, #0
 800b600:	6078      	str	r0, [r7, #4]
 800b602:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b60a:	2b01      	cmp	r3, #1
 800b60c:	d101      	bne.n	800b612 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b60e:	2302      	movs	r3, #2
 800b610:	e02d      	b.n	800b66e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	2201      	movs	r2, #1
 800b616:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	2224      	movs	r2, #36	@ 0x24
 800b61e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	681a      	ldr	r2, [r3, #0]
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	f022 0201 	bic.w	r2, r2, #1
 800b638:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	689b      	ldr	r3, [r3, #8]
 800b640:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	683a      	ldr	r2, [r7, #0]
 800b64a:	430a      	orrs	r2, r1
 800b64c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b64e:	6878      	ldr	r0, [r7, #4]
 800b650:	f000 f8a4 	bl	800b79c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	68fa      	ldr	r2, [r7, #12]
 800b65a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	2220      	movs	r2, #32
 800b660:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	2200      	movs	r2, #0
 800b668:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b66c:	2300      	movs	r3, #0
}
 800b66e:	4618      	mov	r0, r3
 800b670:	3710      	adds	r7, #16
 800b672:	46bd      	mov	sp, r7
 800b674:	bd80      	pop	{r7, pc}

0800b676 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b676:	b580      	push	{r7, lr}
 800b678:	b084      	sub	sp, #16
 800b67a:	af00      	add	r7, sp, #0
 800b67c:	6078      	str	r0, [r7, #4]
 800b67e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b686:	2b01      	cmp	r3, #1
 800b688:	d101      	bne.n	800b68e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b68a:	2302      	movs	r3, #2
 800b68c:	e02d      	b.n	800b6ea <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	2201      	movs	r2, #1
 800b692:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	2224      	movs	r2, #36	@ 0x24
 800b69a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	681a      	ldr	r2, [r3, #0]
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	f022 0201 	bic.w	r2, r2, #1
 800b6b4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	689b      	ldr	r3, [r3, #8]
 800b6bc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	683a      	ldr	r2, [r7, #0]
 800b6c6:	430a      	orrs	r2, r1
 800b6c8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b6ca:	6878      	ldr	r0, [r7, #4]
 800b6cc:	f000 f866 	bl	800b79c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	68fa      	ldr	r2, [r7, #12]
 800b6d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	2220      	movs	r2, #32
 800b6dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b6e8:	2300      	movs	r3, #0
}
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	3710      	adds	r7, #16
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	bd80      	pop	{r7, pc}

0800b6f2 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b6f2:	b580      	push	{r7, lr}
 800b6f4:	b08c      	sub	sp, #48	@ 0x30
 800b6f6:	af00      	add	r7, sp, #0
 800b6f8:	60f8      	str	r0, [r7, #12]
 800b6fa:	60b9      	str	r1, [r7, #8]
 800b6fc:	4613      	mov	r3, r2
 800b6fe:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b706:	2b20      	cmp	r3, #32
 800b708:	d142      	bne.n	800b790 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b70a:	68bb      	ldr	r3, [r7, #8]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d002      	beq.n	800b716 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800b710:	88fb      	ldrh	r3, [r7, #6]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d101      	bne.n	800b71a <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800b716:	2301      	movs	r3, #1
 800b718:	e03b      	b.n	800b792 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	2201      	movs	r2, #1
 800b71e:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	2200      	movs	r2, #0
 800b724:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800b726:	88fb      	ldrh	r3, [r7, #6]
 800b728:	461a      	mov	r2, r3
 800b72a:	68b9      	ldr	r1, [r7, #8]
 800b72c:	68f8      	ldr	r0, [r7, #12]
 800b72e:	f7ff fc2f 	bl	800af90 <UART_Start_Receive_DMA>
 800b732:	4603      	mov	r3, r0
 800b734:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800b738:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d124      	bne.n	800b78a <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b744:	2b01      	cmp	r3, #1
 800b746:	d11d      	bne.n	800b784 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	2210      	movs	r2, #16
 800b74e:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b756:	69bb      	ldr	r3, [r7, #24]
 800b758:	e853 3f00 	ldrex	r3, [r3]
 800b75c:	617b      	str	r3, [r7, #20]
   return(result);
 800b75e:	697b      	ldr	r3, [r7, #20]
 800b760:	f043 0310 	orr.w	r3, r3, #16
 800b764:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	461a      	mov	r2, r3
 800b76c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b76e:	627b      	str	r3, [r7, #36]	@ 0x24
 800b770:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b772:	6a39      	ldr	r1, [r7, #32]
 800b774:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b776:	e841 2300 	strex	r3, r2, [r1]
 800b77a:	61fb      	str	r3, [r7, #28]
   return(result);
 800b77c:	69fb      	ldr	r3, [r7, #28]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d1e6      	bne.n	800b750 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800b782:	e002      	b.n	800b78a <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800b784:	2301      	movs	r3, #1
 800b786:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800b78a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b78e:	e000      	b.n	800b792 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800b790:	2302      	movs	r3, #2
  }
}
 800b792:	4618      	mov	r0, r3
 800b794:	3730      	adds	r7, #48	@ 0x30
 800b796:	46bd      	mov	sp, r7
 800b798:	bd80      	pop	{r7, pc}
	...

0800b79c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b79c:	b480      	push	{r7}
 800b79e:	b085      	sub	sp, #20
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d108      	bne.n	800b7be <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	2201      	movs	r2, #1
 800b7b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	2201      	movs	r2, #1
 800b7b8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b7bc:	e031      	b.n	800b822 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b7be:	2308      	movs	r3, #8
 800b7c0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b7c2:	2308      	movs	r3, #8
 800b7c4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	689b      	ldr	r3, [r3, #8]
 800b7cc:	0e5b      	lsrs	r3, r3, #25
 800b7ce:	b2db      	uxtb	r3, r3
 800b7d0:	f003 0307 	and.w	r3, r3, #7
 800b7d4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	689b      	ldr	r3, [r3, #8]
 800b7dc:	0f5b      	lsrs	r3, r3, #29
 800b7de:	b2db      	uxtb	r3, r3
 800b7e0:	f003 0307 	and.w	r3, r3, #7
 800b7e4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b7e6:	7bbb      	ldrb	r3, [r7, #14]
 800b7e8:	7b3a      	ldrb	r2, [r7, #12]
 800b7ea:	4911      	ldr	r1, [pc, #68]	@ (800b830 <UARTEx_SetNbDataToProcess+0x94>)
 800b7ec:	5c8a      	ldrb	r2, [r1, r2]
 800b7ee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b7f2:	7b3a      	ldrb	r2, [r7, #12]
 800b7f4:	490f      	ldr	r1, [pc, #60]	@ (800b834 <UARTEx_SetNbDataToProcess+0x98>)
 800b7f6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b7f8:	fb93 f3f2 	sdiv	r3, r3, r2
 800b7fc:	b29a      	uxth	r2, r3
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b804:	7bfb      	ldrb	r3, [r7, #15]
 800b806:	7b7a      	ldrb	r2, [r7, #13]
 800b808:	4909      	ldr	r1, [pc, #36]	@ (800b830 <UARTEx_SetNbDataToProcess+0x94>)
 800b80a:	5c8a      	ldrb	r2, [r1, r2]
 800b80c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b810:	7b7a      	ldrb	r2, [r7, #13]
 800b812:	4908      	ldr	r1, [pc, #32]	@ (800b834 <UARTEx_SetNbDataToProcess+0x98>)
 800b814:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b816:	fb93 f3f2 	sdiv	r3, r3, r2
 800b81a:	b29a      	uxth	r2, r3
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b822:	bf00      	nop
 800b824:	3714      	adds	r7, #20
 800b826:	46bd      	mov	sp, r7
 800b828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82c:	4770      	bx	lr
 800b82e:	bf00      	nop
 800b830:	080126dc 	.word	0x080126dc
 800b834:	080126e4 	.word	0x080126e4

0800b838 <startPwm1>:

static void standingBy();
static void working(void);
static void updatePwm1(unsigned short int a, unsigned short int b, unsigned short int c);
static void startPwm1()
{
 800b838:	b580      	push	{r7, lr}
 800b83a:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800b83c:	2100      	movs	r1, #0
 800b83e:	480c      	ldr	r0, [pc, #48]	@ (800b870 <startPwm1+0x38>)
 800b840:	f7fc fe20 	bl	8008484 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800b844:	2104      	movs	r1, #4
 800b846:	480a      	ldr	r0, [pc, #40]	@ (800b870 <startPwm1+0x38>)
 800b848:	f7fc fe1c 	bl	8008484 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800b84c:	2108      	movs	r1, #8
 800b84e:	4808      	ldr	r0, [pc, #32]	@ (800b870 <startPwm1+0x38>)
 800b850:	f7fc fe18 	bl	8008484 <HAL_TIM_PWM_Start>
    HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 800b854:	2100      	movs	r1, #0
 800b856:	4806      	ldr	r0, [pc, #24]	@ (800b870 <startPwm1+0x38>)
 800b858:	f7fd ff2c 	bl	80096b4 <HAL_TIMEx_PWMN_Start>
    HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 800b85c:	2104      	movs	r1, #4
 800b85e:	4804      	ldr	r0, [pc, #16]	@ (800b870 <startPwm1+0x38>)
 800b860:	f7fd ff28 	bl	80096b4 <HAL_TIMEx_PWMN_Start>
    HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 800b864:	2108      	movs	r1, #8
 800b866:	4802      	ldr	r0, [pc, #8]	@ (800b870 <startPwm1+0x38>)
 800b868:	f7fd ff24 	bl	80096b4 <HAL_TIMEx_PWMN_Start>
}
 800b86c:	bf00      	nop
 800b86e:	bd80      	pop	{r7, pc}
 800b870:	20000508 	.word	0x20000508

0800b874 <stopPwm1>:
static void stopPwm1()
{
 800b874:	b580      	push	{r7, lr}
 800b876:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800b878:	2100      	movs	r1, #0
 800b87a:	480c      	ldr	r0, [pc, #48]	@ (800b8ac <stopPwm1+0x38>)
 800b87c:	f7fc ff02 	bl	8008684 <HAL_TIM_PWM_Stop>
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 800b880:	2104      	movs	r1, #4
 800b882:	480a      	ldr	r0, [pc, #40]	@ (800b8ac <stopPwm1+0x38>)
 800b884:	f7fc fefe 	bl	8008684 <HAL_TIM_PWM_Stop>
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 800b888:	2108      	movs	r1, #8
 800b88a:	4808      	ldr	r0, [pc, #32]	@ (800b8ac <stopPwm1+0x38>)
 800b88c:	f7fc fefa 	bl	8008684 <HAL_TIM_PWM_Stop>
    HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 800b890:	2100      	movs	r1, #0
 800b892:	4806      	ldr	r0, [pc, #24]	@ (800b8ac <stopPwm1+0x38>)
 800b894:	f7fd ffc2 	bl	800981c <HAL_TIMEx_PWMN_Stop>
    HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 800b898:	2104      	movs	r1, #4
 800b89a:	4804      	ldr	r0, [pc, #16]	@ (800b8ac <stopPwm1+0x38>)
 800b89c:	f7fd ffbe 	bl	800981c <HAL_TIMEx_PWMN_Stop>
    HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3);
 800b8a0:	2108      	movs	r1, #8
 800b8a2:	4802      	ldr	r0, [pc, #8]	@ (800b8ac <stopPwm1+0x38>)
 800b8a4:	f7fd ffba 	bl	800981c <HAL_TIMEx_PWMN_Stop>
}
 800b8a8:	bf00      	nop
 800b8aa:	bd80      	pop	{r7, pc}
 800b8ac:	20000508 	.word	0x20000508

0800b8b0 <updatePwm1>:
static void updatePwm1(unsigned short int a, unsigned short int b, unsigned short int c)
{
 800b8b0:	b480      	push	{r7}
 800b8b2:	b083      	sub	sp, #12
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	4603      	mov	r3, r0
 800b8b8:	80fb      	strh	r3, [r7, #6]
 800b8ba:	460b      	mov	r3, r1
 800b8bc:	80bb      	strh	r3, [r7, #4]
 800b8be:	4613      	mov	r3, r2
 800b8c0:	807b      	strh	r3, [r7, #2]
    TIM1->CCR1 = a;
 800b8c2:	4a07      	ldr	r2, [pc, #28]	@ (800b8e0 <updatePwm1+0x30>)
 800b8c4:	88fb      	ldrh	r3, [r7, #6]
 800b8c6:	6353      	str	r3, [r2, #52]	@ 0x34
    TIM1->CCR2 = b;
 800b8c8:	4a05      	ldr	r2, [pc, #20]	@ (800b8e0 <updatePwm1+0x30>)
 800b8ca:	88bb      	ldrh	r3, [r7, #4]
 800b8cc:	6393      	str	r3, [r2, #56]	@ 0x38
    TIM1->CCR3 = c;
 800b8ce:	4a04      	ldr	r2, [pc, #16]	@ (800b8e0 <updatePwm1+0x30>)
 800b8d0:	887b      	ldrh	r3, [r7, #2]
 800b8d2:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800b8d4:	bf00      	nop
 800b8d6:	370c      	adds	r7, #12
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8de:	4770      	bx	lr
 800b8e0:	40012c00 	.word	0x40012c00

0800b8e4 <motorInit>:
// should be called before interruption enabled
static void motorInit()
{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	b082      	sub	sp, #8
 800b8e8:	af00      	add	r7, sp, #0
    motor1.pole_pairs = 7;
 800b8ea:	4b78      	ldr	r3, [pc, #480]	@ (800bacc <motorInit+0x1e8>)
 800b8ec:	2207      	movs	r2, #7
 800b8ee:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    motor1.updatePwm = updatePwm1;
 800b8f2:	4b76      	ldr	r3, [pc, #472]	@ (800bacc <motorInit+0x1e8>)
 800b8f4:	4a76      	ldr	r2, [pc, #472]	@ (800bad0 <motorInit+0x1ec>)
 800b8f6:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
    motor1.startPwm = startPwm1;
 800b8fa:	4b74      	ldr	r3, [pc, #464]	@ (800bacc <motorInit+0x1e8>)
 800b8fc:	4a75      	ldr	r2, [pc, #468]	@ (800bad4 <motorInit+0x1f0>)
 800b8fe:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
    motor1.stopPwm = stopPwm1;
 800b902:	4b72      	ldr	r3, [pc, #456]	@ (800bacc <motorInit+0x1e8>)
 800b904:	4a74      	ldr	r2, [pc, #464]	@ (800bad8 <motorInit+0x1f4>)
 800b906:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
    motor1.zeroElectricAngleOffSet = 0;
 800b90a:	4b70      	ldr	r3, [pc, #448]	@ (800bacc <motorInit+0x1e8>)
 800b90c:	f04f 0200 	mov.w	r2, #0
 800b910:	635a      	str	r2, [r3, #52]	@ 0x34
    motor1.Ts = 100 * 1e-6f;
 800b912:	4b6e      	ldr	r3, [pc, #440]	@ (800bacc <motorInit+0x1e8>)
 800b914:	4a71      	ldr	r2, [pc, #452]	@ (800badc <motorInit+0x1f8>)
 800b916:	62da      	str	r2, [r3, #44]	@ 0x2c
    motor1.torqueType = CURRENT;
 800b918:	4b6c      	ldr	r3, [pc, #432]	@ (800bacc <motorInit+0x1e8>)
 800b91a:	2201      	movs	r2, #1
 800b91c:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
    motor1.controlType = TORQUE;
 800b920:	4b6a      	ldr	r3, [pc, #424]	@ (800bacc <motorInit+0x1e8>)
 800b922:	2200      	movs	r2, #0
 800b924:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
    motor1.state = MOTOR_CALIBRATE;
 800b928:	4b68      	ldr	r3, [pc, #416]	@ (800bacc <motorInit+0x1e8>)
 800b92a:	2200      	movs	r2, #0
 800b92c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    encoderInit(&motor1.magEncoder, motor1.Ts, MT6701_GetRawAngle);
 800b930:	4b66      	ldr	r3, [pc, #408]	@ (800bacc <motorInit+0x1e8>)
 800b932:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800b936:	496a      	ldr	r1, [pc, #424]	@ (800bae0 <motorInit+0x1fc>)
 800b938:	eeb0 0a67 	vmov.f32	s0, s15
 800b93c:	4863      	ldr	r0, [pc, #396]	@ (800bacc <motorInit+0x1e8>)
 800b93e:	f000 fd0a 	bl	800c356 <encoderInit>

    if (motor1.controlType == TORQUE && motor1.torqueType == CURRENT)
 800b942:	4b62      	ldr	r3, [pc, #392]	@ (800bacc <motorInit+0x1e8>)
 800b944:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d12b      	bne.n	800b9a4 <motorInit+0xc0>
 800b94c:	4b5f      	ldr	r3, [pc, #380]	@ (800bacc <motorInit+0x1e8>)
 800b94e:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800b952:	2b01      	cmp	r3, #1
 800b954:	d126      	bne.n	800b9a4 <motorInit+0xc0>
    {

        float kp, ki;
        kp = 2.5;
 800b956:	4b63      	ldr	r3, [pc, #396]	@ (800bae4 <motorInit+0x200>)
 800b958:	607b      	str	r3, [r7, #4]
        // ki = 2.5;
        pidInit(&motor1.pidId, kp, ki, 0, 0, UqMAX, motor1.Ts);
 800b95a:	4b5c      	ldr	r3, [pc, #368]	@ (800bacc <motorInit+0x1e8>)
 800b95c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800b960:	eef0 2a67 	vmov.f32	s5, s15
 800b964:	ed9f 2a60 	vldr	s4, [pc, #384]	@ 800bae8 <motorInit+0x204>
 800b968:	eddf 1a60 	vldr	s3, [pc, #384]	@ 800baec <motorInit+0x208>
 800b96c:	ed9f 1a5f 	vldr	s2, [pc, #380]	@ 800baec <motorInit+0x208>
 800b970:	edd7 0a00 	vldr	s1, [r7]
 800b974:	ed97 0a01 	vldr	s0, [r7, #4]
 800b978:	485d      	ldr	r0, [pc, #372]	@ (800baf0 <motorInit+0x20c>)
 800b97a:	f001 fc97 	bl	800d2ac <pidInit>
        pidInit(&motor1.pidIq, kp, ki, 0, 0, UqMAX, motor1.Ts);
 800b97e:	4b53      	ldr	r3, [pc, #332]	@ (800bacc <motorInit+0x1e8>)
 800b980:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800b984:	eef0 2a67 	vmov.f32	s5, s15
 800b988:	ed9f 2a57 	vldr	s4, [pc, #348]	@ 800bae8 <motorInit+0x204>
 800b98c:	eddf 1a57 	vldr	s3, [pc, #348]	@ 800baec <motorInit+0x208>
 800b990:	ed9f 1a56 	vldr	s2, [pc, #344]	@ 800baec <motorInit+0x208>
 800b994:	edd7 0a00 	vldr	s1, [r7]
 800b998:	ed97 0a01 	vldr	s0, [r7, #4]
 800b99c:	4855      	ldr	r0, [pc, #340]	@ (800baf4 <motorInit+0x210>)
 800b99e:	f001 fc85 	bl	800d2ac <pidInit>
    {
 800b9a2:	e070      	b.n	800ba86 <motorInit+0x1a2>
    }
    else if (motor1.controlType == VELOCITY)
 800b9a4:	4b49      	ldr	r3, [pc, #292]	@ (800bacc <motorInit+0x1e8>)
 800b9a6:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800b9aa:	2b02      	cmp	r3, #2
 800b9ac:	d12a      	bne.n	800ba04 <motorInit+0x120>
    {
        if (motor1.torqueType == CURRENT)
 800b9ae:	4b47      	ldr	r3, [pc, #284]	@ (800bacc <motorInit+0x1e8>)
 800b9b0:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800b9b4:	2b01      	cmp	r3, #1
 800b9b6:	d112      	bne.n	800b9de <motorInit+0xfa>
        {
            //            pidInit(&motor1.currentPID, 0.5, 50, 0, 100000, 12.4, motor1.Ts);
            pidInit(&motor1.velocityPID, 3, 2, 0, 100000, 0.5, motor1.Ts);
 800b9b8:	4b44      	ldr	r3, [pc, #272]	@ (800bacc <motorInit+0x1e8>)
 800b9ba:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800b9be:	eef0 2a67 	vmov.f32	s5, s15
 800b9c2:	eeb6 2a00 	vmov.f32	s4, #96	@ 0x3f000000  0.5
 800b9c6:	eddf 1a4c 	vldr	s3, [pc, #304]	@ 800baf8 <motorInit+0x214>
 800b9ca:	ed9f 1a48 	vldr	s2, [pc, #288]	@ 800baec <motorInit+0x208>
 800b9ce:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800b9d2:	eeb0 0a08 	vmov.f32	s0, #8	@ 0x40400000  3.0
 800b9d6:	4849      	ldr	r0, [pc, #292]	@ (800bafc <motorInit+0x218>)
 800b9d8:	f001 fc68 	bl	800d2ac <pidInit>
 800b9dc:	e053      	b.n	800ba86 <motorInit+0x1a2>
        }
        else
        {
            pidInit(&motor1.velocityPID, 0.15, 0.05, 0, 0, UqMAX, motor1.Ts);
 800b9de:	4b3b      	ldr	r3, [pc, #236]	@ (800bacc <motorInit+0x1e8>)
 800b9e0:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800b9e4:	eef0 2a67 	vmov.f32	s5, s15
 800b9e8:	ed9f 2a3f 	vldr	s4, [pc, #252]	@ 800bae8 <motorInit+0x204>
 800b9ec:	eddf 1a3f 	vldr	s3, [pc, #252]	@ 800baec <motorInit+0x208>
 800b9f0:	ed9f 1a3e 	vldr	s2, [pc, #248]	@ 800baec <motorInit+0x208>
 800b9f4:	eddf 0a42 	vldr	s1, [pc, #264]	@ 800bb00 <motorInit+0x21c>
 800b9f8:	ed9f 0a42 	vldr	s0, [pc, #264]	@ 800bb04 <motorInit+0x220>
 800b9fc:	483f      	ldr	r0, [pc, #252]	@ (800bafc <motorInit+0x218>)
 800b9fe:	f001 fc55 	bl	800d2ac <pidInit>
 800ba02:	e040      	b.n	800ba86 <motorInit+0x1a2>
        }
    }
    else if (motor1.controlType == ANGLE)
 800ba04:	4b31      	ldr	r3, [pc, #196]	@ (800bacc <motorInit+0x1e8>)
 800ba06:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800ba0a:	2b03      	cmp	r3, #3
 800ba0c:	d13b      	bne.n	800ba86 <motorInit+0x1a2>
    {
        if (motor1.torqueType == CURRENT)
 800ba0e:	4b2f      	ldr	r3, [pc, #188]	@ (800bacc <motorInit+0x1e8>)
 800ba10:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800ba14:	2b01      	cmp	r3, #1
 800ba16:	d124      	bne.n	800ba62 <motorInit+0x17e>
        {
            //            pidInit(&motor1.currentPID, 5, 200, 0, 100000, 12.4, motor1.Ts);
            pidInit(&motor1.velocityPID, 0.02, 1, 0, 100000, 0.5, motor1.Ts);
 800ba18:	4b2c      	ldr	r3, [pc, #176]	@ (800bacc <motorInit+0x1e8>)
 800ba1a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800ba1e:	eef0 2a67 	vmov.f32	s5, s15
 800ba22:	eeb6 2a00 	vmov.f32	s4, #96	@ 0x3f000000  0.5
 800ba26:	eddf 1a34 	vldr	s3, [pc, #208]	@ 800baf8 <motorInit+0x214>
 800ba2a:	ed9f 1a30 	vldr	s2, [pc, #192]	@ 800baec <motorInit+0x208>
 800ba2e:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 800ba32:	ed9f 0a35 	vldr	s0, [pc, #212]	@ 800bb08 <motorInit+0x224>
 800ba36:	4831      	ldr	r0, [pc, #196]	@ (800bafc <motorInit+0x218>)
 800ba38:	f001 fc38 	bl	800d2ac <pidInit>
            pidInit(&motor1.anglePID, 1, 0, 0, 100000, 30, motor1.Ts);
 800ba3c:	4b23      	ldr	r3, [pc, #140]	@ (800bacc <motorInit+0x1e8>)
 800ba3e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800ba42:	eef0 2a67 	vmov.f32	s5, s15
 800ba46:	eeb3 2a0e 	vmov.f32	s4, #62	@ 0x41f00000  30.0
 800ba4a:	eddf 1a2b 	vldr	s3, [pc, #172]	@ 800baf8 <motorInit+0x214>
 800ba4e:	ed9f 1a27 	vldr	s2, [pc, #156]	@ 800baec <motorInit+0x208>
 800ba52:	eddf 0a26 	vldr	s1, [pc, #152]	@ 800baec <motorInit+0x208>
 800ba56:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800ba5a:	482c      	ldr	r0, [pc, #176]	@ (800bb0c <motorInit+0x228>)
 800ba5c:	f001 fc26 	bl	800d2ac <pidInit>
 800ba60:	e011      	b.n	800ba86 <motorInit+0x1a2>
        }
        else
        {
            pidInit(&motor1.anglePID, 0.3, 0.001, 0, 0, UqMAX / 2, motor1.Ts);
 800ba62:	4b1a      	ldr	r3, [pc, #104]	@ (800bacc <motorInit+0x1e8>)
 800ba64:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800ba68:	eef0 2a67 	vmov.f32	s5, s15
 800ba6c:	ed9f 2a28 	vldr	s4, [pc, #160]	@ 800bb10 <motorInit+0x22c>
 800ba70:	eddf 1a1e 	vldr	s3, [pc, #120]	@ 800baec <motorInit+0x208>
 800ba74:	ed9f 1a1d 	vldr	s2, [pc, #116]	@ 800baec <motorInit+0x208>
 800ba78:	eddf 0a26 	vldr	s1, [pc, #152]	@ 800bb14 <motorInit+0x230>
 800ba7c:	ed9f 0a26 	vldr	s0, [pc, #152]	@ 800bb18 <motorInit+0x234>
 800ba80:	4822      	ldr	r0, [pc, #136]	@ (800bb0c <motorInit+0x228>)
 800ba82:	f001 fc13 	bl	800d2ac <pidInit>

        // pidInit(&motor1.currentPID, 1.25, 50, 0, 100000, 12.4, motor1.Ts);
        // pidInit(&motor1.anglePID, 0.5, 0, 0.003, 100000, 0.2, motor1.Ts);
    }

    lpfInit(&motor1.IqFilter, 0.05, motor1.Ts);
 800ba86:	4b11      	ldr	r3, [pc, #68]	@ (800bacc <motorInit+0x1e8>)
 800ba88:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800ba8c:	eef0 0a67 	vmov.f32	s1, s15
 800ba90:	ed9f 0a1b 	vldr	s0, [pc, #108]	@ 800bb00 <motorInit+0x21c>
 800ba94:	4821      	ldr	r0, [pc, #132]	@ (800bb1c <motorInit+0x238>)
 800ba96:	f001 fa43 	bl	800cf20 <lpfInit>
    lpfInit(&motor1.IdFilter, 0.05, motor1.Ts);
 800ba9a:	4b0c      	ldr	r3, [pc, #48]	@ (800bacc <motorInit+0x1e8>)
 800ba9c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800baa0:	eef0 0a67 	vmov.f32	s1, s15
 800baa4:	ed9f 0a16 	vldr	s0, [pc, #88]	@ 800bb00 <motorInit+0x21c>
 800baa8:	481d      	ldr	r0, [pc, #116]	@ (800bb20 <motorInit+0x23c>)
 800baaa:	f001 fa39 	bl	800cf20 <lpfInit>
    lpfInit(&motor1.velocityFilter, 0.01, motor1.Ts);
 800baae:	4b07      	ldr	r3, [pc, #28]	@ (800bacc <motorInit+0x1e8>)
 800bab0:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bab4:	eef0 0a67 	vmov.f32	s1, s15
 800bab8:	ed9f 0a1a 	vldr	s0, [pc, #104]	@ 800bb24 <motorInit+0x240>
 800babc:	481a      	ldr	r0, [pc, #104]	@ (800bb28 <motorInit+0x244>)
 800babe:	f001 fa2f 	bl	800cf20 <lpfInit>
}
 800bac2:	bf00      	nop
 800bac4:	3708      	adds	r7, #8
 800bac6:	46bd      	mov	sp, r7
 800bac8:	bd80      	pop	{r7, pc}
 800baca:	bf00      	nop
 800bacc:	200006fc 	.word	0x200006fc
 800bad0:	0800b8b1 	.word	0x0800b8b1
 800bad4:	0800b839 	.word	0x0800b839
 800bad8:	0800b875 	.word	0x0800b875
 800badc:	38d1b717 	.word	0x38d1b717
 800bae0:	0800d271 	.word	0x0800d271
 800bae4:	40200000 	.word	0x40200000
 800bae8:	40ddb3d7 	.word	0x40ddb3d7
 800baec:	00000000 	.word	0x00000000
 800baf0:	2000075c 	.word	0x2000075c
 800baf4:	20000780 	.word	0x20000780
 800baf8:	47c35000 	.word	0x47c35000
 800bafc:	200007a4 	.word	0x200007a4
 800bb00:	3d4ccccd 	.word	0x3d4ccccd
 800bb04:	3e19999a 	.word	0x3e19999a
 800bb08:	3ca3d70a 	.word	0x3ca3d70a
 800bb0c:	200007c8 	.word	0x200007c8
 800bb10:	405db3d7 	.word	0x405db3d7
 800bb14:	3a83126f 	.word	0x3a83126f
 800bb18:	3e99999a 	.word	0x3e99999a
 800bb1c:	200007ec 	.word	0x200007ec
 800bb20:	200007f8 	.word	0x200007f8
 800bb24:	3c23d70a 	.word	0x3c23d70a
 800bb28:	20000804 	.word	0x20000804

0800bb2c <appInit>:
void appInit()
{
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	af00      	add	r7, sp, #0
    motorInit();
 800bb30:	f7ff fed8 	bl	800b8e4 <motorInit>
}
 800bb34:	bf00      	nop
 800bb36:	bd80      	pop	{r7, pc}

0800bb38 <appRunning>:

void appRunning()
{
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	b086      	sub	sp, #24
 800bb3c:	af00      	add	r7, sp, #0

    getKeyState(&keyState);
 800bb3e:	485a      	ldr	r0, [pc, #360]	@ (800bca8 <appRunning+0x170>)
 800bb40:	f001 f988 	bl	800ce54 <getKeyState>
    commander_run(&motor1);
 800bb44:	4859      	ldr	r0, [pc, #356]	@ (800bcac <appRunning+0x174>)
 800bb46:	f000 f9f7 	bl	800bf38 <commander_run>
    if (++flashCnt >= 10)
 800bb4a:	4b59      	ldr	r3, [pc, #356]	@ (800bcb0 <appRunning+0x178>)
 800bb4c:	781b      	ldrb	r3, [r3, #0]
 800bb4e:	3301      	adds	r3, #1
 800bb50:	b2da      	uxtb	r2, r3
 800bb52:	4b57      	ldr	r3, [pc, #348]	@ (800bcb0 <appRunning+0x178>)
 800bb54:	701a      	strb	r2, [r3, #0]
 800bb56:	4b56      	ldr	r3, [pc, #344]	@ (800bcb0 <appRunning+0x178>)
 800bb58:	781b      	ldrb	r3, [r3, #0]
 800bb5a:	2b09      	cmp	r3, #9
 800bb5c:	d902      	bls.n	800bb64 <appRunning+0x2c>
        flashCnt = 0;
 800bb5e:	4b54      	ldr	r3, [pc, #336]	@ (800bcb0 <appRunning+0x178>)
 800bb60:	2200      	movs	r2, #0
 800bb62:	701a      	strb	r2, [r3, #0]

    led1On = 0;
 800bb64:	4b53      	ldr	r3, [pc, #332]	@ (800bcb4 <appRunning+0x17c>)
 800bb66:	2200      	movs	r2, #0
 800bb68:	701a      	strb	r2, [r3, #0]
    led2On = 0;
 800bb6a:	4b53      	ldr	r3, [pc, #332]	@ (800bcb8 <appRunning+0x180>)
 800bb6c:	2200      	movs	r2, #0
 800bb6e:	701a      	strb	r2, [r3, #0]

    uint32_t Vpoten, adc_vbus;
    float Vbus, goalVelocity;
    HAL_ADC_Start(&hadc1);
 800bb70:	4852      	ldr	r0, [pc, #328]	@ (800bcbc <appRunning+0x184>)
 800bb72:	f7f7 f9d9 	bl	8002f28 <HAL_ADC_Start>
    HAL_ADC_Start(&hadc2);
 800bb76:	4852      	ldr	r0, [pc, #328]	@ (800bcc0 <appRunning+0x188>)
 800bb78:	f7f7 f9d6 	bl	8002f28 <HAL_ADC_Start>
    Vpoten = HAL_ADC_GetValue(&hadc1);
 800bb7c:	484f      	ldr	r0, [pc, #316]	@ (800bcbc <appRunning+0x184>)
 800bb7e:	f7f7 fa8f 	bl	80030a0 <HAL_ADC_GetValue>
 800bb82:	6178      	str	r0, [r7, #20]

    goalVelocity = map(Vpoten, 0, 4095, -MAX_VELOCITY, MAX_VELOCITY);
 800bb84:	697b      	ldr	r3, [r7, #20]
 800bb86:	ee07 3a90 	vmov	s15, r3
 800bb8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb8e:	ed9f 2a4d 	vldr	s4, [pc, #308]	@ 800bcc4 <appRunning+0x18c>
 800bb92:	eddf 1a4d 	vldr	s3, [pc, #308]	@ 800bcc8 <appRunning+0x190>
 800bb96:	ed9f 1a4d 	vldr	s2, [pc, #308]	@ 800bccc <appRunning+0x194>
 800bb9a:	eddf 0a4d 	vldr	s1, [pc, #308]	@ 800bcd0 <appRunning+0x198>
 800bb9e:	eeb0 0a67 	vmov.f32	s0, s15
 800bba2:	f001 fd62 	bl	800d66a <map>
 800bba6:	ed87 0a04 	vstr	s0, [r7, #16]

    // goalVelocity = Vpoten / 4095.0f * MAX_VELOCITY;
    float goalTorqueV = map(Vpoten, 0, 4095, -UqMAX - 5, UqMAX + 5);
 800bbaa:	697b      	ldr	r3, [r7, #20]
 800bbac:	ee07 3a90 	vmov	s15, r3
 800bbb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbb4:	ed9f 2a47 	vldr	s4, [pc, #284]	@ 800bcd4 <appRunning+0x19c>
 800bbb8:	eddf 1a47 	vldr	s3, [pc, #284]	@ 800bcd8 <appRunning+0x1a0>
 800bbbc:	ed9f 1a43 	vldr	s2, [pc, #268]	@ 800bccc <appRunning+0x194>
 800bbc0:	eddf 0a43 	vldr	s1, [pc, #268]	@ 800bcd0 <appRunning+0x198>
 800bbc4:	eeb0 0a67 	vmov.f32	s0, s15
 800bbc8:	f001 fd4f 	bl	800d66a <map>
 800bbcc:	ed87 0a03 	vstr	s0, [r7, #12]
    float goalTorqueC = map(Vpoten, 0, 4095, -CURRENT_MAX, CURRENT_MAX);
 800bbd0:	697b      	ldr	r3, [r7, #20]
 800bbd2:	ee07 3a90 	vmov	s15, r3
 800bbd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbda:	eeb6 2a00 	vmov.f32	s4, #96	@ 0x3f000000  0.5
 800bbde:	eefe 1a00 	vmov.f32	s3, #224	@ 0xbf000000 -0.5
 800bbe2:	ed9f 1a3a 	vldr	s2, [pc, #232]	@ 800bccc <appRunning+0x194>
 800bbe6:	eddf 0a3a 	vldr	s1, [pc, #232]	@ 800bcd0 <appRunning+0x198>
 800bbea:	eeb0 0a67 	vmov.f32	s0, s15
 800bbee:	f001 fd3c 	bl	800d66a <map>
 800bbf2:	ed87 0a02 	vstr	s0, [r7, #8]

    adc_vbus = HAL_ADC_GetValue(&hadc2);
 800bbf6:	4832      	ldr	r0, [pc, #200]	@ (800bcc0 <appRunning+0x188>)
 800bbf8:	f7f7 fa52 	bl	80030a0 <HAL_ADC_GetValue>
 800bbfc:	6078      	str	r0, [r7, #4]

    Vbus = adc_vbus * 3.3f / 4096 * 26;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	ee07 3a90 	vmov	s15, r3
 800bc04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc08:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800bcdc <appRunning+0x1a4>
 800bc0c:	ee27 7a87 	vmul.f32	s14, s15, s14
 800bc10:	eddf 6a33 	vldr	s13, [pc, #204]	@ 800bce0 <appRunning+0x1a8>
 800bc14:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800bc18:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 800bc1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bc20:	edc7 7a00 	vstr	s15, [r7]

    if (motor1.controlType == VELOCITY || motor1.controlType == VELOCITY_OPEN_LOOP)
 800bc24:	4b21      	ldr	r3, [pc, #132]	@ (800bcac <appRunning+0x174>)
 800bc26:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800bc2a:	2b02      	cmp	r3, #2
 800bc2c:	d004      	beq.n	800bc38 <appRunning+0x100>
 800bc2e:	4b1f      	ldr	r3, [pc, #124]	@ (800bcac <appRunning+0x174>)
 800bc30:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800bc34:	2b01      	cmp	r3, #1
 800bc36:	d103      	bne.n	800bc40 <appRunning+0x108>
    {
        motor1.target = goalVelocity;
 800bc38:	4a1c      	ldr	r2, [pc, #112]	@ (800bcac <appRunning+0x174>)
 800bc3a:	693b      	ldr	r3, [r7, #16]
 800bc3c:	6313      	str	r3, [r2, #48]	@ 0x30
 800bc3e:	e01f      	b.n	800bc80 <appRunning+0x148>
    }

    else if (motor1.controlType == ANGLE)
 800bc40:	4b1a      	ldr	r3, [pc, #104]	@ (800bcac <appRunning+0x174>)
 800bc42:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800bc46:	2b03      	cmp	r3, #3
 800bc48:	d109      	bne.n	800bc5e <appRunning+0x126>
    {
        motor1.target = goalVelocity / 3;
 800bc4a:	ed97 7a04 	vldr	s14, [r7, #16]
 800bc4e:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 800bc52:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800bc56:	4b15      	ldr	r3, [pc, #84]	@ (800bcac <appRunning+0x174>)
 800bc58:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
 800bc5c:	e010      	b.n	800bc80 <appRunning+0x148>
    }
    else if (motor1.controlType == TORQUE)
 800bc5e:	4b13      	ldr	r3, [pc, #76]	@ (800bcac <appRunning+0x174>)
 800bc60:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d10b      	bne.n	800bc80 <appRunning+0x148>
    {
        if (motor1.torqueType == VOLTAGE)
 800bc68:	4b10      	ldr	r3, [pc, #64]	@ (800bcac <appRunning+0x174>)
 800bc6a:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d103      	bne.n	800bc7a <appRunning+0x142>
            motor1.target = goalTorqueV;
 800bc72:	4a0e      	ldr	r2, [pc, #56]	@ (800bcac <appRunning+0x174>)
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	6313      	str	r3, [r2, #48]	@ 0x30
 800bc78:	e002      	b.n	800bc80 <appRunning+0x148>
        else
            motor1.target = goalTorqueC;
 800bc7a:	4a0c      	ldr	r2, [pc, #48]	@ (800bcac <appRunning+0x174>)
 800bc7c:	68bb      	ldr	r3, [r7, #8]
 800bc7e:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    switch (devState)
 800bc80:	4b18      	ldr	r3, [pc, #96]	@ (800bce4 <appRunning+0x1ac>)
 800bc82:	781b      	ldrb	r3, [r3, #0]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d002      	beq.n	800bc8e <appRunning+0x156>
 800bc88:	2b01      	cmp	r3, #1
 800bc8a:	d003      	beq.n	800bc94 <appRunning+0x15c>
 800bc8c:	e005      	b.n	800bc9a <appRunning+0x162>
    {
    case STANDBY:
        standingBy();
 800bc8e:	f000 f82b 	bl	800bce8 <standingBy>
        break;
 800bc92:	e002      	b.n	800bc9a <appRunning+0x162>

    case WORK:
        working();
 800bc94:	f000 f84c 	bl	800bd30 <working>
        break;
 800bc98:	bf00      	nop
    }

    LED_drive();
 800bc9a:	f001 f919 	bl	800ced0 <LED_drive>
}
 800bc9e:	bf00      	nop
 800bca0:	3718      	adds	r7, #24
 800bca2:	46bd      	mov	sp, r7
 800bca4:	bd80      	pop	{r7, pc}
 800bca6:	bf00      	nop
 800bca8:	200006f9 	.word	0x200006f9
 800bcac:	200006fc 	.word	0x200006fc
 800bcb0:	200006fa 	.word	0x200006fa
 800bcb4:	20000944 	.word	0x20000944
 800bcb8:	20000945 	.word	0x20000945
 800bcbc:	20000274 	.word	0x20000274
 800bcc0:	200002e0 	.word	0x200002e0
 800bcc4:	43960000 	.word	0x43960000
 800bcc8:	c3960000 	.word	0xc3960000
 800bccc:	457ff000 	.word	0x457ff000
 800bcd0:	00000000 	.word	0x00000000
 800bcd4:	413ed9ec 	.word	0x413ed9ec
 800bcd8:	c13ed9ec 	.word	0xc13ed9ec
 800bcdc:	40533333 	.word	0x40533333
 800bce0:	45800000 	.word	0x45800000
 800bce4:	200006f8 	.word	0x200006f8

0800bce8 <standingBy>:
static void standingBy()
{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	af00      	add	r7, sp, #0
    led1On = 1;
 800bcec:	4b0b      	ldr	r3, [pc, #44]	@ (800bd1c <standingBy+0x34>)
 800bcee:	2201      	movs	r2, #1
 800bcf0:	701a      	strb	r2, [r3, #0]

    if (keyState == USER3_SHORT)
 800bcf2:	4b0b      	ldr	r3, [pc, #44]	@ (800bd20 <standingBy+0x38>)
 800bcf4:	781b      	ldrb	r3, [r3, #0]
 800bcf6:	2b03      	cmp	r3, #3
 800bcf8:	d10d      	bne.n	800bd16 <standingBy+0x2e>
    {
        WORK_INIT;
 800bcfa:	4b0a      	ldr	r3, [pc, #40]	@ (800bd24 <standingBy+0x3c>)
 800bcfc:	2201      	movs	r2, #1
 800bcfe:	701a      	strb	r2, [r3, #0]
 800bd00:	4b09      	ldr	r3, [pc, #36]	@ (800bd28 <standingBy+0x40>)
 800bd02:	2200      	movs	r2, #0
 800bd04:	701a      	strb	r2, [r3, #0]
 800bd06:	4b09      	ldr	r3, [pc, #36]	@ (800bd2c <standingBy+0x44>)
 800bd08:	2202      	movs	r2, #2
 800bd0a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 800bd0e:	4b07      	ldr	r3, [pc, #28]	@ (800bd2c <standingBy+0x44>)
 800bd10:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800bd14:	4798      	blx	r3
    }
}
 800bd16:	bf00      	nop
 800bd18:	bd80      	pop	{r7, pc}
 800bd1a:	bf00      	nop
 800bd1c:	20000944 	.word	0x20000944
 800bd20:	200006f9 	.word	0x200006f9
 800bd24:	200006f8 	.word	0x200006f8
 800bd28:	200006fa 	.word	0x200006fa
 800bd2c:	200006fc 	.word	0x200006fc

0800bd30 <working>:

static void working(void)
{
 800bd30:	b580      	push	{r7, lr}
 800bd32:	af00      	add	r7, sp, #0
    if (flashCnt < 5)
 800bd34:	4b0b      	ldr	r3, [pc, #44]	@ (800bd64 <working+0x34>)
 800bd36:	781b      	ldrb	r3, [r3, #0]
 800bd38:	2b04      	cmp	r3, #4
 800bd3a:	d802      	bhi.n	800bd42 <working+0x12>
        led2On = 1;
 800bd3c:	4b0a      	ldr	r3, [pc, #40]	@ (800bd68 <working+0x38>)
 800bd3e:	2201      	movs	r2, #1
 800bd40:	701a      	strb	r2, [r3, #0]

    if (keyState == USER3_SHORT)
 800bd42:	4b0a      	ldr	r3, [pc, #40]	@ (800bd6c <working+0x3c>)
 800bd44:	781b      	ldrb	r3, [r3, #0]
 800bd46:	2b03      	cmp	r3, #3
 800bd48:	d109      	bne.n	800bd5e <working+0x2e>
    {
        STANDBY_INIT;
 800bd4a:	4b09      	ldr	r3, [pc, #36]	@ (800bd70 <working+0x40>)
 800bd4c:	2200      	movs	r2, #0
 800bd4e:	701a      	strb	r2, [r3, #0]
 800bd50:	4b04      	ldr	r3, [pc, #16]	@ (800bd64 <working+0x34>)
 800bd52:	2200      	movs	r2, #0
 800bd54:	701a      	strb	r2, [r3, #0]
 800bd56:	4b07      	ldr	r3, [pc, #28]	@ (800bd74 <working+0x44>)
 800bd58:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800bd5c:	4798      	blx	r3
        //     {
        //         bldcMotor.focTarget = 23;
        //     }
        // }
    }
}
 800bd5e:	bf00      	nop
 800bd60:	bd80      	pop	{r7, pc}
 800bd62:	bf00      	nop
 800bd64:	200006fa 	.word	0x200006fa
 800bd68:	20000945 	.word	0x20000945
 800bd6c:	200006f9 	.word	0x200006f9
 800bd70:	200006f8 	.word	0x200006f8
 800bd74:	200006fc 	.word	0x200006fc

0800bd78 <txDataProcess>:

void txDataProcess()
{
 800bd78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bd7c:	b092      	sub	sp, #72	@ 0x48
 800bd7e:	af0c      	add	r7, sp, #48	@ 0x30
    sprintf(txBuffer, "target:%f fullAngle:%.2f, velocity:%.2f, Uq:%.2f, Ud:%.2f, Iq:%.2f, Id:%.2f\n", motor1.target, motor1.magEncoder.fullAngle, motor1.magEncoder.velocity, motor1.Uq, motor1.Ud, motor1.Iq, motor1.Id);
 800bd80:	4b26      	ldr	r3, [pc, #152]	@ (800be1c <txDataProcess+0xa4>)
 800bd82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bd84:	4618      	mov	r0, r3
 800bd86:	f7f4 fc07 	bl	8000598 <__aeabi_f2d>
 800bd8a:	e9c7 0104 	strd	r0, r1, [r7, #16]
 800bd8e:	4b23      	ldr	r3, [pc, #140]	@ (800be1c <txDataProcess+0xa4>)
 800bd90:	695b      	ldr	r3, [r3, #20]
 800bd92:	4618      	mov	r0, r3
 800bd94:	f7f4 fc00 	bl	8000598 <__aeabi_f2d>
 800bd98:	4680      	mov	r8, r0
 800bd9a:	4689      	mov	r9, r1
 800bd9c:	4b1f      	ldr	r3, [pc, #124]	@ (800be1c <txDataProcess+0xa4>)
 800bd9e:	699b      	ldr	r3, [r3, #24]
 800bda0:	4618      	mov	r0, r3
 800bda2:	f7f4 fbf9 	bl	8000598 <__aeabi_f2d>
 800bda6:	4682      	mov	sl, r0
 800bda8:	468b      	mov	fp, r1
 800bdaa:	4b1c      	ldr	r3, [pc, #112]	@ (800be1c <txDataProcess+0xa4>)
 800bdac:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	f7f4 fbf1 	bl	8000598 <__aeabi_f2d>
 800bdb6:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800bdba:	4b18      	ldr	r3, [pc, #96]	@ (800be1c <txDataProcess+0xa4>)
 800bdbc:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	f7f4 fbe9 	bl	8000598 <__aeabi_f2d>
 800bdc6:	e9c7 0100 	strd	r0, r1, [r7]
 800bdca:	4b14      	ldr	r3, [pc, #80]	@ (800be1c <txDataProcess+0xa4>)
 800bdcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bdce:	4618      	mov	r0, r3
 800bdd0:	f7f4 fbe2 	bl	8000598 <__aeabi_f2d>
 800bdd4:	4604      	mov	r4, r0
 800bdd6:	460d      	mov	r5, r1
 800bdd8:	4b10      	ldr	r3, [pc, #64]	@ (800be1c <txDataProcess+0xa4>)
 800bdda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bddc:	4618      	mov	r0, r3
 800bdde:	f7f4 fbdb 	bl	8000598 <__aeabi_f2d>
 800bde2:	4602      	mov	r2, r0
 800bde4:	460b      	mov	r3, r1
 800bde6:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 800bdea:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800bdee:	ed97 7b00 	vldr	d7, [r7]
 800bdf2:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bdf6:	ed97 7b02 	vldr	d7, [r7, #8]
 800bdfa:	ed8d 7b04 	vstr	d7, [sp, #16]
 800bdfe:	e9cd ab02 	strd	sl, fp, [sp, #8]
 800be02:	e9cd 8900 	strd	r8, r9, [sp]
 800be06:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800be0a:	4905      	ldr	r1, [pc, #20]	@ (800be20 <txDataProcess+0xa8>)
 800be0c:	4805      	ldr	r0, [pc, #20]	@ (800be24 <txDataProcess+0xac>)
 800be0e:	f003 fc17 	bl	800f640 <siprintf>
    // sprintf(txBuffer, "target:%f Uq:%f\n", motor1.target, motor1.Uq);
    // sprintf(txBuffer, "offset_ia:%f offset_ib:%f, Ia:%f, Ib:%f\n", motor1.offset_ia, motor1.offset_ib, motor1.Ia, motor1.Ib);
}
 800be12:	bf00      	nop
 800be14:	3718      	adds	r7, #24
 800be16:	46bd      	mov	sp, r7
 800be18:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800be1c:	200006fc 	.word	0x200006fc
 800be20:	08012570 	.word	0x08012570
 800be24:	20000838 	.word	0x20000838

0800be28 <HAL_ADCEx_InjectedConvCpltCallback>:

void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b082      	sub	sp, #8
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(TEST_GPIO_Port, TEST_Pin, GPIO_PIN_SET);
 800be30:	2201      	movs	r2, #1
 800be32:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800be36:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800be3a:	f7fa fcdb 	bl	80067f4 <HAL_GPIO_WritePin>
    if (hadc == &hadc1)
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	4a0d      	ldr	r2, [pc, #52]	@ (800be78 <HAL_ADCEx_InjectedConvCpltCallback+0x50>)
 800be42:	4293      	cmp	r3, r2
 800be44:	d10d      	bne.n	800be62 <HAL_ADCEx_InjectedConvCpltCallback+0x3a>
    {

        foc(&motor1, hadc1.Instance->JDR1, hadc2.Instance->JDR1);
 800be46:	4b0c      	ldr	r3, [pc, #48]	@ (800be78 <HAL_ADCEx_InjectedConvCpltCallback+0x50>)
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	f8d3 1080 	ldr.w	r1, [r3, #128]	@ 0x80
 800be4e:	4b0b      	ldr	r3, [pc, #44]	@ (800be7c <HAL_ADCEx_InjectedConvCpltCallback+0x54>)
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800be56:	461a      	mov	r2, r3
 800be58:	4809      	ldr	r0, [pc, #36]	@ (800be80 <HAL_ADCEx_InjectedConvCpltCallback+0x58>)
 800be5a:	f000 fc83 	bl	800c764 <foc>
        // svpwm_test(&motor1, 4.0f, 0.07f);
        dealPer100us();
 800be5e:	f001 fc33 	bl	800d6c8 <dealPer100us>

        memcpy(tempData, (uint8_t *)&load_data, sizeof(load_data));
        HAL_UART_Transmit_DMA(&huart3, (uint8_t *)tempData, 8 * 4);
#endif
    }
    HAL_GPIO_WritePin(TEST_GPIO_Port, TEST_Pin, GPIO_PIN_RESET);
 800be62:	2200      	movs	r2, #0
 800be64:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800be68:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800be6c:	f7fa fcc2 	bl	80067f4 <HAL_GPIO_WritePin>
}
 800be70:	bf00      	nop
 800be72:	3708      	adds	r7, #8
 800be74:	46bd      	mov	sp, r7
 800be76:	bd80      	pop	{r7, pc}
 800be78:	20000274 	.word	0x20000274
 800be7c:	200002e0 	.word	0x200002e0
 800be80:	200006fc 	.word	0x200006fc

0800be84 <HAL_UARTEx_RxEventCallback>:
bool toProcessData;
uint8_t aRxBuffer;
float comm1, comm2, comm3, comm4, comm5, comm6, comm7, comm8, comm9, comm10, comm11;

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800be84:	b580      	push	{r7, lr}
 800be86:	b082      	sub	sp, #8
 800be88:	af00      	add	r7, sp, #0
 800be8a:	6078      	str	r0, [r7, #4]
 800be8c:	460b      	mov	r3, r1
 800be8e:	807b      	strh	r3, [r7, #2]
  if (huart == &huart3)
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	4a07      	ldr	r2, [pc, #28]	@ (800beb0 <HAL_UARTEx_RxEventCallback+0x2c>)
 800be94:	4293      	cmp	r3, r2
 800be96:	d107      	bne.n	800bea8 <HAL_UARTEx_RxEventCallback+0x24>
  {
    // HAL_UART_Transmit_DMA(&huart3, rxBuffer, Size);
    HAL_UARTEx_ReceiveToIdle_DMA(&huart3, rxBuffer, sizeof(rxBuffer));
 800be98:	2264      	movs	r2, #100	@ 0x64
 800be9a:	4906      	ldr	r1, [pc, #24]	@ (800beb4 <HAL_UARTEx_RxEventCallback+0x30>)
 800be9c:	4804      	ldr	r0, [pc, #16]	@ (800beb0 <HAL_UARTEx_RxEventCallback+0x2c>)
 800be9e:	f7ff fc28 	bl	800b6f2 <HAL_UARTEx_ReceiveToIdle_DMA>
    toProcessData = 1;
 800bea2:	4b05      	ldr	r3, [pc, #20]	@ (800beb8 <HAL_UARTEx_RxEventCallback+0x34>)
 800bea4:	2201      	movs	r2, #1
 800bea6:	701a      	strb	r2, [r3, #0]
  }
}
 800bea8:	bf00      	nop
 800beaa:	3708      	adds	r7, #8
 800beac:	46bd      	mov	sp, r7
 800beae:	bd80      	pop	{r7, pc}
 800beb0:	200005a0 	.word	0x200005a0
 800beb4:	2000089c 	.word	0x2000089c
 800beb8:	20000900 	.word	0x20000900

0800bebc <FOC_log>:
  HAL_UART_Transmit_DMA(&huart3, (uint8_t *)strBuf, strlen(strBuf));
}

// DMA模式
void FOC_log(const char *format, ...)
{
 800bebc:	b40f      	push	{r0, r1, r2, r3}
 800bebe:	b580      	push	{r7, lr}
 800bec0:	b0c2      	sub	sp, #264	@ 0x108
 800bec2:	af00      	add	r7, sp, #0
  va_list args;           // 定义参数列表变量
  va_start(args, format); // 从format位置开始接收参数表，放在arg里面
 800bec4:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 800bec8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

  char strBuf[256];               // 定义输出的字符串
  vsprintf(strBuf, format, args); // 使用vsprintf将格式化的数据写入缓冲区
 800becc:	1d3b      	adds	r3, r7, #4
 800bece:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 800bed2:	f8d7 1110 	ldr.w	r1, [r7, #272]	@ 0x110
 800bed6:	4618      	mov	r0, r3
 800bed8:	f003 fc2c 	bl	800f734 <vsiprintf>
  va_end(args);                   // 结束可变参数的使用

  // 等待上次的数据发送完成，避免新的数据覆盖正在传输的数据，导致混乱
  while (HAL_UART_GetState(&huart3) == HAL_UART_STATE_BUSY_TX)
 800bedc:	bf00      	nop
 800bede:	480d      	ldr	r0, [pc, #52]	@ (800bf14 <FOC_log+0x58>)
 800bee0:	f7fe fbba 	bl	800a658 <HAL_UART_GetState>
 800bee4:	4603      	mov	r3, r0
 800bee6:	2b21      	cmp	r3, #33	@ 0x21
 800bee8:	d0f9      	beq.n	800bede <FOC_log+0x22>
  {
    // Wait for DMA transfer to complete
  }
  HAL_UART_Transmit(&huart3, (uint8_t *)strBuf, strlen(strBuf), 1000);
 800beea:	1d3b      	adds	r3, r7, #4
 800beec:	4618      	mov	r0, r3
 800beee:	f7f4 f9e7 	bl	80002c0 <strlen>
 800bef2:	4603      	mov	r3, r0
 800bef4:	b29a      	uxth	r2, r3
 800bef6:	1d39      	adds	r1, r7, #4
 800bef8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800befc:	4805      	ldr	r0, [pc, #20]	@ (800bf14 <FOC_log+0x58>)
 800befe:	f7fd ff46 	bl	8009d8e <HAL_UART_Transmit>
}
 800bf02:	bf00      	nop
 800bf04:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800bf08:	46bd      	mov	sp, r7
 800bf0a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bf0e:	b004      	add	sp, #16
 800bf10:	4770      	bx	lr
 800bf12:	bf00      	nop
 800bf14:	200005a0 	.word	0x200005a0

0800bf18 <printLog>:

void printLog()
{
 800bf18:	b580      	push	{r7, lr}
 800bf1a:	af00      	add	r7, sp, #0

#if SHOW_WAVE == 0
  txDataProcess();
 800bf1c:	f7ff ff2c 	bl	800bd78 <txDataProcess>
  HAL_UART_Transmit_DMA(&huart3, (uint8_t *)txBuffer, sizeof(txBuffer));
 800bf20:	2264      	movs	r2, #100	@ 0x64
 800bf22:	4903      	ldr	r1, [pc, #12]	@ (800bf30 <printLog+0x18>)
 800bf24:	4803      	ldr	r0, [pc, #12]	@ (800bf34 <printLog+0x1c>)
 800bf26:	f7fd ffc1 	bl	8009eac <HAL_UART_Transmit_DMA>
#endif
}
 800bf2a:	bf00      	nop
 800bf2c:	bd80      	pop	{r7, pc}
 800bf2e:	bf00      	nop
 800bf30:	20000838 	.word	0x20000838
 800bf34:	200005a0 	.word	0x200005a0

0800bf38 <commander_run>:

void commander_run(FocMotor *motor)
{
 800bf38:	b580      	push	{r7, lr}
 800bf3a:	b082      	sub	sp, #8
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	6078      	str	r0, [r7, #4]

  if (toProcessData == 1)
 800bf40:	4b1c      	ldr	r3, [pc, #112]	@ (800bfb4 <commander_run+0x7c>)
 800bf42:	781b      	ldrb	r3, [r3, #0]
 800bf44:	2b01      	cmp	r3, #1
 800bf46:	d131      	bne.n	800bfac <commander_run+0x74>
  {
    // memset(txBuffer, '\0', sizeof(txBuffer));

    switch (rxBuffer[0])
 800bf48:	4b1b      	ldr	r3, [pc, #108]	@ (800bfb8 <commander_run+0x80>)
 800bf4a:	781b      	ldrb	r3, [r3, #0]
 800bf4c:	2b48      	cmp	r3, #72	@ 0x48
 800bf4e:	d002      	beq.n	800bf56 <commander_run+0x1e>
 800bf50:	2b54      	cmp	r3, #84	@ 0x54
 800bf52:	d00a      	beq.n	800bf6a <commander_run+0x32>
 800bf54:	e027      	b.n	800bfa6 <commander_run+0x6e>
    {
    case 'H':
      // sprintf(sndBuff, "Hello World!\r\n");
      // HAL_UART_Transmit_DMA(&huart3, (uint8_t *)sndBuff, sizeof(sndBuff));
      sprintf(txBuffer, "Hello World!\r\n");
 800bf56:	4919      	ldr	r1, [pc, #100]	@ (800bfbc <commander_run+0x84>)
 800bf58:	4819      	ldr	r0, [pc, #100]	@ (800bfc0 <commander_run+0x88>)
 800bf5a:	f003 fb71 	bl	800f640 <siprintf>
      HAL_UART_Transmit_DMA(&huart3, (uint8_t *)txBuffer, sizeof(txBuffer));
 800bf5e:	2264      	movs	r2, #100	@ 0x64
 800bf60:	4917      	ldr	r1, [pc, #92]	@ (800bfc0 <commander_run+0x88>)
 800bf62:	4818      	ldr	r0, [pc, #96]	@ (800bfc4 <commander_run+0x8c>)
 800bf64:	f7fd ffa2 	bl	8009eac <HAL_UART_Transmit_DMA>
      break;
 800bf68:	e01d      	b.n	800bfa6 <commander_run+0x6e>
    case 'T': // T6.28

      motor->target = atof((const char *)(rxBuffer + 1));
 800bf6a:	4b17      	ldr	r3, [pc, #92]	@ (800bfc8 <commander_run+0x90>)
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	f001 fe1f 	bl	800dbb0 <atof>
 800bf72:	ec53 2b10 	vmov	r2, r3, d0
 800bf76:	4610      	mov	r0, r2
 800bf78:	4619      	mov	r1, r3
 800bf7a:	f7f4 fe5d 	bl	8000c38 <__aeabi_d2f>
 800bf7e:	4602      	mov	r2, r0
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	631a      	str	r2, [r3, #48]	@ 0x30
      sprintf(txBuffer, "Target=%.2f\r\n", motor->target);
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf88:	4618      	mov	r0, r3
 800bf8a:	f7f4 fb05 	bl	8000598 <__aeabi_f2d>
 800bf8e:	4602      	mov	r2, r0
 800bf90:	460b      	mov	r3, r1
 800bf92:	490e      	ldr	r1, [pc, #56]	@ (800bfcc <commander_run+0x94>)
 800bf94:	480a      	ldr	r0, [pc, #40]	@ (800bfc0 <commander_run+0x88>)
 800bf96:	f003 fb53 	bl	800f640 <siprintf>
      HAL_UART_Transmit_DMA(&huart3, (uint8_t *)txBuffer, sizeof(txBuffer));
 800bf9a:	2264      	movs	r2, #100	@ 0x64
 800bf9c:	4908      	ldr	r1, [pc, #32]	@ (800bfc0 <commander_run+0x88>)
 800bf9e:	4809      	ldr	r0, [pc, #36]	@ (800bfc4 <commander_run+0x8c>)
 800bfa0:	f7fd ff84 	bl	8009eac <HAL_UART_Transmit_DMA>
      // printf("%s", sndBuff);
      // HAL_UART_Transmit_DMA(&huart3, (uint8_t *)sndBuff, sizeof(sndBuff));
      break;
 800bfa4:	bf00      	nop
      // case 'A': // A
      //   sprintf(sndBuff, "Ang=%.2f\r\n", shaftAngle);
      //   printf("%s", sndBuff);
      //   break;
    }
    toProcessData = 0;
 800bfa6:	4b03      	ldr	r3, [pc, #12]	@ (800bfb4 <commander_run+0x7c>)
 800bfa8:	2200      	movs	r2, #0
 800bfaa:	701a      	strb	r2, [r3, #0]
  }
}
 800bfac:	bf00      	nop
 800bfae:	3708      	adds	r7, #8
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	bd80      	pop	{r7, pc}
 800bfb4:	20000900 	.word	0x20000900
 800bfb8:	2000089c 	.word	0x2000089c
 800bfbc:	080125c0 	.word	0x080125c0
 800bfc0:	20000838 	.word	0x20000838
 800bfc4:	200005a0 	.word	0x200005a0
 800bfc8:	2000089d 	.word	0x2000089d
 800bfcc:	080125d0 	.word	0x080125d0

0800bfd0 <getCurrentOffsets>:
#include "current.h"
#include "math_utils.h"

// Function finding zero offsets of the ADC
void getCurrentOffsets(FocMotor *motor, uint32_t adc_a, uint32_t adc_b, uint32_t rounds)
{
 800bfd0:	b5b0      	push	{r4, r5, r7, lr}
 800bfd2:	b086      	sub	sp, #24
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	60f8      	str	r0, [r7, #12]
 800bfd8:	60b9      	str	r1, [r7, #8]
 800bfda:	607a      	str	r2, [r7, #4]
 800bfdc:	603b      	str	r3, [r7, #0]
    // find adc offset = zero current voltage
    motor->offset_ia = 0;
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	f04f 0200 	mov.w	r2, #0
 800bfe4:	641a      	str	r2, [r3, #64]	@ 0x40
    motor->offset_ib = 0;
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	f04f 0200 	mov.w	r2, #0
 800bfec:	645a      	str	r2, [r3, #68]	@ 0x44
    // read the adc voltage  times ( arbitrary number )
    for (int i = 0; i < rounds; i++)
 800bfee:	2300      	movs	r3, #0
 800bff0:	617b      	str	r3, [r7, #20]
 800bff2:	e076      	b.n	800c0e2 <getCurrentOffsets+0x112>
    {
        motor->offset_ia += ADC_2_CURRENT(adc_a);
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bff8:	4618      	mov	r0, r3
 800bffa:	f7f4 facd 	bl	8000598 <__aeabi_f2d>
 800bffe:	4604      	mov	r4, r0
 800c000:	460d      	mov	r5, r1
 800c002:	68bb      	ldr	r3, [r7, #8]
 800c004:	ee07 3a90 	vmov	s15, r3
 800c008:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c00c:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 800c168 <getCurrentOffsets+0x198>
 800c010:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c014:	ee17 0a90 	vmov	r0, s15
 800c018:	f7f4 fabe 	bl	8000598 <__aeabi_f2d>
 800c01c:	a34c      	add	r3, pc, #304	@ (adr r3, 800c150 <getCurrentOffsets+0x180>)
 800c01e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c022:	f7f4 fc3b 	bl	800089c <__aeabi_ddiv>
 800c026:	4602      	mov	r2, r0
 800c028:	460b      	mov	r3, r1
 800c02a:	4610      	mov	r0, r2
 800c02c:	4619      	mov	r1, r3
 800c02e:	a34a      	add	r3, pc, #296	@ (adr r3, 800c158 <getCurrentOffsets+0x188>)
 800c030:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c034:	f7f4 fc32 	bl	800089c <__aeabi_ddiv>
 800c038:	4602      	mov	r2, r0
 800c03a:	460b      	mov	r3, r1
 800c03c:	4610      	mov	r0, r2
 800c03e:	4619      	mov	r1, r3
 800c040:	a347      	add	r3, pc, #284	@ (adr r3, 800c160 <getCurrentOffsets+0x190>)
 800c042:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c046:	f7f4 fc29 	bl	800089c <__aeabi_ddiv>
 800c04a:	4602      	mov	r2, r0
 800c04c:	460b      	mov	r3, r1
 800c04e:	4620      	mov	r0, r4
 800c050:	4629      	mov	r1, r5
 800c052:	f7f4 f943 	bl	80002dc <__adddf3>
 800c056:	4602      	mov	r2, r0
 800c058:	460b      	mov	r3, r1
 800c05a:	4610      	mov	r0, r2
 800c05c:	4619      	mov	r1, r3
 800c05e:	f7f4 fdeb 	bl	8000c38 <__aeabi_d2f>
 800c062:	4602      	mov	r2, r0
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	641a      	str	r2, [r3, #64]	@ 0x40
        motor->offset_ib += ADC_2_CURRENT(adc_b);
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c06c:	4618      	mov	r0, r3
 800c06e:	f7f4 fa93 	bl	8000598 <__aeabi_f2d>
 800c072:	4604      	mov	r4, r0
 800c074:	460d      	mov	r5, r1
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	ee07 3a90 	vmov	s15, r3
 800c07c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c080:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 800c168 <getCurrentOffsets+0x198>
 800c084:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c088:	ee17 0a90 	vmov	r0, s15
 800c08c:	f7f4 fa84 	bl	8000598 <__aeabi_f2d>
 800c090:	a32f      	add	r3, pc, #188	@ (adr r3, 800c150 <getCurrentOffsets+0x180>)
 800c092:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c096:	f7f4 fc01 	bl	800089c <__aeabi_ddiv>
 800c09a:	4602      	mov	r2, r0
 800c09c:	460b      	mov	r3, r1
 800c09e:	4610      	mov	r0, r2
 800c0a0:	4619      	mov	r1, r3
 800c0a2:	a32d      	add	r3, pc, #180	@ (adr r3, 800c158 <getCurrentOffsets+0x188>)
 800c0a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0a8:	f7f4 fbf8 	bl	800089c <__aeabi_ddiv>
 800c0ac:	4602      	mov	r2, r0
 800c0ae:	460b      	mov	r3, r1
 800c0b0:	4610      	mov	r0, r2
 800c0b2:	4619      	mov	r1, r3
 800c0b4:	a32a      	add	r3, pc, #168	@ (adr r3, 800c160 <getCurrentOffsets+0x190>)
 800c0b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ba:	f7f4 fbef 	bl	800089c <__aeabi_ddiv>
 800c0be:	4602      	mov	r2, r0
 800c0c0:	460b      	mov	r3, r1
 800c0c2:	4620      	mov	r0, r4
 800c0c4:	4629      	mov	r1, r5
 800c0c6:	f7f4 f909 	bl	80002dc <__adddf3>
 800c0ca:	4602      	mov	r2, r0
 800c0cc:	460b      	mov	r3, r1
 800c0ce:	4610      	mov	r0, r2
 800c0d0:	4619      	mov	r1, r3
 800c0d2:	f7f4 fdb1 	bl	8000c38 <__aeabi_d2f>
 800c0d6:	4602      	mov	r2, r0
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	645a      	str	r2, [r3, #68]	@ 0x44
    for (int i = 0; i < rounds; i++)
 800c0dc:	697b      	ldr	r3, [r7, #20]
 800c0de:	3301      	adds	r3, #1
 800c0e0:	617b      	str	r3, [r7, #20]
 800c0e2:	697b      	ldr	r3, [r7, #20]
 800c0e4:	683a      	ldr	r2, [r7, #0]
 800c0e6:	429a      	cmp	r2, r3
 800c0e8:	d884      	bhi.n	800bff4 <getCurrentOffsets+0x24>
    }
    // calculate the mean offsets
    motor->offset_ia = motor->offset_ia / rounds;
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	edd3 6a10 	vldr	s13, [r3, #64]	@ 0x40
 800c0f0:	683b      	ldr	r3, [r7, #0]
 800c0f2:	ee07 3a90 	vmov	s15, r3
 800c0f6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c0fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
    motor->offset_ib = motor->offset_ib / rounds;
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	edd3 6a11 	vldr	s13, [r3, #68]	@ 0x44
 800c10a:	683b      	ldr	r3, [r7, #0]
 800c10c:	ee07 3a90 	vmov	s15, r3
 800c110:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c114:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44

    FOC_log("[offset_ia]:%f  [offset_ib]:%f\r\n", motor->offset_ia, motor->offset_ib);
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c122:	4618      	mov	r0, r3
 800c124:	f7f4 fa38 	bl	8000598 <__aeabi_f2d>
 800c128:	4604      	mov	r4, r0
 800c12a:	460d      	mov	r5, r1
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c130:	4618      	mov	r0, r3
 800c132:	f7f4 fa31 	bl	8000598 <__aeabi_f2d>
 800c136:	4602      	mov	r2, r0
 800c138:	460b      	mov	r3, r1
 800c13a:	ec43 2b11 	vmov	d1, r2, r3
 800c13e:	ec45 4b10 	vmov	d0, r4, r5
 800c142:	480a      	ldr	r0, [pc, #40]	@ (800c16c <getCurrentOffsets+0x19c>)
 800c144:	f7ff feba 	bl	800bebc <FOC_log>
}
 800c148:	bf00      	nop
 800c14a:	3718      	adds	r7, #24
 800c14c:	46bd      	mov	sp, r7
 800c14e:	bdb0      	pop	{r4, r5, r7, pc}
 800c150:	00000000 	.word	0x00000000
 800c154:	40affe00 	.word	0x40affe00
 800c158:	40000000 	.word	0x40000000
 800c15c:	3f747ae1 	.word	0x3f747ae1
 800c160:	a0000000 	.word	0xa0000000
 800c164:	401d554c 	.word	0x401d554c
 800c168:	40533333 	.word	0x40533333
 800c16c:	080125e0 	.word	0x080125e0

0800c170 <getPhaseCurrents>:

// read all three phase currents (if possible 2 or 3)
void getPhaseCurrents(FocMotor *motor, uint32_t adc_a, uint32_t adc_b)
{
 800c170:	b5b0      	push	{r4, r5, r7, lr}
 800c172:	b084      	sub	sp, #16
 800c174:	af00      	add	r7, sp, #0
 800c176:	60f8      	str	r0, [r7, #12]
 800c178:	60b9      	str	r1, [r7, #8]
 800c17a:	607a      	str	r2, [r7, #4]
    motor->Ia = ADC_2_CURRENT(adc_a) - motor->offset_ia; // amps
 800c17c:	68bb      	ldr	r3, [r7, #8]
 800c17e:	ee07 3a90 	vmov	s15, r3
 800c182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c186:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 800c290 <getPhaseCurrents+0x120>
 800c18a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c18e:	ee17 0a90 	vmov	r0, s15
 800c192:	f7f4 fa01 	bl	8000598 <__aeabi_f2d>
 800c196:	a338      	add	r3, pc, #224	@ (adr r3, 800c278 <getPhaseCurrents+0x108>)
 800c198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c19c:	f7f4 fb7e 	bl	800089c <__aeabi_ddiv>
 800c1a0:	4602      	mov	r2, r0
 800c1a2:	460b      	mov	r3, r1
 800c1a4:	4610      	mov	r0, r2
 800c1a6:	4619      	mov	r1, r3
 800c1a8:	a335      	add	r3, pc, #212	@ (adr r3, 800c280 <getPhaseCurrents+0x110>)
 800c1aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1ae:	f7f4 fb75 	bl	800089c <__aeabi_ddiv>
 800c1b2:	4602      	mov	r2, r0
 800c1b4:	460b      	mov	r3, r1
 800c1b6:	4610      	mov	r0, r2
 800c1b8:	4619      	mov	r1, r3
 800c1ba:	a333      	add	r3, pc, #204	@ (adr r3, 800c288 <getPhaseCurrents+0x118>)
 800c1bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1c0:	f7f4 fb6c 	bl	800089c <__aeabi_ddiv>
 800c1c4:	4602      	mov	r2, r0
 800c1c6:	460b      	mov	r3, r1
 800c1c8:	4614      	mov	r4, r2
 800c1ca:	461d      	mov	r5, r3
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	f7f4 f9e1 	bl	8000598 <__aeabi_f2d>
 800c1d6:	4602      	mov	r2, r0
 800c1d8:	460b      	mov	r3, r1
 800c1da:	4620      	mov	r0, r4
 800c1dc:	4629      	mov	r1, r5
 800c1de:	f7f4 f87b 	bl	80002d8 <__aeabi_dsub>
 800c1e2:	4602      	mov	r2, r0
 800c1e4:	460b      	mov	r3, r1
 800c1e6:	4610      	mov	r0, r2
 800c1e8:	4619      	mov	r1, r3
 800c1ea:	f7f4 fd25 	bl	8000c38 <__aeabi_d2f>
 800c1ee:	4602      	mov	r2, r0
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	649a      	str	r2, [r3, #72]	@ 0x48
    motor->Ib = ADC_2_CURRENT(adc_b) - motor->offset_ib;
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	ee07 3a90 	vmov	s15, r3
 800c1fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1fe:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 800c290 <getPhaseCurrents+0x120>
 800c202:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c206:	ee17 0a90 	vmov	r0, s15
 800c20a:	f7f4 f9c5 	bl	8000598 <__aeabi_f2d>
 800c20e:	a31a      	add	r3, pc, #104	@ (adr r3, 800c278 <getPhaseCurrents+0x108>)
 800c210:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c214:	f7f4 fb42 	bl	800089c <__aeabi_ddiv>
 800c218:	4602      	mov	r2, r0
 800c21a:	460b      	mov	r3, r1
 800c21c:	4610      	mov	r0, r2
 800c21e:	4619      	mov	r1, r3
 800c220:	a317      	add	r3, pc, #92	@ (adr r3, 800c280 <getPhaseCurrents+0x110>)
 800c222:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c226:	f7f4 fb39 	bl	800089c <__aeabi_ddiv>
 800c22a:	4602      	mov	r2, r0
 800c22c:	460b      	mov	r3, r1
 800c22e:	4610      	mov	r0, r2
 800c230:	4619      	mov	r1, r3
 800c232:	a315      	add	r3, pc, #84	@ (adr r3, 800c288 <getPhaseCurrents+0x118>)
 800c234:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c238:	f7f4 fb30 	bl	800089c <__aeabi_ddiv>
 800c23c:	4602      	mov	r2, r0
 800c23e:	460b      	mov	r3, r1
 800c240:	4614      	mov	r4, r2
 800c242:	461d      	mov	r5, r3
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c248:	4618      	mov	r0, r3
 800c24a:	f7f4 f9a5 	bl	8000598 <__aeabi_f2d>
 800c24e:	4602      	mov	r2, r0
 800c250:	460b      	mov	r3, r1
 800c252:	4620      	mov	r0, r4
 800c254:	4629      	mov	r1, r5
 800c256:	f7f4 f83f 	bl	80002d8 <__aeabi_dsub>
 800c25a:	4602      	mov	r2, r0
 800c25c:	460b      	mov	r3, r1
 800c25e:	4610      	mov	r0, r2
 800c260:	4619      	mov	r1, r3
 800c262:	f7f4 fce9 	bl	8000c38 <__aeabi_d2f>
 800c266:	4602      	mov	r2, r0
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 800c26c:	bf00      	nop
 800c26e:	3710      	adds	r7, #16
 800c270:	46bd      	mov	sp, r7
 800c272:	bdb0      	pop	{r4, r5, r7, pc}
 800c274:	f3af 8000 	nop.w
 800c278:	00000000 	.word	0x00000000
 800c27c:	40affe00 	.word	0x40affe00
 800c280:	40000000 	.word	0x40000000
 800c284:	3f747ae1 	.word	0x3f747ae1
 800c288:	a0000000 	.word	0xa0000000
 800c28c:	401d554c 	.word	0x401d554c
 800c290:	40533333 	.word	0x40533333

0800c294 <getABCurrents>:
// Ibeta = 1/sqrt(3) * Ia + 1/sqrt(3) * 2Ib
/*============================================================================*/
//   calculating Alpha Beta currents from phase currents
//   - function calculating Clarke transform of the phase currents
void getABCurrents(FocMotor *motor)
{
 800c294:	b480      	push	{r7}
 800c296:	b083      	sub	sp, #12
 800c298:	af00      	add	r7, sp, #0
 800c29a:	6078      	str	r0, [r7, #4]
    motor->Ialpha = motor->Ia;
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	651a      	str	r2, [r3, #80]	@ 0x50
    motor->Ibeta = _1_SQRT3 * motor->Ia + _2_SQRT3 * motor->Ib;
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800c2aa:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 800c2d8 <getABCurrents+0x44>
 800c2ae:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800c2b8:	eddf 6a08 	vldr	s13, [pc, #32]	@ 800c2dc <getABCurrents+0x48>
 800c2bc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c2c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54
}
 800c2ca:	bf00      	nop
 800c2cc:	370c      	adds	r7, #12
 800c2ce:	46bd      	mov	sp, r7
 800c2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d4:	4770      	bx	lr
 800c2d6:	bf00      	nop
 800c2d8:	3f13cd3a 	.word	0x3f13cd3a
 800c2dc:	3f93cd3a 	.word	0x3f93cd3a

0800c2e0 <getDQCurrents>:
/*============================================================================*/
// function used with the foc algorihtm
//   calculating D and Q currents from Alpha Beta currents and electrical angle
//   - function calculating Clarke transform of the phase currents
void getDQCurrents(FocMotor *motor)
{
 800c2e0:	b580      	push	{r7, lr}
 800c2e2:	b084      	sub	sp, #16
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	6078      	str	r0, [r7, #4]
    float ct;
    float st;
    _sincos(motor->angle_el, &st, &ct);
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800c2ee:	f107 020c 	add.w	r2, r7, #12
 800c2f2:	f107 0308 	add.w	r3, r7, #8
 800c2f6:	4611      	mov	r1, r2
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	eeb0 0a67 	vmov.f32	s0, s15
 800c2fe:	f000 ff0f 	bl	800d120 <_sincos>
    motor->Id = motor->Ialpha * ct + motor->Ibeta * st;
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 800c308:	edd7 7a03 	vldr	s15, [r7, #12]
 800c30c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	edd3 6a15 	vldr	s13, [r3, #84]	@ 0x54
 800c316:	edd7 7a02 	vldr	s15, [r7, #8]
 800c31a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c31e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58
    motor->Iq = motor->Ibeta * ct - motor->Ialpha * st;
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	ed93 7a15 	vldr	s14, [r3, #84]	@ 0x54
 800c32e:	edd7 7a03 	vldr	s15, [r7, #12]
 800c332:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	edd3 6a14 	vldr	s13, [r3, #80]	@ 0x50
 800c33c:	edd7 7a02 	vldr	s15, [r7, #8]
 800c340:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c344:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c
 800c34e:	bf00      	nop
 800c350:	3710      	adds	r7, #16
 800c352:	46bd      	mov	sp, r7
 800c354:	bd80      	pop	{r7, pc}

0800c356 <encoderInit>:

#include "encoder.h"
#include "math_utils.h"
void encoderInit(MagEncoder *encoder, float _Ts, float (*_getRawAngle)(void))
{
 800c356:	b480      	push	{r7}
 800c358:	b085      	sub	sp, #20
 800c35a:	af00      	add	r7, sp, #0
 800c35c:	60f8      	str	r0, [r7, #12]
 800c35e:	ed87 0a02 	vstr	s0, [r7, #8]
 800c362:	6079      	str	r1, [r7, #4]
    encoder->angle_prev = 0;
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	f04f 0200 	mov.w	r2, #0
 800c36a:	601a      	str	r2, [r3, #0]
    encoder->vel_angle_prev = 0;
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	f04f 0200 	mov.w	r2, #0
 800c372:	605a      	str	r2, [r3, #4]
    encoder->full_rotations = 0;
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	2200      	movs	r2, #0
 800c378:	609a      	str	r2, [r3, #8]
    encoder->vel_full_rotations = 0;
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	2200      	movs	r2, #0
 800c37e:	60da      	str	r2, [r3, #12]
    encoder->shaftAngle = 0;
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	f04f 0200 	mov.w	r2, #0
 800c386:	611a      	str	r2, [r3, #16]
    encoder->fullAngle = 0;
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	f04f 0200 	mov.w	r2, #0
 800c38e:	615a      	str	r2, [r3, #20]
    encoder->velocity = 0;
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	f04f 0200 	mov.w	r2, #0
 800c396:	619a      	str	r2, [r3, #24]
    encoder->Ts = _Ts;
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	68ba      	ldr	r2, [r7, #8]
 800c39c:	61da      	str	r2, [r3, #28]
    encoder->getRawAngle = _getRawAngle;
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	687a      	ldr	r2, [r7, #4]
 800c3a2:	625a      	str	r2, [r3, #36]	@ 0x24
    encoder->direction = UNKNOWN;
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	2200      	movs	r2, #0
 800c3a8:	f883 2020 	strb.w	r2, [r3, #32]
}
 800c3ac:	bf00      	nop
 800c3ae:	3714      	adds	r7, #20
 800c3b0:	46bd      	mov	sp, r7
 800c3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b6:	4770      	bx	lr

0800c3b8 <encoderUpdate>:

void encoderUpdate(MagEncoder *encoder)
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b084      	sub	sp, #16
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
    float val = encoder->getRawAngle();
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c3c4:	4798      	blx	r3
 800c3c6:	ed87 0a03 	vstr	s0, [r7, #12]

    float d_angle = val - encoder->angle_prev;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	edd3 7a00 	vldr	s15, [r3]
 800c3d0:	ed97 7a03 	vldr	s14, [r7, #12]
 800c3d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c3d8:	edc7 7a02 	vstr	s15, [r7, #8]
    // 圈数检测
    if (abs(d_angle) > (0.8f * _2PI))
 800c3dc:	edd7 7a02 	vldr	s15, [r7, #8]
 800c3e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c3e4:	ee17 3a90 	vmov	r3, s15
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	bfb8      	it	lt
 800c3ec:	425b      	neglt	r3, r3
 800c3ee:	ee07 3a90 	vmov	s15, r3
 800c3f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c3f6:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 800c4b0 <encoderUpdate+0xf8>
 800c3fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c3fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c402:	dd0f      	ble.n	800c424 <encoderUpdate+0x6c>
        encoder->full_rotations += (d_angle > 0) ? -1 : 1;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	689b      	ldr	r3, [r3, #8]
 800c408:	edd7 7a02 	vldr	s15, [r7, #8]
 800c40c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c414:	dd02      	ble.n	800c41c <encoderUpdate+0x64>
 800c416:	f04f 32ff 	mov.w	r2, #4294967295
 800c41a:	e000      	b.n	800c41e <encoderUpdate+0x66>
 800c41c:	2201      	movs	r2, #1
 800c41e:	441a      	add	r2, r3
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	609a      	str	r2, [r3, #8]

    // angle
    encoder->angle_prev = val;
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	68fa      	ldr	r2, [r7, #12]
 800c428:	601a      	str	r2, [r3, #0]
    encoder->shaftAngle = val;
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	68fa      	ldr	r2, [r7, #12]
 800c42e:	611a      	str	r2, [r3, #16]
    encoder->fullAngle = (float)encoder->full_rotations * _2PI + encoder->angle_prev;
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	689b      	ldr	r3, [r3, #8]
 800c434:	ee07 3a90 	vmov	s15, r3
 800c438:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c43c:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800c4b4 <encoderUpdate+0xfc>
 800c440:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	edd3 7a00 	vldr	s15, [r3]
 800c44a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	edc3 7a05 	vstr	s15, [r3, #20]

    // 速度计算
    val = ((float)(encoder->full_rotations - encoder->vel_full_rotations) * _2PI + (encoder->angle_prev - encoder->vel_angle_prev)) / encoder->Ts;
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	689a      	ldr	r2, [r3, #8]
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	68db      	ldr	r3, [r3, #12]
 800c45c:	1ad3      	subs	r3, r2, r3
 800c45e:	ee07 3a90 	vmov	s15, r3
 800c462:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c466:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 800c4b4 <encoderUpdate+0xfc>
 800c46a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	edd3 6a00 	vldr	s13, [r3]
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	edd3 7a01 	vldr	s15, [r3, #4]
 800c47a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800c47e:	ee77 6a27 	vadd.f32	s13, s14, s15
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	ed93 7a07 	vldr	s14, [r3, #28]
 800c488:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c48c:	edc7 7a03 	vstr	s15, [r7, #12]
    // 保存变量以待将来使用
    encoder->vel_angle_prev = encoder->angle_prev;
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	681a      	ldr	r2, [r3, #0]
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	605a      	str	r2, [r3, #4]
    encoder->vel_full_rotations = encoder->full_rotations;
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	689a      	ldr	r2, [r3, #8]
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	60da      	str	r2, [r3, #12]
    encoder->velocity = val;
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	68fa      	ldr	r2, [r7, #12]
 800c4a4:	619a      	str	r2, [r3, #24]
}
 800c4a6:	bf00      	nop
 800c4a8:	3710      	adds	r7, #16
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	bd80      	pop	{r7, pc}
 800c4ae:	bf00      	nop
 800c4b0:	40a0d97c 	.word	0x40a0d97c
 800c4b4:	40c90fdb 	.word	0x40c90fdb

0800c4b8 <alignSensor>:
#include "pid.h"
#include "lowpass_filter.h"
#include "app.h"

void alignSensor(FocMotor *motor)
{
 800c4b8:	b5b0      	push	{r4, r5, r7, lr}
 800c4ba:	b08c      	sub	sp, #48	@ 0x30
 800c4bc:	af02      	add	r7, sp, #8
 800c4be:	6078      	str	r0, [r7, #4]
    for (int i = 0; i <= 500; i++)
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	627b      	str	r3, [r7, #36]	@ 0x24
 800c4c4:	e025      	b.n	800c512 <alignSensor+0x5a>
    {
        float angle = _3PI_2 + _2PI * i / 500.0f;
 800c4c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4c8:	ee07 3a90 	vmov	s15, r3
 800c4cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c4d0:	ed9f 7a84 	vldr	s14, [pc, #528]	@ 800c6e4 <alignSensor+0x22c>
 800c4d4:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c4d8:	eddf 6a83 	vldr	s13, [pc, #524]	@ 800c6e8 <alignSensor+0x230>
 800c4dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c4e0:	ed9f 7a82 	vldr	s14, [pc, #520]	@ 800c6ec <alignSensor+0x234>
 800c4e4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c4e8:	edc7 7a02 	vstr	s15, [r7, #8]
        setTorque(motor, OPEN_LOOP_TORQUE, 0, angle);
 800c4ec:	ed97 1a02 	vldr	s2, [r7, #8]
 800c4f0:	eddf 0a7f 	vldr	s1, [pc, #508]	@ 800c6f0 <alignSensor+0x238>
 800c4f4:	ed9f 0a7f 	vldr	s0, [pc, #508]	@ 800c6f4 <alignSensor+0x23c>
 800c4f8:	6878      	ldr	r0, [r7, #4]
 800c4fa:	f001 f9e7 	bl	800d8cc <setTorque>
        encoderUpdate(&motor->magEncoder);
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	4618      	mov	r0, r3
 800c502:	f7ff ff59 	bl	800c3b8 <encoderUpdate>
        delay(2);
 800c506:	2002      	movs	r0, #2
 800c508:	f001 f80c 	bl	800d524 <delay>
    for (int i = 0; i <= 500; i++)
 800c50c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c50e:	3301      	adds	r3, #1
 800c510:	627b      	str	r3, [r7, #36]	@ 0x24
 800c512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c514:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800c518:	ddd5      	ble.n	800c4c6 <alignSensor+0xe>
    }
    encoderUpdate(&motor->magEncoder);
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	4618      	mov	r0, r3
 800c51e:	f7ff ff4b 	bl	800c3b8 <encoderUpdate>
    float mid_angle = motor->magEncoder.fullAngle;
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	695b      	ldr	r3, [r3, #20]
 800c526:	61fb      	str	r3, [r7, #28]
    // move one electrical revolution backwards
    for (int i = 500; i >= 0; i--)
 800c528:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800c52c:	623b      	str	r3, [r7, #32]
 800c52e:	e025      	b.n	800c57c <alignSensor+0xc4>
    {
        float angle = _3PI_2 + _2PI * i / 500.0f;
 800c530:	6a3b      	ldr	r3, [r7, #32]
 800c532:	ee07 3a90 	vmov	s15, r3
 800c536:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c53a:	ed9f 7a6a 	vldr	s14, [pc, #424]	@ 800c6e4 <alignSensor+0x22c>
 800c53e:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c542:	eddf 6a69 	vldr	s13, [pc, #420]	@ 800c6e8 <alignSensor+0x230>
 800c546:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c54a:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800c6ec <alignSensor+0x234>
 800c54e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c552:	edc7 7a03 	vstr	s15, [r7, #12]
        setTorque(motor, OPEN_LOOP_TORQUE, 0, angle);
 800c556:	ed97 1a03 	vldr	s2, [r7, #12]
 800c55a:	eddf 0a65 	vldr	s1, [pc, #404]	@ 800c6f0 <alignSensor+0x238>
 800c55e:	ed9f 0a65 	vldr	s0, [pc, #404]	@ 800c6f4 <alignSensor+0x23c>
 800c562:	6878      	ldr	r0, [r7, #4]
 800c564:	f001 f9b2 	bl	800d8cc <setTorque>
        encoderUpdate(&motor->magEncoder);
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	4618      	mov	r0, r3
 800c56c:	f7ff ff24 	bl	800c3b8 <encoderUpdate>
        delay(2);
 800c570:	2002      	movs	r0, #2
 800c572:	f000 ffd7 	bl	800d524 <delay>
    for (int i = 500; i >= 0; i--)
 800c576:	6a3b      	ldr	r3, [r7, #32]
 800c578:	3b01      	subs	r3, #1
 800c57a:	623b      	str	r3, [r7, #32]
 800c57c:	6a3b      	ldr	r3, [r7, #32]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	dad6      	bge.n	800c530 <alignSensor+0x78>
    }
    encoderUpdate(&motor->magEncoder);
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	4618      	mov	r0, r3
 800c586:	f7ff ff17 	bl	800c3b8 <encoderUpdate>
    float end_angle = motor->magEncoder.fullAngle;
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	695b      	ldr	r3, [r3, #20]
 800c58e:	61bb      	str	r3, [r7, #24]
    // setPhaseVoltage(0, 0, 0);
    delay(200);
 800c590:	20c8      	movs	r0, #200	@ 0xc8
 800c592:	f000 ffc7 	bl	800d524 <delay>

    // determine the direction the sensor moved
    float moved = fabs(mid_angle - end_angle);
 800c596:	ed97 7a07 	vldr	s14, [r7, #28]
 800c59a:	edd7 7a06 	vldr	s15, [r7, #24]
 800c59e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c5a2:	eef0 7ae7 	vabs.f32	s15, s15
 800c5a6:	edc7 7a05 	vstr	s15, [r7, #20]
    if (moved < MIN_ANGLE_DETECT_MOVEMENT)
 800c5aa:	edd7 7a05 	vldr	s15, [r7, #20]
 800c5ae:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 800c6f8 <alignSensor+0x240>
 800c5b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c5b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5ba:	d503      	bpl.n	800c5c4 <alignSensor+0x10c>
    { // minimum angle to detect movement
        FOC_log("Failed to notice movement\n");
 800c5bc:	484f      	ldr	r0, [pc, #316]	@ (800c6fc <alignSensor+0x244>)
 800c5be:	f7ff fc7d 	bl	800bebc <FOC_log>
        return 0; // failed calibration
 800c5c2:	e08b      	b.n	800c6dc <alignSensor+0x224>
    }
    else if (mid_angle < end_angle)
 800c5c4:	ed97 7a07 	vldr	s14, [r7, #28]
 800c5c8:	edd7 7a06 	vldr	s15, [r7, #24]
 800c5cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c5d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5d4:	d507      	bpl.n	800c5e6 <alignSensor+0x12e>
    {
        FOC_log("sensor_direction==CCW\n");
 800c5d6:	484a      	ldr	r0, [pc, #296]	@ (800c700 <alignSensor+0x248>)
 800c5d8:	f7ff fc70 	bl	800bebc <FOC_log>
        motor->magEncoder.direction = CCW;
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	22ff      	movs	r2, #255	@ 0xff
 800c5e0:	f883 2020 	strb.w	r2, [r3, #32]
 800c5e4:	e006      	b.n	800c5f4 <alignSensor+0x13c>
    }
    else
    {
        FOC_log("sensor_direction==CW\n");
 800c5e6:	4847      	ldr	r0, [pc, #284]	@ (800c704 <alignSensor+0x24c>)
 800c5e8:	f7ff fc68 	bl	800bebc <FOC_log>
        motor->magEncoder.direction = CW;
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	2201      	movs	r2, #1
 800c5f0:	f883 2020 	strb.w	r2, [r3, #32]
    }
    // check pole pair number
    bool pp_check_result = !(fabs(moved * motor->pole_pairs - _2PI) > 0.5f); // 0.5f is arbitrary number it can be lower or higher!
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800c5fa:	ee07 3a90 	vmov	s15, r3
 800c5fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c602:	edd7 7a05 	vldr	s15, [r7, #20]
 800c606:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c60a:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800c6e4 <alignSensor+0x22c>
 800c60e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c612:	eef0 7ae7 	vabs.f32	s15, s15
 800c616:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800c61a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c61e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c622:	bfcc      	ite	gt
 800c624:	2301      	movgt	r3, #1
 800c626:	2300      	movle	r3, #0
 800c628:	b2db      	uxtb	r3, r3
 800c62a:	f083 0301 	eor.w	r3, r3, #1
 800c62e:	b2db      	uxtb	r3, r3
 800c630:	74fb      	strb	r3, [r7, #19]
    if (pp_check_result == false)
 800c632:	7cfb      	ldrb	r3, [r7, #19]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d10f      	bne.n	800c658 <alignSensor+0x1a0>
    {
        FOC_log("PP check: fail - estimated pp: \n", _2PI / moved);
 800c638:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 800c6e4 <alignSensor+0x22c>
 800c63c:	edd7 7a05 	vldr	s15, [r7, #20]
 800c640:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800c644:	ee16 0a90 	vmov	r0, s13
 800c648:	f7f3 ffa6 	bl	8000598 <__aeabi_f2d>
 800c64c:	4602      	mov	r2, r0
 800c64e:	460b      	mov	r3, r1
 800c650:	482d      	ldr	r0, [pc, #180]	@ (800c708 <alignSensor+0x250>)
 800c652:	f7ff fc33 	bl	800bebc <FOC_log>
 800c656:	e002      	b.n	800c65e <alignSensor+0x1a6>
    }
    else
    {
        FOC_log("PP check: OK!\n");
 800c658:	482c      	ldr	r0, [pc, #176]	@ (800c70c <alignSensor+0x254>)
 800c65a:	f7ff fc2f 	bl	800bebc <FOC_log>
    }

    // align the electrical phases of the motor and sensor
    // set angle -90(270 = 3PI/2) degrees
    setTorque(motor, OPEN_LOOP_TORQUE, 0, _3PI_2);
 800c65e:	ed9f 1a23 	vldr	s2, [pc, #140]	@ 800c6ec <alignSensor+0x234>
 800c662:	eddf 0a23 	vldr	s1, [pc, #140]	@ 800c6f0 <alignSensor+0x238>
 800c666:	ed9f 0a23 	vldr	s0, [pc, #140]	@ 800c6f4 <alignSensor+0x23c>
 800c66a:	6878      	ldr	r0, [r7, #4]
 800c66c:	f001 f92e 	bl	800d8cc <setTorque>
    delay(700);
 800c670:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 800c674:	f000 ff56 	bl	800d524 <delay>
    // read the sensor
    encoderUpdate(&motor->magEncoder);
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	4618      	mov	r0, r3
 800c67c:	f7ff fe9c 	bl	800c3b8 <encoderUpdate>
    // get the current zero electric angle
    getElecAngle(motor);
 800c680:	6878      	ldr	r0, [r7, #4]
 800c682:	f000 f847 	bl	800c714 <getElecAngle>
    motor->zeroElectricAngleOffSet = motor->angle_el;
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	635a      	str	r2, [r3, #52]	@ 0x34
    // zero_electric_angle =  _normalizeAngle(_electricalAngle(sensor_direction*sensor->getAngle(), pole_pairs));
    delay(20);
 800c68e:	2014      	movs	r0, #20
 800c690:	f000 ff48 	bl	800d524 <delay>
    getElecAngle(motor);
 800c694:	6878      	ldr	r0, [r7, #4]
 800c696:	f000 f83d 	bl	800c714 <getElecAngle>

    FOC_log("[zeroAngleOffset]:%f  [zeroAngle]:%f\r\n", motor->zeroElectricAngleOffSet, motor->angle_el);
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c69e:	4618      	mov	r0, r3
 800c6a0:	f7f3 ff7a 	bl	8000598 <__aeabi_f2d>
 800c6a4:	4604      	mov	r4, r0
 800c6a6:	460d      	mov	r5, r1
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	f7f3 ff73 	bl	8000598 <__aeabi_f2d>
 800c6b2:	4602      	mov	r2, r0
 800c6b4:	460b      	mov	r3, r1
 800c6b6:	e9cd 2300 	strd	r2, r3, [sp]
 800c6ba:	4622      	mov	r2, r4
 800c6bc:	462b      	mov	r3, r5
 800c6be:	4814      	ldr	r0, [pc, #80]	@ (800c710 <alignSensor+0x258>)
 800c6c0:	f7ff fbfc 	bl	800bebc <FOC_log>
    // make sure the angle_el is about zero
    setTorque(motor, 0, 0, 0);
 800c6c4:	ed9f 1a0a 	vldr	s2, [pc, #40]	@ 800c6f0 <alignSensor+0x238>
 800c6c8:	eddf 0a09 	vldr	s1, [pc, #36]	@ 800c6f0 <alignSensor+0x238>
 800c6cc:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800c6f0 <alignSensor+0x238>
 800c6d0:	6878      	ldr	r0, [r7, #4]
 800c6d2:	f001 f8fb 	bl	800d8cc <setTorque>
    delay(200);
 800c6d6:	20c8      	movs	r0, #200	@ 0xc8
 800c6d8:	f000 ff24 	bl	800d524 <delay>
}
 800c6dc:	3728      	adds	r7, #40	@ 0x28
 800c6de:	46bd      	mov	sp, r7
 800c6e0:	bdb0      	pop	{r4, r5, r7, pc}
 800c6e2:	bf00      	nop
 800c6e4:	40c90fdb 	.word	0x40c90fdb
 800c6e8:	43fa0000 	.word	0x43fa0000
 800c6ec:	4096cbe4 	.word	0x4096cbe4
 800c6f0:	00000000 	.word	0x00000000
 800c6f4:	405db3d7 	.word	0x405db3d7
 800c6f8:	3d7ecfa9 	.word	0x3d7ecfa9
 800c6fc:	08012604 	.word	0x08012604
 800c700:	08012620 	.word	0x08012620
 800c704:	08012638 	.word	0x08012638
 800c708:	08012650 	.word	0x08012650
 800c70c:	08012674 	.word	0x08012674
 800c710:	08012684 	.word	0x08012684

0800c714 <getElecAngle>:
//     motor->zeroElectricAngleOffSet = _normalizeAngle(motor->pole_pairs * motor->magEncoder.shaftAngle); // 测量电角度零位偏差
//     setTorque(motor, 0.0f, 0.0f, 0.0f);
// }

void getElecAngle(FocMotor *motor)
{
 800c714:	b580      	push	{r7, lr}
 800c716:	b082      	sub	sp, #8
 800c718:	af00      	add	r7, sp, #0
 800c71a:	6078      	str	r0, [r7, #4]
    motor->angle_el = _normalizeAngle(motor->magEncoder.direction * motor->pole_pairs * motor->magEncoder.shaftAngle - motor->zeroElectricAngleOffSet);
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	f993 3020 	ldrsb.w	r3, [r3, #32]
 800c722:	461a      	mov	r2, r3
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800c72a:	fb02 f303 	mul.w	r3, r2, r3
 800c72e:	ee07 3a90 	vmov	s15, r3
 800c732:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	edd3 7a04 	vldr	s15, [r3, #16]
 800c73c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800c746:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c74a:	eeb0 0a67 	vmov.f32	s0, s15
 800c74e:	f000 fd07 	bl	800d160 <_normalizeAngle>
 800c752:	eef0 7a40 	vmov.f32	s15, s0
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
}
 800c75c:	bf00      	nop
 800c75e:	3708      	adds	r7, #8
 800c760:	46bd      	mov	sp, r7
 800c762:	bd80      	pop	{r7, pc}

0800c764 <foc>:

void foc(FocMotor *motor, uint32_t adc_a, uint32_t adc_b)
{
 800c764:	b580      	push	{r7, lr}
 800c766:	b088      	sub	sp, #32
 800c768:	af00      	add	r7, sp, #0
 800c76a:	60f8      	str	r0, [r7, #12]
 800c76c:	60b9      	str	r1, [r7, #8]
 800c76e:	607a      	str	r2, [r7, #4]
    if (motor->state == MOTOR_CALIBRATE)
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c776:	2b00      	cmp	r3, #0
 800c778:	d111      	bne.n	800c79e <foc+0x3a>
    {
        getCurrentOffsets(motor, adc_a, adc_b, 100);
 800c77a:	2364      	movs	r3, #100	@ 0x64
 800c77c:	687a      	ldr	r2, [r7, #4]
 800c77e:	68b9      	ldr	r1, [r7, #8]
 800c780:	68f8      	ldr	r0, [r7, #12]
 800c782:	f7ff fc25 	bl	800bfd0 <getCurrentOffsets>
        alignSensor(motor);
 800c786:	68f8      	ldr	r0, [r7, #12]
 800c788:	f7ff fe96 	bl	800c4b8 <alignSensor>
        motor->stopPwm();
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800c792:	4798      	blx	r3
        motor->state = MOTOR_READY;
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	2201      	movs	r2, #1
 800c798:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            }

            setTorque(motor, motor->Uq, motor->Ud, motor->angle_el);
        }
    }
}
 800c79c:	e13c      	b.n	800ca18 <foc+0x2b4>
        getPhaseCurrents(motor, adc_a, adc_b);
 800c79e:	687a      	ldr	r2, [r7, #4]
 800c7a0:	68b9      	ldr	r1, [r7, #8]
 800c7a2:	68f8      	ldr	r0, [r7, #12]
 800c7a4:	f7ff fce4 	bl	800c170 <getPhaseCurrents>
        getABCurrents(motor);
 800c7a8:	68f8      	ldr	r0, [r7, #12]
 800c7aa:	f7ff fd73 	bl	800c294 <getABCurrents>
        getDQCurrents(motor);
 800c7ae:	68f8      	ldr	r0, [r7, #12]
 800c7b0:	f7ff fd96 	bl	800c2e0 <getDQCurrents>
        motor->Iq = lpfOperator(&motor->IqFilter, motor->Iq);
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	f103 02f0 	add.w	r2, r3, #240	@ 0xf0
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800c7c0:	eeb0 0a67 	vmov.f32	s0, s15
 800c7c4:	4610      	mov	r0, r2
 800c7c6:	f000 fbc3 	bl	800cf50 <lpfOperator>
 800c7ca:	eef0 7a40 	vmov.f32	s15, s0
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c
        motor->Id = lpfOperator(&motor->IdFilter, motor->Id);
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	f103 02fc 	add.w	r2, r3, #252	@ 0xfc
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 800c7e0:	eeb0 0a67 	vmov.f32	s0, s15
 800c7e4:	4610      	mov	r0, r2
 800c7e6:	f000 fbb3 	bl	800cf50 <lpfOperator>
 800c7ea:	eef0 7a40 	vmov.f32	s15, s0
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58
        encoderUpdate(&motor->magEncoder);
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	f7ff fdde 	bl	800c3b8 <encoderUpdate>
        motor->magEncoder.velocity = lpfOperator(&motor->velocityFilter, motor->magEncoder.velocity);
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	f503 7284 	add.w	r2, r3, #264	@ 0x108
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	edd3 7a06 	vldr	s15, [r3, #24]
 800c808:	eeb0 0a67 	vmov.f32	s0, s15
 800c80c:	4610      	mov	r0, r2
 800c80e:	f000 fb9f 	bl	800cf50 <lpfOperator>
 800c812:	eef0 7a40 	vmov.f32	s15, s0
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	edc3 7a06 	vstr	s15, [r3, #24]
        getElecAngle(motor);
 800c81c:	68f8      	ldr	r0, [r7, #12]
 800c81e:	f7ff ff79 	bl	800c714 <getElecAngle>
        if (motor->state == MOTOR_START)
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c828:	2b02      	cmp	r3, #2
 800c82a:	f040 80f5 	bne.w	800ca18 <foc+0x2b4>
            switch (motor->controlType)
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800c834:	2b03      	cmp	r3, #3
 800c836:	f200 80dd 	bhi.w	800c9f4 <foc+0x290>
 800c83a:	a201      	add	r2, pc, #4	@ (adr r2, 800c840 <foc+0xdc>)
 800c83c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c840:	0800c851 	.word	0x0800c851
 800c844:	0800c89d 	.word	0x0800c89d
 800c848:	0800c8f3 	.word	0x0800c8f3
 800c84c:	0800c963 	.word	0x0800c963
                if (motor->torqueType == VOLTAGE)
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800c856:	2b00      	cmp	r3, #0
 800c858:	d105      	bne.n	800c866 <foc+0x102>
                    motor->Uq = motor->target;
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
                break;
 800c864:	e0c6      	b.n	800c9f4 <foc+0x290>
                    motor->Uq = 0;
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	f04f 0200 	mov.w	r2, #0
 800c86c:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
                    motor->Ud = pidOperator(&motor->pidId, motor->target - motor->Id);
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	f103 0260 	add.w	r2, r3, #96	@ 0x60
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 800c882:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c886:	eeb0 0a67 	vmov.f32	s0, s15
 800c88a:	4610      	mov	r0, r2
 800c88c:	f000 fd42 	bl	800d314 <pidOperator>
 800c890:	eef0 7a40 	vmov.f32	s15, s0
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	edc3 7a45 	vstr	s15, [r3, #276]	@ 0x114
                break;
 800c89a:	e0ab      	b.n	800c9f4 <foc+0x290>
                shaftAngle = _normalizeAngle(shaftAngle + motor->target * motor->Ts);
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800c8a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c8ac:	4b5c      	ldr	r3, [pc, #368]	@ (800ca20 <foc+0x2bc>)
 800c8ae:	edd3 7a00 	vldr	s15, [r3]
 800c8b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c8b6:	eeb0 0a67 	vmov.f32	s0, s15
 800c8ba:	f000 fc51 	bl	800d160 <_normalizeAngle>
 800c8be:	eef0 7a40 	vmov.f32	s15, s0
 800c8c2:	4b57      	ldr	r3, [pc, #348]	@ (800ca20 <foc+0x2bc>)
 800c8c4:	edc3 7a00 	vstr	s15, [r3]
                motor->angle_el = _electricalAngle(shaftAngle, motor->pole_pairs);
 800c8c8:	4b55      	ldr	r3, [pc, #340]	@ (800ca20 <foc+0x2bc>)
 800c8ca:	edd3 7a00 	vldr	s15, [r3]
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	eeb0 0a67 	vmov.f32	s0, s15
 800c8da:	f000 fc77 	bl	800d1cc <_electricalAngle>
 800c8de:	eef0 7a40 	vmov.f32	s15, s0
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
                motor->Uq = OPEN_LOOP_TORQUE;
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	4a4e      	ldr	r2, [pc, #312]	@ (800ca24 <foc+0x2c0>)
 800c8ec:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
                break;
 800c8f0:	e080      	b.n	800c9f4 <foc+0x290>
                if (motor->torqueType == VOLTAGE)
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d116      	bne.n	800c92a <foc+0x1c6>
                    velocityErr = motor->target - motor->magEncoder.velocity;
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	edd3 7a06 	vldr	s15, [r3, #24]
 800c908:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c90c:	edc7 7a06 	vstr	s15, [r7, #24]
                    motor->Uq = pidOperator(&motor->velocityPID, velocityErr);
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	33a8      	adds	r3, #168	@ 0xa8
 800c914:	ed97 0a06 	vldr	s0, [r7, #24]
 800c918:	4618      	mov	r0, r3
 800c91a:	f000 fcfb 	bl	800d314 <pidOperator>
 800c91e:	eef0 7a40 	vmov.f32	s15, s0
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	edc3 7a46 	vstr	s15, [r3, #280]	@ 0x118
                break;
 800c928:	e064      	b.n	800c9f4 <foc+0x290>
                    velocityErr = (motor->target - motor->magEncoder.velocity) * 180 / _PI;
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	edd3 7a06 	vldr	s15, [r3, #24]
 800c936:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c93a:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 800ca28 <foc+0x2c4>
 800c93e:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c942:	eddf 6a3a 	vldr	s13, [pc, #232]	@ 800ca2c <foc+0x2c8>
 800c946:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c94a:	edc7 7a06 	vstr	s15, [r7, #24]
                    IqRef = pidOperator(&motor->velocityPID, velocityErr);
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	33a8      	adds	r3, #168	@ 0xa8
 800c952:	ed97 0a06 	vldr	s0, [r7, #24]
 800c956:	4618      	mov	r0, r3
 800c958:	f000 fcdc 	bl	800d314 <pidOperator>
 800c95c:	ed87 0a05 	vstr	s0, [r7, #20]
                break;
 800c960:	e048      	b.n	800c9f4 <foc+0x290>
                if (motor->torqueType == VOLTAGE)
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d116      	bne.n	800c99a <foc+0x236>
                    angleErr = motor->target - motor->magEncoder.fullAngle;
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	edd3 7a05 	vldr	s15, [r3, #20]
 800c978:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c97c:	edc7 7a04 	vstr	s15, [r7, #16]
                    motor->Uq = pidOperator(&motor->anglePID, angleErr);
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	33cc      	adds	r3, #204	@ 0xcc
 800c984:	ed97 0a04 	vldr	s0, [r7, #16]
 800c988:	4618      	mov	r0, r3
 800c98a:	f000 fcc3 	bl	800d314 <pidOperator>
 800c98e:	eef0 7a40 	vmov.f32	s15, s0
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	edc3 7a46 	vstr	s15, [r3, #280]	@ 0x118
                break;
 800c998:	e02b      	b.n	800c9f2 <foc+0x28e>
                    float velocityRef = pidOperator(&motor->anglePID, motor->target - motor->magEncoder.fullAngle);
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	f103 02cc 	add.w	r2, r3, #204	@ 0xcc
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	edd3 7a05 	vldr	s15, [r3, #20]
 800c9ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c9b0:	eeb0 0a67 	vmov.f32	s0, s15
 800c9b4:	4610      	mov	r0, r2
 800c9b6:	f000 fcad 	bl	800d314 <pidOperator>
 800c9ba:	ed87 0a07 	vstr	s0, [r7, #28]
                    velocityErr = (velocityRef - motor->magEncoder.velocity) * 180 * _PI;
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	edd3 7a06 	vldr	s15, [r3, #24]
 800c9c4:	ed97 7a07 	vldr	s14, [r7, #28]
 800c9c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c9cc:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 800ca28 <foc+0x2c4>
 800c9d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c9d4:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 800ca2c <foc+0x2c8>
 800c9d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c9dc:	edc7 7a06 	vstr	s15, [r7, #24]
                    IqRef = pidOperator(&motor->velocityPID, velocityErr);
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	33a8      	adds	r3, #168	@ 0xa8
 800c9e4:	ed97 0a06 	vldr	s0, [r7, #24]
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	f000 fc93 	bl	800d314 <pidOperator>
 800c9ee:	ed87 0a05 	vstr	s0, [r7, #20]
                break;
 800c9f2:	bf00      	nop
            setTorque(motor, motor->Uq, motor->Ud, motor->angle_el);
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	edd3 7a46 	vldr	s15, [r3, #280]	@ 0x118
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	ed93 7a45 	vldr	s14, [r3, #276]	@ 0x114
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 800ca06:	eeb0 1a66 	vmov.f32	s2, s13
 800ca0a:	eef0 0a47 	vmov.f32	s1, s14
 800ca0e:	eeb0 0a67 	vmov.f32	s0, s15
 800ca12:	68f8      	ldr	r0, [r7, #12]
 800ca14:	f000 ff5a 	bl	800d8cc <setTorque>
}
 800ca18:	bf00      	nop
 800ca1a:	3720      	adds	r7, #32
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	bd80      	pop	{r7, pc}
 800ca20:	20000904 	.word	0x20000904
 800ca24:	405db3d7 	.word	0x405db3d7
 800ca28:	43340000 	.word	0x43340000
 800ca2c:	40490fdb 	.word	0x40490fdb

0800ca30 <getKeyFlags>:
#include "key.h"

static KeyStruct keyStruct[KEY_NUM];

uint getKeyFlags()
{
 800ca30:	b580      	push	{r7, lr}
 800ca32:	af00      	add	r7, sp, #0
    static uint keyFlagsBak; // back up keyflags for filtering
    static uchar filterCnt;
    static Byte flags;       // real time key flags with bits operation
    static uint keyFlagsBuf; // return key flags after filtering

    flags.byte = 0;
 800ca34:	4b3b      	ldr	r3, [pc, #236]	@ (800cb24 <getKeyFlags+0xf4>)
 800ca36:	2200      	movs	r2, #0
 800ca38:	701a      	strb	r2, [r3, #0]

    // when IO been multiplexed
    if (HAL_GPIO_ReadPin(SW_PORT, SW1_PIN) == 1)
 800ca3a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800ca3e:	483a      	ldr	r0, [pc, #232]	@ (800cb28 <getKeyFlags+0xf8>)
 800ca40:	f7f9 fec0 	bl	80067c4 <HAL_GPIO_ReadPin>
 800ca44:	4603      	mov	r3, r0
 800ca46:	2b01      	cmp	r3, #1
 800ca48:	d104      	bne.n	800ca54 <getKeyFlags+0x24>
    {
        flags.bits.b0 = 1; // SW1
 800ca4a:	4a36      	ldr	r2, [pc, #216]	@ (800cb24 <getKeyFlags+0xf4>)
 800ca4c:	7813      	ldrb	r3, [r2, #0]
 800ca4e:	f043 0301 	orr.w	r3, r3, #1
 800ca52:	7013      	strb	r3, [r2, #0]
    }

    if (HAL_GPIO_ReadPin(SW_PORT, SW2_PIN) == 1)
 800ca54:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800ca58:	4833      	ldr	r0, [pc, #204]	@ (800cb28 <getKeyFlags+0xf8>)
 800ca5a:	f7f9 feb3 	bl	80067c4 <HAL_GPIO_ReadPin>
 800ca5e:	4603      	mov	r3, r0
 800ca60:	2b01      	cmp	r3, #1
 800ca62:	d104      	bne.n	800ca6e <getKeyFlags+0x3e>
    {
        flags.bits.b1 = 1; // SW2
 800ca64:	4a2f      	ldr	r2, [pc, #188]	@ (800cb24 <getKeyFlags+0xf4>)
 800ca66:	7813      	ldrb	r3, [r2, #0]
 800ca68:	f043 0302 	orr.w	r3, r3, #2
 800ca6c:	7013      	strb	r3, [r2, #0]
    }

    if (HAL_GPIO_ReadPin(SW_PORT, SW3_PIN) == 1)
 800ca6e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800ca72:	482d      	ldr	r0, [pc, #180]	@ (800cb28 <getKeyFlags+0xf8>)
 800ca74:	f7f9 fea6 	bl	80067c4 <HAL_GPIO_ReadPin>
 800ca78:	4603      	mov	r3, r0
 800ca7a:	2b01      	cmp	r3, #1
 800ca7c:	d104      	bne.n	800ca88 <getKeyFlags+0x58>
    {
        flags.bits.b2 = 1; // SW3
 800ca7e:	4a29      	ldr	r2, [pc, #164]	@ (800cb24 <getKeyFlags+0xf4>)
 800ca80:	7813      	ldrb	r3, [r2, #0]
 800ca82:	f043 0304 	orr.w	r3, r3, #4
 800ca86:	7013      	strb	r3, [r2, #0]
    }

    if (flags.byte == keyFlagsBak)
 800ca88:	4b26      	ldr	r3, [pc, #152]	@ (800cb24 <getKeyFlags+0xf4>)
 800ca8a:	781b      	ldrb	r3, [r3, #0]
 800ca8c:	461a      	mov	r2, r3
 800ca8e:	4b27      	ldr	r3, [pc, #156]	@ (800cb2c <getKeyFlags+0xfc>)
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	429a      	cmp	r2, r3
 800ca94:	d13c      	bne.n	800cb10 <getKeyFlags+0xe0>
    {
        if (flags.bits.b0)
 800ca96:	4b23      	ldr	r3, [pc, #140]	@ (800cb24 <getKeyFlags+0xf4>)
 800ca98:	781b      	ldrb	r3, [r3, #0]
 800ca9a:	f003 0301 	and.w	r3, r3, #1
 800ca9e:	b2db      	uxtb	r3, r3
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d006      	beq.n	800cab2 <getKeyFlags+0x82>
            keyFlagsBuf |= 1;
 800caa4:	4b22      	ldr	r3, [pc, #136]	@ (800cb30 <getKeyFlags+0x100>)
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	f043 0301 	orr.w	r3, r3, #1
 800caac:	4a20      	ldr	r2, [pc, #128]	@ (800cb30 <getKeyFlags+0x100>)
 800caae:	6013      	str	r3, [r2, #0]
 800cab0:	e005      	b.n	800cabe <getKeyFlags+0x8e>
        else
            keyFlagsBuf &= ~1;
 800cab2:	4b1f      	ldr	r3, [pc, #124]	@ (800cb30 <getKeyFlags+0x100>)
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	f023 0301 	bic.w	r3, r3, #1
 800caba:	4a1d      	ldr	r2, [pc, #116]	@ (800cb30 <getKeyFlags+0x100>)
 800cabc:	6013      	str	r3, [r2, #0]

        if (flags.bits.b1)
 800cabe:	4b19      	ldr	r3, [pc, #100]	@ (800cb24 <getKeyFlags+0xf4>)
 800cac0:	781b      	ldrb	r3, [r3, #0]
 800cac2:	f003 0302 	and.w	r3, r3, #2
 800cac6:	b2db      	uxtb	r3, r3
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d006      	beq.n	800cada <getKeyFlags+0xaa>
            keyFlagsBuf |= 1 << 1;
 800cacc:	4b18      	ldr	r3, [pc, #96]	@ (800cb30 <getKeyFlags+0x100>)
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	f043 0302 	orr.w	r3, r3, #2
 800cad4:	4a16      	ldr	r2, [pc, #88]	@ (800cb30 <getKeyFlags+0x100>)
 800cad6:	6013      	str	r3, [r2, #0]
 800cad8:	e005      	b.n	800cae6 <getKeyFlags+0xb6>
        else
            keyFlagsBuf &= ~(1 << 1);
 800cada:	4b15      	ldr	r3, [pc, #84]	@ (800cb30 <getKeyFlags+0x100>)
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	f023 0302 	bic.w	r3, r3, #2
 800cae2:	4a13      	ldr	r2, [pc, #76]	@ (800cb30 <getKeyFlags+0x100>)
 800cae4:	6013      	str	r3, [r2, #0]

        if (flags.bits.b2)
 800cae6:	4b0f      	ldr	r3, [pc, #60]	@ (800cb24 <getKeyFlags+0xf4>)
 800cae8:	781b      	ldrb	r3, [r3, #0]
 800caea:	f003 0304 	and.w	r3, r3, #4
 800caee:	b2db      	uxtb	r3, r3
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d006      	beq.n	800cb02 <getKeyFlags+0xd2>
            keyFlagsBuf |= 1 << 2;
 800caf4:	4b0e      	ldr	r3, [pc, #56]	@ (800cb30 <getKeyFlags+0x100>)
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	f043 0304 	orr.w	r3, r3, #4
 800cafc:	4a0c      	ldr	r2, [pc, #48]	@ (800cb30 <getKeyFlags+0x100>)
 800cafe:	6013      	str	r3, [r2, #0]
 800cb00:	e00b      	b.n	800cb1a <getKeyFlags+0xea>
        else
            keyFlagsBuf &= ~(1 << 2);
 800cb02:	4b0b      	ldr	r3, [pc, #44]	@ (800cb30 <getKeyFlags+0x100>)
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	f023 0304 	bic.w	r3, r3, #4
 800cb0a:	4a09      	ldr	r2, [pc, #36]	@ (800cb30 <getKeyFlags+0x100>)
 800cb0c:	6013      	str	r3, [r2, #0]
 800cb0e:	e004      	b.n	800cb1a <getKeyFlags+0xea>
    }
    else
    {
        keyFlagsBak = flags.byte;
 800cb10:	4b04      	ldr	r3, [pc, #16]	@ (800cb24 <getKeyFlags+0xf4>)
 800cb12:	781b      	ldrb	r3, [r3, #0]
 800cb14:	461a      	mov	r2, r3
 800cb16:	4b05      	ldr	r3, [pc, #20]	@ (800cb2c <getKeyFlags+0xfc>)
 800cb18:	601a      	str	r2, [r3, #0]
    }
#if DEBUG_KEY
    // displayStuff = keyFlagsBuf;
#endif

    return keyFlagsBuf;
 800cb1a:	4b05      	ldr	r3, [pc, #20]	@ (800cb30 <getKeyFlags+0x100>)
 800cb1c:	681b      	ldr	r3, [r3, #0]
}
 800cb1e:	4618      	mov	r0, r3
 800cb20:	bd80      	pop	{r7, pc}
 800cb22:	bf00      	nop
 800cb24:	20000938 	.word	0x20000938
 800cb28:	48000800 	.word	0x48000800
 800cb2c:	2000093c 	.word	0x2000093c
 800cb30:	20000940 	.word	0x20000940

0800cb34 <keyScan>:

void keyScan()
{
 800cb34:	b580      	push	{r7, lr}
 800cb36:	b082      	sub	sp, #8
 800cb38:	af00      	add	r7, sp, #0

    uint keyFlags;

    keyFlags = getKeyFlags();
 800cb3a:	f7ff ff79 	bl	800ca30 <getKeyFlags>
 800cb3e:	6038      	str	r0, [r7, #0]

    if (keyFlags == 0)
 800cb40:	683b      	ldr	r3, [r7, #0]
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d13b      	bne.n	800cbbe <keyScan+0x8a>
    {
        uchar i;
        for (i = 0; i < KEY_NUM; i++)
 800cb46:	2300      	movs	r3, #0
 800cb48:	71fb      	strb	r3, [r7, #7]
 800cb4a:	e035      	b.n	800cbb8 <keyScan+0x84>
        {
            if (keyStruct[i].keyType == LONG_WITH_SHORT && keyStruct[i].trigCnt > 0)
 800cb4c:	79fa      	ldrb	r2, [r7, #7]
 800cb4e:	4992      	ldr	r1, [pc, #584]	@ (800cd98 <keyScan+0x264>)
 800cb50:	4613      	mov	r3, r2
 800cb52:	005b      	lsls	r3, r3, #1
 800cb54:	4413      	add	r3, r2
 800cb56:	009b      	lsls	r3, r3, #2
 800cb58:	440b      	add	r3, r1
 800cb5a:	781b      	ldrb	r3, [r3, #0]
 800cb5c:	2b01      	cmp	r3, #1
 800cb5e:	d114      	bne.n	800cb8a <keyScan+0x56>
 800cb60:	79fa      	ldrb	r2, [r7, #7]
 800cb62:	498d      	ldr	r1, [pc, #564]	@ (800cd98 <keyScan+0x264>)
 800cb64:	4613      	mov	r3, r2
 800cb66:	005b      	lsls	r3, r3, #1
 800cb68:	4413      	add	r3, r2
 800cb6a:	009b      	lsls	r3, r3, #2
 800cb6c:	440b      	add	r3, r1
 800cb6e:	3304      	adds	r3, #4
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d009      	beq.n	800cb8a <keyScan+0x56>
            {
                keyStruct[i].trigType = TRIG_SHORT;
 800cb76:	79fa      	ldrb	r2, [r7, #7]
 800cb78:	4987      	ldr	r1, [pc, #540]	@ (800cd98 <keyScan+0x264>)
 800cb7a:	4613      	mov	r3, r2
 800cb7c:	005b      	lsls	r3, r3, #1
 800cb7e:	4413      	add	r3, r2
 800cb80:	009b      	lsls	r3, r3, #2
 800cb82:	440b      	add	r3, r1
 800cb84:	3308      	adds	r3, #8
 800cb86:	2201      	movs	r2, #1
 800cb88:	701a      	strb	r2, [r3, #0]
            }
            keyStruct[i].trigCnt = 0;
 800cb8a:	79fa      	ldrb	r2, [r7, #7]
 800cb8c:	4982      	ldr	r1, [pc, #520]	@ (800cd98 <keyScan+0x264>)
 800cb8e:	4613      	mov	r3, r2
 800cb90:	005b      	lsls	r3, r3, #1
 800cb92:	4413      	add	r3, r2
 800cb94:	009b      	lsls	r3, r3, #2
 800cb96:	440b      	add	r3, r1
 800cb98:	3304      	adds	r3, #4
 800cb9a:	2200      	movs	r2, #0
 800cb9c:	601a      	str	r2, [r3, #0]
            keyStruct[i].preKeyValue = NO_TRIG;
 800cb9e:	79fa      	ldrb	r2, [r7, #7]
 800cba0:	497d      	ldr	r1, [pc, #500]	@ (800cd98 <keyScan+0x264>)
 800cba2:	4613      	mov	r3, r2
 800cba4:	005b      	lsls	r3, r3, #1
 800cba6:	4413      	add	r3, r2
 800cba8:	009b      	lsls	r3, r3, #2
 800cbaa:	440b      	add	r3, r1
 800cbac:	3309      	adds	r3, #9
 800cbae:	2200      	movs	r2, #0
 800cbb0:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < KEY_NUM; i++)
 800cbb2:	79fb      	ldrb	r3, [r7, #7]
 800cbb4:	3301      	adds	r3, #1
 800cbb6:	71fb      	strb	r3, [r7, #7]
 800cbb8:	79fb      	ldrb	r3, [r7, #7]
 800cbba:	2b03      	cmp	r3, #3
 800cbbc:	d9c6      	bls.n	800cb4c <keyScan+0x18>
    //                keyStruct[0].trigType = keyStruct[1].preKeyValue;
    //            }
    //        }
    //    }

    if (keyStruct[1].preKeyValue == NO_TRIG)
 800cbbe:	4b76      	ldr	r3, [pc, #472]	@ (800cd98 <keyScan+0x264>)
 800cbc0:	7d5b      	ldrb	r3, [r3, #21]
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d131      	bne.n	800cc2a <keyScan+0xf6>
    {
        if (keyFlags == K(1))
 800cbc6:	683b      	ldr	r3, [r7, #0]
 800cbc8:	2b01      	cmp	r3, #1
 800cbca:	d15d      	bne.n	800cc88 <keyScan+0x154>
        {
            if (keyStruct[1].preKeyValue == NO_TRIG)
 800cbcc:	4b72      	ldr	r3, [pc, #456]	@ (800cd98 <keyScan+0x264>)
 800cbce:	7d5b      	ldrb	r3, [r3, #21]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d159      	bne.n	800cc88 <keyScan+0x154>
            {
                if (keyStruct[1].keyType == SHORT || keyStruct[1].keyType == CONTINUOUS)
 800cbd4:	4b70      	ldr	r3, [pc, #448]	@ (800cd98 <keyScan+0x264>)
 800cbd6:	7b1b      	ldrb	r3, [r3, #12]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d003      	beq.n	800cbe4 <keyScan+0xb0>
 800cbdc:	4b6e      	ldr	r3, [pc, #440]	@ (800cd98 <keyScan+0x264>)
 800cbde:	7b1b      	ldrb	r3, [r3, #12]
 800cbe0:	2b02      	cmp	r3, #2
 800cbe2:	d106      	bne.n	800cbf2 <keyScan+0xbe>
                {
                    keyStruct[1].trigType = TRIG_SHORT;
 800cbe4:	4b6c      	ldr	r3, [pc, #432]	@ (800cd98 <keyScan+0x264>)
 800cbe6:	2201      	movs	r2, #1
 800cbe8:	751a      	strb	r2, [r3, #20]
                    keyStruct[1].preKeyValue = TRIG_SHORT;
 800cbea:	4b6b      	ldr	r3, [pc, #428]	@ (800cd98 <keyScan+0x264>)
 800cbec:	2201      	movs	r2, #1
 800cbee:	755a      	strb	r2, [r3, #21]
 800cbf0:	e04a      	b.n	800cc88 <keyScan+0x154>
                }
                else if (keyStruct[1].keyType == LONG_WITH_SHORT || keyStruct[1].keyType == LONG)
 800cbf2:	4b69      	ldr	r3, [pc, #420]	@ (800cd98 <keyScan+0x264>)
 800cbf4:	7b1b      	ldrb	r3, [r3, #12]
 800cbf6:	2b01      	cmp	r3, #1
 800cbf8:	d003      	beq.n	800cc02 <keyScan+0xce>
 800cbfa:	4b67      	ldr	r3, [pc, #412]	@ (800cd98 <keyScan+0x264>)
 800cbfc:	7b1b      	ldrb	r3, [r3, #12]
 800cbfe:	2b03      	cmp	r3, #3
 800cc00:	d142      	bne.n	800cc88 <keyScan+0x154>
                {
                    if (++keyStruct[1].trigCnt >= KEY1_LONG_CNT)
 800cc02:	4b65      	ldr	r3, [pc, #404]	@ (800cd98 <keyScan+0x264>)
 800cc04:	691b      	ldr	r3, [r3, #16]
 800cc06:	3301      	adds	r3, #1
 800cc08:	4a63      	ldr	r2, [pc, #396]	@ (800cd98 <keyScan+0x264>)
 800cc0a:	6113      	str	r3, [r2, #16]
 800cc0c:	4b62      	ldr	r3, [pc, #392]	@ (800cd98 <keyScan+0x264>)
 800cc0e:	691b      	ldr	r3, [r3, #16]
 800cc10:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800cc14:	d338      	bcc.n	800cc88 <keyScan+0x154>
                    {
                        keyStruct[1].trigCnt = 0;
 800cc16:	4b60      	ldr	r3, [pc, #384]	@ (800cd98 <keyScan+0x264>)
 800cc18:	2200      	movs	r2, #0
 800cc1a:	611a      	str	r2, [r3, #16]
                        keyStruct[1].trigType = TRIG_LONG;
 800cc1c:	4b5e      	ldr	r3, [pc, #376]	@ (800cd98 <keyScan+0x264>)
 800cc1e:	2202      	movs	r2, #2
 800cc20:	751a      	strb	r2, [r3, #20]
                        keyStruct[1].preKeyValue = TRIG_LONG;
 800cc22:	4b5d      	ldr	r3, [pc, #372]	@ (800cd98 <keyScan+0x264>)
 800cc24:	2202      	movs	r2, #2
 800cc26:	755a      	strb	r2, [r3, #21]
 800cc28:	e02e      	b.n	800cc88 <keyScan+0x154>
                    }
                }
            }
        }
    }
    else if (keyStruct[1].keyType == CONTINUOUS)
 800cc2a:	4b5b      	ldr	r3, [pc, #364]	@ (800cd98 <keyScan+0x264>)
 800cc2c:	7b1b      	ldrb	r3, [r3, #12]
 800cc2e:	2b02      	cmp	r3, #2
 800cc30:	d12a      	bne.n	800cc88 <keyScan+0x154>
    {
        if (keyStruct[1].preKeyValue == TRIG_SHORT) // short key
 800cc32:	4b59      	ldr	r3, [pc, #356]	@ (800cd98 <keyScan+0x264>)
 800cc34:	7d5b      	ldrb	r3, [r3, #21]
 800cc36:	2b01      	cmp	r3, #1
 800cc38:	d112      	bne.n	800cc60 <keyScan+0x12c>
        {
            if (++keyStruct[1].trigCnt >= CONTINUOUS_TRIG_CNT)
 800cc3a:	4b57      	ldr	r3, [pc, #348]	@ (800cd98 <keyScan+0x264>)
 800cc3c:	691b      	ldr	r3, [r3, #16]
 800cc3e:	3301      	adds	r3, #1
 800cc40:	4a55      	ldr	r2, [pc, #340]	@ (800cd98 <keyScan+0x264>)
 800cc42:	6113      	str	r3, [r2, #16]
 800cc44:	4b54      	ldr	r3, [pc, #336]	@ (800cd98 <keyScan+0x264>)
 800cc46:	691b      	ldr	r3, [r3, #16]
 800cc48:	2b63      	cmp	r3, #99	@ 0x63
 800cc4a:	d91d      	bls.n	800cc88 <keyScan+0x154>
            {
                keyStruct[1].trigCnt = 0;
 800cc4c:	4b52      	ldr	r3, [pc, #328]	@ (800cd98 <keyScan+0x264>)
 800cc4e:	2200      	movs	r2, #0
 800cc50:	611a      	str	r2, [r3, #16]
                keyStruct[1].trigType = TRIG_LONG; // long
 800cc52:	4b51      	ldr	r3, [pc, #324]	@ (800cd98 <keyScan+0x264>)
 800cc54:	2202      	movs	r2, #2
 800cc56:	751a      	strb	r2, [r3, #20]
                keyStruct[1].preKeyValue = TRIG_LONG;
 800cc58:	4b4f      	ldr	r3, [pc, #316]	@ (800cd98 <keyScan+0x264>)
 800cc5a:	2202      	movs	r2, #2
 800cc5c:	755a      	strb	r2, [r3, #21]
 800cc5e:	e013      	b.n	800cc88 <keyScan+0x154>
            }
        }
        else if (keyStruct[1].preKeyValue == TRIG_LONG) // long key
 800cc60:	4b4d      	ldr	r3, [pc, #308]	@ (800cd98 <keyScan+0x264>)
 800cc62:	7d5b      	ldrb	r3, [r3, #21]
 800cc64:	2b02      	cmp	r3, #2
 800cc66:	d10f      	bne.n	800cc88 <keyScan+0x154>
        {
            if (++keyStruct[1].trigCnt >= CONTINUOUS_INTEVAL)
 800cc68:	4b4b      	ldr	r3, [pc, #300]	@ (800cd98 <keyScan+0x264>)
 800cc6a:	691b      	ldr	r3, [r3, #16]
 800cc6c:	3301      	adds	r3, #1
 800cc6e:	4a4a      	ldr	r2, [pc, #296]	@ (800cd98 <keyScan+0x264>)
 800cc70:	6113      	str	r3, [r2, #16]
 800cc72:	4b49      	ldr	r3, [pc, #292]	@ (800cd98 <keyScan+0x264>)
 800cc74:	691b      	ldr	r3, [r3, #16]
 800cc76:	2b27      	cmp	r3, #39	@ 0x27
 800cc78:	d906      	bls.n	800cc88 <keyScan+0x154>
            {
                keyStruct[1].trigCnt = 0;
 800cc7a:	4b47      	ldr	r3, [pc, #284]	@ (800cd98 <keyScan+0x264>)
 800cc7c:	2200      	movs	r2, #0
 800cc7e:	611a      	str	r2, [r3, #16]
                keyStruct[1].trigType = keyStruct[1].preKeyValue;
 800cc80:	4b45      	ldr	r3, [pc, #276]	@ (800cd98 <keyScan+0x264>)
 800cc82:	7d5a      	ldrb	r2, [r3, #21]
 800cc84:	4b44      	ldr	r3, [pc, #272]	@ (800cd98 <keyScan+0x264>)
 800cc86:	751a      	strb	r2, [r3, #20]
            }
        }
    }

    if (keyStruct[2].preKeyValue == NO_TRIG)
 800cc88:	4b43      	ldr	r3, [pc, #268]	@ (800cd98 <keyScan+0x264>)
 800cc8a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d131      	bne.n	800ccf6 <keyScan+0x1c2>
    {
        if (keyFlags == K(2))
 800cc92:	683b      	ldr	r3, [r7, #0]
 800cc94:	2b02      	cmp	r3, #2
 800cc96:	d163      	bne.n	800cd60 <keyScan+0x22c>
        {

            if (keyStruct[2].keyType == SHORT || keyStruct[2].keyType == CONTINUOUS)
 800cc98:	4b3f      	ldr	r3, [pc, #252]	@ (800cd98 <keyScan+0x264>)
 800cc9a:	7e1b      	ldrb	r3, [r3, #24]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d003      	beq.n	800cca8 <keyScan+0x174>
 800cca0:	4b3d      	ldr	r3, [pc, #244]	@ (800cd98 <keyScan+0x264>)
 800cca2:	7e1b      	ldrb	r3, [r3, #24]
 800cca4:	2b02      	cmp	r3, #2
 800cca6:	d108      	bne.n	800ccba <keyScan+0x186>
            {
                keyStruct[2].trigType = TRIG_SHORT;
 800cca8:	4b3b      	ldr	r3, [pc, #236]	@ (800cd98 <keyScan+0x264>)
 800ccaa:	2201      	movs	r2, #1
 800ccac:	f883 2020 	strb.w	r2, [r3, #32]
                keyStruct[2].preKeyValue = TRIG_SHORT;
 800ccb0:	4b39      	ldr	r3, [pc, #228]	@ (800cd98 <keyScan+0x264>)
 800ccb2:	2201      	movs	r2, #1
 800ccb4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 800ccb8:	e052      	b.n	800cd60 <keyScan+0x22c>
            }
            else if (keyStruct[2].keyType == LONG_WITH_SHORT || keyStruct[2].keyType == LONG)
 800ccba:	4b37      	ldr	r3, [pc, #220]	@ (800cd98 <keyScan+0x264>)
 800ccbc:	7e1b      	ldrb	r3, [r3, #24]
 800ccbe:	2b01      	cmp	r3, #1
 800ccc0:	d003      	beq.n	800ccca <keyScan+0x196>
 800ccc2:	4b35      	ldr	r3, [pc, #212]	@ (800cd98 <keyScan+0x264>)
 800ccc4:	7e1b      	ldrb	r3, [r3, #24]
 800ccc6:	2b03      	cmp	r3, #3
 800ccc8:	d14a      	bne.n	800cd60 <keyScan+0x22c>
            {
                if (++keyStruct[2].trigCnt >= KEY2_LONG_CNT)
 800ccca:	4b33      	ldr	r3, [pc, #204]	@ (800cd98 <keyScan+0x264>)
 800cccc:	69db      	ldr	r3, [r3, #28]
 800ccce:	3301      	adds	r3, #1
 800ccd0:	4a31      	ldr	r2, [pc, #196]	@ (800cd98 <keyScan+0x264>)
 800ccd2:	61d3      	str	r3, [r2, #28]
 800ccd4:	4b30      	ldr	r3, [pc, #192]	@ (800cd98 <keyScan+0x264>)
 800ccd6:	69db      	ldr	r3, [r3, #28]
 800ccd8:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800ccdc:	d340      	bcc.n	800cd60 <keyScan+0x22c>
                {
                    keyStruct[2].trigCnt = 0;
 800ccde:	4b2e      	ldr	r3, [pc, #184]	@ (800cd98 <keyScan+0x264>)
 800cce0:	2200      	movs	r2, #0
 800cce2:	61da      	str	r2, [r3, #28]
                    keyStruct[2].trigType = TRIG_LONG;
 800cce4:	4b2c      	ldr	r3, [pc, #176]	@ (800cd98 <keyScan+0x264>)
 800cce6:	2202      	movs	r2, #2
 800cce8:	f883 2020 	strb.w	r2, [r3, #32]
                    keyStruct[2].preKeyValue = TRIG_LONG;
 800ccec:	4b2a      	ldr	r3, [pc, #168]	@ (800cd98 <keyScan+0x264>)
 800ccee:	2202      	movs	r2, #2
 800ccf0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 800ccf4:	e034      	b.n	800cd60 <keyScan+0x22c>
                }
            }
        }
    }
    else if (keyStruct[2].keyType == CONTINUOUS)
 800ccf6:	4b28      	ldr	r3, [pc, #160]	@ (800cd98 <keyScan+0x264>)
 800ccf8:	7e1b      	ldrb	r3, [r3, #24]
 800ccfa:	2b02      	cmp	r3, #2
 800ccfc:	d130      	bne.n	800cd60 <keyScan+0x22c>
    {
        if (keyStruct[2].preKeyValue == TRIG_SHORT) // short key
 800ccfe:	4b26      	ldr	r3, [pc, #152]	@ (800cd98 <keyScan+0x264>)
 800cd00:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800cd04:	2b01      	cmp	r3, #1
 800cd06:	d114      	bne.n	800cd32 <keyScan+0x1fe>
        {
            if (++keyStruct[2].trigCnt >= CONTINUOUS_TRIG_CNT)
 800cd08:	4b23      	ldr	r3, [pc, #140]	@ (800cd98 <keyScan+0x264>)
 800cd0a:	69db      	ldr	r3, [r3, #28]
 800cd0c:	3301      	adds	r3, #1
 800cd0e:	4a22      	ldr	r2, [pc, #136]	@ (800cd98 <keyScan+0x264>)
 800cd10:	61d3      	str	r3, [r2, #28]
 800cd12:	4b21      	ldr	r3, [pc, #132]	@ (800cd98 <keyScan+0x264>)
 800cd14:	69db      	ldr	r3, [r3, #28]
 800cd16:	2b63      	cmp	r3, #99	@ 0x63
 800cd18:	d922      	bls.n	800cd60 <keyScan+0x22c>
            {
                keyStruct[2].trigCnt = 0;
 800cd1a:	4b1f      	ldr	r3, [pc, #124]	@ (800cd98 <keyScan+0x264>)
 800cd1c:	2200      	movs	r2, #0
 800cd1e:	61da      	str	r2, [r3, #28]
                keyStruct[2].trigType = TRIG_LONG; // long
 800cd20:	4b1d      	ldr	r3, [pc, #116]	@ (800cd98 <keyScan+0x264>)
 800cd22:	2202      	movs	r2, #2
 800cd24:	f883 2020 	strb.w	r2, [r3, #32]
                keyStruct[2].preKeyValue = TRIG_LONG;
 800cd28:	4b1b      	ldr	r3, [pc, #108]	@ (800cd98 <keyScan+0x264>)
 800cd2a:	2202      	movs	r2, #2
 800cd2c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 800cd30:	e016      	b.n	800cd60 <keyScan+0x22c>
            }
        }
        else if (keyStruct[2].preKeyValue == TRIG_LONG) // long key
 800cd32:	4b19      	ldr	r3, [pc, #100]	@ (800cd98 <keyScan+0x264>)
 800cd34:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800cd38:	2b02      	cmp	r3, #2
 800cd3a:	d111      	bne.n	800cd60 <keyScan+0x22c>
        {
            if (++keyStruct[2].trigCnt >= CONTINUOUS_INTEVAL)
 800cd3c:	4b16      	ldr	r3, [pc, #88]	@ (800cd98 <keyScan+0x264>)
 800cd3e:	69db      	ldr	r3, [r3, #28]
 800cd40:	3301      	adds	r3, #1
 800cd42:	4a15      	ldr	r2, [pc, #84]	@ (800cd98 <keyScan+0x264>)
 800cd44:	61d3      	str	r3, [r2, #28]
 800cd46:	4b14      	ldr	r3, [pc, #80]	@ (800cd98 <keyScan+0x264>)
 800cd48:	69db      	ldr	r3, [r3, #28]
 800cd4a:	2b27      	cmp	r3, #39	@ 0x27
 800cd4c:	d908      	bls.n	800cd60 <keyScan+0x22c>
            {
                keyStruct[2].trigCnt = 0;
 800cd4e:	4b12      	ldr	r3, [pc, #72]	@ (800cd98 <keyScan+0x264>)
 800cd50:	2200      	movs	r2, #0
 800cd52:	61da      	str	r2, [r3, #28]
                keyStruct[2].trigType = keyStruct[2].preKeyValue;
 800cd54:	4b10      	ldr	r3, [pc, #64]	@ (800cd98 <keyScan+0x264>)
 800cd56:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 800cd5a:	4b0f      	ldr	r3, [pc, #60]	@ (800cd98 <keyScan+0x264>)
 800cd5c:	f883 2020 	strb.w	r2, [r3, #32]
            }
        }
    }

    if (keyStruct[3].preKeyValue == NO_TRIG)
 800cd60:	4b0d      	ldr	r3, [pc, #52]	@ (800cd98 <keyScan+0x264>)
 800cd62:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d137      	bne.n	800cdda <keyScan+0x2a6>
    {
        if (keyFlags == K(3))
 800cd6a:	683b      	ldr	r3, [r7, #0]
 800cd6c:	2b04      	cmp	r3, #4
 800cd6e:	d16a      	bne.n	800ce46 <keyScan+0x312>
        {
            if (keyStruct[3].keyType == SHORT || keyStruct[3].keyType == CONTINUOUS)
 800cd70:	4b09      	ldr	r3, [pc, #36]	@ (800cd98 <keyScan+0x264>)
 800cd72:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d004      	beq.n	800cd84 <keyScan+0x250>
 800cd7a:	4b07      	ldr	r3, [pc, #28]	@ (800cd98 <keyScan+0x264>)
 800cd7c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800cd80:	2b02      	cmp	r3, #2
 800cd82:	d10b      	bne.n	800cd9c <keyScan+0x268>
            {
                keyStruct[3].trigType = TRIG_SHORT;
 800cd84:	4b04      	ldr	r3, [pc, #16]	@ (800cd98 <keyScan+0x264>)
 800cd86:	2201      	movs	r2, #1
 800cd88:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
                keyStruct[3].preKeyValue = TRIG_SHORT;
 800cd8c:	4b02      	ldr	r3, [pc, #8]	@ (800cd98 <keyScan+0x264>)
 800cd8e:	2201      	movs	r2, #1
 800cd90:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
                keyStruct[3].trigCnt = 0;
                keyStruct[3].trigType = keyStruct[3].preKeyValue;
            }
        }
    }
}
 800cd94:	e057      	b.n	800ce46 <keyScan+0x312>
 800cd96:	bf00      	nop
 800cd98:	20000908 	.word	0x20000908
            else if (keyStruct[3].keyType == LONG_WITH_SHORT || keyStruct[3].keyType == LONG)
 800cd9c:	4b2c      	ldr	r3, [pc, #176]	@ (800ce50 <keyScan+0x31c>)
 800cd9e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800cda2:	2b01      	cmp	r3, #1
 800cda4:	d004      	beq.n	800cdb0 <keyScan+0x27c>
 800cda6:	4b2a      	ldr	r3, [pc, #168]	@ (800ce50 <keyScan+0x31c>)
 800cda8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800cdac:	2b03      	cmp	r3, #3
 800cdae:	d14a      	bne.n	800ce46 <keyScan+0x312>
                if (++keyStruct[3].trigCnt >= KEY3_LONG_CNT)
 800cdb0:	4b27      	ldr	r3, [pc, #156]	@ (800ce50 <keyScan+0x31c>)
 800cdb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cdb4:	3301      	adds	r3, #1
 800cdb6:	4a26      	ldr	r2, [pc, #152]	@ (800ce50 <keyScan+0x31c>)
 800cdb8:	6293      	str	r3, [r2, #40]	@ 0x28
 800cdba:	4b25      	ldr	r3, [pc, #148]	@ (800ce50 <keyScan+0x31c>)
 800cdbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d041      	beq.n	800ce46 <keyScan+0x312>
                    keyStruct[3].trigCnt = 0;
 800cdc2:	4b23      	ldr	r3, [pc, #140]	@ (800ce50 <keyScan+0x31c>)
 800cdc4:	2200      	movs	r2, #0
 800cdc6:	629a      	str	r2, [r3, #40]	@ 0x28
                    keyStruct[3].trigType = TRIG_LONG;
 800cdc8:	4b21      	ldr	r3, [pc, #132]	@ (800ce50 <keyScan+0x31c>)
 800cdca:	2202      	movs	r2, #2
 800cdcc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
                    keyStruct[3].preKeyValue = TRIG_LONG;
 800cdd0:	4b1f      	ldr	r3, [pc, #124]	@ (800ce50 <keyScan+0x31c>)
 800cdd2:	2202      	movs	r2, #2
 800cdd4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 800cdd8:	e035      	b.n	800ce46 <keyScan+0x312>
    else if (keyStruct[3].keyType == CONTINUOUS)
 800cdda:	4b1d      	ldr	r3, [pc, #116]	@ (800ce50 <keyScan+0x31c>)
 800cddc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800cde0:	2b02      	cmp	r3, #2
 800cde2:	d130      	bne.n	800ce46 <keyScan+0x312>
        if (keyStruct[3].preKeyValue == TRIG_SHORT) // short key
 800cde4:	4b1a      	ldr	r3, [pc, #104]	@ (800ce50 <keyScan+0x31c>)
 800cde6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800cdea:	2b01      	cmp	r3, #1
 800cdec:	d114      	bne.n	800ce18 <keyScan+0x2e4>
            if (++keyStruct[3].trigCnt >= CONTINUOUS_TRIG_CNT)
 800cdee:	4b18      	ldr	r3, [pc, #96]	@ (800ce50 <keyScan+0x31c>)
 800cdf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cdf2:	3301      	adds	r3, #1
 800cdf4:	4a16      	ldr	r2, [pc, #88]	@ (800ce50 <keyScan+0x31c>)
 800cdf6:	6293      	str	r3, [r2, #40]	@ 0x28
 800cdf8:	4b15      	ldr	r3, [pc, #84]	@ (800ce50 <keyScan+0x31c>)
 800cdfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cdfc:	2b63      	cmp	r3, #99	@ 0x63
 800cdfe:	d922      	bls.n	800ce46 <keyScan+0x312>
                keyStruct[3].trigCnt = 0;
 800ce00:	4b13      	ldr	r3, [pc, #76]	@ (800ce50 <keyScan+0x31c>)
 800ce02:	2200      	movs	r2, #0
 800ce04:	629a      	str	r2, [r3, #40]	@ 0x28
                keyStruct[3].trigType = TRIG_LONG; // long
 800ce06:	4b12      	ldr	r3, [pc, #72]	@ (800ce50 <keyScan+0x31c>)
 800ce08:	2202      	movs	r2, #2
 800ce0a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
                keyStruct[3].preKeyValue = TRIG_LONG;
 800ce0e:	4b10      	ldr	r3, [pc, #64]	@ (800ce50 <keyScan+0x31c>)
 800ce10:	2202      	movs	r2, #2
 800ce12:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 800ce16:	e016      	b.n	800ce46 <keyScan+0x312>
        else if (keyStruct[3].preKeyValue == TRIG_LONG) // long key
 800ce18:	4b0d      	ldr	r3, [pc, #52]	@ (800ce50 <keyScan+0x31c>)
 800ce1a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ce1e:	2b02      	cmp	r3, #2
 800ce20:	d111      	bne.n	800ce46 <keyScan+0x312>
            if (++keyStruct[3].trigCnt >= CONTINUOUS_INTEVAL)
 800ce22:	4b0b      	ldr	r3, [pc, #44]	@ (800ce50 <keyScan+0x31c>)
 800ce24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce26:	3301      	adds	r3, #1
 800ce28:	4a09      	ldr	r2, [pc, #36]	@ (800ce50 <keyScan+0x31c>)
 800ce2a:	6293      	str	r3, [r2, #40]	@ 0x28
 800ce2c:	4b08      	ldr	r3, [pc, #32]	@ (800ce50 <keyScan+0x31c>)
 800ce2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce30:	2b27      	cmp	r3, #39	@ 0x27
 800ce32:	d908      	bls.n	800ce46 <keyScan+0x312>
                keyStruct[3].trigCnt = 0;
 800ce34:	4b06      	ldr	r3, [pc, #24]	@ (800ce50 <keyScan+0x31c>)
 800ce36:	2200      	movs	r2, #0
 800ce38:	629a      	str	r2, [r3, #40]	@ 0x28
                keyStruct[3].trigType = keyStruct[3].preKeyValue;
 800ce3a:	4b05      	ldr	r3, [pc, #20]	@ (800ce50 <keyScan+0x31c>)
 800ce3c:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 800ce40:	4b03      	ldr	r3, [pc, #12]	@ (800ce50 <keyScan+0x31c>)
 800ce42:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
}
 800ce46:	bf00      	nop
 800ce48:	3708      	adds	r7, #8
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	bd80      	pop	{r7, pc}
 800ce4e:	bf00      	nop
 800ce50:	20000908 	.word	0x20000908

0800ce54 <getKeyState>:

/*
将物理按键转化为逻辑按键
 */
void getKeyState(KeyState *keyState)
{
 800ce54:	b480      	push	{r7}
 800ce56:	b085      	sub	sp, #20
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	6078      	str	r0, [r7, #4]
    uchar i;

    if (keyStruct[1].trigType == TRIG_SHORT)
 800ce5c:	4b1b      	ldr	r3, [pc, #108]	@ (800cecc <getKeyState+0x78>)
 800ce5e:	7d1b      	ldrb	r3, [r3, #20]
 800ce60:	2b01      	cmp	r3, #1
 800ce62:	d103      	bne.n	800ce6c <getKeyState+0x18>
        *keyState = USER1_SHORT;
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	2201      	movs	r2, #1
 800ce68:	701a      	strb	r2, [r3, #0]
 800ce6a:	e014      	b.n	800ce96 <getKeyState+0x42>
    else if (keyStruct[2].trigType == TRIG_SHORT)
 800ce6c:	4b17      	ldr	r3, [pc, #92]	@ (800cecc <getKeyState+0x78>)
 800ce6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ce72:	2b01      	cmp	r3, #1
 800ce74:	d103      	bne.n	800ce7e <getKeyState+0x2a>
        *keyState = USER2_SHORT;
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	2202      	movs	r2, #2
 800ce7a:	701a      	strb	r2, [r3, #0]
 800ce7c:	e00b      	b.n	800ce96 <getKeyState+0x42>
    else if (keyStruct[3].trigType == TRIG_SHORT)
 800ce7e:	4b13      	ldr	r3, [pc, #76]	@ (800cecc <getKeyState+0x78>)
 800ce80:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800ce84:	2b01      	cmp	r3, #1
 800ce86:	d103      	bne.n	800ce90 <getKeyState+0x3c>
        *keyState = USER3_SHORT;
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	2203      	movs	r2, #3
 800ce8c:	701a      	strb	r2, [r3, #0]
 800ce8e:	e002      	b.n	800ce96 <getKeyState+0x42>
    else
        *keyState = NONE_KEY;
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	2200      	movs	r2, #0
 800ce94:	701a      	strb	r2, [r3, #0]

    for (i = 0; i < KEY_NUM; i++)
 800ce96:	2300      	movs	r3, #0
 800ce98:	73fb      	strb	r3, [r7, #15]
 800ce9a:	e00c      	b.n	800ceb6 <getKeyState+0x62>
    {
        keyStruct[i].trigType = NO_TRIG;
 800ce9c:	7bfa      	ldrb	r2, [r7, #15]
 800ce9e:	490b      	ldr	r1, [pc, #44]	@ (800cecc <getKeyState+0x78>)
 800cea0:	4613      	mov	r3, r2
 800cea2:	005b      	lsls	r3, r3, #1
 800cea4:	4413      	add	r3, r2
 800cea6:	009b      	lsls	r3, r3, #2
 800cea8:	440b      	add	r3, r1
 800ceaa:	3308      	adds	r3, #8
 800ceac:	2200      	movs	r2, #0
 800ceae:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < KEY_NUM; i++)
 800ceb0:	7bfb      	ldrb	r3, [r7, #15]
 800ceb2:	3301      	adds	r3, #1
 800ceb4:	73fb      	strb	r3, [r7, #15]
 800ceb6:	7bfb      	ldrb	r3, [r7, #15]
 800ceb8:	2b03      	cmp	r3, #3
 800ceba:	d9ef      	bls.n	800ce9c <getKeyState+0x48>
    }
}
 800cebc:	bf00      	nop
 800cebe:	bf00      	nop
 800cec0:	3714      	adds	r7, #20
 800cec2:	46bd      	mov	sp, r7
 800cec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec8:	4770      	bx	lr
 800ceca:	bf00      	nop
 800cecc:	20000908 	.word	0x20000908

0800ced0 <LED_drive>:
#include "led.h"

bool led1On, led2On;

void LED_drive()
{
 800ced0:	b580      	push	{r7, lr}
 800ced2:	af00      	add	r7, sp, #0
    if (led1On)
 800ced4:	4b0f      	ldr	r3, [pc, #60]	@ (800cf14 <LED_drive+0x44>)
 800ced6:	781b      	ldrb	r3, [r3, #0]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d005      	beq.n	800cee8 <LED_drive+0x18>
        LED1_ON;
 800cedc:	2200      	movs	r2, #0
 800cede:	2140      	movs	r1, #64	@ 0x40
 800cee0:	480d      	ldr	r0, [pc, #52]	@ (800cf18 <LED_drive+0x48>)
 800cee2:	f7f9 fc87 	bl	80067f4 <HAL_GPIO_WritePin>
 800cee6:	e004      	b.n	800cef2 <LED_drive+0x22>
    else
        LED1_OFF;
 800cee8:	2201      	movs	r2, #1
 800ceea:	2140      	movs	r1, #64	@ 0x40
 800ceec:	480a      	ldr	r0, [pc, #40]	@ (800cf18 <LED_drive+0x48>)
 800ceee:	f7f9 fc81 	bl	80067f4 <HAL_GPIO_WritePin>

    if (led2On)
 800cef2:	4b0a      	ldr	r3, [pc, #40]	@ (800cf1c <LED_drive+0x4c>)
 800cef4:	781b      	ldrb	r3, [r3, #0]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d005      	beq.n	800cf06 <LED_drive+0x36>
        LED2_ON;
 800cefa:	2200      	movs	r2, #0
 800cefc:	2110      	movs	r1, #16
 800cefe:	4806      	ldr	r0, [pc, #24]	@ (800cf18 <LED_drive+0x48>)
 800cf00:	f7f9 fc78 	bl	80067f4 <HAL_GPIO_WritePin>
    else
        LED2_OFF;
}
 800cf04:	e004      	b.n	800cf10 <LED_drive+0x40>
        LED2_OFF;
 800cf06:	2201      	movs	r2, #1
 800cf08:	2110      	movs	r1, #16
 800cf0a:	4803      	ldr	r0, [pc, #12]	@ (800cf18 <LED_drive+0x48>)
 800cf0c:	f7f9 fc72 	bl	80067f4 <HAL_GPIO_WritePin>
}
 800cf10:	bf00      	nop
 800cf12:	bd80      	pop	{r7, pc}
 800cf14:	20000944 	.word	0x20000944
 800cf18:	48000800 	.word	0x48000800
 800cf1c:	20000945 	.word	0x20000945

0800cf20 <lpfInit>:
#include "lowpass_filter.h"

void lpfInit(LowPassFilter *filter, const float _Tf, const float _dt)
{
 800cf20:	b480      	push	{r7}
 800cf22:	b085      	sub	sp, #20
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	60f8      	str	r0, [r7, #12]
 800cf28:	ed87 0a02 	vstr	s0, [r7, #8]
 800cf2c:	edc7 0a01 	vstr	s1, [r7, #4]
    filter->Tf = _Tf;
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	68ba      	ldr	r2, [r7, #8]
 800cf34:	601a      	str	r2, [r3, #0]
    filter->dt = _dt;
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	687a      	ldr	r2, [r7, #4]
 800cf3a:	605a      	str	r2, [r3, #4]
    filter->y_prev = 0;
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	f04f 0200 	mov.w	r2, #0
 800cf42:	609a      	str	r2, [r3, #8]
}
 800cf44:	bf00      	nop
 800cf46:	3714      	adds	r7, #20
 800cf48:	46bd      	mov	sp, r7
 800cf4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf4e:	4770      	bx	lr

0800cf50 <lpfOperator>:

float lpfOperator(LowPassFilter *filter, float x)
{
 800cf50:	b480      	push	{r7}
 800cf52:	b085      	sub	sp, #20
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	6078      	str	r0, [r7, #4]
 800cf58:	ed87 0a00 	vstr	s0, [r7]

    float alpha = filter->Tf / (filter->Tf + filter->dt);
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	edd3 6a00 	vldr	s13, [r3]
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	ed93 7a00 	vldr	s14, [r3]
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	edd3 7a01 	vldr	s15, [r3, #4]
 800cf6e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800cf72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cf76:	edc7 7a03 	vstr	s15, [r7, #12]
    float y = alpha * filter->y_prev + (1.0f - alpha) * x;
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	ed93 7a02 	vldr	s14, [r3, #8]
 800cf80:	edd7 7a03 	vldr	s15, [r7, #12]
 800cf84:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cf88:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cf8c:	edd7 7a03 	vldr	s15, [r7, #12]
 800cf90:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800cf94:	edd7 7a00 	vldr	s15, [r7]
 800cf98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cf9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cfa0:	edc7 7a02 	vstr	s15, [r7, #8]
    filter->y_prev = y;
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	68ba      	ldr	r2, [r7, #8]
 800cfa8:	609a      	str	r2, [r3, #8]

    return y;
 800cfaa:	68bb      	ldr	r3, [r7, #8]
 800cfac:	ee07 3a90 	vmov	s15, r3
}
 800cfb0:	eeb0 0a67 	vmov.f32	s0, s15
 800cfb4:	3714      	adds	r7, #20
 800cfb6:	46bd      	mov	sp, r7
 800cfb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfbc:	4770      	bx	lr
	...

0800cfc0 <_sin>:

// function approximating the sine calculation by using fixed size array
// uses a 65 element lookup table and interpolation
// thanks to @dekutree for his work on optimizing this
__attribute__((weak)) float _sin(float a)
{
 800cfc0:	b580      	push	{r7, lr}
 800cfc2:	b086      	sub	sp, #24
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	ed87 0a01 	vstr	s0, [r7, #4]
  // 16bit integer array for sine lookup. interpolation is used for better precision
  // 16 bit precision on sine value, 8 bit fractional value for interpolation, 6bit LUT size
  // resulting precision compared to stdlib sine is 0.00006480 (RMS difference in range -PI,PI for 3217 steps)
  static uint16_t sine_array[65] = {0, 804, 1608, 2411, 3212, 4011, 4808, 5602, 6393, 7180, 7962, 8740, 9512, 10279, 11039, 11793, 12540, 13279, 14010, 14733, 15447, 16151, 16846, 17531, 18205, 18868, 19520, 20160, 20788, 21403, 22006, 22595, 23170, 23732, 24279, 24812, 25330, 25833, 26320, 26791, 27246, 27684, 28106, 28511, 28899, 29269, 29622, 29957, 30274, 30572, 30853, 31114, 31357, 31581, 31786, 31972, 32138, 32286, 32413, 32522, 32610, 32679, 32729, 32758, 32768};
  unsigned int i = (unsigned int)(a * (64 * 4 * 256.0 / _2PI));
 800cfca:	6878      	ldr	r0, [r7, #4]
 800cfcc:	f7f3 fae4 	bl	8000598 <__aeabi_f2d>
 800cfd0:	a339      	add	r3, pc, #228	@ (adr r3, 800d0b8 <_sin+0xf8>)
 800cfd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfd6:	f7f3 fb37 	bl	8000648 <__aeabi_dmul>
 800cfda:	4602      	mov	r2, r0
 800cfdc:	460b      	mov	r3, r1
 800cfde:	4610      	mov	r0, r2
 800cfe0:	4619      	mov	r1, r3
 800cfe2:	f7f3 fe09 	bl	8000bf8 <__aeabi_d2uiz>
 800cfe6:	4603      	mov	r3, r0
 800cfe8:	60fb      	str	r3, [r7, #12]
  int t1, t2, frac = i & 0xff;
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	b2db      	uxtb	r3, r3
 800cfee:	60bb      	str	r3, [r7, #8]
  i = (i >> 8) & 0xff;
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	0a1b      	lsrs	r3, r3, #8
 800cff4:	b2db      	uxtb	r3, r3
 800cff6:	60fb      	str	r3, [r7, #12]
  if (i < 64)
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	2b3f      	cmp	r3, #63	@ 0x3f
 800cffc:	d80b      	bhi.n	800d016 <_sin+0x56>
  {
    t1 = sine_array[i];
 800cffe:	4a2c      	ldr	r2, [pc, #176]	@ (800d0b0 <_sin+0xf0>)
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d006:	617b      	str	r3, [r7, #20]
    t2 = sine_array[i + 1];
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	3301      	adds	r3, #1
 800d00c:	4a28      	ldr	r2, [pc, #160]	@ (800d0b0 <_sin+0xf0>)
 800d00e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d012:	613b      	str	r3, [r7, #16]
 800d014:	e033      	b.n	800d07e <_sin+0xbe>
  }
  else if (i < 128)
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	2b7f      	cmp	r3, #127	@ 0x7f
 800d01a:	d80e      	bhi.n	800d03a <_sin+0x7a>
  {
    t1 = sine_array[128 - i];
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 800d022:	4a23      	ldr	r2, [pc, #140]	@ (800d0b0 <_sin+0xf0>)
 800d024:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d028:	617b      	str	r3, [r7, #20]
    t2 = sine_array[127 - i];
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 800d030:	4a1f      	ldr	r2, [pc, #124]	@ (800d0b0 <_sin+0xf0>)
 800d032:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d036:	613b      	str	r3, [r7, #16]
 800d038:	e021      	b.n	800d07e <_sin+0xbe>
  }
  else if (i < 192)
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	2bbf      	cmp	r3, #191	@ 0xbf
 800d03e:	d80e      	bhi.n	800d05e <_sin+0x9e>
  {
    t1 = -sine_array[-128 + i];
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	3b80      	subs	r3, #128	@ 0x80
 800d044:	4a1a      	ldr	r2, [pc, #104]	@ (800d0b0 <_sin+0xf0>)
 800d046:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d04a:	425b      	negs	r3, r3
 800d04c:	617b      	str	r3, [r7, #20]
    t2 = -sine_array[-127 + i];
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	3b7f      	subs	r3, #127	@ 0x7f
 800d052:	4a17      	ldr	r2, [pc, #92]	@ (800d0b0 <_sin+0xf0>)
 800d054:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d058:	425b      	negs	r3, r3
 800d05a:	613b      	str	r3, [r7, #16]
 800d05c:	e00f      	b.n	800d07e <_sin+0xbe>
  }
  else
  {
    t1 = -sine_array[256 - i];
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 800d064:	4a12      	ldr	r2, [pc, #72]	@ (800d0b0 <_sin+0xf0>)
 800d066:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d06a:	425b      	negs	r3, r3
 800d06c:	617b      	str	r3, [r7, #20]
    t2 = -sine_array[255 - i];
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 800d074:	4a0e      	ldr	r2, [pc, #56]	@ (800d0b0 <_sin+0xf0>)
 800d076:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d07a:	425b      	negs	r3, r3
 800d07c:	613b      	str	r3, [r7, #16]
  }
  return (1.0f / 32768.0f) * (t1 + (((t2 - t1) * frac) >> 8));
 800d07e:	693a      	ldr	r2, [r7, #16]
 800d080:	697b      	ldr	r3, [r7, #20]
 800d082:	1ad3      	subs	r3, r2, r3
 800d084:	68ba      	ldr	r2, [r7, #8]
 800d086:	fb02 f303 	mul.w	r3, r2, r3
 800d08a:	121a      	asrs	r2, r3, #8
 800d08c:	697b      	ldr	r3, [r7, #20]
 800d08e:	4413      	add	r3, r2
 800d090:	ee07 3a90 	vmov	s15, r3
 800d094:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d098:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 800d0b4 <_sin+0xf4>
 800d09c:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800d0a0:	eeb0 0a67 	vmov.f32	s0, s15
 800d0a4:	3718      	adds	r7, #24
 800d0a6:	46bd      	mov	sp, r7
 800d0a8:	bd80      	pop	{r7, pc}
 800d0aa:	bf00      	nop
 800d0ac:	f3af 8000 	nop.w
 800d0b0:	2000000c 	.word	0x2000000c
 800d0b4:	38000000 	.word	0x38000000
 800d0b8:	6446f9b4 	.word	0x6446f9b4
 800d0bc:	40c45f30 	.word	0x40c45f30

0800d0c0 <_cos>:
// ~55us (float array)
// ~56us (int array)
// precision +-0.005
// it has to receive an angle in between 0 and 2PI
__attribute__((weak)) float _cos(float a)
{
 800d0c0:	b580      	push	{r7, lr}
 800d0c2:	b084      	sub	sp, #16
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	ed87 0a01 	vstr	s0, [r7, #4]
  float a_sin = a + _PI_2;
 800d0ca:	edd7 7a01 	vldr	s15, [r7, #4]
 800d0ce:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 800d118 <_cos+0x58>
 800d0d2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d0d6:	edc7 7a03 	vstr	s15, [r7, #12]
  a_sin = a_sin > _2PI ? a_sin - _2PI : a_sin;
 800d0da:	edd7 7a03 	vldr	s15, [r7, #12]
 800d0de:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800d11c <_cos+0x5c>
 800d0e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d0e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0ea:	dd06      	ble.n	800d0fa <_cos+0x3a>
 800d0ec:	edd7 7a03 	vldr	s15, [r7, #12]
 800d0f0:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 800d11c <_cos+0x5c>
 800d0f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d0f8:	e001      	b.n	800d0fe <_cos+0x3e>
 800d0fa:	edd7 7a03 	vldr	s15, [r7, #12]
 800d0fe:	edc7 7a03 	vstr	s15, [r7, #12]
  return _sin(a_sin);
 800d102:	ed97 0a03 	vldr	s0, [r7, #12]
 800d106:	f7ff ff5b 	bl	800cfc0 <_sin>
 800d10a:	eef0 7a40 	vmov.f32	s15, s0
}
 800d10e:	eeb0 0a67 	vmov.f32	s0, s15
 800d112:	3710      	adds	r7, #16
 800d114:	46bd      	mov	sp, r7
 800d116:	bd80      	pop	{r7, pc}
 800d118:	3fc90fdb 	.word	0x3fc90fdb
 800d11c:	40c90fdb 	.word	0x40c90fdb

0800d120 <_sincos>:

__attribute__((weak)) void _sincos(float a, float *s, float *c)
{
 800d120:	b580      	push	{r7, lr}
 800d122:	b084      	sub	sp, #16
 800d124:	af00      	add	r7, sp, #0
 800d126:	ed87 0a03 	vstr	s0, [r7, #12]
 800d12a:	60b8      	str	r0, [r7, #8]
 800d12c:	6079      	str	r1, [r7, #4]
  *s = _sin(a);
 800d12e:	ed97 0a03 	vldr	s0, [r7, #12]
 800d132:	f7ff ff45 	bl	800cfc0 <_sin>
 800d136:	eef0 7a40 	vmov.f32	s15, s0
 800d13a:	68bb      	ldr	r3, [r7, #8]
 800d13c:	edc3 7a00 	vstr	s15, [r3]
  *c = _cos(a);
 800d140:	ed97 0a03 	vldr	s0, [r7, #12]
 800d144:	f7ff ffbc 	bl	800d0c0 <_cos>
 800d148:	eef0 7a40 	vmov.f32	s15, s0
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	edc3 7a00 	vstr	s15, [r3]
}
 800d152:	bf00      	nop
 800d154:	3710      	adds	r7, #16
 800d156:	46bd      	mov	sp, r7
 800d158:	bd80      	pop	{r7, pc}
 800d15a:	0000      	movs	r0, r0
 800d15c:	0000      	movs	r0, r0
	...

0800d160 <_normalizeAngle>:
  return r;
}

// normalizing radian angle to [0,2PI]
__attribute__((weak)) float _normalizeAngle(float angle)
{
 800d160:	b580      	push	{r7, lr}
 800d162:	b084      	sub	sp, #16
 800d164:	af00      	add	r7, sp, #0
 800d166:	ed87 0a01 	vstr	s0, [r7, #4]
  float a = fmod(angle, _2PI);
 800d16a:	6878      	ldr	r0, [r7, #4]
 800d16c:	f7f3 fa14 	bl	8000598 <__aeabi_f2d>
 800d170:	4602      	mov	r2, r0
 800d172:	460b      	mov	r3, r1
 800d174:	ed9f 1b12 	vldr	d1, [pc, #72]	@ 800d1c0 <_normalizeAngle+0x60>
 800d178:	ec43 2b10 	vmov	d0, r2, r3
 800d17c:	f005 f8b2 	bl	80122e4 <fmod>
 800d180:	ec53 2b10 	vmov	r2, r3, d0
 800d184:	4610      	mov	r0, r2
 800d186:	4619      	mov	r1, r3
 800d188:	f7f3 fd56 	bl	8000c38 <__aeabi_d2f>
 800d18c:	4603      	mov	r3, r0
 800d18e:	60fb      	str	r3, [r7, #12]
  return a >= 0 ? a : (a + _2PI);
 800d190:	edd7 7a03 	vldr	s15, [r7, #12]
 800d194:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d19c:	db02      	blt.n	800d1a4 <_normalizeAngle+0x44>
 800d19e:	edd7 7a03 	vldr	s15, [r7, #12]
 800d1a2:	e005      	b.n	800d1b0 <_normalizeAngle+0x50>
 800d1a4:	edd7 7a03 	vldr	s15, [r7, #12]
 800d1a8:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800d1c8 <_normalizeAngle+0x68>
 800d1ac:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 800d1b0:	eeb0 0a67 	vmov.f32	s0, s15
 800d1b4:	3710      	adds	r7, #16
 800d1b6:	46bd      	mov	sp, r7
 800d1b8:	bd80      	pop	{r7, pc}
 800d1ba:	bf00      	nop
 800d1bc:	f3af 8000 	nop.w
 800d1c0:	60000000 	.word	0x60000000
 800d1c4:	401921fb 	.word	0x401921fb
 800d1c8:	40c90fdb 	.word	0x40c90fdb

0800d1cc <_electricalAngle>:

// Electrical angle calculation
float _electricalAngle(float shaft_angle, int pole_pairs)
{
 800d1cc:	b480      	push	{r7}
 800d1ce:	b083      	sub	sp, #12
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	ed87 0a01 	vstr	s0, [r7, #4]
 800d1d6:	6038      	str	r0, [r7, #0]
  return (shaft_angle * pole_pairs);
 800d1d8:	683b      	ldr	r3, [r7, #0]
 800d1da:	ee07 3a90 	vmov	s15, r3
 800d1de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d1e2:	edd7 7a01 	vldr	s15, [r7, #4]
 800d1e6:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 800d1ea:	eeb0 0a67 	vmov.f32	s0, s15
 800d1ee:	370c      	adds	r7, #12
 800d1f0:	46bd      	mov	sp, r7
 800d1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f6:	4770      	bx	lr

0800d1f8 <MT6701_GetRawData>:
#include "math_utils.h"
#include "time_utils.h"
// static unsigned int rotationCount, rotationCount_Last;

uint16_t MT6701_GetRawData(void)
{
 800d1f8:	b580      	push	{r7, lr}
 800d1fa:	b084      	sub	sp, #16
 800d1fc:	af02      	add	r7, sp, #8
    uint16_t rawData;
    uint16_t txData = 0xFFFF;
 800d1fe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d202:	803b      	strh	r3, [r7, #0]
    uint16_t timeOut = 200;
 800d204:	23c8      	movs	r3, #200	@ 0xc8
 800d206:	80fb      	strh	r3, [r7, #6]

    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY)
 800d208:	e006      	b.n	800d218 <MT6701_GetRawData+0x20>
    {
        if (timeOut-- == 0)
 800d20a:	88fb      	ldrh	r3, [r7, #6]
 800d20c:	1e5a      	subs	r2, r3, #1
 800d20e:	80fa      	strh	r2, [r7, #6]
 800d210:	2b00      	cmp	r3, #0
 800d212:	d101      	bne.n	800d218 <MT6701_GetRawData+0x20>
        {
            //   FOC_log("SPI state error!\r\n");
            return 0; // 在超时时直接返回，避免继续执行后续代码
 800d214:	2300      	movs	r3, #0
 800d216:	e025      	b.n	800d264 <MT6701_GetRawData+0x6c>
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY)
 800d218:	4814      	ldr	r0, [pc, #80]	@ (800d26c <MT6701_GetRawData+0x74>)
 800d21a:	f7fa fea4 	bl	8007f66 <HAL_SPI_GetState>
 800d21e:	4603      	mov	r3, r0
 800d220:	2b01      	cmp	r3, #1
 800d222:	d1f2      	bne.n	800d20a <MT6701_GetRawData+0x12>
        }
    }

    MT6701_CS_Enable;
 800d224:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800d228:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800d22c:	619a      	str	r2, [r3, #24]

    HAL_StatusTypeDef spiStatus = HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)&txData, (uint8_t *)&rawData, 1, HAL_MAX_DELAY);
 800d22e:	1cba      	adds	r2, r7, #2
 800d230:	4639      	mov	r1, r7
 800d232:	f04f 33ff 	mov.w	r3, #4294967295
 800d236:	9300      	str	r3, [sp, #0]
 800d238:	2301      	movs	r3, #1
 800d23a:	480c      	ldr	r0, [pc, #48]	@ (800d26c <MT6701_GetRawData+0x74>)
 800d23c:	f7fa fc71 	bl	8007b22 <HAL_SPI_TransmitReceive>
 800d240:	4603      	mov	r3, r0
 800d242:	717b      	strb	r3, [r7, #5]
    if (spiStatus != HAL_OK)
 800d244:	797b      	ldrb	r3, [r7, #5]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d005      	beq.n	800d256 <MT6701_GetRawData+0x5e>
    {
        MT6701_CS_Disable;
 800d24a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800d24e:	2210      	movs	r2, #16
 800d250:	619a      	str	r2, [r3, #24]
        //  FOC_log("MT6701 read data error!\r\n");
        return 0; // 在SPI传输错误时直接返回，避免继续执行后续代码
 800d252:	2300      	movs	r3, #0
 800d254:	e006      	b.n	800d264 <MT6701_GetRawData+0x6c>
    }

    MT6701_CS_Disable;
 800d256:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800d25a:	2210      	movs	r2, #16
 800d25c:	619a      	str	r2, [r3, #24]

    return rawData >> 2; // 取高14位的角度数据
 800d25e:	887b      	ldrh	r3, [r7, #2]
 800d260:	089b      	lsrs	r3, r3, #2
 800d262:	b29b      	uxth	r3, r3
}
 800d264:	4618      	mov	r0, r3
 800d266:	3708      	adds	r7, #8
 800d268:	46bd      	mov	sp, r7
 800d26a:	bd80      	pop	{r7, pc}
 800d26c:	200004a0 	.word	0x200004a0

0800d270 <MT6701_GetRawAngle>:

// 将传感器原始数据转化为弧度
float MT6701_GetRawAngle(void)
{
 800d270:	b580      	push	{r7, lr}
 800d272:	b082      	sub	sp, #8
 800d274:	af00      	add	r7, sp, #0
    uint16_t rawData = MT6701_GetRawData();
 800d276:	f7ff ffbf 	bl	800d1f8 <MT6701_GetRawData>
 800d27a:	4603      	mov	r3, r0
 800d27c:	80fb      	strh	r3, [r7, #6]
    return (float)rawData / 16384.0f * _2PI;
 800d27e:	88fb      	ldrh	r3, [r7, #6]
 800d280:	ee07 3a90 	vmov	s15, r3
 800d284:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d288:	eddf 6a06 	vldr	s13, [pc, #24]	@ 800d2a4 <MT6701_GetRawAngle+0x34>
 800d28c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d290:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800d2a8 <MT6701_GetRawAngle+0x38>
 800d294:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800d298:	eeb0 0a67 	vmov.f32	s0, s15
 800d29c:	3708      	adds	r7, #8
 800d29e:	46bd      	mov	sp, r7
 800d2a0:	bd80      	pop	{r7, pc}
 800d2a2:	bf00      	nop
 800d2a4:	46800000 	.word	0x46800000
 800d2a8:	40c90fdb 	.word	0x40c90fdb

0800d2ac <pidInit>:
#include "pid.h"
#include "math_utils.h"

void pidInit(PidController *pidController, float _P, float _I, float _D, float _ramp, float _limit, float _Ts)
{
 800d2ac:	b480      	push	{r7}
 800d2ae:	b089      	sub	sp, #36	@ 0x24
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	61f8      	str	r0, [r7, #28]
 800d2b4:	ed87 0a06 	vstr	s0, [r7, #24]
 800d2b8:	edc7 0a05 	vstr	s1, [r7, #20]
 800d2bc:	ed87 1a04 	vstr	s2, [r7, #16]
 800d2c0:	edc7 1a03 	vstr	s3, [r7, #12]
 800d2c4:	ed87 2a02 	vstr	s4, [r7, #8]
 800d2c8:	edc7 2a01 	vstr	s5, [r7, #4]
    pidController->P = _P;
 800d2cc:	69fb      	ldr	r3, [r7, #28]
 800d2ce:	69ba      	ldr	r2, [r7, #24]
 800d2d0:	601a      	str	r2, [r3, #0]
    pidController->I = _I;
 800d2d2:	69fb      	ldr	r3, [r7, #28]
 800d2d4:	697a      	ldr	r2, [r7, #20]
 800d2d6:	605a      	str	r2, [r3, #4]
    pidController->D = _D;
 800d2d8:	69fb      	ldr	r3, [r7, #28]
 800d2da:	693a      	ldr	r2, [r7, #16]
 800d2dc:	609a      	str	r2, [r3, #8]
    pidController->output_ramp = _ramp;
 800d2de:	69fb      	ldr	r3, [r7, #28]
 800d2e0:	68fa      	ldr	r2, [r7, #12]
 800d2e2:	60da      	str	r2, [r3, #12]
    pidController->limit = _limit;
 800d2e4:	69fb      	ldr	r3, [r7, #28]
 800d2e6:	68ba      	ldr	r2, [r7, #8]
 800d2e8:	611a      	str	r2, [r3, #16]
    pidController->Ts = _Ts;
 800d2ea:	69fb      	ldr	r3, [r7, #28]
 800d2ec:	687a      	ldr	r2, [r7, #4]
 800d2ee:	621a      	str	r2, [r3, #32]
    pidController->error_prev = 0;
 800d2f0:	69fb      	ldr	r3, [r7, #28]
 800d2f2:	f04f 0200 	mov.w	r2, #0
 800d2f6:	615a      	str	r2, [r3, #20]
    pidController->output_prev = 0;
 800d2f8:	69fb      	ldr	r3, [r7, #28]
 800d2fa:	f04f 0200 	mov.w	r2, #0
 800d2fe:	619a      	str	r2, [r3, #24]
    pidController->integral_prev = 0;
 800d300:	69fb      	ldr	r3, [r7, #28]
 800d302:	f04f 0200 	mov.w	r2, #0
 800d306:	61da      	str	r2, [r3, #28]
}
 800d308:	bf00      	nop
 800d30a:	3724      	adds	r7, #36	@ 0x24
 800d30c:	46bd      	mov	sp, r7
 800d30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d312:	4770      	bx	lr

0800d314 <pidOperator>:

// PID controller function
float pidOperator(PidController *pidController, float error)
{
 800d314:	b480      	push	{r7}
 800d316:	b08b      	sub	sp, #44	@ 0x2c
 800d318:	af00      	add	r7, sp, #0
 800d31a:	6078      	str	r0, [r7, #4]
 800d31c:	ed87 0a00 	vstr	s0, [r7]
    // u(s) = (P + I/s + Ds)e(s)
    // Discrete implementations
    // proportional part
    // u_p  = P *e(k)
    float proportional = pidController->P * error;
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	edd3 7a00 	vldr	s15, [r3]
 800d326:	ed97 7a00 	vldr	s14, [r7]
 800d32a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d32e:	edc7 7a08 	vstr	s15, [r7, #32]
    // Tustin transform of the integral part
    // u_ik = u_ik_1  + I*Ts/2*(ek + ek_1)
    float a = 0.5f * (error + pidController->error_prev);
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	ed93 7a05 	vldr	s14, [r3, #20]
 800d338:	edd7 7a00 	vldr	s15, [r7]
 800d33c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d340:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800d344:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d348:	edc7 7a07 	vstr	s15, [r7, #28]
    float b = pidController->I * pidController->Ts;
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	ed93 7a01 	vldr	s14, [r3, #4]
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	edd3 7a08 	vldr	s15, [r3, #32]
 800d358:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d35c:	edc7 7a06 	vstr	s15, [r7, #24]
    float integral = pidController->integral_prev + pidController->I * pidController->Ts * 0.5f * (error + pidController->error_prev);
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	ed93 7a07 	vldr	s14, [r3, #28]
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	edd3 6a01 	vldr	s13, [r3, #4]
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	edd3 7a08 	vldr	s15, [r3, #32]
 800d372:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d376:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 800d37a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	ed93 6a05 	vldr	s12, [r3, #20]
 800d384:	edd7 7a00 	vldr	s15, [r7]
 800d388:	ee76 7a27 	vadd.f32	s15, s12, s15
 800d38c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d390:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d394:	edc7 7a05 	vstr	s15, [r7, #20]
    // antiwindup - limit the output
    integral = _constrain(integral, -pidController->limit, pidController->limit);
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	edd3 7a04 	vldr	s15, [r3, #16]
 800d39e:	eef1 7a67 	vneg.f32	s15, s15
 800d3a2:	ed97 7a05 	vldr	s14, [r7, #20]
 800d3a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d3aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3ae:	d505      	bpl.n	800d3bc <pidOperator+0xa8>
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	edd3 7a04 	vldr	s15, [r3, #16]
 800d3b6:	eef1 7a67 	vneg.f32	s15, s15
 800d3ba:	e00f      	b.n	800d3dc <pidOperator+0xc8>
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	edd3 7a04 	vldr	s15, [r3, #16]
 800d3c2:	ed97 7a05 	vldr	s14, [r7, #20]
 800d3c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d3ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3ce:	dd03      	ble.n	800d3d8 <pidOperator+0xc4>
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	edd3 7a04 	vldr	s15, [r3, #16]
 800d3d6:	e001      	b.n	800d3dc <pidOperator+0xc8>
 800d3d8:	edd7 7a05 	vldr	s15, [r7, #20]
 800d3dc:	edc7 7a05 	vstr	s15, [r7, #20]
    // Discrete derivation
    // u_dk = D(ek - ek_1)/Ts
    float derivative = pidController->D * (error - pidController->error_prev) / pidController->Ts;
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	ed93 7a02 	vldr	s14, [r3, #8]
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	edd3 7a05 	vldr	s15, [r3, #20]
 800d3ec:	edd7 6a00 	vldr	s13, [r7]
 800d3f0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800d3f4:	ee67 6a27 	vmul.f32	s13, s14, s15
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	ed93 7a08 	vldr	s14, [r3, #32]
 800d3fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d402:	edc7 7a04 	vstr	s15, [r7, #16]

    // sum all the components
    float output = proportional + integral + derivative;
 800d406:	ed97 7a08 	vldr	s14, [r7, #32]
 800d40a:	edd7 7a05 	vldr	s15, [r7, #20]
 800d40e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d412:	ed97 7a04 	vldr	s14, [r7, #16]
 800d416:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d41a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    // antiwindup - limit the output variable
    output = _constrain(output, -pidController->limit, pidController->limit);
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	edd3 7a04 	vldr	s15, [r3, #16]
 800d424:	eef1 7a67 	vneg.f32	s15, s15
 800d428:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800d42c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d434:	d505      	bpl.n	800d442 <pidOperator+0x12e>
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	edd3 7a04 	vldr	s15, [r3, #16]
 800d43c:	eef1 7a67 	vneg.f32	s15, s15
 800d440:	e00f      	b.n	800d462 <pidOperator+0x14e>
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	edd3 7a04 	vldr	s15, [r3, #16]
 800d448:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800d44c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d454:	dd03      	ble.n	800d45e <pidOperator+0x14a>
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	edd3 7a04 	vldr	s15, [r3, #16]
 800d45c:	e001      	b.n	800d462 <pidOperator+0x14e>
 800d45e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800d462:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // if output ramp defined
    if (pidController->output_ramp > 0)
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	edd3 7a03 	vldr	s15, [r3, #12]
 800d46c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d474:	dd42      	ble.n	800d4fc <pidOperator+0x1e8>
    {
        // limit the acceleration by ramping the output
        float output_rate = (output - pidController->output_prev) / pidController->Ts;
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	edd3 7a06 	vldr	s15, [r3, #24]
 800d47c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800d480:	ee77 6a67 	vsub.f32	s13, s14, s15
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	ed93 7a08 	vldr	s14, [r3, #32]
 800d48a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d48e:	edc7 7a03 	vstr	s15, [r7, #12]
        if (output_rate > pidController->output_ramp)
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	edd3 7a03 	vldr	s15, [r3, #12]
 800d498:	ed97 7a03 	vldr	s14, [r7, #12]
 800d49c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d4a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4a4:	dd0f      	ble.n	800d4c6 <pidOperator+0x1b2>
            output = pidController->output_prev + pidController->output_ramp * pidController->Ts;
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	ed93 7a06 	vldr	s14, [r3, #24]
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	edd3 6a03 	vldr	s13, [r3, #12]
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	edd3 7a08 	vldr	s15, [r3, #32]
 800d4b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d4bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d4c0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
 800d4c4:	e01a      	b.n	800d4fc <pidOperator+0x1e8>
        else if (output_rate < -pidController->output_ramp)
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	edd3 7a03 	vldr	s15, [r3, #12]
 800d4cc:	eef1 7a67 	vneg.f32	s15, s15
 800d4d0:	ed97 7a03 	vldr	s14, [r7, #12]
 800d4d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d4d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4dc:	d50e      	bpl.n	800d4fc <pidOperator+0x1e8>
            output = pidController->output_prev - pidController->output_ramp * pidController->Ts;
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	ed93 7a06 	vldr	s14, [r3, #24]
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	edd3 6a03 	vldr	s13, [r3, #12]
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	edd3 7a08 	vldr	s15, [r3, #32]
 800d4f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d4f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d4f8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    }
    // saving for the next pass
    pidController->integral_prev = integral;
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	697a      	ldr	r2, [r7, #20]
 800d500:	61da      	str	r2, [r3, #28]
    pidController->output_prev = output;
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d506:	619a      	str	r2, [r3, #24]
    pidController->error_prev = error;
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	683a      	ldr	r2, [r7, #0]
 800d50c:	615a      	str	r2, [r3, #20]
    return output;
 800d50e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d510:	ee07 3a90 	vmov	s15, r3
}
 800d514:	eeb0 0a67 	vmov.f32	s0, s15
 800d518:	372c      	adds	r7, #44	@ 0x2c
 800d51a:	46bd      	mov	sp, r7
 800d51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d520:	4770      	bx	lr
	...

0800d524 <delay>:
#include "time_utils.h"

__IO uint32_t m, tms, u, t0;

void delay(uint32_t _ms)
{
 800d524:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d528:	b082      	sub	sp, #8
 800d52a:	af00      	add	r7, sp, #0
 800d52c:	6078      	str	r0, [r7, #4]
    t0 = micros();
 800d52e:	f000 f83b 	bl	800d5a8 <micros>
 800d532:	4602      	mov	r2, r0
 800d534:	460b      	mov	r3, r1
 800d536:	4b11      	ldr	r3, [pc, #68]	@ (800d57c <delay+0x58>)
 800d538:	601a      	str	r2, [r3, #0]
    while (micros() - t0 < _ms * 1000)
 800d53a:	e000      	b.n	800d53e <delay+0x1a>
        __NOP();
 800d53c:	bf00      	nop
    while (micros() - t0 < _ms * 1000)
 800d53e:	f000 f833 	bl	800d5a8 <micros>
 800d542:	4602      	mov	r2, r0
 800d544:	460b      	mov	r3, r1
 800d546:	490d      	ldr	r1, [pc, #52]	@ (800d57c <delay+0x58>)
 800d548:	6809      	ldr	r1, [r1, #0]
 800d54a:	2000      	movs	r0, #0
 800d54c:	468a      	mov	sl, r1
 800d54e:	4683      	mov	fp, r0
 800d550:	ebb2 040a 	subs.w	r4, r2, sl
 800d554:	eb63 050b 	sbc.w	r5, r3, fp
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800d55e:	fb02 f303 	mul.w	r3, r2, r3
 800d562:	2200      	movs	r2, #0
 800d564:	4698      	mov	r8, r3
 800d566:	4691      	mov	r9, r2
 800d568:	4544      	cmp	r4, r8
 800d56a:	eb75 0309 	sbcs.w	r3, r5, r9
 800d56e:	d3e5      	bcc.n	800d53c <delay+0x18>
}
 800d570:	bf00      	nop
 800d572:	bf00      	nop
 800d574:	3708      	adds	r7, #8
 800d576:	46bd      	mov	sp, r7
 800d578:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d57c:	20000954 	.word	0x20000954

0800d580 <LL_SYSTICK_IsActiveCounterFlag>:
    while (_us--)
        __NOP();
}

__STATIC_INLINE uint32_t LL_SYSTICK_IsActiveCounterFlag()
{
 800d580:	b480      	push	{r7}
 800d582:	af00      	add	r7, sp, #0
    return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 800d584:	4b07      	ldr	r3, [pc, #28]	@ (800d5a4 <LL_SYSTICK_IsActiveCounterFlag+0x24>)
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d58c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d590:	bf0c      	ite	eq
 800d592:	2301      	moveq	r3, #1
 800d594:	2300      	movne	r3, #0
 800d596:	b2db      	uxtb	r3, r3
}
 800d598:	4618      	mov	r0, r3
 800d59a:	46bd      	mov	sp, r7
 800d59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a0:	4770      	bx	lr
 800d5a2:	bf00      	nop
 800d5a4:	e000e010 	.word	0xe000e010

0800d5a8 <micros>:

uint64_t micros()
{
 800d5a8:	b5b0      	push	{r4, r5, r7, lr}
 800d5aa:	af00      	add	r7, sp, #0
    /* Ensure COUNTFLAG is reset by reading SysTick control and status register */
    LL_SYSTICK_IsActiveCounterFlag();
 800d5ac:	f7ff ffe8 	bl	800d580 <LL_SYSTICK_IsActiveCounterFlag>
    m = HAL_GetTick();
 800d5b0:	f7f5 f8c4 	bl	800273c <HAL_GetTick>
 800d5b4:	4603      	mov	r3, r0
 800d5b6:	4a1c      	ldr	r2, [pc, #112]	@ (800d628 <micros+0x80>)
 800d5b8:	6013      	str	r3, [r2, #0]
    tms = SysTick->LOAD + 1;
 800d5ba:	4b1c      	ldr	r3, [pc, #112]	@ (800d62c <micros+0x84>)
 800d5bc:	685b      	ldr	r3, [r3, #4]
 800d5be:	3301      	adds	r3, #1
 800d5c0:	4a1b      	ldr	r2, [pc, #108]	@ (800d630 <micros+0x88>)
 800d5c2:	6013      	str	r3, [r2, #0]
    u = tms - SysTick->VAL;
 800d5c4:	4b1a      	ldr	r3, [pc, #104]	@ (800d630 <micros+0x88>)
 800d5c6:	681a      	ldr	r2, [r3, #0]
 800d5c8:	4b18      	ldr	r3, [pc, #96]	@ (800d62c <micros+0x84>)
 800d5ca:	689b      	ldr	r3, [r3, #8]
 800d5cc:	1ad3      	subs	r3, r2, r3
 800d5ce:	4a19      	ldr	r2, [pc, #100]	@ (800d634 <micros+0x8c>)
 800d5d0:	6013      	str	r3, [r2, #0]
    if (LL_SYSTICK_IsActiveCounterFlag())
 800d5d2:	f7ff ffd5 	bl	800d580 <LL_SYSTICK_IsActiveCounterFlag>
 800d5d6:	4603      	mov	r3, r0
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d00b      	beq.n	800d5f4 <micros+0x4c>
    {
        m = HAL_GetTick();
 800d5dc:	f7f5 f8ae 	bl	800273c <HAL_GetTick>
 800d5e0:	4603      	mov	r3, r0
 800d5e2:	4a11      	ldr	r2, [pc, #68]	@ (800d628 <micros+0x80>)
 800d5e4:	6013      	str	r3, [r2, #0]
        u = tms - SysTick->VAL;
 800d5e6:	4b12      	ldr	r3, [pc, #72]	@ (800d630 <micros+0x88>)
 800d5e8:	681a      	ldr	r2, [r3, #0]
 800d5ea:	4b10      	ldr	r3, [pc, #64]	@ (800d62c <micros+0x84>)
 800d5ec:	689b      	ldr	r3, [r3, #8]
 800d5ee:	1ad3      	subs	r3, r2, r3
 800d5f0:	4a10      	ldr	r2, [pc, #64]	@ (800d634 <micros+0x8c>)
 800d5f2:	6013      	str	r3, [r2, #0]
    }
    return (m * 1000 + (u * 1000) / tms);
 800d5f4:	4b0c      	ldr	r3, [pc, #48]	@ (800d628 <micros+0x80>)
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800d5fc:	fb03 f202 	mul.w	r2, r3, r2
 800d600:	4b0c      	ldr	r3, [pc, #48]	@ (800d634 <micros+0x8c>)
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800d608:	fb03 f101 	mul.w	r1, r3, r1
 800d60c:	4b08      	ldr	r3, [pc, #32]	@ (800d630 <micros+0x88>)
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	fbb1 f3f3 	udiv	r3, r1, r3
 800d614:	4413      	add	r3, r2
 800d616:	2200      	movs	r2, #0
 800d618:	461c      	mov	r4, r3
 800d61a:	4615      	mov	r5, r2
 800d61c:	4622      	mov	r2, r4
 800d61e:	462b      	mov	r3, r5
}
 800d620:	4610      	mov	r0, r2
 800d622:	4619      	mov	r1, r3
 800d624:	bdb0      	pop	{r4, r5, r7, pc}
 800d626:	bf00      	nop
 800d628:	20000948 	.word	0x20000948
 800d62c:	e000e010 	.word	0xe000e010
 800d630:	2000094c 	.word	0x2000094c
 800d634:	20000950 	.word	0x20000950

0800d638 <userMain>:
float HallTheta = 0;
float HallSpeed = 0;
uint8_t HallReadTemp = 0;
static bool powerLost;
void userMain(void)
{
 800d638:	b580      	push	{r7, lr}
 800d63a:	af00      	add	r7, sp, #0

	if (get5MsFlag())
 800d63c:	f000 f91e 	bl	800d87c <get5MsFlag>
 800d640:	4603      	mov	r3, r0
 800d642:	2b00      	cmp	r3, #0
 800d644:	d001      	beq.n	800d64a <userMain+0x12>
	{
		keyScan();
 800d646:	f7ff fa75 	bl	800cb34 <keyScan>
	}

	if (get100MsFlag())
 800d64a:	f000 f92b 	bl	800d8a4 <get100MsFlag>
 800d64e:	4603      	mov	r3, r0
 800d650:	2b00      	cmp	r3, #0
 800d652:	d001      	beq.n	800d658 <userMain+0x20>
	{
		appRunning();
 800d654:	f7fe fa70 	bl	800bb38 <appRunning>
	}
#if SHOW_WAVE == 0 //&& COMMAMNDER == 0
	// if (get500MsFlag())
	if (getOneSecFlag())
 800d658:	f000 f8fc 	bl	800d854 <getOneSecFlag>
 800d65c:	4603      	mov	r3, r0
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d001      	beq.n	800d666 <userMain+0x2e>
	{
		printLog();
 800d662:	f7fe fc59 	bl	800bf18 <printLog>
	}
#endif
}
 800d666:	bf00      	nop
 800d668:	bd80      	pop	{r7, pc}

0800d66a <map>:

float map(float x, float  in_min, float in_max, float out_min, float out_max)
{
 800d66a:	b480      	push	{r7}
 800d66c:	b087      	sub	sp, #28
 800d66e:	af00      	add	r7, sp, #0
 800d670:	ed87 0a05 	vstr	s0, [r7, #20]
 800d674:	edc7 0a04 	vstr	s1, [r7, #16]
 800d678:	ed87 1a03 	vstr	s2, [r7, #12]
 800d67c:	edc7 1a02 	vstr	s3, [r7, #8]
 800d680:	ed87 2a01 	vstr	s4, [r7, #4]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800d684:	ed97 7a05 	vldr	s14, [r7, #20]
 800d688:	edd7 7a04 	vldr	s15, [r7, #16]
 800d68c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d690:	edd7 6a01 	vldr	s13, [r7, #4]
 800d694:	edd7 7a02 	vldr	s15, [r7, #8]
 800d698:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800d69c:	ee67 6a27 	vmul.f32	s13, s14, s15
 800d6a0:	ed97 7a03 	vldr	s14, [r7, #12]
 800d6a4:	edd7 7a04 	vldr	s15, [r7, #16]
 800d6a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d6ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d6b0:	edd7 7a02 	vldr	s15, [r7, #8]
 800d6b4:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800d6b8:	eeb0 0a67 	vmov.f32	s0, s15
 800d6bc:	371c      	adds	r7, #28
 800d6be:	46bd      	mov	sp, r7
 800d6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c4:	4770      	bx	lr
	...

0800d6c8 <dealPer100us>:


static bool _5msFlag, _10msFlag, _20msFlag, _30msFlag, _100msFlag, _500msFlag, _1s;
static void dealPerMs();
void dealPer100us()
{
 800d6c8:	b580      	push	{r7, lr}
 800d6ca:	af00      	add	r7, sp, #0
    static unsigned char cnt;
    if (++cnt >= 10)
 800d6cc:	4b08      	ldr	r3, [pc, #32]	@ (800d6f0 <dealPer100us+0x28>)
 800d6ce:	781b      	ldrb	r3, [r3, #0]
 800d6d0:	3301      	adds	r3, #1
 800d6d2:	b2da      	uxtb	r2, r3
 800d6d4:	4b06      	ldr	r3, [pc, #24]	@ (800d6f0 <dealPer100us+0x28>)
 800d6d6:	701a      	strb	r2, [r3, #0]
 800d6d8:	4b05      	ldr	r3, [pc, #20]	@ (800d6f0 <dealPer100us+0x28>)
 800d6da:	781b      	ldrb	r3, [r3, #0]
 800d6dc:	2b09      	cmp	r3, #9
 800d6de:	d904      	bls.n	800d6ea <dealPer100us+0x22>
    {
        cnt = 0;
 800d6e0:	4b03      	ldr	r3, [pc, #12]	@ (800d6f0 <dealPer100us+0x28>)
 800d6e2:	2200      	movs	r2, #0
 800d6e4:	701a      	strb	r2, [r3, #0]
        dealPerMs();
 800d6e6:	f000 f805 	bl	800d6f4 <dealPerMs>
    }

}
 800d6ea:	bf00      	nop
 800d6ec:	bd80      	pop	{r7, pc}
 800d6ee:	bf00      	nop
 800d6f0:	20000967 	.word	0x20000967

0800d6f4 <dealPerMs>:

static void dealPerMs()
{
 800d6f4:	b480      	push	{r7}
 800d6f6:	af00      	add	r7, sp, #0
    static unsigned char _5msCnt, _30msCnt, _20msCnt, _100msCnt, _10msCnt;
    static uint _500msCnt, _1000msCnt;
    if (++_5msCnt >= 5)
 800d6f8:	4b45      	ldr	r3, [pc, #276]	@ (800d810 <dealPerMs+0x11c>)
 800d6fa:	781b      	ldrb	r3, [r3, #0]
 800d6fc:	3301      	adds	r3, #1
 800d6fe:	b2da      	uxtb	r2, r3
 800d700:	4b43      	ldr	r3, [pc, #268]	@ (800d810 <dealPerMs+0x11c>)
 800d702:	701a      	strb	r2, [r3, #0]
 800d704:	4b42      	ldr	r3, [pc, #264]	@ (800d810 <dealPerMs+0x11c>)
 800d706:	781b      	ldrb	r3, [r3, #0]
 800d708:	2b04      	cmp	r3, #4
 800d70a:	d905      	bls.n	800d718 <dealPerMs+0x24>
    {
        _5msCnt = 0;
 800d70c:	4b40      	ldr	r3, [pc, #256]	@ (800d810 <dealPerMs+0x11c>)
 800d70e:	2200      	movs	r2, #0
 800d710:	701a      	strb	r2, [r3, #0]
        _5msFlag = 1;
 800d712:	4b40      	ldr	r3, [pc, #256]	@ (800d814 <dealPerMs+0x120>)
 800d714:	2201      	movs	r2, #1
 800d716:	701a      	strb	r2, [r3, #0]
    }

    if (++_10msCnt >= 10)
 800d718:	4b3f      	ldr	r3, [pc, #252]	@ (800d818 <dealPerMs+0x124>)
 800d71a:	781b      	ldrb	r3, [r3, #0]
 800d71c:	3301      	adds	r3, #1
 800d71e:	b2da      	uxtb	r2, r3
 800d720:	4b3d      	ldr	r3, [pc, #244]	@ (800d818 <dealPerMs+0x124>)
 800d722:	701a      	strb	r2, [r3, #0]
 800d724:	4b3c      	ldr	r3, [pc, #240]	@ (800d818 <dealPerMs+0x124>)
 800d726:	781b      	ldrb	r3, [r3, #0]
 800d728:	2b09      	cmp	r3, #9
 800d72a:	d905      	bls.n	800d738 <dealPerMs+0x44>
    {
        _10msCnt = 0;
 800d72c:	4b3a      	ldr	r3, [pc, #232]	@ (800d818 <dealPerMs+0x124>)
 800d72e:	2200      	movs	r2, #0
 800d730:	701a      	strb	r2, [r3, #0]
        _10msFlag = 1;
 800d732:	4b3a      	ldr	r3, [pc, #232]	@ (800d81c <dealPerMs+0x128>)
 800d734:	2201      	movs	r2, #1
 800d736:	701a      	strb	r2, [r3, #0]
    }

    if (++_20msCnt >= 20)
 800d738:	4b39      	ldr	r3, [pc, #228]	@ (800d820 <dealPerMs+0x12c>)
 800d73a:	781b      	ldrb	r3, [r3, #0]
 800d73c:	3301      	adds	r3, #1
 800d73e:	b2da      	uxtb	r2, r3
 800d740:	4b37      	ldr	r3, [pc, #220]	@ (800d820 <dealPerMs+0x12c>)
 800d742:	701a      	strb	r2, [r3, #0]
 800d744:	4b36      	ldr	r3, [pc, #216]	@ (800d820 <dealPerMs+0x12c>)
 800d746:	781b      	ldrb	r3, [r3, #0]
 800d748:	2b13      	cmp	r3, #19
 800d74a:	d905      	bls.n	800d758 <dealPerMs+0x64>
    {
        _20msCnt = 0;
 800d74c:	4b34      	ldr	r3, [pc, #208]	@ (800d820 <dealPerMs+0x12c>)
 800d74e:	2200      	movs	r2, #0
 800d750:	701a      	strb	r2, [r3, #0]
        _20msFlag = 1;
 800d752:	4b34      	ldr	r3, [pc, #208]	@ (800d824 <dealPerMs+0x130>)
 800d754:	2201      	movs	r2, #1
 800d756:	701a      	strb	r2, [r3, #0]
    }

    if (++_30msCnt >= 30)
 800d758:	4b33      	ldr	r3, [pc, #204]	@ (800d828 <dealPerMs+0x134>)
 800d75a:	781b      	ldrb	r3, [r3, #0]
 800d75c:	3301      	adds	r3, #1
 800d75e:	b2da      	uxtb	r2, r3
 800d760:	4b31      	ldr	r3, [pc, #196]	@ (800d828 <dealPerMs+0x134>)
 800d762:	701a      	strb	r2, [r3, #0]
 800d764:	4b30      	ldr	r3, [pc, #192]	@ (800d828 <dealPerMs+0x134>)
 800d766:	781b      	ldrb	r3, [r3, #0]
 800d768:	2b1d      	cmp	r3, #29
 800d76a:	d905      	bls.n	800d778 <dealPerMs+0x84>
    {
        _30msCnt = 0;
 800d76c:	4b2e      	ldr	r3, [pc, #184]	@ (800d828 <dealPerMs+0x134>)
 800d76e:	2200      	movs	r2, #0
 800d770:	701a      	strb	r2, [r3, #0]
        _30msFlag = 1;
 800d772:	4b2e      	ldr	r3, [pc, #184]	@ (800d82c <dealPerMs+0x138>)
 800d774:	2201      	movs	r2, #1
 800d776:	701a      	strb	r2, [r3, #0]
    }

    if (++_100msCnt >= 100)
 800d778:	4b2d      	ldr	r3, [pc, #180]	@ (800d830 <dealPerMs+0x13c>)
 800d77a:	781b      	ldrb	r3, [r3, #0]
 800d77c:	3301      	adds	r3, #1
 800d77e:	b2da      	uxtb	r2, r3
 800d780:	4b2b      	ldr	r3, [pc, #172]	@ (800d830 <dealPerMs+0x13c>)
 800d782:	701a      	strb	r2, [r3, #0]
 800d784:	4b2a      	ldr	r3, [pc, #168]	@ (800d830 <dealPerMs+0x13c>)
 800d786:	781b      	ldrb	r3, [r3, #0]
 800d788:	2b63      	cmp	r3, #99	@ 0x63
 800d78a:	d905      	bls.n	800d798 <dealPerMs+0xa4>
    {
        _100msCnt = 0;
 800d78c:	4b28      	ldr	r3, [pc, #160]	@ (800d830 <dealPerMs+0x13c>)
 800d78e:	2200      	movs	r2, #0
 800d790:	701a      	strb	r2, [r3, #0]
        _100msFlag = 1;
 800d792:	4b28      	ldr	r3, [pc, #160]	@ (800d834 <dealPerMs+0x140>)
 800d794:	2201      	movs	r2, #1
 800d796:	701a      	strb	r2, [r3, #0]
    }

    if (++_500msCnt >= 500)
 800d798:	4b27      	ldr	r3, [pc, #156]	@ (800d838 <dealPerMs+0x144>)
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	3301      	adds	r3, #1
 800d79e:	4a26      	ldr	r2, [pc, #152]	@ (800d838 <dealPerMs+0x144>)
 800d7a0:	6013      	str	r3, [r2, #0]
 800d7a2:	4b25      	ldr	r3, [pc, #148]	@ (800d838 <dealPerMs+0x144>)
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800d7aa:	d305      	bcc.n	800d7b8 <dealPerMs+0xc4>
    {
        _500msCnt = 0;
 800d7ac:	4b22      	ldr	r3, [pc, #136]	@ (800d838 <dealPerMs+0x144>)
 800d7ae:	2200      	movs	r2, #0
 800d7b0:	601a      	str	r2, [r3, #0]
        _500msFlag = 1;
 800d7b2:	4b22      	ldr	r3, [pc, #136]	@ (800d83c <dealPerMs+0x148>)
 800d7b4:	2201      	movs	r2, #1
 800d7b6:	701a      	strb	r2, [r3, #0]
    }
    if (++_1000msCnt >= 1000)
 800d7b8:	4b21      	ldr	r3, [pc, #132]	@ (800d840 <dealPerMs+0x14c>)
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	3301      	adds	r3, #1
 800d7be:	4a20      	ldr	r2, [pc, #128]	@ (800d840 <dealPerMs+0x14c>)
 800d7c0:	6013      	str	r3, [r2, #0]
 800d7c2:	4b1f      	ldr	r3, [pc, #124]	@ (800d840 <dealPerMs+0x14c>)
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d7ca:	d305      	bcc.n	800d7d8 <dealPerMs+0xe4>
    {
        _1000msCnt = 0;
 800d7cc:	4b1c      	ldr	r3, [pc, #112]	@ (800d840 <dealPerMs+0x14c>)
 800d7ce:	2200      	movs	r2, #0
 800d7d0:	601a      	str	r2, [r3, #0]
        _1s = 1;
 800d7d2:	4b1c      	ldr	r3, [pc, #112]	@ (800d844 <dealPerMs+0x150>)
 800d7d4:	2201      	movs	r2, #1
 800d7d6:	701a      	strb	r2, [r3, #0]

        cnt = 0;
    }

#else
    frequence = 50;
 800d7d8:	4b1b      	ldr	r3, [pc, #108]	@ (800d848 <dealPerMs+0x154>)
 800d7da:	2232      	movs	r2, #50	@ 0x32
 800d7dc:	701a      	strb	r2, [r3, #0]
            _1s = 1;
        }
    }
#else

    if (++_1msCnt >= 1000)
 800d7de:	4b1b      	ldr	r3, [pc, #108]	@ (800d84c <dealPerMs+0x158>)
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	3301      	adds	r3, #1
 800d7e4:	4a19      	ldr	r2, [pc, #100]	@ (800d84c <dealPerMs+0x158>)
 800d7e6:	6013      	str	r3, [r2, #0]
 800d7e8:	4b18      	ldr	r3, [pc, #96]	@ (800d84c <dealPerMs+0x158>)
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d7f0:	d305      	bcc.n	800d7fe <dealPerMs+0x10a>
    {
        _1msCnt = 0;
 800d7f2:	4b16      	ldr	r3, [pc, #88]	@ (800d84c <dealPerMs+0x158>)
 800d7f4:	2200      	movs	r2, #0
 800d7f6:	601a      	str	r2, [r3, #0]
        _1s = 1;
 800d7f8:	4b12      	ldr	r3, [pc, #72]	@ (800d844 <dealPerMs+0x150>)
 800d7fa:	2201      	movs	r2, #1
 800d7fc:	701a      	strb	r2, [r3, #0]
    }
#endif
#if SPEED_UP
    _1s = 1;
#endif
    _1ms = 1;
 800d7fe:	4b14      	ldr	r3, [pc, #80]	@ (800d850 <dealPerMs+0x15c>)
 800d800:	2201      	movs	r2, #1
 800d802:	701a      	strb	r2, [r3, #0]




}
 800d804:	bf00      	nop
 800d806:	46bd      	mov	sp, r7
 800d808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d80c:	4770      	bx	lr
 800d80e:	bf00      	nop
 800d810:	20000968 	.word	0x20000968
 800d814:	20000961 	.word	0x20000961
 800d818:	20000969 	.word	0x20000969
 800d81c:	20000962 	.word	0x20000962
 800d820:	2000096a 	.word	0x2000096a
 800d824:	20000963 	.word	0x20000963
 800d828:	2000096b 	.word	0x2000096b
 800d82c:	20000964 	.word	0x20000964
 800d830:	2000096c 	.word	0x2000096c
 800d834:	20000965 	.word	0x20000965
 800d838:	20000970 	.word	0x20000970
 800d83c:	20000966 	.word	0x20000966
 800d840:	20000974 	.word	0x20000974
 800d844:	20000958 	.word	0x20000958
 800d848:	20000960 	.word	0x20000960
 800d84c:	2000095c 	.word	0x2000095c
 800d850:	20000959 	.word	0x20000959

0800d854 <getOneSecFlag>:
}



bool getOneSecFlag()
{
 800d854:	b480      	push	{r7}
 800d856:	af00      	add	r7, sp, #0
    if (_1s)
 800d858:	4b07      	ldr	r3, [pc, #28]	@ (800d878 <getOneSecFlag+0x24>)
 800d85a:	781b      	ldrb	r3, [r3, #0]
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d004      	beq.n	800d86a <getOneSecFlag+0x16>
    {
        _1s = 0;
 800d860:	4b05      	ldr	r3, [pc, #20]	@ (800d878 <getOneSecFlag+0x24>)
 800d862:	2200      	movs	r2, #0
 800d864:	701a      	strb	r2, [r3, #0]
        return 1;
 800d866:	2301      	movs	r3, #1
 800d868:	e000      	b.n	800d86c <getOneSecFlag+0x18>
    }
    else
        return 0;
 800d86a:	2300      	movs	r3, #0
}
 800d86c:	4618      	mov	r0, r3
 800d86e:	46bd      	mov	sp, r7
 800d870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d874:	4770      	bx	lr
 800d876:	bf00      	nop
 800d878:	20000958 	.word	0x20000958

0800d87c <get5MsFlag>:
bool getCrossZero()
{
    return crossZero;
}
bool get5MsFlag()
{
 800d87c:	b480      	push	{r7}
 800d87e:	af00      	add	r7, sp, #0
    if (_5msFlag)
 800d880:	4b07      	ldr	r3, [pc, #28]	@ (800d8a0 <get5MsFlag+0x24>)
 800d882:	781b      	ldrb	r3, [r3, #0]
 800d884:	2b00      	cmp	r3, #0
 800d886:	d004      	beq.n	800d892 <get5MsFlag+0x16>
    {
        _5msFlag = 0;
 800d888:	4b05      	ldr	r3, [pc, #20]	@ (800d8a0 <get5MsFlag+0x24>)
 800d88a:	2200      	movs	r2, #0
 800d88c:	701a      	strb	r2, [r3, #0]
        return 1;
 800d88e:	2301      	movs	r3, #1
 800d890:	e000      	b.n	800d894 <get5MsFlag+0x18>
    }
    else
    {
        return 0;
 800d892:	2300      	movs	r3, #0
    }
}
 800d894:	4618      	mov	r0, r3
 800d896:	46bd      	mov	sp, r7
 800d898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d89c:	4770      	bx	lr
 800d89e:	bf00      	nop
 800d8a0:	20000961 	.word	0x20000961

0800d8a4 <get100MsFlag>:
        return 0;
    }
}

bool get100MsFlag()
{
 800d8a4:	b480      	push	{r7}
 800d8a6:	af00      	add	r7, sp, #0
    if (_100msFlag)
 800d8a8:	4b07      	ldr	r3, [pc, #28]	@ (800d8c8 <get100MsFlag+0x24>)
 800d8aa:	781b      	ldrb	r3, [r3, #0]
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d004      	beq.n	800d8ba <get100MsFlag+0x16>
    {
        _100msFlag = 0;
 800d8b0:	4b05      	ldr	r3, [pc, #20]	@ (800d8c8 <get100MsFlag+0x24>)
 800d8b2:	2200      	movs	r2, #0
 800d8b4:	701a      	strb	r2, [r3, #0]
        return 1;
 800d8b6:	2301      	movs	r3, #1
 800d8b8:	e000      	b.n	800d8bc <get100MsFlag+0x18>
    }
    else
    {
        return 0;
 800d8ba:	2300      	movs	r3, #0
    }
}
 800d8bc:	4618      	mov	r0, r3
 800d8be:	46bd      	mov	sp, r7
 800d8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c4:	4770      	bx	lr
 800d8c6:	bf00      	nop
 800d8c8:	20000965 	.word	0x20000965

0800d8cc <setTorque>:
    motor->updatePwm(HALP_PWM_PERIOD * motor->Ta, HALP_PWM_PERIOD * motor->Tb, HALP_PWM_PERIOD * motor->Tc);
}
#elif 1

void setTorque(FocMotor *motor, float Uq, float Ud, float angle_el)
{
 800d8cc:	b580      	push	{r7, lr}
 800d8ce:	b08e      	sub	sp, #56	@ 0x38
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	60f8      	str	r0, [r7, #12]
 800d8d4:	ed87 0a02 	vstr	s0, [r7, #8]
 800d8d8:	edc7 0a01 	vstr	s1, [r7, #4]
 800d8dc:	ed87 1a00 	vstr	s2, [r7]
    float Ualpha, Ubeta;
    float Ua, Ub, Uc;

    // Sinusoidal PWM modulation
    // Inverse Park + Clarke transformation
    _sincos(angle_el, &_sa, &_ca);
 800d8e0:	f107 0214 	add.w	r2, r7, #20
 800d8e4:	f107 0310 	add.w	r3, r7, #16
 800d8e8:	4611      	mov	r1, r2
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	ed97 0a00 	vldr	s0, [r7]
 800d8f0:	f7ff fc16 	bl	800d120 <_sincos>

    // Inverse park transform
    Ualpha = _ca * Ud - _sa * Uq; // -sin(angle) * Uq;
 800d8f4:	ed97 7a05 	vldr	s14, [r7, #20]
 800d8f8:	edd7 7a01 	vldr	s15, [r7, #4]
 800d8fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d900:	edd7 6a04 	vldr	s13, [r7, #16]
 800d904:	edd7 7a02 	vldr	s15, [r7, #8]
 800d908:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d90c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d910:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    Ubeta = _sa * Ud + _ca * Uq;  //  cos(angle) * Uq;
 800d914:	ed97 7a04 	vldr	s14, [r7, #16]
 800d918:	edd7 7a01 	vldr	s15, [r7, #4]
 800d91c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d920:	edd7 6a05 	vldr	s13, [r7, #20]
 800d924:	edd7 7a02 	vldr	s15, [r7, #8]
 800d928:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d92c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d930:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

    // Clarke transform
    Ua = Ualpha;
 800d934:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d936:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Ub = -0.5f * Ualpha + _SQRT3_2 * Ubeta;
 800d938:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800d93c:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 800d940:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d944:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800d948:	eddf 6a95 	vldr	s13, [pc, #596]	@ 800dba0 <setTorque+0x2d4>
 800d94c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d950:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d954:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    Uc = -0.5f * Ualpha - _SQRT3_2 * Ubeta;
 800d958:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800d95c:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 800d960:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d964:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800d968:	eddf 6a8d 	vldr	s13, [pc, #564]	@ 800dba0 <setTorque+0x2d4>
 800d96c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d970:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d974:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    center = UqMAX / 2;
 800d978:	4b8a      	ldr	r3, [pc, #552]	@ (800dba4 <setTorque+0x2d8>)
 800d97a:	623b      	str	r3, [r7, #32]

    // discussed here: https://community.simplefoc.com/t/embedded-world-2023-stm32-cordic-co-processor/3107/165?u=candas1
    // a bit more info here: https://microchipdeveloper.com/mct5001:which-zsm-is-best
    // Midpoint Clamp
    float Umin = min(Ua, min(Ub, Uc));
 800d97c:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800d980:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800d984:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d98c:	d502      	bpl.n	800d994 <setTorque+0xc8>
 800d98e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800d992:	e001      	b.n	800d998 <setTorque+0xcc>
 800d994:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800d998:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800d99c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d9a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9a4:	dd01      	ble.n	800d9aa <setTorque+0xde>
 800d9a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9a8:	e00b      	b.n	800d9c2 <setTorque+0xf6>
 800d9aa:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800d9ae:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800d9b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d9b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9ba:	d501      	bpl.n	800d9c0 <setTorque+0xf4>
 800d9bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9be:	e000      	b.n	800d9c2 <setTorque+0xf6>
 800d9c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9c2:	61fb      	str	r3, [r7, #28]
    float Umax = max(Ua, max(Ub, Uc));
 800d9c4:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800d9c8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800d9cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d9d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9d4:	dd02      	ble.n	800d9dc <setTorque+0x110>
 800d9d6:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800d9da:	e001      	b.n	800d9e0 <setTorque+0x114>
 800d9dc:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800d9e0:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800d9e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d9e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9ec:	d501      	bpl.n	800d9f2 <setTorque+0x126>
 800d9ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9f0:	e00b      	b.n	800da0a <setTorque+0x13e>
 800d9f2:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800d9f6:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800d9fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d9fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da02:	dd01      	ble.n	800da08 <setTorque+0x13c>
 800da04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da06:	e000      	b.n	800da0a <setTorque+0x13e>
 800da08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da0a:	61bb      	str	r3, [r7, #24]
    center -= (Umax + Umin) / 2;
 800da0c:	ed97 7a06 	vldr	s14, [r7, #24]
 800da10:	edd7 7a07 	vldr	s15, [r7, #28]
 800da14:	ee37 7a27 	vadd.f32	s14, s14, s15
 800da18:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800da1c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800da20:	ed97 7a08 	vldr	s14, [r7, #32]
 800da24:	ee77 7a67 	vsub.f32	s15, s14, s15
 800da28:	edc7 7a08 	vstr	s15, [r7, #32]

    Ua += center;
 800da2c:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800da30:	edd7 7a08 	vldr	s15, [r7, #32]
 800da34:	ee77 7a27 	vadd.f32	s15, s14, s15
 800da38:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    Ub += center;
 800da3c:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800da40:	edd7 7a08 	vldr	s15, [r7, #32]
 800da44:	ee77 7a27 	vadd.f32	s15, s14, s15
 800da48:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    Uc += center;
 800da4c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800da50:	edd7 7a08 	vldr	s15, [r7, #32]
 800da54:	ee77 7a27 	vadd.f32	s15, s14, s15
 800da58:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    motor->Ta = _constrain(Ua / U_DC, 0.0f, 1.0f);
 800da5c:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800da60:	eef2 6a08 	vmov.f32	s13, #40	@ 0x41400000  12.0
 800da64:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800da68:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800da6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da70:	d502      	bpl.n	800da78 <setTorque+0x1ac>
 800da72:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800dba8 <setTorque+0x2dc>
 800da76:	e015      	b.n	800daa4 <setTorque+0x1d8>
 800da78:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800da7c:	eef2 6a08 	vmov.f32	s13, #40	@ 0x41400000  12.0
 800da80:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800da84:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800da88:	eef4 7ac7 	vcmpe.f32	s15, s14
 800da8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da90:	dd02      	ble.n	800da98 <setTorque+0x1cc>
 800da92:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800da96:	e005      	b.n	800daa4 <setTorque+0x1d8>
 800da98:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800da9c:	eef2 6a08 	vmov.f32	s13, #40	@ 0x41400000  12.0
 800daa0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	edc3 7a49 	vstr	s15, [r3, #292]	@ 0x124
    motor->Tb = _constrain(Ub / U_DC, 0.0f, 1.0f);
 800daaa:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800daae:	eef2 6a08 	vmov.f32	s13, #40	@ 0x41400000  12.0
 800dab2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800dab6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800daba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dabe:	d502      	bpl.n	800dac6 <setTorque+0x1fa>
 800dac0:	eddf 7a39 	vldr	s15, [pc, #228]	@ 800dba8 <setTorque+0x2dc>
 800dac4:	e015      	b.n	800daf2 <setTorque+0x226>
 800dac6:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800daca:	eef2 6a08 	vmov.f32	s13, #40	@ 0x41400000  12.0
 800dace:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800dad2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800dad6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800dada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dade:	dd02      	ble.n	800dae6 <setTorque+0x21a>
 800dae0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800dae4:	e005      	b.n	800daf2 <setTorque+0x226>
 800dae6:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800daea:	eef2 6a08 	vmov.f32	s13, #40	@ 0x41400000  12.0
 800daee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	edc3 7a4a 	vstr	s15, [r3, #296]	@ 0x128
    motor->Tc = _constrain(Uc / U_DC, 0.0f, 1.0f);
 800daf8:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800dafc:	eef2 6a08 	vmov.f32	s13, #40	@ 0x41400000  12.0
 800db00:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800db04:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800db08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db0c:	d502      	bpl.n	800db14 <setTorque+0x248>
 800db0e:	eddf 7a26 	vldr	s15, [pc, #152]	@ 800dba8 <setTorque+0x2dc>
 800db12:	e015      	b.n	800db40 <setTorque+0x274>
 800db14:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800db18:	eef2 6a08 	vmov.f32	s13, #40	@ 0x41400000  12.0
 800db1c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800db20:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800db24:	eef4 7ac7 	vcmpe.f32	s15, s14
 800db28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db2c:	dd02      	ble.n	800db34 <setTorque+0x268>
 800db2e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800db32:	e005      	b.n	800db40 <setTorque+0x274>
 800db34:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800db38:	eef2 6a08 	vmov.f32	s13, #40	@ 0x41400000  12.0
 800db3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	edc3 7a4b 	vstr	s15, [r3, #300]	@ 0x12c

    motor->updatePwm(HALP_PWM_PERIOD * motor->Ta, HALP_PWM_PERIOD * motor->Tb, HALP_PWM_PERIOD * motor->Tc);
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 800db4c:	68fa      	ldr	r2, [r7, #12]
 800db4e:	edd2 7a49 	vldr	s15, [r2, #292]	@ 0x124
 800db52:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 800dbac <setTorque+0x2e0>
 800db56:	ee67 7a87 	vmul.f32	s15, s15, s14
 800db5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800db5e:	ee17 2a90 	vmov	r2, s15
 800db62:	b290      	uxth	r0, r2
 800db64:	68fa      	ldr	r2, [r7, #12]
 800db66:	edd2 7a4a 	vldr	s15, [r2, #296]	@ 0x128
 800db6a:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 800dbac <setTorque+0x2e0>
 800db6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800db72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800db76:	ee17 2a90 	vmov	r2, s15
 800db7a:	b291      	uxth	r1, r2
 800db7c:	68fa      	ldr	r2, [r7, #12]
 800db7e:	edd2 7a4b 	vldr	s15, [r2, #300]	@ 0x12c
 800db82:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 800dbac <setTorque+0x2e0>
 800db86:	ee67 7a87 	vmul.f32	s15, s15, s14
 800db8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800db8e:	ee17 2a90 	vmov	r2, s15
 800db92:	b292      	uxth	r2, r2
 800db94:	4798      	blx	r3
    // set the voltages in driver
    // driver->setPwm(Ua, Ub, Uc);
}
 800db96:	bf00      	nop
 800db98:	3738      	adds	r7, #56	@ 0x38
 800db9a:	46bd      	mov	sp, r7
 800db9c:	bd80      	pop	{r7, pc}
 800db9e:	bf00      	nop
 800dba0:	3f5db3d7 	.word	0x3f5db3d7
 800dba4:	405db3d7 	.word	0x405db3d7
 800dba8:	00000000 	.word	0x00000000
 800dbac:	45fa0000 	.word	0x45fa0000

0800dbb0 <atof>:
 800dbb0:	2100      	movs	r1, #0
 800dbb2:	f000 be0b 	b.w	800e7cc <strtod>

0800dbb6 <sulp>:
 800dbb6:	b570      	push	{r4, r5, r6, lr}
 800dbb8:	4604      	mov	r4, r0
 800dbba:	460d      	mov	r5, r1
 800dbbc:	ec45 4b10 	vmov	d0, r4, r5
 800dbc0:	4616      	mov	r6, r2
 800dbc2:	f003 fc7d 	bl	80114c0 <__ulp>
 800dbc6:	ec51 0b10 	vmov	r0, r1, d0
 800dbca:	b17e      	cbz	r6, 800dbec <sulp+0x36>
 800dbcc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800dbd0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	dd09      	ble.n	800dbec <sulp+0x36>
 800dbd8:	051b      	lsls	r3, r3, #20
 800dbda:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800dbde:	2400      	movs	r4, #0
 800dbe0:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800dbe4:	4622      	mov	r2, r4
 800dbe6:	462b      	mov	r3, r5
 800dbe8:	f7f2 fd2e 	bl	8000648 <__aeabi_dmul>
 800dbec:	ec41 0b10 	vmov	d0, r0, r1
 800dbf0:	bd70      	pop	{r4, r5, r6, pc}
 800dbf2:	0000      	movs	r0, r0
 800dbf4:	0000      	movs	r0, r0
	...

0800dbf8 <_strtod_l>:
 800dbf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbfc:	b09f      	sub	sp, #124	@ 0x7c
 800dbfe:	460c      	mov	r4, r1
 800dc00:	9217      	str	r2, [sp, #92]	@ 0x5c
 800dc02:	2200      	movs	r2, #0
 800dc04:	921a      	str	r2, [sp, #104]	@ 0x68
 800dc06:	9005      	str	r0, [sp, #20]
 800dc08:	f04f 0a00 	mov.w	sl, #0
 800dc0c:	f04f 0b00 	mov.w	fp, #0
 800dc10:	460a      	mov	r2, r1
 800dc12:	9219      	str	r2, [sp, #100]	@ 0x64
 800dc14:	7811      	ldrb	r1, [r2, #0]
 800dc16:	292b      	cmp	r1, #43	@ 0x2b
 800dc18:	d04a      	beq.n	800dcb0 <_strtod_l+0xb8>
 800dc1a:	d838      	bhi.n	800dc8e <_strtod_l+0x96>
 800dc1c:	290d      	cmp	r1, #13
 800dc1e:	d832      	bhi.n	800dc86 <_strtod_l+0x8e>
 800dc20:	2908      	cmp	r1, #8
 800dc22:	d832      	bhi.n	800dc8a <_strtod_l+0x92>
 800dc24:	2900      	cmp	r1, #0
 800dc26:	d03b      	beq.n	800dca0 <_strtod_l+0xa8>
 800dc28:	2200      	movs	r2, #0
 800dc2a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800dc2c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800dc2e:	782a      	ldrb	r2, [r5, #0]
 800dc30:	2a30      	cmp	r2, #48	@ 0x30
 800dc32:	f040 80b3 	bne.w	800dd9c <_strtod_l+0x1a4>
 800dc36:	786a      	ldrb	r2, [r5, #1]
 800dc38:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800dc3c:	2a58      	cmp	r2, #88	@ 0x58
 800dc3e:	d16e      	bne.n	800dd1e <_strtod_l+0x126>
 800dc40:	9302      	str	r3, [sp, #8]
 800dc42:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dc44:	9301      	str	r3, [sp, #4]
 800dc46:	ab1a      	add	r3, sp, #104	@ 0x68
 800dc48:	9300      	str	r3, [sp, #0]
 800dc4a:	4a8e      	ldr	r2, [pc, #568]	@ (800de84 <_strtod_l+0x28c>)
 800dc4c:	9805      	ldr	r0, [sp, #20]
 800dc4e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800dc50:	a919      	add	r1, sp, #100	@ 0x64
 800dc52:	f002 fd27 	bl	80106a4 <__gethex>
 800dc56:	f010 060f 	ands.w	r6, r0, #15
 800dc5a:	4604      	mov	r4, r0
 800dc5c:	d005      	beq.n	800dc6a <_strtod_l+0x72>
 800dc5e:	2e06      	cmp	r6, #6
 800dc60:	d128      	bne.n	800dcb4 <_strtod_l+0xbc>
 800dc62:	3501      	adds	r5, #1
 800dc64:	2300      	movs	r3, #0
 800dc66:	9519      	str	r5, [sp, #100]	@ 0x64
 800dc68:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dc6a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	f040 858e 	bne.w	800e78e <_strtod_l+0xb96>
 800dc72:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dc74:	b1cb      	cbz	r3, 800dcaa <_strtod_l+0xb2>
 800dc76:	4652      	mov	r2, sl
 800dc78:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800dc7c:	ec43 2b10 	vmov	d0, r2, r3
 800dc80:	b01f      	add	sp, #124	@ 0x7c
 800dc82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc86:	2920      	cmp	r1, #32
 800dc88:	d1ce      	bne.n	800dc28 <_strtod_l+0x30>
 800dc8a:	3201      	adds	r2, #1
 800dc8c:	e7c1      	b.n	800dc12 <_strtod_l+0x1a>
 800dc8e:	292d      	cmp	r1, #45	@ 0x2d
 800dc90:	d1ca      	bne.n	800dc28 <_strtod_l+0x30>
 800dc92:	2101      	movs	r1, #1
 800dc94:	910b      	str	r1, [sp, #44]	@ 0x2c
 800dc96:	1c51      	adds	r1, r2, #1
 800dc98:	9119      	str	r1, [sp, #100]	@ 0x64
 800dc9a:	7852      	ldrb	r2, [r2, #1]
 800dc9c:	2a00      	cmp	r2, #0
 800dc9e:	d1c5      	bne.n	800dc2c <_strtod_l+0x34>
 800dca0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800dca2:	9419      	str	r4, [sp, #100]	@ 0x64
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	f040 8570 	bne.w	800e78a <_strtod_l+0xb92>
 800dcaa:	4652      	mov	r2, sl
 800dcac:	465b      	mov	r3, fp
 800dcae:	e7e5      	b.n	800dc7c <_strtod_l+0x84>
 800dcb0:	2100      	movs	r1, #0
 800dcb2:	e7ef      	b.n	800dc94 <_strtod_l+0x9c>
 800dcb4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800dcb6:	b13a      	cbz	r2, 800dcc8 <_strtod_l+0xd0>
 800dcb8:	2135      	movs	r1, #53	@ 0x35
 800dcba:	a81c      	add	r0, sp, #112	@ 0x70
 800dcbc:	f003 fcfa 	bl	80116b4 <__copybits>
 800dcc0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800dcc2:	9805      	ldr	r0, [sp, #20]
 800dcc4:	f003 f8c8 	bl	8010e58 <_Bfree>
 800dcc8:	3e01      	subs	r6, #1
 800dcca:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800dccc:	2e04      	cmp	r6, #4
 800dcce:	d806      	bhi.n	800dcde <_strtod_l+0xe6>
 800dcd0:	e8df f006 	tbb	[pc, r6]
 800dcd4:	201d0314 	.word	0x201d0314
 800dcd8:	14          	.byte	0x14
 800dcd9:	00          	.byte	0x00
 800dcda:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800dcde:	05e1      	lsls	r1, r4, #23
 800dce0:	bf48      	it	mi
 800dce2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800dce6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800dcea:	0d1b      	lsrs	r3, r3, #20
 800dcec:	051b      	lsls	r3, r3, #20
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d1bb      	bne.n	800dc6a <_strtod_l+0x72>
 800dcf2:	f001 fd8d 	bl	800f810 <__errno>
 800dcf6:	2322      	movs	r3, #34	@ 0x22
 800dcf8:	6003      	str	r3, [r0, #0]
 800dcfa:	e7b6      	b.n	800dc6a <_strtod_l+0x72>
 800dcfc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800dd00:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800dd04:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800dd08:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800dd0c:	e7e7      	b.n	800dcde <_strtod_l+0xe6>
 800dd0e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800de8c <_strtod_l+0x294>
 800dd12:	e7e4      	b.n	800dcde <_strtod_l+0xe6>
 800dd14:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800dd18:	f04f 3aff 	mov.w	sl, #4294967295
 800dd1c:	e7df      	b.n	800dcde <_strtod_l+0xe6>
 800dd1e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dd20:	1c5a      	adds	r2, r3, #1
 800dd22:	9219      	str	r2, [sp, #100]	@ 0x64
 800dd24:	785b      	ldrb	r3, [r3, #1]
 800dd26:	2b30      	cmp	r3, #48	@ 0x30
 800dd28:	d0f9      	beq.n	800dd1e <_strtod_l+0x126>
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d09d      	beq.n	800dc6a <_strtod_l+0x72>
 800dd2e:	2301      	movs	r3, #1
 800dd30:	9309      	str	r3, [sp, #36]	@ 0x24
 800dd32:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dd34:	930c      	str	r3, [sp, #48]	@ 0x30
 800dd36:	2300      	movs	r3, #0
 800dd38:	9308      	str	r3, [sp, #32]
 800dd3a:	930a      	str	r3, [sp, #40]	@ 0x28
 800dd3c:	461f      	mov	r7, r3
 800dd3e:	220a      	movs	r2, #10
 800dd40:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800dd42:	7805      	ldrb	r5, [r0, #0]
 800dd44:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800dd48:	b2d9      	uxtb	r1, r3
 800dd4a:	2909      	cmp	r1, #9
 800dd4c:	d928      	bls.n	800dda0 <_strtod_l+0x1a8>
 800dd4e:	494e      	ldr	r1, [pc, #312]	@ (800de88 <_strtod_l+0x290>)
 800dd50:	2201      	movs	r2, #1
 800dd52:	f001 fd01 	bl	800f758 <strncmp>
 800dd56:	2800      	cmp	r0, #0
 800dd58:	d032      	beq.n	800ddc0 <_strtod_l+0x1c8>
 800dd5a:	2000      	movs	r0, #0
 800dd5c:	462a      	mov	r2, r5
 800dd5e:	4681      	mov	r9, r0
 800dd60:	463d      	mov	r5, r7
 800dd62:	4603      	mov	r3, r0
 800dd64:	2a65      	cmp	r2, #101	@ 0x65
 800dd66:	d001      	beq.n	800dd6c <_strtod_l+0x174>
 800dd68:	2a45      	cmp	r2, #69	@ 0x45
 800dd6a:	d114      	bne.n	800dd96 <_strtod_l+0x19e>
 800dd6c:	b91d      	cbnz	r5, 800dd76 <_strtod_l+0x17e>
 800dd6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dd70:	4302      	orrs	r2, r0
 800dd72:	d095      	beq.n	800dca0 <_strtod_l+0xa8>
 800dd74:	2500      	movs	r5, #0
 800dd76:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800dd78:	1c62      	adds	r2, r4, #1
 800dd7a:	9219      	str	r2, [sp, #100]	@ 0x64
 800dd7c:	7862      	ldrb	r2, [r4, #1]
 800dd7e:	2a2b      	cmp	r2, #43	@ 0x2b
 800dd80:	d077      	beq.n	800de72 <_strtod_l+0x27a>
 800dd82:	2a2d      	cmp	r2, #45	@ 0x2d
 800dd84:	d07b      	beq.n	800de7e <_strtod_l+0x286>
 800dd86:	f04f 0c00 	mov.w	ip, #0
 800dd8a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800dd8e:	2909      	cmp	r1, #9
 800dd90:	f240 8082 	bls.w	800de98 <_strtod_l+0x2a0>
 800dd94:	9419      	str	r4, [sp, #100]	@ 0x64
 800dd96:	f04f 0800 	mov.w	r8, #0
 800dd9a:	e0a2      	b.n	800dee2 <_strtod_l+0x2ea>
 800dd9c:	2300      	movs	r3, #0
 800dd9e:	e7c7      	b.n	800dd30 <_strtod_l+0x138>
 800dda0:	2f08      	cmp	r7, #8
 800dda2:	bfd5      	itete	le
 800dda4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800dda6:	9908      	ldrgt	r1, [sp, #32]
 800dda8:	fb02 3301 	mlale	r3, r2, r1, r3
 800ddac:	fb02 3301 	mlagt	r3, r2, r1, r3
 800ddb0:	f100 0001 	add.w	r0, r0, #1
 800ddb4:	bfd4      	ite	le
 800ddb6:	930a      	strle	r3, [sp, #40]	@ 0x28
 800ddb8:	9308      	strgt	r3, [sp, #32]
 800ddba:	3701      	adds	r7, #1
 800ddbc:	9019      	str	r0, [sp, #100]	@ 0x64
 800ddbe:	e7bf      	b.n	800dd40 <_strtod_l+0x148>
 800ddc0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ddc2:	1c5a      	adds	r2, r3, #1
 800ddc4:	9219      	str	r2, [sp, #100]	@ 0x64
 800ddc6:	785a      	ldrb	r2, [r3, #1]
 800ddc8:	b37f      	cbz	r7, 800de2a <_strtod_l+0x232>
 800ddca:	4681      	mov	r9, r0
 800ddcc:	463d      	mov	r5, r7
 800ddce:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800ddd2:	2b09      	cmp	r3, #9
 800ddd4:	d912      	bls.n	800ddfc <_strtod_l+0x204>
 800ddd6:	2301      	movs	r3, #1
 800ddd8:	e7c4      	b.n	800dd64 <_strtod_l+0x16c>
 800ddda:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dddc:	1c5a      	adds	r2, r3, #1
 800ddde:	9219      	str	r2, [sp, #100]	@ 0x64
 800dde0:	785a      	ldrb	r2, [r3, #1]
 800dde2:	3001      	adds	r0, #1
 800dde4:	2a30      	cmp	r2, #48	@ 0x30
 800dde6:	d0f8      	beq.n	800ddda <_strtod_l+0x1e2>
 800dde8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800ddec:	2b08      	cmp	r3, #8
 800ddee:	f200 84d3 	bhi.w	800e798 <_strtod_l+0xba0>
 800ddf2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ddf4:	930c      	str	r3, [sp, #48]	@ 0x30
 800ddf6:	4681      	mov	r9, r0
 800ddf8:	2000      	movs	r0, #0
 800ddfa:	4605      	mov	r5, r0
 800ddfc:	3a30      	subs	r2, #48	@ 0x30
 800ddfe:	f100 0301 	add.w	r3, r0, #1
 800de02:	d02a      	beq.n	800de5a <_strtod_l+0x262>
 800de04:	4499      	add	r9, r3
 800de06:	eb00 0c05 	add.w	ip, r0, r5
 800de0a:	462b      	mov	r3, r5
 800de0c:	210a      	movs	r1, #10
 800de0e:	4563      	cmp	r3, ip
 800de10:	d10d      	bne.n	800de2e <_strtod_l+0x236>
 800de12:	1c69      	adds	r1, r5, #1
 800de14:	4401      	add	r1, r0
 800de16:	4428      	add	r0, r5
 800de18:	2808      	cmp	r0, #8
 800de1a:	dc16      	bgt.n	800de4a <_strtod_l+0x252>
 800de1c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800de1e:	230a      	movs	r3, #10
 800de20:	fb03 2300 	mla	r3, r3, r0, r2
 800de24:	930a      	str	r3, [sp, #40]	@ 0x28
 800de26:	2300      	movs	r3, #0
 800de28:	e018      	b.n	800de5c <_strtod_l+0x264>
 800de2a:	4638      	mov	r0, r7
 800de2c:	e7da      	b.n	800dde4 <_strtod_l+0x1ec>
 800de2e:	2b08      	cmp	r3, #8
 800de30:	f103 0301 	add.w	r3, r3, #1
 800de34:	dc03      	bgt.n	800de3e <_strtod_l+0x246>
 800de36:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800de38:	434e      	muls	r6, r1
 800de3a:	960a      	str	r6, [sp, #40]	@ 0x28
 800de3c:	e7e7      	b.n	800de0e <_strtod_l+0x216>
 800de3e:	2b10      	cmp	r3, #16
 800de40:	bfde      	ittt	le
 800de42:	9e08      	ldrle	r6, [sp, #32]
 800de44:	434e      	mulle	r6, r1
 800de46:	9608      	strle	r6, [sp, #32]
 800de48:	e7e1      	b.n	800de0e <_strtod_l+0x216>
 800de4a:	280f      	cmp	r0, #15
 800de4c:	dceb      	bgt.n	800de26 <_strtod_l+0x22e>
 800de4e:	9808      	ldr	r0, [sp, #32]
 800de50:	230a      	movs	r3, #10
 800de52:	fb03 2300 	mla	r3, r3, r0, r2
 800de56:	9308      	str	r3, [sp, #32]
 800de58:	e7e5      	b.n	800de26 <_strtod_l+0x22e>
 800de5a:	4629      	mov	r1, r5
 800de5c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800de5e:	1c50      	adds	r0, r2, #1
 800de60:	9019      	str	r0, [sp, #100]	@ 0x64
 800de62:	7852      	ldrb	r2, [r2, #1]
 800de64:	4618      	mov	r0, r3
 800de66:	460d      	mov	r5, r1
 800de68:	e7b1      	b.n	800ddce <_strtod_l+0x1d6>
 800de6a:	f04f 0900 	mov.w	r9, #0
 800de6e:	2301      	movs	r3, #1
 800de70:	e77d      	b.n	800dd6e <_strtod_l+0x176>
 800de72:	f04f 0c00 	mov.w	ip, #0
 800de76:	1ca2      	adds	r2, r4, #2
 800de78:	9219      	str	r2, [sp, #100]	@ 0x64
 800de7a:	78a2      	ldrb	r2, [r4, #2]
 800de7c:	e785      	b.n	800dd8a <_strtod_l+0x192>
 800de7e:	f04f 0c01 	mov.w	ip, #1
 800de82:	e7f8      	b.n	800de76 <_strtod_l+0x27e>
 800de84:	08012704 	.word	0x08012704
 800de88:	080126ec 	.word	0x080126ec
 800de8c:	7ff00000 	.word	0x7ff00000
 800de90:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800de92:	1c51      	adds	r1, r2, #1
 800de94:	9119      	str	r1, [sp, #100]	@ 0x64
 800de96:	7852      	ldrb	r2, [r2, #1]
 800de98:	2a30      	cmp	r2, #48	@ 0x30
 800de9a:	d0f9      	beq.n	800de90 <_strtod_l+0x298>
 800de9c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800dea0:	2908      	cmp	r1, #8
 800dea2:	f63f af78 	bhi.w	800dd96 <_strtod_l+0x19e>
 800dea6:	3a30      	subs	r2, #48	@ 0x30
 800dea8:	920e      	str	r2, [sp, #56]	@ 0x38
 800deaa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800deac:	920f      	str	r2, [sp, #60]	@ 0x3c
 800deae:	f04f 080a 	mov.w	r8, #10
 800deb2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800deb4:	1c56      	adds	r6, r2, #1
 800deb6:	9619      	str	r6, [sp, #100]	@ 0x64
 800deb8:	7852      	ldrb	r2, [r2, #1]
 800deba:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800debe:	f1be 0f09 	cmp.w	lr, #9
 800dec2:	d939      	bls.n	800df38 <_strtod_l+0x340>
 800dec4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800dec6:	1a76      	subs	r6, r6, r1
 800dec8:	2e08      	cmp	r6, #8
 800deca:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800dece:	dc03      	bgt.n	800ded8 <_strtod_l+0x2e0>
 800ded0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ded2:	4588      	cmp	r8, r1
 800ded4:	bfa8      	it	ge
 800ded6:	4688      	movge	r8, r1
 800ded8:	f1bc 0f00 	cmp.w	ip, #0
 800dedc:	d001      	beq.n	800dee2 <_strtod_l+0x2ea>
 800dede:	f1c8 0800 	rsb	r8, r8, #0
 800dee2:	2d00      	cmp	r5, #0
 800dee4:	d14e      	bne.n	800df84 <_strtod_l+0x38c>
 800dee6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dee8:	4308      	orrs	r0, r1
 800deea:	f47f aebe 	bne.w	800dc6a <_strtod_l+0x72>
 800deee:	2b00      	cmp	r3, #0
 800def0:	f47f aed6 	bne.w	800dca0 <_strtod_l+0xa8>
 800def4:	2a69      	cmp	r2, #105	@ 0x69
 800def6:	d028      	beq.n	800df4a <_strtod_l+0x352>
 800def8:	dc25      	bgt.n	800df46 <_strtod_l+0x34e>
 800defa:	2a49      	cmp	r2, #73	@ 0x49
 800defc:	d025      	beq.n	800df4a <_strtod_l+0x352>
 800defe:	2a4e      	cmp	r2, #78	@ 0x4e
 800df00:	f47f aece 	bne.w	800dca0 <_strtod_l+0xa8>
 800df04:	499b      	ldr	r1, [pc, #620]	@ (800e174 <_strtod_l+0x57c>)
 800df06:	a819      	add	r0, sp, #100	@ 0x64
 800df08:	f002 fdee 	bl	8010ae8 <__match>
 800df0c:	2800      	cmp	r0, #0
 800df0e:	f43f aec7 	beq.w	800dca0 <_strtod_l+0xa8>
 800df12:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800df14:	781b      	ldrb	r3, [r3, #0]
 800df16:	2b28      	cmp	r3, #40	@ 0x28
 800df18:	d12e      	bne.n	800df78 <_strtod_l+0x380>
 800df1a:	4997      	ldr	r1, [pc, #604]	@ (800e178 <_strtod_l+0x580>)
 800df1c:	aa1c      	add	r2, sp, #112	@ 0x70
 800df1e:	a819      	add	r0, sp, #100	@ 0x64
 800df20:	f002 fdf6 	bl	8010b10 <__hexnan>
 800df24:	2805      	cmp	r0, #5
 800df26:	d127      	bne.n	800df78 <_strtod_l+0x380>
 800df28:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800df2a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800df2e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800df32:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800df36:	e698      	b.n	800dc6a <_strtod_l+0x72>
 800df38:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800df3a:	fb08 2101 	mla	r1, r8, r1, r2
 800df3e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800df42:	920e      	str	r2, [sp, #56]	@ 0x38
 800df44:	e7b5      	b.n	800deb2 <_strtod_l+0x2ba>
 800df46:	2a6e      	cmp	r2, #110	@ 0x6e
 800df48:	e7da      	b.n	800df00 <_strtod_l+0x308>
 800df4a:	498c      	ldr	r1, [pc, #560]	@ (800e17c <_strtod_l+0x584>)
 800df4c:	a819      	add	r0, sp, #100	@ 0x64
 800df4e:	f002 fdcb 	bl	8010ae8 <__match>
 800df52:	2800      	cmp	r0, #0
 800df54:	f43f aea4 	beq.w	800dca0 <_strtod_l+0xa8>
 800df58:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800df5a:	4989      	ldr	r1, [pc, #548]	@ (800e180 <_strtod_l+0x588>)
 800df5c:	3b01      	subs	r3, #1
 800df5e:	a819      	add	r0, sp, #100	@ 0x64
 800df60:	9319      	str	r3, [sp, #100]	@ 0x64
 800df62:	f002 fdc1 	bl	8010ae8 <__match>
 800df66:	b910      	cbnz	r0, 800df6e <_strtod_l+0x376>
 800df68:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800df6a:	3301      	adds	r3, #1
 800df6c:	9319      	str	r3, [sp, #100]	@ 0x64
 800df6e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800e190 <_strtod_l+0x598>
 800df72:	f04f 0a00 	mov.w	sl, #0
 800df76:	e678      	b.n	800dc6a <_strtod_l+0x72>
 800df78:	4882      	ldr	r0, [pc, #520]	@ (800e184 <_strtod_l+0x58c>)
 800df7a:	f001 fc85 	bl	800f888 <nan>
 800df7e:	ec5b ab10 	vmov	sl, fp, d0
 800df82:	e672      	b.n	800dc6a <_strtod_l+0x72>
 800df84:	eba8 0309 	sub.w	r3, r8, r9
 800df88:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800df8a:	9309      	str	r3, [sp, #36]	@ 0x24
 800df8c:	2f00      	cmp	r7, #0
 800df8e:	bf08      	it	eq
 800df90:	462f      	moveq	r7, r5
 800df92:	2d10      	cmp	r5, #16
 800df94:	462c      	mov	r4, r5
 800df96:	bfa8      	it	ge
 800df98:	2410      	movge	r4, #16
 800df9a:	f7f2 fadb 	bl	8000554 <__aeabi_ui2d>
 800df9e:	2d09      	cmp	r5, #9
 800dfa0:	4682      	mov	sl, r0
 800dfa2:	468b      	mov	fp, r1
 800dfa4:	dc13      	bgt.n	800dfce <_strtod_l+0x3d6>
 800dfa6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	f43f ae5e 	beq.w	800dc6a <_strtod_l+0x72>
 800dfae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dfb0:	dd78      	ble.n	800e0a4 <_strtod_l+0x4ac>
 800dfb2:	2b16      	cmp	r3, #22
 800dfb4:	dc5f      	bgt.n	800e076 <_strtod_l+0x47e>
 800dfb6:	4974      	ldr	r1, [pc, #464]	@ (800e188 <_strtod_l+0x590>)
 800dfb8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800dfbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dfc0:	4652      	mov	r2, sl
 800dfc2:	465b      	mov	r3, fp
 800dfc4:	f7f2 fb40 	bl	8000648 <__aeabi_dmul>
 800dfc8:	4682      	mov	sl, r0
 800dfca:	468b      	mov	fp, r1
 800dfcc:	e64d      	b.n	800dc6a <_strtod_l+0x72>
 800dfce:	4b6e      	ldr	r3, [pc, #440]	@ (800e188 <_strtod_l+0x590>)
 800dfd0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800dfd4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800dfd8:	f7f2 fb36 	bl	8000648 <__aeabi_dmul>
 800dfdc:	4682      	mov	sl, r0
 800dfde:	9808      	ldr	r0, [sp, #32]
 800dfe0:	468b      	mov	fp, r1
 800dfe2:	f7f2 fab7 	bl	8000554 <__aeabi_ui2d>
 800dfe6:	4602      	mov	r2, r0
 800dfe8:	460b      	mov	r3, r1
 800dfea:	4650      	mov	r0, sl
 800dfec:	4659      	mov	r1, fp
 800dfee:	f7f2 f975 	bl	80002dc <__adddf3>
 800dff2:	2d0f      	cmp	r5, #15
 800dff4:	4682      	mov	sl, r0
 800dff6:	468b      	mov	fp, r1
 800dff8:	ddd5      	ble.n	800dfa6 <_strtod_l+0x3ae>
 800dffa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dffc:	1b2c      	subs	r4, r5, r4
 800dffe:	441c      	add	r4, r3
 800e000:	2c00      	cmp	r4, #0
 800e002:	f340 8096 	ble.w	800e132 <_strtod_l+0x53a>
 800e006:	f014 030f 	ands.w	r3, r4, #15
 800e00a:	d00a      	beq.n	800e022 <_strtod_l+0x42a>
 800e00c:	495e      	ldr	r1, [pc, #376]	@ (800e188 <_strtod_l+0x590>)
 800e00e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e012:	4652      	mov	r2, sl
 800e014:	465b      	mov	r3, fp
 800e016:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e01a:	f7f2 fb15 	bl	8000648 <__aeabi_dmul>
 800e01e:	4682      	mov	sl, r0
 800e020:	468b      	mov	fp, r1
 800e022:	f034 040f 	bics.w	r4, r4, #15
 800e026:	d073      	beq.n	800e110 <_strtod_l+0x518>
 800e028:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800e02c:	dd48      	ble.n	800e0c0 <_strtod_l+0x4c8>
 800e02e:	2400      	movs	r4, #0
 800e030:	46a0      	mov	r8, r4
 800e032:	940a      	str	r4, [sp, #40]	@ 0x28
 800e034:	46a1      	mov	r9, r4
 800e036:	9a05      	ldr	r2, [sp, #20]
 800e038:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800e190 <_strtod_l+0x598>
 800e03c:	2322      	movs	r3, #34	@ 0x22
 800e03e:	6013      	str	r3, [r2, #0]
 800e040:	f04f 0a00 	mov.w	sl, #0
 800e044:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e046:	2b00      	cmp	r3, #0
 800e048:	f43f ae0f 	beq.w	800dc6a <_strtod_l+0x72>
 800e04c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e04e:	9805      	ldr	r0, [sp, #20]
 800e050:	f002 ff02 	bl	8010e58 <_Bfree>
 800e054:	9805      	ldr	r0, [sp, #20]
 800e056:	4649      	mov	r1, r9
 800e058:	f002 fefe 	bl	8010e58 <_Bfree>
 800e05c:	9805      	ldr	r0, [sp, #20]
 800e05e:	4641      	mov	r1, r8
 800e060:	f002 fefa 	bl	8010e58 <_Bfree>
 800e064:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e066:	9805      	ldr	r0, [sp, #20]
 800e068:	f002 fef6 	bl	8010e58 <_Bfree>
 800e06c:	9805      	ldr	r0, [sp, #20]
 800e06e:	4621      	mov	r1, r4
 800e070:	f002 fef2 	bl	8010e58 <_Bfree>
 800e074:	e5f9      	b.n	800dc6a <_strtod_l+0x72>
 800e076:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e078:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800e07c:	4293      	cmp	r3, r2
 800e07e:	dbbc      	blt.n	800dffa <_strtod_l+0x402>
 800e080:	4c41      	ldr	r4, [pc, #260]	@ (800e188 <_strtod_l+0x590>)
 800e082:	f1c5 050f 	rsb	r5, r5, #15
 800e086:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800e08a:	4652      	mov	r2, sl
 800e08c:	465b      	mov	r3, fp
 800e08e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e092:	f7f2 fad9 	bl	8000648 <__aeabi_dmul>
 800e096:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e098:	1b5d      	subs	r5, r3, r5
 800e09a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800e09e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e0a2:	e78f      	b.n	800dfc4 <_strtod_l+0x3cc>
 800e0a4:	3316      	adds	r3, #22
 800e0a6:	dba8      	blt.n	800dffa <_strtod_l+0x402>
 800e0a8:	4b37      	ldr	r3, [pc, #220]	@ (800e188 <_strtod_l+0x590>)
 800e0aa:	eba9 0808 	sub.w	r8, r9, r8
 800e0ae:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800e0b2:	e9d8 2300 	ldrd	r2, r3, [r8]
 800e0b6:	4650      	mov	r0, sl
 800e0b8:	4659      	mov	r1, fp
 800e0ba:	f7f2 fbef 	bl	800089c <__aeabi_ddiv>
 800e0be:	e783      	b.n	800dfc8 <_strtod_l+0x3d0>
 800e0c0:	4b32      	ldr	r3, [pc, #200]	@ (800e18c <_strtod_l+0x594>)
 800e0c2:	9308      	str	r3, [sp, #32]
 800e0c4:	2300      	movs	r3, #0
 800e0c6:	1124      	asrs	r4, r4, #4
 800e0c8:	4650      	mov	r0, sl
 800e0ca:	4659      	mov	r1, fp
 800e0cc:	461e      	mov	r6, r3
 800e0ce:	2c01      	cmp	r4, #1
 800e0d0:	dc21      	bgt.n	800e116 <_strtod_l+0x51e>
 800e0d2:	b10b      	cbz	r3, 800e0d8 <_strtod_l+0x4e0>
 800e0d4:	4682      	mov	sl, r0
 800e0d6:	468b      	mov	fp, r1
 800e0d8:	492c      	ldr	r1, [pc, #176]	@ (800e18c <_strtod_l+0x594>)
 800e0da:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800e0de:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800e0e2:	4652      	mov	r2, sl
 800e0e4:	465b      	mov	r3, fp
 800e0e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e0ea:	f7f2 faad 	bl	8000648 <__aeabi_dmul>
 800e0ee:	4b28      	ldr	r3, [pc, #160]	@ (800e190 <_strtod_l+0x598>)
 800e0f0:	460a      	mov	r2, r1
 800e0f2:	400b      	ands	r3, r1
 800e0f4:	4927      	ldr	r1, [pc, #156]	@ (800e194 <_strtod_l+0x59c>)
 800e0f6:	428b      	cmp	r3, r1
 800e0f8:	4682      	mov	sl, r0
 800e0fa:	d898      	bhi.n	800e02e <_strtod_l+0x436>
 800e0fc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800e100:	428b      	cmp	r3, r1
 800e102:	bf86      	itte	hi
 800e104:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800e198 <_strtod_l+0x5a0>
 800e108:	f04f 3aff 	movhi.w	sl, #4294967295
 800e10c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800e110:	2300      	movs	r3, #0
 800e112:	9308      	str	r3, [sp, #32]
 800e114:	e07a      	b.n	800e20c <_strtod_l+0x614>
 800e116:	07e2      	lsls	r2, r4, #31
 800e118:	d505      	bpl.n	800e126 <_strtod_l+0x52e>
 800e11a:	9b08      	ldr	r3, [sp, #32]
 800e11c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e120:	f7f2 fa92 	bl	8000648 <__aeabi_dmul>
 800e124:	2301      	movs	r3, #1
 800e126:	9a08      	ldr	r2, [sp, #32]
 800e128:	3208      	adds	r2, #8
 800e12a:	3601      	adds	r6, #1
 800e12c:	1064      	asrs	r4, r4, #1
 800e12e:	9208      	str	r2, [sp, #32]
 800e130:	e7cd      	b.n	800e0ce <_strtod_l+0x4d6>
 800e132:	d0ed      	beq.n	800e110 <_strtod_l+0x518>
 800e134:	4264      	negs	r4, r4
 800e136:	f014 020f 	ands.w	r2, r4, #15
 800e13a:	d00a      	beq.n	800e152 <_strtod_l+0x55a>
 800e13c:	4b12      	ldr	r3, [pc, #72]	@ (800e188 <_strtod_l+0x590>)
 800e13e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e142:	4650      	mov	r0, sl
 800e144:	4659      	mov	r1, fp
 800e146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e14a:	f7f2 fba7 	bl	800089c <__aeabi_ddiv>
 800e14e:	4682      	mov	sl, r0
 800e150:	468b      	mov	fp, r1
 800e152:	1124      	asrs	r4, r4, #4
 800e154:	d0dc      	beq.n	800e110 <_strtod_l+0x518>
 800e156:	2c1f      	cmp	r4, #31
 800e158:	dd20      	ble.n	800e19c <_strtod_l+0x5a4>
 800e15a:	2400      	movs	r4, #0
 800e15c:	46a0      	mov	r8, r4
 800e15e:	940a      	str	r4, [sp, #40]	@ 0x28
 800e160:	46a1      	mov	r9, r4
 800e162:	9a05      	ldr	r2, [sp, #20]
 800e164:	2322      	movs	r3, #34	@ 0x22
 800e166:	f04f 0a00 	mov.w	sl, #0
 800e16a:	f04f 0b00 	mov.w	fp, #0
 800e16e:	6013      	str	r3, [r2, #0]
 800e170:	e768      	b.n	800e044 <_strtod_l+0x44c>
 800e172:	bf00      	nop
 800e174:	0801274d 	.word	0x0801274d
 800e178:	080126f0 	.word	0x080126f0
 800e17c:	08012745 	.word	0x08012745
 800e180:	08012784 	.word	0x08012784
 800e184:	08012b15 	.word	0x08012b15
 800e188:	08012900 	.word	0x08012900
 800e18c:	080128d8 	.word	0x080128d8
 800e190:	7ff00000 	.word	0x7ff00000
 800e194:	7ca00000 	.word	0x7ca00000
 800e198:	7fefffff 	.word	0x7fefffff
 800e19c:	f014 0310 	ands.w	r3, r4, #16
 800e1a0:	bf18      	it	ne
 800e1a2:	236a      	movne	r3, #106	@ 0x6a
 800e1a4:	4ea9      	ldr	r6, [pc, #676]	@ (800e44c <_strtod_l+0x854>)
 800e1a6:	9308      	str	r3, [sp, #32]
 800e1a8:	4650      	mov	r0, sl
 800e1aa:	4659      	mov	r1, fp
 800e1ac:	2300      	movs	r3, #0
 800e1ae:	07e2      	lsls	r2, r4, #31
 800e1b0:	d504      	bpl.n	800e1bc <_strtod_l+0x5c4>
 800e1b2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e1b6:	f7f2 fa47 	bl	8000648 <__aeabi_dmul>
 800e1ba:	2301      	movs	r3, #1
 800e1bc:	1064      	asrs	r4, r4, #1
 800e1be:	f106 0608 	add.w	r6, r6, #8
 800e1c2:	d1f4      	bne.n	800e1ae <_strtod_l+0x5b6>
 800e1c4:	b10b      	cbz	r3, 800e1ca <_strtod_l+0x5d2>
 800e1c6:	4682      	mov	sl, r0
 800e1c8:	468b      	mov	fp, r1
 800e1ca:	9b08      	ldr	r3, [sp, #32]
 800e1cc:	b1b3      	cbz	r3, 800e1fc <_strtod_l+0x604>
 800e1ce:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800e1d2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	4659      	mov	r1, fp
 800e1da:	dd0f      	ble.n	800e1fc <_strtod_l+0x604>
 800e1dc:	2b1f      	cmp	r3, #31
 800e1de:	dd55      	ble.n	800e28c <_strtod_l+0x694>
 800e1e0:	2b34      	cmp	r3, #52	@ 0x34
 800e1e2:	bfde      	ittt	le
 800e1e4:	f04f 33ff 	movle.w	r3, #4294967295
 800e1e8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800e1ec:	4093      	lslle	r3, r2
 800e1ee:	f04f 0a00 	mov.w	sl, #0
 800e1f2:	bfcc      	ite	gt
 800e1f4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800e1f8:	ea03 0b01 	andle.w	fp, r3, r1
 800e1fc:	2200      	movs	r2, #0
 800e1fe:	2300      	movs	r3, #0
 800e200:	4650      	mov	r0, sl
 800e202:	4659      	mov	r1, fp
 800e204:	f7f2 fc88 	bl	8000b18 <__aeabi_dcmpeq>
 800e208:	2800      	cmp	r0, #0
 800e20a:	d1a6      	bne.n	800e15a <_strtod_l+0x562>
 800e20c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e20e:	9300      	str	r3, [sp, #0]
 800e210:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800e212:	9805      	ldr	r0, [sp, #20]
 800e214:	462b      	mov	r3, r5
 800e216:	463a      	mov	r2, r7
 800e218:	f002 fe86 	bl	8010f28 <__s2b>
 800e21c:	900a      	str	r0, [sp, #40]	@ 0x28
 800e21e:	2800      	cmp	r0, #0
 800e220:	f43f af05 	beq.w	800e02e <_strtod_l+0x436>
 800e224:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e226:	2a00      	cmp	r2, #0
 800e228:	eba9 0308 	sub.w	r3, r9, r8
 800e22c:	bfa8      	it	ge
 800e22e:	2300      	movge	r3, #0
 800e230:	9312      	str	r3, [sp, #72]	@ 0x48
 800e232:	2400      	movs	r4, #0
 800e234:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800e238:	9316      	str	r3, [sp, #88]	@ 0x58
 800e23a:	46a0      	mov	r8, r4
 800e23c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e23e:	9805      	ldr	r0, [sp, #20]
 800e240:	6859      	ldr	r1, [r3, #4]
 800e242:	f002 fdc9 	bl	8010dd8 <_Balloc>
 800e246:	4681      	mov	r9, r0
 800e248:	2800      	cmp	r0, #0
 800e24a:	f43f aef4 	beq.w	800e036 <_strtod_l+0x43e>
 800e24e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e250:	691a      	ldr	r2, [r3, #16]
 800e252:	3202      	adds	r2, #2
 800e254:	f103 010c 	add.w	r1, r3, #12
 800e258:	0092      	lsls	r2, r2, #2
 800e25a:	300c      	adds	r0, #12
 800e25c:	f001 fb05 	bl	800f86a <memcpy>
 800e260:	ec4b ab10 	vmov	d0, sl, fp
 800e264:	9805      	ldr	r0, [sp, #20]
 800e266:	aa1c      	add	r2, sp, #112	@ 0x70
 800e268:	a91b      	add	r1, sp, #108	@ 0x6c
 800e26a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800e26e:	f003 f997 	bl	80115a0 <__d2b>
 800e272:	901a      	str	r0, [sp, #104]	@ 0x68
 800e274:	2800      	cmp	r0, #0
 800e276:	f43f aede 	beq.w	800e036 <_strtod_l+0x43e>
 800e27a:	9805      	ldr	r0, [sp, #20]
 800e27c:	2101      	movs	r1, #1
 800e27e:	f002 fee9 	bl	8011054 <__i2b>
 800e282:	4680      	mov	r8, r0
 800e284:	b948      	cbnz	r0, 800e29a <_strtod_l+0x6a2>
 800e286:	f04f 0800 	mov.w	r8, #0
 800e28a:	e6d4      	b.n	800e036 <_strtod_l+0x43e>
 800e28c:	f04f 32ff 	mov.w	r2, #4294967295
 800e290:	fa02 f303 	lsl.w	r3, r2, r3
 800e294:	ea03 0a0a 	and.w	sl, r3, sl
 800e298:	e7b0      	b.n	800e1fc <_strtod_l+0x604>
 800e29a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800e29c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800e29e:	2d00      	cmp	r5, #0
 800e2a0:	bfab      	itete	ge
 800e2a2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800e2a4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800e2a6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800e2a8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800e2aa:	bfac      	ite	ge
 800e2ac:	18ef      	addge	r7, r5, r3
 800e2ae:	1b5e      	sublt	r6, r3, r5
 800e2b0:	9b08      	ldr	r3, [sp, #32]
 800e2b2:	1aed      	subs	r5, r5, r3
 800e2b4:	4415      	add	r5, r2
 800e2b6:	4b66      	ldr	r3, [pc, #408]	@ (800e450 <_strtod_l+0x858>)
 800e2b8:	3d01      	subs	r5, #1
 800e2ba:	429d      	cmp	r5, r3
 800e2bc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800e2c0:	da50      	bge.n	800e364 <_strtod_l+0x76c>
 800e2c2:	1b5b      	subs	r3, r3, r5
 800e2c4:	2b1f      	cmp	r3, #31
 800e2c6:	eba2 0203 	sub.w	r2, r2, r3
 800e2ca:	f04f 0101 	mov.w	r1, #1
 800e2ce:	dc3d      	bgt.n	800e34c <_strtod_l+0x754>
 800e2d0:	fa01 f303 	lsl.w	r3, r1, r3
 800e2d4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e2d6:	2300      	movs	r3, #0
 800e2d8:	9310      	str	r3, [sp, #64]	@ 0x40
 800e2da:	18bd      	adds	r5, r7, r2
 800e2dc:	9b08      	ldr	r3, [sp, #32]
 800e2de:	42af      	cmp	r7, r5
 800e2e0:	4416      	add	r6, r2
 800e2e2:	441e      	add	r6, r3
 800e2e4:	463b      	mov	r3, r7
 800e2e6:	bfa8      	it	ge
 800e2e8:	462b      	movge	r3, r5
 800e2ea:	42b3      	cmp	r3, r6
 800e2ec:	bfa8      	it	ge
 800e2ee:	4633      	movge	r3, r6
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	bfc2      	ittt	gt
 800e2f4:	1aed      	subgt	r5, r5, r3
 800e2f6:	1af6      	subgt	r6, r6, r3
 800e2f8:	1aff      	subgt	r7, r7, r3
 800e2fa:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	dd16      	ble.n	800e32e <_strtod_l+0x736>
 800e300:	4641      	mov	r1, r8
 800e302:	9805      	ldr	r0, [sp, #20]
 800e304:	461a      	mov	r2, r3
 800e306:	f002 ff65 	bl	80111d4 <__pow5mult>
 800e30a:	4680      	mov	r8, r0
 800e30c:	2800      	cmp	r0, #0
 800e30e:	d0ba      	beq.n	800e286 <_strtod_l+0x68e>
 800e310:	4601      	mov	r1, r0
 800e312:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e314:	9805      	ldr	r0, [sp, #20]
 800e316:	f002 feb3 	bl	8011080 <__multiply>
 800e31a:	900e      	str	r0, [sp, #56]	@ 0x38
 800e31c:	2800      	cmp	r0, #0
 800e31e:	f43f ae8a 	beq.w	800e036 <_strtod_l+0x43e>
 800e322:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e324:	9805      	ldr	r0, [sp, #20]
 800e326:	f002 fd97 	bl	8010e58 <_Bfree>
 800e32a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e32c:	931a      	str	r3, [sp, #104]	@ 0x68
 800e32e:	2d00      	cmp	r5, #0
 800e330:	dc1d      	bgt.n	800e36e <_strtod_l+0x776>
 800e332:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e334:	2b00      	cmp	r3, #0
 800e336:	dd23      	ble.n	800e380 <_strtod_l+0x788>
 800e338:	4649      	mov	r1, r9
 800e33a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800e33c:	9805      	ldr	r0, [sp, #20]
 800e33e:	f002 ff49 	bl	80111d4 <__pow5mult>
 800e342:	4681      	mov	r9, r0
 800e344:	b9e0      	cbnz	r0, 800e380 <_strtod_l+0x788>
 800e346:	f04f 0900 	mov.w	r9, #0
 800e34a:	e674      	b.n	800e036 <_strtod_l+0x43e>
 800e34c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800e350:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800e354:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800e358:	35e2      	adds	r5, #226	@ 0xe2
 800e35a:	fa01 f305 	lsl.w	r3, r1, r5
 800e35e:	9310      	str	r3, [sp, #64]	@ 0x40
 800e360:	9113      	str	r1, [sp, #76]	@ 0x4c
 800e362:	e7ba      	b.n	800e2da <_strtod_l+0x6e2>
 800e364:	2300      	movs	r3, #0
 800e366:	9310      	str	r3, [sp, #64]	@ 0x40
 800e368:	2301      	movs	r3, #1
 800e36a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e36c:	e7b5      	b.n	800e2da <_strtod_l+0x6e2>
 800e36e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e370:	9805      	ldr	r0, [sp, #20]
 800e372:	462a      	mov	r2, r5
 800e374:	f002 ff88 	bl	8011288 <__lshift>
 800e378:	901a      	str	r0, [sp, #104]	@ 0x68
 800e37a:	2800      	cmp	r0, #0
 800e37c:	d1d9      	bne.n	800e332 <_strtod_l+0x73a>
 800e37e:	e65a      	b.n	800e036 <_strtod_l+0x43e>
 800e380:	2e00      	cmp	r6, #0
 800e382:	dd07      	ble.n	800e394 <_strtod_l+0x79c>
 800e384:	4649      	mov	r1, r9
 800e386:	9805      	ldr	r0, [sp, #20]
 800e388:	4632      	mov	r2, r6
 800e38a:	f002 ff7d 	bl	8011288 <__lshift>
 800e38e:	4681      	mov	r9, r0
 800e390:	2800      	cmp	r0, #0
 800e392:	d0d8      	beq.n	800e346 <_strtod_l+0x74e>
 800e394:	2f00      	cmp	r7, #0
 800e396:	dd08      	ble.n	800e3aa <_strtod_l+0x7b2>
 800e398:	4641      	mov	r1, r8
 800e39a:	9805      	ldr	r0, [sp, #20]
 800e39c:	463a      	mov	r2, r7
 800e39e:	f002 ff73 	bl	8011288 <__lshift>
 800e3a2:	4680      	mov	r8, r0
 800e3a4:	2800      	cmp	r0, #0
 800e3a6:	f43f ae46 	beq.w	800e036 <_strtod_l+0x43e>
 800e3aa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e3ac:	9805      	ldr	r0, [sp, #20]
 800e3ae:	464a      	mov	r2, r9
 800e3b0:	f002 fff2 	bl	8011398 <__mdiff>
 800e3b4:	4604      	mov	r4, r0
 800e3b6:	2800      	cmp	r0, #0
 800e3b8:	f43f ae3d 	beq.w	800e036 <_strtod_l+0x43e>
 800e3bc:	68c3      	ldr	r3, [r0, #12]
 800e3be:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e3c0:	2300      	movs	r3, #0
 800e3c2:	60c3      	str	r3, [r0, #12]
 800e3c4:	4641      	mov	r1, r8
 800e3c6:	f002 ffcb 	bl	8011360 <__mcmp>
 800e3ca:	2800      	cmp	r0, #0
 800e3cc:	da46      	bge.n	800e45c <_strtod_l+0x864>
 800e3ce:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e3d0:	ea53 030a 	orrs.w	r3, r3, sl
 800e3d4:	d16c      	bne.n	800e4b0 <_strtod_l+0x8b8>
 800e3d6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d168      	bne.n	800e4b0 <_strtod_l+0x8b8>
 800e3de:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e3e2:	0d1b      	lsrs	r3, r3, #20
 800e3e4:	051b      	lsls	r3, r3, #20
 800e3e6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e3ea:	d961      	bls.n	800e4b0 <_strtod_l+0x8b8>
 800e3ec:	6963      	ldr	r3, [r4, #20]
 800e3ee:	b913      	cbnz	r3, 800e3f6 <_strtod_l+0x7fe>
 800e3f0:	6923      	ldr	r3, [r4, #16]
 800e3f2:	2b01      	cmp	r3, #1
 800e3f4:	dd5c      	ble.n	800e4b0 <_strtod_l+0x8b8>
 800e3f6:	4621      	mov	r1, r4
 800e3f8:	2201      	movs	r2, #1
 800e3fa:	9805      	ldr	r0, [sp, #20]
 800e3fc:	f002 ff44 	bl	8011288 <__lshift>
 800e400:	4641      	mov	r1, r8
 800e402:	4604      	mov	r4, r0
 800e404:	f002 ffac 	bl	8011360 <__mcmp>
 800e408:	2800      	cmp	r0, #0
 800e40a:	dd51      	ble.n	800e4b0 <_strtod_l+0x8b8>
 800e40c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e410:	9a08      	ldr	r2, [sp, #32]
 800e412:	0d1b      	lsrs	r3, r3, #20
 800e414:	051b      	lsls	r3, r3, #20
 800e416:	2a00      	cmp	r2, #0
 800e418:	d06b      	beq.n	800e4f2 <_strtod_l+0x8fa>
 800e41a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e41e:	d868      	bhi.n	800e4f2 <_strtod_l+0x8fa>
 800e420:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800e424:	f67f ae9d 	bls.w	800e162 <_strtod_l+0x56a>
 800e428:	4b0a      	ldr	r3, [pc, #40]	@ (800e454 <_strtod_l+0x85c>)
 800e42a:	4650      	mov	r0, sl
 800e42c:	4659      	mov	r1, fp
 800e42e:	2200      	movs	r2, #0
 800e430:	f7f2 f90a 	bl	8000648 <__aeabi_dmul>
 800e434:	4b08      	ldr	r3, [pc, #32]	@ (800e458 <_strtod_l+0x860>)
 800e436:	400b      	ands	r3, r1
 800e438:	4682      	mov	sl, r0
 800e43a:	468b      	mov	fp, r1
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	f47f ae05 	bne.w	800e04c <_strtod_l+0x454>
 800e442:	9a05      	ldr	r2, [sp, #20]
 800e444:	2322      	movs	r3, #34	@ 0x22
 800e446:	6013      	str	r3, [r2, #0]
 800e448:	e600      	b.n	800e04c <_strtod_l+0x454>
 800e44a:	bf00      	nop
 800e44c:	08012718 	.word	0x08012718
 800e450:	fffffc02 	.word	0xfffffc02
 800e454:	39500000 	.word	0x39500000
 800e458:	7ff00000 	.word	0x7ff00000
 800e45c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800e460:	d165      	bne.n	800e52e <_strtod_l+0x936>
 800e462:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800e464:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e468:	b35a      	cbz	r2, 800e4c2 <_strtod_l+0x8ca>
 800e46a:	4a9f      	ldr	r2, [pc, #636]	@ (800e6e8 <_strtod_l+0xaf0>)
 800e46c:	4293      	cmp	r3, r2
 800e46e:	d12b      	bne.n	800e4c8 <_strtod_l+0x8d0>
 800e470:	9b08      	ldr	r3, [sp, #32]
 800e472:	4651      	mov	r1, sl
 800e474:	b303      	cbz	r3, 800e4b8 <_strtod_l+0x8c0>
 800e476:	4b9d      	ldr	r3, [pc, #628]	@ (800e6ec <_strtod_l+0xaf4>)
 800e478:	465a      	mov	r2, fp
 800e47a:	4013      	ands	r3, r2
 800e47c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800e480:	f04f 32ff 	mov.w	r2, #4294967295
 800e484:	d81b      	bhi.n	800e4be <_strtod_l+0x8c6>
 800e486:	0d1b      	lsrs	r3, r3, #20
 800e488:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e48c:	fa02 f303 	lsl.w	r3, r2, r3
 800e490:	4299      	cmp	r1, r3
 800e492:	d119      	bne.n	800e4c8 <_strtod_l+0x8d0>
 800e494:	4b96      	ldr	r3, [pc, #600]	@ (800e6f0 <_strtod_l+0xaf8>)
 800e496:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e498:	429a      	cmp	r2, r3
 800e49a:	d102      	bne.n	800e4a2 <_strtod_l+0x8aa>
 800e49c:	3101      	adds	r1, #1
 800e49e:	f43f adca 	beq.w	800e036 <_strtod_l+0x43e>
 800e4a2:	4b92      	ldr	r3, [pc, #584]	@ (800e6ec <_strtod_l+0xaf4>)
 800e4a4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e4a6:	401a      	ands	r2, r3
 800e4a8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800e4ac:	f04f 0a00 	mov.w	sl, #0
 800e4b0:	9b08      	ldr	r3, [sp, #32]
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d1b8      	bne.n	800e428 <_strtod_l+0x830>
 800e4b6:	e5c9      	b.n	800e04c <_strtod_l+0x454>
 800e4b8:	f04f 33ff 	mov.w	r3, #4294967295
 800e4bc:	e7e8      	b.n	800e490 <_strtod_l+0x898>
 800e4be:	4613      	mov	r3, r2
 800e4c0:	e7e6      	b.n	800e490 <_strtod_l+0x898>
 800e4c2:	ea53 030a 	orrs.w	r3, r3, sl
 800e4c6:	d0a1      	beq.n	800e40c <_strtod_l+0x814>
 800e4c8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e4ca:	b1db      	cbz	r3, 800e504 <_strtod_l+0x90c>
 800e4cc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e4ce:	4213      	tst	r3, r2
 800e4d0:	d0ee      	beq.n	800e4b0 <_strtod_l+0x8b8>
 800e4d2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e4d4:	9a08      	ldr	r2, [sp, #32]
 800e4d6:	4650      	mov	r0, sl
 800e4d8:	4659      	mov	r1, fp
 800e4da:	b1bb      	cbz	r3, 800e50c <_strtod_l+0x914>
 800e4dc:	f7ff fb6b 	bl	800dbb6 <sulp>
 800e4e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e4e4:	ec53 2b10 	vmov	r2, r3, d0
 800e4e8:	f7f1 fef8 	bl	80002dc <__adddf3>
 800e4ec:	4682      	mov	sl, r0
 800e4ee:	468b      	mov	fp, r1
 800e4f0:	e7de      	b.n	800e4b0 <_strtod_l+0x8b8>
 800e4f2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800e4f6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e4fa:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e4fe:	f04f 3aff 	mov.w	sl, #4294967295
 800e502:	e7d5      	b.n	800e4b0 <_strtod_l+0x8b8>
 800e504:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e506:	ea13 0f0a 	tst.w	r3, sl
 800e50a:	e7e1      	b.n	800e4d0 <_strtod_l+0x8d8>
 800e50c:	f7ff fb53 	bl	800dbb6 <sulp>
 800e510:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e514:	ec53 2b10 	vmov	r2, r3, d0
 800e518:	f7f1 fede 	bl	80002d8 <__aeabi_dsub>
 800e51c:	2200      	movs	r2, #0
 800e51e:	2300      	movs	r3, #0
 800e520:	4682      	mov	sl, r0
 800e522:	468b      	mov	fp, r1
 800e524:	f7f2 faf8 	bl	8000b18 <__aeabi_dcmpeq>
 800e528:	2800      	cmp	r0, #0
 800e52a:	d0c1      	beq.n	800e4b0 <_strtod_l+0x8b8>
 800e52c:	e619      	b.n	800e162 <_strtod_l+0x56a>
 800e52e:	4641      	mov	r1, r8
 800e530:	4620      	mov	r0, r4
 800e532:	f003 f88d 	bl	8011650 <__ratio>
 800e536:	ec57 6b10 	vmov	r6, r7, d0
 800e53a:	2200      	movs	r2, #0
 800e53c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e540:	4630      	mov	r0, r6
 800e542:	4639      	mov	r1, r7
 800e544:	f7f2 fafc 	bl	8000b40 <__aeabi_dcmple>
 800e548:	2800      	cmp	r0, #0
 800e54a:	d06f      	beq.n	800e62c <_strtod_l+0xa34>
 800e54c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d17a      	bne.n	800e648 <_strtod_l+0xa50>
 800e552:	f1ba 0f00 	cmp.w	sl, #0
 800e556:	d158      	bne.n	800e60a <_strtod_l+0xa12>
 800e558:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e55a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d15a      	bne.n	800e618 <_strtod_l+0xa20>
 800e562:	4b64      	ldr	r3, [pc, #400]	@ (800e6f4 <_strtod_l+0xafc>)
 800e564:	2200      	movs	r2, #0
 800e566:	4630      	mov	r0, r6
 800e568:	4639      	mov	r1, r7
 800e56a:	f7f2 fadf 	bl	8000b2c <__aeabi_dcmplt>
 800e56e:	2800      	cmp	r0, #0
 800e570:	d159      	bne.n	800e626 <_strtod_l+0xa2e>
 800e572:	4630      	mov	r0, r6
 800e574:	4639      	mov	r1, r7
 800e576:	4b60      	ldr	r3, [pc, #384]	@ (800e6f8 <_strtod_l+0xb00>)
 800e578:	2200      	movs	r2, #0
 800e57a:	f7f2 f865 	bl	8000648 <__aeabi_dmul>
 800e57e:	4606      	mov	r6, r0
 800e580:	460f      	mov	r7, r1
 800e582:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800e586:	9606      	str	r6, [sp, #24]
 800e588:	9307      	str	r3, [sp, #28]
 800e58a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e58e:	4d57      	ldr	r5, [pc, #348]	@ (800e6ec <_strtod_l+0xaf4>)
 800e590:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e594:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e596:	401d      	ands	r5, r3
 800e598:	4b58      	ldr	r3, [pc, #352]	@ (800e6fc <_strtod_l+0xb04>)
 800e59a:	429d      	cmp	r5, r3
 800e59c:	f040 80b2 	bne.w	800e704 <_strtod_l+0xb0c>
 800e5a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e5a2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800e5a6:	ec4b ab10 	vmov	d0, sl, fp
 800e5aa:	f002 ff89 	bl	80114c0 <__ulp>
 800e5ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e5b2:	ec51 0b10 	vmov	r0, r1, d0
 800e5b6:	f7f2 f847 	bl	8000648 <__aeabi_dmul>
 800e5ba:	4652      	mov	r2, sl
 800e5bc:	465b      	mov	r3, fp
 800e5be:	f7f1 fe8d 	bl	80002dc <__adddf3>
 800e5c2:	460b      	mov	r3, r1
 800e5c4:	4949      	ldr	r1, [pc, #292]	@ (800e6ec <_strtod_l+0xaf4>)
 800e5c6:	4a4e      	ldr	r2, [pc, #312]	@ (800e700 <_strtod_l+0xb08>)
 800e5c8:	4019      	ands	r1, r3
 800e5ca:	4291      	cmp	r1, r2
 800e5cc:	4682      	mov	sl, r0
 800e5ce:	d942      	bls.n	800e656 <_strtod_l+0xa5e>
 800e5d0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e5d2:	4b47      	ldr	r3, [pc, #284]	@ (800e6f0 <_strtod_l+0xaf8>)
 800e5d4:	429a      	cmp	r2, r3
 800e5d6:	d103      	bne.n	800e5e0 <_strtod_l+0x9e8>
 800e5d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e5da:	3301      	adds	r3, #1
 800e5dc:	f43f ad2b 	beq.w	800e036 <_strtod_l+0x43e>
 800e5e0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800e6f0 <_strtod_l+0xaf8>
 800e5e4:	f04f 3aff 	mov.w	sl, #4294967295
 800e5e8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e5ea:	9805      	ldr	r0, [sp, #20]
 800e5ec:	f002 fc34 	bl	8010e58 <_Bfree>
 800e5f0:	9805      	ldr	r0, [sp, #20]
 800e5f2:	4649      	mov	r1, r9
 800e5f4:	f002 fc30 	bl	8010e58 <_Bfree>
 800e5f8:	9805      	ldr	r0, [sp, #20]
 800e5fa:	4641      	mov	r1, r8
 800e5fc:	f002 fc2c 	bl	8010e58 <_Bfree>
 800e600:	9805      	ldr	r0, [sp, #20]
 800e602:	4621      	mov	r1, r4
 800e604:	f002 fc28 	bl	8010e58 <_Bfree>
 800e608:	e618      	b.n	800e23c <_strtod_l+0x644>
 800e60a:	f1ba 0f01 	cmp.w	sl, #1
 800e60e:	d103      	bne.n	800e618 <_strtod_l+0xa20>
 800e610:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e612:	2b00      	cmp	r3, #0
 800e614:	f43f ada5 	beq.w	800e162 <_strtod_l+0x56a>
 800e618:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800e6c8 <_strtod_l+0xad0>
 800e61c:	4f35      	ldr	r7, [pc, #212]	@ (800e6f4 <_strtod_l+0xafc>)
 800e61e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e622:	2600      	movs	r6, #0
 800e624:	e7b1      	b.n	800e58a <_strtod_l+0x992>
 800e626:	4f34      	ldr	r7, [pc, #208]	@ (800e6f8 <_strtod_l+0xb00>)
 800e628:	2600      	movs	r6, #0
 800e62a:	e7aa      	b.n	800e582 <_strtod_l+0x98a>
 800e62c:	4b32      	ldr	r3, [pc, #200]	@ (800e6f8 <_strtod_l+0xb00>)
 800e62e:	4630      	mov	r0, r6
 800e630:	4639      	mov	r1, r7
 800e632:	2200      	movs	r2, #0
 800e634:	f7f2 f808 	bl	8000648 <__aeabi_dmul>
 800e638:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e63a:	4606      	mov	r6, r0
 800e63c:	460f      	mov	r7, r1
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d09f      	beq.n	800e582 <_strtod_l+0x98a>
 800e642:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800e646:	e7a0      	b.n	800e58a <_strtod_l+0x992>
 800e648:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800e6d0 <_strtod_l+0xad8>
 800e64c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e650:	ec57 6b17 	vmov	r6, r7, d7
 800e654:	e799      	b.n	800e58a <_strtod_l+0x992>
 800e656:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800e65a:	9b08      	ldr	r3, [sp, #32]
 800e65c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800e660:	2b00      	cmp	r3, #0
 800e662:	d1c1      	bne.n	800e5e8 <_strtod_l+0x9f0>
 800e664:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e668:	0d1b      	lsrs	r3, r3, #20
 800e66a:	051b      	lsls	r3, r3, #20
 800e66c:	429d      	cmp	r5, r3
 800e66e:	d1bb      	bne.n	800e5e8 <_strtod_l+0x9f0>
 800e670:	4630      	mov	r0, r6
 800e672:	4639      	mov	r1, r7
 800e674:	f7f2 fb48 	bl	8000d08 <__aeabi_d2lz>
 800e678:	f7f1 ffb8 	bl	80005ec <__aeabi_l2d>
 800e67c:	4602      	mov	r2, r0
 800e67e:	460b      	mov	r3, r1
 800e680:	4630      	mov	r0, r6
 800e682:	4639      	mov	r1, r7
 800e684:	f7f1 fe28 	bl	80002d8 <__aeabi_dsub>
 800e688:	460b      	mov	r3, r1
 800e68a:	4602      	mov	r2, r0
 800e68c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800e690:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800e694:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e696:	ea46 060a 	orr.w	r6, r6, sl
 800e69a:	431e      	orrs	r6, r3
 800e69c:	d06f      	beq.n	800e77e <_strtod_l+0xb86>
 800e69e:	a30e      	add	r3, pc, #56	@ (adr r3, 800e6d8 <_strtod_l+0xae0>)
 800e6a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6a4:	f7f2 fa42 	bl	8000b2c <__aeabi_dcmplt>
 800e6a8:	2800      	cmp	r0, #0
 800e6aa:	f47f accf 	bne.w	800e04c <_strtod_l+0x454>
 800e6ae:	a30c      	add	r3, pc, #48	@ (adr r3, 800e6e0 <_strtod_l+0xae8>)
 800e6b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e6b8:	f7f2 fa56 	bl	8000b68 <__aeabi_dcmpgt>
 800e6bc:	2800      	cmp	r0, #0
 800e6be:	d093      	beq.n	800e5e8 <_strtod_l+0x9f0>
 800e6c0:	e4c4      	b.n	800e04c <_strtod_l+0x454>
 800e6c2:	bf00      	nop
 800e6c4:	f3af 8000 	nop.w
 800e6c8:	00000000 	.word	0x00000000
 800e6cc:	bff00000 	.word	0xbff00000
 800e6d0:	00000000 	.word	0x00000000
 800e6d4:	3ff00000 	.word	0x3ff00000
 800e6d8:	94a03595 	.word	0x94a03595
 800e6dc:	3fdfffff 	.word	0x3fdfffff
 800e6e0:	35afe535 	.word	0x35afe535
 800e6e4:	3fe00000 	.word	0x3fe00000
 800e6e8:	000fffff 	.word	0x000fffff
 800e6ec:	7ff00000 	.word	0x7ff00000
 800e6f0:	7fefffff 	.word	0x7fefffff
 800e6f4:	3ff00000 	.word	0x3ff00000
 800e6f8:	3fe00000 	.word	0x3fe00000
 800e6fc:	7fe00000 	.word	0x7fe00000
 800e700:	7c9fffff 	.word	0x7c9fffff
 800e704:	9b08      	ldr	r3, [sp, #32]
 800e706:	b323      	cbz	r3, 800e752 <_strtod_l+0xb5a>
 800e708:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800e70c:	d821      	bhi.n	800e752 <_strtod_l+0xb5a>
 800e70e:	a328      	add	r3, pc, #160	@ (adr r3, 800e7b0 <_strtod_l+0xbb8>)
 800e710:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e714:	4630      	mov	r0, r6
 800e716:	4639      	mov	r1, r7
 800e718:	f7f2 fa12 	bl	8000b40 <__aeabi_dcmple>
 800e71c:	b1a0      	cbz	r0, 800e748 <_strtod_l+0xb50>
 800e71e:	4639      	mov	r1, r7
 800e720:	4630      	mov	r0, r6
 800e722:	f7f2 fa69 	bl	8000bf8 <__aeabi_d2uiz>
 800e726:	2801      	cmp	r0, #1
 800e728:	bf38      	it	cc
 800e72a:	2001      	movcc	r0, #1
 800e72c:	f7f1 ff12 	bl	8000554 <__aeabi_ui2d>
 800e730:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e732:	4606      	mov	r6, r0
 800e734:	460f      	mov	r7, r1
 800e736:	b9fb      	cbnz	r3, 800e778 <_strtod_l+0xb80>
 800e738:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e73c:	9014      	str	r0, [sp, #80]	@ 0x50
 800e73e:	9315      	str	r3, [sp, #84]	@ 0x54
 800e740:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800e744:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e748:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e74a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800e74e:	1b5b      	subs	r3, r3, r5
 800e750:	9311      	str	r3, [sp, #68]	@ 0x44
 800e752:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e756:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800e75a:	f002 feb1 	bl	80114c0 <__ulp>
 800e75e:	4650      	mov	r0, sl
 800e760:	ec53 2b10 	vmov	r2, r3, d0
 800e764:	4659      	mov	r1, fp
 800e766:	f7f1 ff6f 	bl	8000648 <__aeabi_dmul>
 800e76a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800e76e:	f7f1 fdb5 	bl	80002dc <__adddf3>
 800e772:	4682      	mov	sl, r0
 800e774:	468b      	mov	fp, r1
 800e776:	e770      	b.n	800e65a <_strtod_l+0xa62>
 800e778:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800e77c:	e7e0      	b.n	800e740 <_strtod_l+0xb48>
 800e77e:	a30e      	add	r3, pc, #56	@ (adr r3, 800e7b8 <_strtod_l+0xbc0>)
 800e780:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e784:	f7f2 f9d2 	bl	8000b2c <__aeabi_dcmplt>
 800e788:	e798      	b.n	800e6bc <_strtod_l+0xac4>
 800e78a:	2300      	movs	r3, #0
 800e78c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e78e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800e790:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e792:	6013      	str	r3, [r2, #0]
 800e794:	f7ff ba6d 	b.w	800dc72 <_strtod_l+0x7a>
 800e798:	2a65      	cmp	r2, #101	@ 0x65
 800e79a:	f43f ab66 	beq.w	800de6a <_strtod_l+0x272>
 800e79e:	2a45      	cmp	r2, #69	@ 0x45
 800e7a0:	f43f ab63 	beq.w	800de6a <_strtod_l+0x272>
 800e7a4:	2301      	movs	r3, #1
 800e7a6:	f7ff bb9e 	b.w	800dee6 <_strtod_l+0x2ee>
 800e7aa:	bf00      	nop
 800e7ac:	f3af 8000 	nop.w
 800e7b0:	ffc00000 	.word	0xffc00000
 800e7b4:	41dfffff 	.word	0x41dfffff
 800e7b8:	94a03595 	.word	0x94a03595
 800e7bc:	3fcfffff 	.word	0x3fcfffff

0800e7c0 <_strtod_r>:
 800e7c0:	4b01      	ldr	r3, [pc, #4]	@ (800e7c8 <_strtod_r+0x8>)
 800e7c2:	f7ff ba19 	b.w	800dbf8 <_strtod_l>
 800e7c6:	bf00      	nop
 800e7c8:	2000009c 	.word	0x2000009c

0800e7cc <strtod>:
 800e7cc:	460a      	mov	r2, r1
 800e7ce:	4601      	mov	r1, r0
 800e7d0:	4802      	ldr	r0, [pc, #8]	@ (800e7dc <strtod+0x10>)
 800e7d2:	4b03      	ldr	r3, [pc, #12]	@ (800e7e0 <strtod+0x14>)
 800e7d4:	6800      	ldr	r0, [r0, #0]
 800e7d6:	f7ff ba0f 	b.w	800dbf8 <_strtod_l>
 800e7da:	bf00      	nop
 800e7dc:	20000208 	.word	0x20000208
 800e7e0:	2000009c 	.word	0x2000009c

0800e7e4 <__cvt>:
 800e7e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e7e8:	ec57 6b10 	vmov	r6, r7, d0
 800e7ec:	2f00      	cmp	r7, #0
 800e7ee:	460c      	mov	r4, r1
 800e7f0:	4619      	mov	r1, r3
 800e7f2:	463b      	mov	r3, r7
 800e7f4:	bfbb      	ittet	lt
 800e7f6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800e7fa:	461f      	movlt	r7, r3
 800e7fc:	2300      	movge	r3, #0
 800e7fe:	232d      	movlt	r3, #45	@ 0x2d
 800e800:	700b      	strb	r3, [r1, #0]
 800e802:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e804:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800e808:	4691      	mov	r9, r2
 800e80a:	f023 0820 	bic.w	r8, r3, #32
 800e80e:	bfbc      	itt	lt
 800e810:	4632      	movlt	r2, r6
 800e812:	4616      	movlt	r6, r2
 800e814:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e818:	d005      	beq.n	800e826 <__cvt+0x42>
 800e81a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800e81e:	d100      	bne.n	800e822 <__cvt+0x3e>
 800e820:	3401      	adds	r4, #1
 800e822:	2102      	movs	r1, #2
 800e824:	e000      	b.n	800e828 <__cvt+0x44>
 800e826:	2103      	movs	r1, #3
 800e828:	ab03      	add	r3, sp, #12
 800e82a:	9301      	str	r3, [sp, #4]
 800e82c:	ab02      	add	r3, sp, #8
 800e82e:	9300      	str	r3, [sp, #0]
 800e830:	ec47 6b10 	vmov	d0, r6, r7
 800e834:	4653      	mov	r3, sl
 800e836:	4622      	mov	r2, r4
 800e838:	f001 f8be 	bl	800f9b8 <_dtoa_r>
 800e83c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800e840:	4605      	mov	r5, r0
 800e842:	d119      	bne.n	800e878 <__cvt+0x94>
 800e844:	f019 0f01 	tst.w	r9, #1
 800e848:	d00e      	beq.n	800e868 <__cvt+0x84>
 800e84a:	eb00 0904 	add.w	r9, r0, r4
 800e84e:	2200      	movs	r2, #0
 800e850:	2300      	movs	r3, #0
 800e852:	4630      	mov	r0, r6
 800e854:	4639      	mov	r1, r7
 800e856:	f7f2 f95f 	bl	8000b18 <__aeabi_dcmpeq>
 800e85a:	b108      	cbz	r0, 800e860 <__cvt+0x7c>
 800e85c:	f8cd 900c 	str.w	r9, [sp, #12]
 800e860:	2230      	movs	r2, #48	@ 0x30
 800e862:	9b03      	ldr	r3, [sp, #12]
 800e864:	454b      	cmp	r3, r9
 800e866:	d31e      	bcc.n	800e8a6 <__cvt+0xc2>
 800e868:	9b03      	ldr	r3, [sp, #12]
 800e86a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e86c:	1b5b      	subs	r3, r3, r5
 800e86e:	4628      	mov	r0, r5
 800e870:	6013      	str	r3, [r2, #0]
 800e872:	b004      	add	sp, #16
 800e874:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e878:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e87c:	eb00 0904 	add.w	r9, r0, r4
 800e880:	d1e5      	bne.n	800e84e <__cvt+0x6a>
 800e882:	7803      	ldrb	r3, [r0, #0]
 800e884:	2b30      	cmp	r3, #48	@ 0x30
 800e886:	d10a      	bne.n	800e89e <__cvt+0xba>
 800e888:	2200      	movs	r2, #0
 800e88a:	2300      	movs	r3, #0
 800e88c:	4630      	mov	r0, r6
 800e88e:	4639      	mov	r1, r7
 800e890:	f7f2 f942 	bl	8000b18 <__aeabi_dcmpeq>
 800e894:	b918      	cbnz	r0, 800e89e <__cvt+0xba>
 800e896:	f1c4 0401 	rsb	r4, r4, #1
 800e89a:	f8ca 4000 	str.w	r4, [sl]
 800e89e:	f8da 3000 	ldr.w	r3, [sl]
 800e8a2:	4499      	add	r9, r3
 800e8a4:	e7d3      	b.n	800e84e <__cvt+0x6a>
 800e8a6:	1c59      	adds	r1, r3, #1
 800e8a8:	9103      	str	r1, [sp, #12]
 800e8aa:	701a      	strb	r2, [r3, #0]
 800e8ac:	e7d9      	b.n	800e862 <__cvt+0x7e>

0800e8ae <__exponent>:
 800e8ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e8b0:	2900      	cmp	r1, #0
 800e8b2:	bfba      	itte	lt
 800e8b4:	4249      	neglt	r1, r1
 800e8b6:	232d      	movlt	r3, #45	@ 0x2d
 800e8b8:	232b      	movge	r3, #43	@ 0x2b
 800e8ba:	2909      	cmp	r1, #9
 800e8bc:	7002      	strb	r2, [r0, #0]
 800e8be:	7043      	strb	r3, [r0, #1]
 800e8c0:	dd29      	ble.n	800e916 <__exponent+0x68>
 800e8c2:	f10d 0307 	add.w	r3, sp, #7
 800e8c6:	461d      	mov	r5, r3
 800e8c8:	270a      	movs	r7, #10
 800e8ca:	461a      	mov	r2, r3
 800e8cc:	fbb1 f6f7 	udiv	r6, r1, r7
 800e8d0:	fb07 1416 	mls	r4, r7, r6, r1
 800e8d4:	3430      	adds	r4, #48	@ 0x30
 800e8d6:	f802 4c01 	strb.w	r4, [r2, #-1]
 800e8da:	460c      	mov	r4, r1
 800e8dc:	2c63      	cmp	r4, #99	@ 0x63
 800e8de:	f103 33ff 	add.w	r3, r3, #4294967295
 800e8e2:	4631      	mov	r1, r6
 800e8e4:	dcf1      	bgt.n	800e8ca <__exponent+0x1c>
 800e8e6:	3130      	adds	r1, #48	@ 0x30
 800e8e8:	1e94      	subs	r4, r2, #2
 800e8ea:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e8ee:	1c41      	adds	r1, r0, #1
 800e8f0:	4623      	mov	r3, r4
 800e8f2:	42ab      	cmp	r3, r5
 800e8f4:	d30a      	bcc.n	800e90c <__exponent+0x5e>
 800e8f6:	f10d 0309 	add.w	r3, sp, #9
 800e8fa:	1a9b      	subs	r3, r3, r2
 800e8fc:	42ac      	cmp	r4, r5
 800e8fe:	bf88      	it	hi
 800e900:	2300      	movhi	r3, #0
 800e902:	3302      	adds	r3, #2
 800e904:	4403      	add	r3, r0
 800e906:	1a18      	subs	r0, r3, r0
 800e908:	b003      	add	sp, #12
 800e90a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e90c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800e910:	f801 6f01 	strb.w	r6, [r1, #1]!
 800e914:	e7ed      	b.n	800e8f2 <__exponent+0x44>
 800e916:	2330      	movs	r3, #48	@ 0x30
 800e918:	3130      	adds	r1, #48	@ 0x30
 800e91a:	7083      	strb	r3, [r0, #2]
 800e91c:	70c1      	strb	r1, [r0, #3]
 800e91e:	1d03      	adds	r3, r0, #4
 800e920:	e7f1      	b.n	800e906 <__exponent+0x58>
	...

0800e924 <_printf_float>:
 800e924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e928:	b08d      	sub	sp, #52	@ 0x34
 800e92a:	460c      	mov	r4, r1
 800e92c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800e930:	4616      	mov	r6, r2
 800e932:	461f      	mov	r7, r3
 800e934:	4605      	mov	r5, r0
 800e936:	f000 ff21 	bl	800f77c <_localeconv_r>
 800e93a:	6803      	ldr	r3, [r0, #0]
 800e93c:	9304      	str	r3, [sp, #16]
 800e93e:	4618      	mov	r0, r3
 800e940:	f7f1 fcbe 	bl	80002c0 <strlen>
 800e944:	2300      	movs	r3, #0
 800e946:	930a      	str	r3, [sp, #40]	@ 0x28
 800e948:	f8d8 3000 	ldr.w	r3, [r8]
 800e94c:	9005      	str	r0, [sp, #20]
 800e94e:	3307      	adds	r3, #7
 800e950:	f023 0307 	bic.w	r3, r3, #7
 800e954:	f103 0208 	add.w	r2, r3, #8
 800e958:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e95c:	f8d4 b000 	ldr.w	fp, [r4]
 800e960:	f8c8 2000 	str.w	r2, [r8]
 800e964:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e968:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800e96c:	9307      	str	r3, [sp, #28]
 800e96e:	f8cd 8018 	str.w	r8, [sp, #24]
 800e972:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800e976:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e97a:	4b9c      	ldr	r3, [pc, #624]	@ (800ebec <_printf_float+0x2c8>)
 800e97c:	f04f 32ff 	mov.w	r2, #4294967295
 800e980:	f7f2 f8fc 	bl	8000b7c <__aeabi_dcmpun>
 800e984:	bb70      	cbnz	r0, 800e9e4 <_printf_float+0xc0>
 800e986:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e98a:	4b98      	ldr	r3, [pc, #608]	@ (800ebec <_printf_float+0x2c8>)
 800e98c:	f04f 32ff 	mov.w	r2, #4294967295
 800e990:	f7f2 f8d6 	bl	8000b40 <__aeabi_dcmple>
 800e994:	bb30      	cbnz	r0, 800e9e4 <_printf_float+0xc0>
 800e996:	2200      	movs	r2, #0
 800e998:	2300      	movs	r3, #0
 800e99a:	4640      	mov	r0, r8
 800e99c:	4649      	mov	r1, r9
 800e99e:	f7f2 f8c5 	bl	8000b2c <__aeabi_dcmplt>
 800e9a2:	b110      	cbz	r0, 800e9aa <_printf_float+0x86>
 800e9a4:	232d      	movs	r3, #45	@ 0x2d
 800e9a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e9aa:	4a91      	ldr	r2, [pc, #580]	@ (800ebf0 <_printf_float+0x2cc>)
 800e9ac:	4b91      	ldr	r3, [pc, #580]	@ (800ebf4 <_printf_float+0x2d0>)
 800e9ae:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e9b2:	bf94      	ite	ls
 800e9b4:	4690      	movls	r8, r2
 800e9b6:	4698      	movhi	r8, r3
 800e9b8:	2303      	movs	r3, #3
 800e9ba:	6123      	str	r3, [r4, #16]
 800e9bc:	f02b 0304 	bic.w	r3, fp, #4
 800e9c0:	6023      	str	r3, [r4, #0]
 800e9c2:	f04f 0900 	mov.w	r9, #0
 800e9c6:	9700      	str	r7, [sp, #0]
 800e9c8:	4633      	mov	r3, r6
 800e9ca:	aa0b      	add	r2, sp, #44	@ 0x2c
 800e9cc:	4621      	mov	r1, r4
 800e9ce:	4628      	mov	r0, r5
 800e9d0:	f000 f9d2 	bl	800ed78 <_printf_common>
 800e9d4:	3001      	adds	r0, #1
 800e9d6:	f040 808d 	bne.w	800eaf4 <_printf_float+0x1d0>
 800e9da:	f04f 30ff 	mov.w	r0, #4294967295
 800e9de:	b00d      	add	sp, #52	@ 0x34
 800e9e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9e4:	4642      	mov	r2, r8
 800e9e6:	464b      	mov	r3, r9
 800e9e8:	4640      	mov	r0, r8
 800e9ea:	4649      	mov	r1, r9
 800e9ec:	f7f2 f8c6 	bl	8000b7c <__aeabi_dcmpun>
 800e9f0:	b140      	cbz	r0, 800ea04 <_printf_float+0xe0>
 800e9f2:	464b      	mov	r3, r9
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	bfbc      	itt	lt
 800e9f8:	232d      	movlt	r3, #45	@ 0x2d
 800e9fa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800e9fe:	4a7e      	ldr	r2, [pc, #504]	@ (800ebf8 <_printf_float+0x2d4>)
 800ea00:	4b7e      	ldr	r3, [pc, #504]	@ (800ebfc <_printf_float+0x2d8>)
 800ea02:	e7d4      	b.n	800e9ae <_printf_float+0x8a>
 800ea04:	6863      	ldr	r3, [r4, #4]
 800ea06:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800ea0a:	9206      	str	r2, [sp, #24]
 800ea0c:	1c5a      	adds	r2, r3, #1
 800ea0e:	d13b      	bne.n	800ea88 <_printf_float+0x164>
 800ea10:	2306      	movs	r3, #6
 800ea12:	6063      	str	r3, [r4, #4]
 800ea14:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800ea18:	2300      	movs	r3, #0
 800ea1a:	6022      	str	r2, [r4, #0]
 800ea1c:	9303      	str	r3, [sp, #12]
 800ea1e:	ab0a      	add	r3, sp, #40	@ 0x28
 800ea20:	e9cd a301 	strd	sl, r3, [sp, #4]
 800ea24:	ab09      	add	r3, sp, #36	@ 0x24
 800ea26:	9300      	str	r3, [sp, #0]
 800ea28:	6861      	ldr	r1, [r4, #4]
 800ea2a:	ec49 8b10 	vmov	d0, r8, r9
 800ea2e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800ea32:	4628      	mov	r0, r5
 800ea34:	f7ff fed6 	bl	800e7e4 <__cvt>
 800ea38:	9b06      	ldr	r3, [sp, #24]
 800ea3a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ea3c:	2b47      	cmp	r3, #71	@ 0x47
 800ea3e:	4680      	mov	r8, r0
 800ea40:	d129      	bne.n	800ea96 <_printf_float+0x172>
 800ea42:	1cc8      	adds	r0, r1, #3
 800ea44:	db02      	blt.n	800ea4c <_printf_float+0x128>
 800ea46:	6863      	ldr	r3, [r4, #4]
 800ea48:	4299      	cmp	r1, r3
 800ea4a:	dd41      	ble.n	800ead0 <_printf_float+0x1ac>
 800ea4c:	f1aa 0a02 	sub.w	sl, sl, #2
 800ea50:	fa5f fa8a 	uxtb.w	sl, sl
 800ea54:	3901      	subs	r1, #1
 800ea56:	4652      	mov	r2, sl
 800ea58:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ea5c:	9109      	str	r1, [sp, #36]	@ 0x24
 800ea5e:	f7ff ff26 	bl	800e8ae <__exponent>
 800ea62:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ea64:	1813      	adds	r3, r2, r0
 800ea66:	2a01      	cmp	r2, #1
 800ea68:	4681      	mov	r9, r0
 800ea6a:	6123      	str	r3, [r4, #16]
 800ea6c:	dc02      	bgt.n	800ea74 <_printf_float+0x150>
 800ea6e:	6822      	ldr	r2, [r4, #0]
 800ea70:	07d2      	lsls	r2, r2, #31
 800ea72:	d501      	bpl.n	800ea78 <_printf_float+0x154>
 800ea74:	3301      	adds	r3, #1
 800ea76:	6123      	str	r3, [r4, #16]
 800ea78:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d0a2      	beq.n	800e9c6 <_printf_float+0xa2>
 800ea80:	232d      	movs	r3, #45	@ 0x2d
 800ea82:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ea86:	e79e      	b.n	800e9c6 <_printf_float+0xa2>
 800ea88:	9a06      	ldr	r2, [sp, #24]
 800ea8a:	2a47      	cmp	r2, #71	@ 0x47
 800ea8c:	d1c2      	bne.n	800ea14 <_printf_float+0xf0>
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d1c0      	bne.n	800ea14 <_printf_float+0xf0>
 800ea92:	2301      	movs	r3, #1
 800ea94:	e7bd      	b.n	800ea12 <_printf_float+0xee>
 800ea96:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ea9a:	d9db      	bls.n	800ea54 <_printf_float+0x130>
 800ea9c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800eaa0:	d118      	bne.n	800ead4 <_printf_float+0x1b0>
 800eaa2:	2900      	cmp	r1, #0
 800eaa4:	6863      	ldr	r3, [r4, #4]
 800eaa6:	dd0b      	ble.n	800eac0 <_printf_float+0x19c>
 800eaa8:	6121      	str	r1, [r4, #16]
 800eaaa:	b913      	cbnz	r3, 800eab2 <_printf_float+0x18e>
 800eaac:	6822      	ldr	r2, [r4, #0]
 800eaae:	07d0      	lsls	r0, r2, #31
 800eab0:	d502      	bpl.n	800eab8 <_printf_float+0x194>
 800eab2:	3301      	adds	r3, #1
 800eab4:	440b      	add	r3, r1
 800eab6:	6123      	str	r3, [r4, #16]
 800eab8:	65a1      	str	r1, [r4, #88]	@ 0x58
 800eaba:	f04f 0900 	mov.w	r9, #0
 800eabe:	e7db      	b.n	800ea78 <_printf_float+0x154>
 800eac0:	b913      	cbnz	r3, 800eac8 <_printf_float+0x1a4>
 800eac2:	6822      	ldr	r2, [r4, #0]
 800eac4:	07d2      	lsls	r2, r2, #31
 800eac6:	d501      	bpl.n	800eacc <_printf_float+0x1a8>
 800eac8:	3302      	adds	r3, #2
 800eaca:	e7f4      	b.n	800eab6 <_printf_float+0x192>
 800eacc:	2301      	movs	r3, #1
 800eace:	e7f2      	b.n	800eab6 <_printf_float+0x192>
 800ead0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800ead4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ead6:	4299      	cmp	r1, r3
 800ead8:	db05      	blt.n	800eae6 <_printf_float+0x1c2>
 800eada:	6823      	ldr	r3, [r4, #0]
 800eadc:	6121      	str	r1, [r4, #16]
 800eade:	07d8      	lsls	r0, r3, #31
 800eae0:	d5ea      	bpl.n	800eab8 <_printf_float+0x194>
 800eae2:	1c4b      	adds	r3, r1, #1
 800eae4:	e7e7      	b.n	800eab6 <_printf_float+0x192>
 800eae6:	2900      	cmp	r1, #0
 800eae8:	bfd4      	ite	le
 800eaea:	f1c1 0202 	rsble	r2, r1, #2
 800eaee:	2201      	movgt	r2, #1
 800eaf0:	4413      	add	r3, r2
 800eaf2:	e7e0      	b.n	800eab6 <_printf_float+0x192>
 800eaf4:	6823      	ldr	r3, [r4, #0]
 800eaf6:	055a      	lsls	r2, r3, #21
 800eaf8:	d407      	bmi.n	800eb0a <_printf_float+0x1e6>
 800eafa:	6923      	ldr	r3, [r4, #16]
 800eafc:	4642      	mov	r2, r8
 800eafe:	4631      	mov	r1, r6
 800eb00:	4628      	mov	r0, r5
 800eb02:	47b8      	blx	r7
 800eb04:	3001      	adds	r0, #1
 800eb06:	d12b      	bne.n	800eb60 <_printf_float+0x23c>
 800eb08:	e767      	b.n	800e9da <_printf_float+0xb6>
 800eb0a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800eb0e:	f240 80dd 	bls.w	800eccc <_printf_float+0x3a8>
 800eb12:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800eb16:	2200      	movs	r2, #0
 800eb18:	2300      	movs	r3, #0
 800eb1a:	f7f1 fffd 	bl	8000b18 <__aeabi_dcmpeq>
 800eb1e:	2800      	cmp	r0, #0
 800eb20:	d033      	beq.n	800eb8a <_printf_float+0x266>
 800eb22:	4a37      	ldr	r2, [pc, #220]	@ (800ec00 <_printf_float+0x2dc>)
 800eb24:	2301      	movs	r3, #1
 800eb26:	4631      	mov	r1, r6
 800eb28:	4628      	mov	r0, r5
 800eb2a:	47b8      	blx	r7
 800eb2c:	3001      	adds	r0, #1
 800eb2e:	f43f af54 	beq.w	800e9da <_printf_float+0xb6>
 800eb32:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800eb36:	4543      	cmp	r3, r8
 800eb38:	db02      	blt.n	800eb40 <_printf_float+0x21c>
 800eb3a:	6823      	ldr	r3, [r4, #0]
 800eb3c:	07d8      	lsls	r0, r3, #31
 800eb3e:	d50f      	bpl.n	800eb60 <_printf_float+0x23c>
 800eb40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800eb44:	4631      	mov	r1, r6
 800eb46:	4628      	mov	r0, r5
 800eb48:	47b8      	blx	r7
 800eb4a:	3001      	adds	r0, #1
 800eb4c:	f43f af45 	beq.w	800e9da <_printf_float+0xb6>
 800eb50:	f04f 0900 	mov.w	r9, #0
 800eb54:	f108 38ff 	add.w	r8, r8, #4294967295
 800eb58:	f104 0a1a 	add.w	sl, r4, #26
 800eb5c:	45c8      	cmp	r8, r9
 800eb5e:	dc09      	bgt.n	800eb74 <_printf_float+0x250>
 800eb60:	6823      	ldr	r3, [r4, #0]
 800eb62:	079b      	lsls	r3, r3, #30
 800eb64:	f100 8103 	bmi.w	800ed6e <_printf_float+0x44a>
 800eb68:	68e0      	ldr	r0, [r4, #12]
 800eb6a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800eb6c:	4298      	cmp	r0, r3
 800eb6e:	bfb8      	it	lt
 800eb70:	4618      	movlt	r0, r3
 800eb72:	e734      	b.n	800e9de <_printf_float+0xba>
 800eb74:	2301      	movs	r3, #1
 800eb76:	4652      	mov	r2, sl
 800eb78:	4631      	mov	r1, r6
 800eb7a:	4628      	mov	r0, r5
 800eb7c:	47b8      	blx	r7
 800eb7e:	3001      	adds	r0, #1
 800eb80:	f43f af2b 	beq.w	800e9da <_printf_float+0xb6>
 800eb84:	f109 0901 	add.w	r9, r9, #1
 800eb88:	e7e8      	b.n	800eb5c <_printf_float+0x238>
 800eb8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	dc39      	bgt.n	800ec04 <_printf_float+0x2e0>
 800eb90:	4a1b      	ldr	r2, [pc, #108]	@ (800ec00 <_printf_float+0x2dc>)
 800eb92:	2301      	movs	r3, #1
 800eb94:	4631      	mov	r1, r6
 800eb96:	4628      	mov	r0, r5
 800eb98:	47b8      	blx	r7
 800eb9a:	3001      	adds	r0, #1
 800eb9c:	f43f af1d 	beq.w	800e9da <_printf_float+0xb6>
 800eba0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800eba4:	ea59 0303 	orrs.w	r3, r9, r3
 800eba8:	d102      	bne.n	800ebb0 <_printf_float+0x28c>
 800ebaa:	6823      	ldr	r3, [r4, #0]
 800ebac:	07d9      	lsls	r1, r3, #31
 800ebae:	d5d7      	bpl.n	800eb60 <_printf_float+0x23c>
 800ebb0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ebb4:	4631      	mov	r1, r6
 800ebb6:	4628      	mov	r0, r5
 800ebb8:	47b8      	blx	r7
 800ebba:	3001      	adds	r0, #1
 800ebbc:	f43f af0d 	beq.w	800e9da <_printf_float+0xb6>
 800ebc0:	f04f 0a00 	mov.w	sl, #0
 800ebc4:	f104 0b1a 	add.w	fp, r4, #26
 800ebc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ebca:	425b      	negs	r3, r3
 800ebcc:	4553      	cmp	r3, sl
 800ebce:	dc01      	bgt.n	800ebd4 <_printf_float+0x2b0>
 800ebd0:	464b      	mov	r3, r9
 800ebd2:	e793      	b.n	800eafc <_printf_float+0x1d8>
 800ebd4:	2301      	movs	r3, #1
 800ebd6:	465a      	mov	r2, fp
 800ebd8:	4631      	mov	r1, r6
 800ebda:	4628      	mov	r0, r5
 800ebdc:	47b8      	blx	r7
 800ebde:	3001      	adds	r0, #1
 800ebe0:	f43f aefb 	beq.w	800e9da <_printf_float+0xb6>
 800ebe4:	f10a 0a01 	add.w	sl, sl, #1
 800ebe8:	e7ee      	b.n	800ebc8 <_printf_float+0x2a4>
 800ebea:	bf00      	nop
 800ebec:	7fefffff 	.word	0x7fefffff
 800ebf0:	08012740 	.word	0x08012740
 800ebf4:	08012744 	.word	0x08012744
 800ebf8:	08012748 	.word	0x08012748
 800ebfc:	0801274c 	.word	0x0801274c
 800ec00:	08012750 	.word	0x08012750
 800ec04:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ec06:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ec0a:	4553      	cmp	r3, sl
 800ec0c:	bfa8      	it	ge
 800ec0e:	4653      	movge	r3, sl
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	4699      	mov	r9, r3
 800ec14:	dc36      	bgt.n	800ec84 <_printf_float+0x360>
 800ec16:	f04f 0b00 	mov.w	fp, #0
 800ec1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ec1e:	f104 021a 	add.w	r2, r4, #26
 800ec22:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ec24:	9306      	str	r3, [sp, #24]
 800ec26:	eba3 0309 	sub.w	r3, r3, r9
 800ec2a:	455b      	cmp	r3, fp
 800ec2c:	dc31      	bgt.n	800ec92 <_printf_float+0x36e>
 800ec2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec30:	459a      	cmp	sl, r3
 800ec32:	dc3a      	bgt.n	800ecaa <_printf_float+0x386>
 800ec34:	6823      	ldr	r3, [r4, #0]
 800ec36:	07da      	lsls	r2, r3, #31
 800ec38:	d437      	bmi.n	800ecaa <_printf_float+0x386>
 800ec3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec3c:	ebaa 0903 	sub.w	r9, sl, r3
 800ec40:	9b06      	ldr	r3, [sp, #24]
 800ec42:	ebaa 0303 	sub.w	r3, sl, r3
 800ec46:	4599      	cmp	r9, r3
 800ec48:	bfa8      	it	ge
 800ec4a:	4699      	movge	r9, r3
 800ec4c:	f1b9 0f00 	cmp.w	r9, #0
 800ec50:	dc33      	bgt.n	800ecba <_printf_float+0x396>
 800ec52:	f04f 0800 	mov.w	r8, #0
 800ec56:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ec5a:	f104 0b1a 	add.w	fp, r4, #26
 800ec5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec60:	ebaa 0303 	sub.w	r3, sl, r3
 800ec64:	eba3 0309 	sub.w	r3, r3, r9
 800ec68:	4543      	cmp	r3, r8
 800ec6a:	f77f af79 	ble.w	800eb60 <_printf_float+0x23c>
 800ec6e:	2301      	movs	r3, #1
 800ec70:	465a      	mov	r2, fp
 800ec72:	4631      	mov	r1, r6
 800ec74:	4628      	mov	r0, r5
 800ec76:	47b8      	blx	r7
 800ec78:	3001      	adds	r0, #1
 800ec7a:	f43f aeae 	beq.w	800e9da <_printf_float+0xb6>
 800ec7e:	f108 0801 	add.w	r8, r8, #1
 800ec82:	e7ec      	b.n	800ec5e <_printf_float+0x33a>
 800ec84:	4642      	mov	r2, r8
 800ec86:	4631      	mov	r1, r6
 800ec88:	4628      	mov	r0, r5
 800ec8a:	47b8      	blx	r7
 800ec8c:	3001      	adds	r0, #1
 800ec8e:	d1c2      	bne.n	800ec16 <_printf_float+0x2f2>
 800ec90:	e6a3      	b.n	800e9da <_printf_float+0xb6>
 800ec92:	2301      	movs	r3, #1
 800ec94:	4631      	mov	r1, r6
 800ec96:	4628      	mov	r0, r5
 800ec98:	9206      	str	r2, [sp, #24]
 800ec9a:	47b8      	blx	r7
 800ec9c:	3001      	adds	r0, #1
 800ec9e:	f43f ae9c 	beq.w	800e9da <_printf_float+0xb6>
 800eca2:	9a06      	ldr	r2, [sp, #24]
 800eca4:	f10b 0b01 	add.w	fp, fp, #1
 800eca8:	e7bb      	b.n	800ec22 <_printf_float+0x2fe>
 800ecaa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ecae:	4631      	mov	r1, r6
 800ecb0:	4628      	mov	r0, r5
 800ecb2:	47b8      	blx	r7
 800ecb4:	3001      	adds	r0, #1
 800ecb6:	d1c0      	bne.n	800ec3a <_printf_float+0x316>
 800ecb8:	e68f      	b.n	800e9da <_printf_float+0xb6>
 800ecba:	9a06      	ldr	r2, [sp, #24]
 800ecbc:	464b      	mov	r3, r9
 800ecbe:	4442      	add	r2, r8
 800ecc0:	4631      	mov	r1, r6
 800ecc2:	4628      	mov	r0, r5
 800ecc4:	47b8      	blx	r7
 800ecc6:	3001      	adds	r0, #1
 800ecc8:	d1c3      	bne.n	800ec52 <_printf_float+0x32e>
 800ecca:	e686      	b.n	800e9da <_printf_float+0xb6>
 800eccc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ecd0:	f1ba 0f01 	cmp.w	sl, #1
 800ecd4:	dc01      	bgt.n	800ecda <_printf_float+0x3b6>
 800ecd6:	07db      	lsls	r3, r3, #31
 800ecd8:	d536      	bpl.n	800ed48 <_printf_float+0x424>
 800ecda:	2301      	movs	r3, #1
 800ecdc:	4642      	mov	r2, r8
 800ecde:	4631      	mov	r1, r6
 800ece0:	4628      	mov	r0, r5
 800ece2:	47b8      	blx	r7
 800ece4:	3001      	adds	r0, #1
 800ece6:	f43f ae78 	beq.w	800e9da <_printf_float+0xb6>
 800ecea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ecee:	4631      	mov	r1, r6
 800ecf0:	4628      	mov	r0, r5
 800ecf2:	47b8      	blx	r7
 800ecf4:	3001      	adds	r0, #1
 800ecf6:	f43f ae70 	beq.w	800e9da <_printf_float+0xb6>
 800ecfa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ecfe:	2200      	movs	r2, #0
 800ed00:	2300      	movs	r3, #0
 800ed02:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ed06:	f7f1 ff07 	bl	8000b18 <__aeabi_dcmpeq>
 800ed0a:	b9c0      	cbnz	r0, 800ed3e <_printf_float+0x41a>
 800ed0c:	4653      	mov	r3, sl
 800ed0e:	f108 0201 	add.w	r2, r8, #1
 800ed12:	4631      	mov	r1, r6
 800ed14:	4628      	mov	r0, r5
 800ed16:	47b8      	blx	r7
 800ed18:	3001      	adds	r0, #1
 800ed1a:	d10c      	bne.n	800ed36 <_printf_float+0x412>
 800ed1c:	e65d      	b.n	800e9da <_printf_float+0xb6>
 800ed1e:	2301      	movs	r3, #1
 800ed20:	465a      	mov	r2, fp
 800ed22:	4631      	mov	r1, r6
 800ed24:	4628      	mov	r0, r5
 800ed26:	47b8      	blx	r7
 800ed28:	3001      	adds	r0, #1
 800ed2a:	f43f ae56 	beq.w	800e9da <_printf_float+0xb6>
 800ed2e:	f108 0801 	add.w	r8, r8, #1
 800ed32:	45d0      	cmp	r8, sl
 800ed34:	dbf3      	blt.n	800ed1e <_printf_float+0x3fa>
 800ed36:	464b      	mov	r3, r9
 800ed38:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ed3c:	e6df      	b.n	800eafe <_printf_float+0x1da>
 800ed3e:	f04f 0800 	mov.w	r8, #0
 800ed42:	f104 0b1a 	add.w	fp, r4, #26
 800ed46:	e7f4      	b.n	800ed32 <_printf_float+0x40e>
 800ed48:	2301      	movs	r3, #1
 800ed4a:	4642      	mov	r2, r8
 800ed4c:	e7e1      	b.n	800ed12 <_printf_float+0x3ee>
 800ed4e:	2301      	movs	r3, #1
 800ed50:	464a      	mov	r2, r9
 800ed52:	4631      	mov	r1, r6
 800ed54:	4628      	mov	r0, r5
 800ed56:	47b8      	blx	r7
 800ed58:	3001      	adds	r0, #1
 800ed5a:	f43f ae3e 	beq.w	800e9da <_printf_float+0xb6>
 800ed5e:	f108 0801 	add.w	r8, r8, #1
 800ed62:	68e3      	ldr	r3, [r4, #12]
 800ed64:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ed66:	1a5b      	subs	r3, r3, r1
 800ed68:	4543      	cmp	r3, r8
 800ed6a:	dcf0      	bgt.n	800ed4e <_printf_float+0x42a>
 800ed6c:	e6fc      	b.n	800eb68 <_printf_float+0x244>
 800ed6e:	f04f 0800 	mov.w	r8, #0
 800ed72:	f104 0919 	add.w	r9, r4, #25
 800ed76:	e7f4      	b.n	800ed62 <_printf_float+0x43e>

0800ed78 <_printf_common>:
 800ed78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed7c:	4616      	mov	r6, r2
 800ed7e:	4698      	mov	r8, r3
 800ed80:	688a      	ldr	r2, [r1, #8]
 800ed82:	690b      	ldr	r3, [r1, #16]
 800ed84:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ed88:	4293      	cmp	r3, r2
 800ed8a:	bfb8      	it	lt
 800ed8c:	4613      	movlt	r3, r2
 800ed8e:	6033      	str	r3, [r6, #0]
 800ed90:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ed94:	4607      	mov	r7, r0
 800ed96:	460c      	mov	r4, r1
 800ed98:	b10a      	cbz	r2, 800ed9e <_printf_common+0x26>
 800ed9a:	3301      	adds	r3, #1
 800ed9c:	6033      	str	r3, [r6, #0]
 800ed9e:	6823      	ldr	r3, [r4, #0]
 800eda0:	0699      	lsls	r1, r3, #26
 800eda2:	bf42      	ittt	mi
 800eda4:	6833      	ldrmi	r3, [r6, #0]
 800eda6:	3302      	addmi	r3, #2
 800eda8:	6033      	strmi	r3, [r6, #0]
 800edaa:	6825      	ldr	r5, [r4, #0]
 800edac:	f015 0506 	ands.w	r5, r5, #6
 800edb0:	d106      	bne.n	800edc0 <_printf_common+0x48>
 800edb2:	f104 0a19 	add.w	sl, r4, #25
 800edb6:	68e3      	ldr	r3, [r4, #12]
 800edb8:	6832      	ldr	r2, [r6, #0]
 800edba:	1a9b      	subs	r3, r3, r2
 800edbc:	42ab      	cmp	r3, r5
 800edbe:	dc26      	bgt.n	800ee0e <_printf_common+0x96>
 800edc0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800edc4:	6822      	ldr	r2, [r4, #0]
 800edc6:	3b00      	subs	r3, #0
 800edc8:	bf18      	it	ne
 800edca:	2301      	movne	r3, #1
 800edcc:	0692      	lsls	r2, r2, #26
 800edce:	d42b      	bmi.n	800ee28 <_printf_common+0xb0>
 800edd0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800edd4:	4641      	mov	r1, r8
 800edd6:	4638      	mov	r0, r7
 800edd8:	47c8      	blx	r9
 800edda:	3001      	adds	r0, #1
 800eddc:	d01e      	beq.n	800ee1c <_printf_common+0xa4>
 800edde:	6823      	ldr	r3, [r4, #0]
 800ede0:	6922      	ldr	r2, [r4, #16]
 800ede2:	f003 0306 	and.w	r3, r3, #6
 800ede6:	2b04      	cmp	r3, #4
 800ede8:	bf02      	ittt	eq
 800edea:	68e5      	ldreq	r5, [r4, #12]
 800edec:	6833      	ldreq	r3, [r6, #0]
 800edee:	1aed      	subeq	r5, r5, r3
 800edf0:	68a3      	ldr	r3, [r4, #8]
 800edf2:	bf0c      	ite	eq
 800edf4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800edf8:	2500      	movne	r5, #0
 800edfa:	4293      	cmp	r3, r2
 800edfc:	bfc4      	itt	gt
 800edfe:	1a9b      	subgt	r3, r3, r2
 800ee00:	18ed      	addgt	r5, r5, r3
 800ee02:	2600      	movs	r6, #0
 800ee04:	341a      	adds	r4, #26
 800ee06:	42b5      	cmp	r5, r6
 800ee08:	d11a      	bne.n	800ee40 <_printf_common+0xc8>
 800ee0a:	2000      	movs	r0, #0
 800ee0c:	e008      	b.n	800ee20 <_printf_common+0xa8>
 800ee0e:	2301      	movs	r3, #1
 800ee10:	4652      	mov	r2, sl
 800ee12:	4641      	mov	r1, r8
 800ee14:	4638      	mov	r0, r7
 800ee16:	47c8      	blx	r9
 800ee18:	3001      	adds	r0, #1
 800ee1a:	d103      	bne.n	800ee24 <_printf_common+0xac>
 800ee1c:	f04f 30ff 	mov.w	r0, #4294967295
 800ee20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee24:	3501      	adds	r5, #1
 800ee26:	e7c6      	b.n	800edb6 <_printf_common+0x3e>
 800ee28:	18e1      	adds	r1, r4, r3
 800ee2a:	1c5a      	adds	r2, r3, #1
 800ee2c:	2030      	movs	r0, #48	@ 0x30
 800ee2e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ee32:	4422      	add	r2, r4
 800ee34:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ee38:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ee3c:	3302      	adds	r3, #2
 800ee3e:	e7c7      	b.n	800edd0 <_printf_common+0x58>
 800ee40:	2301      	movs	r3, #1
 800ee42:	4622      	mov	r2, r4
 800ee44:	4641      	mov	r1, r8
 800ee46:	4638      	mov	r0, r7
 800ee48:	47c8      	blx	r9
 800ee4a:	3001      	adds	r0, #1
 800ee4c:	d0e6      	beq.n	800ee1c <_printf_common+0xa4>
 800ee4e:	3601      	adds	r6, #1
 800ee50:	e7d9      	b.n	800ee06 <_printf_common+0x8e>
	...

0800ee54 <_printf_i>:
 800ee54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ee58:	7e0f      	ldrb	r7, [r1, #24]
 800ee5a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ee5c:	2f78      	cmp	r7, #120	@ 0x78
 800ee5e:	4691      	mov	r9, r2
 800ee60:	4680      	mov	r8, r0
 800ee62:	460c      	mov	r4, r1
 800ee64:	469a      	mov	sl, r3
 800ee66:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ee6a:	d807      	bhi.n	800ee7c <_printf_i+0x28>
 800ee6c:	2f62      	cmp	r7, #98	@ 0x62
 800ee6e:	d80a      	bhi.n	800ee86 <_printf_i+0x32>
 800ee70:	2f00      	cmp	r7, #0
 800ee72:	f000 80d2 	beq.w	800f01a <_printf_i+0x1c6>
 800ee76:	2f58      	cmp	r7, #88	@ 0x58
 800ee78:	f000 80b9 	beq.w	800efee <_printf_i+0x19a>
 800ee7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ee80:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ee84:	e03a      	b.n	800eefc <_printf_i+0xa8>
 800ee86:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ee8a:	2b15      	cmp	r3, #21
 800ee8c:	d8f6      	bhi.n	800ee7c <_printf_i+0x28>
 800ee8e:	a101      	add	r1, pc, #4	@ (adr r1, 800ee94 <_printf_i+0x40>)
 800ee90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ee94:	0800eeed 	.word	0x0800eeed
 800ee98:	0800ef01 	.word	0x0800ef01
 800ee9c:	0800ee7d 	.word	0x0800ee7d
 800eea0:	0800ee7d 	.word	0x0800ee7d
 800eea4:	0800ee7d 	.word	0x0800ee7d
 800eea8:	0800ee7d 	.word	0x0800ee7d
 800eeac:	0800ef01 	.word	0x0800ef01
 800eeb0:	0800ee7d 	.word	0x0800ee7d
 800eeb4:	0800ee7d 	.word	0x0800ee7d
 800eeb8:	0800ee7d 	.word	0x0800ee7d
 800eebc:	0800ee7d 	.word	0x0800ee7d
 800eec0:	0800f001 	.word	0x0800f001
 800eec4:	0800ef2b 	.word	0x0800ef2b
 800eec8:	0800efbb 	.word	0x0800efbb
 800eecc:	0800ee7d 	.word	0x0800ee7d
 800eed0:	0800ee7d 	.word	0x0800ee7d
 800eed4:	0800f023 	.word	0x0800f023
 800eed8:	0800ee7d 	.word	0x0800ee7d
 800eedc:	0800ef2b 	.word	0x0800ef2b
 800eee0:	0800ee7d 	.word	0x0800ee7d
 800eee4:	0800ee7d 	.word	0x0800ee7d
 800eee8:	0800efc3 	.word	0x0800efc3
 800eeec:	6833      	ldr	r3, [r6, #0]
 800eeee:	1d1a      	adds	r2, r3, #4
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	6032      	str	r2, [r6, #0]
 800eef4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800eef8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800eefc:	2301      	movs	r3, #1
 800eefe:	e09d      	b.n	800f03c <_printf_i+0x1e8>
 800ef00:	6833      	ldr	r3, [r6, #0]
 800ef02:	6820      	ldr	r0, [r4, #0]
 800ef04:	1d19      	adds	r1, r3, #4
 800ef06:	6031      	str	r1, [r6, #0]
 800ef08:	0606      	lsls	r6, r0, #24
 800ef0a:	d501      	bpl.n	800ef10 <_printf_i+0xbc>
 800ef0c:	681d      	ldr	r5, [r3, #0]
 800ef0e:	e003      	b.n	800ef18 <_printf_i+0xc4>
 800ef10:	0645      	lsls	r5, r0, #25
 800ef12:	d5fb      	bpl.n	800ef0c <_printf_i+0xb8>
 800ef14:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ef18:	2d00      	cmp	r5, #0
 800ef1a:	da03      	bge.n	800ef24 <_printf_i+0xd0>
 800ef1c:	232d      	movs	r3, #45	@ 0x2d
 800ef1e:	426d      	negs	r5, r5
 800ef20:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ef24:	4859      	ldr	r0, [pc, #356]	@ (800f08c <_printf_i+0x238>)
 800ef26:	230a      	movs	r3, #10
 800ef28:	e011      	b.n	800ef4e <_printf_i+0xfa>
 800ef2a:	6821      	ldr	r1, [r4, #0]
 800ef2c:	6833      	ldr	r3, [r6, #0]
 800ef2e:	0608      	lsls	r0, r1, #24
 800ef30:	f853 5b04 	ldr.w	r5, [r3], #4
 800ef34:	d402      	bmi.n	800ef3c <_printf_i+0xe8>
 800ef36:	0649      	lsls	r1, r1, #25
 800ef38:	bf48      	it	mi
 800ef3a:	b2ad      	uxthmi	r5, r5
 800ef3c:	2f6f      	cmp	r7, #111	@ 0x6f
 800ef3e:	4853      	ldr	r0, [pc, #332]	@ (800f08c <_printf_i+0x238>)
 800ef40:	6033      	str	r3, [r6, #0]
 800ef42:	bf14      	ite	ne
 800ef44:	230a      	movne	r3, #10
 800ef46:	2308      	moveq	r3, #8
 800ef48:	2100      	movs	r1, #0
 800ef4a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ef4e:	6866      	ldr	r6, [r4, #4]
 800ef50:	60a6      	str	r6, [r4, #8]
 800ef52:	2e00      	cmp	r6, #0
 800ef54:	bfa2      	ittt	ge
 800ef56:	6821      	ldrge	r1, [r4, #0]
 800ef58:	f021 0104 	bicge.w	r1, r1, #4
 800ef5c:	6021      	strge	r1, [r4, #0]
 800ef5e:	b90d      	cbnz	r5, 800ef64 <_printf_i+0x110>
 800ef60:	2e00      	cmp	r6, #0
 800ef62:	d04b      	beq.n	800effc <_printf_i+0x1a8>
 800ef64:	4616      	mov	r6, r2
 800ef66:	fbb5 f1f3 	udiv	r1, r5, r3
 800ef6a:	fb03 5711 	mls	r7, r3, r1, r5
 800ef6e:	5dc7      	ldrb	r7, [r0, r7]
 800ef70:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ef74:	462f      	mov	r7, r5
 800ef76:	42bb      	cmp	r3, r7
 800ef78:	460d      	mov	r5, r1
 800ef7a:	d9f4      	bls.n	800ef66 <_printf_i+0x112>
 800ef7c:	2b08      	cmp	r3, #8
 800ef7e:	d10b      	bne.n	800ef98 <_printf_i+0x144>
 800ef80:	6823      	ldr	r3, [r4, #0]
 800ef82:	07df      	lsls	r7, r3, #31
 800ef84:	d508      	bpl.n	800ef98 <_printf_i+0x144>
 800ef86:	6923      	ldr	r3, [r4, #16]
 800ef88:	6861      	ldr	r1, [r4, #4]
 800ef8a:	4299      	cmp	r1, r3
 800ef8c:	bfde      	ittt	le
 800ef8e:	2330      	movle	r3, #48	@ 0x30
 800ef90:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ef94:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ef98:	1b92      	subs	r2, r2, r6
 800ef9a:	6122      	str	r2, [r4, #16]
 800ef9c:	f8cd a000 	str.w	sl, [sp]
 800efa0:	464b      	mov	r3, r9
 800efa2:	aa03      	add	r2, sp, #12
 800efa4:	4621      	mov	r1, r4
 800efa6:	4640      	mov	r0, r8
 800efa8:	f7ff fee6 	bl	800ed78 <_printf_common>
 800efac:	3001      	adds	r0, #1
 800efae:	d14a      	bne.n	800f046 <_printf_i+0x1f2>
 800efb0:	f04f 30ff 	mov.w	r0, #4294967295
 800efb4:	b004      	add	sp, #16
 800efb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800efba:	6823      	ldr	r3, [r4, #0]
 800efbc:	f043 0320 	orr.w	r3, r3, #32
 800efc0:	6023      	str	r3, [r4, #0]
 800efc2:	4833      	ldr	r0, [pc, #204]	@ (800f090 <_printf_i+0x23c>)
 800efc4:	2778      	movs	r7, #120	@ 0x78
 800efc6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800efca:	6823      	ldr	r3, [r4, #0]
 800efcc:	6831      	ldr	r1, [r6, #0]
 800efce:	061f      	lsls	r7, r3, #24
 800efd0:	f851 5b04 	ldr.w	r5, [r1], #4
 800efd4:	d402      	bmi.n	800efdc <_printf_i+0x188>
 800efd6:	065f      	lsls	r7, r3, #25
 800efd8:	bf48      	it	mi
 800efda:	b2ad      	uxthmi	r5, r5
 800efdc:	6031      	str	r1, [r6, #0]
 800efde:	07d9      	lsls	r1, r3, #31
 800efe0:	bf44      	itt	mi
 800efe2:	f043 0320 	orrmi.w	r3, r3, #32
 800efe6:	6023      	strmi	r3, [r4, #0]
 800efe8:	b11d      	cbz	r5, 800eff2 <_printf_i+0x19e>
 800efea:	2310      	movs	r3, #16
 800efec:	e7ac      	b.n	800ef48 <_printf_i+0xf4>
 800efee:	4827      	ldr	r0, [pc, #156]	@ (800f08c <_printf_i+0x238>)
 800eff0:	e7e9      	b.n	800efc6 <_printf_i+0x172>
 800eff2:	6823      	ldr	r3, [r4, #0]
 800eff4:	f023 0320 	bic.w	r3, r3, #32
 800eff8:	6023      	str	r3, [r4, #0]
 800effa:	e7f6      	b.n	800efea <_printf_i+0x196>
 800effc:	4616      	mov	r6, r2
 800effe:	e7bd      	b.n	800ef7c <_printf_i+0x128>
 800f000:	6833      	ldr	r3, [r6, #0]
 800f002:	6825      	ldr	r5, [r4, #0]
 800f004:	6961      	ldr	r1, [r4, #20]
 800f006:	1d18      	adds	r0, r3, #4
 800f008:	6030      	str	r0, [r6, #0]
 800f00a:	062e      	lsls	r6, r5, #24
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	d501      	bpl.n	800f014 <_printf_i+0x1c0>
 800f010:	6019      	str	r1, [r3, #0]
 800f012:	e002      	b.n	800f01a <_printf_i+0x1c6>
 800f014:	0668      	lsls	r0, r5, #25
 800f016:	d5fb      	bpl.n	800f010 <_printf_i+0x1bc>
 800f018:	8019      	strh	r1, [r3, #0]
 800f01a:	2300      	movs	r3, #0
 800f01c:	6123      	str	r3, [r4, #16]
 800f01e:	4616      	mov	r6, r2
 800f020:	e7bc      	b.n	800ef9c <_printf_i+0x148>
 800f022:	6833      	ldr	r3, [r6, #0]
 800f024:	1d1a      	adds	r2, r3, #4
 800f026:	6032      	str	r2, [r6, #0]
 800f028:	681e      	ldr	r6, [r3, #0]
 800f02a:	6862      	ldr	r2, [r4, #4]
 800f02c:	2100      	movs	r1, #0
 800f02e:	4630      	mov	r0, r6
 800f030:	f7f1 f8f6 	bl	8000220 <memchr>
 800f034:	b108      	cbz	r0, 800f03a <_printf_i+0x1e6>
 800f036:	1b80      	subs	r0, r0, r6
 800f038:	6060      	str	r0, [r4, #4]
 800f03a:	6863      	ldr	r3, [r4, #4]
 800f03c:	6123      	str	r3, [r4, #16]
 800f03e:	2300      	movs	r3, #0
 800f040:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f044:	e7aa      	b.n	800ef9c <_printf_i+0x148>
 800f046:	6923      	ldr	r3, [r4, #16]
 800f048:	4632      	mov	r2, r6
 800f04a:	4649      	mov	r1, r9
 800f04c:	4640      	mov	r0, r8
 800f04e:	47d0      	blx	sl
 800f050:	3001      	adds	r0, #1
 800f052:	d0ad      	beq.n	800efb0 <_printf_i+0x15c>
 800f054:	6823      	ldr	r3, [r4, #0]
 800f056:	079b      	lsls	r3, r3, #30
 800f058:	d413      	bmi.n	800f082 <_printf_i+0x22e>
 800f05a:	68e0      	ldr	r0, [r4, #12]
 800f05c:	9b03      	ldr	r3, [sp, #12]
 800f05e:	4298      	cmp	r0, r3
 800f060:	bfb8      	it	lt
 800f062:	4618      	movlt	r0, r3
 800f064:	e7a6      	b.n	800efb4 <_printf_i+0x160>
 800f066:	2301      	movs	r3, #1
 800f068:	4632      	mov	r2, r6
 800f06a:	4649      	mov	r1, r9
 800f06c:	4640      	mov	r0, r8
 800f06e:	47d0      	blx	sl
 800f070:	3001      	adds	r0, #1
 800f072:	d09d      	beq.n	800efb0 <_printf_i+0x15c>
 800f074:	3501      	adds	r5, #1
 800f076:	68e3      	ldr	r3, [r4, #12]
 800f078:	9903      	ldr	r1, [sp, #12]
 800f07a:	1a5b      	subs	r3, r3, r1
 800f07c:	42ab      	cmp	r3, r5
 800f07e:	dcf2      	bgt.n	800f066 <_printf_i+0x212>
 800f080:	e7eb      	b.n	800f05a <_printf_i+0x206>
 800f082:	2500      	movs	r5, #0
 800f084:	f104 0619 	add.w	r6, r4, #25
 800f088:	e7f5      	b.n	800f076 <_printf_i+0x222>
 800f08a:	bf00      	nop
 800f08c:	08012752 	.word	0x08012752
 800f090:	08012763 	.word	0x08012763

0800f094 <_scanf_float>:
 800f094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f098:	b087      	sub	sp, #28
 800f09a:	4617      	mov	r7, r2
 800f09c:	9303      	str	r3, [sp, #12]
 800f09e:	688b      	ldr	r3, [r1, #8]
 800f0a0:	1e5a      	subs	r2, r3, #1
 800f0a2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800f0a6:	bf81      	itttt	hi
 800f0a8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800f0ac:	eb03 0b05 	addhi.w	fp, r3, r5
 800f0b0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800f0b4:	608b      	strhi	r3, [r1, #8]
 800f0b6:	680b      	ldr	r3, [r1, #0]
 800f0b8:	460a      	mov	r2, r1
 800f0ba:	f04f 0500 	mov.w	r5, #0
 800f0be:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800f0c2:	f842 3b1c 	str.w	r3, [r2], #28
 800f0c6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800f0ca:	4680      	mov	r8, r0
 800f0cc:	460c      	mov	r4, r1
 800f0ce:	bf98      	it	ls
 800f0d0:	f04f 0b00 	movls.w	fp, #0
 800f0d4:	9201      	str	r2, [sp, #4]
 800f0d6:	4616      	mov	r6, r2
 800f0d8:	46aa      	mov	sl, r5
 800f0da:	46a9      	mov	r9, r5
 800f0dc:	9502      	str	r5, [sp, #8]
 800f0de:	68a2      	ldr	r2, [r4, #8]
 800f0e0:	b152      	cbz	r2, 800f0f8 <_scanf_float+0x64>
 800f0e2:	683b      	ldr	r3, [r7, #0]
 800f0e4:	781b      	ldrb	r3, [r3, #0]
 800f0e6:	2b4e      	cmp	r3, #78	@ 0x4e
 800f0e8:	d864      	bhi.n	800f1b4 <_scanf_float+0x120>
 800f0ea:	2b40      	cmp	r3, #64	@ 0x40
 800f0ec:	d83c      	bhi.n	800f168 <_scanf_float+0xd4>
 800f0ee:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800f0f2:	b2c8      	uxtb	r0, r1
 800f0f4:	280e      	cmp	r0, #14
 800f0f6:	d93a      	bls.n	800f16e <_scanf_float+0xda>
 800f0f8:	f1b9 0f00 	cmp.w	r9, #0
 800f0fc:	d003      	beq.n	800f106 <_scanf_float+0x72>
 800f0fe:	6823      	ldr	r3, [r4, #0]
 800f100:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f104:	6023      	str	r3, [r4, #0]
 800f106:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f10a:	f1ba 0f01 	cmp.w	sl, #1
 800f10e:	f200 8117 	bhi.w	800f340 <_scanf_float+0x2ac>
 800f112:	9b01      	ldr	r3, [sp, #4]
 800f114:	429e      	cmp	r6, r3
 800f116:	f200 8108 	bhi.w	800f32a <_scanf_float+0x296>
 800f11a:	2001      	movs	r0, #1
 800f11c:	b007      	add	sp, #28
 800f11e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f122:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800f126:	2a0d      	cmp	r2, #13
 800f128:	d8e6      	bhi.n	800f0f8 <_scanf_float+0x64>
 800f12a:	a101      	add	r1, pc, #4	@ (adr r1, 800f130 <_scanf_float+0x9c>)
 800f12c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f130:	0800f277 	.word	0x0800f277
 800f134:	0800f0f9 	.word	0x0800f0f9
 800f138:	0800f0f9 	.word	0x0800f0f9
 800f13c:	0800f0f9 	.word	0x0800f0f9
 800f140:	0800f2d7 	.word	0x0800f2d7
 800f144:	0800f2af 	.word	0x0800f2af
 800f148:	0800f0f9 	.word	0x0800f0f9
 800f14c:	0800f0f9 	.word	0x0800f0f9
 800f150:	0800f285 	.word	0x0800f285
 800f154:	0800f0f9 	.word	0x0800f0f9
 800f158:	0800f0f9 	.word	0x0800f0f9
 800f15c:	0800f0f9 	.word	0x0800f0f9
 800f160:	0800f0f9 	.word	0x0800f0f9
 800f164:	0800f23d 	.word	0x0800f23d
 800f168:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800f16c:	e7db      	b.n	800f126 <_scanf_float+0x92>
 800f16e:	290e      	cmp	r1, #14
 800f170:	d8c2      	bhi.n	800f0f8 <_scanf_float+0x64>
 800f172:	a001      	add	r0, pc, #4	@ (adr r0, 800f178 <_scanf_float+0xe4>)
 800f174:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800f178:	0800f22d 	.word	0x0800f22d
 800f17c:	0800f0f9 	.word	0x0800f0f9
 800f180:	0800f22d 	.word	0x0800f22d
 800f184:	0800f2c3 	.word	0x0800f2c3
 800f188:	0800f0f9 	.word	0x0800f0f9
 800f18c:	0800f1d5 	.word	0x0800f1d5
 800f190:	0800f213 	.word	0x0800f213
 800f194:	0800f213 	.word	0x0800f213
 800f198:	0800f213 	.word	0x0800f213
 800f19c:	0800f213 	.word	0x0800f213
 800f1a0:	0800f213 	.word	0x0800f213
 800f1a4:	0800f213 	.word	0x0800f213
 800f1a8:	0800f213 	.word	0x0800f213
 800f1ac:	0800f213 	.word	0x0800f213
 800f1b0:	0800f213 	.word	0x0800f213
 800f1b4:	2b6e      	cmp	r3, #110	@ 0x6e
 800f1b6:	d809      	bhi.n	800f1cc <_scanf_float+0x138>
 800f1b8:	2b60      	cmp	r3, #96	@ 0x60
 800f1ba:	d8b2      	bhi.n	800f122 <_scanf_float+0x8e>
 800f1bc:	2b54      	cmp	r3, #84	@ 0x54
 800f1be:	d07b      	beq.n	800f2b8 <_scanf_float+0x224>
 800f1c0:	2b59      	cmp	r3, #89	@ 0x59
 800f1c2:	d199      	bne.n	800f0f8 <_scanf_float+0x64>
 800f1c4:	2d07      	cmp	r5, #7
 800f1c6:	d197      	bne.n	800f0f8 <_scanf_float+0x64>
 800f1c8:	2508      	movs	r5, #8
 800f1ca:	e02c      	b.n	800f226 <_scanf_float+0x192>
 800f1cc:	2b74      	cmp	r3, #116	@ 0x74
 800f1ce:	d073      	beq.n	800f2b8 <_scanf_float+0x224>
 800f1d0:	2b79      	cmp	r3, #121	@ 0x79
 800f1d2:	e7f6      	b.n	800f1c2 <_scanf_float+0x12e>
 800f1d4:	6821      	ldr	r1, [r4, #0]
 800f1d6:	05c8      	lsls	r0, r1, #23
 800f1d8:	d51b      	bpl.n	800f212 <_scanf_float+0x17e>
 800f1da:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800f1de:	6021      	str	r1, [r4, #0]
 800f1e0:	f109 0901 	add.w	r9, r9, #1
 800f1e4:	f1bb 0f00 	cmp.w	fp, #0
 800f1e8:	d003      	beq.n	800f1f2 <_scanf_float+0x15e>
 800f1ea:	3201      	adds	r2, #1
 800f1ec:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f1f0:	60a2      	str	r2, [r4, #8]
 800f1f2:	68a3      	ldr	r3, [r4, #8]
 800f1f4:	3b01      	subs	r3, #1
 800f1f6:	60a3      	str	r3, [r4, #8]
 800f1f8:	6923      	ldr	r3, [r4, #16]
 800f1fa:	3301      	adds	r3, #1
 800f1fc:	6123      	str	r3, [r4, #16]
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	3b01      	subs	r3, #1
 800f202:	2b00      	cmp	r3, #0
 800f204:	607b      	str	r3, [r7, #4]
 800f206:	f340 8087 	ble.w	800f318 <_scanf_float+0x284>
 800f20a:	683b      	ldr	r3, [r7, #0]
 800f20c:	3301      	adds	r3, #1
 800f20e:	603b      	str	r3, [r7, #0]
 800f210:	e765      	b.n	800f0de <_scanf_float+0x4a>
 800f212:	eb1a 0105 	adds.w	r1, sl, r5
 800f216:	f47f af6f 	bne.w	800f0f8 <_scanf_float+0x64>
 800f21a:	6822      	ldr	r2, [r4, #0]
 800f21c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800f220:	6022      	str	r2, [r4, #0]
 800f222:	460d      	mov	r5, r1
 800f224:	468a      	mov	sl, r1
 800f226:	f806 3b01 	strb.w	r3, [r6], #1
 800f22a:	e7e2      	b.n	800f1f2 <_scanf_float+0x15e>
 800f22c:	6822      	ldr	r2, [r4, #0]
 800f22e:	0610      	lsls	r0, r2, #24
 800f230:	f57f af62 	bpl.w	800f0f8 <_scanf_float+0x64>
 800f234:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800f238:	6022      	str	r2, [r4, #0]
 800f23a:	e7f4      	b.n	800f226 <_scanf_float+0x192>
 800f23c:	f1ba 0f00 	cmp.w	sl, #0
 800f240:	d10e      	bne.n	800f260 <_scanf_float+0x1cc>
 800f242:	f1b9 0f00 	cmp.w	r9, #0
 800f246:	d10e      	bne.n	800f266 <_scanf_float+0x1d2>
 800f248:	6822      	ldr	r2, [r4, #0]
 800f24a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f24e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f252:	d108      	bne.n	800f266 <_scanf_float+0x1d2>
 800f254:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f258:	6022      	str	r2, [r4, #0]
 800f25a:	f04f 0a01 	mov.w	sl, #1
 800f25e:	e7e2      	b.n	800f226 <_scanf_float+0x192>
 800f260:	f1ba 0f02 	cmp.w	sl, #2
 800f264:	d055      	beq.n	800f312 <_scanf_float+0x27e>
 800f266:	2d01      	cmp	r5, #1
 800f268:	d002      	beq.n	800f270 <_scanf_float+0x1dc>
 800f26a:	2d04      	cmp	r5, #4
 800f26c:	f47f af44 	bne.w	800f0f8 <_scanf_float+0x64>
 800f270:	3501      	adds	r5, #1
 800f272:	b2ed      	uxtb	r5, r5
 800f274:	e7d7      	b.n	800f226 <_scanf_float+0x192>
 800f276:	f1ba 0f01 	cmp.w	sl, #1
 800f27a:	f47f af3d 	bne.w	800f0f8 <_scanf_float+0x64>
 800f27e:	f04f 0a02 	mov.w	sl, #2
 800f282:	e7d0      	b.n	800f226 <_scanf_float+0x192>
 800f284:	b97d      	cbnz	r5, 800f2a6 <_scanf_float+0x212>
 800f286:	f1b9 0f00 	cmp.w	r9, #0
 800f28a:	f47f af38 	bne.w	800f0fe <_scanf_float+0x6a>
 800f28e:	6822      	ldr	r2, [r4, #0]
 800f290:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f294:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f298:	f040 8108 	bne.w	800f4ac <_scanf_float+0x418>
 800f29c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f2a0:	6022      	str	r2, [r4, #0]
 800f2a2:	2501      	movs	r5, #1
 800f2a4:	e7bf      	b.n	800f226 <_scanf_float+0x192>
 800f2a6:	2d03      	cmp	r5, #3
 800f2a8:	d0e2      	beq.n	800f270 <_scanf_float+0x1dc>
 800f2aa:	2d05      	cmp	r5, #5
 800f2ac:	e7de      	b.n	800f26c <_scanf_float+0x1d8>
 800f2ae:	2d02      	cmp	r5, #2
 800f2b0:	f47f af22 	bne.w	800f0f8 <_scanf_float+0x64>
 800f2b4:	2503      	movs	r5, #3
 800f2b6:	e7b6      	b.n	800f226 <_scanf_float+0x192>
 800f2b8:	2d06      	cmp	r5, #6
 800f2ba:	f47f af1d 	bne.w	800f0f8 <_scanf_float+0x64>
 800f2be:	2507      	movs	r5, #7
 800f2c0:	e7b1      	b.n	800f226 <_scanf_float+0x192>
 800f2c2:	6822      	ldr	r2, [r4, #0]
 800f2c4:	0591      	lsls	r1, r2, #22
 800f2c6:	f57f af17 	bpl.w	800f0f8 <_scanf_float+0x64>
 800f2ca:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800f2ce:	6022      	str	r2, [r4, #0]
 800f2d0:	f8cd 9008 	str.w	r9, [sp, #8]
 800f2d4:	e7a7      	b.n	800f226 <_scanf_float+0x192>
 800f2d6:	6822      	ldr	r2, [r4, #0]
 800f2d8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800f2dc:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800f2e0:	d006      	beq.n	800f2f0 <_scanf_float+0x25c>
 800f2e2:	0550      	lsls	r0, r2, #21
 800f2e4:	f57f af08 	bpl.w	800f0f8 <_scanf_float+0x64>
 800f2e8:	f1b9 0f00 	cmp.w	r9, #0
 800f2ec:	f000 80de 	beq.w	800f4ac <_scanf_float+0x418>
 800f2f0:	0591      	lsls	r1, r2, #22
 800f2f2:	bf58      	it	pl
 800f2f4:	9902      	ldrpl	r1, [sp, #8]
 800f2f6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f2fa:	bf58      	it	pl
 800f2fc:	eba9 0101 	subpl.w	r1, r9, r1
 800f300:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800f304:	bf58      	it	pl
 800f306:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800f30a:	6022      	str	r2, [r4, #0]
 800f30c:	f04f 0900 	mov.w	r9, #0
 800f310:	e789      	b.n	800f226 <_scanf_float+0x192>
 800f312:	f04f 0a03 	mov.w	sl, #3
 800f316:	e786      	b.n	800f226 <_scanf_float+0x192>
 800f318:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800f31c:	4639      	mov	r1, r7
 800f31e:	4640      	mov	r0, r8
 800f320:	4798      	blx	r3
 800f322:	2800      	cmp	r0, #0
 800f324:	f43f aedb 	beq.w	800f0de <_scanf_float+0x4a>
 800f328:	e6e6      	b.n	800f0f8 <_scanf_float+0x64>
 800f32a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f32e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f332:	463a      	mov	r2, r7
 800f334:	4640      	mov	r0, r8
 800f336:	4798      	blx	r3
 800f338:	6923      	ldr	r3, [r4, #16]
 800f33a:	3b01      	subs	r3, #1
 800f33c:	6123      	str	r3, [r4, #16]
 800f33e:	e6e8      	b.n	800f112 <_scanf_float+0x7e>
 800f340:	1e6b      	subs	r3, r5, #1
 800f342:	2b06      	cmp	r3, #6
 800f344:	d824      	bhi.n	800f390 <_scanf_float+0x2fc>
 800f346:	2d02      	cmp	r5, #2
 800f348:	d836      	bhi.n	800f3b8 <_scanf_float+0x324>
 800f34a:	9b01      	ldr	r3, [sp, #4]
 800f34c:	429e      	cmp	r6, r3
 800f34e:	f67f aee4 	bls.w	800f11a <_scanf_float+0x86>
 800f352:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f356:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f35a:	463a      	mov	r2, r7
 800f35c:	4640      	mov	r0, r8
 800f35e:	4798      	blx	r3
 800f360:	6923      	ldr	r3, [r4, #16]
 800f362:	3b01      	subs	r3, #1
 800f364:	6123      	str	r3, [r4, #16]
 800f366:	e7f0      	b.n	800f34a <_scanf_float+0x2b6>
 800f368:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f36c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800f370:	463a      	mov	r2, r7
 800f372:	4640      	mov	r0, r8
 800f374:	4798      	blx	r3
 800f376:	6923      	ldr	r3, [r4, #16]
 800f378:	3b01      	subs	r3, #1
 800f37a:	6123      	str	r3, [r4, #16]
 800f37c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f380:	fa5f fa8a 	uxtb.w	sl, sl
 800f384:	f1ba 0f02 	cmp.w	sl, #2
 800f388:	d1ee      	bne.n	800f368 <_scanf_float+0x2d4>
 800f38a:	3d03      	subs	r5, #3
 800f38c:	b2ed      	uxtb	r5, r5
 800f38e:	1b76      	subs	r6, r6, r5
 800f390:	6823      	ldr	r3, [r4, #0]
 800f392:	05da      	lsls	r2, r3, #23
 800f394:	d530      	bpl.n	800f3f8 <_scanf_float+0x364>
 800f396:	055b      	lsls	r3, r3, #21
 800f398:	d511      	bpl.n	800f3be <_scanf_float+0x32a>
 800f39a:	9b01      	ldr	r3, [sp, #4]
 800f39c:	429e      	cmp	r6, r3
 800f39e:	f67f aebc 	bls.w	800f11a <_scanf_float+0x86>
 800f3a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f3a6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f3aa:	463a      	mov	r2, r7
 800f3ac:	4640      	mov	r0, r8
 800f3ae:	4798      	blx	r3
 800f3b0:	6923      	ldr	r3, [r4, #16]
 800f3b2:	3b01      	subs	r3, #1
 800f3b4:	6123      	str	r3, [r4, #16]
 800f3b6:	e7f0      	b.n	800f39a <_scanf_float+0x306>
 800f3b8:	46aa      	mov	sl, r5
 800f3ba:	46b3      	mov	fp, r6
 800f3bc:	e7de      	b.n	800f37c <_scanf_float+0x2e8>
 800f3be:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800f3c2:	6923      	ldr	r3, [r4, #16]
 800f3c4:	2965      	cmp	r1, #101	@ 0x65
 800f3c6:	f103 33ff 	add.w	r3, r3, #4294967295
 800f3ca:	f106 35ff 	add.w	r5, r6, #4294967295
 800f3ce:	6123      	str	r3, [r4, #16]
 800f3d0:	d00c      	beq.n	800f3ec <_scanf_float+0x358>
 800f3d2:	2945      	cmp	r1, #69	@ 0x45
 800f3d4:	d00a      	beq.n	800f3ec <_scanf_float+0x358>
 800f3d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f3da:	463a      	mov	r2, r7
 800f3dc:	4640      	mov	r0, r8
 800f3de:	4798      	blx	r3
 800f3e0:	6923      	ldr	r3, [r4, #16]
 800f3e2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800f3e6:	3b01      	subs	r3, #1
 800f3e8:	1eb5      	subs	r5, r6, #2
 800f3ea:	6123      	str	r3, [r4, #16]
 800f3ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f3f0:	463a      	mov	r2, r7
 800f3f2:	4640      	mov	r0, r8
 800f3f4:	4798      	blx	r3
 800f3f6:	462e      	mov	r6, r5
 800f3f8:	6822      	ldr	r2, [r4, #0]
 800f3fa:	f012 0210 	ands.w	r2, r2, #16
 800f3fe:	d001      	beq.n	800f404 <_scanf_float+0x370>
 800f400:	2000      	movs	r0, #0
 800f402:	e68b      	b.n	800f11c <_scanf_float+0x88>
 800f404:	7032      	strb	r2, [r6, #0]
 800f406:	6823      	ldr	r3, [r4, #0]
 800f408:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800f40c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f410:	d11c      	bne.n	800f44c <_scanf_float+0x3b8>
 800f412:	9b02      	ldr	r3, [sp, #8]
 800f414:	454b      	cmp	r3, r9
 800f416:	eba3 0209 	sub.w	r2, r3, r9
 800f41a:	d123      	bne.n	800f464 <_scanf_float+0x3d0>
 800f41c:	9901      	ldr	r1, [sp, #4]
 800f41e:	2200      	movs	r2, #0
 800f420:	4640      	mov	r0, r8
 800f422:	f7ff f9cd 	bl	800e7c0 <_strtod_r>
 800f426:	9b03      	ldr	r3, [sp, #12]
 800f428:	6821      	ldr	r1, [r4, #0]
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	f011 0f02 	tst.w	r1, #2
 800f430:	ec57 6b10 	vmov	r6, r7, d0
 800f434:	f103 0204 	add.w	r2, r3, #4
 800f438:	d01f      	beq.n	800f47a <_scanf_float+0x3e6>
 800f43a:	9903      	ldr	r1, [sp, #12]
 800f43c:	600a      	str	r2, [r1, #0]
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	e9c3 6700 	strd	r6, r7, [r3]
 800f444:	68e3      	ldr	r3, [r4, #12]
 800f446:	3301      	adds	r3, #1
 800f448:	60e3      	str	r3, [r4, #12]
 800f44a:	e7d9      	b.n	800f400 <_scanf_float+0x36c>
 800f44c:	9b04      	ldr	r3, [sp, #16]
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d0e4      	beq.n	800f41c <_scanf_float+0x388>
 800f452:	9905      	ldr	r1, [sp, #20]
 800f454:	230a      	movs	r3, #10
 800f456:	3101      	adds	r1, #1
 800f458:	4640      	mov	r0, r8
 800f45a:	f002 f9e9 	bl	8011830 <_strtol_r>
 800f45e:	9b04      	ldr	r3, [sp, #16]
 800f460:	9e05      	ldr	r6, [sp, #20]
 800f462:	1ac2      	subs	r2, r0, r3
 800f464:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800f468:	429e      	cmp	r6, r3
 800f46a:	bf28      	it	cs
 800f46c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800f470:	4910      	ldr	r1, [pc, #64]	@ (800f4b4 <_scanf_float+0x420>)
 800f472:	4630      	mov	r0, r6
 800f474:	f000 f8e4 	bl	800f640 <siprintf>
 800f478:	e7d0      	b.n	800f41c <_scanf_float+0x388>
 800f47a:	f011 0f04 	tst.w	r1, #4
 800f47e:	9903      	ldr	r1, [sp, #12]
 800f480:	600a      	str	r2, [r1, #0]
 800f482:	d1dc      	bne.n	800f43e <_scanf_float+0x3aa>
 800f484:	681d      	ldr	r5, [r3, #0]
 800f486:	4632      	mov	r2, r6
 800f488:	463b      	mov	r3, r7
 800f48a:	4630      	mov	r0, r6
 800f48c:	4639      	mov	r1, r7
 800f48e:	f7f1 fb75 	bl	8000b7c <__aeabi_dcmpun>
 800f492:	b128      	cbz	r0, 800f4a0 <_scanf_float+0x40c>
 800f494:	4808      	ldr	r0, [pc, #32]	@ (800f4b8 <_scanf_float+0x424>)
 800f496:	f000 f9ff 	bl	800f898 <nanf>
 800f49a:	ed85 0a00 	vstr	s0, [r5]
 800f49e:	e7d1      	b.n	800f444 <_scanf_float+0x3b0>
 800f4a0:	4630      	mov	r0, r6
 800f4a2:	4639      	mov	r1, r7
 800f4a4:	f7f1 fbc8 	bl	8000c38 <__aeabi_d2f>
 800f4a8:	6028      	str	r0, [r5, #0]
 800f4aa:	e7cb      	b.n	800f444 <_scanf_float+0x3b0>
 800f4ac:	f04f 0900 	mov.w	r9, #0
 800f4b0:	e629      	b.n	800f106 <_scanf_float+0x72>
 800f4b2:	bf00      	nop
 800f4b4:	08012774 	.word	0x08012774
 800f4b8:	08012b15 	.word	0x08012b15

0800f4bc <std>:
 800f4bc:	2300      	movs	r3, #0
 800f4be:	b510      	push	{r4, lr}
 800f4c0:	4604      	mov	r4, r0
 800f4c2:	e9c0 3300 	strd	r3, r3, [r0]
 800f4c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f4ca:	6083      	str	r3, [r0, #8]
 800f4cc:	8181      	strh	r1, [r0, #12]
 800f4ce:	6643      	str	r3, [r0, #100]	@ 0x64
 800f4d0:	81c2      	strh	r2, [r0, #14]
 800f4d2:	6183      	str	r3, [r0, #24]
 800f4d4:	4619      	mov	r1, r3
 800f4d6:	2208      	movs	r2, #8
 800f4d8:	305c      	adds	r0, #92	@ 0x5c
 800f4da:	f000 f935 	bl	800f748 <memset>
 800f4de:	4b0d      	ldr	r3, [pc, #52]	@ (800f514 <std+0x58>)
 800f4e0:	6263      	str	r3, [r4, #36]	@ 0x24
 800f4e2:	4b0d      	ldr	r3, [pc, #52]	@ (800f518 <std+0x5c>)
 800f4e4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f4e6:	4b0d      	ldr	r3, [pc, #52]	@ (800f51c <std+0x60>)
 800f4e8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f4ea:	4b0d      	ldr	r3, [pc, #52]	@ (800f520 <std+0x64>)
 800f4ec:	6323      	str	r3, [r4, #48]	@ 0x30
 800f4ee:	4b0d      	ldr	r3, [pc, #52]	@ (800f524 <std+0x68>)
 800f4f0:	6224      	str	r4, [r4, #32]
 800f4f2:	429c      	cmp	r4, r3
 800f4f4:	d006      	beq.n	800f504 <std+0x48>
 800f4f6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f4fa:	4294      	cmp	r4, r2
 800f4fc:	d002      	beq.n	800f504 <std+0x48>
 800f4fe:	33d0      	adds	r3, #208	@ 0xd0
 800f500:	429c      	cmp	r4, r3
 800f502:	d105      	bne.n	800f510 <std+0x54>
 800f504:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f508:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f50c:	f000 b9aa 	b.w	800f864 <__retarget_lock_init_recursive>
 800f510:	bd10      	pop	{r4, pc}
 800f512:	bf00      	nop
 800f514:	0800f681 	.word	0x0800f681
 800f518:	0800f6a3 	.word	0x0800f6a3
 800f51c:	0800f6db 	.word	0x0800f6db
 800f520:	0800f6ff 	.word	0x0800f6ff
 800f524:	20000978 	.word	0x20000978

0800f528 <stdio_exit_handler>:
 800f528:	4a02      	ldr	r2, [pc, #8]	@ (800f534 <stdio_exit_handler+0xc>)
 800f52a:	4903      	ldr	r1, [pc, #12]	@ (800f538 <stdio_exit_handler+0x10>)
 800f52c:	4803      	ldr	r0, [pc, #12]	@ (800f53c <stdio_exit_handler+0x14>)
 800f52e:	f000 b869 	b.w	800f604 <_fwalk_sglue>
 800f532:	bf00      	nop
 800f534:	20000090 	.word	0x20000090
 800f538:	08011c05 	.word	0x08011c05
 800f53c:	2000020c 	.word	0x2000020c

0800f540 <cleanup_stdio>:
 800f540:	6841      	ldr	r1, [r0, #4]
 800f542:	4b0c      	ldr	r3, [pc, #48]	@ (800f574 <cleanup_stdio+0x34>)
 800f544:	4299      	cmp	r1, r3
 800f546:	b510      	push	{r4, lr}
 800f548:	4604      	mov	r4, r0
 800f54a:	d001      	beq.n	800f550 <cleanup_stdio+0x10>
 800f54c:	f002 fb5a 	bl	8011c04 <_fflush_r>
 800f550:	68a1      	ldr	r1, [r4, #8]
 800f552:	4b09      	ldr	r3, [pc, #36]	@ (800f578 <cleanup_stdio+0x38>)
 800f554:	4299      	cmp	r1, r3
 800f556:	d002      	beq.n	800f55e <cleanup_stdio+0x1e>
 800f558:	4620      	mov	r0, r4
 800f55a:	f002 fb53 	bl	8011c04 <_fflush_r>
 800f55e:	68e1      	ldr	r1, [r4, #12]
 800f560:	4b06      	ldr	r3, [pc, #24]	@ (800f57c <cleanup_stdio+0x3c>)
 800f562:	4299      	cmp	r1, r3
 800f564:	d004      	beq.n	800f570 <cleanup_stdio+0x30>
 800f566:	4620      	mov	r0, r4
 800f568:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f56c:	f002 bb4a 	b.w	8011c04 <_fflush_r>
 800f570:	bd10      	pop	{r4, pc}
 800f572:	bf00      	nop
 800f574:	20000978 	.word	0x20000978
 800f578:	200009e0 	.word	0x200009e0
 800f57c:	20000a48 	.word	0x20000a48

0800f580 <global_stdio_init.part.0>:
 800f580:	b510      	push	{r4, lr}
 800f582:	4b0b      	ldr	r3, [pc, #44]	@ (800f5b0 <global_stdio_init.part.0+0x30>)
 800f584:	4c0b      	ldr	r4, [pc, #44]	@ (800f5b4 <global_stdio_init.part.0+0x34>)
 800f586:	4a0c      	ldr	r2, [pc, #48]	@ (800f5b8 <global_stdio_init.part.0+0x38>)
 800f588:	601a      	str	r2, [r3, #0]
 800f58a:	4620      	mov	r0, r4
 800f58c:	2200      	movs	r2, #0
 800f58e:	2104      	movs	r1, #4
 800f590:	f7ff ff94 	bl	800f4bc <std>
 800f594:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f598:	2201      	movs	r2, #1
 800f59a:	2109      	movs	r1, #9
 800f59c:	f7ff ff8e 	bl	800f4bc <std>
 800f5a0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f5a4:	2202      	movs	r2, #2
 800f5a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f5aa:	2112      	movs	r1, #18
 800f5ac:	f7ff bf86 	b.w	800f4bc <std>
 800f5b0:	20000ab0 	.word	0x20000ab0
 800f5b4:	20000978 	.word	0x20000978
 800f5b8:	0800f529 	.word	0x0800f529

0800f5bc <__sfp_lock_acquire>:
 800f5bc:	4801      	ldr	r0, [pc, #4]	@ (800f5c4 <__sfp_lock_acquire+0x8>)
 800f5be:	f000 b952 	b.w	800f866 <__retarget_lock_acquire_recursive>
 800f5c2:	bf00      	nop
 800f5c4:	20000ab9 	.word	0x20000ab9

0800f5c8 <__sfp_lock_release>:
 800f5c8:	4801      	ldr	r0, [pc, #4]	@ (800f5d0 <__sfp_lock_release+0x8>)
 800f5ca:	f000 b94d 	b.w	800f868 <__retarget_lock_release_recursive>
 800f5ce:	bf00      	nop
 800f5d0:	20000ab9 	.word	0x20000ab9

0800f5d4 <__sinit>:
 800f5d4:	b510      	push	{r4, lr}
 800f5d6:	4604      	mov	r4, r0
 800f5d8:	f7ff fff0 	bl	800f5bc <__sfp_lock_acquire>
 800f5dc:	6a23      	ldr	r3, [r4, #32]
 800f5de:	b11b      	cbz	r3, 800f5e8 <__sinit+0x14>
 800f5e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f5e4:	f7ff bff0 	b.w	800f5c8 <__sfp_lock_release>
 800f5e8:	4b04      	ldr	r3, [pc, #16]	@ (800f5fc <__sinit+0x28>)
 800f5ea:	6223      	str	r3, [r4, #32]
 800f5ec:	4b04      	ldr	r3, [pc, #16]	@ (800f600 <__sinit+0x2c>)
 800f5ee:	681b      	ldr	r3, [r3, #0]
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d1f5      	bne.n	800f5e0 <__sinit+0xc>
 800f5f4:	f7ff ffc4 	bl	800f580 <global_stdio_init.part.0>
 800f5f8:	e7f2      	b.n	800f5e0 <__sinit+0xc>
 800f5fa:	bf00      	nop
 800f5fc:	0800f541 	.word	0x0800f541
 800f600:	20000ab0 	.word	0x20000ab0

0800f604 <_fwalk_sglue>:
 800f604:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f608:	4607      	mov	r7, r0
 800f60a:	4688      	mov	r8, r1
 800f60c:	4614      	mov	r4, r2
 800f60e:	2600      	movs	r6, #0
 800f610:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f614:	f1b9 0901 	subs.w	r9, r9, #1
 800f618:	d505      	bpl.n	800f626 <_fwalk_sglue+0x22>
 800f61a:	6824      	ldr	r4, [r4, #0]
 800f61c:	2c00      	cmp	r4, #0
 800f61e:	d1f7      	bne.n	800f610 <_fwalk_sglue+0xc>
 800f620:	4630      	mov	r0, r6
 800f622:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f626:	89ab      	ldrh	r3, [r5, #12]
 800f628:	2b01      	cmp	r3, #1
 800f62a:	d907      	bls.n	800f63c <_fwalk_sglue+0x38>
 800f62c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f630:	3301      	adds	r3, #1
 800f632:	d003      	beq.n	800f63c <_fwalk_sglue+0x38>
 800f634:	4629      	mov	r1, r5
 800f636:	4638      	mov	r0, r7
 800f638:	47c0      	blx	r8
 800f63a:	4306      	orrs	r6, r0
 800f63c:	3568      	adds	r5, #104	@ 0x68
 800f63e:	e7e9      	b.n	800f614 <_fwalk_sglue+0x10>

0800f640 <siprintf>:
 800f640:	b40e      	push	{r1, r2, r3}
 800f642:	b500      	push	{lr}
 800f644:	b09c      	sub	sp, #112	@ 0x70
 800f646:	ab1d      	add	r3, sp, #116	@ 0x74
 800f648:	9002      	str	r0, [sp, #8]
 800f64a:	9006      	str	r0, [sp, #24]
 800f64c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800f650:	4809      	ldr	r0, [pc, #36]	@ (800f678 <siprintf+0x38>)
 800f652:	9107      	str	r1, [sp, #28]
 800f654:	9104      	str	r1, [sp, #16]
 800f656:	4909      	ldr	r1, [pc, #36]	@ (800f67c <siprintf+0x3c>)
 800f658:	f853 2b04 	ldr.w	r2, [r3], #4
 800f65c:	9105      	str	r1, [sp, #20]
 800f65e:	6800      	ldr	r0, [r0, #0]
 800f660:	9301      	str	r3, [sp, #4]
 800f662:	a902      	add	r1, sp, #8
 800f664:	f002 f94e 	bl	8011904 <_svfiprintf_r>
 800f668:	9b02      	ldr	r3, [sp, #8]
 800f66a:	2200      	movs	r2, #0
 800f66c:	701a      	strb	r2, [r3, #0]
 800f66e:	b01c      	add	sp, #112	@ 0x70
 800f670:	f85d eb04 	ldr.w	lr, [sp], #4
 800f674:	b003      	add	sp, #12
 800f676:	4770      	bx	lr
 800f678:	20000208 	.word	0x20000208
 800f67c:	ffff0208 	.word	0xffff0208

0800f680 <__sread>:
 800f680:	b510      	push	{r4, lr}
 800f682:	460c      	mov	r4, r1
 800f684:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f688:	f000 f89e 	bl	800f7c8 <_read_r>
 800f68c:	2800      	cmp	r0, #0
 800f68e:	bfab      	itete	ge
 800f690:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f692:	89a3      	ldrhlt	r3, [r4, #12]
 800f694:	181b      	addge	r3, r3, r0
 800f696:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f69a:	bfac      	ite	ge
 800f69c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f69e:	81a3      	strhlt	r3, [r4, #12]
 800f6a0:	bd10      	pop	{r4, pc}

0800f6a2 <__swrite>:
 800f6a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6a6:	461f      	mov	r7, r3
 800f6a8:	898b      	ldrh	r3, [r1, #12]
 800f6aa:	05db      	lsls	r3, r3, #23
 800f6ac:	4605      	mov	r5, r0
 800f6ae:	460c      	mov	r4, r1
 800f6b0:	4616      	mov	r6, r2
 800f6b2:	d505      	bpl.n	800f6c0 <__swrite+0x1e>
 800f6b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f6b8:	2302      	movs	r3, #2
 800f6ba:	2200      	movs	r2, #0
 800f6bc:	f000 f872 	bl	800f7a4 <_lseek_r>
 800f6c0:	89a3      	ldrh	r3, [r4, #12]
 800f6c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f6c6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f6ca:	81a3      	strh	r3, [r4, #12]
 800f6cc:	4632      	mov	r2, r6
 800f6ce:	463b      	mov	r3, r7
 800f6d0:	4628      	mov	r0, r5
 800f6d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f6d6:	f000 b889 	b.w	800f7ec <_write_r>

0800f6da <__sseek>:
 800f6da:	b510      	push	{r4, lr}
 800f6dc:	460c      	mov	r4, r1
 800f6de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f6e2:	f000 f85f 	bl	800f7a4 <_lseek_r>
 800f6e6:	1c43      	adds	r3, r0, #1
 800f6e8:	89a3      	ldrh	r3, [r4, #12]
 800f6ea:	bf15      	itete	ne
 800f6ec:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f6ee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f6f2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f6f6:	81a3      	strheq	r3, [r4, #12]
 800f6f8:	bf18      	it	ne
 800f6fa:	81a3      	strhne	r3, [r4, #12]
 800f6fc:	bd10      	pop	{r4, pc}

0800f6fe <__sclose>:
 800f6fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f702:	f000 b83f 	b.w	800f784 <_close_r>
	...

0800f708 <_vsiprintf_r>:
 800f708:	b500      	push	{lr}
 800f70a:	b09b      	sub	sp, #108	@ 0x6c
 800f70c:	9100      	str	r1, [sp, #0]
 800f70e:	9104      	str	r1, [sp, #16]
 800f710:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800f714:	9105      	str	r1, [sp, #20]
 800f716:	9102      	str	r1, [sp, #8]
 800f718:	4905      	ldr	r1, [pc, #20]	@ (800f730 <_vsiprintf_r+0x28>)
 800f71a:	9103      	str	r1, [sp, #12]
 800f71c:	4669      	mov	r1, sp
 800f71e:	f002 f8f1 	bl	8011904 <_svfiprintf_r>
 800f722:	9b00      	ldr	r3, [sp, #0]
 800f724:	2200      	movs	r2, #0
 800f726:	701a      	strb	r2, [r3, #0]
 800f728:	b01b      	add	sp, #108	@ 0x6c
 800f72a:	f85d fb04 	ldr.w	pc, [sp], #4
 800f72e:	bf00      	nop
 800f730:	ffff0208 	.word	0xffff0208

0800f734 <vsiprintf>:
 800f734:	4613      	mov	r3, r2
 800f736:	460a      	mov	r2, r1
 800f738:	4601      	mov	r1, r0
 800f73a:	4802      	ldr	r0, [pc, #8]	@ (800f744 <vsiprintf+0x10>)
 800f73c:	6800      	ldr	r0, [r0, #0]
 800f73e:	f7ff bfe3 	b.w	800f708 <_vsiprintf_r>
 800f742:	bf00      	nop
 800f744:	20000208 	.word	0x20000208

0800f748 <memset>:
 800f748:	4402      	add	r2, r0
 800f74a:	4603      	mov	r3, r0
 800f74c:	4293      	cmp	r3, r2
 800f74e:	d100      	bne.n	800f752 <memset+0xa>
 800f750:	4770      	bx	lr
 800f752:	f803 1b01 	strb.w	r1, [r3], #1
 800f756:	e7f9      	b.n	800f74c <memset+0x4>

0800f758 <strncmp>:
 800f758:	b510      	push	{r4, lr}
 800f75a:	b16a      	cbz	r2, 800f778 <strncmp+0x20>
 800f75c:	3901      	subs	r1, #1
 800f75e:	1884      	adds	r4, r0, r2
 800f760:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f764:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800f768:	429a      	cmp	r2, r3
 800f76a:	d103      	bne.n	800f774 <strncmp+0x1c>
 800f76c:	42a0      	cmp	r0, r4
 800f76e:	d001      	beq.n	800f774 <strncmp+0x1c>
 800f770:	2a00      	cmp	r2, #0
 800f772:	d1f5      	bne.n	800f760 <strncmp+0x8>
 800f774:	1ad0      	subs	r0, r2, r3
 800f776:	bd10      	pop	{r4, pc}
 800f778:	4610      	mov	r0, r2
 800f77a:	e7fc      	b.n	800f776 <strncmp+0x1e>

0800f77c <_localeconv_r>:
 800f77c:	4800      	ldr	r0, [pc, #0]	@ (800f780 <_localeconv_r+0x4>)
 800f77e:	4770      	bx	lr
 800f780:	2000018c 	.word	0x2000018c

0800f784 <_close_r>:
 800f784:	b538      	push	{r3, r4, r5, lr}
 800f786:	4d06      	ldr	r5, [pc, #24]	@ (800f7a0 <_close_r+0x1c>)
 800f788:	2300      	movs	r3, #0
 800f78a:	4604      	mov	r4, r0
 800f78c:	4608      	mov	r0, r1
 800f78e:	602b      	str	r3, [r5, #0]
 800f790:	f7f2 fba4 	bl	8001edc <_close>
 800f794:	1c43      	adds	r3, r0, #1
 800f796:	d102      	bne.n	800f79e <_close_r+0x1a>
 800f798:	682b      	ldr	r3, [r5, #0]
 800f79a:	b103      	cbz	r3, 800f79e <_close_r+0x1a>
 800f79c:	6023      	str	r3, [r4, #0]
 800f79e:	bd38      	pop	{r3, r4, r5, pc}
 800f7a0:	20000ab4 	.word	0x20000ab4

0800f7a4 <_lseek_r>:
 800f7a4:	b538      	push	{r3, r4, r5, lr}
 800f7a6:	4d07      	ldr	r5, [pc, #28]	@ (800f7c4 <_lseek_r+0x20>)
 800f7a8:	4604      	mov	r4, r0
 800f7aa:	4608      	mov	r0, r1
 800f7ac:	4611      	mov	r1, r2
 800f7ae:	2200      	movs	r2, #0
 800f7b0:	602a      	str	r2, [r5, #0]
 800f7b2:	461a      	mov	r2, r3
 800f7b4:	f7f2 fbb9 	bl	8001f2a <_lseek>
 800f7b8:	1c43      	adds	r3, r0, #1
 800f7ba:	d102      	bne.n	800f7c2 <_lseek_r+0x1e>
 800f7bc:	682b      	ldr	r3, [r5, #0]
 800f7be:	b103      	cbz	r3, 800f7c2 <_lseek_r+0x1e>
 800f7c0:	6023      	str	r3, [r4, #0]
 800f7c2:	bd38      	pop	{r3, r4, r5, pc}
 800f7c4:	20000ab4 	.word	0x20000ab4

0800f7c8 <_read_r>:
 800f7c8:	b538      	push	{r3, r4, r5, lr}
 800f7ca:	4d07      	ldr	r5, [pc, #28]	@ (800f7e8 <_read_r+0x20>)
 800f7cc:	4604      	mov	r4, r0
 800f7ce:	4608      	mov	r0, r1
 800f7d0:	4611      	mov	r1, r2
 800f7d2:	2200      	movs	r2, #0
 800f7d4:	602a      	str	r2, [r5, #0]
 800f7d6:	461a      	mov	r2, r3
 800f7d8:	f7f2 fb47 	bl	8001e6a <_read>
 800f7dc:	1c43      	adds	r3, r0, #1
 800f7de:	d102      	bne.n	800f7e6 <_read_r+0x1e>
 800f7e0:	682b      	ldr	r3, [r5, #0]
 800f7e2:	b103      	cbz	r3, 800f7e6 <_read_r+0x1e>
 800f7e4:	6023      	str	r3, [r4, #0]
 800f7e6:	bd38      	pop	{r3, r4, r5, pc}
 800f7e8:	20000ab4 	.word	0x20000ab4

0800f7ec <_write_r>:
 800f7ec:	b538      	push	{r3, r4, r5, lr}
 800f7ee:	4d07      	ldr	r5, [pc, #28]	@ (800f80c <_write_r+0x20>)
 800f7f0:	4604      	mov	r4, r0
 800f7f2:	4608      	mov	r0, r1
 800f7f4:	4611      	mov	r1, r2
 800f7f6:	2200      	movs	r2, #0
 800f7f8:	602a      	str	r2, [r5, #0]
 800f7fa:	461a      	mov	r2, r3
 800f7fc:	f7f2 fb52 	bl	8001ea4 <_write>
 800f800:	1c43      	adds	r3, r0, #1
 800f802:	d102      	bne.n	800f80a <_write_r+0x1e>
 800f804:	682b      	ldr	r3, [r5, #0]
 800f806:	b103      	cbz	r3, 800f80a <_write_r+0x1e>
 800f808:	6023      	str	r3, [r4, #0]
 800f80a:	bd38      	pop	{r3, r4, r5, pc}
 800f80c:	20000ab4 	.word	0x20000ab4

0800f810 <__errno>:
 800f810:	4b01      	ldr	r3, [pc, #4]	@ (800f818 <__errno+0x8>)
 800f812:	6818      	ldr	r0, [r3, #0]
 800f814:	4770      	bx	lr
 800f816:	bf00      	nop
 800f818:	20000208 	.word	0x20000208

0800f81c <__libc_init_array>:
 800f81c:	b570      	push	{r4, r5, r6, lr}
 800f81e:	4d0d      	ldr	r5, [pc, #52]	@ (800f854 <__libc_init_array+0x38>)
 800f820:	4c0d      	ldr	r4, [pc, #52]	@ (800f858 <__libc_init_array+0x3c>)
 800f822:	1b64      	subs	r4, r4, r5
 800f824:	10a4      	asrs	r4, r4, #2
 800f826:	2600      	movs	r6, #0
 800f828:	42a6      	cmp	r6, r4
 800f82a:	d109      	bne.n	800f840 <__libc_init_array+0x24>
 800f82c:	4d0b      	ldr	r5, [pc, #44]	@ (800f85c <__libc_init_array+0x40>)
 800f82e:	4c0c      	ldr	r4, [pc, #48]	@ (800f860 <__libc_init_array+0x44>)
 800f830:	f002 fe90 	bl	8012554 <_init>
 800f834:	1b64      	subs	r4, r4, r5
 800f836:	10a4      	asrs	r4, r4, #2
 800f838:	2600      	movs	r6, #0
 800f83a:	42a6      	cmp	r6, r4
 800f83c:	d105      	bne.n	800f84a <__libc_init_array+0x2e>
 800f83e:	bd70      	pop	{r4, r5, r6, pc}
 800f840:	f855 3b04 	ldr.w	r3, [r5], #4
 800f844:	4798      	blx	r3
 800f846:	3601      	adds	r6, #1
 800f848:	e7ee      	b.n	800f828 <__libc_init_array+0xc>
 800f84a:	f855 3b04 	ldr.w	r3, [r5], #4
 800f84e:	4798      	blx	r3
 800f850:	3601      	adds	r6, #1
 800f852:	e7f2      	b.n	800f83a <__libc_init_array+0x1e>
 800f854:	08012b30 	.word	0x08012b30
 800f858:	08012b30 	.word	0x08012b30
 800f85c:	08012b30 	.word	0x08012b30
 800f860:	08012b34 	.word	0x08012b34

0800f864 <__retarget_lock_init_recursive>:
 800f864:	4770      	bx	lr

0800f866 <__retarget_lock_acquire_recursive>:
 800f866:	4770      	bx	lr

0800f868 <__retarget_lock_release_recursive>:
 800f868:	4770      	bx	lr

0800f86a <memcpy>:
 800f86a:	440a      	add	r2, r1
 800f86c:	4291      	cmp	r1, r2
 800f86e:	f100 33ff 	add.w	r3, r0, #4294967295
 800f872:	d100      	bne.n	800f876 <memcpy+0xc>
 800f874:	4770      	bx	lr
 800f876:	b510      	push	{r4, lr}
 800f878:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f87c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f880:	4291      	cmp	r1, r2
 800f882:	d1f9      	bne.n	800f878 <memcpy+0xe>
 800f884:	bd10      	pop	{r4, pc}
	...

0800f888 <nan>:
 800f888:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800f890 <nan+0x8>
 800f88c:	4770      	bx	lr
 800f88e:	bf00      	nop
 800f890:	00000000 	.word	0x00000000
 800f894:	7ff80000 	.word	0x7ff80000

0800f898 <nanf>:
 800f898:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800f8a0 <nanf+0x8>
 800f89c:	4770      	bx	lr
 800f89e:	bf00      	nop
 800f8a0:	7fc00000 	.word	0x7fc00000

0800f8a4 <quorem>:
 800f8a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8a8:	6903      	ldr	r3, [r0, #16]
 800f8aa:	690c      	ldr	r4, [r1, #16]
 800f8ac:	42a3      	cmp	r3, r4
 800f8ae:	4607      	mov	r7, r0
 800f8b0:	db7e      	blt.n	800f9b0 <quorem+0x10c>
 800f8b2:	3c01      	subs	r4, #1
 800f8b4:	f101 0814 	add.w	r8, r1, #20
 800f8b8:	00a3      	lsls	r3, r4, #2
 800f8ba:	f100 0514 	add.w	r5, r0, #20
 800f8be:	9300      	str	r3, [sp, #0]
 800f8c0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f8c4:	9301      	str	r3, [sp, #4]
 800f8c6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f8ca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f8ce:	3301      	adds	r3, #1
 800f8d0:	429a      	cmp	r2, r3
 800f8d2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f8d6:	fbb2 f6f3 	udiv	r6, r2, r3
 800f8da:	d32e      	bcc.n	800f93a <quorem+0x96>
 800f8dc:	f04f 0a00 	mov.w	sl, #0
 800f8e0:	46c4      	mov	ip, r8
 800f8e2:	46ae      	mov	lr, r5
 800f8e4:	46d3      	mov	fp, sl
 800f8e6:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f8ea:	b298      	uxth	r0, r3
 800f8ec:	fb06 a000 	mla	r0, r6, r0, sl
 800f8f0:	0c02      	lsrs	r2, r0, #16
 800f8f2:	0c1b      	lsrs	r3, r3, #16
 800f8f4:	fb06 2303 	mla	r3, r6, r3, r2
 800f8f8:	f8de 2000 	ldr.w	r2, [lr]
 800f8fc:	b280      	uxth	r0, r0
 800f8fe:	b292      	uxth	r2, r2
 800f900:	1a12      	subs	r2, r2, r0
 800f902:	445a      	add	r2, fp
 800f904:	f8de 0000 	ldr.w	r0, [lr]
 800f908:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f90c:	b29b      	uxth	r3, r3
 800f90e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800f912:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800f916:	b292      	uxth	r2, r2
 800f918:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800f91c:	45e1      	cmp	r9, ip
 800f91e:	f84e 2b04 	str.w	r2, [lr], #4
 800f922:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800f926:	d2de      	bcs.n	800f8e6 <quorem+0x42>
 800f928:	9b00      	ldr	r3, [sp, #0]
 800f92a:	58eb      	ldr	r3, [r5, r3]
 800f92c:	b92b      	cbnz	r3, 800f93a <quorem+0x96>
 800f92e:	9b01      	ldr	r3, [sp, #4]
 800f930:	3b04      	subs	r3, #4
 800f932:	429d      	cmp	r5, r3
 800f934:	461a      	mov	r2, r3
 800f936:	d32f      	bcc.n	800f998 <quorem+0xf4>
 800f938:	613c      	str	r4, [r7, #16]
 800f93a:	4638      	mov	r0, r7
 800f93c:	f001 fd10 	bl	8011360 <__mcmp>
 800f940:	2800      	cmp	r0, #0
 800f942:	db25      	blt.n	800f990 <quorem+0xec>
 800f944:	4629      	mov	r1, r5
 800f946:	2000      	movs	r0, #0
 800f948:	f858 2b04 	ldr.w	r2, [r8], #4
 800f94c:	f8d1 c000 	ldr.w	ip, [r1]
 800f950:	fa1f fe82 	uxth.w	lr, r2
 800f954:	fa1f f38c 	uxth.w	r3, ip
 800f958:	eba3 030e 	sub.w	r3, r3, lr
 800f95c:	4403      	add	r3, r0
 800f95e:	0c12      	lsrs	r2, r2, #16
 800f960:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800f964:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800f968:	b29b      	uxth	r3, r3
 800f96a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f96e:	45c1      	cmp	r9, r8
 800f970:	f841 3b04 	str.w	r3, [r1], #4
 800f974:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f978:	d2e6      	bcs.n	800f948 <quorem+0xa4>
 800f97a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f97e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f982:	b922      	cbnz	r2, 800f98e <quorem+0xea>
 800f984:	3b04      	subs	r3, #4
 800f986:	429d      	cmp	r5, r3
 800f988:	461a      	mov	r2, r3
 800f98a:	d30b      	bcc.n	800f9a4 <quorem+0x100>
 800f98c:	613c      	str	r4, [r7, #16]
 800f98e:	3601      	adds	r6, #1
 800f990:	4630      	mov	r0, r6
 800f992:	b003      	add	sp, #12
 800f994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f998:	6812      	ldr	r2, [r2, #0]
 800f99a:	3b04      	subs	r3, #4
 800f99c:	2a00      	cmp	r2, #0
 800f99e:	d1cb      	bne.n	800f938 <quorem+0x94>
 800f9a0:	3c01      	subs	r4, #1
 800f9a2:	e7c6      	b.n	800f932 <quorem+0x8e>
 800f9a4:	6812      	ldr	r2, [r2, #0]
 800f9a6:	3b04      	subs	r3, #4
 800f9a8:	2a00      	cmp	r2, #0
 800f9aa:	d1ef      	bne.n	800f98c <quorem+0xe8>
 800f9ac:	3c01      	subs	r4, #1
 800f9ae:	e7ea      	b.n	800f986 <quorem+0xe2>
 800f9b0:	2000      	movs	r0, #0
 800f9b2:	e7ee      	b.n	800f992 <quorem+0xee>
 800f9b4:	0000      	movs	r0, r0
	...

0800f9b8 <_dtoa_r>:
 800f9b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9bc:	69c7      	ldr	r7, [r0, #28]
 800f9be:	b099      	sub	sp, #100	@ 0x64
 800f9c0:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f9c4:	ec55 4b10 	vmov	r4, r5, d0
 800f9c8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800f9ca:	9109      	str	r1, [sp, #36]	@ 0x24
 800f9cc:	4683      	mov	fp, r0
 800f9ce:	920e      	str	r2, [sp, #56]	@ 0x38
 800f9d0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f9d2:	b97f      	cbnz	r7, 800f9f4 <_dtoa_r+0x3c>
 800f9d4:	2010      	movs	r0, #16
 800f9d6:	f001 f937 	bl	8010c48 <malloc>
 800f9da:	4602      	mov	r2, r0
 800f9dc:	f8cb 001c 	str.w	r0, [fp, #28]
 800f9e0:	b920      	cbnz	r0, 800f9ec <_dtoa_r+0x34>
 800f9e2:	4ba7      	ldr	r3, [pc, #668]	@ (800fc80 <_dtoa_r+0x2c8>)
 800f9e4:	21ef      	movs	r1, #239	@ 0xef
 800f9e6:	48a7      	ldr	r0, [pc, #668]	@ (800fc84 <_dtoa_r+0x2cc>)
 800f9e8:	f002 f95e 	bl	8011ca8 <__assert_func>
 800f9ec:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800f9f0:	6007      	str	r7, [r0, #0]
 800f9f2:	60c7      	str	r7, [r0, #12]
 800f9f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f9f8:	6819      	ldr	r1, [r3, #0]
 800f9fa:	b159      	cbz	r1, 800fa14 <_dtoa_r+0x5c>
 800f9fc:	685a      	ldr	r2, [r3, #4]
 800f9fe:	604a      	str	r2, [r1, #4]
 800fa00:	2301      	movs	r3, #1
 800fa02:	4093      	lsls	r3, r2
 800fa04:	608b      	str	r3, [r1, #8]
 800fa06:	4658      	mov	r0, fp
 800fa08:	f001 fa26 	bl	8010e58 <_Bfree>
 800fa0c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800fa10:	2200      	movs	r2, #0
 800fa12:	601a      	str	r2, [r3, #0]
 800fa14:	1e2b      	subs	r3, r5, #0
 800fa16:	bfb9      	ittee	lt
 800fa18:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800fa1c:	9303      	strlt	r3, [sp, #12]
 800fa1e:	2300      	movge	r3, #0
 800fa20:	6033      	strge	r3, [r6, #0]
 800fa22:	9f03      	ldr	r7, [sp, #12]
 800fa24:	4b98      	ldr	r3, [pc, #608]	@ (800fc88 <_dtoa_r+0x2d0>)
 800fa26:	bfbc      	itt	lt
 800fa28:	2201      	movlt	r2, #1
 800fa2a:	6032      	strlt	r2, [r6, #0]
 800fa2c:	43bb      	bics	r3, r7
 800fa2e:	d112      	bne.n	800fa56 <_dtoa_r+0x9e>
 800fa30:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800fa32:	f242 730f 	movw	r3, #9999	@ 0x270f
 800fa36:	6013      	str	r3, [r2, #0]
 800fa38:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fa3c:	4323      	orrs	r3, r4
 800fa3e:	f000 854d 	beq.w	80104dc <_dtoa_r+0xb24>
 800fa42:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800fa44:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800fc9c <_dtoa_r+0x2e4>
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	f000 854f 	beq.w	80104ec <_dtoa_r+0xb34>
 800fa4e:	f10a 0303 	add.w	r3, sl, #3
 800fa52:	f000 bd49 	b.w	80104e8 <_dtoa_r+0xb30>
 800fa56:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fa5a:	2200      	movs	r2, #0
 800fa5c:	ec51 0b17 	vmov	r0, r1, d7
 800fa60:	2300      	movs	r3, #0
 800fa62:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800fa66:	f7f1 f857 	bl	8000b18 <__aeabi_dcmpeq>
 800fa6a:	4680      	mov	r8, r0
 800fa6c:	b158      	cbz	r0, 800fa86 <_dtoa_r+0xce>
 800fa6e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800fa70:	2301      	movs	r3, #1
 800fa72:	6013      	str	r3, [r2, #0]
 800fa74:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800fa76:	b113      	cbz	r3, 800fa7e <_dtoa_r+0xc6>
 800fa78:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800fa7a:	4b84      	ldr	r3, [pc, #528]	@ (800fc8c <_dtoa_r+0x2d4>)
 800fa7c:	6013      	str	r3, [r2, #0]
 800fa7e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800fca0 <_dtoa_r+0x2e8>
 800fa82:	f000 bd33 	b.w	80104ec <_dtoa_r+0xb34>
 800fa86:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800fa8a:	aa16      	add	r2, sp, #88	@ 0x58
 800fa8c:	a917      	add	r1, sp, #92	@ 0x5c
 800fa8e:	4658      	mov	r0, fp
 800fa90:	f001 fd86 	bl	80115a0 <__d2b>
 800fa94:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800fa98:	4681      	mov	r9, r0
 800fa9a:	2e00      	cmp	r6, #0
 800fa9c:	d077      	beq.n	800fb8e <_dtoa_r+0x1d6>
 800fa9e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800faa0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800faa4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800faa8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800faac:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800fab0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800fab4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800fab8:	4619      	mov	r1, r3
 800faba:	2200      	movs	r2, #0
 800fabc:	4b74      	ldr	r3, [pc, #464]	@ (800fc90 <_dtoa_r+0x2d8>)
 800fabe:	f7f0 fc0b 	bl	80002d8 <__aeabi_dsub>
 800fac2:	a369      	add	r3, pc, #420	@ (adr r3, 800fc68 <_dtoa_r+0x2b0>)
 800fac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fac8:	f7f0 fdbe 	bl	8000648 <__aeabi_dmul>
 800facc:	a368      	add	r3, pc, #416	@ (adr r3, 800fc70 <_dtoa_r+0x2b8>)
 800face:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fad2:	f7f0 fc03 	bl	80002dc <__adddf3>
 800fad6:	4604      	mov	r4, r0
 800fad8:	4630      	mov	r0, r6
 800fada:	460d      	mov	r5, r1
 800fadc:	f7f0 fd4a 	bl	8000574 <__aeabi_i2d>
 800fae0:	a365      	add	r3, pc, #404	@ (adr r3, 800fc78 <_dtoa_r+0x2c0>)
 800fae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fae6:	f7f0 fdaf 	bl	8000648 <__aeabi_dmul>
 800faea:	4602      	mov	r2, r0
 800faec:	460b      	mov	r3, r1
 800faee:	4620      	mov	r0, r4
 800faf0:	4629      	mov	r1, r5
 800faf2:	f7f0 fbf3 	bl	80002dc <__adddf3>
 800faf6:	4604      	mov	r4, r0
 800faf8:	460d      	mov	r5, r1
 800fafa:	f7f1 f855 	bl	8000ba8 <__aeabi_d2iz>
 800fafe:	2200      	movs	r2, #0
 800fb00:	4607      	mov	r7, r0
 800fb02:	2300      	movs	r3, #0
 800fb04:	4620      	mov	r0, r4
 800fb06:	4629      	mov	r1, r5
 800fb08:	f7f1 f810 	bl	8000b2c <__aeabi_dcmplt>
 800fb0c:	b140      	cbz	r0, 800fb20 <_dtoa_r+0x168>
 800fb0e:	4638      	mov	r0, r7
 800fb10:	f7f0 fd30 	bl	8000574 <__aeabi_i2d>
 800fb14:	4622      	mov	r2, r4
 800fb16:	462b      	mov	r3, r5
 800fb18:	f7f0 fffe 	bl	8000b18 <__aeabi_dcmpeq>
 800fb1c:	b900      	cbnz	r0, 800fb20 <_dtoa_r+0x168>
 800fb1e:	3f01      	subs	r7, #1
 800fb20:	2f16      	cmp	r7, #22
 800fb22:	d851      	bhi.n	800fbc8 <_dtoa_r+0x210>
 800fb24:	4b5b      	ldr	r3, [pc, #364]	@ (800fc94 <_dtoa_r+0x2dc>)
 800fb26:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800fb2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fb32:	f7f0 fffb 	bl	8000b2c <__aeabi_dcmplt>
 800fb36:	2800      	cmp	r0, #0
 800fb38:	d048      	beq.n	800fbcc <_dtoa_r+0x214>
 800fb3a:	3f01      	subs	r7, #1
 800fb3c:	2300      	movs	r3, #0
 800fb3e:	9312      	str	r3, [sp, #72]	@ 0x48
 800fb40:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800fb42:	1b9b      	subs	r3, r3, r6
 800fb44:	1e5a      	subs	r2, r3, #1
 800fb46:	bf44      	itt	mi
 800fb48:	f1c3 0801 	rsbmi	r8, r3, #1
 800fb4c:	2300      	movmi	r3, #0
 800fb4e:	9208      	str	r2, [sp, #32]
 800fb50:	bf54      	ite	pl
 800fb52:	f04f 0800 	movpl.w	r8, #0
 800fb56:	9308      	strmi	r3, [sp, #32]
 800fb58:	2f00      	cmp	r7, #0
 800fb5a:	db39      	blt.n	800fbd0 <_dtoa_r+0x218>
 800fb5c:	9b08      	ldr	r3, [sp, #32]
 800fb5e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800fb60:	443b      	add	r3, r7
 800fb62:	9308      	str	r3, [sp, #32]
 800fb64:	2300      	movs	r3, #0
 800fb66:	930a      	str	r3, [sp, #40]	@ 0x28
 800fb68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fb6a:	2b09      	cmp	r3, #9
 800fb6c:	d864      	bhi.n	800fc38 <_dtoa_r+0x280>
 800fb6e:	2b05      	cmp	r3, #5
 800fb70:	bfc4      	itt	gt
 800fb72:	3b04      	subgt	r3, #4
 800fb74:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800fb76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fb78:	f1a3 0302 	sub.w	r3, r3, #2
 800fb7c:	bfcc      	ite	gt
 800fb7e:	2400      	movgt	r4, #0
 800fb80:	2401      	movle	r4, #1
 800fb82:	2b03      	cmp	r3, #3
 800fb84:	d863      	bhi.n	800fc4e <_dtoa_r+0x296>
 800fb86:	e8df f003 	tbb	[pc, r3]
 800fb8a:	372a      	.short	0x372a
 800fb8c:	5535      	.short	0x5535
 800fb8e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800fb92:	441e      	add	r6, r3
 800fb94:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800fb98:	2b20      	cmp	r3, #32
 800fb9a:	bfc1      	itttt	gt
 800fb9c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800fba0:	409f      	lslgt	r7, r3
 800fba2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800fba6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800fbaa:	bfd6      	itet	le
 800fbac:	f1c3 0320 	rsble	r3, r3, #32
 800fbb0:	ea47 0003 	orrgt.w	r0, r7, r3
 800fbb4:	fa04 f003 	lslle.w	r0, r4, r3
 800fbb8:	f7f0 fccc 	bl	8000554 <__aeabi_ui2d>
 800fbbc:	2201      	movs	r2, #1
 800fbbe:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800fbc2:	3e01      	subs	r6, #1
 800fbc4:	9214      	str	r2, [sp, #80]	@ 0x50
 800fbc6:	e777      	b.n	800fab8 <_dtoa_r+0x100>
 800fbc8:	2301      	movs	r3, #1
 800fbca:	e7b8      	b.n	800fb3e <_dtoa_r+0x186>
 800fbcc:	9012      	str	r0, [sp, #72]	@ 0x48
 800fbce:	e7b7      	b.n	800fb40 <_dtoa_r+0x188>
 800fbd0:	427b      	negs	r3, r7
 800fbd2:	930a      	str	r3, [sp, #40]	@ 0x28
 800fbd4:	2300      	movs	r3, #0
 800fbd6:	eba8 0807 	sub.w	r8, r8, r7
 800fbda:	930f      	str	r3, [sp, #60]	@ 0x3c
 800fbdc:	e7c4      	b.n	800fb68 <_dtoa_r+0x1b0>
 800fbde:	2300      	movs	r3, #0
 800fbe0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fbe2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	dc35      	bgt.n	800fc54 <_dtoa_r+0x29c>
 800fbe8:	2301      	movs	r3, #1
 800fbea:	9300      	str	r3, [sp, #0]
 800fbec:	9307      	str	r3, [sp, #28]
 800fbee:	461a      	mov	r2, r3
 800fbf0:	920e      	str	r2, [sp, #56]	@ 0x38
 800fbf2:	e00b      	b.n	800fc0c <_dtoa_r+0x254>
 800fbf4:	2301      	movs	r3, #1
 800fbf6:	e7f3      	b.n	800fbe0 <_dtoa_r+0x228>
 800fbf8:	2300      	movs	r3, #0
 800fbfa:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fbfc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fbfe:	18fb      	adds	r3, r7, r3
 800fc00:	9300      	str	r3, [sp, #0]
 800fc02:	3301      	adds	r3, #1
 800fc04:	2b01      	cmp	r3, #1
 800fc06:	9307      	str	r3, [sp, #28]
 800fc08:	bfb8      	it	lt
 800fc0a:	2301      	movlt	r3, #1
 800fc0c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800fc10:	2100      	movs	r1, #0
 800fc12:	2204      	movs	r2, #4
 800fc14:	f102 0514 	add.w	r5, r2, #20
 800fc18:	429d      	cmp	r5, r3
 800fc1a:	d91f      	bls.n	800fc5c <_dtoa_r+0x2a4>
 800fc1c:	6041      	str	r1, [r0, #4]
 800fc1e:	4658      	mov	r0, fp
 800fc20:	f001 f8da 	bl	8010dd8 <_Balloc>
 800fc24:	4682      	mov	sl, r0
 800fc26:	2800      	cmp	r0, #0
 800fc28:	d13c      	bne.n	800fca4 <_dtoa_r+0x2ec>
 800fc2a:	4b1b      	ldr	r3, [pc, #108]	@ (800fc98 <_dtoa_r+0x2e0>)
 800fc2c:	4602      	mov	r2, r0
 800fc2e:	f240 11af 	movw	r1, #431	@ 0x1af
 800fc32:	e6d8      	b.n	800f9e6 <_dtoa_r+0x2e>
 800fc34:	2301      	movs	r3, #1
 800fc36:	e7e0      	b.n	800fbfa <_dtoa_r+0x242>
 800fc38:	2401      	movs	r4, #1
 800fc3a:	2300      	movs	r3, #0
 800fc3c:	9309      	str	r3, [sp, #36]	@ 0x24
 800fc3e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800fc40:	f04f 33ff 	mov.w	r3, #4294967295
 800fc44:	9300      	str	r3, [sp, #0]
 800fc46:	9307      	str	r3, [sp, #28]
 800fc48:	2200      	movs	r2, #0
 800fc4a:	2312      	movs	r3, #18
 800fc4c:	e7d0      	b.n	800fbf0 <_dtoa_r+0x238>
 800fc4e:	2301      	movs	r3, #1
 800fc50:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fc52:	e7f5      	b.n	800fc40 <_dtoa_r+0x288>
 800fc54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fc56:	9300      	str	r3, [sp, #0]
 800fc58:	9307      	str	r3, [sp, #28]
 800fc5a:	e7d7      	b.n	800fc0c <_dtoa_r+0x254>
 800fc5c:	3101      	adds	r1, #1
 800fc5e:	0052      	lsls	r2, r2, #1
 800fc60:	e7d8      	b.n	800fc14 <_dtoa_r+0x25c>
 800fc62:	bf00      	nop
 800fc64:	f3af 8000 	nop.w
 800fc68:	636f4361 	.word	0x636f4361
 800fc6c:	3fd287a7 	.word	0x3fd287a7
 800fc70:	8b60c8b3 	.word	0x8b60c8b3
 800fc74:	3fc68a28 	.word	0x3fc68a28
 800fc78:	509f79fb 	.word	0x509f79fb
 800fc7c:	3fd34413 	.word	0x3fd34413
 800fc80:	0801278e 	.word	0x0801278e
 800fc84:	080127a5 	.word	0x080127a5
 800fc88:	7ff00000 	.word	0x7ff00000
 800fc8c:	08012751 	.word	0x08012751
 800fc90:	3ff80000 	.word	0x3ff80000
 800fc94:	08012900 	.word	0x08012900
 800fc98:	080127fd 	.word	0x080127fd
 800fc9c:	0801278a 	.word	0x0801278a
 800fca0:	08012750 	.word	0x08012750
 800fca4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800fca8:	6018      	str	r0, [r3, #0]
 800fcaa:	9b07      	ldr	r3, [sp, #28]
 800fcac:	2b0e      	cmp	r3, #14
 800fcae:	f200 80a4 	bhi.w	800fdfa <_dtoa_r+0x442>
 800fcb2:	2c00      	cmp	r4, #0
 800fcb4:	f000 80a1 	beq.w	800fdfa <_dtoa_r+0x442>
 800fcb8:	2f00      	cmp	r7, #0
 800fcba:	dd33      	ble.n	800fd24 <_dtoa_r+0x36c>
 800fcbc:	4bad      	ldr	r3, [pc, #692]	@ (800ff74 <_dtoa_r+0x5bc>)
 800fcbe:	f007 020f 	and.w	r2, r7, #15
 800fcc2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fcc6:	ed93 7b00 	vldr	d7, [r3]
 800fcca:	05f8      	lsls	r0, r7, #23
 800fccc:	ed8d 7b04 	vstr	d7, [sp, #16]
 800fcd0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800fcd4:	d516      	bpl.n	800fd04 <_dtoa_r+0x34c>
 800fcd6:	4ba8      	ldr	r3, [pc, #672]	@ (800ff78 <_dtoa_r+0x5c0>)
 800fcd8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fcdc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800fce0:	f7f0 fddc 	bl	800089c <__aeabi_ddiv>
 800fce4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fce8:	f004 040f 	and.w	r4, r4, #15
 800fcec:	2603      	movs	r6, #3
 800fcee:	4da2      	ldr	r5, [pc, #648]	@ (800ff78 <_dtoa_r+0x5c0>)
 800fcf0:	b954      	cbnz	r4, 800fd08 <_dtoa_r+0x350>
 800fcf2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fcf6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fcfa:	f7f0 fdcf 	bl	800089c <__aeabi_ddiv>
 800fcfe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fd02:	e028      	b.n	800fd56 <_dtoa_r+0x39e>
 800fd04:	2602      	movs	r6, #2
 800fd06:	e7f2      	b.n	800fcee <_dtoa_r+0x336>
 800fd08:	07e1      	lsls	r1, r4, #31
 800fd0a:	d508      	bpl.n	800fd1e <_dtoa_r+0x366>
 800fd0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fd10:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fd14:	f7f0 fc98 	bl	8000648 <__aeabi_dmul>
 800fd18:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fd1c:	3601      	adds	r6, #1
 800fd1e:	1064      	asrs	r4, r4, #1
 800fd20:	3508      	adds	r5, #8
 800fd22:	e7e5      	b.n	800fcf0 <_dtoa_r+0x338>
 800fd24:	f000 80d2 	beq.w	800fecc <_dtoa_r+0x514>
 800fd28:	427c      	negs	r4, r7
 800fd2a:	4b92      	ldr	r3, [pc, #584]	@ (800ff74 <_dtoa_r+0x5bc>)
 800fd2c:	4d92      	ldr	r5, [pc, #584]	@ (800ff78 <_dtoa_r+0x5c0>)
 800fd2e:	f004 020f 	and.w	r2, r4, #15
 800fd32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fd36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd3a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fd3e:	f7f0 fc83 	bl	8000648 <__aeabi_dmul>
 800fd42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fd46:	1124      	asrs	r4, r4, #4
 800fd48:	2300      	movs	r3, #0
 800fd4a:	2602      	movs	r6, #2
 800fd4c:	2c00      	cmp	r4, #0
 800fd4e:	f040 80b2 	bne.w	800feb6 <_dtoa_r+0x4fe>
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d1d3      	bne.n	800fcfe <_dtoa_r+0x346>
 800fd56:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800fd58:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	f000 80b7 	beq.w	800fed0 <_dtoa_r+0x518>
 800fd62:	4b86      	ldr	r3, [pc, #536]	@ (800ff7c <_dtoa_r+0x5c4>)
 800fd64:	2200      	movs	r2, #0
 800fd66:	4620      	mov	r0, r4
 800fd68:	4629      	mov	r1, r5
 800fd6a:	f7f0 fedf 	bl	8000b2c <__aeabi_dcmplt>
 800fd6e:	2800      	cmp	r0, #0
 800fd70:	f000 80ae 	beq.w	800fed0 <_dtoa_r+0x518>
 800fd74:	9b07      	ldr	r3, [sp, #28]
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	f000 80aa 	beq.w	800fed0 <_dtoa_r+0x518>
 800fd7c:	9b00      	ldr	r3, [sp, #0]
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	dd37      	ble.n	800fdf2 <_dtoa_r+0x43a>
 800fd82:	1e7b      	subs	r3, r7, #1
 800fd84:	9304      	str	r3, [sp, #16]
 800fd86:	4620      	mov	r0, r4
 800fd88:	4b7d      	ldr	r3, [pc, #500]	@ (800ff80 <_dtoa_r+0x5c8>)
 800fd8a:	2200      	movs	r2, #0
 800fd8c:	4629      	mov	r1, r5
 800fd8e:	f7f0 fc5b 	bl	8000648 <__aeabi_dmul>
 800fd92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fd96:	9c00      	ldr	r4, [sp, #0]
 800fd98:	3601      	adds	r6, #1
 800fd9a:	4630      	mov	r0, r6
 800fd9c:	f7f0 fbea 	bl	8000574 <__aeabi_i2d>
 800fda0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fda4:	f7f0 fc50 	bl	8000648 <__aeabi_dmul>
 800fda8:	4b76      	ldr	r3, [pc, #472]	@ (800ff84 <_dtoa_r+0x5cc>)
 800fdaa:	2200      	movs	r2, #0
 800fdac:	f7f0 fa96 	bl	80002dc <__adddf3>
 800fdb0:	4605      	mov	r5, r0
 800fdb2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800fdb6:	2c00      	cmp	r4, #0
 800fdb8:	f040 808d 	bne.w	800fed6 <_dtoa_r+0x51e>
 800fdbc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fdc0:	4b71      	ldr	r3, [pc, #452]	@ (800ff88 <_dtoa_r+0x5d0>)
 800fdc2:	2200      	movs	r2, #0
 800fdc4:	f7f0 fa88 	bl	80002d8 <__aeabi_dsub>
 800fdc8:	4602      	mov	r2, r0
 800fdca:	460b      	mov	r3, r1
 800fdcc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800fdd0:	462a      	mov	r2, r5
 800fdd2:	4633      	mov	r3, r6
 800fdd4:	f7f0 fec8 	bl	8000b68 <__aeabi_dcmpgt>
 800fdd8:	2800      	cmp	r0, #0
 800fdda:	f040 828b 	bne.w	80102f4 <_dtoa_r+0x93c>
 800fdde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fde2:	462a      	mov	r2, r5
 800fde4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800fde8:	f7f0 fea0 	bl	8000b2c <__aeabi_dcmplt>
 800fdec:	2800      	cmp	r0, #0
 800fdee:	f040 8128 	bne.w	8010042 <_dtoa_r+0x68a>
 800fdf2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800fdf6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800fdfa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	f2c0 815a 	blt.w	80100b6 <_dtoa_r+0x6fe>
 800fe02:	2f0e      	cmp	r7, #14
 800fe04:	f300 8157 	bgt.w	80100b6 <_dtoa_r+0x6fe>
 800fe08:	4b5a      	ldr	r3, [pc, #360]	@ (800ff74 <_dtoa_r+0x5bc>)
 800fe0a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800fe0e:	ed93 7b00 	vldr	d7, [r3]
 800fe12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	ed8d 7b00 	vstr	d7, [sp]
 800fe1a:	da03      	bge.n	800fe24 <_dtoa_r+0x46c>
 800fe1c:	9b07      	ldr	r3, [sp, #28]
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	f340 8101 	ble.w	8010026 <_dtoa_r+0x66e>
 800fe24:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800fe28:	4656      	mov	r6, sl
 800fe2a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fe2e:	4620      	mov	r0, r4
 800fe30:	4629      	mov	r1, r5
 800fe32:	f7f0 fd33 	bl	800089c <__aeabi_ddiv>
 800fe36:	f7f0 feb7 	bl	8000ba8 <__aeabi_d2iz>
 800fe3a:	4680      	mov	r8, r0
 800fe3c:	f7f0 fb9a 	bl	8000574 <__aeabi_i2d>
 800fe40:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fe44:	f7f0 fc00 	bl	8000648 <__aeabi_dmul>
 800fe48:	4602      	mov	r2, r0
 800fe4a:	460b      	mov	r3, r1
 800fe4c:	4620      	mov	r0, r4
 800fe4e:	4629      	mov	r1, r5
 800fe50:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800fe54:	f7f0 fa40 	bl	80002d8 <__aeabi_dsub>
 800fe58:	f806 4b01 	strb.w	r4, [r6], #1
 800fe5c:	9d07      	ldr	r5, [sp, #28]
 800fe5e:	eba6 040a 	sub.w	r4, r6, sl
 800fe62:	42a5      	cmp	r5, r4
 800fe64:	4602      	mov	r2, r0
 800fe66:	460b      	mov	r3, r1
 800fe68:	f040 8117 	bne.w	801009a <_dtoa_r+0x6e2>
 800fe6c:	f7f0 fa36 	bl	80002dc <__adddf3>
 800fe70:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fe74:	4604      	mov	r4, r0
 800fe76:	460d      	mov	r5, r1
 800fe78:	f7f0 fe76 	bl	8000b68 <__aeabi_dcmpgt>
 800fe7c:	2800      	cmp	r0, #0
 800fe7e:	f040 80f9 	bne.w	8010074 <_dtoa_r+0x6bc>
 800fe82:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fe86:	4620      	mov	r0, r4
 800fe88:	4629      	mov	r1, r5
 800fe8a:	f7f0 fe45 	bl	8000b18 <__aeabi_dcmpeq>
 800fe8e:	b118      	cbz	r0, 800fe98 <_dtoa_r+0x4e0>
 800fe90:	f018 0f01 	tst.w	r8, #1
 800fe94:	f040 80ee 	bne.w	8010074 <_dtoa_r+0x6bc>
 800fe98:	4649      	mov	r1, r9
 800fe9a:	4658      	mov	r0, fp
 800fe9c:	f000 ffdc 	bl	8010e58 <_Bfree>
 800fea0:	2300      	movs	r3, #0
 800fea2:	7033      	strb	r3, [r6, #0]
 800fea4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800fea6:	3701      	adds	r7, #1
 800fea8:	601f      	str	r7, [r3, #0]
 800feaa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800feac:	2b00      	cmp	r3, #0
 800feae:	f000 831d 	beq.w	80104ec <_dtoa_r+0xb34>
 800feb2:	601e      	str	r6, [r3, #0]
 800feb4:	e31a      	b.n	80104ec <_dtoa_r+0xb34>
 800feb6:	07e2      	lsls	r2, r4, #31
 800feb8:	d505      	bpl.n	800fec6 <_dtoa_r+0x50e>
 800feba:	e9d5 2300 	ldrd	r2, r3, [r5]
 800febe:	f7f0 fbc3 	bl	8000648 <__aeabi_dmul>
 800fec2:	3601      	adds	r6, #1
 800fec4:	2301      	movs	r3, #1
 800fec6:	1064      	asrs	r4, r4, #1
 800fec8:	3508      	adds	r5, #8
 800feca:	e73f      	b.n	800fd4c <_dtoa_r+0x394>
 800fecc:	2602      	movs	r6, #2
 800fece:	e742      	b.n	800fd56 <_dtoa_r+0x39e>
 800fed0:	9c07      	ldr	r4, [sp, #28]
 800fed2:	9704      	str	r7, [sp, #16]
 800fed4:	e761      	b.n	800fd9a <_dtoa_r+0x3e2>
 800fed6:	4b27      	ldr	r3, [pc, #156]	@ (800ff74 <_dtoa_r+0x5bc>)
 800fed8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800feda:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800fede:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800fee2:	4454      	add	r4, sl
 800fee4:	2900      	cmp	r1, #0
 800fee6:	d053      	beq.n	800ff90 <_dtoa_r+0x5d8>
 800fee8:	4928      	ldr	r1, [pc, #160]	@ (800ff8c <_dtoa_r+0x5d4>)
 800feea:	2000      	movs	r0, #0
 800feec:	f7f0 fcd6 	bl	800089c <__aeabi_ddiv>
 800fef0:	4633      	mov	r3, r6
 800fef2:	462a      	mov	r2, r5
 800fef4:	f7f0 f9f0 	bl	80002d8 <__aeabi_dsub>
 800fef8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800fefc:	4656      	mov	r6, sl
 800fefe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ff02:	f7f0 fe51 	bl	8000ba8 <__aeabi_d2iz>
 800ff06:	4605      	mov	r5, r0
 800ff08:	f7f0 fb34 	bl	8000574 <__aeabi_i2d>
 800ff0c:	4602      	mov	r2, r0
 800ff0e:	460b      	mov	r3, r1
 800ff10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ff14:	f7f0 f9e0 	bl	80002d8 <__aeabi_dsub>
 800ff18:	3530      	adds	r5, #48	@ 0x30
 800ff1a:	4602      	mov	r2, r0
 800ff1c:	460b      	mov	r3, r1
 800ff1e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ff22:	f806 5b01 	strb.w	r5, [r6], #1
 800ff26:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ff2a:	f7f0 fdff 	bl	8000b2c <__aeabi_dcmplt>
 800ff2e:	2800      	cmp	r0, #0
 800ff30:	d171      	bne.n	8010016 <_dtoa_r+0x65e>
 800ff32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ff36:	4911      	ldr	r1, [pc, #68]	@ (800ff7c <_dtoa_r+0x5c4>)
 800ff38:	2000      	movs	r0, #0
 800ff3a:	f7f0 f9cd 	bl	80002d8 <__aeabi_dsub>
 800ff3e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ff42:	f7f0 fdf3 	bl	8000b2c <__aeabi_dcmplt>
 800ff46:	2800      	cmp	r0, #0
 800ff48:	f040 8095 	bne.w	8010076 <_dtoa_r+0x6be>
 800ff4c:	42a6      	cmp	r6, r4
 800ff4e:	f43f af50 	beq.w	800fdf2 <_dtoa_r+0x43a>
 800ff52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ff56:	4b0a      	ldr	r3, [pc, #40]	@ (800ff80 <_dtoa_r+0x5c8>)
 800ff58:	2200      	movs	r2, #0
 800ff5a:	f7f0 fb75 	bl	8000648 <__aeabi_dmul>
 800ff5e:	4b08      	ldr	r3, [pc, #32]	@ (800ff80 <_dtoa_r+0x5c8>)
 800ff60:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ff64:	2200      	movs	r2, #0
 800ff66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ff6a:	f7f0 fb6d 	bl	8000648 <__aeabi_dmul>
 800ff6e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ff72:	e7c4      	b.n	800fefe <_dtoa_r+0x546>
 800ff74:	08012900 	.word	0x08012900
 800ff78:	080128d8 	.word	0x080128d8
 800ff7c:	3ff00000 	.word	0x3ff00000
 800ff80:	40240000 	.word	0x40240000
 800ff84:	401c0000 	.word	0x401c0000
 800ff88:	40140000 	.word	0x40140000
 800ff8c:	3fe00000 	.word	0x3fe00000
 800ff90:	4631      	mov	r1, r6
 800ff92:	4628      	mov	r0, r5
 800ff94:	f7f0 fb58 	bl	8000648 <__aeabi_dmul>
 800ff98:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ff9c:	9415      	str	r4, [sp, #84]	@ 0x54
 800ff9e:	4656      	mov	r6, sl
 800ffa0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ffa4:	f7f0 fe00 	bl	8000ba8 <__aeabi_d2iz>
 800ffa8:	4605      	mov	r5, r0
 800ffaa:	f7f0 fae3 	bl	8000574 <__aeabi_i2d>
 800ffae:	4602      	mov	r2, r0
 800ffb0:	460b      	mov	r3, r1
 800ffb2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ffb6:	f7f0 f98f 	bl	80002d8 <__aeabi_dsub>
 800ffba:	3530      	adds	r5, #48	@ 0x30
 800ffbc:	f806 5b01 	strb.w	r5, [r6], #1
 800ffc0:	4602      	mov	r2, r0
 800ffc2:	460b      	mov	r3, r1
 800ffc4:	42a6      	cmp	r6, r4
 800ffc6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ffca:	f04f 0200 	mov.w	r2, #0
 800ffce:	d124      	bne.n	801001a <_dtoa_r+0x662>
 800ffd0:	4bac      	ldr	r3, [pc, #688]	@ (8010284 <_dtoa_r+0x8cc>)
 800ffd2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ffd6:	f7f0 f981 	bl	80002dc <__adddf3>
 800ffda:	4602      	mov	r2, r0
 800ffdc:	460b      	mov	r3, r1
 800ffde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ffe2:	f7f0 fdc1 	bl	8000b68 <__aeabi_dcmpgt>
 800ffe6:	2800      	cmp	r0, #0
 800ffe8:	d145      	bne.n	8010076 <_dtoa_r+0x6be>
 800ffea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ffee:	49a5      	ldr	r1, [pc, #660]	@ (8010284 <_dtoa_r+0x8cc>)
 800fff0:	2000      	movs	r0, #0
 800fff2:	f7f0 f971 	bl	80002d8 <__aeabi_dsub>
 800fff6:	4602      	mov	r2, r0
 800fff8:	460b      	mov	r3, r1
 800fffa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fffe:	f7f0 fd95 	bl	8000b2c <__aeabi_dcmplt>
 8010002:	2800      	cmp	r0, #0
 8010004:	f43f aef5 	beq.w	800fdf2 <_dtoa_r+0x43a>
 8010008:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801000a:	1e73      	subs	r3, r6, #1
 801000c:	9315      	str	r3, [sp, #84]	@ 0x54
 801000e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010012:	2b30      	cmp	r3, #48	@ 0x30
 8010014:	d0f8      	beq.n	8010008 <_dtoa_r+0x650>
 8010016:	9f04      	ldr	r7, [sp, #16]
 8010018:	e73e      	b.n	800fe98 <_dtoa_r+0x4e0>
 801001a:	4b9b      	ldr	r3, [pc, #620]	@ (8010288 <_dtoa_r+0x8d0>)
 801001c:	f7f0 fb14 	bl	8000648 <__aeabi_dmul>
 8010020:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010024:	e7bc      	b.n	800ffa0 <_dtoa_r+0x5e8>
 8010026:	d10c      	bne.n	8010042 <_dtoa_r+0x68a>
 8010028:	4b98      	ldr	r3, [pc, #608]	@ (801028c <_dtoa_r+0x8d4>)
 801002a:	2200      	movs	r2, #0
 801002c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010030:	f7f0 fb0a 	bl	8000648 <__aeabi_dmul>
 8010034:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010038:	f7f0 fd8c 	bl	8000b54 <__aeabi_dcmpge>
 801003c:	2800      	cmp	r0, #0
 801003e:	f000 8157 	beq.w	80102f0 <_dtoa_r+0x938>
 8010042:	2400      	movs	r4, #0
 8010044:	4625      	mov	r5, r4
 8010046:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010048:	43db      	mvns	r3, r3
 801004a:	9304      	str	r3, [sp, #16]
 801004c:	4656      	mov	r6, sl
 801004e:	2700      	movs	r7, #0
 8010050:	4621      	mov	r1, r4
 8010052:	4658      	mov	r0, fp
 8010054:	f000 ff00 	bl	8010e58 <_Bfree>
 8010058:	2d00      	cmp	r5, #0
 801005a:	d0dc      	beq.n	8010016 <_dtoa_r+0x65e>
 801005c:	b12f      	cbz	r7, 801006a <_dtoa_r+0x6b2>
 801005e:	42af      	cmp	r7, r5
 8010060:	d003      	beq.n	801006a <_dtoa_r+0x6b2>
 8010062:	4639      	mov	r1, r7
 8010064:	4658      	mov	r0, fp
 8010066:	f000 fef7 	bl	8010e58 <_Bfree>
 801006a:	4629      	mov	r1, r5
 801006c:	4658      	mov	r0, fp
 801006e:	f000 fef3 	bl	8010e58 <_Bfree>
 8010072:	e7d0      	b.n	8010016 <_dtoa_r+0x65e>
 8010074:	9704      	str	r7, [sp, #16]
 8010076:	4633      	mov	r3, r6
 8010078:	461e      	mov	r6, r3
 801007a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801007e:	2a39      	cmp	r2, #57	@ 0x39
 8010080:	d107      	bne.n	8010092 <_dtoa_r+0x6da>
 8010082:	459a      	cmp	sl, r3
 8010084:	d1f8      	bne.n	8010078 <_dtoa_r+0x6c0>
 8010086:	9a04      	ldr	r2, [sp, #16]
 8010088:	3201      	adds	r2, #1
 801008a:	9204      	str	r2, [sp, #16]
 801008c:	2230      	movs	r2, #48	@ 0x30
 801008e:	f88a 2000 	strb.w	r2, [sl]
 8010092:	781a      	ldrb	r2, [r3, #0]
 8010094:	3201      	adds	r2, #1
 8010096:	701a      	strb	r2, [r3, #0]
 8010098:	e7bd      	b.n	8010016 <_dtoa_r+0x65e>
 801009a:	4b7b      	ldr	r3, [pc, #492]	@ (8010288 <_dtoa_r+0x8d0>)
 801009c:	2200      	movs	r2, #0
 801009e:	f7f0 fad3 	bl	8000648 <__aeabi_dmul>
 80100a2:	2200      	movs	r2, #0
 80100a4:	2300      	movs	r3, #0
 80100a6:	4604      	mov	r4, r0
 80100a8:	460d      	mov	r5, r1
 80100aa:	f7f0 fd35 	bl	8000b18 <__aeabi_dcmpeq>
 80100ae:	2800      	cmp	r0, #0
 80100b0:	f43f aebb 	beq.w	800fe2a <_dtoa_r+0x472>
 80100b4:	e6f0      	b.n	800fe98 <_dtoa_r+0x4e0>
 80100b6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80100b8:	2a00      	cmp	r2, #0
 80100ba:	f000 80db 	beq.w	8010274 <_dtoa_r+0x8bc>
 80100be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80100c0:	2a01      	cmp	r2, #1
 80100c2:	f300 80bf 	bgt.w	8010244 <_dtoa_r+0x88c>
 80100c6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80100c8:	2a00      	cmp	r2, #0
 80100ca:	f000 80b7 	beq.w	801023c <_dtoa_r+0x884>
 80100ce:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80100d2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80100d4:	4646      	mov	r6, r8
 80100d6:	9a08      	ldr	r2, [sp, #32]
 80100d8:	2101      	movs	r1, #1
 80100da:	441a      	add	r2, r3
 80100dc:	4658      	mov	r0, fp
 80100de:	4498      	add	r8, r3
 80100e0:	9208      	str	r2, [sp, #32]
 80100e2:	f000 ffb7 	bl	8011054 <__i2b>
 80100e6:	4605      	mov	r5, r0
 80100e8:	b15e      	cbz	r6, 8010102 <_dtoa_r+0x74a>
 80100ea:	9b08      	ldr	r3, [sp, #32]
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	dd08      	ble.n	8010102 <_dtoa_r+0x74a>
 80100f0:	42b3      	cmp	r3, r6
 80100f2:	9a08      	ldr	r2, [sp, #32]
 80100f4:	bfa8      	it	ge
 80100f6:	4633      	movge	r3, r6
 80100f8:	eba8 0803 	sub.w	r8, r8, r3
 80100fc:	1af6      	subs	r6, r6, r3
 80100fe:	1ad3      	subs	r3, r2, r3
 8010100:	9308      	str	r3, [sp, #32]
 8010102:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010104:	b1f3      	cbz	r3, 8010144 <_dtoa_r+0x78c>
 8010106:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010108:	2b00      	cmp	r3, #0
 801010a:	f000 80b7 	beq.w	801027c <_dtoa_r+0x8c4>
 801010e:	b18c      	cbz	r4, 8010134 <_dtoa_r+0x77c>
 8010110:	4629      	mov	r1, r5
 8010112:	4622      	mov	r2, r4
 8010114:	4658      	mov	r0, fp
 8010116:	f001 f85d 	bl	80111d4 <__pow5mult>
 801011a:	464a      	mov	r2, r9
 801011c:	4601      	mov	r1, r0
 801011e:	4605      	mov	r5, r0
 8010120:	4658      	mov	r0, fp
 8010122:	f000 ffad 	bl	8011080 <__multiply>
 8010126:	4649      	mov	r1, r9
 8010128:	9004      	str	r0, [sp, #16]
 801012a:	4658      	mov	r0, fp
 801012c:	f000 fe94 	bl	8010e58 <_Bfree>
 8010130:	9b04      	ldr	r3, [sp, #16]
 8010132:	4699      	mov	r9, r3
 8010134:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010136:	1b1a      	subs	r2, r3, r4
 8010138:	d004      	beq.n	8010144 <_dtoa_r+0x78c>
 801013a:	4649      	mov	r1, r9
 801013c:	4658      	mov	r0, fp
 801013e:	f001 f849 	bl	80111d4 <__pow5mult>
 8010142:	4681      	mov	r9, r0
 8010144:	2101      	movs	r1, #1
 8010146:	4658      	mov	r0, fp
 8010148:	f000 ff84 	bl	8011054 <__i2b>
 801014c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801014e:	4604      	mov	r4, r0
 8010150:	2b00      	cmp	r3, #0
 8010152:	f000 81cf 	beq.w	80104f4 <_dtoa_r+0xb3c>
 8010156:	461a      	mov	r2, r3
 8010158:	4601      	mov	r1, r0
 801015a:	4658      	mov	r0, fp
 801015c:	f001 f83a 	bl	80111d4 <__pow5mult>
 8010160:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010162:	2b01      	cmp	r3, #1
 8010164:	4604      	mov	r4, r0
 8010166:	f300 8095 	bgt.w	8010294 <_dtoa_r+0x8dc>
 801016a:	9b02      	ldr	r3, [sp, #8]
 801016c:	2b00      	cmp	r3, #0
 801016e:	f040 8087 	bne.w	8010280 <_dtoa_r+0x8c8>
 8010172:	9b03      	ldr	r3, [sp, #12]
 8010174:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010178:	2b00      	cmp	r3, #0
 801017a:	f040 8089 	bne.w	8010290 <_dtoa_r+0x8d8>
 801017e:	9b03      	ldr	r3, [sp, #12]
 8010180:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010184:	0d1b      	lsrs	r3, r3, #20
 8010186:	051b      	lsls	r3, r3, #20
 8010188:	b12b      	cbz	r3, 8010196 <_dtoa_r+0x7de>
 801018a:	9b08      	ldr	r3, [sp, #32]
 801018c:	3301      	adds	r3, #1
 801018e:	9308      	str	r3, [sp, #32]
 8010190:	f108 0801 	add.w	r8, r8, #1
 8010194:	2301      	movs	r3, #1
 8010196:	930a      	str	r3, [sp, #40]	@ 0x28
 8010198:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801019a:	2b00      	cmp	r3, #0
 801019c:	f000 81b0 	beq.w	8010500 <_dtoa_r+0xb48>
 80101a0:	6923      	ldr	r3, [r4, #16]
 80101a2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80101a6:	6918      	ldr	r0, [r3, #16]
 80101a8:	f000 ff08 	bl	8010fbc <__hi0bits>
 80101ac:	f1c0 0020 	rsb	r0, r0, #32
 80101b0:	9b08      	ldr	r3, [sp, #32]
 80101b2:	4418      	add	r0, r3
 80101b4:	f010 001f 	ands.w	r0, r0, #31
 80101b8:	d077      	beq.n	80102aa <_dtoa_r+0x8f2>
 80101ba:	f1c0 0320 	rsb	r3, r0, #32
 80101be:	2b04      	cmp	r3, #4
 80101c0:	dd6b      	ble.n	801029a <_dtoa_r+0x8e2>
 80101c2:	9b08      	ldr	r3, [sp, #32]
 80101c4:	f1c0 001c 	rsb	r0, r0, #28
 80101c8:	4403      	add	r3, r0
 80101ca:	4480      	add	r8, r0
 80101cc:	4406      	add	r6, r0
 80101ce:	9308      	str	r3, [sp, #32]
 80101d0:	f1b8 0f00 	cmp.w	r8, #0
 80101d4:	dd05      	ble.n	80101e2 <_dtoa_r+0x82a>
 80101d6:	4649      	mov	r1, r9
 80101d8:	4642      	mov	r2, r8
 80101da:	4658      	mov	r0, fp
 80101dc:	f001 f854 	bl	8011288 <__lshift>
 80101e0:	4681      	mov	r9, r0
 80101e2:	9b08      	ldr	r3, [sp, #32]
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	dd05      	ble.n	80101f4 <_dtoa_r+0x83c>
 80101e8:	4621      	mov	r1, r4
 80101ea:	461a      	mov	r2, r3
 80101ec:	4658      	mov	r0, fp
 80101ee:	f001 f84b 	bl	8011288 <__lshift>
 80101f2:	4604      	mov	r4, r0
 80101f4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	d059      	beq.n	80102ae <_dtoa_r+0x8f6>
 80101fa:	4621      	mov	r1, r4
 80101fc:	4648      	mov	r0, r9
 80101fe:	f001 f8af 	bl	8011360 <__mcmp>
 8010202:	2800      	cmp	r0, #0
 8010204:	da53      	bge.n	80102ae <_dtoa_r+0x8f6>
 8010206:	1e7b      	subs	r3, r7, #1
 8010208:	9304      	str	r3, [sp, #16]
 801020a:	4649      	mov	r1, r9
 801020c:	2300      	movs	r3, #0
 801020e:	220a      	movs	r2, #10
 8010210:	4658      	mov	r0, fp
 8010212:	f000 fe43 	bl	8010e9c <__multadd>
 8010216:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010218:	4681      	mov	r9, r0
 801021a:	2b00      	cmp	r3, #0
 801021c:	f000 8172 	beq.w	8010504 <_dtoa_r+0xb4c>
 8010220:	2300      	movs	r3, #0
 8010222:	4629      	mov	r1, r5
 8010224:	220a      	movs	r2, #10
 8010226:	4658      	mov	r0, fp
 8010228:	f000 fe38 	bl	8010e9c <__multadd>
 801022c:	9b00      	ldr	r3, [sp, #0]
 801022e:	2b00      	cmp	r3, #0
 8010230:	4605      	mov	r5, r0
 8010232:	dc67      	bgt.n	8010304 <_dtoa_r+0x94c>
 8010234:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010236:	2b02      	cmp	r3, #2
 8010238:	dc41      	bgt.n	80102be <_dtoa_r+0x906>
 801023a:	e063      	b.n	8010304 <_dtoa_r+0x94c>
 801023c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801023e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8010242:	e746      	b.n	80100d2 <_dtoa_r+0x71a>
 8010244:	9b07      	ldr	r3, [sp, #28]
 8010246:	1e5c      	subs	r4, r3, #1
 8010248:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801024a:	42a3      	cmp	r3, r4
 801024c:	bfbf      	itttt	lt
 801024e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8010250:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8010252:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8010254:	1ae3      	sublt	r3, r4, r3
 8010256:	bfb4      	ite	lt
 8010258:	18d2      	addlt	r2, r2, r3
 801025a:	1b1c      	subge	r4, r3, r4
 801025c:	9b07      	ldr	r3, [sp, #28]
 801025e:	bfbc      	itt	lt
 8010260:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8010262:	2400      	movlt	r4, #0
 8010264:	2b00      	cmp	r3, #0
 8010266:	bfb5      	itete	lt
 8010268:	eba8 0603 	sublt.w	r6, r8, r3
 801026c:	9b07      	ldrge	r3, [sp, #28]
 801026e:	2300      	movlt	r3, #0
 8010270:	4646      	movge	r6, r8
 8010272:	e730      	b.n	80100d6 <_dtoa_r+0x71e>
 8010274:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8010276:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8010278:	4646      	mov	r6, r8
 801027a:	e735      	b.n	80100e8 <_dtoa_r+0x730>
 801027c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801027e:	e75c      	b.n	801013a <_dtoa_r+0x782>
 8010280:	2300      	movs	r3, #0
 8010282:	e788      	b.n	8010196 <_dtoa_r+0x7de>
 8010284:	3fe00000 	.word	0x3fe00000
 8010288:	40240000 	.word	0x40240000
 801028c:	40140000 	.word	0x40140000
 8010290:	9b02      	ldr	r3, [sp, #8]
 8010292:	e780      	b.n	8010196 <_dtoa_r+0x7de>
 8010294:	2300      	movs	r3, #0
 8010296:	930a      	str	r3, [sp, #40]	@ 0x28
 8010298:	e782      	b.n	80101a0 <_dtoa_r+0x7e8>
 801029a:	d099      	beq.n	80101d0 <_dtoa_r+0x818>
 801029c:	9a08      	ldr	r2, [sp, #32]
 801029e:	331c      	adds	r3, #28
 80102a0:	441a      	add	r2, r3
 80102a2:	4498      	add	r8, r3
 80102a4:	441e      	add	r6, r3
 80102a6:	9208      	str	r2, [sp, #32]
 80102a8:	e792      	b.n	80101d0 <_dtoa_r+0x818>
 80102aa:	4603      	mov	r3, r0
 80102ac:	e7f6      	b.n	801029c <_dtoa_r+0x8e4>
 80102ae:	9b07      	ldr	r3, [sp, #28]
 80102b0:	9704      	str	r7, [sp, #16]
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	dc20      	bgt.n	80102f8 <_dtoa_r+0x940>
 80102b6:	9300      	str	r3, [sp, #0]
 80102b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80102ba:	2b02      	cmp	r3, #2
 80102bc:	dd1e      	ble.n	80102fc <_dtoa_r+0x944>
 80102be:	9b00      	ldr	r3, [sp, #0]
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	f47f aec0 	bne.w	8010046 <_dtoa_r+0x68e>
 80102c6:	4621      	mov	r1, r4
 80102c8:	2205      	movs	r2, #5
 80102ca:	4658      	mov	r0, fp
 80102cc:	f000 fde6 	bl	8010e9c <__multadd>
 80102d0:	4601      	mov	r1, r0
 80102d2:	4604      	mov	r4, r0
 80102d4:	4648      	mov	r0, r9
 80102d6:	f001 f843 	bl	8011360 <__mcmp>
 80102da:	2800      	cmp	r0, #0
 80102dc:	f77f aeb3 	ble.w	8010046 <_dtoa_r+0x68e>
 80102e0:	4656      	mov	r6, sl
 80102e2:	2331      	movs	r3, #49	@ 0x31
 80102e4:	f806 3b01 	strb.w	r3, [r6], #1
 80102e8:	9b04      	ldr	r3, [sp, #16]
 80102ea:	3301      	adds	r3, #1
 80102ec:	9304      	str	r3, [sp, #16]
 80102ee:	e6ae      	b.n	801004e <_dtoa_r+0x696>
 80102f0:	9c07      	ldr	r4, [sp, #28]
 80102f2:	9704      	str	r7, [sp, #16]
 80102f4:	4625      	mov	r5, r4
 80102f6:	e7f3      	b.n	80102e0 <_dtoa_r+0x928>
 80102f8:	9b07      	ldr	r3, [sp, #28]
 80102fa:	9300      	str	r3, [sp, #0]
 80102fc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80102fe:	2b00      	cmp	r3, #0
 8010300:	f000 8104 	beq.w	801050c <_dtoa_r+0xb54>
 8010304:	2e00      	cmp	r6, #0
 8010306:	dd05      	ble.n	8010314 <_dtoa_r+0x95c>
 8010308:	4629      	mov	r1, r5
 801030a:	4632      	mov	r2, r6
 801030c:	4658      	mov	r0, fp
 801030e:	f000 ffbb 	bl	8011288 <__lshift>
 8010312:	4605      	mov	r5, r0
 8010314:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010316:	2b00      	cmp	r3, #0
 8010318:	d05a      	beq.n	80103d0 <_dtoa_r+0xa18>
 801031a:	6869      	ldr	r1, [r5, #4]
 801031c:	4658      	mov	r0, fp
 801031e:	f000 fd5b 	bl	8010dd8 <_Balloc>
 8010322:	4606      	mov	r6, r0
 8010324:	b928      	cbnz	r0, 8010332 <_dtoa_r+0x97a>
 8010326:	4b84      	ldr	r3, [pc, #528]	@ (8010538 <_dtoa_r+0xb80>)
 8010328:	4602      	mov	r2, r0
 801032a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801032e:	f7ff bb5a 	b.w	800f9e6 <_dtoa_r+0x2e>
 8010332:	692a      	ldr	r2, [r5, #16]
 8010334:	3202      	adds	r2, #2
 8010336:	0092      	lsls	r2, r2, #2
 8010338:	f105 010c 	add.w	r1, r5, #12
 801033c:	300c      	adds	r0, #12
 801033e:	f7ff fa94 	bl	800f86a <memcpy>
 8010342:	2201      	movs	r2, #1
 8010344:	4631      	mov	r1, r6
 8010346:	4658      	mov	r0, fp
 8010348:	f000 ff9e 	bl	8011288 <__lshift>
 801034c:	f10a 0301 	add.w	r3, sl, #1
 8010350:	9307      	str	r3, [sp, #28]
 8010352:	9b00      	ldr	r3, [sp, #0]
 8010354:	4453      	add	r3, sl
 8010356:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010358:	9b02      	ldr	r3, [sp, #8]
 801035a:	f003 0301 	and.w	r3, r3, #1
 801035e:	462f      	mov	r7, r5
 8010360:	930a      	str	r3, [sp, #40]	@ 0x28
 8010362:	4605      	mov	r5, r0
 8010364:	9b07      	ldr	r3, [sp, #28]
 8010366:	4621      	mov	r1, r4
 8010368:	3b01      	subs	r3, #1
 801036a:	4648      	mov	r0, r9
 801036c:	9300      	str	r3, [sp, #0]
 801036e:	f7ff fa99 	bl	800f8a4 <quorem>
 8010372:	4639      	mov	r1, r7
 8010374:	9002      	str	r0, [sp, #8]
 8010376:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801037a:	4648      	mov	r0, r9
 801037c:	f000 fff0 	bl	8011360 <__mcmp>
 8010380:	462a      	mov	r2, r5
 8010382:	9008      	str	r0, [sp, #32]
 8010384:	4621      	mov	r1, r4
 8010386:	4658      	mov	r0, fp
 8010388:	f001 f806 	bl	8011398 <__mdiff>
 801038c:	68c2      	ldr	r2, [r0, #12]
 801038e:	4606      	mov	r6, r0
 8010390:	bb02      	cbnz	r2, 80103d4 <_dtoa_r+0xa1c>
 8010392:	4601      	mov	r1, r0
 8010394:	4648      	mov	r0, r9
 8010396:	f000 ffe3 	bl	8011360 <__mcmp>
 801039a:	4602      	mov	r2, r0
 801039c:	4631      	mov	r1, r6
 801039e:	4658      	mov	r0, fp
 80103a0:	920e      	str	r2, [sp, #56]	@ 0x38
 80103a2:	f000 fd59 	bl	8010e58 <_Bfree>
 80103a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80103a8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80103aa:	9e07      	ldr	r6, [sp, #28]
 80103ac:	ea43 0102 	orr.w	r1, r3, r2
 80103b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80103b2:	4319      	orrs	r1, r3
 80103b4:	d110      	bne.n	80103d8 <_dtoa_r+0xa20>
 80103b6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80103ba:	d029      	beq.n	8010410 <_dtoa_r+0xa58>
 80103bc:	9b08      	ldr	r3, [sp, #32]
 80103be:	2b00      	cmp	r3, #0
 80103c0:	dd02      	ble.n	80103c8 <_dtoa_r+0xa10>
 80103c2:	9b02      	ldr	r3, [sp, #8]
 80103c4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80103c8:	9b00      	ldr	r3, [sp, #0]
 80103ca:	f883 8000 	strb.w	r8, [r3]
 80103ce:	e63f      	b.n	8010050 <_dtoa_r+0x698>
 80103d0:	4628      	mov	r0, r5
 80103d2:	e7bb      	b.n	801034c <_dtoa_r+0x994>
 80103d4:	2201      	movs	r2, #1
 80103d6:	e7e1      	b.n	801039c <_dtoa_r+0x9e4>
 80103d8:	9b08      	ldr	r3, [sp, #32]
 80103da:	2b00      	cmp	r3, #0
 80103dc:	db04      	blt.n	80103e8 <_dtoa_r+0xa30>
 80103de:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80103e0:	430b      	orrs	r3, r1
 80103e2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80103e4:	430b      	orrs	r3, r1
 80103e6:	d120      	bne.n	801042a <_dtoa_r+0xa72>
 80103e8:	2a00      	cmp	r2, #0
 80103ea:	dded      	ble.n	80103c8 <_dtoa_r+0xa10>
 80103ec:	4649      	mov	r1, r9
 80103ee:	2201      	movs	r2, #1
 80103f0:	4658      	mov	r0, fp
 80103f2:	f000 ff49 	bl	8011288 <__lshift>
 80103f6:	4621      	mov	r1, r4
 80103f8:	4681      	mov	r9, r0
 80103fa:	f000 ffb1 	bl	8011360 <__mcmp>
 80103fe:	2800      	cmp	r0, #0
 8010400:	dc03      	bgt.n	801040a <_dtoa_r+0xa52>
 8010402:	d1e1      	bne.n	80103c8 <_dtoa_r+0xa10>
 8010404:	f018 0f01 	tst.w	r8, #1
 8010408:	d0de      	beq.n	80103c8 <_dtoa_r+0xa10>
 801040a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801040e:	d1d8      	bne.n	80103c2 <_dtoa_r+0xa0a>
 8010410:	9a00      	ldr	r2, [sp, #0]
 8010412:	2339      	movs	r3, #57	@ 0x39
 8010414:	7013      	strb	r3, [r2, #0]
 8010416:	4633      	mov	r3, r6
 8010418:	461e      	mov	r6, r3
 801041a:	3b01      	subs	r3, #1
 801041c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8010420:	2a39      	cmp	r2, #57	@ 0x39
 8010422:	d052      	beq.n	80104ca <_dtoa_r+0xb12>
 8010424:	3201      	adds	r2, #1
 8010426:	701a      	strb	r2, [r3, #0]
 8010428:	e612      	b.n	8010050 <_dtoa_r+0x698>
 801042a:	2a00      	cmp	r2, #0
 801042c:	dd07      	ble.n	801043e <_dtoa_r+0xa86>
 801042e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010432:	d0ed      	beq.n	8010410 <_dtoa_r+0xa58>
 8010434:	9a00      	ldr	r2, [sp, #0]
 8010436:	f108 0301 	add.w	r3, r8, #1
 801043a:	7013      	strb	r3, [r2, #0]
 801043c:	e608      	b.n	8010050 <_dtoa_r+0x698>
 801043e:	9b07      	ldr	r3, [sp, #28]
 8010440:	9a07      	ldr	r2, [sp, #28]
 8010442:	f803 8c01 	strb.w	r8, [r3, #-1]
 8010446:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010448:	4293      	cmp	r3, r2
 801044a:	d028      	beq.n	801049e <_dtoa_r+0xae6>
 801044c:	4649      	mov	r1, r9
 801044e:	2300      	movs	r3, #0
 8010450:	220a      	movs	r2, #10
 8010452:	4658      	mov	r0, fp
 8010454:	f000 fd22 	bl	8010e9c <__multadd>
 8010458:	42af      	cmp	r7, r5
 801045a:	4681      	mov	r9, r0
 801045c:	f04f 0300 	mov.w	r3, #0
 8010460:	f04f 020a 	mov.w	r2, #10
 8010464:	4639      	mov	r1, r7
 8010466:	4658      	mov	r0, fp
 8010468:	d107      	bne.n	801047a <_dtoa_r+0xac2>
 801046a:	f000 fd17 	bl	8010e9c <__multadd>
 801046e:	4607      	mov	r7, r0
 8010470:	4605      	mov	r5, r0
 8010472:	9b07      	ldr	r3, [sp, #28]
 8010474:	3301      	adds	r3, #1
 8010476:	9307      	str	r3, [sp, #28]
 8010478:	e774      	b.n	8010364 <_dtoa_r+0x9ac>
 801047a:	f000 fd0f 	bl	8010e9c <__multadd>
 801047e:	4629      	mov	r1, r5
 8010480:	4607      	mov	r7, r0
 8010482:	2300      	movs	r3, #0
 8010484:	220a      	movs	r2, #10
 8010486:	4658      	mov	r0, fp
 8010488:	f000 fd08 	bl	8010e9c <__multadd>
 801048c:	4605      	mov	r5, r0
 801048e:	e7f0      	b.n	8010472 <_dtoa_r+0xaba>
 8010490:	9b00      	ldr	r3, [sp, #0]
 8010492:	2b00      	cmp	r3, #0
 8010494:	bfcc      	ite	gt
 8010496:	461e      	movgt	r6, r3
 8010498:	2601      	movle	r6, #1
 801049a:	4456      	add	r6, sl
 801049c:	2700      	movs	r7, #0
 801049e:	4649      	mov	r1, r9
 80104a0:	2201      	movs	r2, #1
 80104a2:	4658      	mov	r0, fp
 80104a4:	f000 fef0 	bl	8011288 <__lshift>
 80104a8:	4621      	mov	r1, r4
 80104aa:	4681      	mov	r9, r0
 80104ac:	f000 ff58 	bl	8011360 <__mcmp>
 80104b0:	2800      	cmp	r0, #0
 80104b2:	dcb0      	bgt.n	8010416 <_dtoa_r+0xa5e>
 80104b4:	d102      	bne.n	80104bc <_dtoa_r+0xb04>
 80104b6:	f018 0f01 	tst.w	r8, #1
 80104ba:	d1ac      	bne.n	8010416 <_dtoa_r+0xa5e>
 80104bc:	4633      	mov	r3, r6
 80104be:	461e      	mov	r6, r3
 80104c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80104c4:	2a30      	cmp	r2, #48	@ 0x30
 80104c6:	d0fa      	beq.n	80104be <_dtoa_r+0xb06>
 80104c8:	e5c2      	b.n	8010050 <_dtoa_r+0x698>
 80104ca:	459a      	cmp	sl, r3
 80104cc:	d1a4      	bne.n	8010418 <_dtoa_r+0xa60>
 80104ce:	9b04      	ldr	r3, [sp, #16]
 80104d0:	3301      	adds	r3, #1
 80104d2:	9304      	str	r3, [sp, #16]
 80104d4:	2331      	movs	r3, #49	@ 0x31
 80104d6:	f88a 3000 	strb.w	r3, [sl]
 80104da:	e5b9      	b.n	8010050 <_dtoa_r+0x698>
 80104dc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80104de:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801053c <_dtoa_r+0xb84>
 80104e2:	b11b      	cbz	r3, 80104ec <_dtoa_r+0xb34>
 80104e4:	f10a 0308 	add.w	r3, sl, #8
 80104e8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80104ea:	6013      	str	r3, [r2, #0]
 80104ec:	4650      	mov	r0, sl
 80104ee:	b019      	add	sp, #100	@ 0x64
 80104f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80104f6:	2b01      	cmp	r3, #1
 80104f8:	f77f ae37 	ble.w	801016a <_dtoa_r+0x7b2>
 80104fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80104fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8010500:	2001      	movs	r0, #1
 8010502:	e655      	b.n	80101b0 <_dtoa_r+0x7f8>
 8010504:	9b00      	ldr	r3, [sp, #0]
 8010506:	2b00      	cmp	r3, #0
 8010508:	f77f aed6 	ble.w	80102b8 <_dtoa_r+0x900>
 801050c:	4656      	mov	r6, sl
 801050e:	4621      	mov	r1, r4
 8010510:	4648      	mov	r0, r9
 8010512:	f7ff f9c7 	bl	800f8a4 <quorem>
 8010516:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801051a:	f806 8b01 	strb.w	r8, [r6], #1
 801051e:	9b00      	ldr	r3, [sp, #0]
 8010520:	eba6 020a 	sub.w	r2, r6, sl
 8010524:	4293      	cmp	r3, r2
 8010526:	ddb3      	ble.n	8010490 <_dtoa_r+0xad8>
 8010528:	4649      	mov	r1, r9
 801052a:	2300      	movs	r3, #0
 801052c:	220a      	movs	r2, #10
 801052e:	4658      	mov	r0, fp
 8010530:	f000 fcb4 	bl	8010e9c <__multadd>
 8010534:	4681      	mov	r9, r0
 8010536:	e7ea      	b.n	801050e <_dtoa_r+0xb56>
 8010538:	080127fd 	.word	0x080127fd
 801053c:	08012781 	.word	0x08012781

08010540 <_free_r>:
 8010540:	b538      	push	{r3, r4, r5, lr}
 8010542:	4605      	mov	r5, r0
 8010544:	2900      	cmp	r1, #0
 8010546:	d041      	beq.n	80105cc <_free_r+0x8c>
 8010548:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801054c:	1f0c      	subs	r4, r1, #4
 801054e:	2b00      	cmp	r3, #0
 8010550:	bfb8      	it	lt
 8010552:	18e4      	addlt	r4, r4, r3
 8010554:	f000 fc34 	bl	8010dc0 <__malloc_lock>
 8010558:	4a1d      	ldr	r2, [pc, #116]	@ (80105d0 <_free_r+0x90>)
 801055a:	6813      	ldr	r3, [r2, #0]
 801055c:	b933      	cbnz	r3, 801056c <_free_r+0x2c>
 801055e:	6063      	str	r3, [r4, #4]
 8010560:	6014      	str	r4, [r2, #0]
 8010562:	4628      	mov	r0, r5
 8010564:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010568:	f000 bc30 	b.w	8010dcc <__malloc_unlock>
 801056c:	42a3      	cmp	r3, r4
 801056e:	d908      	bls.n	8010582 <_free_r+0x42>
 8010570:	6820      	ldr	r0, [r4, #0]
 8010572:	1821      	adds	r1, r4, r0
 8010574:	428b      	cmp	r3, r1
 8010576:	bf01      	itttt	eq
 8010578:	6819      	ldreq	r1, [r3, #0]
 801057a:	685b      	ldreq	r3, [r3, #4]
 801057c:	1809      	addeq	r1, r1, r0
 801057e:	6021      	streq	r1, [r4, #0]
 8010580:	e7ed      	b.n	801055e <_free_r+0x1e>
 8010582:	461a      	mov	r2, r3
 8010584:	685b      	ldr	r3, [r3, #4]
 8010586:	b10b      	cbz	r3, 801058c <_free_r+0x4c>
 8010588:	42a3      	cmp	r3, r4
 801058a:	d9fa      	bls.n	8010582 <_free_r+0x42>
 801058c:	6811      	ldr	r1, [r2, #0]
 801058e:	1850      	adds	r0, r2, r1
 8010590:	42a0      	cmp	r0, r4
 8010592:	d10b      	bne.n	80105ac <_free_r+0x6c>
 8010594:	6820      	ldr	r0, [r4, #0]
 8010596:	4401      	add	r1, r0
 8010598:	1850      	adds	r0, r2, r1
 801059a:	4283      	cmp	r3, r0
 801059c:	6011      	str	r1, [r2, #0]
 801059e:	d1e0      	bne.n	8010562 <_free_r+0x22>
 80105a0:	6818      	ldr	r0, [r3, #0]
 80105a2:	685b      	ldr	r3, [r3, #4]
 80105a4:	6053      	str	r3, [r2, #4]
 80105a6:	4408      	add	r0, r1
 80105a8:	6010      	str	r0, [r2, #0]
 80105aa:	e7da      	b.n	8010562 <_free_r+0x22>
 80105ac:	d902      	bls.n	80105b4 <_free_r+0x74>
 80105ae:	230c      	movs	r3, #12
 80105b0:	602b      	str	r3, [r5, #0]
 80105b2:	e7d6      	b.n	8010562 <_free_r+0x22>
 80105b4:	6820      	ldr	r0, [r4, #0]
 80105b6:	1821      	adds	r1, r4, r0
 80105b8:	428b      	cmp	r3, r1
 80105ba:	bf04      	itt	eq
 80105bc:	6819      	ldreq	r1, [r3, #0]
 80105be:	685b      	ldreq	r3, [r3, #4]
 80105c0:	6063      	str	r3, [r4, #4]
 80105c2:	bf04      	itt	eq
 80105c4:	1809      	addeq	r1, r1, r0
 80105c6:	6021      	streq	r1, [r4, #0]
 80105c8:	6054      	str	r4, [r2, #4]
 80105ca:	e7ca      	b.n	8010562 <_free_r+0x22>
 80105cc:	bd38      	pop	{r3, r4, r5, pc}
 80105ce:	bf00      	nop
 80105d0:	20000ac0 	.word	0x20000ac0

080105d4 <rshift>:
 80105d4:	6903      	ldr	r3, [r0, #16]
 80105d6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80105da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80105de:	ea4f 1261 	mov.w	r2, r1, asr #5
 80105e2:	f100 0414 	add.w	r4, r0, #20
 80105e6:	dd45      	ble.n	8010674 <rshift+0xa0>
 80105e8:	f011 011f 	ands.w	r1, r1, #31
 80105ec:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80105f0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80105f4:	d10c      	bne.n	8010610 <rshift+0x3c>
 80105f6:	f100 0710 	add.w	r7, r0, #16
 80105fa:	4629      	mov	r1, r5
 80105fc:	42b1      	cmp	r1, r6
 80105fe:	d334      	bcc.n	801066a <rshift+0x96>
 8010600:	1a9b      	subs	r3, r3, r2
 8010602:	009b      	lsls	r3, r3, #2
 8010604:	1eea      	subs	r2, r5, #3
 8010606:	4296      	cmp	r6, r2
 8010608:	bf38      	it	cc
 801060a:	2300      	movcc	r3, #0
 801060c:	4423      	add	r3, r4
 801060e:	e015      	b.n	801063c <rshift+0x68>
 8010610:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010614:	f1c1 0820 	rsb	r8, r1, #32
 8010618:	40cf      	lsrs	r7, r1
 801061a:	f105 0e04 	add.w	lr, r5, #4
 801061e:	46a1      	mov	r9, r4
 8010620:	4576      	cmp	r6, lr
 8010622:	46f4      	mov	ip, lr
 8010624:	d815      	bhi.n	8010652 <rshift+0x7e>
 8010626:	1a9a      	subs	r2, r3, r2
 8010628:	0092      	lsls	r2, r2, #2
 801062a:	3a04      	subs	r2, #4
 801062c:	3501      	adds	r5, #1
 801062e:	42ae      	cmp	r6, r5
 8010630:	bf38      	it	cc
 8010632:	2200      	movcc	r2, #0
 8010634:	18a3      	adds	r3, r4, r2
 8010636:	50a7      	str	r7, [r4, r2]
 8010638:	b107      	cbz	r7, 801063c <rshift+0x68>
 801063a:	3304      	adds	r3, #4
 801063c:	1b1a      	subs	r2, r3, r4
 801063e:	42a3      	cmp	r3, r4
 8010640:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010644:	bf08      	it	eq
 8010646:	2300      	moveq	r3, #0
 8010648:	6102      	str	r2, [r0, #16]
 801064a:	bf08      	it	eq
 801064c:	6143      	streq	r3, [r0, #20]
 801064e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010652:	f8dc c000 	ldr.w	ip, [ip]
 8010656:	fa0c fc08 	lsl.w	ip, ip, r8
 801065a:	ea4c 0707 	orr.w	r7, ip, r7
 801065e:	f849 7b04 	str.w	r7, [r9], #4
 8010662:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010666:	40cf      	lsrs	r7, r1
 8010668:	e7da      	b.n	8010620 <rshift+0x4c>
 801066a:	f851 cb04 	ldr.w	ip, [r1], #4
 801066e:	f847 cf04 	str.w	ip, [r7, #4]!
 8010672:	e7c3      	b.n	80105fc <rshift+0x28>
 8010674:	4623      	mov	r3, r4
 8010676:	e7e1      	b.n	801063c <rshift+0x68>

08010678 <__hexdig_fun>:
 8010678:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801067c:	2b09      	cmp	r3, #9
 801067e:	d802      	bhi.n	8010686 <__hexdig_fun+0xe>
 8010680:	3820      	subs	r0, #32
 8010682:	b2c0      	uxtb	r0, r0
 8010684:	4770      	bx	lr
 8010686:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801068a:	2b05      	cmp	r3, #5
 801068c:	d801      	bhi.n	8010692 <__hexdig_fun+0x1a>
 801068e:	3847      	subs	r0, #71	@ 0x47
 8010690:	e7f7      	b.n	8010682 <__hexdig_fun+0xa>
 8010692:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8010696:	2b05      	cmp	r3, #5
 8010698:	d801      	bhi.n	801069e <__hexdig_fun+0x26>
 801069a:	3827      	subs	r0, #39	@ 0x27
 801069c:	e7f1      	b.n	8010682 <__hexdig_fun+0xa>
 801069e:	2000      	movs	r0, #0
 80106a0:	4770      	bx	lr
	...

080106a4 <__gethex>:
 80106a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106a8:	b085      	sub	sp, #20
 80106aa:	468a      	mov	sl, r1
 80106ac:	9302      	str	r3, [sp, #8]
 80106ae:	680b      	ldr	r3, [r1, #0]
 80106b0:	9001      	str	r0, [sp, #4]
 80106b2:	4690      	mov	r8, r2
 80106b4:	1c9c      	adds	r4, r3, #2
 80106b6:	46a1      	mov	r9, r4
 80106b8:	f814 0b01 	ldrb.w	r0, [r4], #1
 80106bc:	2830      	cmp	r0, #48	@ 0x30
 80106be:	d0fa      	beq.n	80106b6 <__gethex+0x12>
 80106c0:	eba9 0303 	sub.w	r3, r9, r3
 80106c4:	f1a3 0b02 	sub.w	fp, r3, #2
 80106c8:	f7ff ffd6 	bl	8010678 <__hexdig_fun>
 80106cc:	4605      	mov	r5, r0
 80106ce:	2800      	cmp	r0, #0
 80106d0:	d168      	bne.n	80107a4 <__gethex+0x100>
 80106d2:	49a0      	ldr	r1, [pc, #640]	@ (8010954 <__gethex+0x2b0>)
 80106d4:	2201      	movs	r2, #1
 80106d6:	4648      	mov	r0, r9
 80106d8:	f7ff f83e 	bl	800f758 <strncmp>
 80106dc:	4607      	mov	r7, r0
 80106de:	2800      	cmp	r0, #0
 80106e0:	d167      	bne.n	80107b2 <__gethex+0x10e>
 80106e2:	f899 0001 	ldrb.w	r0, [r9, #1]
 80106e6:	4626      	mov	r6, r4
 80106e8:	f7ff ffc6 	bl	8010678 <__hexdig_fun>
 80106ec:	2800      	cmp	r0, #0
 80106ee:	d062      	beq.n	80107b6 <__gethex+0x112>
 80106f0:	4623      	mov	r3, r4
 80106f2:	7818      	ldrb	r0, [r3, #0]
 80106f4:	2830      	cmp	r0, #48	@ 0x30
 80106f6:	4699      	mov	r9, r3
 80106f8:	f103 0301 	add.w	r3, r3, #1
 80106fc:	d0f9      	beq.n	80106f2 <__gethex+0x4e>
 80106fe:	f7ff ffbb 	bl	8010678 <__hexdig_fun>
 8010702:	fab0 f580 	clz	r5, r0
 8010706:	096d      	lsrs	r5, r5, #5
 8010708:	f04f 0b01 	mov.w	fp, #1
 801070c:	464a      	mov	r2, r9
 801070e:	4616      	mov	r6, r2
 8010710:	3201      	adds	r2, #1
 8010712:	7830      	ldrb	r0, [r6, #0]
 8010714:	f7ff ffb0 	bl	8010678 <__hexdig_fun>
 8010718:	2800      	cmp	r0, #0
 801071a:	d1f8      	bne.n	801070e <__gethex+0x6a>
 801071c:	498d      	ldr	r1, [pc, #564]	@ (8010954 <__gethex+0x2b0>)
 801071e:	2201      	movs	r2, #1
 8010720:	4630      	mov	r0, r6
 8010722:	f7ff f819 	bl	800f758 <strncmp>
 8010726:	2800      	cmp	r0, #0
 8010728:	d13f      	bne.n	80107aa <__gethex+0x106>
 801072a:	b944      	cbnz	r4, 801073e <__gethex+0x9a>
 801072c:	1c74      	adds	r4, r6, #1
 801072e:	4622      	mov	r2, r4
 8010730:	4616      	mov	r6, r2
 8010732:	3201      	adds	r2, #1
 8010734:	7830      	ldrb	r0, [r6, #0]
 8010736:	f7ff ff9f 	bl	8010678 <__hexdig_fun>
 801073a:	2800      	cmp	r0, #0
 801073c:	d1f8      	bne.n	8010730 <__gethex+0x8c>
 801073e:	1ba4      	subs	r4, r4, r6
 8010740:	00a7      	lsls	r7, r4, #2
 8010742:	7833      	ldrb	r3, [r6, #0]
 8010744:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8010748:	2b50      	cmp	r3, #80	@ 0x50
 801074a:	d13e      	bne.n	80107ca <__gethex+0x126>
 801074c:	7873      	ldrb	r3, [r6, #1]
 801074e:	2b2b      	cmp	r3, #43	@ 0x2b
 8010750:	d033      	beq.n	80107ba <__gethex+0x116>
 8010752:	2b2d      	cmp	r3, #45	@ 0x2d
 8010754:	d034      	beq.n	80107c0 <__gethex+0x11c>
 8010756:	1c71      	adds	r1, r6, #1
 8010758:	2400      	movs	r4, #0
 801075a:	7808      	ldrb	r0, [r1, #0]
 801075c:	f7ff ff8c 	bl	8010678 <__hexdig_fun>
 8010760:	1e43      	subs	r3, r0, #1
 8010762:	b2db      	uxtb	r3, r3
 8010764:	2b18      	cmp	r3, #24
 8010766:	d830      	bhi.n	80107ca <__gethex+0x126>
 8010768:	f1a0 0210 	sub.w	r2, r0, #16
 801076c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010770:	f7ff ff82 	bl	8010678 <__hexdig_fun>
 8010774:	f100 3cff 	add.w	ip, r0, #4294967295
 8010778:	fa5f fc8c 	uxtb.w	ip, ip
 801077c:	f1bc 0f18 	cmp.w	ip, #24
 8010780:	f04f 030a 	mov.w	r3, #10
 8010784:	d91e      	bls.n	80107c4 <__gethex+0x120>
 8010786:	b104      	cbz	r4, 801078a <__gethex+0xe6>
 8010788:	4252      	negs	r2, r2
 801078a:	4417      	add	r7, r2
 801078c:	f8ca 1000 	str.w	r1, [sl]
 8010790:	b1ed      	cbz	r5, 80107ce <__gethex+0x12a>
 8010792:	f1bb 0f00 	cmp.w	fp, #0
 8010796:	bf0c      	ite	eq
 8010798:	2506      	moveq	r5, #6
 801079a:	2500      	movne	r5, #0
 801079c:	4628      	mov	r0, r5
 801079e:	b005      	add	sp, #20
 80107a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107a4:	2500      	movs	r5, #0
 80107a6:	462c      	mov	r4, r5
 80107a8:	e7b0      	b.n	801070c <__gethex+0x68>
 80107aa:	2c00      	cmp	r4, #0
 80107ac:	d1c7      	bne.n	801073e <__gethex+0x9a>
 80107ae:	4627      	mov	r7, r4
 80107b0:	e7c7      	b.n	8010742 <__gethex+0x9e>
 80107b2:	464e      	mov	r6, r9
 80107b4:	462f      	mov	r7, r5
 80107b6:	2501      	movs	r5, #1
 80107b8:	e7c3      	b.n	8010742 <__gethex+0x9e>
 80107ba:	2400      	movs	r4, #0
 80107bc:	1cb1      	adds	r1, r6, #2
 80107be:	e7cc      	b.n	801075a <__gethex+0xb6>
 80107c0:	2401      	movs	r4, #1
 80107c2:	e7fb      	b.n	80107bc <__gethex+0x118>
 80107c4:	fb03 0002 	mla	r0, r3, r2, r0
 80107c8:	e7ce      	b.n	8010768 <__gethex+0xc4>
 80107ca:	4631      	mov	r1, r6
 80107cc:	e7de      	b.n	801078c <__gethex+0xe8>
 80107ce:	eba6 0309 	sub.w	r3, r6, r9
 80107d2:	3b01      	subs	r3, #1
 80107d4:	4629      	mov	r1, r5
 80107d6:	2b07      	cmp	r3, #7
 80107d8:	dc0a      	bgt.n	80107f0 <__gethex+0x14c>
 80107da:	9801      	ldr	r0, [sp, #4]
 80107dc:	f000 fafc 	bl	8010dd8 <_Balloc>
 80107e0:	4604      	mov	r4, r0
 80107e2:	b940      	cbnz	r0, 80107f6 <__gethex+0x152>
 80107e4:	4b5c      	ldr	r3, [pc, #368]	@ (8010958 <__gethex+0x2b4>)
 80107e6:	4602      	mov	r2, r0
 80107e8:	21e4      	movs	r1, #228	@ 0xe4
 80107ea:	485c      	ldr	r0, [pc, #368]	@ (801095c <__gethex+0x2b8>)
 80107ec:	f001 fa5c 	bl	8011ca8 <__assert_func>
 80107f0:	3101      	adds	r1, #1
 80107f2:	105b      	asrs	r3, r3, #1
 80107f4:	e7ef      	b.n	80107d6 <__gethex+0x132>
 80107f6:	f100 0a14 	add.w	sl, r0, #20
 80107fa:	2300      	movs	r3, #0
 80107fc:	4655      	mov	r5, sl
 80107fe:	469b      	mov	fp, r3
 8010800:	45b1      	cmp	r9, r6
 8010802:	d337      	bcc.n	8010874 <__gethex+0x1d0>
 8010804:	f845 bb04 	str.w	fp, [r5], #4
 8010808:	eba5 050a 	sub.w	r5, r5, sl
 801080c:	10ad      	asrs	r5, r5, #2
 801080e:	6125      	str	r5, [r4, #16]
 8010810:	4658      	mov	r0, fp
 8010812:	f000 fbd3 	bl	8010fbc <__hi0bits>
 8010816:	016d      	lsls	r5, r5, #5
 8010818:	f8d8 6000 	ldr.w	r6, [r8]
 801081c:	1a2d      	subs	r5, r5, r0
 801081e:	42b5      	cmp	r5, r6
 8010820:	dd54      	ble.n	80108cc <__gethex+0x228>
 8010822:	1bad      	subs	r5, r5, r6
 8010824:	4629      	mov	r1, r5
 8010826:	4620      	mov	r0, r4
 8010828:	f000 ff67 	bl	80116fa <__any_on>
 801082c:	4681      	mov	r9, r0
 801082e:	b178      	cbz	r0, 8010850 <__gethex+0x1ac>
 8010830:	1e6b      	subs	r3, r5, #1
 8010832:	1159      	asrs	r1, r3, #5
 8010834:	f003 021f 	and.w	r2, r3, #31
 8010838:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801083c:	f04f 0901 	mov.w	r9, #1
 8010840:	fa09 f202 	lsl.w	r2, r9, r2
 8010844:	420a      	tst	r2, r1
 8010846:	d003      	beq.n	8010850 <__gethex+0x1ac>
 8010848:	454b      	cmp	r3, r9
 801084a:	dc36      	bgt.n	80108ba <__gethex+0x216>
 801084c:	f04f 0902 	mov.w	r9, #2
 8010850:	4629      	mov	r1, r5
 8010852:	4620      	mov	r0, r4
 8010854:	f7ff febe 	bl	80105d4 <rshift>
 8010858:	442f      	add	r7, r5
 801085a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801085e:	42bb      	cmp	r3, r7
 8010860:	da42      	bge.n	80108e8 <__gethex+0x244>
 8010862:	9801      	ldr	r0, [sp, #4]
 8010864:	4621      	mov	r1, r4
 8010866:	f000 faf7 	bl	8010e58 <_Bfree>
 801086a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801086c:	2300      	movs	r3, #0
 801086e:	6013      	str	r3, [r2, #0]
 8010870:	25a3      	movs	r5, #163	@ 0xa3
 8010872:	e793      	b.n	801079c <__gethex+0xf8>
 8010874:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8010878:	2a2e      	cmp	r2, #46	@ 0x2e
 801087a:	d012      	beq.n	80108a2 <__gethex+0x1fe>
 801087c:	2b20      	cmp	r3, #32
 801087e:	d104      	bne.n	801088a <__gethex+0x1e6>
 8010880:	f845 bb04 	str.w	fp, [r5], #4
 8010884:	f04f 0b00 	mov.w	fp, #0
 8010888:	465b      	mov	r3, fp
 801088a:	7830      	ldrb	r0, [r6, #0]
 801088c:	9303      	str	r3, [sp, #12]
 801088e:	f7ff fef3 	bl	8010678 <__hexdig_fun>
 8010892:	9b03      	ldr	r3, [sp, #12]
 8010894:	f000 000f 	and.w	r0, r0, #15
 8010898:	4098      	lsls	r0, r3
 801089a:	ea4b 0b00 	orr.w	fp, fp, r0
 801089e:	3304      	adds	r3, #4
 80108a0:	e7ae      	b.n	8010800 <__gethex+0x15c>
 80108a2:	45b1      	cmp	r9, r6
 80108a4:	d8ea      	bhi.n	801087c <__gethex+0x1d8>
 80108a6:	492b      	ldr	r1, [pc, #172]	@ (8010954 <__gethex+0x2b0>)
 80108a8:	9303      	str	r3, [sp, #12]
 80108aa:	2201      	movs	r2, #1
 80108ac:	4630      	mov	r0, r6
 80108ae:	f7fe ff53 	bl	800f758 <strncmp>
 80108b2:	9b03      	ldr	r3, [sp, #12]
 80108b4:	2800      	cmp	r0, #0
 80108b6:	d1e1      	bne.n	801087c <__gethex+0x1d8>
 80108b8:	e7a2      	b.n	8010800 <__gethex+0x15c>
 80108ba:	1ea9      	subs	r1, r5, #2
 80108bc:	4620      	mov	r0, r4
 80108be:	f000 ff1c 	bl	80116fa <__any_on>
 80108c2:	2800      	cmp	r0, #0
 80108c4:	d0c2      	beq.n	801084c <__gethex+0x1a8>
 80108c6:	f04f 0903 	mov.w	r9, #3
 80108ca:	e7c1      	b.n	8010850 <__gethex+0x1ac>
 80108cc:	da09      	bge.n	80108e2 <__gethex+0x23e>
 80108ce:	1b75      	subs	r5, r6, r5
 80108d0:	4621      	mov	r1, r4
 80108d2:	9801      	ldr	r0, [sp, #4]
 80108d4:	462a      	mov	r2, r5
 80108d6:	f000 fcd7 	bl	8011288 <__lshift>
 80108da:	1b7f      	subs	r7, r7, r5
 80108dc:	4604      	mov	r4, r0
 80108de:	f100 0a14 	add.w	sl, r0, #20
 80108e2:	f04f 0900 	mov.w	r9, #0
 80108e6:	e7b8      	b.n	801085a <__gethex+0x1b6>
 80108e8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80108ec:	42bd      	cmp	r5, r7
 80108ee:	dd6f      	ble.n	80109d0 <__gethex+0x32c>
 80108f0:	1bed      	subs	r5, r5, r7
 80108f2:	42ae      	cmp	r6, r5
 80108f4:	dc34      	bgt.n	8010960 <__gethex+0x2bc>
 80108f6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80108fa:	2b02      	cmp	r3, #2
 80108fc:	d022      	beq.n	8010944 <__gethex+0x2a0>
 80108fe:	2b03      	cmp	r3, #3
 8010900:	d024      	beq.n	801094c <__gethex+0x2a8>
 8010902:	2b01      	cmp	r3, #1
 8010904:	d115      	bne.n	8010932 <__gethex+0x28e>
 8010906:	42ae      	cmp	r6, r5
 8010908:	d113      	bne.n	8010932 <__gethex+0x28e>
 801090a:	2e01      	cmp	r6, #1
 801090c:	d10b      	bne.n	8010926 <__gethex+0x282>
 801090e:	9a02      	ldr	r2, [sp, #8]
 8010910:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010914:	6013      	str	r3, [r2, #0]
 8010916:	2301      	movs	r3, #1
 8010918:	6123      	str	r3, [r4, #16]
 801091a:	f8ca 3000 	str.w	r3, [sl]
 801091e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010920:	2562      	movs	r5, #98	@ 0x62
 8010922:	601c      	str	r4, [r3, #0]
 8010924:	e73a      	b.n	801079c <__gethex+0xf8>
 8010926:	1e71      	subs	r1, r6, #1
 8010928:	4620      	mov	r0, r4
 801092a:	f000 fee6 	bl	80116fa <__any_on>
 801092e:	2800      	cmp	r0, #0
 8010930:	d1ed      	bne.n	801090e <__gethex+0x26a>
 8010932:	9801      	ldr	r0, [sp, #4]
 8010934:	4621      	mov	r1, r4
 8010936:	f000 fa8f 	bl	8010e58 <_Bfree>
 801093a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801093c:	2300      	movs	r3, #0
 801093e:	6013      	str	r3, [r2, #0]
 8010940:	2550      	movs	r5, #80	@ 0x50
 8010942:	e72b      	b.n	801079c <__gethex+0xf8>
 8010944:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010946:	2b00      	cmp	r3, #0
 8010948:	d1f3      	bne.n	8010932 <__gethex+0x28e>
 801094a:	e7e0      	b.n	801090e <__gethex+0x26a>
 801094c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801094e:	2b00      	cmp	r3, #0
 8010950:	d1dd      	bne.n	801090e <__gethex+0x26a>
 8010952:	e7ee      	b.n	8010932 <__gethex+0x28e>
 8010954:	080126ec 	.word	0x080126ec
 8010958:	080127fd 	.word	0x080127fd
 801095c:	0801280e 	.word	0x0801280e
 8010960:	1e6f      	subs	r7, r5, #1
 8010962:	f1b9 0f00 	cmp.w	r9, #0
 8010966:	d130      	bne.n	80109ca <__gethex+0x326>
 8010968:	b127      	cbz	r7, 8010974 <__gethex+0x2d0>
 801096a:	4639      	mov	r1, r7
 801096c:	4620      	mov	r0, r4
 801096e:	f000 fec4 	bl	80116fa <__any_on>
 8010972:	4681      	mov	r9, r0
 8010974:	117a      	asrs	r2, r7, #5
 8010976:	2301      	movs	r3, #1
 8010978:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801097c:	f007 071f 	and.w	r7, r7, #31
 8010980:	40bb      	lsls	r3, r7
 8010982:	4213      	tst	r3, r2
 8010984:	4629      	mov	r1, r5
 8010986:	4620      	mov	r0, r4
 8010988:	bf18      	it	ne
 801098a:	f049 0902 	orrne.w	r9, r9, #2
 801098e:	f7ff fe21 	bl	80105d4 <rshift>
 8010992:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8010996:	1b76      	subs	r6, r6, r5
 8010998:	2502      	movs	r5, #2
 801099a:	f1b9 0f00 	cmp.w	r9, #0
 801099e:	d047      	beq.n	8010a30 <__gethex+0x38c>
 80109a0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80109a4:	2b02      	cmp	r3, #2
 80109a6:	d015      	beq.n	80109d4 <__gethex+0x330>
 80109a8:	2b03      	cmp	r3, #3
 80109aa:	d017      	beq.n	80109dc <__gethex+0x338>
 80109ac:	2b01      	cmp	r3, #1
 80109ae:	d109      	bne.n	80109c4 <__gethex+0x320>
 80109b0:	f019 0f02 	tst.w	r9, #2
 80109b4:	d006      	beq.n	80109c4 <__gethex+0x320>
 80109b6:	f8da 3000 	ldr.w	r3, [sl]
 80109ba:	ea49 0903 	orr.w	r9, r9, r3
 80109be:	f019 0f01 	tst.w	r9, #1
 80109c2:	d10e      	bne.n	80109e2 <__gethex+0x33e>
 80109c4:	f045 0510 	orr.w	r5, r5, #16
 80109c8:	e032      	b.n	8010a30 <__gethex+0x38c>
 80109ca:	f04f 0901 	mov.w	r9, #1
 80109ce:	e7d1      	b.n	8010974 <__gethex+0x2d0>
 80109d0:	2501      	movs	r5, #1
 80109d2:	e7e2      	b.n	801099a <__gethex+0x2f6>
 80109d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80109d6:	f1c3 0301 	rsb	r3, r3, #1
 80109da:	930f      	str	r3, [sp, #60]	@ 0x3c
 80109dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d0f0      	beq.n	80109c4 <__gethex+0x320>
 80109e2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80109e6:	f104 0314 	add.w	r3, r4, #20
 80109ea:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80109ee:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80109f2:	f04f 0c00 	mov.w	ip, #0
 80109f6:	4618      	mov	r0, r3
 80109f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80109fc:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010a00:	d01b      	beq.n	8010a3a <__gethex+0x396>
 8010a02:	3201      	adds	r2, #1
 8010a04:	6002      	str	r2, [r0, #0]
 8010a06:	2d02      	cmp	r5, #2
 8010a08:	f104 0314 	add.w	r3, r4, #20
 8010a0c:	d13c      	bne.n	8010a88 <__gethex+0x3e4>
 8010a0e:	f8d8 2000 	ldr.w	r2, [r8]
 8010a12:	3a01      	subs	r2, #1
 8010a14:	42b2      	cmp	r2, r6
 8010a16:	d109      	bne.n	8010a2c <__gethex+0x388>
 8010a18:	1171      	asrs	r1, r6, #5
 8010a1a:	2201      	movs	r2, #1
 8010a1c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010a20:	f006 061f 	and.w	r6, r6, #31
 8010a24:	fa02 f606 	lsl.w	r6, r2, r6
 8010a28:	421e      	tst	r6, r3
 8010a2a:	d13a      	bne.n	8010aa2 <__gethex+0x3fe>
 8010a2c:	f045 0520 	orr.w	r5, r5, #32
 8010a30:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010a32:	601c      	str	r4, [r3, #0]
 8010a34:	9b02      	ldr	r3, [sp, #8]
 8010a36:	601f      	str	r7, [r3, #0]
 8010a38:	e6b0      	b.n	801079c <__gethex+0xf8>
 8010a3a:	4299      	cmp	r1, r3
 8010a3c:	f843 cc04 	str.w	ip, [r3, #-4]
 8010a40:	d8d9      	bhi.n	80109f6 <__gethex+0x352>
 8010a42:	68a3      	ldr	r3, [r4, #8]
 8010a44:	459b      	cmp	fp, r3
 8010a46:	db17      	blt.n	8010a78 <__gethex+0x3d4>
 8010a48:	6861      	ldr	r1, [r4, #4]
 8010a4a:	9801      	ldr	r0, [sp, #4]
 8010a4c:	3101      	adds	r1, #1
 8010a4e:	f000 f9c3 	bl	8010dd8 <_Balloc>
 8010a52:	4681      	mov	r9, r0
 8010a54:	b918      	cbnz	r0, 8010a5e <__gethex+0x3ba>
 8010a56:	4b1a      	ldr	r3, [pc, #104]	@ (8010ac0 <__gethex+0x41c>)
 8010a58:	4602      	mov	r2, r0
 8010a5a:	2184      	movs	r1, #132	@ 0x84
 8010a5c:	e6c5      	b.n	80107ea <__gethex+0x146>
 8010a5e:	6922      	ldr	r2, [r4, #16]
 8010a60:	3202      	adds	r2, #2
 8010a62:	f104 010c 	add.w	r1, r4, #12
 8010a66:	0092      	lsls	r2, r2, #2
 8010a68:	300c      	adds	r0, #12
 8010a6a:	f7fe fefe 	bl	800f86a <memcpy>
 8010a6e:	4621      	mov	r1, r4
 8010a70:	9801      	ldr	r0, [sp, #4]
 8010a72:	f000 f9f1 	bl	8010e58 <_Bfree>
 8010a76:	464c      	mov	r4, r9
 8010a78:	6923      	ldr	r3, [r4, #16]
 8010a7a:	1c5a      	adds	r2, r3, #1
 8010a7c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010a80:	6122      	str	r2, [r4, #16]
 8010a82:	2201      	movs	r2, #1
 8010a84:	615a      	str	r2, [r3, #20]
 8010a86:	e7be      	b.n	8010a06 <__gethex+0x362>
 8010a88:	6922      	ldr	r2, [r4, #16]
 8010a8a:	455a      	cmp	r2, fp
 8010a8c:	dd0b      	ble.n	8010aa6 <__gethex+0x402>
 8010a8e:	2101      	movs	r1, #1
 8010a90:	4620      	mov	r0, r4
 8010a92:	f7ff fd9f 	bl	80105d4 <rshift>
 8010a96:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010a9a:	3701      	adds	r7, #1
 8010a9c:	42bb      	cmp	r3, r7
 8010a9e:	f6ff aee0 	blt.w	8010862 <__gethex+0x1be>
 8010aa2:	2501      	movs	r5, #1
 8010aa4:	e7c2      	b.n	8010a2c <__gethex+0x388>
 8010aa6:	f016 061f 	ands.w	r6, r6, #31
 8010aaa:	d0fa      	beq.n	8010aa2 <__gethex+0x3fe>
 8010aac:	4453      	add	r3, sl
 8010aae:	f1c6 0620 	rsb	r6, r6, #32
 8010ab2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8010ab6:	f000 fa81 	bl	8010fbc <__hi0bits>
 8010aba:	42b0      	cmp	r0, r6
 8010abc:	dbe7      	blt.n	8010a8e <__gethex+0x3ea>
 8010abe:	e7f0      	b.n	8010aa2 <__gethex+0x3fe>
 8010ac0:	080127fd 	.word	0x080127fd

08010ac4 <L_shift>:
 8010ac4:	f1c2 0208 	rsb	r2, r2, #8
 8010ac8:	0092      	lsls	r2, r2, #2
 8010aca:	b570      	push	{r4, r5, r6, lr}
 8010acc:	f1c2 0620 	rsb	r6, r2, #32
 8010ad0:	6843      	ldr	r3, [r0, #4]
 8010ad2:	6804      	ldr	r4, [r0, #0]
 8010ad4:	fa03 f506 	lsl.w	r5, r3, r6
 8010ad8:	432c      	orrs	r4, r5
 8010ada:	40d3      	lsrs	r3, r2
 8010adc:	6004      	str	r4, [r0, #0]
 8010ade:	f840 3f04 	str.w	r3, [r0, #4]!
 8010ae2:	4288      	cmp	r0, r1
 8010ae4:	d3f4      	bcc.n	8010ad0 <L_shift+0xc>
 8010ae6:	bd70      	pop	{r4, r5, r6, pc}

08010ae8 <__match>:
 8010ae8:	b530      	push	{r4, r5, lr}
 8010aea:	6803      	ldr	r3, [r0, #0]
 8010aec:	3301      	adds	r3, #1
 8010aee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010af2:	b914      	cbnz	r4, 8010afa <__match+0x12>
 8010af4:	6003      	str	r3, [r0, #0]
 8010af6:	2001      	movs	r0, #1
 8010af8:	bd30      	pop	{r4, r5, pc}
 8010afa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010afe:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8010b02:	2d19      	cmp	r5, #25
 8010b04:	bf98      	it	ls
 8010b06:	3220      	addls	r2, #32
 8010b08:	42a2      	cmp	r2, r4
 8010b0a:	d0f0      	beq.n	8010aee <__match+0x6>
 8010b0c:	2000      	movs	r0, #0
 8010b0e:	e7f3      	b.n	8010af8 <__match+0x10>

08010b10 <__hexnan>:
 8010b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b14:	680b      	ldr	r3, [r1, #0]
 8010b16:	6801      	ldr	r1, [r0, #0]
 8010b18:	115e      	asrs	r6, r3, #5
 8010b1a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010b1e:	f013 031f 	ands.w	r3, r3, #31
 8010b22:	b087      	sub	sp, #28
 8010b24:	bf18      	it	ne
 8010b26:	3604      	addne	r6, #4
 8010b28:	2500      	movs	r5, #0
 8010b2a:	1f37      	subs	r7, r6, #4
 8010b2c:	4682      	mov	sl, r0
 8010b2e:	4690      	mov	r8, r2
 8010b30:	9301      	str	r3, [sp, #4]
 8010b32:	f846 5c04 	str.w	r5, [r6, #-4]
 8010b36:	46b9      	mov	r9, r7
 8010b38:	463c      	mov	r4, r7
 8010b3a:	9502      	str	r5, [sp, #8]
 8010b3c:	46ab      	mov	fp, r5
 8010b3e:	784a      	ldrb	r2, [r1, #1]
 8010b40:	1c4b      	adds	r3, r1, #1
 8010b42:	9303      	str	r3, [sp, #12]
 8010b44:	b342      	cbz	r2, 8010b98 <__hexnan+0x88>
 8010b46:	4610      	mov	r0, r2
 8010b48:	9105      	str	r1, [sp, #20]
 8010b4a:	9204      	str	r2, [sp, #16]
 8010b4c:	f7ff fd94 	bl	8010678 <__hexdig_fun>
 8010b50:	2800      	cmp	r0, #0
 8010b52:	d151      	bne.n	8010bf8 <__hexnan+0xe8>
 8010b54:	9a04      	ldr	r2, [sp, #16]
 8010b56:	9905      	ldr	r1, [sp, #20]
 8010b58:	2a20      	cmp	r2, #32
 8010b5a:	d818      	bhi.n	8010b8e <__hexnan+0x7e>
 8010b5c:	9b02      	ldr	r3, [sp, #8]
 8010b5e:	459b      	cmp	fp, r3
 8010b60:	dd13      	ble.n	8010b8a <__hexnan+0x7a>
 8010b62:	454c      	cmp	r4, r9
 8010b64:	d206      	bcs.n	8010b74 <__hexnan+0x64>
 8010b66:	2d07      	cmp	r5, #7
 8010b68:	dc04      	bgt.n	8010b74 <__hexnan+0x64>
 8010b6a:	462a      	mov	r2, r5
 8010b6c:	4649      	mov	r1, r9
 8010b6e:	4620      	mov	r0, r4
 8010b70:	f7ff ffa8 	bl	8010ac4 <L_shift>
 8010b74:	4544      	cmp	r4, r8
 8010b76:	d952      	bls.n	8010c1e <__hexnan+0x10e>
 8010b78:	2300      	movs	r3, #0
 8010b7a:	f1a4 0904 	sub.w	r9, r4, #4
 8010b7e:	f844 3c04 	str.w	r3, [r4, #-4]
 8010b82:	f8cd b008 	str.w	fp, [sp, #8]
 8010b86:	464c      	mov	r4, r9
 8010b88:	461d      	mov	r5, r3
 8010b8a:	9903      	ldr	r1, [sp, #12]
 8010b8c:	e7d7      	b.n	8010b3e <__hexnan+0x2e>
 8010b8e:	2a29      	cmp	r2, #41	@ 0x29
 8010b90:	d157      	bne.n	8010c42 <__hexnan+0x132>
 8010b92:	3102      	adds	r1, #2
 8010b94:	f8ca 1000 	str.w	r1, [sl]
 8010b98:	f1bb 0f00 	cmp.w	fp, #0
 8010b9c:	d051      	beq.n	8010c42 <__hexnan+0x132>
 8010b9e:	454c      	cmp	r4, r9
 8010ba0:	d206      	bcs.n	8010bb0 <__hexnan+0xa0>
 8010ba2:	2d07      	cmp	r5, #7
 8010ba4:	dc04      	bgt.n	8010bb0 <__hexnan+0xa0>
 8010ba6:	462a      	mov	r2, r5
 8010ba8:	4649      	mov	r1, r9
 8010baa:	4620      	mov	r0, r4
 8010bac:	f7ff ff8a 	bl	8010ac4 <L_shift>
 8010bb0:	4544      	cmp	r4, r8
 8010bb2:	d936      	bls.n	8010c22 <__hexnan+0x112>
 8010bb4:	f1a8 0204 	sub.w	r2, r8, #4
 8010bb8:	4623      	mov	r3, r4
 8010bba:	f853 1b04 	ldr.w	r1, [r3], #4
 8010bbe:	f842 1f04 	str.w	r1, [r2, #4]!
 8010bc2:	429f      	cmp	r7, r3
 8010bc4:	d2f9      	bcs.n	8010bba <__hexnan+0xaa>
 8010bc6:	1b3b      	subs	r3, r7, r4
 8010bc8:	f023 0303 	bic.w	r3, r3, #3
 8010bcc:	3304      	adds	r3, #4
 8010bce:	3401      	adds	r4, #1
 8010bd0:	3e03      	subs	r6, #3
 8010bd2:	42b4      	cmp	r4, r6
 8010bd4:	bf88      	it	hi
 8010bd6:	2304      	movhi	r3, #4
 8010bd8:	4443      	add	r3, r8
 8010bda:	2200      	movs	r2, #0
 8010bdc:	f843 2b04 	str.w	r2, [r3], #4
 8010be0:	429f      	cmp	r7, r3
 8010be2:	d2fb      	bcs.n	8010bdc <__hexnan+0xcc>
 8010be4:	683b      	ldr	r3, [r7, #0]
 8010be6:	b91b      	cbnz	r3, 8010bf0 <__hexnan+0xe0>
 8010be8:	4547      	cmp	r7, r8
 8010bea:	d128      	bne.n	8010c3e <__hexnan+0x12e>
 8010bec:	2301      	movs	r3, #1
 8010bee:	603b      	str	r3, [r7, #0]
 8010bf0:	2005      	movs	r0, #5
 8010bf2:	b007      	add	sp, #28
 8010bf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bf8:	3501      	adds	r5, #1
 8010bfa:	2d08      	cmp	r5, #8
 8010bfc:	f10b 0b01 	add.w	fp, fp, #1
 8010c00:	dd06      	ble.n	8010c10 <__hexnan+0x100>
 8010c02:	4544      	cmp	r4, r8
 8010c04:	d9c1      	bls.n	8010b8a <__hexnan+0x7a>
 8010c06:	2300      	movs	r3, #0
 8010c08:	f844 3c04 	str.w	r3, [r4, #-4]
 8010c0c:	2501      	movs	r5, #1
 8010c0e:	3c04      	subs	r4, #4
 8010c10:	6822      	ldr	r2, [r4, #0]
 8010c12:	f000 000f 	and.w	r0, r0, #15
 8010c16:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8010c1a:	6020      	str	r0, [r4, #0]
 8010c1c:	e7b5      	b.n	8010b8a <__hexnan+0x7a>
 8010c1e:	2508      	movs	r5, #8
 8010c20:	e7b3      	b.n	8010b8a <__hexnan+0x7a>
 8010c22:	9b01      	ldr	r3, [sp, #4]
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	d0dd      	beq.n	8010be4 <__hexnan+0xd4>
 8010c28:	f1c3 0320 	rsb	r3, r3, #32
 8010c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8010c30:	40da      	lsrs	r2, r3
 8010c32:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8010c36:	4013      	ands	r3, r2
 8010c38:	f846 3c04 	str.w	r3, [r6, #-4]
 8010c3c:	e7d2      	b.n	8010be4 <__hexnan+0xd4>
 8010c3e:	3f04      	subs	r7, #4
 8010c40:	e7d0      	b.n	8010be4 <__hexnan+0xd4>
 8010c42:	2004      	movs	r0, #4
 8010c44:	e7d5      	b.n	8010bf2 <__hexnan+0xe2>
	...

08010c48 <malloc>:
 8010c48:	4b02      	ldr	r3, [pc, #8]	@ (8010c54 <malloc+0xc>)
 8010c4a:	4601      	mov	r1, r0
 8010c4c:	6818      	ldr	r0, [r3, #0]
 8010c4e:	f000 b825 	b.w	8010c9c <_malloc_r>
 8010c52:	bf00      	nop
 8010c54:	20000208 	.word	0x20000208

08010c58 <sbrk_aligned>:
 8010c58:	b570      	push	{r4, r5, r6, lr}
 8010c5a:	4e0f      	ldr	r6, [pc, #60]	@ (8010c98 <sbrk_aligned+0x40>)
 8010c5c:	460c      	mov	r4, r1
 8010c5e:	6831      	ldr	r1, [r6, #0]
 8010c60:	4605      	mov	r5, r0
 8010c62:	b911      	cbnz	r1, 8010c6a <sbrk_aligned+0x12>
 8010c64:	f001 f810 	bl	8011c88 <_sbrk_r>
 8010c68:	6030      	str	r0, [r6, #0]
 8010c6a:	4621      	mov	r1, r4
 8010c6c:	4628      	mov	r0, r5
 8010c6e:	f001 f80b 	bl	8011c88 <_sbrk_r>
 8010c72:	1c43      	adds	r3, r0, #1
 8010c74:	d103      	bne.n	8010c7e <sbrk_aligned+0x26>
 8010c76:	f04f 34ff 	mov.w	r4, #4294967295
 8010c7a:	4620      	mov	r0, r4
 8010c7c:	bd70      	pop	{r4, r5, r6, pc}
 8010c7e:	1cc4      	adds	r4, r0, #3
 8010c80:	f024 0403 	bic.w	r4, r4, #3
 8010c84:	42a0      	cmp	r0, r4
 8010c86:	d0f8      	beq.n	8010c7a <sbrk_aligned+0x22>
 8010c88:	1a21      	subs	r1, r4, r0
 8010c8a:	4628      	mov	r0, r5
 8010c8c:	f000 fffc 	bl	8011c88 <_sbrk_r>
 8010c90:	3001      	adds	r0, #1
 8010c92:	d1f2      	bne.n	8010c7a <sbrk_aligned+0x22>
 8010c94:	e7ef      	b.n	8010c76 <sbrk_aligned+0x1e>
 8010c96:	bf00      	nop
 8010c98:	20000abc 	.word	0x20000abc

08010c9c <_malloc_r>:
 8010c9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010ca0:	1ccd      	adds	r5, r1, #3
 8010ca2:	f025 0503 	bic.w	r5, r5, #3
 8010ca6:	3508      	adds	r5, #8
 8010ca8:	2d0c      	cmp	r5, #12
 8010caa:	bf38      	it	cc
 8010cac:	250c      	movcc	r5, #12
 8010cae:	2d00      	cmp	r5, #0
 8010cb0:	4606      	mov	r6, r0
 8010cb2:	db01      	blt.n	8010cb8 <_malloc_r+0x1c>
 8010cb4:	42a9      	cmp	r1, r5
 8010cb6:	d904      	bls.n	8010cc2 <_malloc_r+0x26>
 8010cb8:	230c      	movs	r3, #12
 8010cba:	6033      	str	r3, [r6, #0]
 8010cbc:	2000      	movs	r0, #0
 8010cbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010cc2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010d98 <_malloc_r+0xfc>
 8010cc6:	f000 f87b 	bl	8010dc0 <__malloc_lock>
 8010cca:	f8d8 3000 	ldr.w	r3, [r8]
 8010cce:	461c      	mov	r4, r3
 8010cd0:	bb44      	cbnz	r4, 8010d24 <_malloc_r+0x88>
 8010cd2:	4629      	mov	r1, r5
 8010cd4:	4630      	mov	r0, r6
 8010cd6:	f7ff ffbf 	bl	8010c58 <sbrk_aligned>
 8010cda:	1c43      	adds	r3, r0, #1
 8010cdc:	4604      	mov	r4, r0
 8010cde:	d158      	bne.n	8010d92 <_malloc_r+0xf6>
 8010ce0:	f8d8 4000 	ldr.w	r4, [r8]
 8010ce4:	4627      	mov	r7, r4
 8010ce6:	2f00      	cmp	r7, #0
 8010ce8:	d143      	bne.n	8010d72 <_malloc_r+0xd6>
 8010cea:	2c00      	cmp	r4, #0
 8010cec:	d04b      	beq.n	8010d86 <_malloc_r+0xea>
 8010cee:	6823      	ldr	r3, [r4, #0]
 8010cf0:	4639      	mov	r1, r7
 8010cf2:	4630      	mov	r0, r6
 8010cf4:	eb04 0903 	add.w	r9, r4, r3
 8010cf8:	f000 ffc6 	bl	8011c88 <_sbrk_r>
 8010cfc:	4581      	cmp	r9, r0
 8010cfe:	d142      	bne.n	8010d86 <_malloc_r+0xea>
 8010d00:	6821      	ldr	r1, [r4, #0]
 8010d02:	1a6d      	subs	r5, r5, r1
 8010d04:	4629      	mov	r1, r5
 8010d06:	4630      	mov	r0, r6
 8010d08:	f7ff ffa6 	bl	8010c58 <sbrk_aligned>
 8010d0c:	3001      	adds	r0, #1
 8010d0e:	d03a      	beq.n	8010d86 <_malloc_r+0xea>
 8010d10:	6823      	ldr	r3, [r4, #0]
 8010d12:	442b      	add	r3, r5
 8010d14:	6023      	str	r3, [r4, #0]
 8010d16:	f8d8 3000 	ldr.w	r3, [r8]
 8010d1a:	685a      	ldr	r2, [r3, #4]
 8010d1c:	bb62      	cbnz	r2, 8010d78 <_malloc_r+0xdc>
 8010d1e:	f8c8 7000 	str.w	r7, [r8]
 8010d22:	e00f      	b.n	8010d44 <_malloc_r+0xa8>
 8010d24:	6822      	ldr	r2, [r4, #0]
 8010d26:	1b52      	subs	r2, r2, r5
 8010d28:	d420      	bmi.n	8010d6c <_malloc_r+0xd0>
 8010d2a:	2a0b      	cmp	r2, #11
 8010d2c:	d917      	bls.n	8010d5e <_malloc_r+0xc2>
 8010d2e:	1961      	adds	r1, r4, r5
 8010d30:	42a3      	cmp	r3, r4
 8010d32:	6025      	str	r5, [r4, #0]
 8010d34:	bf18      	it	ne
 8010d36:	6059      	strne	r1, [r3, #4]
 8010d38:	6863      	ldr	r3, [r4, #4]
 8010d3a:	bf08      	it	eq
 8010d3c:	f8c8 1000 	streq.w	r1, [r8]
 8010d40:	5162      	str	r2, [r4, r5]
 8010d42:	604b      	str	r3, [r1, #4]
 8010d44:	4630      	mov	r0, r6
 8010d46:	f000 f841 	bl	8010dcc <__malloc_unlock>
 8010d4a:	f104 000b 	add.w	r0, r4, #11
 8010d4e:	1d23      	adds	r3, r4, #4
 8010d50:	f020 0007 	bic.w	r0, r0, #7
 8010d54:	1ac2      	subs	r2, r0, r3
 8010d56:	bf1c      	itt	ne
 8010d58:	1a1b      	subne	r3, r3, r0
 8010d5a:	50a3      	strne	r3, [r4, r2]
 8010d5c:	e7af      	b.n	8010cbe <_malloc_r+0x22>
 8010d5e:	6862      	ldr	r2, [r4, #4]
 8010d60:	42a3      	cmp	r3, r4
 8010d62:	bf0c      	ite	eq
 8010d64:	f8c8 2000 	streq.w	r2, [r8]
 8010d68:	605a      	strne	r2, [r3, #4]
 8010d6a:	e7eb      	b.n	8010d44 <_malloc_r+0xa8>
 8010d6c:	4623      	mov	r3, r4
 8010d6e:	6864      	ldr	r4, [r4, #4]
 8010d70:	e7ae      	b.n	8010cd0 <_malloc_r+0x34>
 8010d72:	463c      	mov	r4, r7
 8010d74:	687f      	ldr	r7, [r7, #4]
 8010d76:	e7b6      	b.n	8010ce6 <_malloc_r+0x4a>
 8010d78:	461a      	mov	r2, r3
 8010d7a:	685b      	ldr	r3, [r3, #4]
 8010d7c:	42a3      	cmp	r3, r4
 8010d7e:	d1fb      	bne.n	8010d78 <_malloc_r+0xdc>
 8010d80:	2300      	movs	r3, #0
 8010d82:	6053      	str	r3, [r2, #4]
 8010d84:	e7de      	b.n	8010d44 <_malloc_r+0xa8>
 8010d86:	230c      	movs	r3, #12
 8010d88:	6033      	str	r3, [r6, #0]
 8010d8a:	4630      	mov	r0, r6
 8010d8c:	f000 f81e 	bl	8010dcc <__malloc_unlock>
 8010d90:	e794      	b.n	8010cbc <_malloc_r+0x20>
 8010d92:	6005      	str	r5, [r0, #0]
 8010d94:	e7d6      	b.n	8010d44 <_malloc_r+0xa8>
 8010d96:	bf00      	nop
 8010d98:	20000ac0 	.word	0x20000ac0

08010d9c <__ascii_mbtowc>:
 8010d9c:	b082      	sub	sp, #8
 8010d9e:	b901      	cbnz	r1, 8010da2 <__ascii_mbtowc+0x6>
 8010da0:	a901      	add	r1, sp, #4
 8010da2:	b142      	cbz	r2, 8010db6 <__ascii_mbtowc+0x1a>
 8010da4:	b14b      	cbz	r3, 8010dba <__ascii_mbtowc+0x1e>
 8010da6:	7813      	ldrb	r3, [r2, #0]
 8010da8:	600b      	str	r3, [r1, #0]
 8010daa:	7812      	ldrb	r2, [r2, #0]
 8010dac:	1e10      	subs	r0, r2, #0
 8010dae:	bf18      	it	ne
 8010db0:	2001      	movne	r0, #1
 8010db2:	b002      	add	sp, #8
 8010db4:	4770      	bx	lr
 8010db6:	4610      	mov	r0, r2
 8010db8:	e7fb      	b.n	8010db2 <__ascii_mbtowc+0x16>
 8010dba:	f06f 0001 	mvn.w	r0, #1
 8010dbe:	e7f8      	b.n	8010db2 <__ascii_mbtowc+0x16>

08010dc0 <__malloc_lock>:
 8010dc0:	4801      	ldr	r0, [pc, #4]	@ (8010dc8 <__malloc_lock+0x8>)
 8010dc2:	f7fe bd50 	b.w	800f866 <__retarget_lock_acquire_recursive>
 8010dc6:	bf00      	nop
 8010dc8:	20000ab8 	.word	0x20000ab8

08010dcc <__malloc_unlock>:
 8010dcc:	4801      	ldr	r0, [pc, #4]	@ (8010dd4 <__malloc_unlock+0x8>)
 8010dce:	f7fe bd4b 	b.w	800f868 <__retarget_lock_release_recursive>
 8010dd2:	bf00      	nop
 8010dd4:	20000ab8 	.word	0x20000ab8

08010dd8 <_Balloc>:
 8010dd8:	b570      	push	{r4, r5, r6, lr}
 8010dda:	69c6      	ldr	r6, [r0, #28]
 8010ddc:	4604      	mov	r4, r0
 8010dde:	460d      	mov	r5, r1
 8010de0:	b976      	cbnz	r6, 8010e00 <_Balloc+0x28>
 8010de2:	2010      	movs	r0, #16
 8010de4:	f7ff ff30 	bl	8010c48 <malloc>
 8010de8:	4602      	mov	r2, r0
 8010dea:	61e0      	str	r0, [r4, #28]
 8010dec:	b920      	cbnz	r0, 8010df8 <_Balloc+0x20>
 8010dee:	4b18      	ldr	r3, [pc, #96]	@ (8010e50 <_Balloc+0x78>)
 8010df0:	4818      	ldr	r0, [pc, #96]	@ (8010e54 <_Balloc+0x7c>)
 8010df2:	216b      	movs	r1, #107	@ 0x6b
 8010df4:	f000 ff58 	bl	8011ca8 <__assert_func>
 8010df8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010dfc:	6006      	str	r6, [r0, #0]
 8010dfe:	60c6      	str	r6, [r0, #12]
 8010e00:	69e6      	ldr	r6, [r4, #28]
 8010e02:	68f3      	ldr	r3, [r6, #12]
 8010e04:	b183      	cbz	r3, 8010e28 <_Balloc+0x50>
 8010e06:	69e3      	ldr	r3, [r4, #28]
 8010e08:	68db      	ldr	r3, [r3, #12]
 8010e0a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010e0e:	b9b8      	cbnz	r0, 8010e40 <_Balloc+0x68>
 8010e10:	2101      	movs	r1, #1
 8010e12:	fa01 f605 	lsl.w	r6, r1, r5
 8010e16:	1d72      	adds	r2, r6, #5
 8010e18:	0092      	lsls	r2, r2, #2
 8010e1a:	4620      	mov	r0, r4
 8010e1c:	f000 ff62 	bl	8011ce4 <_calloc_r>
 8010e20:	b160      	cbz	r0, 8010e3c <_Balloc+0x64>
 8010e22:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010e26:	e00e      	b.n	8010e46 <_Balloc+0x6e>
 8010e28:	2221      	movs	r2, #33	@ 0x21
 8010e2a:	2104      	movs	r1, #4
 8010e2c:	4620      	mov	r0, r4
 8010e2e:	f000 ff59 	bl	8011ce4 <_calloc_r>
 8010e32:	69e3      	ldr	r3, [r4, #28]
 8010e34:	60f0      	str	r0, [r6, #12]
 8010e36:	68db      	ldr	r3, [r3, #12]
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d1e4      	bne.n	8010e06 <_Balloc+0x2e>
 8010e3c:	2000      	movs	r0, #0
 8010e3e:	bd70      	pop	{r4, r5, r6, pc}
 8010e40:	6802      	ldr	r2, [r0, #0]
 8010e42:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010e46:	2300      	movs	r3, #0
 8010e48:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010e4c:	e7f7      	b.n	8010e3e <_Balloc+0x66>
 8010e4e:	bf00      	nop
 8010e50:	0801278e 	.word	0x0801278e
 8010e54:	0801286e 	.word	0x0801286e

08010e58 <_Bfree>:
 8010e58:	b570      	push	{r4, r5, r6, lr}
 8010e5a:	69c6      	ldr	r6, [r0, #28]
 8010e5c:	4605      	mov	r5, r0
 8010e5e:	460c      	mov	r4, r1
 8010e60:	b976      	cbnz	r6, 8010e80 <_Bfree+0x28>
 8010e62:	2010      	movs	r0, #16
 8010e64:	f7ff fef0 	bl	8010c48 <malloc>
 8010e68:	4602      	mov	r2, r0
 8010e6a:	61e8      	str	r0, [r5, #28]
 8010e6c:	b920      	cbnz	r0, 8010e78 <_Bfree+0x20>
 8010e6e:	4b09      	ldr	r3, [pc, #36]	@ (8010e94 <_Bfree+0x3c>)
 8010e70:	4809      	ldr	r0, [pc, #36]	@ (8010e98 <_Bfree+0x40>)
 8010e72:	218f      	movs	r1, #143	@ 0x8f
 8010e74:	f000 ff18 	bl	8011ca8 <__assert_func>
 8010e78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010e7c:	6006      	str	r6, [r0, #0]
 8010e7e:	60c6      	str	r6, [r0, #12]
 8010e80:	b13c      	cbz	r4, 8010e92 <_Bfree+0x3a>
 8010e82:	69eb      	ldr	r3, [r5, #28]
 8010e84:	6862      	ldr	r2, [r4, #4]
 8010e86:	68db      	ldr	r3, [r3, #12]
 8010e88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010e8c:	6021      	str	r1, [r4, #0]
 8010e8e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010e92:	bd70      	pop	{r4, r5, r6, pc}
 8010e94:	0801278e 	.word	0x0801278e
 8010e98:	0801286e 	.word	0x0801286e

08010e9c <__multadd>:
 8010e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ea0:	690d      	ldr	r5, [r1, #16]
 8010ea2:	4607      	mov	r7, r0
 8010ea4:	460c      	mov	r4, r1
 8010ea6:	461e      	mov	r6, r3
 8010ea8:	f101 0c14 	add.w	ip, r1, #20
 8010eac:	2000      	movs	r0, #0
 8010eae:	f8dc 3000 	ldr.w	r3, [ip]
 8010eb2:	b299      	uxth	r1, r3
 8010eb4:	fb02 6101 	mla	r1, r2, r1, r6
 8010eb8:	0c1e      	lsrs	r6, r3, #16
 8010eba:	0c0b      	lsrs	r3, r1, #16
 8010ebc:	fb02 3306 	mla	r3, r2, r6, r3
 8010ec0:	b289      	uxth	r1, r1
 8010ec2:	3001      	adds	r0, #1
 8010ec4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010ec8:	4285      	cmp	r5, r0
 8010eca:	f84c 1b04 	str.w	r1, [ip], #4
 8010ece:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010ed2:	dcec      	bgt.n	8010eae <__multadd+0x12>
 8010ed4:	b30e      	cbz	r6, 8010f1a <__multadd+0x7e>
 8010ed6:	68a3      	ldr	r3, [r4, #8]
 8010ed8:	42ab      	cmp	r3, r5
 8010eda:	dc19      	bgt.n	8010f10 <__multadd+0x74>
 8010edc:	6861      	ldr	r1, [r4, #4]
 8010ede:	4638      	mov	r0, r7
 8010ee0:	3101      	adds	r1, #1
 8010ee2:	f7ff ff79 	bl	8010dd8 <_Balloc>
 8010ee6:	4680      	mov	r8, r0
 8010ee8:	b928      	cbnz	r0, 8010ef6 <__multadd+0x5a>
 8010eea:	4602      	mov	r2, r0
 8010eec:	4b0c      	ldr	r3, [pc, #48]	@ (8010f20 <__multadd+0x84>)
 8010eee:	480d      	ldr	r0, [pc, #52]	@ (8010f24 <__multadd+0x88>)
 8010ef0:	21ba      	movs	r1, #186	@ 0xba
 8010ef2:	f000 fed9 	bl	8011ca8 <__assert_func>
 8010ef6:	6922      	ldr	r2, [r4, #16]
 8010ef8:	3202      	adds	r2, #2
 8010efa:	f104 010c 	add.w	r1, r4, #12
 8010efe:	0092      	lsls	r2, r2, #2
 8010f00:	300c      	adds	r0, #12
 8010f02:	f7fe fcb2 	bl	800f86a <memcpy>
 8010f06:	4621      	mov	r1, r4
 8010f08:	4638      	mov	r0, r7
 8010f0a:	f7ff ffa5 	bl	8010e58 <_Bfree>
 8010f0e:	4644      	mov	r4, r8
 8010f10:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010f14:	3501      	adds	r5, #1
 8010f16:	615e      	str	r6, [r3, #20]
 8010f18:	6125      	str	r5, [r4, #16]
 8010f1a:	4620      	mov	r0, r4
 8010f1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f20:	080127fd 	.word	0x080127fd
 8010f24:	0801286e 	.word	0x0801286e

08010f28 <__s2b>:
 8010f28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010f2c:	460c      	mov	r4, r1
 8010f2e:	4615      	mov	r5, r2
 8010f30:	461f      	mov	r7, r3
 8010f32:	2209      	movs	r2, #9
 8010f34:	3308      	adds	r3, #8
 8010f36:	4606      	mov	r6, r0
 8010f38:	fb93 f3f2 	sdiv	r3, r3, r2
 8010f3c:	2100      	movs	r1, #0
 8010f3e:	2201      	movs	r2, #1
 8010f40:	429a      	cmp	r2, r3
 8010f42:	db09      	blt.n	8010f58 <__s2b+0x30>
 8010f44:	4630      	mov	r0, r6
 8010f46:	f7ff ff47 	bl	8010dd8 <_Balloc>
 8010f4a:	b940      	cbnz	r0, 8010f5e <__s2b+0x36>
 8010f4c:	4602      	mov	r2, r0
 8010f4e:	4b19      	ldr	r3, [pc, #100]	@ (8010fb4 <__s2b+0x8c>)
 8010f50:	4819      	ldr	r0, [pc, #100]	@ (8010fb8 <__s2b+0x90>)
 8010f52:	21d3      	movs	r1, #211	@ 0xd3
 8010f54:	f000 fea8 	bl	8011ca8 <__assert_func>
 8010f58:	0052      	lsls	r2, r2, #1
 8010f5a:	3101      	adds	r1, #1
 8010f5c:	e7f0      	b.n	8010f40 <__s2b+0x18>
 8010f5e:	9b08      	ldr	r3, [sp, #32]
 8010f60:	6143      	str	r3, [r0, #20]
 8010f62:	2d09      	cmp	r5, #9
 8010f64:	f04f 0301 	mov.w	r3, #1
 8010f68:	6103      	str	r3, [r0, #16]
 8010f6a:	dd16      	ble.n	8010f9a <__s2b+0x72>
 8010f6c:	f104 0909 	add.w	r9, r4, #9
 8010f70:	46c8      	mov	r8, r9
 8010f72:	442c      	add	r4, r5
 8010f74:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010f78:	4601      	mov	r1, r0
 8010f7a:	3b30      	subs	r3, #48	@ 0x30
 8010f7c:	220a      	movs	r2, #10
 8010f7e:	4630      	mov	r0, r6
 8010f80:	f7ff ff8c 	bl	8010e9c <__multadd>
 8010f84:	45a0      	cmp	r8, r4
 8010f86:	d1f5      	bne.n	8010f74 <__s2b+0x4c>
 8010f88:	f1a5 0408 	sub.w	r4, r5, #8
 8010f8c:	444c      	add	r4, r9
 8010f8e:	1b2d      	subs	r5, r5, r4
 8010f90:	1963      	adds	r3, r4, r5
 8010f92:	42bb      	cmp	r3, r7
 8010f94:	db04      	blt.n	8010fa0 <__s2b+0x78>
 8010f96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010f9a:	340a      	adds	r4, #10
 8010f9c:	2509      	movs	r5, #9
 8010f9e:	e7f6      	b.n	8010f8e <__s2b+0x66>
 8010fa0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010fa4:	4601      	mov	r1, r0
 8010fa6:	3b30      	subs	r3, #48	@ 0x30
 8010fa8:	220a      	movs	r2, #10
 8010faa:	4630      	mov	r0, r6
 8010fac:	f7ff ff76 	bl	8010e9c <__multadd>
 8010fb0:	e7ee      	b.n	8010f90 <__s2b+0x68>
 8010fb2:	bf00      	nop
 8010fb4:	080127fd 	.word	0x080127fd
 8010fb8:	0801286e 	.word	0x0801286e

08010fbc <__hi0bits>:
 8010fbc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8010fc0:	4603      	mov	r3, r0
 8010fc2:	bf36      	itet	cc
 8010fc4:	0403      	lslcc	r3, r0, #16
 8010fc6:	2000      	movcs	r0, #0
 8010fc8:	2010      	movcc	r0, #16
 8010fca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010fce:	bf3c      	itt	cc
 8010fd0:	021b      	lslcc	r3, r3, #8
 8010fd2:	3008      	addcc	r0, #8
 8010fd4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010fd8:	bf3c      	itt	cc
 8010fda:	011b      	lslcc	r3, r3, #4
 8010fdc:	3004      	addcc	r0, #4
 8010fde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010fe2:	bf3c      	itt	cc
 8010fe4:	009b      	lslcc	r3, r3, #2
 8010fe6:	3002      	addcc	r0, #2
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	db05      	blt.n	8010ff8 <__hi0bits+0x3c>
 8010fec:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8010ff0:	f100 0001 	add.w	r0, r0, #1
 8010ff4:	bf08      	it	eq
 8010ff6:	2020      	moveq	r0, #32
 8010ff8:	4770      	bx	lr

08010ffa <__lo0bits>:
 8010ffa:	6803      	ldr	r3, [r0, #0]
 8010ffc:	4602      	mov	r2, r0
 8010ffe:	f013 0007 	ands.w	r0, r3, #7
 8011002:	d00b      	beq.n	801101c <__lo0bits+0x22>
 8011004:	07d9      	lsls	r1, r3, #31
 8011006:	d421      	bmi.n	801104c <__lo0bits+0x52>
 8011008:	0798      	lsls	r0, r3, #30
 801100a:	bf49      	itett	mi
 801100c:	085b      	lsrmi	r3, r3, #1
 801100e:	089b      	lsrpl	r3, r3, #2
 8011010:	2001      	movmi	r0, #1
 8011012:	6013      	strmi	r3, [r2, #0]
 8011014:	bf5c      	itt	pl
 8011016:	6013      	strpl	r3, [r2, #0]
 8011018:	2002      	movpl	r0, #2
 801101a:	4770      	bx	lr
 801101c:	b299      	uxth	r1, r3
 801101e:	b909      	cbnz	r1, 8011024 <__lo0bits+0x2a>
 8011020:	0c1b      	lsrs	r3, r3, #16
 8011022:	2010      	movs	r0, #16
 8011024:	b2d9      	uxtb	r1, r3
 8011026:	b909      	cbnz	r1, 801102c <__lo0bits+0x32>
 8011028:	3008      	adds	r0, #8
 801102a:	0a1b      	lsrs	r3, r3, #8
 801102c:	0719      	lsls	r1, r3, #28
 801102e:	bf04      	itt	eq
 8011030:	091b      	lsreq	r3, r3, #4
 8011032:	3004      	addeq	r0, #4
 8011034:	0799      	lsls	r1, r3, #30
 8011036:	bf04      	itt	eq
 8011038:	089b      	lsreq	r3, r3, #2
 801103a:	3002      	addeq	r0, #2
 801103c:	07d9      	lsls	r1, r3, #31
 801103e:	d403      	bmi.n	8011048 <__lo0bits+0x4e>
 8011040:	085b      	lsrs	r3, r3, #1
 8011042:	f100 0001 	add.w	r0, r0, #1
 8011046:	d003      	beq.n	8011050 <__lo0bits+0x56>
 8011048:	6013      	str	r3, [r2, #0]
 801104a:	4770      	bx	lr
 801104c:	2000      	movs	r0, #0
 801104e:	4770      	bx	lr
 8011050:	2020      	movs	r0, #32
 8011052:	4770      	bx	lr

08011054 <__i2b>:
 8011054:	b510      	push	{r4, lr}
 8011056:	460c      	mov	r4, r1
 8011058:	2101      	movs	r1, #1
 801105a:	f7ff febd 	bl	8010dd8 <_Balloc>
 801105e:	4602      	mov	r2, r0
 8011060:	b928      	cbnz	r0, 801106e <__i2b+0x1a>
 8011062:	4b05      	ldr	r3, [pc, #20]	@ (8011078 <__i2b+0x24>)
 8011064:	4805      	ldr	r0, [pc, #20]	@ (801107c <__i2b+0x28>)
 8011066:	f240 1145 	movw	r1, #325	@ 0x145
 801106a:	f000 fe1d 	bl	8011ca8 <__assert_func>
 801106e:	2301      	movs	r3, #1
 8011070:	6144      	str	r4, [r0, #20]
 8011072:	6103      	str	r3, [r0, #16]
 8011074:	bd10      	pop	{r4, pc}
 8011076:	bf00      	nop
 8011078:	080127fd 	.word	0x080127fd
 801107c:	0801286e 	.word	0x0801286e

08011080 <__multiply>:
 8011080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011084:	4614      	mov	r4, r2
 8011086:	690a      	ldr	r2, [r1, #16]
 8011088:	6923      	ldr	r3, [r4, #16]
 801108a:	429a      	cmp	r2, r3
 801108c:	bfa8      	it	ge
 801108e:	4623      	movge	r3, r4
 8011090:	460f      	mov	r7, r1
 8011092:	bfa4      	itt	ge
 8011094:	460c      	movge	r4, r1
 8011096:	461f      	movge	r7, r3
 8011098:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801109c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80110a0:	68a3      	ldr	r3, [r4, #8]
 80110a2:	6861      	ldr	r1, [r4, #4]
 80110a4:	eb0a 0609 	add.w	r6, sl, r9
 80110a8:	42b3      	cmp	r3, r6
 80110aa:	b085      	sub	sp, #20
 80110ac:	bfb8      	it	lt
 80110ae:	3101      	addlt	r1, #1
 80110b0:	f7ff fe92 	bl	8010dd8 <_Balloc>
 80110b4:	b930      	cbnz	r0, 80110c4 <__multiply+0x44>
 80110b6:	4602      	mov	r2, r0
 80110b8:	4b44      	ldr	r3, [pc, #272]	@ (80111cc <__multiply+0x14c>)
 80110ba:	4845      	ldr	r0, [pc, #276]	@ (80111d0 <__multiply+0x150>)
 80110bc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80110c0:	f000 fdf2 	bl	8011ca8 <__assert_func>
 80110c4:	f100 0514 	add.w	r5, r0, #20
 80110c8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80110cc:	462b      	mov	r3, r5
 80110ce:	2200      	movs	r2, #0
 80110d0:	4543      	cmp	r3, r8
 80110d2:	d321      	bcc.n	8011118 <__multiply+0x98>
 80110d4:	f107 0114 	add.w	r1, r7, #20
 80110d8:	f104 0214 	add.w	r2, r4, #20
 80110dc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80110e0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80110e4:	9302      	str	r3, [sp, #8]
 80110e6:	1b13      	subs	r3, r2, r4
 80110e8:	3b15      	subs	r3, #21
 80110ea:	f023 0303 	bic.w	r3, r3, #3
 80110ee:	3304      	adds	r3, #4
 80110f0:	f104 0715 	add.w	r7, r4, #21
 80110f4:	42ba      	cmp	r2, r7
 80110f6:	bf38      	it	cc
 80110f8:	2304      	movcc	r3, #4
 80110fa:	9301      	str	r3, [sp, #4]
 80110fc:	9b02      	ldr	r3, [sp, #8]
 80110fe:	9103      	str	r1, [sp, #12]
 8011100:	428b      	cmp	r3, r1
 8011102:	d80c      	bhi.n	801111e <__multiply+0x9e>
 8011104:	2e00      	cmp	r6, #0
 8011106:	dd03      	ble.n	8011110 <__multiply+0x90>
 8011108:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801110c:	2b00      	cmp	r3, #0
 801110e:	d05b      	beq.n	80111c8 <__multiply+0x148>
 8011110:	6106      	str	r6, [r0, #16]
 8011112:	b005      	add	sp, #20
 8011114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011118:	f843 2b04 	str.w	r2, [r3], #4
 801111c:	e7d8      	b.n	80110d0 <__multiply+0x50>
 801111e:	f8b1 a000 	ldrh.w	sl, [r1]
 8011122:	f1ba 0f00 	cmp.w	sl, #0
 8011126:	d024      	beq.n	8011172 <__multiply+0xf2>
 8011128:	f104 0e14 	add.w	lr, r4, #20
 801112c:	46a9      	mov	r9, r5
 801112e:	f04f 0c00 	mov.w	ip, #0
 8011132:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011136:	f8d9 3000 	ldr.w	r3, [r9]
 801113a:	fa1f fb87 	uxth.w	fp, r7
 801113e:	b29b      	uxth	r3, r3
 8011140:	fb0a 330b 	mla	r3, sl, fp, r3
 8011144:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8011148:	f8d9 7000 	ldr.w	r7, [r9]
 801114c:	4463      	add	r3, ip
 801114e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8011152:	fb0a c70b 	mla	r7, sl, fp, ip
 8011156:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801115a:	b29b      	uxth	r3, r3
 801115c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011160:	4572      	cmp	r2, lr
 8011162:	f849 3b04 	str.w	r3, [r9], #4
 8011166:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801116a:	d8e2      	bhi.n	8011132 <__multiply+0xb2>
 801116c:	9b01      	ldr	r3, [sp, #4]
 801116e:	f845 c003 	str.w	ip, [r5, r3]
 8011172:	9b03      	ldr	r3, [sp, #12]
 8011174:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8011178:	3104      	adds	r1, #4
 801117a:	f1b9 0f00 	cmp.w	r9, #0
 801117e:	d021      	beq.n	80111c4 <__multiply+0x144>
 8011180:	682b      	ldr	r3, [r5, #0]
 8011182:	f104 0c14 	add.w	ip, r4, #20
 8011186:	46ae      	mov	lr, r5
 8011188:	f04f 0a00 	mov.w	sl, #0
 801118c:	f8bc b000 	ldrh.w	fp, [ip]
 8011190:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8011194:	fb09 770b 	mla	r7, r9, fp, r7
 8011198:	4457      	add	r7, sl
 801119a:	b29b      	uxth	r3, r3
 801119c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80111a0:	f84e 3b04 	str.w	r3, [lr], #4
 80111a4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80111a8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80111ac:	f8be 3000 	ldrh.w	r3, [lr]
 80111b0:	fb09 330a 	mla	r3, r9, sl, r3
 80111b4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80111b8:	4562      	cmp	r2, ip
 80111ba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80111be:	d8e5      	bhi.n	801118c <__multiply+0x10c>
 80111c0:	9f01      	ldr	r7, [sp, #4]
 80111c2:	51eb      	str	r3, [r5, r7]
 80111c4:	3504      	adds	r5, #4
 80111c6:	e799      	b.n	80110fc <__multiply+0x7c>
 80111c8:	3e01      	subs	r6, #1
 80111ca:	e79b      	b.n	8011104 <__multiply+0x84>
 80111cc:	080127fd 	.word	0x080127fd
 80111d0:	0801286e 	.word	0x0801286e

080111d4 <__pow5mult>:
 80111d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80111d8:	4615      	mov	r5, r2
 80111da:	f012 0203 	ands.w	r2, r2, #3
 80111de:	4607      	mov	r7, r0
 80111e0:	460e      	mov	r6, r1
 80111e2:	d007      	beq.n	80111f4 <__pow5mult+0x20>
 80111e4:	4c25      	ldr	r4, [pc, #148]	@ (801127c <__pow5mult+0xa8>)
 80111e6:	3a01      	subs	r2, #1
 80111e8:	2300      	movs	r3, #0
 80111ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80111ee:	f7ff fe55 	bl	8010e9c <__multadd>
 80111f2:	4606      	mov	r6, r0
 80111f4:	10ad      	asrs	r5, r5, #2
 80111f6:	d03d      	beq.n	8011274 <__pow5mult+0xa0>
 80111f8:	69fc      	ldr	r4, [r7, #28]
 80111fa:	b97c      	cbnz	r4, 801121c <__pow5mult+0x48>
 80111fc:	2010      	movs	r0, #16
 80111fe:	f7ff fd23 	bl	8010c48 <malloc>
 8011202:	4602      	mov	r2, r0
 8011204:	61f8      	str	r0, [r7, #28]
 8011206:	b928      	cbnz	r0, 8011214 <__pow5mult+0x40>
 8011208:	4b1d      	ldr	r3, [pc, #116]	@ (8011280 <__pow5mult+0xac>)
 801120a:	481e      	ldr	r0, [pc, #120]	@ (8011284 <__pow5mult+0xb0>)
 801120c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8011210:	f000 fd4a 	bl	8011ca8 <__assert_func>
 8011214:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011218:	6004      	str	r4, [r0, #0]
 801121a:	60c4      	str	r4, [r0, #12]
 801121c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8011220:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011224:	b94c      	cbnz	r4, 801123a <__pow5mult+0x66>
 8011226:	f240 2171 	movw	r1, #625	@ 0x271
 801122a:	4638      	mov	r0, r7
 801122c:	f7ff ff12 	bl	8011054 <__i2b>
 8011230:	2300      	movs	r3, #0
 8011232:	f8c8 0008 	str.w	r0, [r8, #8]
 8011236:	4604      	mov	r4, r0
 8011238:	6003      	str	r3, [r0, #0]
 801123a:	f04f 0900 	mov.w	r9, #0
 801123e:	07eb      	lsls	r3, r5, #31
 8011240:	d50a      	bpl.n	8011258 <__pow5mult+0x84>
 8011242:	4631      	mov	r1, r6
 8011244:	4622      	mov	r2, r4
 8011246:	4638      	mov	r0, r7
 8011248:	f7ff ff1a 	bl	8011080 <__multiply>
 801124c:	4631      	mov	r1, r6
 801124e:	4680      	mov	r8, r0
 8011250:	4638      	mov	r0, r7
 8011252:	f7ff fe01 	bl	8010e58 <_Bfree>
 8011256:	4646      	mov	r6, r8
 8011258:	106d      	asrs	r5, r5, #1
 801125a:	d00b      	beq.n	8011274 <__pow5mult+0xa0>
 801125c:	6820      	ldr	r0, [r4, #0]
 801125e:	b938      	cbnz	r0, 8011270 <__pow5mult+0x9c>
 8011260:	4622      	mov	r2, r4
 8011262:	4621      	mov	r1, r4
 8011264:	4638      	mov	r0, r7
 8011266:	f7ff ff0b 	bl	8011080 <__multiply>
 801126a:	6020      	str	r0, [r4, #0]
 801126c:	f8c0 9000 	str.w	r9, [r0]
 8011270:	4604      	mov	r4, r0
 8011272:	e7e4      	b.n	801123e <__pow5mult+0x6a>
 8011274:	4630      	mov	r0, r6
 8011276:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801127a:	bf00      	nop
 801127c:	080128c8 	.word	0x080128c8
 8011280:	0801278e 	.word	0x0801278e
 8011284:	0801286e 	.word	0x0801286e

08011288 <__lshift>:
 8011288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801128c:	460c      	mov	r4, r1
 801128e:	6849      	ldr	r1, [r1, #4]
 8011290:	6923      	ldr	r3, [r4, #16]
 8011292:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011296:	68a3      	ldr	r3, [r4, #8]
 8011298:	4607      	mov	r7, r0
 801129a:	4691      	mov	r9, r2
 801129c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80112a0:	f108 0601 	add.w	r6, r8, #1
 80112a4:	42b3      	cmp	r3, r6
 80112a6:	db0b      	blt.n	80112c0 <__lshift+0x38>
 80112a8:	4638      	mov	r0, r7
 80112aa:	f7ff fd95 	bl	8010dd8 <_Balloc>
 80112ae:	4605      	mov	r5, r0
 80112b0:	b948      	cbnz	r0, 80112c6 <__lshift+0x3e>
 80112b2:	4602      	mov	r2, r0
 80112b4:	4b28      	ldr	r3, [pc, #160]	@ (8011358 <__lshift+0xd0>)
 80112b6:	4829      	ldr	r0, [pc, #164]	@ (801135c <__lshift+0xd4>)
 80112b8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80112bc:	f000 fcf4 	bl	8011ca8 <__assert_func>
 80112c0:	3101      	adds	r1, #1
 80112c2:	005b      	lsls	r3, r3, #1
 80112c4:	e7ee      	b.n	80112a4 <__lshift+0x1c>
 80112c6:	2300      	movs	r3, #0
 80112c8:	f100 0114 	add.w	r1, r0, #20
 80112cc:	f100 0210 	add.w	r2, r0, #16
 80112d0:	4618      	mov	r0, r3
 80112d2:	4553      	cmp	r3, sl
 80112d4:	db33      	blt.n	801133e <__lshift+0xb6>
 80112d6:	6920      	ldr	r0, [r4, #16]
 80112d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80112dc:	f104 0314 	add.w	r3, r4, #20
 80112e0:	f019 091f 	ands.w	r9, r9, #31
 80112e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80112e8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80112ec:	d02b      	beq.n	8011346 <__lshift+0xbe>
 80112ee:	f1c9 0e20 	rsb	lr, r9, #32
 80112f2:	468a      	mov	sl, r1
 80112f4:	2200      	movs	r2, #0
 80112f6:	6818      	ldr	r0, [r3, #0]
 80112f8:	fa00 f009 	lsl.w	r0, r0, r9
 80112fc:	4310      	orrs	r0, r2
 80112fe:	f84a 0b04 	str.w	r0, [sl], #4
 8011302:	f853 2b04 	ldr.w	r2, [r3], #4
 8011306:	459c      	cmp	ip, r3
 8011308:	fa22 f20e 	lsr.w	r2, r2, lr
 801130c:	d8f3      	bhi.n	80112f6 <__lshift+0x6e>
 801130e:	ebac 0304 	sub.w	r3, ip, r4
 8011312:	3b15      	subs	r3, #21
 8011314:	f023 0303 	bic.w	r3, r3, #3
 8011318:	3304      	adds	r3, #4
 801131a:	f104 0015 	add.w	r0, r4, #21
 801131e:	4584      	cmp	ip, r0
 8011320:	bf38      	it	cc
 8011322:	2304      	movcc	r3, #4
 8011324:	50ca      	str	r2, [r1, r3]
 8011326:	b10a      	cbz	r2, 801132c <__lshift+0xa4>
 8011328:	f108 0602 	add.w	r6, r8, #2
 801132c:	3e01      	subs	r6, #1
 801132e:	4638      	mov	r0, r7
 8011330:	612e      	str	r6, [r5, #16]
 8011332:	4621      	mov	r1, r4
 8011334:	f7ff fd90 	bl	8010e58 <_Bfree>
 8011338:	4628      	mov	r0, r5
 801133a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801133e:	f842 0f04 	str.w	r0, [r2, #4]!
 8011342:	3301      	adds	r3, #1
 8011344:	e7c5      	b.n	80112d2 <__lshift+0x4a>
 8011346:	3904      	subs	r1, #4
 8011348:	f853 2b04 	ldr.w	r2, [r3], #4
 801134c:	f841 2f04 	str.w	r2, [r1, #4]!
 8011350:	459c      	cmp	ip, r3
 8011352:	d8f9      	bhi.n	8011348 <__lshift+0xc0>
 8011354:	e7ea      	b.n	801132c <__lshift+0xa4>
 8011356:	bf00      	nop
 8011358:	080127fd 	.word	0x080127fd
 801135c:	0801286e 	.word	0x0801286e

08011360 <__mcmp>:
 8011360:	690a      	ldr	r2, [r1, #16]
 8011362:	4603      	mov	r3, r0
 8011364:	6900      	ldr	r0, [r0, #16]
 8011366:	1a80      	subs	r0, r0, r2
 8011368:	b530      	push	{r4, r5, lr}
 801136a:	d10e      	bne.n	801138a <__mcmp+0x2a>
 801136c:	3314      	adds	r3, #20
 801136e:	3114      	adds	r1, #20
 8011370:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8011374:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011378:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801137c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011380:	4295      	cmp	r5, r2
 8011382:	d003      	beq.n	801138c <__mcmp+0x2c>
 8011384:	d205      	bcs.n	8011392 <__mcmp+0x32>
 8011386:	f04f 30ff 	mov.w	r0, #4294967295
 801138a:	bd30      	pop	{r4, r5, pc}
 801138c:	42a3      	cmp	r3, r4
 801138e:	d3f3      	bcc.n	8011378 <__mcmp+0x18>
 8011390:	e7fb      	b.n	801138a <__mcmp+0x2a>
 8011392:	2001      	movs	r0, #1
 8011394:	e7f9      	b.n	801138a <__mcmp+0x2a>
	...

08011398 <__mdiff>:
 8011398:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801139c:	4689      	mov	r9, r1
 801139e:	4606      	mov	r6, r0
 80113a0:	4611      	mov	r1, r2
 80113a2:	4648      	mov	r0, r9
 80113a4:	4614      	mov	r4, r2
 80113a6:	f7ff ffdb 	bl	8011360 <__mcmp>
 80113aa:	1e05      	subs	r5, r0, #0
 80113ac:	d112      	bne.n	80113d4 <__mdiff+0x3c>
 80113ae:	4629      	mov	r1, r5
 80113b0:	4630      	mov	r0, r6
 80113b2:	f7ff fd11 	bl	8010dd8 <_Balloc>
 80113b6:	4602      	mov	r2, r0
 80113b8:	b928      	cbnz	r0, 80113c6 <__mdiff+0x2e>
 80113ba:	4b3f      	ldr	r3, [pc, #252]	@ (80114b8 <__mdiff+0x120>)
 80113bc:	f240 2137 	movw	r1, #567	@ 0x237
 80113c0:	483e      	ldr	r0, [pc, #248]	@ (80114bc <__mdiff+0x124>)
 80113c2:	f000 fc71 	bl	8011ca8 <__assert_func>
 80113c6:	2301      	movs	r3, #1
 80113c8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80113cc:	4610      	mov	r0, r2
 80113ce:	b003      	add	sp, #12
 80113d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113d4:	bfbc      	itt	lt
 80113d6:	464b      	movlt	r3, r9
 80113d8:	46a1      	movlt	r9, r4
 80113da:	4630      	mov	r0, r6
 80113dc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80113e0:	bfba      	itte	lt
 80113e2:	461c      	movlt	r4, r3
 80113e4:	2501      	movlt	r5, #1
 80113e6:	2500      	movge	r5, #0
 80113e8:	f7ff fcf6 	bl	8010dd8 <_Balloc>
 80113ec:	4602      	mov	r2, r0
 80113ee:	b918      	cbnz	r0, 80113f8 <__mdiff+0x60>
 80113f0:	4b31      	ldr	r3, [pc, #196]	@ (80114b8 <__mdiff+0x120>)
 80113f2:	f240 2145 	movw	r1, #581	@ 0x245
 80113f6:	e7e3      	b.n	80113c0 <__mdiff+0x28>
 80113f8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80113fc:	6926      	ldr	r6, [r4, #16]
 80113fe:	60c5      	str	r5, [r0, #12]
 8011400:	f109 0310 	add.w	r3, r9, #16
 8011404:	f109 0514 	add.w	r5, r9, #20
 8011408:	f104 0e14 	add.w	lr, r4, #20
 801140c:	f100 0b14 	add.w	fp, r0, #20
 8011410:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8011414:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8011418:	9301      	str	r3, [sp, #4]
 801141a:	46d9      	mov	r9, fp
 801141c:	f04f 0c00 	mov.w	ip, #0
 8011420:	9b01      	ldr	r3, [sp, #4]
 8011422:	f85e 0b04 	ldr.w	r0, [lr], #4
 8011426:	f853 af04 	ldr.w	sl, [r3, #4]!
 801142a:	9301      	str	r3, [sp, #4]
 801142c:	fa1f f38a 	uxth.w	r3, sl
 8011430:	4619      	mov	r1, r3
 8011432:	b283      	uxth	r3, r0
 8011434:	1acb      	subs	r3, r1, r3
 8011436:	0c00      	lsrs	r0, r0, #16
 8011438:	4463      	add	r3, ip
 801143a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801143e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8011442:	b29b      	uxth	r3, r3
 8011444:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8011448:	4576      	cmp	r6, lr
 801144a:	f849 3b04 	str.w	r3, [r9], #4
 801144e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011452:	d8e5      	bhi.n	8011420 <__mdiff+0x88>
 8011454:	1b33      	subs	r3, r6, r4
 8011456:	3b15      	subs	r3, #21
 8011458:	f023 0303 	bic.w	r3, r3, #3
 801145c:	3415      	adds	r4, #21
 801145e:	3304      	adds	r3, #4
 8011460:	42a6      	cmp	r6, r4
 8011462:	bf38      	it	cc
 8011464:	2304      	movcc	r3, #4
 8011466:	441d      	add	r5, r3
 8011468:	445b      	add	r3, fp
 801146a:	461e      	mov	r6, r3
 801146c:	462c      	mov	r4, r5
 801146e:	4544      	cmp	r4, r8
 8011470:	d30e      	bcc.n	8011490 <__mdiff+0xf8>
 8011472:	f108 0103 	add.w	r1, r8, #3
 8011476:	1b49      	subs	r1, r1, r5
 8011478:	f021 0103 	bic.w	r1, r1, #3
 801147c:	3d03      	subs	r5, #3
 801147e:	45a8      	cmp	r8, r5
 8011480:	bf38      	it	cc
 8011482:	2100      	movcc	r1, #0
 8011484:	440b      	add	r3, r1
 8011486:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801148a:	b191      	cbz	r1, 80114b2 <__mdiff+0x11a>
 801148c:	6117      	str	r7, [r2, #16]
 801148e:	e79d      	b.n	80113cc <__mdiff+0x34>
 8011490:	f854 1b04 	ldr.w	r1, [r4], #4
 8011494:	46e6      	mov	lr, ip
 8011496:	0c08      	lsrs	r0, r1, #16
 8011498:	fa1c fc81 	uxtah	ip, ip, r1
 801149c:	4471      	add	r1, lr
 801149e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80114a2:	b289      	uxth	r1, r1
 80114a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80114a8:	f846 1b04 	str.w	r1, [r6], #4
 80114ac:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80114b0:	e7dd      	b.n	801146e <__mdiff+0xd6>
 80114b2:	3f01      	subs	r7, #1
 80114b4:	e7e7      	b.n	8011486 <__mdiff+0xee>
 80114b6:	bf00      	nop
 80114b8:	080127fd 	.word	0x080127fd
 80114bc:	0801286e 	.word	0x0801286e

080114c0 <__ulp>:
 80114c0:	b082      	sub	sp, #8
 80114c2:	ed8d 0b00 	vstr	d0, [sp]
 80114c6:	9a01      	ldr	r2, [sp, #4]
 80114c8:	4b0f      	ldr	r3, [pc, #60]	@ (8011508 <__ulp+0x48>)
 80114ca:	4013      	ands	r3, r2
 80114cc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	dc08      	bgt.n	80114e6 <__ulp+0x26>
 80114d4:	425b      	negs	r3, r3
 80114d6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80114da:	ea4f 5223 	mov.w	r2, r3, asr #20
 80114de:	da04      	bge.n	80114ea <__ulp+0x2a>
 80114e0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80114e4:	4113      	asrs	r3, r2
 80114e6:	2200      	movs	r2, #0
 80114e8:	e008      	b.n	80114fc <__ulp+0x3c>
 80114ea:	f1a2 0314 	sub.w	r3, r2, #20
 80114ee:	2b1e      	cmp	r3, #30
 80114f0:	bfda      	itte	le
 80114f2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80114f6:	40da      	lsrle	r2, r3
 80114f8:	2201      	movgt	r2, #1
 80114fa:	2300      	movs	r3, #0
 80114fc:	4619      	mov	r1, r3
 80114fe:	4610      	mov	r0, r2
 8011500:	ec41 0b10 	vmov	d0, r0, r1
 8011504:	b002      	add	sp, #8
 8011506:	4770      	bx	lr
 8011508:	7ff00000 	.word	0x7ff00000

0801150c <__b2d>:
 801150c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011510:	6906      	ldr	r6, [r0, #16]
 8011512:	f100 0814 	add.w	r8, r0, #20
 8011516:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801151a:	1f37      	subs	r7, r6, #4
 801151c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011520:	4610      	mov	r0, r2
 8011522:	f7ff fd4b 	bl	8010fbc <__hi0bits>
 8011526:	f1c0 0320 	rsb	r3, r0, #32
 801152a:	280a      	cmp	r0, #10
 801152c:	600b      	str	r3, [r1, #0]
 801152e:	491b      	ldr	r1, [pc, #108]	@ (801159c <__b2d+0x90>)
 8011530:	dc15      	bgt.n	801155e <__b2d+0x52>
 8011532:	f1c0 0c0b 	rsb	ip, r0, #11
 8011536:	fa22 f30c 	lsr.w	r3, r2, ip
 801153a:	45b8      	cmp	r8, r7
 801153c:	ea43 0501 	orr.w	r5, r3, r1
 8011540:	bf34      	ite	cc
 8011542:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011546:	2300      	movcs	r3, #0
 8011548:	3015      	adds	r0, #21
 801154a:	fa02 f000 	lsl.w	r0, r2, r0
 801154e:	fa23 f30c 	lsr.w	r3, r3, ip
 8011552:	4303      	orrs	r3, r0
 8011554:	461c      	mov	r4, r3
 8011556:	ec45 4b10 	vmov	d0, r4, r5
 801155a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801155e:	45b8      	cmp	r8, r7
 8011560:	bf3a      	itte	cc
 8011562:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011566:	f1a6 0708 	subcc.w	r7, r6, #8
 801156a:	2300      	movcs	r3, #0
 801156c:	380b      	subs	r0, #11
 801156e:	d012      	beq.n	8011596 <__b2d+0x8a>
 8011570:	f1c0 0120 	rsb	r1, r0, #32
 8011574:	fa23 f401 	lsr.w	r4, r3, r1
 8011578:	4082      	lsls	r2, r0
 801157a:	4322      	orrs	r2, r4
 801157c:	4547      	cmp	r7, r8
 801157e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8011582:	bf8c      	ite	hi
 8011584:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8011588:	2200      	movls	r2, #0
 801158a:	4083      	lsls	r3, r0
 801158c:	40ca      	lsrs	r2, r1
 801158e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8011592:	4313      	orrs	r3, r2
 8011594:	e7de      	b.n	8011554 <__b2d+0x48>
 8011596:	ea42 0501 	orr.w	r5, r2, r1
 801159a:	e7db      	b.n	8011554 <__b2d+0x48>
 801159c:	3ff00000 	.word	0x3ff00000

080115a0 <__d2b>:
 80115a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80115a4:	460f      	mov	r7, r1
 80115a6:	2101      	movs	r1, #1
 80115a8:	ec59 8b10 	vmov	r8, r9, d0
 80115ac:	4616      	mov	r6, r2
 80115ae:	f7ff fc13 	bl	8010dd8 <_Balloc>
 80115b2:	4604      	mov	r4, r0
 80115b4:	b930      	cbnz	r0, 80115c4 <__d2b+0x24>
 80115b6:	4602      	mov	r2, r0
 80115b8:	4b23      	ldr	r3, [pc, #140]	@ (8011648 <__d2b+0xa8>)
 80115ba:	4824      	ldr	r0, [pc, #144]	@ (801164c <__d2b+0xac>)
 80115bc:	f240 310f 	movw	r1, #783	@ 0x30f
 80115c0:	f000 fb72 	bl	8011ca8 <__assert_func>
 80115c4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80115c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80115cc:	b10d      	cbz	r5, 80115d2 <__d2b+0x32>
 80115ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80115d2:	9301      	str	r3, [sp, #4]
 80115d4:	f1b8 0300 	subs.w	r3, r8, #0
 80115d8:	d023      	beq.n	8011622 <__d2b+0x82>
 80115da:	4668      	mov	r0, sp
 80115dc:	9300      	str	r3, [sp, #0]
 80115de:	f7ff fd0c 	bl	8010ffa <__lo0bits>
 80115e2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80115e6:	b1d0      	cbz	r0, 801161e <__d2b+0x7e>
 80115e8:	f1c0 0320 	rsb	r3, r0, #32
 80115ec:	fa02 f303 	lsl.w	r3, r2, r3
 80115f0:	430b      	orrs	r3, r1
 80115f2:	40c2      	lsrs	r2, r0
 80115f4:	6163      	str	r3, [r4, #20]
 80115f6:	9201      	str	r2, [sp, #4]
 80115f8:	9b01      	ldr	r3, [sp, #4]
 80115fa:	61a3      	str	r3, [r4, #24]
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	bf0c      	ite	eq
 8011600:	2201      	moveq	r2, #1
 8011602:	2202      	movne	r2, #2
 8011604:	6122      	str	r2, [r4, #16]
 8011606:	b1a5      	cbz	r5, 8011632 <__d2b+0x92>
 8011608:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801160c:	4405      	add	r5, r0
 801160e:	603d      	str	r5, [r7, #0]
 8011610:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8011614:	6030      	str	r0, [r6, #0]
 8011616:	4620      	mov	r0, r4
 8011618:	b003      	add	sp, #12
 801161a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801161e:	6161      	str	r1, [r4, #20]
 8011620:	e7ea      	b.n	80115f8 <__d2b+0x58>
 8011622:	a801      	add	r0, sp, #4
 8011624:	f7ff fce9 	bl	8010ffa <__lo0bits>
 8011628:	9b01      	ldr	r3, [sp, #4]
 801162a:	6163      	str	r3, [r4, #20]
 801162c:	3020      	adds	r0, #32
 801162e:	2201      	movs	r2, #1
 8011630:	e7e8      	b.n	8011604 <__d2b+0x64>
 8011632:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011636:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801163a:	6038      	str	r0, [r7, #0]
 801163c:	6918      	ldr	r0, [r3, #16]
 801163e:	f7ff fcbd 	bl	8010fbc <__hi0bits>
 8011642:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011646:	e7e5      	b.n	8011614 <__d2b+0x74>
 8011648:	080127fd 	.word	0x080127fd
 801164c:	0801286e 	.word	0x0801286e

08011650 <__ratio>:
 8011650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011654:	b085      	sub	sp, #20
 8011656:	e9cd 1000 	strd	r1, r0, [sp]
 801165a:	a902      	add	r1, sp, #8
 801165c:	f7ff ff56 	bl	801150c <__b2d>
 8011660:	9800      	ldr	r0, [sp, #0]
 8011662:	a903      	add	r1, sp, #12
 8011664:	ec55 4b10 	vmov	r4, r5, d0
 8011668:	f7ff ff50 	bl	801150c <__b2d>
 801166c:	9b01      	ldr	r3, [sp, #4]
 801166e:	6919      	ldr	r1, [r3, #16]
 8011670:	9b00      	ldr	r3, [sp, #0]
 8011672:	691b      	ldr	r3, [r3, #16]
 8011674:	1ac9      	subs	r1, r1, r3
 8011676:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801167a:	1a9b      	subs	r3, r3, r2
 801167c:	ec5b ab10 	vmov	sl, fp, d0
 8011680:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8011684:	2b00      	cmp	r3, #0
 8011686:	bfce      	itee	gt
 8011688:	462a      	movgt	r2, r5
 801168a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801168e:	465a      	movle	r2, fp
 8011690:	462f      	mov	r7, r5
 8011692:	46d9      	mov	r9, fp
 8011694:	bfcc      	ite	gt
 8011696:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801169a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801169e:	464b      	mov	r3, r9
 80116a0:	4652      	mov	r2, sl
 80116a2:	4620      	mov	r0, r4
 80116a4:	4639      	mov	r1, r7
 80116a6:	f7ef f8f9 	bl	800089c <__aeabi_ddiv>
 80116aa:	ec41 0b10 	vmov	d0, r0, r1
 80116ae:	b005      	add	sp, #20
 80116b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080116b4 <__copybits>:
 80116b4:	3901      	subs	r1, #1
 80116b6:	b570      	push	{r4, r5, r6, lr}
 80116b8:	1149      	asrs	r1, r1, #5
 80116ba:	6914      	ldr	r4, [r2, #16]
 80116bc:	3101      	adds	r1, #1
 80116be:	f102 0314 	add.w	r3, r2, #20
 80116c2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80116c6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80116ca:	1f05      	subs	r5, r0, #4
 80116cc:	42a3      	cmp	r3, r4
 80116ce:	d30c      	bcc.n	80116ea <__copybits+0x36>
 80116d0:	1aa3      	subs	r3, r4, r2
 80116d2:	3b11      	subs	r3, #17
 80116d4:	f023 0303 	bic.w	r3, r3, #3
 80116d8:	3211      	adds	r2, #17
 80116da:	42a2      	cmp	r2, r4
 80116dc:	bf88      	it	hi
 80116de:	2300      	movhi	r3, #0
 80116e0:	4418      	add	r0, r3
 80116e2:	2300      	movs	r3, #0
 80116e4:	4288      	cmp	r0, r1
 80116e6:	d305      	bcc.n	80116f4 <__copybits+0x40>
 80116e8:	bd70      	pop	{r4, r5, r6, pc}
 80116ea:	f853 6b04 	ldr.w	r6, [r3], #4
 80116ee:	f845 6f04 	str.w	r6, [r5, #4]!
 80116f2:	e7eb      	b.n	80116cc <__copybits+0x18>
 80116f4:	f840 3b04 	str.w	r3, [r0], #4
 80116f8:	e7f4      	b.n	80116e4 <__copybits+0x30>

080116fa <__any_on>:
 80116fa:	f100 0214 	add.w	r2, r0, #20
 80116fe:	6900      	ldr	r0, [r0, #16]
 8011700:	114b      	asrs	r3, r1, #5
 8011702:	4298      	cmp	r0, r3
 8011704:	b510      	push	{r4, lr}
 8011706:	db11      	blt.n	801172c <__any_on+0x32>
 8011708:	dd0a      	ble.n	8011720 <__any_on+0x26>
 801170a:	f011 011f 	ands.w	r1, r1, #31
 801170e:	d007      	beq.n	8011720 <__any_on+0x26>
 8011710:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011714:	fa24 f001 	lsr.w	r0, r4, r1
 8011718:	fa00 f101 	lsl.w	r1, r0, r1
 801171c:	428c      	cmp	r4, r1
 801171e:	d10b      	bne.n	8011738 <__any_on+0x3e>
 8011720:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011724:	4293      	cmp	r3, r2
 8011726:	d803      	bhi.n	8011730 <__any_on+0x36>
 8011728:	2000      	movs	r0, #0
 801172a:	bd10      	pop	{r4, pc}
 801172c:	4603      	mov	r3, r0
 801172e:	e7f7      	b.n	8011720 <__any_on+0x26>
 8011730:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011734:	2900      	cmp	r1, #0
 8011736:	d0f5      	beq.n	8011724 <__any_on+0x2a>
 8011738:	2001      	movs	r0, #1
 801173a:	e7f6      	b.n	801172a <__any_on+0x30>

0801173c <_strtol_l.constprop.0>:
 801173c:	2b24      	cmp	r3, #36	@ 0x24
 801173e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011742:	4686      	mov	lr, r0
 8011744:	4690      	mov	r8, r2
 8011746:	d801      	bhi.n	801174c <_strtol_l.constprop.0+0x10>
 8011748:	2b01      	cmp	r3, #1
 801174a:	d106      	bne.n	801175a <_strtol_l.constprop.0+0x1e>
 801174c:	f7fe f860 	bl	800f810 <__errno>
 8011750:	2316      	movs	r3, #22
 8011752:	6003      	str	r3, [r0, #0]
 8011754:	2000      	movs	r0, #0
 8011756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801175a:	4834      	ldr	r0, [pc, #208]	@ (801182c <_strtol_l.constprop.0+0xf0>)
 801175c:	460d      	mov	r5, r1
 801175e:	462a      	mov	r2, r5
 8011760:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011764:	5d06      	ldrb	r6, [r0, r4]
 8011766:	f016 0608 	ands.w	r6, r6, #8
 801176a:	d1f8      	bne.n	801175e <_strtol_l.constprop.0+0x22>
 801176c:	2c2d      	cmp	r4, #45	@ 0x2d
 801176e:	d12d      	bne.n	80117cc <_strtol_l.constprop.0+0x90>
 8011770:	782c      	ldrb	r4, [r5, #0]
 8011772:	2601      	movs	r6, #1
 8011774:	1c95      	adds	r5, r2, #2
 8011776:	f033 0210 	bics.w	r2, r3, #16
 801177a:	d109      	bne.n	8011790 <_strtol_l.constprop.0+0x54>
 801177c:	2c30      	cmp	r4, #48	@ 0x30
 801177e:	d12a      	bne.n	80117d6 <_strtol_l.constprop.0+0x9a>
 8011780:	782a      	ldrb	r2, [r5, #0]
 8011782:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8011786:	2a58      	cmp	r2, #88	@ 0x58
 8011788:	d125      	bne.n	80117d6 <_strtol_l.constprop.0+0x9a>
 801178a:	786c      	ldrb	r4, [r5, #1]
 801178c:	2310      	movs	r3, #16
 801178e:	3502      	adds	r5, #2
 8011790:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8011794:	f10c 3cff 	add.w	ip, ip, #4294967295
 8011798:	2200      	movs	r2, #0
 801179a:	fbbc f9f3 	udiv	r9, ip, r3
 801179e:	4610      	mov	r0, r2
 80117a0:	fb03 ca19 	mls	sl, r3, r9, ip
 80117a4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80117a8:	2f09      	cmp	r7, #9
 80117aa:	d81b      	bhi.n	80117e4 <_strtol_l.constprop.0+0xa8>
 80117ac:	463c      	mov	r4, r7
 80117ae:	42a3      	cmp	r3, r4
 80117b0:	dd27      	ble.n	8011802 <_strtol_l.constprop.0+0xc6>
 80117b2:	1c57      	adds	r7, r2, #1
 80117b4:	d007      	beq.n	80117c6 <_strtol_l.constprop.0+0x8a>
 80117b6:	4581      	cmp	r9, r0
 80117b8:	d320      	bcc.n	80117fc <_strtol_l.constprop.0+0xc0>
 80117ba:	d101      	bne.n	80117c0 <_strtol_l.constprop.0+0x84>
 80117bc:	45a2      	cmp	sl, r4
 80117be:	db1d      	blt.n	80117fc <_strtol_l.constprop.0+0xc0>
 80117c0:	fb00 4003 	mla	r0, r0, r3, r4
 80117c4:	2201      	movs	r2, #1
 80117c6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80117ca:	e7eb      	b.n	80117a4 <_strtol_l.constprop.0+0x68>
 80117cc:	2c2b      	cmp	r4, #43	@ 0x2b
 80117ce:	bf04      	itt	eq
 80117d0:	782c      	ldrbeq	r4, [r5, #0]
 80117d2:	1c95      	addeq	r5, r2, #2
 80117d4:	e7cf      	b.n	8011776 <_strtol_l.constprop.0+0x3a>
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	d1da      	bne.n	8011790 <_strtol_l.constprop.0+0x54>
 80117da:	2c30      	cmp	r4, #48	@ 0x30
 80117dc:	bf0c      	ite	eq
 80117de:	2308      	moveq	r3, #8
 80117e0:	230a      	movne	r3, #10
 80117e2:	e7d5      	b.n	8011790 <_strtol_l.constprop.0+0x54>
 80117e4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80117e8:	2f19      	cmp	r7, #25
 80117ea:	d801      	bhi.n	80117f0 <_strtol_l.constprop.0+0xb4>
 80117ec:	3c37      	subs	r4, #55	@ 0x37
 80117ee:	e7de      	b.n	80117ae <_strtol_l.constprop.0+0x72>
 80117f0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80117f4:	2f19      	cmp	r7, #25
 80117f6:	d804      	bhi.n	8011802 <_strtol_l.constprop.0+0xc6>
 80117f8:	3c57      	subs	r4, #87	@ 0x57
 80117fa:	e7d8      	b.n	80117ae <_strtol_l.constprop.0+0x72>
 80117fc:	f04f 32ff 	mov.w	r2, #4294967295
 8011800:	e7e1      	b.n	80117c6 <_strtol_l.constprop.0+0x8a>
 8011802:	1c53      	adds	r3, r2, #1
 8011804:	d108      	bne.n	8011818 <_strtol_l.constprop.0+0xdc>
 8011806:	2322      	movs	r3, #34	@ 0x22
 8011808:	f8ce 3000 	str.w	r3, [lr]
 801180c:	4660      	mov	r0, ip
 801180e:	f1b8 0f00 	cmp.w	r8, #0
 8011812:	d0a0      	beq.n	8011756 <_strtol_l.constprop.0+0x1a>
 8011814:	1e69      	subs	r1, r5, #1
 8011816:	e006      	b.n	8011826 <_strtol_l.constprop.0+0xea>
 8011818:	b106      	cbz	r6, 801181c <_strtol_l.constprop.0+0xe0>
 801181a:	4240      	negs	r0, r0
 801181c:	f1b8 0f00 	cmp.w	r8, #0
 8011820:	d099      	beq.n	8011756 <_strtol_l.constprop.0+0x1a>
 8011822:	2a00      	cmp	r2, #0
 8011824:	d1f6      	bne.n	8011814 <_strtol_l.constprop.0+0xd8>
 8011826:	f8c8 1000 	str.w	r1, [r8]
 801182a:	e794      	b.n	8011756 <_strtol_l.constprop.0+0x1a>
 801182c:	080129c9 	.word	0x080129c9

08011830 <_strtol_r>:
 8011830:	f7ff bf84 	b.w	801173c <_strtol_l.constprop.0>

08011834 <__ascii_wctomb>:
 8011834:	4603      	mov	r3, r0
 8011836:	4608      	mov	r0, r1
 8011838:	b141      	cbz	r1, 801184c <__ascii_wctomb+0x18>
 801183a:	2aff      	cmp	r2, #255	@ 0xff
 801183c:	d904      	bls.n	8011848 <__ascii_wctomb+0x14>
 801183e:	228a      	movs	r2, #138	@ 0x8a
 8011840:	601a      	str	r2, [r3, #0]
 8011842:	f04f 30ff 	mov.w	r0, #4294967295
 8011846:	4770      	bx	lr
 8011848:	700a      	strb	r2, [r1, #0]
 801184a:	2001      	movs	r0, #1
 801184c:	4770      	bx	lr

0801184e <__ssputs_r>:
 801184e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011852:	688e      	ldr	r6, [r1, #8]
 8011854:	461f      	mov	r7, r3
 8011856:	42be      	cmp	r6, r7
 8011858:	680b      	ldr	r3, [r1, #0]
 801185a:	4682      	mov	sl, r0
 801185c:	460c      	mov	r4, r1
 801185e:	4690      	mov	r8, r2
 8011860:	d82d      	bhi.n	80118be <__ssputs_r+0x70>
 8011862:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011866:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801186a:	d026      	beq.n	80118ba <__ssputs_r+0x6c>
 801186c:	6965      	ldr	r5, [r4, #20]
 801186e:	6909      	ldr	r1, [r1, #16]
 8011870:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011874:	eba3 0901 	sub.w	r9, r3, r1
 8011878:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801187c:	1c7b      	adds	r3, r7, #1
 801187e:	444b      	add	r3, r9
 8011880:	106d      	asrs	r5, r5, #1
 8011882:	429d      	cmp	r5, r3
 8011884:	bf38      	it	cc
 8011886:	461d      	movcc	r5, r3
 8011888:	0553      	lsls	r3, r2, #21
 801188a:	d527      	bpl.n	80118dc <__ssputs_r+0x8e>
 801188c:	4629      	mov	r1, r5
 801188e:	f7ff fa05 	bl	8010c9c <_malloc_r>
 8011892:	4606      	mov	r6, r0
 8011894:	b360      	cbz	r0, 80118f0 <__ssputs_r+0xa2>
 8011896:	6921      	ldr	r1, [r4, #16]
 8011898:	464a      	mov	r2, r9
 801189a:	f7fd ffe6 	bl	800f86a <memcpy>
 801189e:	89a3      	ldrh	r3, [r4, #12]
 80118a0:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80118a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80118a8:	81a3      	strh	r3, [r4, #12]
 80118aa:	6126      	str	r6, [r4, #16]
 80118ac:	6165      	str	r5, [r4, #20]
 80118ae:	444e      	add	r6, r9
 80118b0:	eba5 0509 	sub.w	r5, r5, r9
 80118b4:	6026      	str	r6, [r4, #0]
 80118b6:	60a5      	str	r5, [r4, #8]
 80118b8:	463e      	mov	r6, r7
 80118ba:	42be      	cmp	r6, r7
 80118bc:	d900      	bls.n	80118c0 <__ssputs_r+0x72>
 80118be:	463e      	mov	r6, r7
 80118c0:	6820      	ldr	r0, [r4, #0]
 80118c2:	4632      	mov	r2, r6
 80118c4:	4641      	mov	r1, r8
 80118c6:	f000 f9c5 	bl	8011c54 <memmove>
 80118ca:	68a3      	ldr	r3, [r4, #8]
 80118cc:	1b9b      	subs	r3, r3, r6
 80118ce:	60a3      	str	r3, [r4, #8]
 80118d0:	6823      	ldr	r3, [r4, #0]
 80118d2:	4433      	add	r3, r6
 80118d4:	6023      	str	r3, [r4, #0]
 80118d6:	2000      	movs	r0, #0
 80118d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80118dc:	462a      	mov	r2, r5
 80118de:	f000 fa15 	bl	8011d0c <_realloc_r>
 80118e2:	4606      	mov	r6, r0
 80118e4:	2800      	cmp	r0, #0
 80118e6:	d1e0      	bne.n	80118aa <__ssputs_r+0x5c>
 80118e8:	6921      	ldr	r1, [r4, #16]
 80118ea:	4650      	mov	r0, sl
 80118ec:	f7fe fe28 	bl	8010540 <_free_r>
 80118f0:	230c      	movs	r3, #12
 80118f2:	f8ca 3000 	str.w	r3, [sl]
 80118f6:	89a3      	ldrh	r3, [r4, #12]
 80118f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80118fc:	81a3      	strh	r3, [r4, #12]
 80118fe:	f04f 30ff 	mov.w	r0, #4294967295
 8011902:	e7e9      	b.n	80118d8 <__ssputs_r+0x8a>

08011904 <_svfiprintf_r>:
 8011904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011908:	4698      	mov	r8, r3
 801190a:	898b      	ldrh	r3, [r1, #12]
 801190c:	061b      	lsls	r3, r3, #24
 801190e:	b09d      	sub	sp, #116	@ 0x74
 8011910:	4607      	mov	r7, r0
 8011912:	460d      	mov	r5, r1
 8011914:	4614      	mov	r4, r2
 8011916:	d510      	bpl.n	801193a <_svfiprintf_r+0x36>
 8011918:	690b      	ldr	r3, [r1, #16]
 801191a:	b973      	cbnz	r3, 801193a <_svfiprintf_r+0x36>
 801191c:	2140      	movs	r1, #64	@ 0x40
 801191e:	f7ff f9bd 	bl	8010c9c <_malloc_r>
 8011922:	6028      	str	r0, [r5, #0]
 8011924:	6128      	str	r0, [r5, #16]
 8011926:	b930      	cbnz	r0, 8011936 <_svfiprintf_r+0x32>
 8011928:	230c      	movs	r3, #12
 801192a:	603b      	str	r3, [r7, #0]
 801192c:	f04f 30ff 	mov.w	r0, #4294967295
 8011930:	b01d      	add	sp, #116	@ 0x74
 8011932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011936:	2340      	movs	r3, #64	@ 0x40
 8011938:	616b      	str	r3, [r5, #20]
 801193a:	2300      	movs	r3, #0
 801193c:	9309      	str	r3, [sp, #36]	@ 0x24
 801193e:	2320      	movs	r3, #32
 8011940:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011944:	f8cd 800c 	str.w	r8, [sp, #12]
 8011948:	2330      	movs	r3, #48	@ 0x30
 801194a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011ae8 <_svfiprintf_r+0x1e4>
 801194e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011952:	f04f 0901 	mov.w	r9, #1
 8011956:	4623      	mov	r3, r4
 8011958:	469a      	mov	sl, r3
 801195a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801195e:	b10a      	cbz	r2, 8011964 <_svfiprintf_r+0x60>
 8011960:	2a25      	cmp	r2, #37	@ 0x25
 8011962:	d1f9      	bne.n	8011958 <_svfiprintf_r+0x54>
 8011964:	ebba 0b04 	subs.w	fp, sl, r4
 8011968:	d00b      	beq.n	8011982 <_svfiprintf_r+0x7e>
 801196a:	465b      	mov	r3, fp
 801196c:	4622      	mov	r2, r4
 801196e:	4629      	mov	r1, r5
 8011970:	4638      	mov	r0, r7
 8011972:	f7ff ff6c 	bl	801184e <__ssputs_r>
 8011976:	3001      	adds	r0, #1
 8011978:	f000 80a7 	beq.w	8011aca <_svfiprintf_r+0x1c6>
 801197c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801197e:	445a      	add	r2, fp
 8011980:	9209      	str	r2, [sp, #36]	@ 0x24
 8011982:	f89a 3000 	ldrb.w	r3, [sl]
 8011986:	2b00      	cmp	r3, #0
 8011988:	f000 809f 	beq.w	8011aca <_svfiprintf_r+0x1c6>
 801198c:	2300      	movs	r3, #0
 801198e:	f04f 32ff 	mov.w	r2, #4294967295
 8011992:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011996:	f10a 0a01 	add.w	sl, sl, #1
 801199a:	9304      	str	r3, [sp, #16]
 801199c:	9307      	str	r3, [sp, #28]
 801199e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80119a2:	931a      	str	r3, [sp, #104]	@ 0x68
 80119a4:	4654      	mov	r4, sl
 80119a6:	2205      	movs	r2, #5
 80119a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80119ac:	484e      	ldr	r0, [pc, #312]	@ (8011ae8 <_svfiprintf_r+0x1e4>)
 80119ae:	f7ee fc37 	bl	8000220 <memchr>
 80119b2:	9a04      	ldr	r2, [sp, #16]
 80119b4:	b9d8      	cbnz	r0, 80119ee <_svfiprintf_r+0xea>
 80119b6:	06d0      	lsls	r0, r2, #27
 80119b8:	bf44      	itt	mi
 80119ba:	2320      	movmi	r3, #32
 80119bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80119c0:	0711      	lsls	r1, r2, #28
 80119c2:	bf44      	itt	mi
 80119c4:	232b      	movmi	r3, #43	@ 0x2b
 80119c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80119ca:	f89a 3000 	ldrb.w	r3, [sl]
 80119ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80119d0:	d015      	beq.n	80119fe <_svfiprintf_r+0xfa>
 80119d2:	9a07      	ldr	r2, [sp, #28]
 80119d4:	4654      	mov	r4, sl
 80119d6:	2000      	movs	r0, #0
 80119d8:	f04f 0c0a 	mov.w	ip, #10
 80119dc:	4621      	mov	r1, r4
 80119de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80119e2:	3b30      	subs	r3, #48	@ 0x30
 80119e4:	2b09      	cmp	r3, #9
 80119e6:	d94b      	bls.n	8011a80 <_svfiprintf_r+0x17c>
 80119e8:	b1b0      	cbz	r0, 8011a18 <_svfiprintf_r+0x114>
 80119ea:	9207      	str	r2, [sp, #28]
 80119ec:	e014      	b.n	8011a18 <_svfiprintf_r+0x114>
 80119ee:	eba0 0308 	sub.w	r3, r0, r8
 80119f2:	fa09 f303 	lsl.w	r3, r9, r3
 80119f6:	4313      	orrs	r3, r2
 80119f8:	9304      	str	r3, [sp, #16]
 80119fa:	46a2      	mov	sl, r4
 80119fc:	e7d2      	b.n	80119a4 <_svfiprintf_r+0xa0>
 80119fe:	9b03      	ldr	r3, [sp, #12]
 8011a00:	1d19      	adds	r1, r3, #4
 8011a02:	681b      	ldr	r3, [r3, #0]
 8011a04:	9103      	str	r1, [sp, #12]
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	bfbb      	ittet	lt
 8011a0a:	425b      	neglt	r3, r3
 8011a0c:	f042 0202 	orrlt.w	r2, r2, #2
 8011a10:	9307      	strge	r3, [sp, #28]
 8011a12:	9307      	strlt	r3, [sp, #28]
 8011a14:	bfb8      	it	lt
 8011a16:	9204      	strlt	r2, [sp, #16]
 8011a18:	7823      	ldrb	r3, [r4, #0]
 8011a1a:	2b2e      	cmp	r3, #46	@ 0x2e
 8011a1c:	d10a      	bne.n	8011a34 <_svfiprintf_r+0x130>
 8011a1e:	7863      	ldrb	r3, [r4, #1]
 8011a20:	2b2a      	cmp	r3, #42	@ 0x2a
 8011a22:	d132      	bne.n	8011a8a <_svfiprintf_r+0x186>
 8011a24:	9b03      	ldr	r3, [sp, #12]
 8011a26:	1d1a      	adds	r2, r3, #4
 8011a28:	681b      	ldr	r3, [r3, #0]
 8011a2a:	9203      	str	r2, [sp, #12]
 8011a2c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011a30:	3402      	adds	r4, #2
 8011a32:	9305      	str	r3, [sp, #20]
 8011a34:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011af8 <_svfiprintf_r+0x1f4>
 8011a38:	7821      	ldrb	r1, [r4, #0]
 8011a3a:	2203      	movs	r2, #3
 8011a3c:	4650      	mov	r0, sl
 8011a3e:	f7ee fbef 	bl	8000220 <memchr>
 8011a42:	b138      	cbz	r0, 8011a54 <_svfiprintf_r+0x150>
 8011a44:	9b04      	ldr	r3, [sp, #16]
 8011a46:	eba0 000a 	sub.w	r0, r0, sl
 8011a4a:	2240      	movs	r2, #64	@ 0x40
 8011a4c:	4082      	lsls	r2, r0
 8011a4e:	4313      	orrs	r3, r2
 8011a50:	3401      	adds	r4, #1
 8011a52:	9304      	str	r3, [sp, #16]
 8011a54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011a58:	4824      	ldr	r0, [pc, #144]	@ (8011aec <_svfiprintf_r+0x1e8>)
 8011a5a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011a5e:	2206      	movs	r2, #6
 8011a60:	f7ee fbde 	bl	8000220 <memchr>
 8011a64:	2800      	cmp	r0, #0
 8011a66:	d036      	beq.n	8011ad6 <_svfiprintf_r+0x1d2>
 8011a68:	4b21      	ldr	r3, [pc, #132]	@ (8011af0 <_svfiprintf_r+0x1ec>)
 8011a6a:	bb1b      	cbnz	r3, 8011ab4 <_svfiprintf_r+0x1b0>
 8011a6c:	9b03      	ldr	r3, [sp, #12]
 8011a6e:	3307      	adds	r3, #7
 8011a70:	f023 0307 	bic.w	r3, r3, #7
 8011a74:	3308      	adds	r3, #8
 8011a76:	9303      	str	r3, [sp, #12]
 8011a78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011a7a:	4433      	add	r3, r6
 8011a7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8011a7e:	e76a      	b.n	8011956 <_svfiprintf_r+0x52>
 8011a80:	fb0c 3202 	mla	r2, ip, r2, r3
 8011a84:	460c      	mov	r4, r1
 8011a86:	2001      	movs	r0, #1
 8011a88:	e7a8      	b.n	80119dc <_svfiprintf_r+0xd8>
 8011a8a:	2300      	movs	r3, #0
 8011a8c:	3401      	adds	r4, #1
 8011a8e:	9305      	str	r3, [sp, #20]
 8011a90:	4619      	mov	r1, r3
 8011a92:	f04f 0c0a 	mov.w	ip, #10
 8011a96:	4620      	mov	r0, r4
 8011a98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011a9c:	3a30      	subs	r2, #48	@ 0x30
 8011a9e:	2a09      	cmp	r2, #9
 8011aa0:	d903      	bls.n	8011aaa <_svfiprintf_r+0x1a6>
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	d0c6      	beq.n	8011a34 <_svfiprintf_r+0x130>
 8011aa6:	9105      	str	r1, [sp, #20]
 8011aa8:	e7c4      	b.n	8011a34 <_svfiprintf_r+0x130>
 8011aaa:	fb0c 2101 	mla	r1, ip, r1, r2
 8011aae:	4604      	mov	r4, r0
 8011ab0:	2301      	movs	r3, #1
 8011ab2:	e7f0      	b.n	8011a96 <_svfiprintf_r+0x192>
 8011ab4:	ab03      	add	r3, sp, #12
 8011ab6:	9300      	str	r3, [sp, #0]
 8011ab8:	462a      	mov	r2, r5
 8011aba:	4b0e      	ldr	r3, [pc, #56]	@ (8011af4 <_svfiprintf_r+0x1f0>)
 8011abc:	a904      	add	r1, sp, #16
 8011abe:	4638      	mov	r0, r7
 8011ac0:	f7fc ff30 	bl	800e924 <_printf_float>
 8011ac4:	1c42      	adds	r2, r0, #1
 8011ac6:	4606      	mov	r6, r0
 8011ac8:	d1d6      	bne.n	8011a78 <_svfiprintf_r+0x174>
 8011aca:	89ab      	ldrh	r3, [r5, #12]
 8011acc:	065b      	lsls	r3, r3, #25
 8011ace:	f53f af2d 	bmi.w	801192c <_svfiprintf_r+0x28>
 8011ad2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011ad4:	e72c      	b.n	8011930 <_svfiprintf_r+0x2c>
 8011ad6:	ab03      	add	r3, sp, #12
 8011ad8:	9300      	str	r3, [sp, #0]
 8011ada:	462a      	mov	r2, r5
 8011adc:	4b05      	ldr	r3, [pc, #20]	@ (8011af4 <_svfiprintf_r+0x1f0>)
 8011ade:	a904      	add	r1, sp, #16
 8011ae0:	4638      	mov	r0, r7
 8011ae2:	f7fd f9b7 	bl	800ee54 <_printf_i>
 8011ae6:	e7ed      	b.n	8011ac4 <_svfiprintf_r+0x1c0>
 8011ae8:	08012ac9 	.word	0x08012ac9
 8011aec:	08012ad3 	.word	0x08012ad3
 8011af0:	0800e925 	.word	0x0800e925
 8011af4:	0801184f 	.word	0x0801184f
 8011af8:	08012acf 	.word	0x08012acf

08011afc <__sflush_r>:
 8011afc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b04:	0716      	lsls	r6, r2, #28
 8011b06:	4605      	mov	r5, r0
 8011b08:	460c      	mov	r4, r1
 8011b0a:	d454      	bmi.n	8011bb6 <__sflush_r+0xba>
 8011b0c:	684b      	ldr	r3, [r1, #4]
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	dc02      	bgt.n	8011b18 <__sflush_r+0x1c>
 8011b12:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	dd48      	ble.n	8011baa <__sflush_r+0xae>
 8011b18:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011b1a:	2e00      	cmp	r6, #0
 8011b1c:	d045      	beq.n	8011baa <__sflush_r+0xae>
 8011b1e:	2300      	movs	r3, #0
 8011b20:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011b24:	682f      	ldr	r7, [r5, #0]
 8011b26:	6a21      	ldr	r1, [r4, #32]
 8011b28:	602b      	str	r3, [r5, #0]
 8011b2a:	d030      	beq.n	8011b8e <__sflush_r+0x92>
 8011b2c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011b2e:	89a3      	ldrh	r3, [r4, #12]
 8011b30:	0759      	lsls	r1, r3, #29
 8011b32:	d505      	bpl.n	8011b40 <__sflush_r+0x44>
 8011b34:	6863      	ldr	r3, [r4, #4]
 8011b36:	1ad2      	subs	r2, r2, r3
 8011b38:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011b3a:	b10b      	cbz	r3, 8011b40 <__sflush_r+0x44>
 8011b3c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011b3e:	1ad2      	subs	r2, r2, r3
 8011b40:	2300      	movs	r3, #0
 8011b42:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011b44:	6a21      	ldr	r1, [r4, #32]
 8011b46:	4628      	mov	r0, r5
 8011b48:	47b0      	blx	r6
 8011b4a:	1c43      	adds	r3, r0, #1
 8011b4c:	89a3      	ldrh	r3, [r4, #12]
 8011b4e:	d106      	bne.n	8011b5e <__sflush_r+0x62>
 8011b50:	6829      	ldr	r1, [r5, #0]
 8011b52:	291d      	cmp	r1, #29
 8011b54:	d82b      	bhi.n	8011bae <__sflush_r+0xb2>
 8011b56:	4a2a      	ldr	r2, [pc, #168]	@ (8011c00 <__sflush_r+0x104>)
 8011b58:	410a      	asrs	r2, r1
 8011b5a:	07d6      	lsls	r6, r2, #31
 8011b5c:	d427      	bmi.n	8011bae <__sflush_r+0xb2>
 8011b5e:	2200      	movs	r2, #0
 8011b60:	6062      	str	r2, [r4, #4]
 8011b62:	04d9      	lsls	r1, r3, #19
 8011b64:	6922      	ldr	r2, [r4, #16]
 8011b66:	6022      	str	r2, [r4, #0]
 8011b68:	d504      	bpl.n	8011b74 <__sflush_r+0x78>
 8011b6a:	1c42      	adds	r2, r0, #1
 8011b6c:	d101      	bne.n	8011b72 <__sflush_r+0x76>
 8011b6e:	682b      	ldr	r3, [r5, #0]
 8011b70:	b903      	cbnz	r3, 8011b74 <__sflush_r+0x78>
 8011b72:	6560      	str	r0, [r4, #84]	@ 0x54
 8011b74:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011b76:	602f      	str	r7, [r5, #0]
 8011b78:	b1b9      	cbz	r1, 8011baa <__sflush_r+0xae>
 8011b7a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011b7e:	4299      	cmp	r1, r3
 8011b80:	d002      	beq.n	8011b88 <__sflush_r+0x8c>
 8011b82:	4628      	mov	r0, r5
 8011b84:	f7fe fcdc 	bl	8010540 <_free_r>
 8011b88:	2300      	movs	r3, #0
 8011b8a:	6363      	str	r3, [r4, #52]	@ 0x34
 8011b8c:	e00d      	b.n	8011baa <__sflush_r+0xae>
 8011b8e:	2301      	movs	r3, #1
 8011b90:	4628      	mov	r0, r5
 8011b92:	47b0      	blx	r6
 8011b94:	4602      	mov	r2, r0
 8011b96:	1c50      	adds	r0, r2, #1
 8011b98:	d1c9      	bne.n	8011b2e <__sflush_r+0x32>
 8011b9a:	682b      	ldr	r3, [r5, #0]
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	d0c6      	beq.n	8011b2e <__sflush_r+0x32>
 8011ba0:	2b1d      	cmp	r3, #29
 8011ba2:	d001      	beq.n	8011ba8 <__sflush_r+0xac>
 8011ba4:	2b16      	cmp	r3, #22
 8011ba6:	d11e      	bne.n	8011be6 <__sflush_r+0xea>
 8011ba8:	602f      	str	r7, [r5, #0]
 8011baa:	2000      	movs	r0, #0
 8011bac:	e022      	b.n	8011bf4 <__sflush_r+0xf8>
 8011bae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011bb2:	b21b      	sxth	r3, r3
 8011bb4:	e01b      	b.n	8011bee <__sflush_r+0xf2>
 8011bb6:	690f      	ldr	r7, [r1, #16]
 8011bb8:	2f00      	cmp	r7, #0
 8011bba:	d0f6      	beq.n	8011baa <__sflush_r+0xae>
 8011bbc:	0793      	lsls	r3, r2, #30
 8011bbe:	680e      	ldr	r6, [r1, #0]
 8011bc0:	bf08      	it	eq
 8011bc2:	694b      	ldreq	r3, [r1, #20]
 8011bc4:	600f      	str	r7, [r1, #0]
 8011bc6:	bf18      	it	ne
 8011bc8:	2300      	movne	r3, #0
 8011bca:	eba6 0807 	sub.w	r8, r6, r7
 8011bce:	608b      	str	r3, [r1, #8]
 8011bd0:	f1b8 0f00 	cmp.w	r8, #0
 8011bd4:	dde9      	ble.n	8011baa <__sflush_r+0xae>
 8011bd6:	6a21      	ldr	r1, [r4, #32]
 8011bd8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011bda:	4643      	mov	r3, r8
 8011bdc:	463a      	mov	r2, r7
 8011bde:	4628      	mov	r0, r5
 8011be0:	47b0      	blx	r6
 8011be2:	2800      	cmp	r0, #0
 8011be4:	dc08      	bgt.n	8011bf8 <__sflush_r+0xfc>
 8011be6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011bea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011bee:	81a3      	strh	r3, [r4, #12]
 8011bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8011bf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011bf8:	4407      	add	r7, r0
 8011bfa:	eba8 0800 	sub.w	r8, r8, r0
 8011bfe:	e7e7      	b.n	8011bd0 <__sflush_r+0xd4>
 8011c00:	dfbffffe 	.word	0xdfbffffe

08011c04 <_fflush_r>:
 8011c04:	b538      	push	{r3, r4, r5, lr}
 8011c06:	690b      	ldr	r3, [r1, #16]
 8011c08:	4605      	mov	r5, r0
 8011c0a:	460c      	mov	r4, r1
 8011c0c:	b913      	cbnz	r3, 8011c14 <_fflush_r+0x10>
 8011c0e:	2500      	movs	r5, #0
 8011c10:	4628      	mov	r0, r5
 8011c12:	bd38      	pop	{r3, r4, r5, pc}
 8011c14:	b118      	cbz	r0, 8011c1e <_fflush_r+0x1a>
 8011c16:	6a03      	ldr	r3, [r0, #32]
 8011c18:	b90b      	cbnz	r3, 8011c1e <_fflush_r+0x1a>
 8011c1a:	f7fd fcdb 	bl	800f5d4 <__sinit>
 8011c1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	d0f3      	beq.n	8011c0e <_fflush_r+0xa>
 8011c26:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011c28:	07d0      	lsls	r0, r2, #31
 8011c2a:	d404      	bmi.n	8011c36 <_fflush_r+0x32>
 8011c2c:	0599      	lsls	r1, r3, #22
 8011c2e:	d402      	bmi.n	8011c36 <_fflush_r+0x32>
 8011c30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011c32:	f7fd fe18 	bl	800f866 <__retarget_lock_acquire_recursive>
 8011c36:	4628      	mov	r0, r5
 8011c38:	4621      	mov	r1, r4
 8011c3a:	f7ff ff5f 	bl	8011afc <__sflush_r>
 8011c3e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011c40:	07da      	lsls	r2, r3, #31
 8011c42:	4605      	mov	r5, r0
 8011c44:	d4e4      	bmi.n	8011c10 <_fflush_r+0xc>
 8011c46:	89a3      	ldrh	r3, [r4, #12]
 8011c48:	059b      	lsls	r3, r3, #22
 8011c4a:	d4e1      	bmi.n	8011c10 <_fflush_r+0xc>
 8011c4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011c4e:	f7fd fe0b 	bl	800f868 <__retarget_lock_release_recursive>
 8011c52:	e7dd      	b.n	8011c10 <_fflush_r+0xc>

08011c54 <memmove>:
 8011c54:	4288      	cmp	r0, r1
 8011c56:	b510      	push	{r4, lr}
 8011c58:	eb01 0402 	add.w	r4, r1, r2
 8011c5c:	d902      	bls.n	8011c64 <memmove+0x10>
 8011c5e:	4284      	cmp	r4, r0
 8011c60:	4623      	mov	r3, r4
 8011c62:	d807      	bhi.n	8011c74 <memmove+0x20>
 8011c64:	1e43      	subs	r3, r0, #1
 8011c66:	42a1      	cmp	r1, r4
 8011c68:	d008      	beq.n	8011c7c <memmove+0x28>
 8011c6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011c6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011c72:	e7f8      	b.n	8011c66 <memmove+0x12>
 8011c74:	4402      	add	r2, r0
 8011c76:	4601      	mov	r1, r0
 8011c78:	428a      	cmp	r2, r1
 8011c7a:	d100      	bne.n	8011c7e <memmove+0x2a>
 8011c7c:	bd10      	pop	{r4, pc}
 8011c7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011c82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011c86:	e7f7      	b.n	8011c78 <memmove+0x24>

08011c88 <_sbrk_r>:
 8011c88:	b538      	push	{r3, r4, r5, lr}
 8011c8a:	4d06      	ldr	r5, [pc, #24]	@ (8011ca4 <_sbrk_r+0x1c>)
 8011c8c:	2300      	movs	r3, #0
 8011c8e:	4604      	mov	r4, r0
 8011c90:	4608      	mov	r0, r1
 8011c92:	602b      	str	r3, [r5, #0]
 8011c94:	f7f0 f956 	bl	8001f44 <_sbrk>
 8011c98:	1c43      	adds	r3, r0, #1
 8011c9a:	d102      	bne.n	8011ca2 <_sbrk_r+0x1a>
 8011c9c:	682b      	ldr	r3, [r5, #0]
 8011c9e:	b103      	cbz	r3, 8011ca2 <_sbrk_r+0x1a>
 8011ca0:	6023      	str	r3, [r4, #0]
 8011ca2:	bd38      	pop	{r3, r4, r5, pc}
 8011ca4:	20000ab4 	.word	0x20000ab4

08011ca8 <__assert_func>:
 8011ca8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011caa:	4614      	mov	r4, r2
 8011cac:	461a      	mov	r2, r3
 8011cae:	4b09      	ldr	r3, [pc, #36]	@ (8011cd4 <__assert_func+0x2c>)
 8011cb0:	681b      	ldr	r3, [r3, #0]
 8011cb2:	4605      	mov	r5, r0
 8011cb4:	68d8      	ldr	r0, [r3, #12]
 8011cb6:	b954      	cbnz	r4, 8011cce <__assert_func+0x26>
 8011cb8:	4b07      	ldr	r3, [pc, #28]	@ (8011cd8 <__assert_func+0x30>)
 8011cba:	461c      	mov	r4, r3
 8011cbc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011cc0:	9100      	str	r1, [sp, #0]
 8011cc2:	462b      	mov	r3, r5
 8011cc4:	4905      	ldr	r1, [pc, #20]	@ (8011cdc <__assert_func+0x34>)
 8011cc6:	f000 f84f 	bl	8011d68 <fiprintf>
 8011cca:	f000 f85f 	bl	8011d8c <abort>
 8011cce:	4b04      	ldr	r3, [pc, #16]	@ (8011ce0 <__assert_func+0x38>)
 8011cd0:	e7f4      	b.n	8011cbc <__assert_func+0x14>
 8011cd2:	bf00      	nop
 8011cd4:	20000208 	.word	0x20000208
 8011cd8:	08012b15 	.word	0x08012b15
 8011cdc:	08012ae7 	.word	0x08012ae7
 8011ce0:	08012ada 	.word	0x08012ada

08011ce4 <_calloc_r>:
 8011ce4:	b570      	push	{r4, r5, r6, lr}
 8011ce6:	fba1 5402 	umull	r5, r4, r1, r2
 8011cea:	b93c      	cbnz	r4, 8011cfc <_calloc_r+0x18>
 8011cec:	4629      	mov	r1, r5
 8011cee:	f7fe ffd5 	bl	8010c9c <_malloc_r>
 8011cf2:	4606      	mov	r6, r0
 8011cf4:	b928      	cbnz	r0, 8011d02 <_calloc_r+0x1e>
 8011cf6:	2600      	movs	r6, #0
 8011cf8:	4630      	mov	r0, r6
 8011cfa:	bd70      	pop	{r4, r5, r6, pc}
 8011cfc:	220c      	movs	r2, #12
 8011cfe:	6002      	str	r2, [r0, #0]
 8011d00:	e7f9      	b.n	8011cf6 <_calloc_r+0x12>
 8011d02:	462a      	mov	r2, r5
 8011d04:	4621      	mov	r1, r4
 8011d06:	f7fd fd1f 	bl	800f748 <memset>
 8011d0a:	e7f5      	b.n	8011cf8 <_calloc_r+0x14>

08011d0c <_realloc_r>:
 8011d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d10:	4680      	mov	r8, r0
 8011d12:	4615      	mov	r5, r2
 8011d14:	460c      	mov	r4, r1
 8011d16:	b921      	cbnz	r1, 8011d22 <_realloc_r+0x16>
 8011d18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011d1c:	4611      	mov	r1, r2
 8011d1e:	f7fe bfbd 	b.w	8010c9c <_malloc_r>
 8011d22:	b92a      	cbnz	r2, 8011d30 <_realloc_r+0x24>
 8011d24:	f7fe fc0c 	bl	8010540 <_free_r>
 8011d28:	2400      	movs	r4, #0
 8011d2a:	4620      	mov	r0, r4
 8011d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d30:	f000 f833 	bl	8011d9a <_malloc_usable_size_r>
 8011d34:	4285      	cmp	r5, r0
 8011d36:	4606      	mov	r6, r0
 8011d38:	d802      	bhi.n	8011d40 <_realloc_r+0x34>
 8011d3a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8011d3e:	d8f4      	bhi.n	8011d2a <_realloc_r+0x1e>
 8011d40:	4629      	mov	r1, r5
 8011d42:	4640      	mov	r0, r8
 8011d44:	f7fe ffaa 	bl	8010c9c <_malloc_r>
 8011d48:	4607      	mov	r7, r0
 8011d4a:	2800      	cmp	r0, #0
 8011d4c:	d0ec      	beq.n	8011d28 <_realloc_r+0x1c>
 8011d4e:	42b5      	cmp	r5, r6
 8011d50:	462a      	mov	r2, r5
 8011d52:	4621      	mov	r1, r4
 8011d54:	bf28      	it	cs
 8011d56:	4632      	movcs	r2, r6
 8011d58:	f7fd fd87 	bl	800f86a <memcpy>
 8011d5c:	4621      	mov	r1, r4
 8011d5e:	4640      	mov	r0, r8
 8011d60:	f7fe fbee 	bl	8010540 <_free_r>
 8011d64:	463c      	mov	r4, r7
 8011d66:	e7e0      	b.n	8011d2a <_realloc_r+0x1e>

08011d68 <fiprintf>:
 8011d68:	b40e      	push	{r1, r2, r3}
 8011d6a:	b503      	push	{r0, r1, lr}
 8011d6c:	4601      	mov	r1, r0
 8011d6e:	ab03      	add	r3, sp, #12
 8011d70:	4805      	ldr	r0, [pc, #20]	@ (8011d88 <fiprintf+0x20>)
 8011d72:	f853 2b04 	ldr.w	r2, [r3], #4
 8011d76:	6800      	ldr	r0, [r0, #0]
 8011d78:	9301      	str	r3, [sp, #4]
 8011d7a:	f000 f83f 	bl	8011dfc <_vfiprintf_r>
 8011d7e:	b002      	add	sp, #8
 8011d80:	f85d eb04 	ldr.w	lr, [sp], #4
 8011d84:	b003      	add	sp, #12
 8011d86:	4770      	bx	lr
 8011d88:	20000208 	.word	0x20000208

08011d8c <abort>:
 8011d8c:	b508      	push	{r3, lr}
 8011d8e:	2006      	movs	r0, #6
 8011d90:	f000 fa08 	bl	80121a4 <raise>
 8011d94:	2001      	movs	r0, #1
 8011d96:	f7f0 f85d 	bl	8001e54 <_exit>

08011d9a <_malloc_usable_size_r>:
 8011d9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011d9e:	1f18      	subs	r0, r3, #4
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	bfbc      	itt	lt
 8011da4:	580b      	ldrlt	r3, [r1, r0]
 8011da6:	18c0      	addlt	r0, r0, r3
 8011da8:	4770      	bx	lr

08011daa <__sfputc_r>:
 8011daa:	6893      	ldr	r3, [r2, #8]
 8011dac:	3b01      	subs	r3, #1
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	b410      	push	{r4}
 8011db2:	6093      	str	r3, [r2, #8]
 8011db4:	da08      	bge.n	8011dc8 <__sfputc_r+0x1e>
 8011db6:	6994      	ldr	r4, [r2, #24]
 8011db8:	42a3      	cmp	r3, r4
 8011dba:	db01      	blt.n	8011dc0 <__sfputc_r+0x16>
 8011dbc:	290a      	cmp	r1, #10
 8011dbe:	d103      	bne.n	8011dc8 <__sfputc_r+0x1e>
 8011dc0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011dc4:	f000 b932 	b.w	801202c <__swbuf_r>
 8011dc8:	6813      	ldr	r3, [r2, #0]
 8011dca:	1c58      	adds	r0, r3, #1
 8011dcc:	6010      	str	r0, [r2, #0]
 8011dce:	7019      	strb	r1, [r3, #0]
 8011dd0:	4608      	mov	r0, r1
 8011dd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011dd6:	4770      	bx	lr

08011dd8 <__sfputs_r>:
 8011dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011dda:	4606      	mov	r6, r0
 8011ddc:	460f      	mov	r7, r1
 8011dde:	4614      	mov	r4, r2
 8011de0:	18d5      	adds	r5, r2, r3
 8011de2:	42ac      	cmp	r4, r5
 8011de4:	d101      	bne.n	8011dea <__sfputs_r+0x12>
 8011de6:	2000      	movs	r0, #0
 8011de8:	e007      	b.n	8011dfa <__sfputs_r+0x22>
 8011dea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011dee:	463a      	mov	r2, r7
 8011df0:	4630      	mov	r0, r6
 8011df2:	f7ff ffda 	bl	8011daa <__sfputc_r>
 8011df6:	1c43      	adds	r3, r0, #1
 8011df8:	d1f3      	bne.n	8011de2 <__sfputs_r+0xa>
 8011dfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011dfc <_vfiprintf_r>:
 8011dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e00:	460d      	mov	r5, r1
 8011e02:	b09d      	sub	sp, #116	@ 0x74
 8011e04:	4614      	mov	r4, r2
 8011e06:	4698      	mov	r8, r3
 8011e08:	4606      	mov	r6, r0
 8011e0a:	b118      	cbz	r0, 8011e14 <_vfiprintf_r+0x18>
 8011e0c:	6a03      	ldr	r3, [r0, #32]
 8011e0e:	b90b      	cbnz	r3, 8011e14 <_vfiprintf_r+0x18>
 8011e10:	f7fd fbe0 	bl	800f5d4 <__sinit>
 8011e14:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011e16:	07d9      	lsls	r1, r3, #31
 8011e18:	d405      	bmi.n	8011e26 <_vfiprintf_r+0x2a>
 8011e1a:	89ab      	ldrh	r3, [r5, #12]
 8011e1c:	059a      	lsls	r2, r3, #22
 8011e1e:	d402      	bmi.n	8011e26 <_vfiprintf_r+0x2a>
 8011e20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011e22:	f7fd fd20 	bl	800f866 <__retarget_lock_acquire_recursive>
 8011e26:	89ab      	ldrh	r3, [r5, #12]
 8011e28:	071b      	lsls	r3, r3, #28
 8011e2a:	d501      	bpl.n	8011e30 <_vfiprintf_r+0x34>
 8011e2c:	692b      	ldr	r3, [r5, #16]
 8011e2e:	b99b      	cbnz	r3, 8011e58 <_vfiprintf_r+0x5c>
 8011e30:	4629      	mov	r1, r5
 8011e32:	4630      	mov	r0, r6
 8011e34:	f000 f938 	bl	80120a8 <__swsetup_r>
 8011e38:	b170      	cbz	r0, 8011e58 <_vfiprintf_r+0x5c>
 8011e3a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011e3c:	07dc      	lsls	r4, r3, #31
 8011e3e:	d504      	bpl.n	8011e4a <_vfiprintf_r+0x4e>
 8011e40:	f04f 30ff 	mov.w	r0, #4294967295
 8011e44:	b01d      	add	sp, #116	@ 0x74
 8011e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e4a:	89ab      	ldrh	r3, [r5, #12]
 8011e4c:	0598      	lsls	r0, r3, #22
 8011e4e:	d4f7      	bmi.n	8011e40 <_vfiprintf_r+0x44>
 8011e50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011e52:	f7fd fd09 	bl	800f868 <__retarget_lock_release_recursive>
 8011e56:	e7f3      	b.n	8011e40 <_vfiprintf_r+0x44>
 8011e58:	2300      	movs	r3, #0
 8011e5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8011e5c:	2320      	movs	r3, #32
 8011e5e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011e62:	f8cd 800c 	str.w	r8, [sp, #12]
 8011e66:	2330      	movs	r3, #48	@ 0x30
 8011e68:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012018 <_vfiprintf_r+0x21c>
 8011e6c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011e70:	f04f 0901 	mov.w	r9, #1
 8011e74:	4623      	mov	r3, r4
 8011e76:	469a      	mov	sl, r3
 8011e78:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011e7c:	b10a      	cbz	r2, 8011e82 <_vfiprintf_r+0x86>
 8011e7e:	2a25      	cmp	r2, #37	@ 0x25
 8011e80:	d1f9      	bne.n	8011e76 <_vfiprintf_r+0x7a>
 8011e82:	ebba 0b04 	subs.w	fp, sl, r4
 8011e86:	d00b      	beq.n	8011ea0 <_vfiprintf_r+0xa4>
 8011e88:	465b      	mov	r3, fp
 8011e8a:	4622      	mov	r2, r4
 8011e8c:	4629      	mov	r1, r5
 8011e8e:	4630      	mov	r0, r6
 8011e90:	f7ff ffa2 	bl	8011dd8 <__sfputs_r>
 8011e94:	3001      	adds	r0, #1
 8011e96:	f000 80a7 	beq.w	8011fe8 <_vfiprintf_r+0x1ec>
 8011e9a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011e9c:	445a      	add	r2, fp
 8011e9e:	9209      	str	r2, [sp, #36]	@ 0x24
 8011ea0:	f89a 3000 	ldrb.w	r3, [sl]
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	f000 809f 	beq.w	8011fe8 <_vfiprintf_r+0x1ec>
 8011eaa:	2300      	movs	r3, #0
 8011eac:	f04f 32ff 	mov.w	r2, #4294967295
 8011eb0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011eb4:	f10a 0a01 	add.w	sl, sl, #1
 8011eb8:	9304      	str	r3, [sp, #16]
 8011eba:	9307      	str	r3, [sp, #28]
 8011ebc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011ec0:	931a      	str	r3, [sp, #104]	@ 0x68
 8011ec2:	4654      	mov	r4, sl
 8011ec4:	2205      	movs	r2, #5
 8011ec6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011eca:	4853      	ldr	r0, [pc, #332]	@ (8012018 <_vfiprintf_r+0x21c>)
 8011ecc:	f7ee f9a8 	bl	8000220 <memchr>
 8011ed0:	9a04      	ldr	r2, [sp, #16]
 8011ed2:	b9d8      	cbnz	r0, 8011f0c <_vfiprintf_r+0x110>
 8011ed4:	06d1      	lsls	r1, r2, #27
 8011ed6:	bf44      	itt	mi
 8011ed8:	2320      	movmi	r3, #32
 8011eda:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011ede:	0713      	lsls	r3, r2, #28
 8011ee0:	bf44      	itt	mi
 8011ee2:	232b      	movmi	r3, #43	@ 0x2b
 8011ee4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011ee8:	f89a 3000 	ldrb.w	r3, [sl]
 8011eec:	2b2a      	cmp	r3, #42	@ 0x2a
 8011eee:	d015      	beq.n	8011f1c <_vfiprintf_r+0x120>
 8011ef0:	9a07      	ldr	r2, [sp, #28]
 8011ef2:	4654      	mov	r4, sl
 8011ef4:	2000      	movs	r0, #0
 8011ef6:	f04f 0c0a 	mov.w	ip, #10
 8011efa:	4621      	mov	r1, r4
 8011efc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011f00:	3b30      	subs	r3, #48	@ 0x30
 8011f02:	2b09      	cmp	r3, #9
 8011f04:	d94b      	bls.n	8011f9e <_vfiprintf_r+0x1a2>
 8011f06:	b1b0      	cbz	r0, 8011f36 <_vfiprintf_r+0x13a>
 8011f08:	9207      	str	r2, [sp, #28]
 8011f0a:	e014      	b.n	8011f36 <_vfiprintf_r+0x13a>
 8011f0c:	eba0 0308 	sub.w	r3, r0, r8
 8011f10:	fa09 f303 	lsl.w	r3, r9, r3
 8011f14:	4313      	orrs	r3, r2
 8011f16:	9304      	str	r3, [sp, #16]
 8011f18:	46a2      	mov	sl, r4
 8011f1a:	e7d2      	b.n	8011ec2 <_vfiprintf_r+0xc6>
 8011f1c:	9b03      	ldr	r3, [sp, #12]
 8011f1e:	1d19      	adds	r1, r3, #4
 8011f20:	681b      	ldr	r3, [r3, #0]
 8011f22:	9103      	str	r1, [sp, #12]
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	bfbb      	ittet	lt
 8011f28:	425b      	neglt	r3, r3
 8011f2a:	f042 0202 	orrlt.w	r2, r2, #2
 8011f2e:	9307      	strge	r3, [sp, #28]
 8011f30:	9307      	strlt	r3, [sp, #28]
 8011f32:	bfb8      	it	lt
 8011f34:	9204      	strlt	r2, [sp, #16]
 8011f36:	7823      	ldrb	r3, [r4, #0]
 8011f38:	2b2e      	cmp	r3, #46	@ 0x2e
 8011f3a:	d10a      	bne.n	8011f52 <_vfiprintf_r+0x156>
 8011f3c:	7863      	ldrb	r3, [r4, #1]
 8011f3e:	2b2a      	cmp	r3, #42	@ 0x2a
 8011f40:	d132      	bne.n	8011fa8 <_vfiprintf_r+0x1ac>
 8011f42:	9b03      	ldr	r3, [sp, #12]
 8011f44:	1d1a      	adds	r2, r3, #4
 8011f46:	681b      	ldr	r3, [r3, #0]
 8011f48:	9203      	str	r2, [sp, #12]
 8011f4a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011f4e:	3402      	adds	r4, #2
 8011f50:	9305      	str	r3, [sp, #20]
 8011f52:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012028 <_vfiprintf_r+0x22c>
 8011f56:	7821      	ldrb	r1, [r4, #0]
 8011f58:	2203      	movs	r2, #3
 8011f5a:	4650      	mov	r0, sl
 8011f5c:	f7ee f960 	bl	8000220 <memchr>
 8011f60:	b138      	cbz	r0, 8011f72 <_vfiprintf_r+0x176>
 8011f62:	9b04      	ldr	r3, [sp, #16]
 8011f64:	eba0 000a 	sub.w	r0, r0, sl
 8011f68:	2240      	movs	r2, #64	@ 0x40
 8011f6a:	4082      	lsls	r2, r0
 8011f6c:	4313      	orrs	r3, r2
 8011f6e:	3401      	adds	r4, #1
 8011f70:	9304      	str	r3, [sp, #16]
 8011f72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f76:	4829      	ldr	r0, [pc, #164]	@ (801201c <_vfiprintf_r+0x220>)
 8011f78:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011f7c:	2206      	movs	r2, #6
 8011f7e:	f7ee f94f 	bl	8000220 <memchr>
 8011f82:	2800      	cmp	r0, #0
 8011f84:	d03f      	beq.n	8012006 <_vfiprintf_r+0x20a>
 8011f86:	4b26      	ldr	r3, [pc, #152]	@ (8012020 <_vfiprintf_r+0x224>)
 8011f88:	bb1b      	cbnz	r3, 8011fd2 <_vfiprintf_r+0x1d6>
 8011f8a:	9b03      	ldr	r3, [sp, #12]
 8011f8c:	3307      	adds	r3, #7
 8011f8e:	f023 0307 	bic.w	r3, r3, #7
 8011f92:	3308      	adds	r3, #8
 8011f94:	9303      	str	r3, [sp, #12]
 8011f96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011f98:	443b      	add	r3, r7
 8011f9a:	9309      	str	r3, [sp, #36]	@ 0x24
 8011f9c:	e76a      	b.n	8011e74 <_vfiprintf_r+0x78>
 8011f9e:	fb0c 3202 	mla	r2, ip, r2, r3
 8011fa2:	460c      	mov	r4, r1
 8011fa4:	2001      	movs	r0, #1
 8011fa6:	e7a8      	b.n	8011efa <_vfiprintf_r+0xfe>
 8011fa8:	2300      	movs	r3, #0
 8011faa:	3401      	adds	r4, #1
 8011fac:	9305      	str	r3, [sp, #20]
 8011fae:	4619      	mov	r1, r3
 8011fb0:	f04f 0c0a 	mov.w	ip, #10
 8011fb4:	4620      	mov	r0, r4
 8011fb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011fba:	3a30      	subs	r2, #48	@ 0x30
 8011fbc:	2a09      	cmp	r2, #9
 8011fbe:	d903      	bls.n	8011fc8 <_vfiprintf_r+0x1cc>
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	d0c6      	beq.n	8011f52 <_vfiprintf_r+0x156>
 8011fc4:	9105      	str	r1, [sp, #20]
 8011fc6:	e7c4      	b.n	8011f52 <_vfiprintf_r+0x156>
 8011fc8:	fb0c 2101 	mla	r1, ip, r1, r2
 8011fcc:	4604      	mov	r4, r0
 8011fce:	2301      	movs	r3, #1
 8011fd0:	e7f0      	b.n	8011fb4 <_vfiprintf_r+0x1b8>
 8011fd2:	ab03      	add	r3, sp, #12
 8011fd4:	9300      	str	r3, [sp, #0]
 8011fd6:	462a      	mov	r2, r5
 8011fd8:	4b12      	ldr	r3, [pc, #72]	@ (8012024 <_vfiprintf_r+0x228>)
 8011fda:	a904      	add	r1, sp, #16
 8011fdc:	4630      	mov	r0, r6
 8011fde:	f7fc fca1 	bl	800e924 <_printf_float>
 8011fe2:	4607      	mov	r7, r0
 8011fe4:	1c78      	adds	r0, r7, #1
 8011fe6:	d1d6      	bne.n	8011f96 <_vfiprintf_r+0x19a>
 8011fe8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011fea:	07d9      	lsls	r1, r3, #31
 8011fec:	d405      	bmi.n	8011ffa <_vfiprintf_r+0x1fe>
 8011fee:	89ab      	ldrh	r3, [r5, #12]
 8011ff0:	059a      	lsls	r2, r3, #22
 8011ff2:	d402      	bmi.n	8011ffa <_vfiprintf_r+0x1fe>
 8011ff4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011ff6:	f7fd fc37 	bl	800f868 <__retarget_lock_release_recursive>
 8011ffa:	89ab      	ldrh	r3, [r5, #12]
 8011ffc:	065b      	lsls	r3, r3, #25
 8011ffe:	f53f af1f 	bmi.w	8011e40 <_vfiprintf_r+0x44>
 8012002:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012004:	e71e      	b.n	8011e44 <_vfiprintf_r+0x48>
 8012006:	ab03      	add	r3, sp, #12
 8012008:	9300      	str	r3, [sp, #0]
 801200a:	462a      	mov	r2, r5
 801200c:	4b05      	ldr	r3, [pc, #20]	@ (8012024 <_vfiprintf_r+0x228>)
 801200e:	a904      	add	r1, sp, #16
 8012010:	4630      	mov	r0, r6
 8012012:	f7fc ff1f 	bl	800ee54 <_printf_i>
 8012016:	e7e4      	b.n	8011fe2 <_vfiprintf_r+0x1e6>
 8012018:	08012ac9 	.word	0x08012ac9
 801201c:	08012ad3 	.word	0x08012ad3
 8012020:	0800e925 	.word	0x0800e925
 8012024:	08011dd9 	.word	0x08011dd9
 8012028:	08012acf 	.word	0x08012acf

0801202c <__swbuf_r>:
 801202c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801202e:	460e      	mov	r6, r1
 8012030:	4614      	mov	r4, r2
 8012032:	4605      	mov	r5, r0
 8012034:	b118      	cbz	r0, 801203e <__swbuf_r+0x12>
 8012036:	6a03      	ldr	r3, [r0, #32]
 8012038:	b90b      	cbnz	r3, 801203e <__swbuf_r+0x12>
 801203a:	f7fd facb 	bl	800f5d4 <__sinit>
 801203e:	69a3      	ldr	r3, [r4, #24]
 8012040:	60a3      	str	r3, [r4, #8]
 8012042:	89a3      	ldrh	r3, [r4, #12]
 8012044:	071a      	lsls	r2, r3, #28
 8012046:	d501      	bpl.n	801204c <__swbuf_r+0x20>
 8012048:	6923      	ldr	r3, [r4, #16]
 801204a:	b943      	cbnz	r3, 801205e <__swbuf_r+0x32>
 801204c:	4621      	mov	r1, r4
 801204e:	4628      	mov	r0, r5
 8012050:	f000 f82a 	bl	80120a8 <__swsetup_r>
 8012054:	b118      	cbz	r0, 801205e <__swbuf_r+0x32>
 8012056:	f04f 37ff 	mov.w	r7, #4294967295
 801205a:	4638      	mov	r0, r7
 801205c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801205e:	6823      	ldr	r3, [r4, #0]
 8012060:	6922      	ldr	r2, [r4, #16]
 8012062:	1a98      	subs	r0, r3, r2
 8012064:	6963      	ldr	r3, [r4, #20]
 8012066:	b2f6      	uxtb	r6, r6
 8012068:	4283      	cmp	r3, r0
 801206a:	4637      	mov	r7, r6
 801206c:	dc05      	bgt.n	801207a <__swbuf_r+0x4e>
 801206e:	4621      	mov	r1, r4
 8012070:	4628      	mov	r0, r5
 8012072:	f7ff fdc7 	bl	8011c04 <_fflush_r>
 8012076:	2800      	cmp	r0, #0
 8012078:	d1ed      	bne.n	8012056 <__swbuf_r+0x2a>
 801207a:	68a3      	ldr	r3, [r4, #8]
 801207c:	3b01      	subs	r3, #1
 801207e:	60a3      	str	r3, [r4, #8]
 8012080:	6823      	ldr	r3, [r4, #0]
 8012082:	1c5a      	adds	r2, r3, #1
 8012084:	6022      	str	r2, [r4, #0]
 8012086:	701e      	strb	r6, [r3, #0]
 8012088:	6962      	ldr	r2, [r4, #20]
 801208a:	1c43      	adds	r3, r0, #1
 801208c:	429a      	cmp	r2, r3
 801208e:	d004      	beq.n	801209a <__swbuf_r+0x6e>
 8012090:	89a3      	ldrh	r3, [r4, #12]
 8012092:	07db      	lsls	r3, r3, #31
 8012094:	d5e1      	bpl.n	801205a <__swbuf_r+0x2e>
 8012096:	2e0a      	cmp	r6, #10
 8012098:	d1df      	bne.n	801205a <__swbuf_r+0x2e>
 801209a:	4621      	mov	r1, r4
 801209c:	4628      	mov	r0, r5
 801209e:	f7ff fdb1 	bl	8011c04 <_fflush_r>
 80120a2:	2800      	cmp	r0, #0
 80120a4:	d0d9      	beq.n	801205a <__swbuf_r+0x2e>
 80120a6:	e7d6      	b.n	8012056 <__swbuf_r+0x2a>

080120a8 <__swsetup_r>:
 80120a8:	b538      	push	{r3, r4, r5, lr}
 80120aa:	4b29      	ldr	r3, [pc, #164]	@ (8012150 <__swsetup_r+0xa8>)
 80120ac:	4605      	mov	r5, r0
 80120ae:	6818      	ldr	r0, [r3, #0]
 80120b0:	460c      	mov	r4, r1
 80120b2:	b118      	cbz	r0, 80120bc <__swsetup_r+0x14>
 80120b4:	6a03      	ldr	r3, [r0, #32]
 80120b6:	b90b      	cbnz	r3, 80120bc <__swsetup_r+0x14>
 80120b8:	f7fd fa8c 	bl	800f5d4 <__sinit>
 80120bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80120c0:	0719      	lsls	r1, r3, #28
 80120c2:	d422      	bmi.n	801210a <__swsetup_r+0x62>
 80120c4:	06da      	lsls	r2, r3, #27
 80120c6:	d407      	bmi.n	80120d8 <__swsetup_r+0x30>
 80120c8:	2209      	movs	r2, #9
 80120ca:	602a      	str	r2, [r5, #0]
 80120cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80120d0:	81a3      	strh	r3, [r4, #12]
 80120d2:	f04f 30ff 	mov.w	r0, #4294967295
 80120d6:	e033      	b.n	8012140 <__swsetup_r+0x98>
 80120d8:	0758      	lsls	r0, r3, #29
 80120da:	d512      	bpl.n	8012102 <__swsetup_r+0x5a>
 80120dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80120de:	b141      	cbz	r1, 80120f2 <__swsetup_r+0x4a>
 80120e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80120e4:	4299      	cmp	r1, r3
 80120e6:	d002      	beq.n	80120ee <__swsetup_r+0x46>
 80120e8:	4628      	mov	r0, r5
 80120ea:	f7fe fa29 	bl	8010540 <_free_r>
 80120ee:	2300      	movs	r3, #0
 80120f0:	6363      	str	r3, [r4, #52]	@ 0x34
 80120f2:	89a3      	ldrh	r3, [r4, #12]
 80120f4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80120f8:	81a3      	strh	r3, [r4, #12]
 80120fa:	2300      	movs	r3, #0
 80120fc:	6063      	str	r3, [r4, #4]
 80120fe:	6923      	ldr	r3, [r4, #16]
 8012100:	6023      	str	r3, [r4, #0]
 8012102:	89a3      	ldrh	r3, [r4, #12]
 8012104:	f043 0308 	orr.w	r3, r3, #8
 8012108:	81a3      	strh	r3, [r4, #12]
 801210a:	6923      	ldr	r3, [r4, #16]
 801210c:	b94b      	cbnz	r3, 8012122 <__swsetup_r+0x7a>
 801210e:	89a3      	ldrh	r3, [r4, #12]
 8012110:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012114:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012118:	d003      	beq.n	8012122 <__swsetup_r+0x7a>
 801211a:	4621      	mov	r1, r4
 801211c:	4628      	mov	r0, r5
 801211e:	f000 f883 	bl	8012228 <__smakebuf_r>
 8012122:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012126:	f013 0201 	ands.w	r2, r3, #1
 801212a:	d00a      	beq.n	8012142 <__swsetup_r+0x9a>
 801212c:	2200      	movs	r2, #0
 801212e:	60a2      	str	r2, [r4, #8]
 8012130:	6962      	ldr	r2, [r4, #20]
 8012132:	4252      	negs	r2, r2
 8012134:	61a2      	str	r2, [r4, #24]
 8012136:	6922      	ldr	r2, [r4, #16]
 8012138:	b942      	cbnz	r2, 801214c <__swsetup_r+0xa4>
 801213a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801213e:	d1c5      	bne.n	80120cc <__swsetup_r+0x24>
 8012140:	bd38      	pop	{r3, r4, r5, pc}
 8012142:	0799      	lsls	r1, r3, #30
 8012144:	bf58      	it	pl
 8012146:	6962      	ldrpl	r2, [r4, #20]
 8012148:	60a2      	str	r2, [r4, #8]
 801214a:	e7f4      	b.n	8012136 <__swsetup_r+0x8e>
 801214c:	2000      	movs	r0, #0
 801214e:	e7f7      	b.n	8012140 <__swsetup_r+0x98>
 8012150:	20000208 	.word	0x20000208

08012154 <_raise_r>:
 8012154:	291f      	cmp	r1, #31
 8012156:	b538      	push	{r3, r4, r5, lr}
 8012158:	4605      	mov	r5, r0
 801215a:	460c      	mov	r4, r1
 801215c:	d904      	bls.n	8012168 <_raise_r+0x14>
 801215e:	2316      	movs	r3, #22
 8012160:	6003      	str	r3, [r0, #0]
 8012162:	f04f 30ff 	mov.w	r0, #4294967295
 8012166:	bd38      	pop	{r3, r4, r5, pc}
 8012168:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801216a:	b112      	cbz	r2, 8012172 <_raise_r+0x1e>
 801216c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012170:	b94b      	cbnz	r3, 8012186 <_raise_r+0x32>
 8012172:	4628      	mov	r0, r5
 8012174:	f000 f830 	bl	80121d8 <_getpid_r>
 8012178:	4622      	mov	r2, r4
 801217a:	4601      	mov	r1, r0
 801217c:	4628      	mov	r0, r5
 801217e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012182:	f000 b817 	b.w	80121b4 <_kill_r>
 8012186:	2b01      	cmp	r3, #1
 8012188:	d00a      	beq.n	80121a0 <_raise_r+0x4c>
 801218a:	1c59      	adds	r1, r3, #1
 801218c:	d103      	bne.n	8012196 <_raise_r+0x42>
 801218e:	2316      	movs	r3, #22
 8012190:	6003      	str	r3, [r0, #0]
 8012192:	2001      	movs	r0, #1
 8012194:	e7e7      	b.n	8012166 <_raise_r+0x12>
 8012196:	2100      	movs	r1, #0
 8012198:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801219c:	4620      	mov	r0, r4
 801219e:	4798      	blx	r3
 80121a0:	2000      	movs	r0, #0
 80121a2:	e7e0      	b.n	8012166 <_raise_r+0x12>

080121a4 <raise>:
 80121a4:	4b02      	ldr	r3, [pc, #8]	@ (80121b0 <raise+0xc>)
 80121a6:	4601      	mov	r1, r0
 80121a8:	6818      	ldr	r0, [r3, #0]
 80121aa:	f7ff bfd3 	b.w	8012154 <_raise_r>
 80121ae:	bf00      	nop
 80121b0:	20000208 	.word	0x20000208

080121b4 <_kill_r>:
 80121b4:	b538      	push	{r3, r4, r5, lr}
 80121b6:	4d07      	ldr	r5, [pc, #28]	@ (80121d4 <_kill_r+0x20>)
 80121b8:	2300      	movs	r3, #0
 80121ba:	4604      	mov	r4, r0
 80121bc:	4608      	mov	r0, r1
 80121be:	4611      	mov	r1, r2
 80121c0:	602b      	str	r3, [r5, #0]
 80121c2:	f7ef fe37 	bl	8001e34 <_kill>
 80121c6:	1c43      	adds	r3, r0, #1
 80121c8:	d102      	bne.n	80121d0 <_kill_r+0x1c>
 80121ca:	682b      	ldr	r3, [r5, #0]
 80121cc:	b103      	cbz	r3, 80121d0 <_kill_r+0x1c>
 80121ce:	6023      	str	r3, [r4, #0]
 80121d0:	bd38      	pop	{r3, r4, r5, pc}
 80121d2:	bf00      	nop
 80121d4:	20000ab4 	.word	0x20000ab4

080121d8 <_getpid_r>:
 80121d8:	f7ef be24 	b.w	8001e24 <_getpid>

080121dc <__swhatbuf_r>:
 80121dc:	b570      	push	{r4, r5, r6, lr}
 80121de:	460c      	mov	r4, r1
 80121e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80121e4:	2900      	cmp	r1, #0
 80121e6:	b096      	sub	sp, #88	@ 0x58
 80121e8:	4615      	mov	r5, r2
 80121ea:	461e      	mov	r6, r3
 80121ec:	da0d      	bge.n	801220a <__swhatbuf_r+0x2e>
 80121ee:	89a3      	ldrh	r3, [r4, #12]
 80121f0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80121f4:	f04f 0100 	mov.w	r1, #0
 80121f8:	bf14      	ite	ne
 80121fa:	2340      	movne	r3, #64	@ 0x40
 80121fc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012200:	2000      	movs	r0, #0
 8012202:	6031      	str	r1, [r6, #0]
 8012204:	602b      	str	r3, [r5, #0]
 8012206:	b016      	add	sp, #88	@ 0x58
 8012208:	bd70      	pop	{r4, r5, r6, pc}
 801220a:	466a      	mov	r2, sp
 801220c:	f000 f848 	bl	80122a0 <_fstat_r>
 8012210:	2800      	cmp	r0, #0
 8012212:	dbec      	blt.n	80121ee <__swhatbuf_r+0x12>
 8012214:	9901      	ldr	r1, [sp, #4]
 8012216:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801221a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801221e:	4259      	negs	r1, r3
 8012220:	4159      	adcs	r1, r3
 8012222:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012226:	e7eb      	b.n	8012200 <__swhatbuf_r+0x24>

08012228 <__smakebuf_r>:
 8012228:	898b      	ldrh	r3, [r1, #12]
 801222a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801222c:	079d      	lsls	r5, r3, #30
 801222e:	4606      	mov	r6, r0
 8012230:	460c      	mov	r4, r1
 8012232:	d507      	bpl.n	8012244 <__smakebuf_r+0x1c>
 8012234:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012238:	6023      	str	r3, [r4, #0]
 801223a:	6123      	str	r3, [r4, #16]
 801223c:	2301      	movs	r3, #1
 801223e:	6163      	str	r3, [r4, #20]
 8012240:	b003      	add	sp, #12
 8012242:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012244:	ab01      	add	r3, sp, #4
 8012246:	466a      	mov	r2, sp
 8012248:	f7ff ffc8 	bl	80121dc <__swhatbuf_r>
 801224c:	9f00      	ldr	r7, [sp, #0]
 801224e:	4605      	mov	r5, r0
 8012250:	4639      	mov	r1, r7
 8012252:	4630      	mov	r0, r6
 8012254:	f7fe fd22 	bl	8010c9c <_malloc_r>
 8012258:	b948      	cbnz	r0, 801226e <__smakebuf_r+0x46>
 801225a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801225e:	059a      	lsls	r2, r3, #22
 8012260:	d4ee      	bmi.n	8012240 <__smakebuf_r+0x18>
 8012262:	f023 0303 	bic.w	r3, r3, #3
 8012266:	f043 0302 	orr.w	r3, r3, #2
 801226a:	81a3      	strh	r3, [r4, #12]
 801226c:	e7e2      	b.n	8012234 <__smakebuf_r+0xc>
 801226e:	89a3      	ldrh	r3, [r4, #12]
 8012270:	6020      	str	r0, [r4, #0]
 8012272:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012276:	81a3      	strh	r3, [r4, #12]
 8012278:	9b01      	ldr	r3, [sp, #4]
 801227a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801227e:	b15b      	cbz	r3, 8012298 <__smakebuf_r+0x70>
 8012280:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012284:	4630      	mov	r0, r6
 8012286:	f000 f81d 	bl	80122c4 <_isatty_r>
 801228a:	b128      	cbz	r0, 8012298 <__smakebuf_r+0x70>
 801228c:	89a3      	ldrh	r3, [r4, #12]
 801228e:	f023 0303 	bic.w	r3, r3, #3
 8012292:	f043 0301 	orr.w	r3, r3, #1
 8012296:	81a3      	strh	r3, [r4, #12]
 8012298:	89a3      	ldrh	r3, [r4, #12]
 801229a:	431d      	orrs	r5, r3
 801229c:	81a5      	strh	r5, [r4, #12]
 801229e:	e7cf      	b.n	8012240 <__smakebuf_r+0x18>

080122a0 <_fstat_r>:
 80122a0:	b538      	push	{r3, r4, r5, lr}
 80122a2:	4d07      	ldr	r5, [pc, #28]	@ (80122c0 <_fstat_r+0x20>)
 80122a4:	2300      	movs	r3, #0
 80122a6:	4604      	mov	r4, r0
 80122a8:	4608      	mov	r0, r1
 80122aa:	4611      	mov	r1, r2
 80122ac:	602b      	str	r3, [r5, #0]
 80122ae:	f7ef fe21 	bl	8001ef4 <_fstat>
 80122b2:	1c43      	adds	r3, r0, #1
 80122b4:	d102      	bne.n	80122bc <_fstat_r+0x1c>
 80122b6:	682b      	ldr	r3, [r5, #0]
 80122b8:	b103      	cbz	r3, 80122bc <_fstat_r+0x1c>
 80122ba:	6023      	str	r3, [r4, #0]
 80122bc:	bd38      	pop	{r3, r4, r5, pc}
 80122be:	bf00      	nop
 80122c0:	20000ab4 	.word	0x20000ab4

080122c4 <_isatty_r>:
 80122c4:	b538      	push	{r3, r4, r5, lr}
 80122c6:	4d06      	ldr	r5, [pc, #24]	@ (80122e0 <_isatty_r+0x1c>)
 80122c8:	2300      	movs	r3, #0
 80122ca:	4604      	mov	r4, r0
 80122cc:	4608      	mov	r0, r1
 80122ce:	602b      	str	r3, [r5, #0]
 80122d0:	f7ef fe20 	bl	8001f14 <_isatty>
 80122d4:	1c43      	adds	r3, r0, #1
 80122d6:	d102      	bne.n	80122de <_isatty_r+0x1a>
 80122d8:	682b      	ldr	r3, [r5, #0]
 80122da:	b103      	cbz	r3, 80122de <_isatty_r+0x1a>
 80122dc:	6023      	str	r3, [r4, #0]
 80122de:	bd38      	pop	{r3, r4, r5, pc}
 80122e0:	20000ab4 	.word	0x20000ab4

080122e4 <fmod>:
 80122e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80122e6:	ed2d 8b02 	vpush	{d8}
 80122ea:	ec57 6b10 	vmov	r6, r7, d0
 80122ee:	ec55 4b11 	vmov	r4, r5, d1
 80122f2:	f000 f825 	bl	8012340 <__ieee754_fmod>
 80122f6:	4622      	mov	r2, r4
 80122f8:	462b      	mov	r3, r5
 80122fa:	4630      	mov	r0, r6
 80122fc:	4639      	mov	r1, r7
 80122fe:	eeb0 8a40 	vmov.f32	s16, s0
 8012302:	eef0 8a60 	vmov.f32	s17, s1
 8012306:	f7ee fc39 	bl	8000b7c <__aeabi_dcmpun>
 801230a:	b990      	cbnz	r0, 8012332 <fmod+0x4e>
 801230c:	2200      	movs	r2, #0
 801230e:	2300      	movs	r3, #0
 8012310:	4620      	mov	r0, r4
 8012312:	4629      	mov	r1, r5
 8012314:	f7ee fc00 	bl	8000b18 <__aeabi_dcmpeq>
 8012318:	b158      	cbz	r0, 8012332 <fmod+0x4e>
 801231a:	f7fd fa79 	bl	800f810 <__errno>
 801231e:	2321      	movs	r3, #33	@ 0x21
 8012320:	6003      	str	r3, [r0, #0]
 8012322:	2200      	movs	r2, #0
 8012324:	2300      	movs	r3, #0
 8012326:	4610      	mov	r0, r2
 8012328:	4619      	mov	r1, r3
 801232a:	f7ee fab7 	bl	800089c <__aeabi_ddiv>
 801232e:	ec41 0b18 	vmov	d8, r0, r1
 8012332:	eeb0 0a48 	vmov.f32	s0, s16
 8012336:	eef0 0a68 	vmov.f32	s1, s17
 801233a:	ecbd 8b02 	vpop	{d8}
 801233e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012340 <__ieee754_fmod>:
 8012340:	ec53 2b11 	vmov	r2, r3, d1
 8012344:	f023 4c00 	bic.w	ip, r3, #2147483648	@ 0x80000000
 8012348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801234c:	ea52 040c 	orrs.w	r4, r2, ip
 8012350:	ec51 0b10 	vmov	r0, r1, d0
 8012354:	461e      	mov	r6, r3
 8012356:	4617      	mov	r7, r2
 8012358:	4696      	mov	lr, r2
 801235a:	d00c      	beq.n	8012376 <__ieee754_fmod+0x36>
 801235c:	4c77      	ldr	r4, [pc, #476]	@ (801253c <__ieee754_fmod+0x1fc>)
 801235e:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 8012362:	45a0      	cmp	r8, r4
 8012364:	4689      	mov	r9, r1
 8012366:	d806      	bhi.n	8012376 <__ieee754_fmod+0x36>
 8012368:	4254      	negs	r4, r2
 801236a:	4d75      	ldr	r5, [pc, #468]	@ (8012540 <__ieee754_fmod+0x200>)
 801236c:	4314      	orrs	r4, r2
 801236e:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 8012372:	42ac      	cmp	r4, r5
 8012374:	d909      	bls.n	801238a <__ieee754_fmod+0x4a>
 8012376:	f7ee f967 	bl	8000648 <__aeabi_dmul>
 801237a:	4602      	mov	r2, r0
 801237c:	460b      	mov	r3, r1
 801237e:	f7ee fa8d 	bl	800089c <__aeabi_ddiv>
 8012382:	ec41 0b10 	vmov	d0, r0, r1
 8012386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801238a:	45e0      	cmp	r8, ip
 801238c:	4682      	mov	sl, r0
 801238e:	4604      	mov	r4, r0
 8012390:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8012394:	dc09      	bgt.n	80123aa <__ieee754_fmod+0x6a>
 8012396:	dbf4      	blt.n	8012382 <__ieee754_fmod+0x42>
 8012398:	4282      	cmp	r2, r0
 801239a:	d8f2      	bhi.n	8012382 <__ieee754_fmod+0x42>
 801239c:	d105      	bne.n	80123aa <__ieee754_fmod+0x6a>
 801239e:	4b69      	ldr	r3, [pc, #420]	@ (8012544 <__ieee754_fmod+0x204>)
 80123a0:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 80123a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80123a8:	e7eb      	b.n	8012382 <__ieee754_fmod+0x42>
 80123aa:	4a65      	ldr	r2, [pc, #404]	@ (8012540 <__ieee754_fmod+0x200>)
 80123ac:	ea19 0f02 	tst.w	r9, r2
 80123b0:	d148      	bne.n	8012444 <__ieee754_fmod+0x104>
 80123b2:	f1b8 0f00 	cmp.w	r8, #0
 80123b6:	d13d      	bne.n	8012434 <__ieee754_fmod+0xf4>
 80123b8:	4963      	ldr	r1, [pc, #396]	@ (8012548 <__ieee754_fmod+0x208>)
 80123ba:	4653      	mov	r3, sl
 80123bc:	2b00      	cmp	r3, #0
 80123be:	dc36      	bgt.n	801242e <__ieee754_fmod+0xee>
 80123c0:	4216      	tst	r6, r2
 80123c2:	d14f      	bne.n	8012464 <__ieee754_fmod+0x124>
 80123c4:	f1bc 0f00 	cmp.w	ip, #0
 80123c8:	d144      	bne.n	8012454 <__ieee754_fmod+0x114>
 80123ca:	4a5f      	ldr	r2, [pc, #380]	@ (8012548 <__ieee754_fmod+0x208>)
 80123cc:	463b      	mov	r3, r7
 80123ce:	2b00      	cmp	r3, #0
 80123d0:	dc3d      	bgt.n	801244e <__ieee754_fmod+0x10e>
 80123d2:	485e      	ldr	r0, [pc, #376]	@ (801254c <__ieee754_fmod+0x20c>)
 80123d4:	4281      	cmp	r1, r0
 80123d6:	db4a      	blt.n	801246e <__ieee754_fmod+0x12e>
 80123d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80123dc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80123e0:	485a      	ldr	r0, [pc, #360]	@ (801254c <__ieee754_fmod+0x20c>)
 80123e2:	4282      	cmp	r2, r0
 80123e4:	db57      	blt.n	8012496 <__ieee754_fmod+0x156>
 80123e6:	f3c6 0613 	ubfx	r6, r6, #0, #20
 80123ea:	f446 1680 	orr.w	r6, r6, #1048576	@ 0x100000
 80123ee:	1a89      	subs	r1, r1, r2
 80123f0:	1b98      	subs	r0, r3, r6
 80123f2:	eba4 070e 	sub.w	r7, r4, lr
 80123f6:	2900      	cmp	r1, #0
 80123f8:	d162      	bne.n	80124c0 <__ieee754_fmod+0x180>
 80123fa:	4574      	cmp	r4, lr
 80123fc:	bf38      	it	cc
 80123fe:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8012402:	2800      	cmp	r0, #0
 8012404:	bfa4      	itt	ge
 8012406:	463c      	movge	r4, r7
 8012408:	4603      	movge	r3, r0
 801240a:	ea53 0104 	orrs.w	r1, r3, r4
 801240e:	d0c6      	beq.n	801239e <__ieee754_fmod+0x5e>
 8012410:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8012414:	db69      	blt.n	80124ea <__ieee754_fmod+0x1aa>
 8012416:	494d      	ldr	r1, [pc, #308]	@ (801254c <__ieee754_fmod+0x20c>)
 8012418:	428a      	cmp	r2, r1
 801241a:	db6c      	blt.n	80124f6 <__ieee754_fmod+0x1b6>
 801241c:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8012420:	432b      	orrs	r3, r5
 8012422:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 8012426:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801242a:	4620      	mov	r0, r4
 801242c:	e7a9      	b.n	8012382 <__ieee754_fmod+0x42>
 801242e:	3901      	subs	r1, #1
 8012430:	005b      	lsls	r3, r3, #1
 8012432:	e7c3      	b.n	80123bc <__ieee754_fmod+0x7c>
 8012434:	4945      	ldr	r1, [pc, #276]	@ (801254c <__ieee754_fmod+0x20c>)
 8012436:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 801243a:	2b00      	cmp	r3, #0
 801243c:	ddc0      	ble.n	80123c0 <__ieee754_fmod+0x80>
 801243e:	3901      	subs	r1, #1
 8012440:	005b      	lsls	r3, r3, #1
 8012442:	e7fa      	b.n	801243a <__ieee754_fmod+0xfa>
 8012444:	ea4f 5128 	mov.w	r1, r8, asr #20
 8012448:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 801244c:	e7b8      	b.n	80123c0 <__ieee754_fmod+0x80>
 801244e:	3a01      	subs	r2, #1
 8012450:	005b      	lsls	r3, r3, #1
 8012452:	e7bc      	b.n	80123ce <__ieee754_fmod+0x8e>
 8012454:	4a3d      	ldr	r2, [pc, #244]	@ (801254c <__ieee754_fmod+0x20c>)
 8012456:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 801245a:	2b00      	cmp	r3, #0
 801245c:	ddb9      	ble.n	80123d2 <__ieee754_fmod+0x92>
 801245e:	3a01      	subs	r2, #1
 8012460:	005b      	lsls	r3, r3, #1
 8012462:	e7fa      	b.n	801245a <__ieee754_fmod+0x11a>
 8012464:	ea4f 522c 	mov.w	r2, ip, asr #20
 8012468:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 801246c:	e7b1      	b.n	80123d2 <__ieee754_fmod+0x92>
 801246e:	1a40      	subs	r0, r0, r1
 8012470:	281f      	cmp	r0, #31
 8012472:	dc0a      	bgt.n	801248a <__ieee754_fmod+0x14a>
 8012474:	f201 431e 	addw	r3, r1, #1054	@ 0x41e
 8012478:	fa08 f800 	lsl.w	r8, r8, r0
 801247c:	fa2a f303 	lsr.w	r3, sl, r3
 8012480:	ea43 0308 	orr.w	r3, r3, r8
 8012484:	fa0a f400 	lsl.w	r4, sl, r0
 8012488:	e7aa      	b.n	80123e0 <__ieee754_fmod+0xa0>
 801248a:	4b31      	ldr	r3, [pc, #196]	@ (8012550 <__ieee754_fmod+0x210>)
 801248c:	1a5b      	subs	r3, r3, r1
 801248e:	fa0a f303 	lsl.w	r3, sl, r3
 8012492:	2400      	movs	r4, #0
 8012494:	e7a4      	b.n	80123e0 <__ieee754_fmod+0xa0>
 8012496:	1a80      	subs	r0, r0, r2
 8012498:	281f      	cmp	r0, #31
 801249a:	dc0a      	bgt.n	80124b2 <__ieee754_fmod+0x172>
 801249c:	f202 461e 	addw	r6, r2, #1054	@ 0x41e
 80124a0:	fa0c fc00 	lsl.w	ip, ip, r0
 80124a4:	fa27 f606 	lsr.w	r6, r7, r6
 80124a8:	ea46 060c 	orr.w	r6, r6, ip
 80124ac:	fa07 fe00 	lsl.w	lr, r7, r0
 80124b0:	e79d      	b.n	80123ee <__ieee754_fmod+0xae>
 80124b2:	4e27      	ldr	r6, [pc, #156]	@ (8012550 <__ieee754_fmod+0x210>)
 80124b4:	1ab6      	subs	r6, r6, r2
 80124b6:	fa07 f606 	lsl.w	r6, r7, r6
 80124ba:	f04f 0e00 	mov.w	lr, #0
 80124be:	e796      	b.n	80123ee <__ieee754_fmod+0xae>
 80124c0:	4574      	cmp	r4, lr
 80124c2:	bf38      	it	cc
 80124c4:	f100 30ff 	addcc.w	r0, r0, #4294967295
 80124c8:	2800      	cmp	r0, #0
 80124ca:	da05      	bge.n	80124d8 <__ieee754_fmod+0x198>
 80124cc:	0fe0      	lsrs	r0, r4, #31
 80124ce:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80124d2:	0064      	lsls	r4, r4, #1
 80124d4:	3901      	subs	r1, #1
 80124d6:	e78b      	b.n	80123f0 <__ieee754_fmod+0xb0>
 80124d8:	ea50 0307 	orrs.w	r3, r0, r7
 80124dc:	f43f af5f 	beq.w	801239e <__ieee754_fmod+0x5e>
 80124e0:	0ffb      	lsrs	r3, r7, #31
 80124e2:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80124e6:	007c      	lsls	r4, r7, #1
 80124e8:	e7f4      	b.n	80124d4 <__ieee754_fmod+0x194>
 80124ea:	0fe1      	lsrs	r1, r4, #31
 80124ec:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80124f0:	0064      	lsls	r4, r4, #1
 80124f2:	3a01      	subs	r2, #1
 80124f4:	e78c      	b.n	8012410 <__ieee754_fmod+0xd0>
 80124f6:	1a89      	subs	r1, r1, r2
 80124f8:	2914      	cmp	r1, #20
 80124fa:	dc0a      	bgt.n	8012512 <__ieee754_fmod+0x1d2>
 80124fc:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 8012500:	fa03 f202 	lsl.w	r2, r3, r2
 8012504:	40cc      	lsrs	r4, r1
 8012506:	4322      	orrs	r2, r4
 8012508:	410b      	asrs	r3, r1
 801250a:	ea43 0105 	orr.w	r1, r3, r5
 801250e:	4610      	mov	r0, r2
 8012510:	e737      	b.n	8012382 <__ieee754_fmod+0x42>
 8012512:	291f      	cmp	r1, #31
 8012514:	dc07      	bgt.n	8012526 <__ieee754_fmod+0x1e6>
 8012516:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 801251a:	40cc      	lsrs	r4, r1
 801251c:	fa03 f202 	lsl.w	r2, r3, r2
 8012520:	4322      	orrs	r2, r4
 8012522:	462b      	mov	r3, r5
 8012524:	e7f1      	b.n	801250a <__ieee754_fmod+0x1ca>
 8012526:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 801252a:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 801252e:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 8012532:	32e2      	adds	r2, #226	@ 0xe2
 8012534:	fa43 f202 	asr.w	r2, r3, r2
 8012538:	e7f3      	b.n	8012522 <__ieee754_fmod+0x1e2>
 801253a:	bf00      	nop
 801253c:	7fefffff 	.word	0x7fefffff
 8012540:	7ff00000 	.word	0x7ff00000
 8012544:	08012b18 	.word	0x08012b18
 8012548:	fffffbed 	.word	0xfffffbed
 801254c:	fffffc02 	.word	0xfffffc02
 8012550:	fffffbe2 	.word	0xfffffbe2

08012554 <_init>:
 8012554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012556:	bf00      	nop
 8012558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801255a:	bc08      	pop	{r3}
 801255c:	469e      	mov	lr, r3
 801255e:	4770      	bx	lr

08012560 <_fini>:
 8012560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012562:	bf00      	nop
 8012564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012566:	bc08      	pop	{r3}
 8012568:	469e      	mov	lr, r3
 801256a:	4770      	bx	lr
