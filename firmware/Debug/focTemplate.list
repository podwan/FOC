
focTemplate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a9dc  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  0800abb4  0800abb4  0000bbb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac04  0800ac04  0000c024  2**0
                  CONTENTS
  4 .ARM          00000008  0800ac04  0800ac04  0000bc04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ac0c  0800ac0c  0000c024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ac0c  0800ac0c  0000bc0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ac10  0800ac10  0000bc10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20000000  0800ac14  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004ec  20000024  0800ac38  0000c024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000510  0800ac38  0000c510  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c024  2**0
                  CONTENTS, READONLY
 12 .debug_info   000220c4  00000000  00000000  0000c054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000466b  00000000  00000000  0002e118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ad8  00000000  00000000  00032788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001498  00000000  00000000  00034260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002488a  00000000  00000000  000356f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022ba2  00000000  00000000  00059f82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e9c7d  00000000  00000000  0007cb24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001667a1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000070dc  00000000  00000000  001667e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  0016d8c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000024 	.word	0x20000024
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800ab9c 	.word	0x0800ab9c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000028 	.word	0x20000028
 8000214:	0800ab9c 	.word	0x0800ab9c

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b09a      	sub	sp, #104	@ 0x68
 800050c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800050e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	605a      	str	r2, [r3, #4]
 8000518:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800051a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800051e:	2220      	movs	r2, #32
 8000520:	2100      	movs	r1, #0
 8000522:	4618      	mov	r0, r3
 8000524:	f00a fb0d 	bl	800ab42 <memset>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000528:	463b      	mov	r3, r7
 800052a:	223c      	movs	r2, #60	@ 0x3c
 800052c:	2100      	movs	r1, #0
 800052e:	4618      	mov	r0, r3
 8000530:	f00a fb07 	bl	800ab42 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000534:	4b4d      	ldr	r3, [pc, #308]	@ (800066c <MX_ADC1_Init+0x164>)
 8000536:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800053a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 800053c:	4b4b      	ldr	r3, [pc, #300]	@ (800066c <MX_ADC1_Init+0x164>)
 800053e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000542:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000544:	4b49      	ldr	r3, [pc, #292]	@ (800066c <MX_ADC1_Init+0x164>)
 8000546:	2200      	movs	r2, #0
 8000548:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800054a:	4b48      	ldr	r3, [pc, #288]	@ (800066c <MX_ADC1_Init+0x164>)
 800054c:	2200      	movs	r2, #0
 800054e:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000550:	4b46      	ldr	r3, [pc, #280]	@ (800066c <MX_ADC1_Init+0x164>)
 8000552:	2200      	movs	r2, #0
 8000554:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000556:	4b45      	ldr	r3, [pc, #276]	@ (800066c <MX_ADC1_Init+0x164>)
 8000558:	2201      	movs	r2, #1
 800055a:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800055c:	4b43      	ldr	r3, [pc, #268]	@ (800066c <MX_ADC1_Init+0x164>)
 800055e:	2204      	movs	r2, #4
 8000560:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000562:	4b42      	ldr	r3, [pc, #264]	@ (800066c <MX_ADC1_Init+0x164>)
 8000564:	2200      	movs	r2, #0
 8000566:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000568:	4b40      	ldr	r3, [pc, #256]	@ (800066c <MX_ADC1_Init+0x164>)
 800056a:	2200      	movs	r2, #0
 800056c:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800056e:	4b3f      	ldr	r3, [pc, #252]	@ (800066c <MX_ADC1_Init+0x164>)
 8000570:	2201      	movs	r2, #1
 8000572:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000574:	4b3d      	ldr	r3, [pc, #244]	@ (800066c <MX_ADC1_Init+0x164>)
 8000576:	2200      	movs	r2, #0
 8000578:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800057c:	4b3b      	ldr	r3, [pc, #236]	@ (800066c <MX_ADC1_Init+0x164>)
 800057e:	2200      	movs	r2, #0
 8000580:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000582:	4b3a      	ldr	r3, [pc, #232]	@ (800066c <MX_ADC1_Init+0x164>)
 8000584:	2200      	movs	r2, #0
 8000586:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000588:	4b38      	ldr	r3, [pc, #224]	@ (800066c <MX_ADC1_Init+0x164>)
 800058a:	2200      	movs	r2, #0
 800058c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000590:	4b36      	ldr	r3, [pc, #216]	@ (800066c <MX_ADC1_Init+0x164>)
 8000592:	2200      	movs	r2, #0
 8000594:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000596:	4b35      	ldr	r3, [pc, #212]	@ (800066c <MX_ADC1_Init+0x164>)
 8000598:	2200      	movs	r2, #0
 800059a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800059e:	4833      	ldr	r0, [pc, #204]	@ (800066c <MX_ADC1_Init+0x164>)
 80005a0:	f001 fcde 	bl	8001f60 <HAL_ADC_Init>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80005aa:	f000 fd04 	bl	8000fb6 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80005ae:	2300      	movs	r3, #0
 80005b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80005b2:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80005b6:	4619      	mov	r1, r3
 80005b8:	482c      	ldr	r0, [pc, #176]	@ (800066c <MX_ADC1_Init+0x164>)
 80005ba:	f003 fe07 	bl	80041cc <HAL_ADCEx_MultiModeConfigChannel>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 80005c4:	f000 fcf7 	bl	8000fb6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80005c8:	4b29      	ldr	r3, [pc, #164]	@ (8000670 <MX_ADC1_Init+0x168>)
 80005ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005cc:	2306      	movs	r3, #6
 80005ce:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80005d0:	2300      	movs	r3, #0
 80005d2:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005d4:	237f      	movs	r3, #127	@ 0x7f
 80005d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005d8:	2304      	movs	r3, #4
 80005da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfig.Offset = 0;
 80005dc:	2300      	movs	r3, #0
 80005de:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005e0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80005e4:	4619      	mov	r1, r3
 80005e6:	4821      	ldr	r0, [pc, #132]	@ (800066c <MX_ADC1_Init+0x164>)
 80005e8:	f002 f876 	bl	80026d8 <HAL_ADC_ConfigChannel>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 80005f2:	f000 fce0 	bl	8000fb6 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 80005f6:	4b1f      	ldr	r3, [pc, #124]	@ (8000674 <MX_ADC1_Init+0x16c>)
 80005f8:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80005fa:	2309      	movs	r3, #9
 80005fc:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 80005fe:	2301      	movs	r3, #1
 8000600:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000602:	237f      	movs	r3, #127	@ 0x7f
 8000604:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8000606:	2304      	movs	r3, #4
 8000608:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffset = 0;
 800060a:	2300      	movs	r3, #0
 800060c:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedNbrOfConversion = 2;
 800060e:	2302      	movs	r3, #2
 8000610:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000612:	2300      	movs	r3, #0
 8000614:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 8000618:	2300      	movs	r3, #0
 800061a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  sConfigInjected.QueueInjectedContext = DISABLE;
 800061e:	2300      	movs	r3, #0
 8000620:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 8000624:	2384      	movs	r3, #132	@ 0x84
 8000626:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8000628:	2380      	movs	r3, #128	@ 0x80
 800062a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigInjected.InjecOversamplingMode = DISABLE;
 800062c:	2300      	movs	r3, #0
 800062e:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000632:	463b      	mov	r3, r7
 8000634:	4619      	mov	r1, r3
 8000636:	480d      	ldr	r0, [pc, #52]	@ (800066c <MX_ADC1_Init+0x164>)
 8000638:	f003 f8e8 	bl	800380c <HAL_ADCEx_InjectedConfigChannel>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <MX_ADC1_Init+0x13e>
  {
    Error_Handler();
 8000642:	f000 fcb8 	bl	8000fb6 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_12;
 8000646:	4b0c      	ldr	r3, [pc, #48]	@ (8000678 <MX_ADC1_Init+0x170>)
 8000648:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 800064a:	f240 130f 	movw	r3, #271	@ 0x10f
 800064e:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000650:	463b      	mov	r3, r7
 8000652:	4619      	mov	r1, r3
 8000654:	4805      	ldr	r0, [pc, #20]	@ (800066c <MX_ADC1_Init+0x164>)
 8000656:	f003 f8d9 	bl	800380c <HAL_ADCEx_InjectedConfigChannel>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <MX_ADC1_Init+0x15c>
  {
    Error_Handler();
 8000660:	f000 fca9 	bl	8000fb6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000664:	bf00      	nop
 8000666:	3768      	adds	r7, #104	@ 0x68
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	20000040 	.word	0x20000040
 8000670:	2e300800 	.word	0x2e300800
 8000674:	0c900008 	.word	0x0c900008
 8000678:	32601000 	.word	0x32601000

0800067c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b098      	sub	sp, #96	@ 0x60
 8000680:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000682:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000686:	223c      	movs	r2, #60	@ 0x3c
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f00a fa59 	bl	800ab42 <memset>
  ADC_ChannelConfTypeDef sConfig = {0};
 8000690:	1d3b      	adds	r3, r7, #4
 8000692:	2220      	movs	r2, #32
 8000694:	2100      	movs	r1, #0
 8000696:	4618      	mov	r0, r3
 8000698:	f00a fa53 	bl	800ab42 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800069c:	4b3f      	ldr	r3, [pc, #252]	@ (800079c <MX_ADC2_Init+0x120>)
 800069e:	4a40      	ldr	r2, [pc, #256]	@ (80007a0 <MX_ADC2_Init+0x124>)
 80006a0:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80006a2:	4b3e      	ldr	r3, [pc, #248]	@ (800079c <MX_ADC2_Init+0x120>)
 80006a4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80006a8:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80006aa:	4b3c      	ldr	r3, [pc, #240]	@ (800079c <MX_ADC2_Init+0x120>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006b0:	4b3a      	ldr	r3, [pc, #232]	@ (800079c <MX_ADC2_Init+0x120>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80006b6:	4b39      	ldr	r3, [pc, #228]	@ (800079c <MX_ADC2_Init+0x120>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006bc:	4b37      	ldr	r3, [pc, #220]	@ (800079c <MX_ADC2_Init+0x120>)
 80006be:	2200      	movs	r2, #0
 80006c0:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006c2:	4b36      	ldr	r3, [pc, #216]	@ (800079c <MX_ADC2_Init+0x120>)
 80006c4:	2204      	movs	r2, #4
 80006c6:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80006c8:	4b34      	ldr	r3, [pc, #208]	@ (800079c <MX_ADC2_Init+0x120>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80006ce:	4b33      	ldr	r3, [pc, #204]	@ (800079c <MX_ADC2_Init+0x120>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80006d4:	4b31      	ldr	r3, [pc, #196]	@ (800079c <MX_ADC2_Init+0x120>)
 80006d6:	2201      	movs	r2, #1
 80006d8:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80006da:	4b30      	ldr	r3, [pc, #192]	@ (800079c <MX_ADC2_Init+0x120>)
 80006dc:	2200      	movs	r2, #0
 80006de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006e2:	4b2e      	ldr	r3, [pc, #184]	@ (800079c <MX_ADC2_Init+0x120>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006e8:	4b2c      	ldr	r3, [pc, #176]	@ (800079c <MX_ADC2_Init+0x120>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80006ee:	4b2b      	ldr	r3, [pc, #172]	@ (800079c <MX_ADC2_Init+0x120>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006f6:	4b29      	ldr	r3, [pc, #164]	@ (800079c <MX_ADC2_Init+0x120>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80006fc:	4b27      	ldr	r3, [pc, #156]	@ (800079c <MX_ADC2_Init+0x120>)
 80006fe:	2200      	movs	r2, #0
 8000700:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000704:	4825      	ldr	r0, [pc, #148]	@ (800079c <MX_ADC2_Init+0x120>)
 8000706:	f001 fc2b 	bl	8001f60 <HAL_ADC_Init>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_ADC2_Init+0x98>
  {
    Error_Handler();
 8000710:	f000 fc51 	bl	8000fb6 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8000714:	4b23      	ldr	r3, [pc, #140]	@ (80007a4 <MX_ADC2_Init+0x128>)
 8000716:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000718:	2309      	movs	r3, #9
 800071a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 800071c:	2301      	movs	r3, #1
 800071e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000720:	237f      	movs	r3, #127	@ 0x7f
 8000722:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8000724:	2304      	movs	r3, #4
 8000726:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigInjected.InjectedOffset = 0;
 8000728:	2300      	movs	r3, #0
 800072a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigInjected.InjectedNbrOfConversion = 1;
 800072c:	2301      	movs	r3, #1
 800072e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000730:	2300      	movs	r3, #0
 8000732:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  sConfigInjected.AutoInjectedConv = DISABLE;
 8000736:	2300      	movs	r3, #0
 8000738:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  sConfigInjected.QueueInjectedContext = DISABLE;
 800073c:	2300      	movs	r3, #0
 800073e:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 8000742:	2384      	movs	r3, #132	@ 0x84
 8000744:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8000746:	2380      	movs	r3, #128	@ 0x80
 8000748:	653b      	str	r3, [r7, #80]	@ 0x50
  sConfigInjected.InjecOversamplingMode = DISABLE;
 800074a:	2300      	movs	r3, #0
 800074c:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000750:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000754:	4619      	mov	r1, r3
 8000756:	4811      	ldr	r0, [pc, #68]	@ (800079c <MX_ADC2_Init+0x120>)
 8000758:	f003 f858 	bl	800380c <HAL_ADCEx_InjectedConfigChannel>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_ADC2_Init+0xea>
  {
    Error_Handler();
 8000762:	f000 fc28 	bl	8000fb6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000766:	4b10      	ldr	r3, [pc, #64]	@ (80007a8 <MX_ADC2_Init+0x12c>)
 8000768:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800076a:	2306      	movs	r3, #6
 800076c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800076e:	2300      	movs	r3, #0
 8000770:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000772:	237f      	movs	r3, #127	@ 0x7f
 8000774:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000776:	2304      	movs	r3, #4
 8000778:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800077a:	2300      	movs	r3, #0
 800077c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800077e:	1d3b      	adds	r3, r7, #4
 8000780:	4619      	mov	r1, r3
 8000782:	4806      	ldr	r0, [pc, #24]	@ (800079c <MX_ADC2_Init+0x120>)
 8000784:	f001 ffa8 	bl	80026d8 <HAL_ADC_ConfigChannel>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_ADC2_Init+0x116>
  {
    Error_Handler();
 800078e:	f000 fc12 	bl	8000fb6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000792:	bf00      	nop
 8000794:	3760      	adds	r7, #96	@ 0x60
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	200000ac 	.word	0x200000ac
 80007a0:	50000100 	.word	0x50000100
 80007a4:	0c900008 	.word	0x0c900008
 80007a8:	04300002 	.word	0x04300002

080007ac <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b09e      	sub	sp, #120	@ 0x78
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
 80007be:	609a      	str	r2, [r3, #8]
 80007c0:	60da      	str	r2, [r3, #12]
 80007c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007c4:	f107 0320 	add.w	r3, r7, #32
 80007c8:	2244      	movs	r2, #68	@ 0x44
 80007ca:	2100      	movs	r1, #0
 80007cc:	4618      	mov	r0, r3
 80007ce:	f00a f9b8 	bl	800ab42 <memset>
  if(adcHandle->Instance==ADC1)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80007da:	d15f      	bne.n	800089c <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80007dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80007e0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80007e2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80007e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007e8:	f107 0320 	add.w	r3, r7, #32
 80007ec:	4618      	mov	r0, r3
 80007ee:	f006 fb57 	bl	8006ea0 <HAL_RCCEx_PeriphCLKConfig>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80007f8:	f000 fbdd 	bl	8000fb6 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80007fc:	4b4f      	ldr	r3, [pc, #316]	@ (800093c <HAL_ADC_MspInit+0x190>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	3301      	adds	r3, #1
 8000802:	4a4e      	ldr	r2, [pc, #312]	@ (800093c <HAL_ADC_MspInit+0x190>)
 8000804:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000806:	4b4d      	ldr	r3, [pc, #308]	@ (800093c <HAL_ADC_MspInit+0x190>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	2b01      	cmp	r3, #1
 800080c:	d10b      	bne.n	8000826 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800080e:	4b4c      	ldr	r3, [pc, #304]	@ (8000940 <HAL_ADC_MspInit+0x194>)
 8000810:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000812:	4a4b      	ldr	r2, [pc, #300]	@ (8000940 <HAL_ADC_MspInit+0x194>)
 8000814:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000818:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800081a:	4b49      	ldr	r3, [pc, #292]	@ (8000940 <HAL_ADC_MspInit+0x194>)
 800081c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800081e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000822:	61fb      	str	r3, [r7, #28]
 8000824:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000826:	4b46      	ldr	r3, [pc, #280]	@ (8000940 <HAL_ADC_MspInit+0x194>)
 8000828:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800082a:	4a45      	ldr	r2, [pc, #276]	@ (8000940 <HAL_ADC_MspInit+0x194>)
 800082c:	f043 0301 	orr.w	r3, r3, #1
 8000830:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000832:	4b43      	ldr	r3, [pc, #268]	@ (8000940 <HAL_ADC_MspInit+0x194>)
 8000834:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000836:	f003 0301 	and.w	r3, r3, #1
 800083a:	61bb      	str	r3, [r7, #24]
 800083c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800083e:	4b40      	ldr	r3, [pc, #256]	@ (8000940 <HAL_ADC_MspInit+0x194>)
 8000840:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000842:	4a3f      	ldr	r2, [pc, #252]	@ (8000940 <HAL_ADC_MspInit+0x194>)
 8000844:	f043 0302 	orr.w	r3, r3, #2
 8000848:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800084a:	4b3d      	ldr	r3, [pc, #244]	@ (8000940 <HAL_ADC_MspInit+0x194>)
 800084c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800084e:	f003 0302 	and.w	r3, r3, #2
 8000852:	617b      	str	r3, [r7, #20]
 8000854:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN3
    PB1     ------> ADC1_IN12
    PB12     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000856:	2304      	movs	r3, #4
 8000858:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800085a:	2303      	movs	r3, #3
 800085c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000862:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000866:	4619      	mov	r1, r3
 8000868:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800086c:	f005 fa82 	bl	8005d74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_12;
 8000870:	f241 0302 	movw	r3, #4098	@ 0x1002
 8000874:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000876:	2303      	movs	r3, #3
 8000878:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800087e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000882:	4619      	mov	r1, r3
 8000884:	482f      	ldr	r0, [pc, #188]	@ (8000944 <HAL_ADC_MspInit+0x198>)
 8000886:	f005 fa75 	bl	8005d74 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800088a:	2200      	movs	r2, #0
 800088c:	2100      	movs	r1, #0
 800088e:	2012      	movs	r0, #18
 8000890:	f004 f843 	bl	800491a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000894:	2012      	movs	r0, #18
 8000896:	f004 f85a 	bl	800494e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800089a:	e04a      	b.n	8000932 <HAL_ADC_MspInit+0x186>
  else if(adcHandle->Instance==ADC2)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a29      	ldr	r2, [pc, #164]	@ (8000948 <HAL_ADC_MspInit+0x19c>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d145      	bne.n	8000932 <HAL_ADC_MspInit+0x186>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80008a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80008aa:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80008ac:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80008b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008b2:	f107 0320 	add.w	r3, r7, #32
 80008b6:	4618      	mov	r0, r3
 80008b8:	f006 faf2 	bl	8006ea0 <HAL_RCCEx_PeriphCLKConfig>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <HAL_ADC_MspInit+0x11a>
      Error_Handler();
 80008c2:	f000 fb78 	bl	8000fb6 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80008c6:	4b1d      	ldr	r3, [pc, #116]	@ (800093c <HAL_ADC_MspInit+0x190>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	3301      	adds	r3, #1
 80008cc:	4a1b      	ldr	r2, [pc, #108]	@ (800093c <HAL_ADC_MspInit+0x190>)
 80008ce:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80008d0:	4b1a      	ldr	r3, [pc, #104]	@ (800093c <HAL_ADC_MspInit+0x190>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	2b01      	cmp	r3, #1
 80008d6:	d10b      	bne.n	80008f0 <HAL_ADC_MspInit+0x144>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80008d8:	4b19      	ldr	r3, [pc, #100]	@ (8000940 <HAL_ADC_MspInit+0x194>)
 80008da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008dc:	4a18      	ldr	r2, [pc, #96]	@ (8000940 <HAL_ADC_MspInit+0x194>)
 80008de:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80008e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008e4:	4b16      	ldr	r3, [pc, #88]	@ (8000940 <HAL_ADC_MspInit+0x194>)
 80008e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80008ec:	613b      	str	r3, [r7, #16]
 80008ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f0:	4b13      	ldr	r3, [pc, #76]	@ (8000940 <HAL_ADC_MspInit+0x194>)
 80008f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008f4:	4a12      	ldr	r2, [pc, #72]	@ (8000940 <HAL_ADC_MspInit+0x194>)
 80008f6:	f043 0301 	orr.w	r3, r3, #1
 80008fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008fc:	4b10      	ldr	r3, [pc, #64]	@ (8000940 <HAL_ADC_MspInit+0x194>)
 80008fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000900:	f003 0301 	and.w	r3, r3, #1
 8000904:	60fb      	str	r3, [r7, #12]
 8000906:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6;
 8000908:	2341      	movs	r3, #65	@ 0x41
 800090a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800090c:	2303      	movs	r3, #3
 800090e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000914:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000918:	4619      	mov	r1, r3
 800091a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800091e:	f005 fa29 	bl	8005d74 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000922:	2200      	movs	r2, #0
 8000924:	2100      	movs	r1, #0
 8000926:	2012      	movs	r0, #18
 8000928:	f003 fff7 	bl	800491a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800092c:	2012      	movs	r0, #18
 800092e:	f004 f80e 	bl	800494e <HAL_NVIC_EnableIRQ>
}
 8000932:	bf00      	nop
 8000934:	3778      	adds	r7, #120	@ 0x78
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	20000118 	.word	0x20000118
 8000940:	40021000 	.word	0x40021000
 8000944:	48000400 	.word	0x48000400
 8000948:	50000100 	.word	0x50000100

0800094c <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 8000950:	4b0f      	ldr	r3, [pc, #60]	@ (8000990 <MX_COMP1_Init+0x44>)
 8000952:	4a10      	ldr	r2, [pc, #64]	@ (8000994 <MX_COMP1_Init+0x48>)
 8000954:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO2;
 8000956:	4b0e      	ldr	r3, [pc, #56]	@ (8000990 <MX_COMP1_Init+0x44>)
 8000958:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800095c:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH1;
 800095e:	4b0c      	ldr	r3, [pc, #48]	@ (8000990 <MX_COMP1_Init+0x44>)
 8000960:	2240      	movs	r2, #64	@ 0x40
 8000962:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000964:	4b0a      	ldr	r3, [pc, #40]	@ (8000990 <MX_COMP1_Init+0x44>)
 8000966:	2200      	movs	r2, #0
 8000968:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 800096a:	4b09      	ldr	r3, [pc, #36]	@ (8000990 <MX_COMP1_Init+0x44>)
 800096c:	2200      	movs	r2, #0
 800096e:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8000970:	4b07      	ldr	r3, [pc, #28]	@ (8000990 <MX_COMP1_Init+0x44>)
 8000972:	2200      	movs	r2, #0
 8000974:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING;
 8000976:	4b06      	ldr	r3, [pc, #24]	@ (8000990 <MX_COMP1_Init+0x44>)
 8000978:	2211      	movs	r2, #17
 800097a:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 800097c:	4804      	ldr	r0, [pc, #16]	@ (8000990 <MX_COMP1_Init+0x44>)
 800097e:	f003 fd87 	bl	8004490 <HAL_COMP_Init>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_COMP1_Init+0x40>
  {
    Error_Handler();
 8000988:	f000 fb15 	bl	8000fb6 <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 800098c:	bf00      	nop
 800098e:	bd80      	pop	{r7, pc}
 8000990:	2000011c 	.word	0x2000011c
 8000994:	40010200 	.word	0x40010200

08000998 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b088      	sub	sp, #32
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a0:	f107 030c 	add.w	r3, r7, #12
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	605a      	str	r2, [r3, #4]
 80009aa:	609a      	str	r2, [r3, #8]
 80009ac:	60da      	str	r2, [r3, #12]
 80009ae:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a13      	ldr	r2, [pc, #76]	@ (8000a04 <HAL_COMP_MspInit+0x6c>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d11f      	bne.n	80009fa <HAL_COMP_MspInit+0x62>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ba:	4b13      	ldr	r3, [pc, #76]	@ (8000a08 <HAL_COMP_MspInit+0x70>)
 80009bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009be:	4a12      	ldr	r2, [pc, #72]	@ (8000a08 <HAL_COMP_MspInit+0x70>)
 80009c0:	f043 0302 	orr.w	r3, r3, #2
 80009c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009c6:	4b10      	ldr	r3, [pc, #64]	@ (8000a08 <HAL_COMP_MspInit+0x70>)
 80009c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ca:	f003 0302 	and.w	r3, r3, #2
 80009ce:	60bb      	str	r3, [r7, #8]
 80009d0:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration
    PB1     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80009d2:	2302      	movs	r3, #2
 80009d4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009d6:	2303      	movs	r3, #3
 80009d8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009de:	f107 030c 	add.w	r3, r7, #12
 80009e2:	4619      	mov	r1, r3
 80009e4:	4809      	ldr	r0, [pc, #36]	@ (8000a0c <HAL_COMP_MspInit+0x74>)
 80009e6:	f005 f9c5 	bl	8005d74 <HAL_GPIO_Init>

    /* COMP1 interrupt Init */
    HAL_NVIC_SetPriority(COMP1_2_3_IRQn, 0, 0);
 80009ea:	2200      	movs	r2, #0
 80009ec:	2100      	movs	r1, #0
 80009ee:	2040      	movs	r0, #64	@ 0x40
 80009f0:	f003 ff93 	bl	800491a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP1_2_3_IRQn);
 80009f4:	2040      	movs	r0, #64	@ 0x40
 80009f6:	f003 ffaa 	bl	800494e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 80009fa:	bf00      	nop
 80009fc:	3720      	adds	r7, #32
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40010200 	.word	0x40010200
 8000a08:	40021000 	.word	0x40021000
 8000a0c:	48000400 	.word	0x48000400

08000a10 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DAC_HandleTypeDef hdac3;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b08c      	sub	sp, #48	@ 0x30
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000a16:	463b      	mov	r3, r7
 8000a18:	2230      	movs	r2, #48	@ 0x30
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f00a f890 	bl	800ab42 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000a22:	4b16      	ldr	r3, [pc, #88]	@ (8000a7c <MX_DAC1_Init+0x6c>)
 8000a24:	4a16      	ldr	r2, [pc, #88]	@ (8000a80 <MX_DAC1_Init+0x70>)
 8000a26:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000a28:	4814      	ldr	r0, [pc, #80]	@ (8000a7c <MX_DAC1_Init+0x6c>)
 8000a2a:	f003 ffaa 	bl	8004982 <HAL_DAC_Init>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000a34:	f000 fabf 	bl	8000fb6 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000a40:	2300      	movs	r3, #0
 8000a42:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000a44:	2300      	movs	r3, #0
 8000a46:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000a50:	2300      	movs	r3, #0
 8000a52:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8000a54:	2301      	movs	r3, #1
 8000a56:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000a5c:	463b      	mov	r3, r7
 8000a5e:	2200      	movs	r2, #0
 8000a60:	4619      	mov	r1, r3
 8000a62:	4806      	ldr	r0, [pc, #24]	@ (8000a7c <MX_DAC1_Init+0x6c>)
 8000a64:	f004 f84a 	bl	8004afc <HAL_DAC_ConfigChannel>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8000a6e:	f000 faa2 	bl	8000fb6 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000a72:	bf00      	nop
 8000a74:	3730      	adds	r7, #48	@ 0x30
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	20000140 	.word	0x20000140
 8000a80:	50000800 	.word	0x50000800

08000a84 <MX_DAC3_Init>:
/* DAC3 init function */
void MX_DAC3_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b08c      	sub	sp, #48	@ 0x30
 8000a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC3_Init 0 */

  /* USER CODE END DAC3_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000a8a:	463b      	mov	r3, r7
 8000a8c:	2230      	movs	r2, #48	@ 0x30
 8000a8e:	2100      	movs	r1, #0
 8000a90:	4618      	mov	r0, r3
 8000a92:	f00a f856 	bl	800ab42 <memset>

  /* USER CODE END DAC3_Init 1 */

  /** DAC Initialization
  */
  hdac3.Instance = DAC3;
 8000a96:	4b16      	ldr	r3, [pc, #88]	@ (8000af0 <MX_DAC3_Init+0x6c>)
 8000a98:	4a16      	ldr	r2, [pc, #88]	@ (8000af4 <MX_DAC3_Init+0x70>)
 8000a9a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac3) != HAL_OK)
 8000a9c:	4814      	ldr	r0, [pc, #80]	@ (8000af0 <MX_DAC3_Init+0x6c>)
 8000a9e:	f003 ff70 	bl	8004982 <HAL_DAC_Init>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_DAC3_Init+0x28>
  {
    Error_Handler();
 8000aa8:	f000 fa85 	bl	8000fb6 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000aac:	2302      	movs	r3, #2
 8000aae:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000abc:	2300      	movs	r3, #0
 8000abe:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000acc:	2300      	movs	r3, #0
 8000ace:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000ad0:	463b      	mov	r3, r7
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4806      	ldr	r0, [pc, #24]	@ (8000af0 <MX_DAC3_Init+0x6c>)
 8000ad8:	f004 f810 	bl	8004afc <HAL_DAC_ConfigChannel>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_DAC3_Init+0x62>
  {
    Error_Handler();
 8000ae2:	f000 fa68 	bl	8000fb6 <Error_Handler>
  }
  /* USER CODE BEGIN DAC3_Init 2 */

  /* USER CODE END DAC3_Init 2 */

}
 8000ae6:	bf00      	nop
 8000ae8:	3730      	adds	r7, #48	@ 0x30
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	20000154 	.word	0x20000154
 8000af4:	50001000 	.word	0x50001000

08000af8 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b08a      	sub	sp, #40	@ 0x28
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b00:	f107 0314 	add.w	r3, r7, #20
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
 8000b0e:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a1e      	ldr	r2, [pc, #120]	@ (8000b90 <HAL_DAC_MspInit+0x98>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d125      	bne.n	8000b66 <HAL_DAC_MspInit+0x6e>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000b1a:	4b1e      	ldr	r3, [pc, #120]	@ (8000b94 <HAL_DAC_MspInit+0x9c>)
 8000b1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b1e:	4a1d      	ldr	r2, [pc, #116]	@ (8000b94 <HAL_DAC_MspInit+0x9c>)
 8000b20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000b24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b26:	4b1b      	ldr	r3, [pc, #108]	@ (8000b94 <HAL_DAC_MspInit+0x9c>)
 8000b28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b2a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b2e:	613b      	str	r3, [r7, #16]
 8000b30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b32:	4b18      	ldr	r3, [pc, #96]	@ (8000b94 <HAL_DAC_MspInit+0x9c>)
 8000b34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b36:	4a17      	ldr	r2, [pc, #92]	@ (8000b94 <HAL_DAC_MspInit+0x9c>)
 8000b38:	f043 0301 	orr.w	r3, r3, #1
 8000b3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b3e:	4b15      	ldr	r3, [pc, #84]	@ (8000b94 <HAL_DAC_MspInit+0x9c>)
 8000b40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b42:	f003 0301 	and.w	r3, r3, #1
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000b4a:	2310      	movs	r3, #16
 8000b4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b4e:	2303      	movs	r3, #3
 8000b50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b56:	f107 0314 	add.w	r3, r7, #20
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b60:	f005 f908 	bl	8005d74 <HAL_GPIO_Init>
    __HAL_RCC_DAC3_CLK_ENABLE();
  /* USER CODE BEGIN DAC3_MspInit 1 */

  /* USER CODE END DAC3_MspInit 1 */
  }
}
 8000b64:	e010      	b.n	8000b88 <HAL_DAC_MspInit+0x90>
  else if(dacHandle->Instance==DAC3)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4a0b      	ldr	r2, [pc, #44]	@ (8000b98 <HAL_DAC_MspInit+0xa0>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d10b      	bne.n	8000b88 <HAL_DAC_MspInit+0x90>
    __HAL_RCC_DAC3_CLK_ENABLE();
 8000b70:	4b08      	ldr	r3, [pc, #32]	@ (8000b94 <HAL_DAC_MspInit+0x9c>)
 8000b72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b74:	4a07      	ldr	r2, [pc, #28]	@ (8000b94 <HAL_DAC_MspInit+0x9c>)
 8000b76:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000b7a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b7c:	4b05      	ldr	r3, [pc, #20]	@ (8000b94 <HAL_DAC_MspInit+0x9c>)
 8000b7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b80:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000b84:	60bb      	str	r3, [r7, #8]
 8000b86:	68bb      	ldr	r3, [r7, #8]
}
 8000b88:	bf00      	nop
 8000b8a:	3728      	adds	r7, #40	@ 0x28
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	50000800 	.word	0x50000800
 8000b94:	40021000 	.word	0x40021000
 8000b98:	50001000 	.word	0x50001000

08000b9c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000ba2:	4b12      	ldr	r3, [pc, #72]	@ (8000bec <MX_DMA_Init+0x50>)
 8000ba4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ba6:	4a11      	ldr	r2, [pc, #68]	@ (8000bec <MX_DMA_Init+0x50>)
 8000ba8:	f043 0304 	orr.w	r3, r3, #4
 8000bac:	6493      	str	r3, [r2, #72]	@ 0x48
 8000bae:	4b0f      	ldr	r3, [pc, #60]	@ (8000bec <MX_DMA_Init+0x50>)
 8000bb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000bb2:	f003 0304 	and.w	r3, r3, #4
 8000bb6:	607b      	str	r3, [r7, #4]
 8000bb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bba:	4b0c      	ldr	r3, [pc, #48]	@ (8000bec <MX_DMA_Init+0x50>)
 8000bbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000bbe:	4a0b      	ldr	r2, [pc, #44]	@ (8000bec <MX_DMA_Init+0x50>)
 8000bc0:	f043 0301 	orr.w	r3, r3, #1
 8000bc4:	6493      	str	r3, [r2, #72]	@ 0x48
 8000bc6:	4b09      	ldr	r3, [pc, #36]	@ (8000bec <MX_DMA_Init+0x50>)
 8000bc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000bca:	f003 0301 	and.w	r3, r3, #1
 8000bce:	603b      	str	r3, [r7, #0]
 8000bd0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	200b      	movs	r0, #11
 8000bd8:	f003 fe9f 	bl	800491a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000bdc:	200b      	movs	r0, #11
 8000bde:	f003 feb6 	bl	800494e <HAL_NVIC_EnableIRQ>

}
 8000be2:	bf00      	nop
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40021000 	.word	0x40021000

08000bf0 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000bf4:	4b1f      	ldr	r3, [pc, #124]	@ (8000c74 <MX_FDCAN1_Init+0x84>)
 8000bf6:	4a20      	ldr	r2, [pc, #128]	@ (8000c78 <MX_FDCAN1_Init+0x88>)
 8000bf8:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000bfa:	4b1e      	ldr	r3, [pc, #120]	@ (8000c74 <MX_FDCAN1_Init+0x84>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000c00:	4b1c      	ldr	r3, [pc, #112]	@ (8000c74 <MX_FDCAN1_Init+0x84>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000c06:	4b1b      	ldr	r3, [pc, #108]	@ (8000c74 <MX_FDCAN1_Init+0x84>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000c0c:	4b19      	ldr	r3, [pc, #100]	@ (8000c74 <MX_FDCAN1_Init+0x84>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000c12:	4b18      	ldr	r3, [pc, #96]	@ (8000c74 <MX_FDCAN1_Init+0x84>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000c18:	4b16      	ldr	r3, [pc, #88]	@ (8000c74 <MX_FDCAN1_Init+0x84>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 20;
 8000c1e:	4b15      	ldr	r3, [pc, #84]	@ (8000c74 <MX_FDCAN1_Init+0x84>)
 8000c20:	2214      	movs	r2, #20
 8000c22:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000c24:	4b13      	ldr	r3, [pc, #76]	@ (8000c74 <MX_FDCAN1_Init+0x84>)
 8000c26:	2201      	movs	r2, #1
 8000c28:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 10;
 8000c2a:	4b12      	ldr	r3, [pc, #72]	@ (8000c74 <MX_FDCAN1_Init+0x84>)
 8000c2c:	220a      	movs	r2, #10
 8000c2e:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 5;
 8000c30:	4b10      	ldr	r3, [pc, #64]	@ (8000c74 <MX_FDCAN1_Init+0x84>)
 8000c32:	2205      	movs	r2, #5
 8000c34:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 20;
 8000c36:	4b0f      	ldr	r3, [pc, #60]	@ (8000c74 <MX_FDCAN1_Init+0x84>)
 8000c38:	2214      	movs	r2, #20
 8000c3a:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000c3c:	4b0d      	ldr	r3, [pc, #52]	@ (8000c74 <MX_FDCAN1_Init+0x84>)
 8000c3e:	2201      	movs	r2, #1
 8000c40:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 10;
 8000c42:	4b0c      	ldr	r3, [pc, #48]	@ (8000c74 <MX_FDCAN1_Init+0x84>)
 8000c44:	220a      	movs	r2, #10
 8000c46:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 5;
 8000c48:	4b0a      	ldr	r3, [pc, #40]	@ (8000c74 <MX_FDCAN1_Init+0x84>)
 8000c4a:	2205      	movs	r2, #5
 8000c4c:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 8000c4e:	4b09      	ldr	r3, [pc, #36]	@ (8000c74 <MX_FDCAN1_Init+0x84>)
 8000c50:	2201      	movs	r2, #1
 8000c52:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 1;
 8000c54:	4b07      	ldr	r3, [pc, #28]	@ (8000c74 <MX_FDCAN1_Init+0x84>)
 8000c56:	2201      	movs	r2, #1
 8000c58:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000c5a:	4b06      	ldr	r3, [pc, #24]	@ (8000c74 <MX_FDCAN1_Init+0x84>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000c60:	4804      	ldr	r0, [pc, #16]	@ (8000c74 <MX_FDCAN1_Init+0x84>)
 8000c62:	f004 fc35 	bl	80054d0 <HAL_FDCAN_Init>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000c6c:	f000 f9a3 	bl	8000fb6 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000c70:	bf00      	nop
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	20000168 	.word	0x20000168
 8000c78:	40006400 	.word	0x40006400

08000c7c <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b09a      	sub	sp, #104	@ 0x68
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c84:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	609a      	str	r2, [r3, #8]
 8000c90:	60da      	str	r2, [r3, #12]
 8000c92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c94:	f107 0310 	add.w	r3, r7, #16
 8000c98:	2244      	movs	r2, #68	@ 0x44
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f009 ff50 	bl	800ab42 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4a24      	ldr	r2, [pc, #144]	@ (8000d38 <HAL_FDCAN_MspInit+0xbc>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d141      	bne.n	8000d30 <HAL_FDCAN_MspInit+0xb4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000cac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cb0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000cb2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000cb6:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cb8:	f107 0310 	add.w	r3, r7, #16
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f006 f8ef 	bl	8006ea0 <HAL_RCCEx_PeriphCLKConfig>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000cc8:	f000 f975 	bl	8000fb6 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000ccc:	4b1b      	ldr	r3, [pc, #108]	@ (8000d3c <HAL_FDCAN_MspInit+0xc0>)
 8000cce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cd0:	4a1a      	ldr	r2, [pc, #104]	@ (8000d3c <HAL_FDCAN_MspInit+0xc0>)
 8000cd2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000cd6:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cd8:	4b18      	ldr	r3, [pc, #96]	@ (8000d3c <HAL_FDCAN_MspInit+0xc0>)
 8000cda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cdc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000ce0:	60fb      	str	r3, [r7, #12]
 8000ce2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce4:	4b15      	ldr	r3, [pc, #84]	@ (8000d3c <HAL_FDCAN_MspInit+0xc0>)
 8000ce6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ce8:	4a14      	ldr	r2, [pc, #80]	@ (8000d3c <HAL_FDCAN_MspInit+0xc0>)
 8000cea:	f043 0301 	orr.w	r3, r3, #1
 8000cee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cf0:	4b12      	ldr	r3, [pc, #72]	@ (8000d3c <HAL_FDCAN_MspInit+0xc0>)
 8000cf2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cf4:	f003 0301 	and.w	r3, r3, #1
 8000cf8:	60bb      	str	r3, [r7, #8]
 8000cfa:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000cfc:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000d00:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d02:	2302      	movs	r3, #2
 8000d04:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d06:	2300      	movs	r3, #0
 8000d08:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000d0e:	2309      	movs	r3, #9
 8000d10:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d12:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000d16:	4619      	mov	r1, r3
 8000d18:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d1c:	f005 f82a 	bl	8005d74 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000d20:	2200      	movs	r2, #0
 8000d22:	2100      	movs	r1, #0
 8000d24:	2015      	movs	r0, #21
 8000d26:	f003 fdf8 	bl	800491a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000d2a:	2015      	movs	r0, #21
 8000d2c:	f003 fe0f 	bl	800494e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8000d30:	bf00      	nop
 8000d32:	3768      	adds	r7, #104	@ 0x68
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	40006400 	.word	0x40006400
 8000d3c:	40021000 	.word	0x40021000

08000d40 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b08a      	sub	sp, #40	@ 0x28
 8000d44:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d46:	f107 0314 	add.w	r3, r7, #20
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	601a      	str	r2, [r3, #0]
 8000d4e:	605a      	str	r2, [r3, #4]
 8000d50:	609a      	str	r2, [r3, #8]
 8000d52:	60da      	str	r2, [r3, #12]
 8000d54:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d56:	4b2e      	ldr	r3, [pc, #184]	@ (8000e10 <MX_GPIO_Init+0xd0>)
 8000d58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d5a:	4a2d      	ldr	r2, [pc, #180]	@ (8000e10 <MX_GPIO_Init+0xd0>)
 8000d5c:	f043 0304 	orr.w	r3, r3, #4
 8000d60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d62:	4b2b      	ldr	r3, [pc, #172]	@ (8000e10 <MX_GPIO_Init+0xd0>)
 8000d64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d66:	f003 0304 	and.w	r3, r3, #4
 8000d6a:	613b      	str	r3, [r7, #16]
 8000d6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d6e:	4b28      	ldr	r3, [pc, #160]	@ (8000e10 <MX_GPIO_Init+0xd0>)
 8000d70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d72:	4a27      	ldr	r2, [pc, #156]	@ (8000e10 <MX_GPIO_Init+0xd0>)
 8000d74:	f043 0320 	orr.w	r3, r3, #32
 8000d78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d7a:	4b25      	ldr	r3, [pc, #148]	@ (8000e10 <MX_GPIO_Init+0xd0>)
 8000d7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d7e:	f003 0320 	and.w	r3, r3, #32
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d86:	4b22      	ldr	r3, [pc, #136]	@ (8000e10 <MX_GPIO_Init+0xd0>)
 8000d88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d8a:	4a21      	ldr	r2, [pc, #132]	@ (8000e10 <MX_GPIO_Init+0xd0>)
 8000d8c:	f043 0301 	orr.w	r3, r3, #1
 8000d90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d92:	4b1f      	ldr	r3, [pc, #124]	@ (8000e10 <MX_GPIO_Init+0xd0>)
 8000d94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d96:	f003 0301 	and.w	r3, r3, #1
 8000d9a:	60bb      	str	r3, [r7, #8]
 8000d9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d9e:	4b1c      	ldr	r3, [pc, #112]	@ (8000e10 <MX_GPIO_Init+0xd0>)
 8000da0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000da2:	4a1b      	ldr	r2, [pc, #108]	@ (8000e10 <MX_GPIO_Init+0xd0>)
 8000da4:	f043 0302 	orr.w	r3, r3, #2
 8000da8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000daa:	4b19      	ldr	r3, [pc, #100]	@ (8000e10 <MX_GPIO_Init+0xd0>)
 8000dac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dae:	f003 0302 	and.w	r3, r3, #2
 8000db2:	607b      	str	r3, [r7, #4]
 8000db4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 8000db6:	2200      	movs	r2, #0
 8000db8:	2150      	movs	r1, #80	@ 0x50
 8000dba:	4816      	ldr	r0, [pc, #88]	@ (8000e14 <MX_GPIO_Init+0xd4>)
 8000dbc:	f005 f95c 	bl	8006078 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Button3_Pin|Button1_Pin|Button2_Pin;
 8000dc0:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8000dc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dc6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000dca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dd0:	f107 0314 	add.w	r3, r7, #20
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	480f      	ldr	r0, [pc, #60]	@ (8000e14 <MX_GPIO_Init+0xd4>)
 8000dd8:	f004 ffcc 	bl	8005d74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin;
 8000ddc:	2350      	movs	r3, #80	@ 0x50
 8000dde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de0:	2301      	movs	r3, #1
 8000de2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de8:	2300      	movs	r3, #0
 8000dea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dec:	f107 0314 	add.w	r3, r7, #20
 8000df0:	4619      	mov	r1, r3
 8000df2:	4808      	ldr	r0, [pc, #32]	@ (8000e14 <MX_GPIO_Init+0xd4>)
 8000df4:	f004 ffbe 	bl	8005d74 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000df8:	2200      	movs	r2, #0
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	2028      	movs	r0, #40	@ 0x28
 8000dfe:	f003 fd8c 	bl	800491a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e02:	2028      	movs	r0, #40	@ 0x28
 8000e04:	f003 fda3 	bl	800494e <HAL_NVIC_EnableIRQ>

}
 8000e08:	bf00      	nop
 8000e0a:	3728      	adds	r7, #40	@ 0x28
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	40021000 	.word	0x40021000
 8000e14:	48000800 	.word	0x48000800

08000e18 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e1c:	f000 fddd 	bl	80019da <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e20:	f000 f880 	bl	8000f24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e24:	f7ff ff8c 	bl	8000d40 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e28:	f7ff feb8 	bl	8000b9c <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000e2c:	f000 fcd2 	bl	80017d4 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8000e30:	f7ff fb6a 	bl	8000508 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000e34:	f7ff fc22 	bl	800067c <MX_ADC2_Init>
  MX_OPAMP1_Init();
 8000e38:	f000 f8c4 	bl	8000fc4 <MX_OPAMP1_Init>
  MX_OPAMP2_Init();
 8000e3c:	f000 f8ea 	bl	8001014 <MX_OPAMP2_Init>
  MX_OPAMP3_Init();
 8000e40:	f000 f910 	bl	8001064 <MX_OPAMP3_Init>
  MX_TIM1_Init();
 8000e44:	f000 fa8a 	bl	800135c <MX_TIM1_Init>
  MX_COMP1_Init();
 8000e48:	f7ff fd80 	bl	800094c <MX_COMP1_Init>
  MX_DAC1_Init();
 8000e4c:	f7ff fde0 	bl	8000a10 <MX_DAC1_Init>
  MX_DAC3_Init();
 8000e50:	f7ff fe18 	bl	8000a84 <MX_DAC3_Init>
  MX_FDCAN1_Init();
 8000e54:	f7ff fecc 	bl	8000bf0 <MX_FDCAN1_Init>
  MX_TIM4_Init();
 8000e58:	f000 fb74 	bl	8001544 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_OPAMP_Start(&hopamp1);
 8000e5c:	4826      	ldr	r0, [pc, #152]	@ (8000ef8 <main+0xe0>)
 8000e5e:	f005 fa0b 	bl	8006278 <HAL_OPAMP_Start>
  HAL_OPAMP_Start(&hopamp2);
 8000e62:	4826      	ldr	r0, [pc, #152]	@ (8000efc <main+0xe4>)
 8000e64:	f005 fa08 	bl	8006278 <HAL_OPAMP_Start>
  HAL_OPAMP_Start(&hopamp3);
 8000e68:	4825      	ldr	r0, [pc, #148]	@ (8000f00 <main+0xe8>)
 8000e6a:	f005 fa05 	bl	8006278 <HAL_OPAMP_Start>
 // HAL_UART_Receive_IT(&huart3, (uint8_t *)&aRxBuffer, 1);
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000e6e:	217f      	movs	r1, #127	@ 0x7f
 8000e70:	4824      	ldr	r0, [pc, #144]	@ (8000f04 <main+0xec>)
 8000e72:	f002 faab 	bl	80033cc <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8000e76:	217f      	movs	r1, #127	@ 0x7f
 8000e78:	4823      	ldr	r0, [pc, #140]	@ (8000f08 <main+0xf0>)
 8000e7a:	f002 faa7 	bl	80033cc <HAL_ADCEx_Calibration_Start>
  __HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_JEOC);
 8000e7e:	4b21      	ldr	r3, [pc, #132]	@ (8000f04 <main+0xec>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	2220      	movs	r2, #32
 8000e84:	601a      	str	r2, [r3, #0]
  __HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_EOC);
 8000e86:	4b1f      	ldr	r3, [pc, #124]	@ (8000f04 <main+0xec>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	2204      	movs	r2, #4
 8000e8c:	601a      	str	r2, [r3, #0]
  __HAL_ADC_CLEAR_FLAG(&hadc2, ADC_FLAG_JEOC);
 8000e8e:	4b1e      	ldr	r3, [pc, #120]	@ (8000f08 <main+0xf0>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	2220      	movs	r2, #32
 8000e94:	601a      	str	r2, [r3, #0]
  HAL_ADCEx_InjectedStart_IT(&hadc1);
 8000e96:	481b      	ldr	r0, [pc, #108]	@ (8000f04 <main+0xec>)
 8000e98:	f002 fbaa 	bl	80035f0 <HAL_ADCEx_InjectedStart_IT>
  HAL_ADCEx_InjectedStart(&hadc2);
 8000e9c:	481a      	ldr	r0, [pc, #104]	@ (8000f08 <main+0xf0>)
 8000e9e:	f002 faf7 	bl	8003490 <HAL_ADCEx_InjectedStart>
  TIM1->ARR = 8000 - 1;
 8000ea2:	4b1a      	ldr	r3, [pc, #104]	@ (8000f0c <main+0xf4>)
 8000ea4:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000ea8:	62da      	str	r2, [r3, #44]	@ 0x2c
  TIM1->CCR4 = 8000 - 2;
 8000eaa:	4b18      	ldr	r3, [pc, #96]	@ (8000f0c <main+0xf4>)
 8000eac:	f641 723e 	movw	r2, #7998	@ 0x1f3e
 8000eb0:	641a      	str	r2, [r3, #64]	@ 0x40
  HAL_TIM_Base_Start(&htim1);
 8000eb2:	4817      	ldr	r0, [pc, #92]	@ (8000f10 <main+0xf8>)
 8000eb4:	f006 fa3c 	bl	8007330 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000eb8:	210c      	movs	r1, #12
 8000eba:	4815      	ldr	r0, [pc, #84]	@ (8000f10 <main+0xf8>)
 8000ebc:	f006 fafc 	bl	80074b8 <HAL_TIM_PWM_Start>
  HAL_DAC_SetValue(&hdac3, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 3000);
 8000ec0:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	4812      	ldr	r0, [pc, #72]	@ (8000f14 <main+0xfc>)
 8000eca:	f003 fde9 	bl	8004aa0 <HAL_DAC_SetValue>
  HAL_DAC_Start(&hdac3, DAC_CHANNEL_1);
 8000ece:	2100      	movs	r1, #0
 8000ed0:	4810      	ldr	r0, [pc, #64]	@ (8000f14 <main+0xfc>)
 8000ed2:	f003 fd79 	bl	80049c8 <HAL_DAC_Start>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	480f      	ldr	r0, [pc, #60]	@ (8000f18 <main+0x100>)
 8000eda:	f003 fd75 	bl	80049c8 <HAL_DAC_Start>
  HAL_COMP_Start(&hcomp1);
 8000ede:	480f      	ldr	r0, [pc, #60]	@ (8000f1c <main+0x104>)
 8000ee0:	f003 fbb2 	bl	8004648 <HAL_COMP_Start>
  HAL_TIMEx_HallSensor_Start_IT(&htim4);
 8000ee4:	480e      	ldr	r0, [pc, #56]	@ (8000f20 <main+0x108>)
 8000ee6:	f007 fd77 	bl	80089d8 <HAL_TIMEx_HallSensor_Start_IT>
  FDCAN_Config();
 8000eea:	f009 fe23 	bl	800ab34 <FDCAN_Config>
  appInit();
 8000eee:	f009 fcaf 	bl	800a850 <appInit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ef2:	bf00      	nop
 8000ef4:	e7fd      	b.n	8000ef2 <main+0xda>
 8000ef6:	bf00      	nop
 8000ef8:	200001cc 	.word	0x200001cc
 8000efc:	20000208 	.word	0x20000208
 8000f00:	20000244 	.word	0x20000244
 8000f04:	20000040 	.word	0x20000040
 8000f08:	200000ac 	.word	0x200000ac
 8000f0c:	40012c00 	.word	0x40012c00
 8000f10:	20000280 	.word	0x20000280
 8000f14:	20000154 	.word	0x20000154
 8000f18:	20000140 	.word	0x20000140
 8000f1c:	2000011c 	.word	0x2000011c
 8000f20:	200002cc 	.word	0x200002cc

08000f24 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b094      	sub	sp, #80	@ 0x50
 8000f28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f2a:	f107 0318 	add.w	r3, r7, #24
 8000f2e:	2238      	movs	r2, #56	@ 0x38
 8000f30:	2100      	movs	r1, #0
 8000f32:	4618      	mov	r0, r3
 8000f34:	f009 fe05 	bl	800ab42 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f38:	1d3b      	adds	r3, r7, #4
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	605a      	str	r2, [r3, #4]
 8000f40:	609a      	str	r2, [r3, #8]
 8000f42:	60da      	str	r2, [r3, #12]
 8000f44:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000f46:	2000      	movs	r0, #0
 8000f48:	f005 f9c8 	bl	80062dc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f50:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f54:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f56:	2302      	movs	r3, #2
 8000f58:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f5a:	2303      	movs	r3, #3
 8000f5c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV3;
 8000f5e:	2303      	movs	r3, #3
 8000f60:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000f62:	2328      	movs	r3, #40	@ 0x28
 8000f64:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f66:	2302      	movs	r3, #2
 8000f68:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f72:	f107 0318 	add.w	r3, r7, #24
 8000f76:	4618      	mov	r0, r3
 8000f78:	f005 fa64 	bl	8006444 <HAL_RCC_OscConfig>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000f82:	f000 f818 	bl	8000fb6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000f86:	230f      	movs	r3, #15
 8000f88:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f92:	2300      	movs	r3, #0
 8000f94:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f96:	2300      	movs	r3, #0
 8000f98:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f9a:	1d3b      	adds	r3, r7, #4
 8000f9c:	2104      	movs	r1, #4
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f005 fd62 	bl	8006a68 <HAL_RCC_ClockConfig>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000faa:	f000 f804 	bl	8000fb6 <Error_Handler>
  }
}
 8000fae:	bf00      	nop
 8000fb0:	3750      	adds	r7, #80	@ 0x50
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fba:	b672      	cpsid	i
}
 8000fbc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fbe:	bf00      	nop
 8000fc0:	e7fd      	b.n	8000fbe <Error_Handler+0x8>
	...

08000fc4 <MX_OPAMP1_Init>:
OPAMP_HandleTypeDef hopamp2;
OPAMP_HandleTypeDef hopamp3;

/* OPAMP1 init function */
void MX_OPAMP1_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8000fc8:	4b10      	ldr	r3, [pc, #64]	@ (800100c <MX_OPAMP1_Init+0x48>)
 8000fca:	4a11      	ldr	r2, [pc, #68]	@ (8001010 <MX_OPAMP1_Init+0x4c>)
 8000fcc:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8000fce:	4b0f      	ldr	r3, [pc, #60]	@ (800100c <MX_OPAMP1_Init+0x48>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_STANDALONE_MODE;
 8000fd4:	4b0d      	ldr	r3, [pc, #52]	@ (800100c <MX_OPAMP1_Init+0x48>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	609a      	str	r2, [r3, #8]
  hopamp1.Init.InvertingInput = OPAMP_INVERTINGINPUT_IO0;
 8000fda:	4b0c      	ldr	r3, [pc, #48]	@ (800100c <MX_OPAMP1_Init+0x48>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	60da      	str	r2, [r3, #12]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8000fe0:	4b0a      	ldr	r3, [pc, #40]	@ (800100c <MX_OPAMP1_Init+0x48>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = DISABLE;
 8000fe6:	4b09      	ldr	r3, [pc, #36]	@ (800100c <MX_OPAMP1_Init+0x48>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000fec:	4b07      	ldr	r3, [pc, #28]	@ (800100c <MX_OPAMP1_Init+0x48>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	619a      	str	r2, [r3, #24]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000ff2:	4b06      	ldr	r3, [pc, #24]	@ (800100c <MX_OPAMP1_Init+0x48>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8000ff8:	4804      	ldr	r0, [pc, #16]	@ (800100c <MX_OPAMP1_Init+0x48>)
 8000ffa:	f005 f86d 	bl	80060d8 <HAL_OPAMP_Init>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_OPAMP1_Init+0x44>
  {
    Error_Handler();
 8001004:	f7ff ffd7 	bl	8000fb6 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 8001008:	bf00      	nop
 800100a:	bd80      	pop	{r7, pc}
 800100c:	200001cc 	.word	0x200001cc
 8001010:	40010300 	.word	0x40010300

08001014 <MX_OPAMP2_Init>:
/* OPAMP2 init function */
void MX_OPAMP2_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP2_Init 0 */

  /* USER CODE BEGIN OPAMP2_Init 1 */

  /* USER CODE END OPAMP2_Init 1 */
  hopamp2.Instance = OPAMP2;
 8001018:	4b10      	ldr	r3, [pc, #64]	@ (800105c <MX_OPAMP2_Init+0x48>)
 800101a:	4a11      	ldr	r2, [pc, #68]	@ (8001060 <MX_OPAMP2_Init+0x4c>)
 800101c:	601a      	str	r2, [r3, #0]
  hopamp2.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 800101e:	4b0f      	ldr	r3, [pc, #60]	@ (800105c <MX_OPAMP2_Init+0x48>)
 8001020:	2200      	movs	r2, #0
 8001022:	605a      	str	r2, [r3, #4]
  hopamp2.Init.Mode = OPAMP_STANDALONE_MODE;
 8001024:	4b0d      	ldr	r3, [pc, #52]	@ (800105c <MX_OPAMP2_Init+0x48>)
 8001026:	2200      	movs	r2, #0
 8001028:	609a      	str	r2, [r3, #8]
  hopamp2.Init.InvertingInput = OPAMP_INVERTINGINPUT_IO0;
 800102a:	4b0c      	ldr	r3, [pc, #48]	@ (800105c <MX_OPAMP2_Init+0x48>)
 800102c:	2200      	movs	r2, #0
 800102e:	60da      	str	r2, [r3, #12]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8001030:	4b0a      	ldr	r3, [pc, #40]	@ (800105c <MX_OPAMP2_Init+0x48>)
 8001032:	2200      	movs	r2, #0
 8001034:	611a      	str	r2, [r3, #16]
  hopamp2.Init.InternalOutput = DISABLE;
 8001036:	4b09      	ldr	r3, [pc, #36]	@ (800105c <MX_OPAMP2_Init+0x48>)
 8001038:	2200      	movs	r2, #0
 800103a:	751a      	strb	r2, [r3, #20]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 800103c:	4b07      	ldr	r3, [pc, #28]	@ (800105c <MX_OPAMP2_Init+0x48>)
 800103e:	2200      	movs	r2, #0
 8001040:	619a      	str	r2, [r3, #24]
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001042:	4b06      	ldr	r3, [pc, #24]	@ (800105c <MX_OPAMP2_Init+0x48>)
 8001044:	2200      	movs	r2, #0
 8001046:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 8001048:	4804      	ldr	r0, [pc, #16]	@ (800105c <MX_OPAMP2_Init+0x48>)
 800104a:	f005 f845 	bl	80060d8 <HAL_OPAMP_Init>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_OPAMP2_Init+0x44>
  {
    Error_Handler();
 8001054:	f7ff ffaf 	bl	8000fb6 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP2_Init 2 */

  /* USER CODE END OPAMP2_Init 2 */

}
 8001058:	bf00      	nop
 800105a:	bd80      	pop	{r7, pc}
 800105c:	20000208 	.word	0x20000208
 8001060:	40010304 	.word	0x40010304

08001064 <MX_OPAMP3_Init>:
/* OPAMP3 init function */
void MX_OPAMP3_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP3_Init 0 */

  /* USER CODE BEGIN OPAMP3_Init 1 */

  /* USER CODE END OPAMP3_Init 1 */
  hopamp3.Instance = OPAMP3;
 8001068:	4b10      	ldr	r3, [pc, #64]	@ (80010ac <MX_OPAMP3_Init+0x48>)
 800106a:	4a11      	ldr	r2, [pc, #68]	@ (80010b0 <MX_OPAMP3_Init+0x4c>)
 800106c:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 800106e:	4b0f      	ldr	r3, [pc, #60]	@ (80010ac <MX_OPAMP3_Init+0x48>)
 8001070:	2200      	movs	r2, #0
 8001072:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_STANDALONE_MODE;
 8001074:	4b0d      	ldr	r3, [pc, #52]	@ (80010ac <MX_OPAMP3_Init+0x48>)
 8001076:	2200      	movs	r2, #0
 8001078:	609a      	str	r2, [r3, #8]
  hopamp3.Init.InvertingInput = OPAMP_INVERTINGINPUT_IO0;
 800107a:	4b0c      	ldr	r3, [pc, #48]	@ (80010ac <MX_OPAMP3_Init+0x48>)
 800107c:	2200      	movs	r2, #0
 800107e:	60da      	str	r2, [r3, #12]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8001080:	4b0a      	ldr	r3, [pc, #40]	@ (80010ac <MX_OPAMP3_Init+0x48>)
 8001082:	2200      	movs	r2, #0
 8001084:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = DISABLE;
 8001086:	4b09      	ldr	r3, [pc, #36]	@ (80010ac <MX_OPAMP3_Init+0x48>)
 8001088:	2200      	movs	r2, #0
 800108a:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 800108c:	4b07      	ldr	r3, [pc, #28]	@ (80010ac <MX_OPAMP3_Init+0x48>)
 800108e:	2200      	movs	r2, #0
 8001090:	619a      	str	r2, [r3, #24]
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001092:	4b06      	ldr	r3, [pc, #24]	@ (80010ac <MX_OPAMP3_Init+0x48>)
 8001094:	2200      	movs	r2, #0
 8001096:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 8001098:	4804      	ldr	r0, [pc, #16]	@ (80010ac <MX_OPAMP3_Init+0x48>)
 800109a:	f005 f81d 	bl	80060d8 <HAL_OPAMP_Init>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_OPAMP3_Init+0x44>
  {
    Error_Handler();
 80010a4:	f7ff ff87 	bl	8000fb6 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP3_Init 2 */

  /* USER CODE END OPAMP3_Init 2 */

}
 80010a8:	bf00      	nop
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20000244 	.word	0x20000244
 80010b0:	40010308 	.word	0x40010308

080010b4 <HAL_OPAMP_MspInit>:

void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* opampHandle)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b08a      	sub	sp, #40	@ 0x28
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010bc:	f107 0314 	add.w	r3, r7, #20
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
 80010ca:	611a      	str	r2, [r3, #16]
  if(opampHandle->Instance==OPAMP1)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a2e      	ldr	r2, [pc, #184]	@ (800118c <HAL_OPAMP_MspInit+0xd8>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d119      	bne.n	800110a <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d6:	4b2e      	ldr	r3, [pc, #184]	@ (8001190 <HAL_OPAMP_MspInit+0xdc>)
 80010d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010da:	4a2d      	ldr	r2, [pc, #180]	@ (8001190 <HAL_OPAMP_MspInit+0xdc>)
 80010dc:	f043 0301 	orr.w	r3, r3, #1
 80010e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010e2:	4b2b      	ldr	r3, [pc, #172]	@ (8001190 <HAL_OPAMP_MspInit+0xdc>)
 80010e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010e6:	f003 0301 	and.w	r3, r3, #1
 80010ea:	613b      	str	r3, [r7, #16]
 80010ec:	693b      	ldr	r3, [r7, #16]
    /**OPAMP1 GPIO Configuration
    PA1     ------> OPAMP1_VINP
    PA2     ------> OPAMP1_VOUT
    PA3     ------> OPAMP1_VINM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80010ee:	230e      	movs	r3, #14
 80010f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010f2:	2303      	movs	r3, #3
 80010f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f6:	2300      	movs	r3, #0
 80010f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fa:	f107 0314 	add.w	r3, r7, #20
 80010fe:	4619      	mov	r1, r3
 8001100:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001104:	f004 fe36 	bl	8005d74 <HAL_GPIO_Init>

  /* USER CODE BEGIN OPAMP3_MspInit 1 */

  /* USER CODE END OPAMP3_MspInit 1 */
  }
}
 8001108:	e03b      	b.n	8001182 <HAL_OPAMP_MspInit+0xce>
  else if(opampHandle->Instance==OPAMP2)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a21      	ldr	r2, [pc, #132]	@ (8001194 <HAL_OPAMP_MspInit+0xe0>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d119      	bne.n	8001148 <HAL_OPAMP_MspInit+0x94>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001114:	4b1e      	ldr	r3, [pc, #120]	@ (8001190 <HAL_OPAMP_MspInit+0xdc>)
 8001116:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001118:	4a1d      	ldr	r2, [pc, #116]	@ (8001190 <HAL_OPAMP_MspInit+0xdc>)
 800111a:	f043 0301 	orr.w	r3, r3, #1
 800111e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001120:	4b1b      	ldr	r3, [pc, #108]	@ (8001190 <HAL_OPAMP_MspInit+0xdc>)
 8001122:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001124:	f003 0301 	and.w	r3, r3, #1
 8001128:	60fb      	str	r3, [r7, #12]
 800112a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800112c:	23e0      	movs	r3, #224	@ 0xe0
 800112e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001130:	2303      	movs	r3, #3
 8001132:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001138:	f107 0314 	add.w	r3, r7, #20
 800113c:	4619      	mov	r1, r3
 800113e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001142:	f004 fe17 	bl	8005d74 <HAL_GPIO_Init>
}
 8001146:	e01c      	b.n	8001182 <HAL_OPAMP_MspInit+0xce>
  else if(opampHandle->Instance==OPAMP3)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a12      	ldr	r2, [pc, #72]	@ (8001198 <HAL_OPAMP_MspInit+0xe4>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d117      	bne.n	8001182 <HAL_OPAMP_MspInit+0xce>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001152:	4b0f      	ldr	r3, [pc, #60]	@ (8001190 <HAL_OPAMP_MspInit+0xdc>)
 8001154:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001156:	4a0e      	ldr	r2, [pc, #56]	@ (8001190 <HAL_OPAMP_MspInit+0xdc>)
 8001158:	f043 0302 	orr.w	r3, r3, #2
 800115c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800115e:	4b0c      	ldr	r3, [pc, #48]	@ (8001190 <HAL_OPAMP_MspInit+0xdc>)
 8001160:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001162:	f003 0302 	and.w	r3, r3, #2
 8001166:	60bb      	str	r3, [r7, #8]
 8001168:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800116a:	2307      	movs	r3, #7
 800116c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800116e:	2303      	movs	r3, #3
 8001170:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001172:	2300      	movs	r3, #0
 8001174:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001176:	f107 0314 	add.w	r3, r7, #20
 800117a:	4619      	mov	r1, r3
 800117c:	4807      	ldr	r0, [pc, #28]	@ (800119c <HAL_OPAMP_MspInit+0xe8>)
 800117e:	f004 fdf9 	bl	8005d74 <HAL_GPIO_Init>
}
 8001182:	bf00      	nop
 8001184:	3728      	adds	r7, #40	@ 0x28
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	40010300 	.word	0x40010300
 8001190:	40021000 	.word	0x40021000
 8001194:	40010304 	.word	0x40010304
 8001198:	40010308 	.word	0x40010308
 800119c:	48000400 	.word	0x48000400

080011a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011a6:	4b0f      	ldr	r3, [pc, #60]	@ (80011e4 <HAL_MspInit+0x44>)
 80011a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011aa:	4a0e      	ldr	r2, [pc, #56]	@ (80011e4 <HAL_MspInit+0x44>)
 80011ac:	f043 0301 	orr.w	r3, r3, #1
 80011b0:	6613      	str	r3, [r2, #96]	@ 0x60
 80011b2:	4b0c      	ldr	r3, [pc, #48]	@ (80011e4 <HAL_MspInit+0x44>)
 80011b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011b6:	f003 0301 	and.w	r3, r3, #1
 80011ba:	607b      	str	r3, [r7, #4]
 80011bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011be:	4b09      	ldr	r3, [pc, #36]	@ (80011e4 <HAL_MspInit+0x44>)
 80011c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011c2:	4a08      	ldr	r2, [pc, #32]	@ (80011e4 <HAL_MspInit+0x44>)
 80011c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80011ca:	4b06      	ldr	r3, [pc, #24]	@ (80011e4 <HAL_MspInit+0x44>)
 80011cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011d2:	603b      	str	r3, [r7, #0]
 80011d4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80011d6:	f005 f925 	bl	8006424 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011da:	bf00      	nop
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	40021000 	.word	0x40021000

080011e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011ec:	bf00      	nop
 80011ee:	e7fd      	b.n	80011ec <NMI_Handler+0x4>

080011f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011f4:	bf00      	nop
 80011f6:	e7fd      	b.n	80011f4 <HardFault_Handler+0x4>

080011f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011fc:	bf00      	nop
 80011fe:	e7fd      	b.n	80011fc <MemManage_Handler+0x4>

08001200 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001204:	bf00      	nop
 8001206:	e7fd      	b.n	8001204 <BusFault_Handler+0x4>

08001208 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800120c:	bf00      	nop
 800120e:	e7fd      	b.n	800120c <UsageFault_Handler+0x4>

08001210 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001214:	bf00      	nop
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr

0800121e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800121e:	b480      	push	{r7}
 8001220:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001222:	bf00      	nop
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr

0800122c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001230:	bf00      	nop
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr

0800123a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800123a:	b580      	push	{r7, lr}
 800123c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800123e:	f000 fc1f 	bl	8001a80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
	...

08001248 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800124c:	4802      	ldr	r0, [pc, #8]	@ (8001258 <DMA1_Channel1_IRQHandler+0x10>)
 800124e:	f003 fff0 	bl	8005232 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001252:	bf00      	nop
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	200003ac 	.word	0x200003ac

0800125c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001260:	4803      	ldr	r0, [pc, #12]	@ (8001270 <ADC1_2_IRQHandler+0x14>)
 8001262:	f001 f801 	bl	8002268 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001266:	4803      	ldr	r0, [pc, #12]	@ (8001274 <ADC1_2_IRQHandler+0x18>)
 8001268:	f000 fffe 	bl	8002268 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800126c:	bf00      	nop
 800126e:	bd80      	pop	{r7, pc}
 8001270:	20000040 	.word	0x20000040
 8001274:	200000ac 	.word	0x200000ac

08001278 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 800127c:	4805      	ldr	r0, [pc, #20]	@ (8001294 <FDCAN1_IT0_IRQHandler+0x1c>)
 800127e:	f004 fb89 	bl	8005994 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */
	HAL_FDCAN_GetRxMessage(&hfdcan1,FDCAN_RX_FIFO0,&RxHeader,RxData);
 8001282:	4b05      	ldr	r3, [pc, #20]	@ (8001298 <FDCAN1_IT0_IRQHandler+0x20>)
 8001284:	4a05      	ldr	r2, [pc, #20]	@ (800129c <FDCAN1_IT0_IRQHandler+0x24>)
 8001286:	2140      	movs	r1, #64	@ 0x40
 8001288:	4802      	ldr	r0, [pc, #8]	@ (8001294 <FDCAN1_IT0_IRQHandler+0x1c>)
 800128a:	f004 fa7b 	bl	8005784 <HAL_FDCAN_GetRxMessage>
  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	20000168 	.word	0x20000168
 8001298:	20000504 	.word	0x20000504
 800129c:	200004dc 	.word	0x200004dc

080012a0 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80012a4:	4802      	ldr	r0, [pc, #8]	@ (80012b0 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 80012a6:	f006 fa9d 	bl	80077e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	20000280 	.word	0x20000280

080012b4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80012b8:	4802      	ldr	r0, [pc, #8]	@ (80012c4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80012ba:	f006 fa93 	bl	80077e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80012be:	bf00      	nop
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	20000280 	.word	0x20000280

080012c8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80012cc:	4802      	ldr	r0, [pc, #8]	@ (80012d8 <TIM1_CC_IRQHandler+0x10>)
 80012ce:	f006 fa89 	bl	80077e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80012d2:	bf00      	nop
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000280 	.word	0x20000280

080012dc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80012e0:	4802      	ldr	r0, [pc, #8]	@ (80012ec <TIM4_IRQHandler+0x10>)
 80012e2:	f006 fa7f 	bl	80077e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	200002cc 	.word	0x200002cc

080012f0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80012f4:	4802      	ldr	r0, [pc, #8]	@ (8001300 <USART3_IRQHandler+0x10>)
 80012f6:	f008 f833 	bl	8009360 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	20000318 	.word	0x20000318

08001304 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button1_Pin);
 8001308:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800130c:	f004 fecc 	bl	80060a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Button2_Pin);
 8001310:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001314:	f004 fec8 	bl	80060a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Button3_Pin);
 8001318:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800131c:	f004 fec4 	bl	80060a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001320:	bf00      	nop
 8001322:	bd80      	pop	{r7, pc}

08001324 <COMP1_2_3_IRQHandler>:

/**
  * @brief This function handles COMP1, COMP2 and COMP3 interrupts through EXTI lines 21, 22 and 29.
  */
void COMP1_2_3_IRQHandler(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP1_2_3_IRQn 0 */

  /* USER CODE END COMP1_2_3_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp1);
 8001328:	4802      	ldr	r0, [pc, #8]	@ (8001334 <COMP1_2_3_IRQHandler+0x10>)
 800132a:	f003 f9d5 	bl	80046d8 <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP1_2_3_IRQn 1 */

  /* USER CODE END COMP1_2_3_IRQn 1 */
}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	2000011c 	.word	0x2000011c

08001338 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800133c:	4b06      	ldr	r3, [pc, #24]	@ (8001358 <SystemInit+0x20>)
 800133e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001342:	4a05      	ldr	r2, [pc, #20]	@ (8001358 <SystemInit+0x20>)
 8001344:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001348:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800134c:	bf00      	nop
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	e000ed00 	.word	0xe000ed00

0800135c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b09e      	sub	sp, #120	@ 0x78
 8001360:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001362:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	605a      	str	r2, [r3, #4]
 800136c:	609a      	str	r2, [r3, #8]
 800136e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001370:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	605a      	str	r2, [r3, #4]
 800137a:	609a      	str	r2, [r3, #8]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 800137c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	605a      	str	r2, [r3, #4]
 8001386:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001388:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]
 8001396:	611a      	str	r2, [r3, #16]
 8001398:	615a      	str	r2, [r3, #20]
 800139a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800139c:	463b      	mov	r3, r7
 800139e:	2234      	movs	r2, #52	@ 0x34
 80013a0:	2100      	movs	r1, #0
 80013a2:	4618      	mov	r0, r3
 80013a4:	f009 fbcd 	bl	800ab42 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013a8:	4b64      	ldr	r3, [pc, #400]	@ (800153c <MX_TIM1_Init+0x1e0>)
 80013aa:	4a65      	ldr	r2, [pc, #404]	@ (8001540 <MX_TIM1_Init+0x1e4>)
 80013ac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1-1;
 80013ae:	4b63      	ldr	r3, [pc, #396]	@ (800153c <MX_TIM1_Init+0x1e0>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80013b4:	4b61      	ldr	r3, [pc, #388]	@ (800153c <MX_TIM1_Init+0x1e0>)
 80013b6:	2220      	movs	r2, #32
 80013b8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7999;
 80013ba:	4b60      	ldr	r3, [pc, #384]	@ (800153c <MX_TIM1_Init+0x1e0>)
 80013bc:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80013c0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80013c2:	4b5e      	ldr	r3, [pc, #376]	@ (800153c <MX_TIM1_Init+0x1e0>)
 80013c4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80013c8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 80013ca:	4b5c      	ldr	r3, [pc, #368]	@ (800153c <MX_TIM1_Init+0x1e0>)
 80013cc:	2201      	movs	r2, #1
 80013ce:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013d0:	4b5a      	ldr	r3, [pc, #360]	@ (800153c <MX_TIM1_Init+0x1e0>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80013d6:	4859      	ldr	r0, [pc, #356]	@ (800153c <MX_TIM1_Init+0x1e0>)
 80013d8:	f005 ff52 	bl	8007280 <HAL_TIM_Base_Init>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80013e2:	f7ff fde8 	bl	8000fb6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013ea:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013ec:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80013f0:	4619      	mov	r1, r3
 80013f2:	4852      	ldr	r0, [pc, #328]	@ (800153c <MX_TIM1_Init+0x1e0>)
 80013f4:	f006 fc5a 	bl	8007cac <HAL_TIM_ConfigClockSource>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80013fe:	f7ff fdda 	bl	8000fb6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001402:	484e      	ldr	r0, [pc, #312]	@ (800153c <MX_TIM1_Init+0x1e0>)
 8001404:	f005 fff6 	bl	80073f4 <HAL_TIM_PWM_Init>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 800140e:	f7ff fdd2 	bl	8000fb6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8001412:	2370      	movs	r3, #112	@ 0x70
 8001414:	65fb      	str	r3, [r7, #92]	@ 0x5c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001416:	2300      	movs	r3, #0
 8001418:	663b      	str	r3, [r7, #96]	@ 0x60
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800141a:	2300      	movs	r3, #0
 800141c:	667b      	str	r3, [r7, #100]	@ 0x64
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800141e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001422:	4619      	mov	r1, r3
 8001424:	4845      	ldr	r0, [pc, #276]	@ (800153c <MX_TIM1_Init+0x1e0>)
 8001426:	f007 fc79 	bl	8008d1c <HAL_TIMEx_MasterConfigSynchronization>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 8001430:	f7ff fdc1 	bl	8000fb6 <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP1;
 8001434:	2302      	movs	r3, #2
 8001436:	653b      	str	r3, [r7, #80]	@ 0x50
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 8001438:	2301      	movs	r3, #1
 800143a:	657b      	str	r3, [r7, #84]	@ 0x54
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 800143c:	2300      	movs	r3, #0
 800143e:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8001440:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001444:	461a      	mov	r2, r3
 8001446:	2101      	movs	r1, #1
 8001448:	483c      	ldr	r0, [pc, #240]	@ (800153c <MX_TIM1_Init+0x1e0>)
 800144a:	f007 fd75 	bl	8008f38 <HAL_TIMEx_ConfigBreakInput>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001454:	f7ff fdaf 	bl	8000fb6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001458:	2360      	movs	r3, #96	@ 0x60
 800145a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 800145c:	2300      	movs	r3, #0
 800145e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001460:	2300      	movs	r3, #0
 8001462:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001464:	2300      	movs	r3, #0
 8001466:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001468:	2300      	movs	r3, #0
 800146a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800146c:	2300      	movs	r3, #0
 800146e:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001470:	2300      	movs	r3, #0
 8001472:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001474:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001478:	2200      	movs	r2, #0
 800147a:	4619      	mov	r1, r3
 800147c:	482f      	ldr	r0, [pc, #188]	@ (800153c <MX_TIM1_Init+0x1e0>)
 800147e:	f006 fb01 	bl	8007a84 <HAL_TIM_PWM_ConfigChannel>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 8001488:	f7ff fd95 	bl	8000fb6 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800148c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001490:	2204      	movs	r2, #4
 8001492:	4619      	mov	r1, r3
 8001494:	4829      	ldr	r0, [pc, #164]	@ (800153c <MX_TIM1_Init+0x1e0>)
 8001496:	f006 faf5 	bl	8007a84 <HAL_TIM_PWM_ConfigChannel>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 80014a0:	f7ff fd89 	bl	8000fb6 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80014a4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80014a8:	2208      	movs	r2, #8
 80014aa:	4619      	mov	r1, r3
 80014ac:	4823      	ldr	r0, [pc, #140]	@ (800153c <MX_TIM1_Init+0x1e0>)
 80014ae:	f006 fae9 	bl	8007a84 <HAL_TIM_PWM_ConfigChannel>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_TIM1_Init+0x160>
  {
    Error_Handler();
 80014b8:	f7ff fd7d 	bl	8000fb6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80014bc:	2370      	movs	r3, #112	@ 0x70
 80014be:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 7998;
 80014c0:	f641 733e 	movw	r3, #7998	@ 0x1f3e
 80014c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80014c6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80014ca:	220c      	movs	r2, #12
 80014cc:	4619      	mov	r1, r3
 80014ce:	481b      	ldr	r0, [pc, #108]	@ (800153c <MX_TIM1_Init+0x1e0>)
 80014d0:	f006 fad8 	bl	8007a84 <HAL_TIM_PWM_ConfigChannel>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_TIM1_Init+0x182>
  {
    Error_Handler();
 80014da:	f7ff fd6c 	bl	8000fb6 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014de:	2300      	movs	r3, #0
 80014e0:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014e2:	2300      	movs	r3, #0
 80014e4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014e6:	2300      	movs	r3, #0
 80014e8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 120;
 80014ea:	2378      	movs	r3, #120	@ 0x78
 80014ec:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 80014ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014f2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014f4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014f8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 2;
 80014fa:	2302      	movs	r3, #2
 80014fc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80014fe:	2300      	movs	r3, #0
 8001500:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001502:	2300      	movs	r3, #0
 8001504:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001506:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800150a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800150c:	2300      	movs	r3, #0
 800150e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001510:	2300      	movs	r3, #0
 8001512:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001514:	2300      	movs	r3, #0
 8001516:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001518:	463b      	mov	r3, r7
 800151a:	4619      	mov	r1, r3
 800151c:	4807      	ldr	r0, [pc, #28]	@ (800153c <MX_TIM1_Init+0x1e0>)
 800151e:	f007 fc7f 	bl	8008e20 <HAL_TIMEx_ConfigBreakDeadTime>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_TIM1_Init+0x1d0>
  {
    Error_Handler();
 8001528:	f7ff fd45 	bl	8000fb6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800152c:	4803      	ldr	r0, [pc, #12]	@ (800153c <MX_TIM1_Init+0x1e0>)
 800152e:	f000 f8e9 	bl	8001704 <HAL_TIM_MspPostInit>

}
 8001532:	bf00      	nop
 8001534:	3778      	adds	r7, #120	@ 0x78
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	20000280 	.word	0x20000280
 8001540:	40012c00 	.word	0x40012c00

08001544 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b08c      	sub	sp, #48	@ 0x30
 8001548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800154a:	f107 0320 	add.w	r3, r7, #32
 800154e:	2200      	movs	r2, #0
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	605a      	str	r2, [r3, #4]
 8001554:	609a      	str	r2, [r3, #8]
 8001556:	60da      	str	r2, [r3, #12]
  TIM_HallSensor_InitTypeDef sConfig = {0};
 8001558:	f107 0310 	add.w	r3, r7, #16
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	609a      	str	r2, [r3, #8]
 8001564:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001566:	1d3b      	adds	r3, r7, #4
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	605a      	str	r2, [r3, #4]
 800156e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001570:	4b26      	ldr	r3, [pc, #152]	@ (800160c <MX_TIM4_Init+0xc8>)
 8001572:	4a27      	ldr	r2, [pc, #156]	@ (8001610 <MX_TIM4_Init+0xcc>)
 8001574:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16-1;
 8001576:	4b25      	ldr	r3, [pc, #148]	@ (800160c <MX_TIM4_Init+0xc8>)
 8001578:	220f      	movs	r2, #15
 800157a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800157c:	4b23      	ldr	r3, [pc, #140]	@ (800160c <MX_TIM4_Init+0xc8>)
 800157e:	2200      	movs	r2, #0
 8001580:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001582:	4b22      	ldr	r3, [pc, #136]	@ (800160c <MX_TIM4_Init+0xc8>)
 8001584:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001588:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800158a:	4b20      	ldr	r3, [pc, #128]	@ (800160c <MX_TIM4_Init+0xc8>)
 800158c:	2200      	movs	r2, #0
 800158e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001590:	4b1e      	ldr	r3, [pc, #120]	@ (800160c <MX_TIM4_Init+0xc8>)
 8001592:	2200      	movs	r2, #0
 8001594:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001596:	481d      	ldr	r0, [pc, #116]	@ (800160c <MX_TIM4_Init+0xc8>)
 8001598:	f005 fe72 	bl	8007280 <HAL_TIM_Base_Init>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 80015a2:	f7ff fd08 	bl	8000fb6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015aa:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80015ac:	f107 0320 	add.w	r3, r7, #32
 80015b0:	4619      	mov	r1, r3
 80015b2:	4816      	ldr	r0, [pc, #88]	@ (800160c <MX_TIM4_Init+0xc8>)
 80015b4:	f006 fb7a 	bl	8007cac <HAL_TIM_ConfigClockSource>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80015be:	f7ff fcfa 	bl	8000fb6 <Error_Handler>
  }
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80015c2:	2300      	movs	r3, #0
 80015c4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80015c6:	2300      	movs	r3, #0
 80015c8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 10;
 80015ca:	230a      	movs	r3, #10
 80015cc:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 5;
 80015ce:	2305      	movs	r3, #5
 80015d0:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim4, &sConfig) != HAL_OK)
 80015d2:	f107 0310 	add.w	r3, r7, #16
 80015d6:	4619      	mov	r1, r3
 80015d8:	480c      	ldr	r0, [pc, #48]	@ (800160c <MX_TIM4_Init+0xc8>)
 80015da:	f007 f944 	bl	8008866 <HAL_TIMEx_HallSensor_Init>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <MX_TIM4_Init+0xa4>
  {
    Error_Handler();
 80015e4:	f7ff fce7 	bl	8000fb6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 80015e8:	2350      	movs	r3, #80	@ 0x50
 80015ea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ec:	2300      	movs	r3, #0
 80015ee:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80015f0:	1d3b      	adds	r3, r7, #4
 80015f2:	4619      	mov	r1, r3
 80015f4:	4805      	ldr	r0, [pc, #20]	@ (800160c <MX_TIM4_Init+0xc8>)
 80015f6:	f007 fb91 	bl	8008d1c <HAL_TIMEx_MasterConfigSynchronization>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <MX_TIM4_Init+0xc0>
  {
    Error_Handler();
 8001600:	f7ff fcd9 	bl	8000fb6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001604:	bf00      	nop
 8001606:	3730      	adds	r7, #48	@ 0x30
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	200002cc 	.word	0x200002cc
 8001610:	40000800 	.word	0x40000800

08001614 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b08a      	sub	sp, #40	@ 0x28
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800161c:	f107 0314 	add.w	r3, r7, #20
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	605a      	str	r2, [r3, #4]
 8001626:	609a      	str	r2, [r3, #8]
 8001628:	60da      	str	r2, [r3, #12]
 800162a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a30      	ldr	r2, [pc, #192]	@ (80016f4 <HAL_TIM_Base_MspInit+0xe0>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d124      	bne.n	8001680 <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001636:	4b30      	ldr	r3, [pc, #192]	@ (80016f8 <HAL_TIM_Base_MspInit+0xe4>)
 8001638:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800163a:	4a2f      	ldr	r2, [pc, #188]	@ (80016f8 <HAL_TIM_Base_MspInit+0xe4>)
 800163c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001640:	6613      	str	r3, [r2, #96]	@ 0x60
 8001642:	4b2d      	ldr	r3, [pc, #180]	@ (80016f8 <HAL_TIM_Base_MspInit+0xe4>)
 8001644:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001646:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800164a:	613b      	str	r3, [r7, #16]
 800164c:	693b      	ldr	r3, [r7, #16]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800164e:	2200      	movs	r2, #0
 8001650:	2100      	movs	r1, #0
 8001652:	2018      	movs	r0, #24
 8001654:	f003 f961 	bl	800491a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001658:	2018      	movs	r0, #24
 800165a:	f003 f978 	bl	800494e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800165e:	2200      	movs	r2, #0
 8001660:	2100      	movs	r1, #0
 8001662:	2019      	movs	r0, #25
 8001664:	f003 f959 	bl	800491a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001668:	2019      	movs	r0, #25
 800166a:	f003 f970 	bl	800494e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800166e:	2200      	movs	r2, #0
 8001670:	2100      	movs	r1, #0
 8001672:	201b      	movs	r0, #27
 8001674:	f003 f951 	bl	800491a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001678:	201b      	movs	r0, #27
 800167a:	f003 f968 	bl	800494e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800167e:	e035      	b.n	80016ec <HAL_TIM_Base_MspInit+0xd8>
  else if(tim_baseHandle->Instance==TIM4)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a1d      	ldr	r2, [pc, #116]	@ (80016fc <HAL_TIM_Base_MspInit+0xe8>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d130      	bne.n	80016ec <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800168a:	4b1b      	ldr	r3, [pc, #108]	@ (80016f8 <HAL_TIM_Base_MspInit+0xe4>)
 800168c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800168e:	4a1a      	ldr	r2, [pc, #104]	@ (80016f8 <HAL_TIM_Base_MspInit+0xe4>)
 8001690:	f043 0304 	orr.w	r3, r3, #4
 8001694:	6593      	str	r3, [r2, #88]	@ 0x58
 8001696:	4b18      	ldr	r3, [pc, #96]	@ (80016f8 <HAL_TIM_Base_MspInit+0xe4>)
 8001698:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800169a:	f003 0304 	and.w	r3, r3, #4
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a2:	4b15      	ldr	r3, [pc, #84]	@ (80016f8 <HAL_TIM_Base_MspInit+0xe4>)
 80016a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016a6:	4a14      	ldr	r2, [pc, #80]	@ (80016f8 <HAL_TIM_Base_MspInit+0xe4>)
 80016a8:	f043 0302 	orr.w	r3, r3, #2
 80016ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016ae:	4b12      	ldr	r3, [pc, #72]	@ (80016f8 <HAL_TIM_Base_MspInit+0xe4>)
 80016b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016b2:	f003 0302 	and.w	r3, r3, #2
 80016b6:	60bb      	str	r3, [r7, #8]
 80016b8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 80016ba:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 80016be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c0:	2302      	movs	r3, #2
 80016c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c4:	2300      	movs	r3, #0
 80016c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c8:	2300      	movs	r3, #0
 80016ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80016cc:	2302      	movs	r3, #2
 80016ce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d0:	f107 0314 	add.w	r3, r7, #20
 80016d4:	4619      	mov	r1, r3
 80016d6:	480a      	ldr	r0, [pc, #40]	@ (8001700 <HAL_TIM_Base_MspInit+0xec>)
 80016d8:	f004 fb4c 	bl	8005d74 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80016dc:	2200      	movs	r2, #0
 80016de:	2100      	movs	r1, #0
 80016e0:	201e      	movs	r0, #30
 80016e2:	f003 f91a 	bl	800491a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80016e6:	201e      	movs	r0, #30
 80016e8:	f003 f931 	bl	800494e <HAL_NVIC_EnableIRQ>
}
 80016ec:	bf00      	nop
 80016ee:	3728      	adds	r7, #40	@ 0x28
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	40012c00 	.word	0x40012c00
 80016f8:	40021000 	.word	0x40021000
 80016fc:	40000800 	.word	0x40000800
 8001700:	48000400 	.word	0x48000400

08001704 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b08a      	sub	sp, #40	@ 0x28
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800170c:	f107 0314 	add.w	r3, r7, #20
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	605a      	str	r2, [r3, #4]
 8001716:	609a      	str	r2, [r3, #8]
 8001718:	60da      	str	r2, [r3, #12]
 800171a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a29      	ldr	r2, [pc, #164]	@ (80017c8 <HAL_TIM_MspPostInit+0xc4>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d14b      	bne.n	80017be <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001726:	4b29      	ldr	r3, [pc, #164]	@ (80017cc <HAL_TIM_MspPostInit+0xc8>)
 8001728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800172a:	4a28      	ldr	r2, [pc, #160]	@ (80017cc <HAL_TIM_MspPostInit+0xc8>)
 800172c:	f043 0302 	orr.w	r3, r3, #2
 8001730:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001732:	4b26      	ldr	r3, [pc, #152]	@ (80017cc <HAL_TIM_MspPostInit+0xc8>)
 8001734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	613b      	str	r3, [r7, #16]
 800173c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800173e:	4b23      	ldr	r3, [pc, #140]	@ (80017cc <HAL_TIM_MspPostInit+0xc8>)
 8001740:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001742:	4a22      	ldr	r2, [pc, #136]	@ (80017cc <HAL_TIM_MspPostInit+0xc8>)
 8001744:	f043 0301 	orr.w	r3, r3, #1
 8001748:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800174a:	4b20      	ldr	r3, [pc, #128]	@ (80017cc <HAL_TIM_MspPostInit+0xc8>)
 800174c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001756:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800175a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175c:	2302      	movs	r3, #2
 800175e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001760:	2300      	movs	r3, #0
 8001762:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001764:	2300      	movs	r3, #0
 8001766:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001768:	2306      	movs	r3, #6
 800176a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800176c:	f107 0314 	add.w	r3, r7, #20
 8001770:	4619      	mov	r1, r3
 8001772:	4817      	ldr	r0, [pc, #92]	@ (80017d0 <HAL_TIM_MspPostInit+0xcc>)
 8001774:	f004 fafe 	bl	8005d74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001778:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800177c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800177e:	2302      	movs	r3, #2
 8001780:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001782:	2300      	movs	r3, #0
 8001784:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001786:	2300      	movs	r3, #0
 8001788:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 800178a:	2304      	movs	r3, #4
 800178c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800178e:	f107 0314 	add.w	r3, r7, #20
 8001792:	4619      	mov	r1, r3
 8001794:	480e      	ldr	r0, [pc, #56]	@ (80017d0 <HAL_TIM_MspPostInit+0xcc>)
 8001796:	f004 faed 	bl	8005d74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800179a:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 800179e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a0:	2302      	movs	r3, #2
 80017a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a4:	2300      	movs	r3, #0
 80017a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a8:	2300      	movs	r3, #0
 80017aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80017ac:	2306      	movs	r3, #6
 80017ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b0:	f107 0314 	add.w	r3, r7, #20
 80017b4:	4619      	mov	r1, r3
 80017b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017ba:	f004 fadb 	bl	8005d74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80017be:	bf00      	nop
 80017c0:	3728      	adds	r7, #40	@ 0x28
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	40012c00 	.word	0x40012c00
 80017cc:	40021000 	.word	0x40021000
 80017d0:	48000400 	.word	0x48000400

080017d4 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80017d8:	4b22      	ldr	r3, [pc, #136]	@ (8001864 <MX_USART3_UART_Init+0x90>)
 80017da:	4a23      	ldr	r2, [pc, #140]	@ (8001868 <MX_USART3_UART_Init+0x94>)
 80017dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 80017de:	4b21      	ldr	r3, [pc, #132]	@ (8001864 <MX_USART3_UART_Init+0x90>)
 80017e0:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 80017e4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80017e6:	4b1f      	ldr	r3, [pc, #124]	@ (8001864 <MX_USART3_UART_Init+0x90>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80017ec:	4b1d      	ldr	r3, [pc, #116]	@ (8001864 <MX_USART3_UART_Init+0x90>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80017f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001864 <MX_USART3_UART_Init+0x90>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80017f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001864 <MX_USART3_UART_Init+0x90>)
 80017fa:	220c      	movs	r2, #12
 80017fc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017fe:	4b19      	ldr	r3, [pc, #100]	@ (8001864 <MX_USART3_UART_Init+0x90>)
 8001800:	2200      	movs	r2, #0
 8001802:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001804:	4b17      	ldr	r3, [pc, #92]	@ (8001864 <MX_USART3_UART_Init+0x90>)
 8001806:	2200      	movs	r2, #0
 8001808:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800180a:	4b16      	ldr	r3, [pc, #88]	@ (8001864 <MX_USART3_UART_Init+0x90>)
 800180c:	2200      	movs	r2, #0
 800180e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001810:	4b14      	ldr	r3, [pc, #80]	@ (8001864 <MX_USART3_UART_Init+0x90>)
 8001812:	2200      	movs	r2, #0
 8001814:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001816:	4b13      	ldr	r3, [pc, #76]	@ (8001864 <MX_USART3_UART_Init+0x90>)
 8001818:	2200      	movs	r2, #0
 800181a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800181c:	4811      	ldr	r0, [pc, #68]	@ (8001864 <MX_USART3_UART_Init+0x90>)
 800181e:	f007 fcce 	bl	80091be <HAL_UART_Init>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001828:	f7ff fbc5 	bl	8000fb6 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800182c:	2100      	movs	r1, #0
 800182e:	480d      	ldr	r0, [pc, #52]	@ (8001864 <MX_USART3_UART_Init+0x90>)
 8001830:	f008 ff43 	bl	800a6ba <HAL_UARTEx_SetTxFifoThreshold>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800183a:	f7ff fbbc 	bl	8000fb6 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800183e:	2100      	movs	r1, #0
 8001840:	4808      	ldr	r0, [pc, #32]	@ (8001864 <MX_USART3_UART_Init+0x90>)
 8001842:	f008 ff78 	bl	800a736 <HAL_UARTEx_SetRxFifoThreshold>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800184c:	f7ff fbb3 	bl	8000fb6 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001850:	4804      	ldr	r0, [pc, #16]	@ (8001864 <MX_USART3_UART_Init+0x90>)
 8001852:	f008 fef9 	bl	800a648 <HAL_UARTEx_DisableFifoMode>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800185c:	f7ff fbab 	bl	8000fb6 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001860:	bf00      	nop
 8001862:	bd80      	pop	{r7, pc}
 8001864:	20000318 	.word	0x20000318
 8001868:	40004800 	.word	0x40004800

0800186c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b09a      	sub	sp, #104	@ 0x68
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001874:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]
 800187c:	605a      	str	r2, [r3, #4]
 800187e:	609a      	str	r2, [r3, #8]
 8001880:	60da      	str	r2, [r3, #12]
 8001882:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001884:	f107 0310 	add.w	r3, r7, #16
 8001888:	2244      	movs	r2, #68	@ 0x44
 800188a:	2100      	movs	r1, #0
 800188c:	4618      	mov	r0, r3
 800188e:	f009 f958 	bl	800ab42 <memset>
  if(uartHandle->Instance==USART3)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a37      	ldr	r2, [pc, #220]	@ (8001974 <HAL_UART_MspInit+0x108>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d167      	bne.n	800196c <HAL_UART_MspInit+0x100>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800189c:	2304      	movs	r3, #4
 800189e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80018a0:	2300      	movs	r3, #0
 80018a2:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018a4:	f107 0310 	add.w	r3, r7, #16
 80018a8:	4618      	mov	r0, r3
 80018aa:	f005 faf9 	bl	8006ea0 <HAL_RCCEx_PeriphCLKConfig>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80018b4:	f7ff fb7f 	bl	8000fb6 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80018b8:	4b2f      	ldr	r3, [pc, #188]	@ (8001978 <HAL_UART_MspInit+0x10c>)
 80018ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018bc:	4a2e      	ldr	r2, [pc, #184]	@ (8001978 <HAL_UART_MspInit+0x10c>)
 80018be:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80018c4:	4b2c      	ldr	r3, [pc, #176]	@ (8001978 <HAL_UART_MspInit+0x10c>)
 80018c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018c8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80018cc:	60fb      	str	r3, [r7, #12]
 80018ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018d0:	4b29      	ldr	r3, [pc, #164]	@ (8001978 <HAL_UART_MspInit+0x10c>)
 80018d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018d4:	4a28      	ldr	r2, [pc, #160]	@ (8001978 <HAL_UART_MspInit+0x10c>)
 80018d6:	f043 0302 	orr.w	r3, r3, #2
 80018da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018dc:	4b26      	ldr	r3, [pc, #152]	@ (8001978 <HAL_UART_MspInit+0x10c>)
 80018de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018e0:	f003 0302 	and.w	r3, r3, #2
 80018e4:	60bb      	str	r3, [r7, #8]
 80018e6:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80018e8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80018ec:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ee:	2302      	movs	r3, #2
 80018f0:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f2:	2300      	movs	r3, #0
 80018f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f6:	2300      	movs	r3, #0
 80018f8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80018fa:	2307      	movs	r3, #7
 80018fc:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018fe:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001902:	4619      	mov	r1, r3
 8001904:	481d      	ldr	r0, [pc, #116]	@ (800197c <HAL_UART_MspInit+0x110>)
 8001906:	f004 fa35 	bl	8005d74 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel1;
 800190a:	4b1d      	ldr	r3, [pc, #116]	@ (8001980 <HAL_UART_MspInit+0x114>)
 800190c:	4a1d      	ldr	r2, [pc, #116]	@ (8001984 <HAL_UART_MspInit+0x118>)
 800190e:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8001910:	4b1b      	ldr	r3, [pc, #108]	@ (8001980 <HAL_UART_MspInit+0x114>)
 8001912:	221d      	movs	r2, #29
 8001914:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001916:	4b1a      	ldr	r3, [pc, #104]	@ (8001980 <HAL_UART_MspInit+0x114>)
 8001918:	2210      	movs	r2, #16
 800191a:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800191c:	4b18      	ldr	r3, [pc, #96]	@ (8001980 <HAL_UART_MspInit+0x114>)
 800191e:	2200      	movs	r2, #0
 8001920:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001922:	4b17      	ldr	r3, [pc, #92]	@ (8001980 <HAL_UART_MspInit+0x114>)
 8001924:	2280      	movs	r2, #128	@ 0x80
 8001926:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001928:	4b15      	ldr	r3, [pc, #84]	@ (8001980 <HAL_UART_MspInit+0x114>)
 800192a:	2200      	movs	r2, #0
 800192c:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800192e:	4b14      	ldr	r3, [pc, #80]	@ (8001980 <HAL_UART_MspInit+0x114>)
 8001930:	2200      	movs	r2, #0
 8001932:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001934:	4b12      	ldr	r3, [pc, #72]	@ (8001980 <HAL_UART_MspInit+0x114>)
 8001936:	2200      	movs	r2, #0
 8001938:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800193a:	4b11      	ldr	r3, [pc, #68]	@ (8001980 <HAL_UART_MspInit+0x114>)
 800193c:	2200      	movs	r2, #0
 800193e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001940:	480f      	ldr	r0, [pc, #60]	@ (8001980 <HAL_UART_MspInit+0x114>)
 8001942:	f003 fa93 	bl	8004e6c <HAL_DMA_Init>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 800194c:	f7ff fb33 	bl	8000fb6 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	4a0b      	ldr	r2, [pc, #44]	@ (8001980 <HAL_UART_MspInit+0x114>)
 8001954:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001956:	4a0a      	ldr	r2, [pc, #40]	@ (8001980 <HAL_UART_MspInit+0x114>)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800195c:	2200      	movs	r2, #0
 800195e:	2100      	movs	r1, #0
 8001960:	2027      	movs	r0, #39	@ 0x27
 8001962:	f002 ffda 	bl	800491a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001966:	2027      	movs	r0, #39	@ 0x27
 8001968:	f002 fff1 	bl	800494e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800196c:	bf00      	nop
 800196e:	3768      	adds	r7, #104	@ 0x68
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	40004800 	.word	0x40004800
 8001978:	40021000 	.word	0x40021000
 800197c:	48000400 	.word	0x48000400
 8001980:	200003ac 	.word	0x200003ac
 8001984:	40020008 	.word	0x40020008

08001988 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001988:	480d      	ldr	r0, [pc, #52]	@ (80019c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800198a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800198c:	f7ff fcd4 	bl	8001338 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001990:	480c      	ldr	r0, [pc, #48]	@ (80019c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001992:	490d      	ldr	r1, [pc, #52]	@ (80019c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001994:	4a0d      	ldr	r2, [pc, #52]	@ (80019cc <LoopForever+0xe>)
  movs r3, #0
 8001996:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001998:	e002      	b.n	80019a0 <LoopCopyDataInit>

0800199a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800199a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800199c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800199e:	3304      	adds	r3, #4

080019a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019a4:	d3f9      	bcc.n	800199a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019a6:	4a0a      	ldr	r2, [pc, #40]	@ (80019d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80019a8:	4c0a      	ldr	r4, [pc, #40]	@ (80019d4 <LoopForever+0x16>)
  movs r3, #0
 80019aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019ac:	e001      	b.n	80019b2 <LoopFillZerobss>

080019ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019b0:	3204      	adds	r2, #4

080019b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019b4:	d3fb      	bcc.n	80019ae <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80019b6:	f009 f8cd 	bl	800ab54 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019ba:	f7ff fa2d 	bl	8000e18 <main>

080019be <LoopForever>:

LoopForever:
    b LoopForever
 80019be:	e7fe      	b.n	80019be <LoopForever>
  ldr   r0, =_estack
 80019c0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80019c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019c8:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 80019cc:	0800ac14 	.word	0x0800ac14
  ldr r2, =_sbss
 80019d0:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 80019d4:	20000510 	.word	0x20000510

080019d8 <COMP4_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019d8:	e7fe      	b.n	80019d8 <COMP4_IRQHandler>

080019da <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019da:	b580      	push	{r7, lr}
 80019dc:	b082      	sub	sp, #8
 80019de:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019e0:	2300      	movs	r3, #0
 80019e2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019e4:	2003      	movs	r0, #3
 80019e6:	f002 ff8d 	bl	8004904 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019ea:	200f      	movs	r0, #15
 80019ec:	f000 f80e 	bl	8001a0c <HAL_InitTick>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d002      	beq.n	80019fc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	71fb      	strb	r3, [r7, #7]
 80019fa:	e001      	b.n	8001a00 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80019fc:	f7ff fbd0 	bl	80011a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a00:	79fb      	ldrb	r3, [r7, #7]

}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
	...

08001a0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a14:	2300      	movs	r3, #0
 8001a16:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001a18:	4b16      	ldr	r3, [pc, #88]	@ (8001a74 <HAL_InitTick+0x68>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d022      	beq.n	8001a66 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001a20:	4b15      	ldr	r3, [pc, #84]	@ (8001a78 <HAL_InitTick+0x6c>)
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	4b13      	ldr	r3, [pc, #76]	@ (8001a74 <HAL_InitTick+0x68>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001a2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a34:	4618      	mov	r0, r3
 8001a36:	f002 ff98 	bl	800496a <HAL_SYSTICK_Config>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d10f      	bne.n	8001a60 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2b0f      	cmp	r3, #15
 8001a44:	d809      	bhi.n	8001a5a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a46:	2200      	movs	r2, #0
 8001a48:	6879      	ldr	r1, [r7, #4]
 8001a4a:	f04f 30ff 	mov.w	r0, #4294967295
 8001a4e:	f002 ff64 	bl	800491a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a52:	4a0a      	ldr	r2, [pc, #40]	@ (8001a7c <HAL_InitTick+0x70>)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6013      	str	r3, [r2, #0]
 8001a58:	e007      	b.n	8001a6a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	73fb      	strb	r3, [r7, #15]
 8001a5e:	e004      	b.n	8001a6a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	73fb      	strb	r3, [r7, #15]
 8001a64:	e001      	b.n	8001a6a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3710      	adds	r7, #16
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	20000008 	.word	0x20000008
 8001a78:	20000000 	.word	0x20000000
 8001a7c:	20000004 	.word	0x20000004

08001a80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a84:	4b05      	ldr	r3, [pc, #20]	@ (8001a9c <HAL_IncTick+0x1c>)
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	4b05      	ldr	r3, [pc, #20]	@ (8001aa0 <HAL_IncTick+0x20>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	4a03      	ldr	r2, [pc, #12]	@ (8001a9c <HAL_IncTick+0x1c>)
 8001a90:	6013      	str	r3, [r2, #0]
}
 8001a92:	bf00      	nop
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr
 8001a9c:	2000040c 	.word	0x2000040c
 8001aa0:	20000008 	.word	0x20000008

08001aa4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  return uwTick;
 8001aa8:	4b03      	ldr	r3, [pc, #12]	@ (8001ab8 <HAL_GetTick+0x14>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	2000040c 	.word	0x2000040c

08001abc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	431a      	orrs	r2, r3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	609a      	str	r2, [r3, #8]
}
 8001ad6:	bf00      	nop
 8001ad8:	370c      	adds	r7, #12
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr

08001ae2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	b083      	sub	sp, #12
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
 8001aea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	431a      	orrs	r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	609a      	str	r2, [r3, #8]
}
 8001afc:	bf00      	nop
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b087      	sub	sp, #28
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	60b9      	str	r1, [r7, #8]
 8001b2e:	607a      	str	r2, [r7, #4]
 8001b30:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	3360      	adds	r3, #96	@ 0x60
 8001b36:	461a      	mov	r2, r3
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	4413      	add	r3, r2
 8001b3e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	4b08      	ldr	r3, [pc, #32]	@ (8001b68 <LL_ADC_SetOffset+0x44>)
 8001b46:	4013      	ands	r3, r2
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001b4e:	683a      	ldr	r2, [r7, #0]
 8001b50:	430a      	orrs	r2, r1
 8001b52:	4313      	orrs	r3, r2
 8001b54:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001b5c:	bf00      	nop
 8001b5e:	371c      	adds	r7, #28
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr
 8001b68:	03fff000 	.word	0x03fff000

08001b6c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	3360      	adds	r3, #96	@ 0x60
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	4413      	add	r3, r2
 8001b82:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3714      	adds	r7, #20
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b087      	sub	sp, #28
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	3360      	adds	r3, #96	@ 0x60
 8001ba8:	461a      	mov	r2, r3
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	4413      	add	r3, r2
 8001bb0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	431a      	orrs	r2, r3
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001bc2:	bf00      	nop
 8001bc4:	371c      	adds	r7, #28
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr

08001bce <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	b087      	sub	sp, #28
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	60f8      	str	r0, [r7, #12]
 8001bd6:	60b9      	str	r1, [r7, #8]
 8001bd8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	3360      	adds	r3, #96	@ 0x60
 8001bde:	461a      	mov	r2, r3
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	4413      	add	r3, r2
 8001be6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	431a      	orrs	r2, r3
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001bf8:	bf00      	nop
 8001bfa:	371c      	adds	r7, #28
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b087      	sub	sp, #28
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	60b9      	str	r1, [r7, #8]
 8001c0e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	3360      	adds	r3, #96	@ 0x60
 8001c14:	461a      	mov	r2, r3
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	4413      	add	r3, r2
 8001c1c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	431a      	orrs	r2, r3
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001c2e:	bf00      	nop
 8001c30:	371c      	adds	r7, #28
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr

08001c3a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	b083      	sub	sp, #12
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
 8001c42:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	695b      	ldr	r3, [r3, #20]
 8001c48:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	431a      	orrs	r2, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	615a      	str	r2, [r3, #20]
}
 8001c54:	bf00      	nop
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d101      	bne.n	8001c78 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001c74:	2301      	movs	r3, #1
 8001c76:	e000      	b.n	8001c7a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001c78:	2300      	movs	r3, #0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr

08001c86 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001c86:	b480      	push	{r7}
 8001c88:	b087      	sub	sp, #28
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	60f8      	str	r0, [r7, #12]
 8001c8e:	60b9      	str	r1, [r7, #8]
 8001c90:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	3330      	adds	r3, #48	@ 0x30
 8001c96:	461a      	mov	r2, r3
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	0a1b      	lsrs	r3, r3, #8
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	f003 030c 	and.w	r3, r3, #12
 8001ca2:	4413      	add	r3, r2
 8001ca4:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	f003 031f 	and.w	r3, r3, #31
 8001cb0:	211f      	movs	r1, #31
 8001cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb6:	43db      	mvns	r3, r3
 8001cb8:	401a      	ands	r2, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	0e9b      	lsrs	r3, r3, #26
 8001cbe:	f003 011f 	and.w	r1, r3, #31
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	f003 031f 	and.w	r3, r3, #31
 8001cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ccc:	431a      	orrs	r2, r3
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001cd2:	bf00      	nop
 8001cd4:	371c      	adds	r7, #28
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr

08001cde <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	b083      	sub	sp, #12
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cea:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d101      	bne.n	8001cf6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e000      	b.n	8001cf8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001cf6:	2300      	movs	r3, #0
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b087      	sub	sp, #28
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	3314      	adds	r3, #20
 8001d14:	461a      	mov	r2, r3
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	0e5b      	lsrs	r3, r3, #25
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	f003 0304 	and.w	r3, r3, #4
 8001d20:	4413      	add	r3, r2
 8001d22:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	0d1b      	lsrs	r3, r3, #20
 8001d2c:	f003 031f 	and.w	r3, r3, #31
 8001d30:	2107      	movs	r1, #7
 8001d32:	fa01 f303 	lsl.w	r3, r1, r3
 8001d36:	43db      	mvns	r3, r3
 8001d38:	401a      	ands	r2, r3
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	0d1b      	lsrs	r3, r3, #20
 8001d3e:	f003 031f 	and.w	r3, r3, #31
 8001d42:	6879      	ldr	r1, [r7, #4]
 8001d44:	fa01 f303 	lsl.w	r3, r1, r3
 8001d48:	431a      	orrs	r2, r3
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001d4e:	bf00      	nop
 8001d50:	371c      	adds	r7, #28
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
	...

08001d5c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b085      	sub	sp, #20
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	60b9      	str	r1, [r7, #8]
 8001d66:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d74:	43db      	mvns	r3, r3
 8001d76:	401a      	ands	r2, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f003 0318 	and.w	r3, r3, #24
 8001d7e:	4908      	ldr	r1, [pc, #32]	@ (8001da0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001d80:	40d9      	lsrs	r1, r3
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	400b      	ands	r3, r1
 8001d86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d8a:	431a      	orrs	r2, r3
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001d92:	bf00      	nop
 8001d94:	3714      	adds	r7, #20
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	0007ffff 	.word	0x0007ffff

08001da4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f003 031f 	and.w	r3, r3, #31
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001dec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	6093      	str	r3, [r2, #8]
}
 8001df4:	bf00      	nop
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001e10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001e14:	d101      	bne.n	8001e1a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001e16:	2301      	movs	r3, #1
 8001e18:	e000      	b.n	8001e1c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001e1a:	2300      	movs	r3, #0
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001e38:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e3c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e60:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001e64:	d101      	bne.n	8001e6a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001e66:	2301      	movs	r3, #1
 8001e68:	e000      	b.n	8001e6c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001e6a:	2300      	movs	r3, #0
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001e88:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e8c:	f043 0201 	orr.w	r2, r3, #1
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001e94:	bf00      	nop
 8001e96:	370c      	adds	r7, #12
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr

08001ea0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001eb0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001eb4:	f043 0202 	orr.w	r2, r3, #2
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001ebc:	bf00      	nop
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f003 0301 	and.w	r3, r3, #1
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d101      	bne.n	8001ee0 <LL_ADC_IsEnabled+0x18>
 8001edc:	2301      	movs	r3, #1
 8001ede:	e000      	b.n	8001ee2 <LL_ADC_IsEnabled+0x1a>
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr

08001eee <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	b083      	sub	sp, #12
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	f003 0302 	and.w	r3, r3, #2
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d101      	bne.n	8001f06 <LL_ADC_IsDisableOngoing+0x18>
 8001f02:	2301      	movs	r3, #1
 8001f04:	e000      	b.n	8001f08 <LL_ADC_IsDisableOngoing+0x1a>
 8001f06:	2300      	movs	r3, #0
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	f003 0304 	and.w	r3, r3, #4
 8001f24:	2b04      	cmp	r3, #4
 8001f26:	d101      	bne.n	8001f2c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e000      	b.n	8001f2e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001f2c:	2300      	movs	r3, #0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	370c      	adds	r7, #12
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr

08001f3a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	b083      	sub	sp, #12
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	f003 0308 	and.w	r3, r3, #8
 8001f4a:	2b08      	cmp	r3, #8
 8001f4c:	d101      	bne.n	8001f52 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e000      	b.n	8001f54 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001f52:	2300      	movs	r3, #0
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f60:	b590      	push	{r4, r7, lr}
 8001f62:	b089      	sub	sp, #36	@ 0x24
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d101      	bne.n	8001f7a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e167      	b.n	800224a <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	695b      	ldr	r3, [r3, #20]
 8001f7e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d109      	bne.n	8001f9c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f7fe fc0f 	bl	80007ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7ff ff2d 	bl	8001e00 <LL_ADC_IsDeepPowerDownEnabled>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d004      	beq.n	8001fb6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7ff ff13 	bl	8001ddc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7ff ff48 	bl	8001e50 <LL_ADC_IsInternalRegulatorEnabled>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d115      	bne.n	8001ff2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7ff ff2c 	bl	8001e28 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001fd0:	4ba0      	ldr	r3, [pc, #640]	@ (8002254 <HAL_ADC_Init+0x2f4>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	099b      	lsrs	r3, r3, #6
 8001fd6:	4aa0      	ldr	r2, [pc, #640]	@ (8002258 <HAL_ADC_Init+0x2f8>)
 8001fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8001fdc:	099b      	lsrs	r3, r3, #6
 8001fde:	3301      	adds	r3, #1
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001fe4:	e002      	b.n	8001fec <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	3b01      	subs	r3, #1
 8001fea:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d1f9      	bne.n	8001fe6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7ff ff2a 	bl	8001e50 <LL_ADC_IsInternalRegulatorEnabled>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d10d      	bne.n	800201e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002006:	f043 0210 	orr.w	r2, r3, #16
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002012:	f043 0201 	orr.w	r2, r3, #1
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4618      	mov	r0, r3
 8002024:	f7ff ff76 	bl	8001f14 <LL_ADC_REG_IsConversionOngoing>
 8002028:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800202e:	f003 0310 	and.w	r3, r3, #16
 8002032:	2b00      	cmp	r3, #0
 8002034:	f040 8100 	bne.w	8002238 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	2b00      	cmp	r3, #0
 800203c:	f040 80fc 	bne.w	8002238 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002044:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002048:	f043 0202 	orr.w	r2, r3, #2
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4618      	mov	r0, r3
 8002056:	f7ff ff37 	bl	8001ec8 <LL_ADC_IsEnabled>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d111      	bne.n	8002084 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002060:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002064:	f7ff ff30 	bl	8001ec8 <LL_ADC_IsEnabled>
 8002068:	4604      	mov	r4, r0
 800206a:	487c      	ldr	r0, [pc, #496]	@ (800225c <HAL_ADC_Init+0x2fc>)
 800206c:	f7ff ff2c 	bl	8001ec8 <LL_ADC_IsEnabled>
 8002070:	4603      	mov	r3, r0
 8002072:	4323      	orrs	r3, r4
 8002074:	2b00      	cmp	r3, #0
 8002076:	d105      	bne.n	8002084 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	4619      	mov	r1, r3
 800207e:	4878      	ldr	r0, [pc, #480]	@ (8002260 <HAL_ADC_Init+0x300>)
 8002080:	f7ff fd1c 	bl	8001abc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	7f5b      	ldrb	r3, [r3, #29]
 8002088:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800208e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002094:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800209a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80020a2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020a4:	4313      	orrs	r3, r2
 80020a6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d106      	bne.n	80020c0 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020b6:	3b01      	subs	r3, #1
 80020b8:	045b      	lsls	r3, r3, #17
 80020ba:	69ba      	ldr	r2, [r7, #24]
 80020bc:	4313      	orrs	r3, r2
 80020be:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d009      	beq.n	80020dc <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020cc:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020d4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	4313      	orrs	r3, r2
 80020da:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	68da      	ldr	r2, [r3, #12]
 80020e2:	4b60      	ldr	r3, [pc, #384]	@ (8002264 <HAL_ADC_Init+0x304>)
 80020e4:	4013      	ands	r3, r2
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	6812      	ldr	r2, [r2, #0]
 80020ea:	69b9      	ldr	r1, [r7, #24]
 80020ec:	430b      	orrs	r3, r1
 80020ee:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	691b      	ldr	r3, [r3, #16]
 80020f6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	430a      	orrs	r2, r1
 8002104:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4618      	mov	r0, r3
 800210c:	f7ff ff15 	bl	8001f3a <LL_ADC_INJ_IsConversionOngoing>
 8002110:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d16d      	bne.n	80021f4 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d16a      	bne.n	80021f4 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002122:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800212a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800212c:	4313      	orrs	r3, r2
 800212e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	68db      	ldr	r3, [r3, #12]
 8002136:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800213a:	f023 0302 	bic.w	r3, r3, #2
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	6812      	ldr	r2, [r2, #0]
 8002142:	69b9      	ldr	r1, [r7, #24]
 8002144:	430b      	orrs	r3, r1
 8002146:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	691b      	ldr	r3, [r3, #16]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d017      	beq.n	8002180 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	691a      	ldr	r2, [r3, #16]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800215e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002168:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800216c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	6911      	ldr	r1, [r2, #16]
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	6812      	ldr	r2, [r2, #0]
 8002178:	430b      	orrs	r3, r1
 800217a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800217e:	e013      	b.n	80021a8 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	691a      	ldr	r2, [r3, #16]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800218e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	6812      	ldr	r2, [r2, #0]
 800219c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80021a0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80021a4:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d118      	bne.n	80021e4 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	691b      	ldr	r3, [r3, #16]
 80021b8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80021bc:	f023 0304 	bic.w	r3, r3, #4
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80021c8:	4311      	orrs	r1, r2
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80021ce:	4311      	orrs	r1, r2
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80021d4:	430a      	orrs	r2, r1
 80021d6:	431a      	orrs	r2, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f042 0201 	orr.w	r2, r2, #1
 80021e0:	611a      	str	r2, [r3, #16]
 80021e2:	e007      	b.n	80021f4 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	691a      	ldr	r2, [r3, #16]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f022 0201 	bic.w	r2, r2, #1
 80021f2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	695b      	ldr	r3, [r3, #20]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d10c      	bne.n	8002216 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002202:	f023 010f 	bic.w	r1, r3, #15
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6a1b      	ldr	r3, [r3, #32]
 800220a:	1e5a      	subs	r2, r3, #1
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	430a      	orrs	r2, r1
 8002212:	631a      	str	r2, [r3, #48]	@ 0x30
 8002214:	e007      	b.n	8002226 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f022 020f 	bic.w	r2, r2, #15
 8002224:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800222a:	f023 0303 	bic.w	r3, r3, #3
 800222e:	f043 0201 	orr.w	r2, r3, #1
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002236:	e007      	b.n	8002248 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800223c:	f043 0210 	orr.w	r2, r3, #16
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002248:	7ffb      	ldrb	r3, [r7, #31]
}
 800224a:	4618      	mov	r0, r3
 800224c:	3724      	adds	r7, #36	@ 0x24
 800224e:	46bd      	mov	sp, r7
 8002250:	bd90      	pop	{r4, r7, pc}
 8002252:	bf00      	nop
 8002254:	20000000 	.word	0x20000000
 8002258:	053e2d63 	.word	0x053e2d63
 800225c:	50000100 	.word	0x50000100
 8002260:	50000300 	.word	0x50000300
 8002264:	fff04007 	.word	0xfff04007

08002268 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b08a      	sub	sp, #40	@ 0x28
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002270:	2300      	movs	r3, #0
 8002272:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002284:	4883      	ldr	r0, [pc, #524]	@ (8002494 <HAL_ADC_IRQHandler+0x22c>)
 8002286:	f7ff fd8d 	bl	8001da4 <LL_ADC_GetMultimode>
 800228a:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	2b00      	cmp	r3, #0
 8002294:	d017      	beq.n	80022c6 <HAL_ADC_IRQHandler+0x5e>
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	f003 0302 	and.w	r3, r3, #2
 800229c:	2b00      	cmp	r3, #0
 800229e:	d012      	beq.n	80022c6 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022a4:	f003 0310 	and.w	r3, r3, #16
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d105      	bne.n	80022b8 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022b0:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f001 fa9d 	bl	80037f8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	2202      	movs	r2, #2
 80022c4:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	f003 0304 	and.w	r3, r3, #4
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d004      	beq.n	80022da <HAL_ADC_IRQHandler+0x72>
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	f003 0304 	and.w	r3, r3, #4
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d10a      	bne.n	80022f0 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	f000 8085 	beq.w	80023f0 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	f003 0308 	and.w	r3, r3, #8
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d07f      	beq.n	80023f0 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022f4:	f003 0310 	and.w	r3, r3, #16
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d105      	bne.n	8002308 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002300:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4618      	mov	r0, r3
 800230e:	f7ff fca7 	bl	8001c60 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d064      	beq.n	80023e2 <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a5e      	ldr	r2, [pc, #376]	@ (8002498 <HAL_ADC_IRQHandler+0x230>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d002      	beq.n	8002328 <HAL_ADC_IRQHandler+0xc0>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	e001      	b.n	800232c <HAL_ADC_IRQHandler+0xc4>
 8002328:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	6812      	ldr	r2, [r2, #0]
 8002330:	4293      	cmp	r3, r2
 8002332:	d008      	beq.n	8002346 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d005      	beq.n	8002346 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	2b05      	cmp	r3, #5
 800233e:	d002      	beq.n	8002346 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	2b09      	cmp	r3, #9
 8002344:	d104      	bne.n	8002350 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	623b      	str	r3, [r7, #32]
 800234e:	e00d      	b.n	800236c <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a50      	ldr	r2, [pc, #320]	@ (8002498 <HAL_ADC_IRQHandler+0x230>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d002      	beq.n	8002360 <HAL_ADC_IRQHandler+0xf8>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	e001      	b.n	8002364 <HAL_ADC_IRQHandler+0xfc>
 8002360:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002364:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800236c:	6a3b      	ldr	r3, [r7, #32]
 800236e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d135      	bne.n	80023e2 <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0308 	and.w	r3, r3, #8
 8002380:	2b08      	cmp	r3, #8
 8002382:	d12e      	bne.n	80023e2 <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4618      	mov	r0, r3
 800238a:	f7ff fdc3 	bl	8001f14 <LL_ADC_REG_IsConversionOngoing>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d11a      	bne.n	80023ca <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	685a      	ldr	r2, [r3, #4]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f022 020c 	bic.w	r2, r2, #12
 80023a2:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023a8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d112      	bne.n	80023e2 <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023c0:	f043 0201 	orr.w	r2, r3, #1
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80023c8:	e00b      	b.n	80023e2 <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023ce:	f043 0210 	orr.w	r2, r3, #16
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023da:	f043 0201 	orr.w	r2, r3, #1
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f000 f95a 	bl	800269c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	220c      	movs	r2, #12
 80023ee:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	f003 0320 	and.w	r3, r3, #32
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d004      	beq.n	8002404 <HAL_ADC_IRQHandler+0x19c>
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	f003 0320 	and.w	r3, r3, #32
 8002400:	2b00      	cmp	r3, #0
 8002402:	d10b      	bne.n	800241c <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800240a:	2b00      	cmp	r3, #0
 800240c:	f000 809e 	beq.w	800254c <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002410:	69bb      	ldr	r3, [r7, #24]
 8002412:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002416:	2b00      	cmp	r3, #0
 8002418:	f000 8098 	beq.w	800254c <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002420:	f003 0310 	and.w	r3, r3, #16
 8002424:	2b00      	cmp	r3, #0
 8002426:	d105      	bne.n	8002434 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800242c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4618      	mov	r0, r3
 800243a:	f7ff fc50 	bl	8001cde <LL_ADC_INJ_IsTriggerSourceSWStart>
 800243e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4618      	mov	r0, r3
 8002446:	f7ff fc0b 	bl	8001c60 <LL_ADC_REG_IsTriggerSourceSWStart>
 800244a:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a11      	ldr	r2, [pc, #68]	@ (8002498 <HAL_ADC_IRQHandler+0x230>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d002      	beq.n	800245c <HAL_ADC_IRQHandler+0x1f4>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	e001      	b.n	8002460 <HAL_ADC_IRQHandler+0x1f8>
 800245c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	6812      	ldr	r2, [r2, #0]
 8002464:	4293      	cmp	r3, r2
 8002466:	d008      	beq.n	800247a <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d005      	beq.n	800247a <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	2b06      	cmp	r3, #6
 8002472:	d002      	beq.n	800247a <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	2b07      	cmp	r3, #7
 8002478:	d104      	bne.n	8002484 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	623b      	str	r3, [r7, #32]
 8002482:	e011      	b.n	80024a8 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a03      	ldr	r2, [pc, #12]	@ (8002498 <HAL_ADC_IRQHandler+0x230>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d006      	beq.n	800249c <HAL_ADC_IRQHandler+0x234>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	e005      	b.n	80024a0 <HAL_ADC_IRQHandler+0x238>
 8002494:	50000300 	.word	0x50000300
 8002498:	50000100 	.word	0x50000100
 800249c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80024a0:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d047      	beq.n	800253e <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80024ae:	6a3b      	ldr	r3, [r7, #32]
 80024b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d007      	beq.n	80024c8 <HAL_ADC_IRQHandler+0x260>
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d03f      	beq.n	800253e <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80024be:	6a3b      	ldr	r3, [r7, #32]
 80024c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d13a      	bne.n	800253e <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024d2:	2b40      	cmp	r3, #64	@ 0x40
 80024d4:	d133      	bne.n	800253e <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80024d6:	6a3b      	ldr	r3, [r7, #32]
 80024d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d12e      	bne.n	800253e <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7ff fd28 	bl	8001f3a <LL_ADC_INJ_IsConversionOngoing>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d11a      	bne.n	8002526 <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	685a      	ldr	r2, [r3, #4]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80024fe:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002504:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002510:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002514:	2b00      	cmp	r3, #0
 8002516:	d112      	bne.n	800253e <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800251c:	f043 0201 	orr.w	r2, r3, #1
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002524:	e00b      	b.n	800253e <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800252a:	f043 0210 	orr.w	r2, r3, #16
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002536:	f043 0201 	orr.w	r2, r3, #1
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f008 fa0e 	bl	800a960 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2260      	movs	r2, #96	@ 0x60
 800254a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002552:	2b00      	cmp	r3, #0
 8002554:	d011      	beq.n	800257a <HAL_ADC_IRQHandler+0x312>
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800255c:	2b00      	cmp	r3, #0
 800255e:	d00c      	beq.n	800257a <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002564:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f000 f89f 	bl	80026b0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	2280      	movs	r2, #128	@ 0x80
 8002578:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002580:	2b00      	cmp	r3, #0
 8002582:	d012      	beq.n	80025aa <HAL_ADC_IRQHandler+0x342>
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800258a:	2b00      	cmp	r3, #0
 800258c:	d00d      	beq.n	80025aa <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002592:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f001 f918 	bl	80037d0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80025a8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d012      	beq.n	80025da <HAL_ADC_IRQHandler+0x372>
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d00d      	beq.n	80025da <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025c2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f001 f90a 	bl	80037e4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80025d8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	f003 0310 	and.w	r3, r3, #16
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d036      	beq.n	8002652 <HAL_ADC_IRQHandler+0x3ea>
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	f003 0310 	and.w	r3, r3, #16
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d031      	beq.n	8002652 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d102      	bne.n	80025fc <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 80025f6:	2301      	movs	r3, #1
 80025f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80025fa:	e014      	b.n	8002626 <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d008      	beq.n	8002614 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002602:	4825      	ldr	r0, [pc, #148]	@ (8002698 <HAL_ADC_IRQHandler+0x430>)
 8002604:	f7ff fbdc 	bl	8001dc0 <LL_ADC_GetMultiDMATransfer>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d00b      	beq.n	8002626 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 800260e:	2301      	movs	r3, #1
 8002610:	627b      	str	r3, [r7, #36]	@ 0x24
 8002612:	e008      	b.n	8002626 <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8002622:	2301      	movs	r3, #1
 8002624:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002628:	2b01      	cmp	r3, #1
 800262a:	d10e      	bne.n	800264a <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002630:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800263c:	f043 0202 	orr.w	r2, r3, #2
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f000 f83d 	bl	80026c4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	2210      	movs	r2, #16
 8002650:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002658:	2b00      	cmp	r3, #0
 800265a:	d018      	beq.n	800268e <HAL_ADC_IRQHandler+0x426>
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002662:	2b00      	cmp	r3, #0
 8002664:	d013      	beq.n	800268e <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800266a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002676:	f043 0208 	orr.w	r2, r3, #8
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002686:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f001 f897 	bl	80037bc <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800268e:	bf00      	nop
 8002690:	3728      	adds	r7, #40	@ 0x28
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	50000300 	.word	0x50000300

0800269c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80026a4:	bf00      	nop
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr

080026b0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80026b8:	bf00      	nop
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80026cc:	bf00      	nop
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr

080026d8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b0b6      	sub	sp, #216	@ 0xd8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026e2:	2300      	movs	r3, #0
 80026e4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80026e8:	2300      	movs	r3, #0
 80026ea:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d101      	bne.n	80026fa <HAL_ADC_ConfigChannel+0x22>
 80026f6:	2302      	movs	r3, #2
 80026f8:	e3c8      	b.n	8002e8c <HAL_ADC_ConfigChannel+0x7b4>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2201      	movs	r2, #1
 80026fe:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4618      	mov	r0, r3
 8002708:	f7ff fc04 	bl	8001f14 <LL_ADC_REG_IsConversionOngoing>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	f040 83ad 	bne.w	8002e6e <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6818      	ldr	r0, [r3, #0]
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	6859      	ldr	r1, [r3, #4]
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	461a      	mov	r2, r3
 8002722:	f7ff fab0 	bl	8001c86 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4618      	mov	r0, r3
 800272c:	f7ff fbf2 	bl	8001f14 <LL_ADC_REG_IsConversionOngoing>
 8002730:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4618      	mov	r0, r3
 800273a:	f7ff fbfe 	bl	8001f3a <LL_ADC_INJ_IsConversionOngoing>
 800273e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002742:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002746:	2b00      	cmp	r3, #0
 8002748:	f040 81d9 	bne.w	8002afe <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800274c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002750:	2b00      	cmp	r3, #0
 8002752:	f040 81d4 	bne.w	8002afe <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800275e:	d10f      	bne.n	8002780 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6818      	ldr	r0, [r3, #0]
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2200      	movs	r2, #0
 800276a:	4619      	mov	r1, r3
 800276c:	f7ff faca 	bl	8001d04 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002778:	4618      	mov	r0, r3
 800277a:	f7ff fa5e 	bl	8001c3a <LL_ADC_SetSamplingTimeCommonConfig>
 800277e:	e00e      	b.n	800279e <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6818      	ldr	r0, [r3, #0]
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	6819      	ldr	r1, [r3, #0]
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	461a      	mov	r2, r3
 800278e:	f7ff fab9 	bl	8001d04 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	2100      	movs	r1, #0
 8002798:	4618      	mov	r0, r3
 800279a:	f7ff fa4e 	bl	8001c3a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	695a      	ldr	r2, [r3, #20]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	08db      	lsrs	r3, r3, #3
 80027aa:	f003 0303 	and.w	r3, r3, #3
 80027ae:	005b      	lsls	r3, r3, #1
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	691b      	ldr	r3, [r3, #16]
 80027bc:	2b04      	cmp	r3, #4
 80027be:	d022      	beq.n	8002806 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6818      	ldr	r0, [r3, #0]
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	6919      	ldr	r1, [r3, #16]
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80027d0:	f7ff f9a8 	bl	8001b24 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6818      	ldr	r0, [r3, #0]
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	6919      	ldr	r1, [r3, #16]
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	699b      	ldr	r3, [r3, #24]
 80027e0:	461a      	mov	r2, r3
 80027e2:	f7ff f9f4 	bl	8001bce <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6818      	ldr	r0, [r3, #0]
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d102      	bne.n	80027fc <HAL_ADC_ConfigChannel+0x124>
 80027f6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80027fa:	e000      	b.n	80027fe <HAL_ADC_ConfigChannel+0x126>
 80027fc:	2300      	movs	r3, #0
 80027fe:	461a      	mov	r2, r3
 8002800:	f7ff fa00 	bl	8001c04 <LL_ADC_SetOffsetSaturation>
 8002804:	e17b      	b.n	8002afe <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2100      	movs	r1, #0
 800280c:	4618      	mov	r0, r3
 800280e:	f7ff f9ad 	bl	8001b6c <LL_ADC_GetOffsetChannel>
 8002812:	4603      	mov	r3, r0
 8002814:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002818:	2b00      	cmp	r3, #0
 800281a:	d10a      	bne.n	8002832 <HAL_ADC_ConfigChannel+0x15a>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2100      	movs	r1, #0
 8002822:	4618      	mov	r0, r3
 8002824:	f7ff f9a2 	bl	8001b6c <LL_ADC_GetOffsetChannel>
 8002828:	4603      	mov	r3, r0
 800282a:	0e9b      	lsrs	r3, r3, #26
 800282c:	f003 021f 	and.w	r2, r3, #31
 8002830:	e01e      	b.n	8002870 <HAL_ADC_ConfigChannel+0x198>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2100      	movs	r1, #0
 8002838:	4618      	mov	r0, r3
 800283a:	f7ff f997 	bl	8001b6c <LL_ADC_GetOffsetChannel>
 800283e:	4603      	mov	r3, r0
 8002840:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002844:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002848:	fa93 f3a3 	rbit	r3, r3
 800284c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002850:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002854:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002858:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d101      	bne.n	8002864 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8002860:	2320      	movs	r3, #32
 8002862:	e004      	b.n	800286e <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8002864:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002868:	fab3 f383 	clz	r3, r3
 800286c:	b2db      	uxtb	r3, r3
 800286e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002878:	2b00      	cmp	r3, #0
 800287a:	d105      	bne.n	8002888 <HAL_ADC_ConfigChannel+0x1b0>
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	0e9b      	lsrs	r3, r3, #26
 8002882:	f003 031f 	and.w	r3, r3, #31
 8002886:	e018      	b.n	80028ba <HAL_ADC_ConfigChannel+0x1e2>
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002890:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002894:	fa93 f3a3 	rbit	r3, r3
 8002898:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800289c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80028a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80028a4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d101      	bne.n	80028b0 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80028ac:	2320      	movs	r3, #32
 80028ae:	e004      	b.n	80028ba <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80028b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80028b4:	fab3 f383 	clz	r3, r3
 80028b8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d106      	bne.n	80028cc <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	2200      	movs	r2, #0
 80028c4:	2100      	movs	r1, #0
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7ff f966 	bl	8001b98 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2101      	movs	r1, #1
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7ff f94a 	bl	8001b6c <LL_ADC_GetOffsetChannel>
 80028d8:	4603      	mov	r3, r0
 80028da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d10a      	bne.n	80028f8 <HAL_ADC_ConfigChannel+0x220>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2101      	movs	r1, #1
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7ff f93f 	bl	8001b6c <LL_ADC_GetOffsetChannel>
 80028ee:	4603      	mov	r3, r0
 80028f0:	0e9b      	lsrs	r3, r3, #26
 80028f2:	f003 021f 	and.w	r2, r3, #31
 80028f6:	e01e      	b.n	8002936 <HAL_ADC_ConfigChannel+0x25e>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2101      	movs	r1, #1
 80028fe:	4618      	mov	r0, r3
 8002900:	f7ff f934 	bl	8001b6c <LL_ADC_GetOffsetChannel>
 8002904:	4603      	mov	r3, r0
 8002906:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800290e:	fa93 f3a3 	rbit	r3, r3
 8002912:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002916:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800291a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800291e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002922:	2b00      	cmp	r3, #0
 8002924:	d101      	bne.n	800292a <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8002926:	2320      	movs	r3, #32
 8002928:	e004      	b.n	8002934 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 800292a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800292e:	fab3 f383 	clz	r3, r3
 8002932:	b2db      	uxtb	r3, r3
 8002934:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800293e:	2b00      	cmp	r3, #0
 8002940:	d105      	bne.n	800294e <HAL_ADC_ConfigChannel+0x276>
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	0e9b      	lsrs	r3, r3, #26
 8002948:	f003 031f 	and.w	r3, r3, #31
 800294c:	e018      	b.n	8002980 <HAL_ADC_ConfigChannel+0x2a8>
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002956:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800295a:	fa93 f3a3 	rbit	r3, r3
 800295e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002962:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002966:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800296a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800296e:	2b00      	cmp	r3, #0
 8002970:	d101      	bne.n	8002976 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8002972:	2320      	movs	r3, #32
 8002974:	e004      	b.n	8002980 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8002976:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800297a:	fab3 f383 	clz	r3, r3
 800297e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002980:	429a      	cmp	r2, r3
 8002982:	d106      	bne.n	8002992 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2200      	movs	r2, #0
 800298a:	2101      	movs	r1, #1
 800298c:	4618      	mov	r0, r3
 800298e:	f7ff f903 	bl	8001b98 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2102      	movs	r1, #2
 8002998:	4618      	mov	r0, r3
 800299a:	f7ff f8e7 	bl	8001b6c <LL_ADC_GetOffsetChannel>
 800299e:	4603      	mov	r3, r0
 80029a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d10a      	bne.n	80029be <HAL_ADC_ConfigChannel+0x2e6>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2102      	movs	r1, #2
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7ff f8dc 	bl	8001b6c <LL_ADC_GetOffsetChannel>
 80029b4:	4603      	mov	r3, r0
 80029b6:	0e9b      	lsrs	r3, r3, #26
 80029b8:	f003 021f 	and.w	r2, r3, #31
 80029bc:	e01e      	b.n	80029fc <HAL_ADC_ConfigChannel+0x324>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2102      	movs	r1, #2
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7ff f8d1 	bl	8001b6c <LL_ADC_GetOffsetChannel>
 80029ca:	4603      	mov	r3, r0
 80029cc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80029d4:	fa93 f3a3 	rbit	r3, r3
 80029d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80029dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80029e0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80029e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d101      	bne.n	80029f0 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80029ec:	2320      	movs	r3, #32
 80029ee:	e004      	b.n	80029fa <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80029f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80029f4:	fab3 f383 	clz	r3, r3
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d105      	bne.n	8002a14 <HAL_ADC_ConfigChannel+0x33c>
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	0e9b      	lsrs	r3, r3, #26
 8002a0e:	f003 031f 	and.w	r3, r3, #31
 8002a12:	e016      	b.n	8002a42 <HAL_ADC_ConfigChannel+0x36a>
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002a20:	fa93 f3a3 	rbit	r3, r3
 8002a24:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002a26:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002a28:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002a2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d101      	bne.n	8002a38 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8002a34:	2320      	movs	r3, #32
 8002a36:	e004      	b.n	8002a42 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8002a38:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002a3c:	fab3 f383 	clz	r3, r3
 8002a40:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d106      	bne.n	8002a54 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	2102      	movs	r1, #2
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7ff f8a2 	bl	8001b98 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	2103      	movs	r1, #3
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f7ff f886 	bl	8001b6c <LL_ADC_GetOffsetChannel>
 8002a60:	4603      	mov	r3, r0
 8002a62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d10a      	bne.n	8002a80 <HAL_ADC_ConfigChannel+0x3a8>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	2103      	movs	r1, #3
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7ff f87b 	bl	8001b6c <LL_ADC_GetOffsetChannel>
 8002a76:	4603      	mov	r3, r0
 8002a78:	0e9b      	lsrs	r3, r3, #26
 8002a7a:	f003 021f 	and.w	r2, r3, #31
 8002a7e:	e017      	b.n	8002ab0 <HAL_ADC_ConfigChannel+0x3d8>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2103      	movs	r1, #3
 8002a86:	4618      	mov	r0, r3
 8002a88:	f7ff f870 	bl	8001b6c <LL_ADC_GetOffsetChannel>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a90:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a92:	fa93 f3a3 	rbit	r3, r3
 8002a96:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002a98:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002a9a:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002a9c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d101      	bne.n	8002aa6 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8002aa2:	2320      	movs	r3, #32
 8002aa4:	e003      	b.n	8002aae <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8002aa6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002aa8:	fab3 f383 	clz	r3, r3
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d105      	bne.n	8002ac8 <HAL_ADC_ConfigChannel+0x3f0>
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	0e9b      	lsrs	r3, r3, #26
 8002ac2:	f003 031f 	and.w	r3, r3, #31
 8002ac6:	e011      	b.n	8002aec <HAL_ADC_ConfigChannel+0x414>
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ace:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002ad0:	fa93 f3a3 	rbit	r3, r3
 8002ad4:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002ad6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002ad8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002ada:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d101      	bne.n	8002ae4 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002ae0:	2320      	movs	r3, #32
 8002ae2:	e003      	b.n	8002aec <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002ae4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ae6:	fab3 f383 	clz	r3, r3
 8002aea:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d106      	bne.n	8002afe <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2200      	movs	r2, #0
 8002af6:	2103      	movs	r1, #3
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7ff f84d 	bl	8001b98 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7ff f9e0 	bl	8001ec8 <LL_ADC_IsEnabled>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	f040 8140 	bne.w	8002d90 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6818      	ldr	r0, [r3, #0]
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	6819      	ldr	r1, [r3, #0]
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	f7ff f91d 	bl	8001d5c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	4a8f      	ldr	r2, [pc, #572]	@ (8002d64 <HAL_ADC_ConfigChannel+0x68c>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	f040 8131 	bne.w	8002d90 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d10b      	bne.n	8002b56 <HAL_ADC_ConfigChannel+0x47e>
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	0e9b      	lsrs	r3, r3, #26
 8002b44:	3301      	adds	r3, #1
 8002b46:	f003 031f 	and.w	r3, r3, #31
 8002b4a:	2b09      	cmp	r3, #9
 8002b4c:	bf94      	ite	ls
 8002b4e:	2301      	movls	r3, #1
 8002b50:	2300      	movhi	r3, #0
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	e019      	b.n	8002b8a <HAL_ADC_ConfigChannel+0x4b2>
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b5e:	fa93 f3a3 	rbit	r3, r3
 8002b62:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002b64:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b66:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002b68:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d101      	bne.n	8002b72 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8002b6e:	2320      	movs	r3, #32
 8002b70:	e003      	b.n	8002b7a <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8002b72:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002b74:	fab3 f383 	clz	r3, r3
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	f003 031f 	and.w	r3, r3, #31
 8002b80:	2b09      	cmp	r3, #9
 8002b82:	bf94      	ite	ls
 8002b84:	2301      	movls	r3, #1
 8002b86:	2300      	movhi	r3, #0
 8002b88:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d079      	beq.n	8002c82 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d107      	bne.n	8002baa <HAL_ADC_ConfigChannel+0x4d2>
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	0e9b      	lsrs	r3, r3, #26
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	069b      	lsls	r3, r3, #26
 8002ba4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002ba8:	e015      	b.n	8002bd6 <HAL_ADC_ConfigChannel+0x4fe>
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002bb2:	fa93 f3a3 	rbit	r3, r3
 8002bb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002bb8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002bba:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002bbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d101      	bne.n	8002bc6 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8002bc2:	2320      	movs	r3, #32
 8002bc4:	e003      	b.n	8002bce <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8002bc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bc8:	fab3 f383 	clz	r3, r3
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	3301      	adds	r3, #1
 8002bd0:	069b      	lsls	r3, r3, #26
 8002bd2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d109      	bne.n	8002bf6 <HAL_ADC_ConfigChannel+0x51e>
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	0e9b      	lsrs	r3, r3, #26
 8002be8:	3301      	adds	r3, #1
 8002bea:	f003 031f 	and.w	r3, r3, #31
 8002bee:	2101      	movs	r1, #1
 8002bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8002bf4:	e017      	b.n	8002c26 <HAL_ADC_ConfigChannel+0x54e>
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bfc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002bfe:	fa93 f3a3 	rbit	r3, r3
 8002c02:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002c04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c06:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002c08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d101      	bne.n	8002c12 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8002c0e:	2320      	movs	r3, #32
 8002c10:	e003      	b.n	8002c1a <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8002c12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c14:	fab3 f383 	clz	r3, r3
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	f003 031f 	and.w	r3, r3, #31
 8002c20:	2101      	movs	r1, #1
 8002c22:	fa01 f303 	lsl.w	r3, r1, r3
 8002c26:	ea42 0103 	orr.w	r1, r2, r3
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d10a      	bne.n	8002c4c <HAL_ADC_ConfigChannel+0x574>
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	0e9b      	lsrs	r3, r3, #26
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	f003 021f 	and.w	r2, r3, #31
 8002c42:	4613      	mov	r3, r2
 8002c44:	005b      	lsls	r3, r3, #1
 8002c46:	4413      	add	r3, r2
 8002c48:	051b      	lsls	r3, r3, #20
 8002c4a:	e018      	b.n	8002c7e <HAL_ADC_ConfigChannel+0x5a6>
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c54:	fa93 f3a3 	rbit	r3, r3
 8002c58:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002c5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002c5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d101      	bne.n	8002c68 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002c64:	2320      	movs	r3, #32
 8002c66:	e003      	b.n	8002c70 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002c68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c6a:	fab3 f383 	clz	r3, r3
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	3301      	adds	r3, #1
 8002c72:	f003 021f 	and.w	r2, r3, #31
 8002c76:	4613      	mov	r3, r2
 8002c78:	005b      	lsls	r3, r3, #1
 8002c7a:	4413      	add	r3, r2
 8002c7c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c7e:	430b      	orrs	r3, r1
 8002c80:	e081      	b.n	8002d86 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d107      	bne.n	8002c9e <HAL_ADC_ConfigChannel+0x5c6>
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	0e9b      	lsrs	r3, r3, #26
 8002c94:	3301      	adds	r3, #1
 8002c96:	069b      	lsls	r3, r3, #26
 8002c98:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c9c:	e015      	b.n	8002cca <HAL_ADC_ConfigChannel+0x5f2>
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ca6:	fa93 f3a3 	rbit	r3, r3
 8002caa:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002cac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cae:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002cb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d101      	bne.n	8002cba <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8002cb6:	2320      	movs	r3, #32
 8002cb8:	e003      	b.n	8002cc2 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8002cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cbc:	fab3 f383 	clz	r3, r3
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	069b      	lsls	r3, r3, #26
 8002cc6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d109      	bne.n	8002cea <HAL_ADC_ConfigChannel+0x612>
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	0e9b      	lsrs	r3, r3, #26
 8002cdc:	3301      	adds	r3, #1
 8002cde:	f003 031f 	and.w	r3, r3, #31
 8002ce2:	2101      	movs	r1, #1
 8002ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ce8:	e017      	b.n	8002d1a <HAL_ADC_ConfigChannel+0x642>
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf0:	6a3b      	ldr	r3, [r7, #32]
 8002cf2:	fa93 f3a3 	rbit	r3, r3
 8002cf6:	61fb      	str	r3, [r7, #28]
  return result;
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d101      	bne.n	8002d06 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8002d02:	2320      	movs	r3, #32
 8002d04:	e003      	b.n	8002d0e <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8002d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d08:	fab3 f383 	clz	r3, r3
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	3301      	adds	r3, #1
 8002d10:	f003 031f 	and.w	r3, r3, #31
 8002d14:	2101      	movs	r1, #1
 8002d16:	fa01 f303 	lsl.w	r3, r1, r3
 8002d1a:	ea42 0103 	orr.w	r1, r2, r3
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d10d      	bne.n	8002d46 <HAL_ADC_ConfigChannel+0x66e>
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	0e9b      	lsrs	r3, r3, #26
 8002d30:	3301      	adds	r3, #1
 8002d32:	f003 021f 	and.w	r2, r3, #31
 8002d36:	4613      	mov	r3, r2
 8002d38:	005b      	lsls	r3, r3, #1
 8002d3a:	4413      	add	r3, r2
 8002d3c:	3b1e      	subs	r3, #30
 8002d3e:	051b      	lsls	r3, r3, #20
 8002d40:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002d44:	e01e      	b.n	8002d84 <HAL_ADC_ConfigChannel+0x6ac>
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	fa93 f3a3 	rbit	r3, r3
 8002d52:	613b      	str	r3, [r7, #16]
  return result;
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d104      	bne.n	8002d68 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8002d5e:	2320      	movs	r3, #32
 8002d60:	e006      	b.n	8002d70 <HAL_ADC_ConfigChannel+0x698>
 8002d62:	bf00      	nop
 8002d64:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	fab3 f383 	clz	r3, r3
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	3301      	adds	r3, #1
 8002d72:	f003 021f 	and.w	r2, r3, #31
 8002d76:	4613      	mov	r3, r2
 8002d78:	005b      	lsls	r3, r3, #1
 8002d7a:	4413      	add	r3, r2
 8002d7c:	3b1e      	subs	r3, #30
 8002d7e:	051b      	lsls	r3, r3, #20
 8002d80:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d84:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002d86:	683a      	ldr	r2, [r7, #0]
 8002d88:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	f7fe ffba 	bl	8001d04 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	4b3f      	ldr	r3, [pc, #252]	@ (8002e94 <HAL_ADC_ConfigChannel+0x7bc>)
 8002d96:	4013      	ands	r3, r2
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d071      	beq.n	8002e80 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d9c:	483e      	ldr	r0, [pc, #248]	@ (8002e98 <HAL_ADC_ConfigChannel+0x7c0>)
 8002d9e:	f7fe feb3 	bl	8001b08 <LL_ADC_GetCommonPathInternalCh>
 8002da2:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a3c      	ldr	r2, [pc, #240]	@ (8002e9c <HAL_ADC_ConfigChannel+0x7c4>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d004      	beq.n	8002dba <HAL_ADC_ConfigChannel+0x6e2>
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a3a      	ldr	r2, [pc, #232]	@ (8002ea0 <HAL_ADC_ConfigChannel+0x7c8>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d127      	bne.n	8002e0a <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002dba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002dbe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d121      	bne.n	8002e0a <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002dce:	d157      	bne.n	8002e80 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002dd0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002dd4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002dd8:	4619      	mov	r1, r3
 8002dda:	482f      	ldr	r0, [pc, #188]	@ (8002e98 <HAL_ADC_ConfigChannel+0x7c0>)
 8002ddc:	f7fe fe81 	bl	8001ae2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002de0:	4b30      	ldr	r3, [pc, #192]	@ (8002ea4 <HAL_ADC_ConfigChannel+0x7cc>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	099b      	lsrs	r3, r3, #6
 8002de6:	4a30      	ldr	r2, [pc, #192]	@ (8002ea8 <HAL_ADC_ConfigChannel+0x7d0>)
 8002de8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dec:	099b      	lsrs	r3, r3, #6
 8002dee:	1c5a      	adds	r2, r3, #1
 8002df0:	4613      	mov	r3, r2
 8002df2:	005b      	lsls	r3, r3, #1
 8002df4:	4413      	add	r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002dfa:	e002      	b.n	8002e02 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	3b01      	subs	r3, #1
 8002e00:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d1f9      	bne.n	8002dfc <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e08:	e03a      	b.n	8002e80 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a27      	ldr	r2, [pc, #156]	@ (8002eac <HAL_ADC_ConfigChannel+0x7d4>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d113      	bne.n	8002e3c <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002e14:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002e18:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d10d      	bne.n	8002e3c <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a22      	ldr	r2, [pc, #136]	@ (8002eb0 <HAL_ADC_ConfigChannel+0x7d8>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d02a      	beq.n	8002e80 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e2a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002e2e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e32:	4619      	mov	r1, r3
 8002e34:	4818      	ldr	r0, [pc, #96]	@ (8002e98 <HAL_ADC_ConfigChannel+0x7c0>)
 8002e36:	f7fe fe54 	bl	8001ae2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e3a:	e021      	b.n	8002e80 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a1c      	ldr	r2, [pc, #112]	@ (8002eb4 <HAL_ADC_ConfigChannel+0x7dc>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d11c      	bne.n	8002e80 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002e46:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002e4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d116      	bne.n	8002e80 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a16      	ldr	r2, [pc, #88]	@ (8002eb0 <HAL_ADC_ConfigChannel+0x7d8>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d011      	beq.n	8002e80 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e5c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002e60:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002e64:	4619      	mov	r1, r3
 8002e66:	480c      	ldr	r0, [pc, #48]	@ (8002e98 <HAL_ADC_ConfigChannel+0x7c0>)
 8002e68:	f7fe fe3b 	bl	8001ae2 <LL_ADC_SetCommonPathInternalCh>
 8002e6c:	e008      	b.n	8002e80 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e72:	f043 0220 	orr.w	r2, r3, #32
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002e88:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	37d8      	adds	r7, #216	@ 0xd8
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	80080000 	.word	0x80080000
 8002e98:	50000300 	.word	0x50000300
 8002e9c:	c3210000 	.word	0xc3210000
 8002ea0:	90c00010 	.word	0x90c00010
 8002ea4:	20000000 	.word	0x20000000
 8002ea8:	053e2d63 	.word	0x053e2d63
 8002eac:	c7520000 	.word	0xc7520000
 8002eb0:	50000100 	.word	0x50000100
 8002eb4:	cb840000 	.word	0xcb840000

08002eb8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7fe fffd 	bl	8001ec8 <LL_ADC_IsEnabled>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d169      	bne.n	8002fa8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	689a      	ldr	r2, [r3, #8]
 8002eda:	4b36      	ldr	r3, [pc, #216]	@ (8002fb4 <ADC_Enable+0xfc>)
 8002edc:	4013      	ands	r3, r2
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d00d      	beq.n	8002efe <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ee6:	f043 0210 	orr.w	r2, r3, #16
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ef2:	f043 0201 	orr.w	r2, r3, #1
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e055      	b.n	8002faa <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4618      	mov	r0, r3
 8002f04:	f7fe ffb8 	bl	8001e78 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002f08:	482b      	ldr	r0, [pc, #172]	@ (8002fb8 <ADC_Enable+0x100>)
 8002f0a:	f7fe fdfd 	bl	8001b08 <LL_ADC_GetCommonPathInternalCh>
 8002f0e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002f10:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d013      	beq.n	8002f40 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f18:	4b28      	ldr	r3, [pc, #160]	@ (8002fbc <ADC_Enable+0x104>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	099b      	lsrs	r3, r3, #6
 8002f1e:	4a28      	ldr	r2, [pc, #160]	@ (8002fc0 <ADC_Enable+0x108>)
 8002f20:	fba2 2303 	umull	r2, r3, r2, r3
 8002f24:	099b      	lsrs	r3, r3, #6
 8002f26:	1c5a      	adds	r2, r3, #1
 8002f28:	4613      	mov	r3, r2
 8002f2a:	005b      	lsls	r3, r3, #1
 8002f2c:	4413      	add	r3, r2
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002f32:	e002      	b.n	8002f3a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	3b01      	subs	r3, #1
 8002f38:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d1f9      	bne.n	8002f34 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002f40:	f7fe fdb0 	bl	8001aa4 <HAL_GetTick>
 8002f44:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f46:	e028      	b.n	8002f9a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7fe ffbb 	bl	8001ec8 <LL_ADC_IsEnabled>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d104      	bne.n	8002f62 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f7fe ff8b 	bl	8001e78 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002f62:	f7fe fd9f 	bl	8001aa4 <HAL_GetTick>
 8002f66:	4602      	mov	r2, r0
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d914      	bls.n	8002f9a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0301 	and.w	r3, r3, #1
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d00d      	beq.n	8002f9a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f82:	f043 0210 	orr.w	r2, r3, #16
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f8e:	f043 0201 	orr.w	r2, r3, #1
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e007      	b.n	8002faa <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0301 	and.w	r3, r3, #1
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d1cf      	bne.n	8002f48 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3710      	adds	r7, #16
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	8000003f 	.word	0x8000003f
 8002fb8:	50000300 	.word	0x50000300
 8002fbc:	20000000 	.word	0x20000000
 8002fc0:	053e2d63 	.word	0x053e2d63

08002fc4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f7fe ff8c 	bl	8001eee <LL_ADC_IsDisableOngoing>
 8002fd6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f7fe ff73 	bl	8001ec8 <LL_ADC_IsEnabled>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d047      	beq.n	8003078 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d144      	bne.n	8003078 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	f003 030d 	and.w	r3, r3, #13
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d10c      	bne.n	8003016 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4618      	mov	r0, r3
 8003002:	f7fe ff4d 	bl	8001ea0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	2203      	movs	r2, #3
 800300c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800300e:	f7fe fd49 	bl	8001aa4 <HAL_GetTick>
 8003012:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003014:	e029      	b.n	800306a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800301a:	f043 0210 	orr.w	r2, r3, #16
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003026:	f043 0201 	orr.w	r2, r3, #1
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e023      	b.n	800307a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003032:	f7fe fd37 	bl	8001aa4 <HAL_GetTick>
 8003036:	4602      	mov	r2, r0
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	2b02      	cmp	r3, #2
 800303e:	d914      	bls.n	800306a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f003 0301 	and.w	r3, r3, #1
 800304a:	2b00      	cmp	r3, #0
 800304c:	d00d      	beq.n	800306a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003052:	f043 0210 	orr.w	r2, r3, #16
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800305e:	f043 0201 	orr.w	r2, r3, #1
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e007      	b.n	800307a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	f003 0301 	and.w	r3, r3, #1
 8003074:	2b00      	cmp	r3, #0
 8003076:	d1dc      	bne.n	8003032 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003078:	2300      	movs	r3, #0
}
 800307a:	4618      	mov	r0, r3
 800307c:	3710      	adds	r7, #16
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}

08003082 <LL_ADC_SetCommonPathInternalCh>:
{
 8003082:	b480      	push	{r7}
 8003084:	b083      	sub	sp, #12
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
 800308a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	431a      	orrs	r2, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	609a      	str	r2, [r3, #8]
}
 800309c:	bf00      	nop
 800309e:	370c      	adds	r7, #12
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr

080030a8 <LL_ADC_GetCommonPathInternalCh>:
{
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	370c      	adds	r7, #12
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr

080030c4 <LL_ADC_SetOffset>:
{
 80030c4:	b480      	push	{r7}
 80030c6:	b087      	sub	sp, #28
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	60f8      	str	r0, [r7, #12]
 80030cc:	60b9      	str	r1, [r7, #8]
 80030ce:	607a      	str	r2, [r7, #4]
 80030d0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	3360      	adds	r3, #96	@ 0x60
 80030d6:	461a      	mov	r2, r3
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	4413      	add	r3, r2
 80030de:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	4b08      	ldr	r3, [pc, #32]	@ (8003108 <LL_ADC_SetOffset+0x44>)
 80030e6:	4013      	ands	r3, r2
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80030ee:	683a      	ldr	r2, [r7, #0]
 80030f0:	430a      	orrs	r2, r1
 80030f2:	4313      	orrs	r3, r2
 80030f4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	601a      	str	r2, [r3, #0]
}
 80030fc:	bf00      	nop
 80030fe:	371c      	adds	r7, #28
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr
 8003108:	03fff000 	.word	0x03fff000

0800310c <LL_ADC_GetOffsetChannel>:
{
 800310c:	b480      	push	{r7}
 800310e:	b085      	sub	sp, #20
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	3360      	adds	r3, #96	@ 0x60
 800311a:	461a      	mov	r2, r3
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	4413      	add	r3, r2
 8003122:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800312c:	4618      	mov	r0, r3
 800312e:	3714      	adds	r7, #20
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr

08003138 <LL_ADC_SetOffsetState>:
{
 8003138:	b480      	push	{r7}
 800313a:	b087      	sub	sp, #28
 800313c:	af00      	add	r7, sp, #0
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	3360      	adds	r3, #96	@ 0x60
 8003148:	461a      	mov	r2, r3
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	4413      	add	r3, r2
 8003150:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	431a      	orrs	r2, r3
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	601a      	str	r2, [r3, #0]
}
 8003162:	bf00      	nop
 8003164:	371c      	adds	r7, #28
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr

0800316e <LL_ADC_SetOffsetSign>:
{
 800316e:	b480      	push	{r7}
 8003170:	b087      	sub	sp, #28
 8003172:	af00      	add	r7, sp, #0
 8003174:	60f8      	str	r0, [r7, #12]
 8003176:	60b9      	str	r1, [r7, #8]
 8003178:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	3360      	adds	r3, #96	@ 0x60
 800317e:	461a      	mov	r2, r3
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	4413      	add	r3, r2
 8003186:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	431a      	orrs	r2, r3
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	601a      	str	r2, [r3, #0]
}
 8003198:	bf00      	nop
 800319a:	371c      	adds	r7, #28
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr

080031a4 <LL_ADC_SetOffsetSaturation>:
{
 80031a4:	b480      	push	{r7}
 80031a6:	b087      	sub	sp, #28
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	60b9      	str	r1, [r7, #8]
 80031ae:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	3360      	adds	r3, #96	@ 0x60
 80031b4:	461a      	mov	r2, r3
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	4413      	add	r3, r2
 80031bc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	431a      	orrs	r2, r3
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	601a      	str	r2, [r3, #0]
}
 80031ce:	bf00      	nop
 80031d0:	371c      	adds	r7, #28
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr

080031da <LL_ADC_SetSamplingTimeCommonConfig>:
{
 80031da:	b480      	push	{r7}
 80031dc:	b083      	sub	sp, #12
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
 80031e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	695b      	ldr	r3, [r3, #20]
 80031e8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	431a      	orrs	r2, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	615a      	str	r2, [r3, #20]
}
 80031f4:	bf00      	nop
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr

08003200 <LL_ADC_INJ_GetTrigAuto>:
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
}
 8003210:	4618      	mov	r0, r3
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <LL_ADC_SetChannelSamplingTime>:
{
 800321c:	b480      	push	{r7}
 800321e:	b087      	sub	sp, #28
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	3314      	adds	r3, #20
 800322c:	461a      	mov	r2, r3
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	0e5b      	lsrs	r3, r3, #25
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	f003 0304 	and.w	r3, r3, #4
 8003238:	4413      	add	r3, r2
 800323a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	0d1b      	lsrs	r3, r3, #20
 8003244:	f003 031f 	and.w	r3, r3, #31
 8003248:	2107      	movs	r1, #7
 800324a:	fa01 f303 	lsl.w	r3, r1, r3
 800324e:	43db      	mvns	r3, r3
 8003250:	401a      	ands	r2, r3
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	0d1b      	lsrs	r3, r3, #20
 8003256:	f003 031f 	and.w	r3, r3, #31
 800325a:	6879      	ldr	r1, [r7, #4]
 800325c:	fa01 f303 	lsl.w	r3, r1, r3
 8003260:	431a      	orrs	r2, r3
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	601a      	str	r2, [r3, #0]
}
 8003266:	bf00      	nop
 8003268:	371c      	adds	r7, #28
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
	...

08003274 <LL_ADC_SetChannelSingleDiff>:
{
 8003274:	b480      	push	{r7}
 8003276:	b085      	sub	sp, #20
 8003278:	af00      	add	r7, sp, #0
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800328c:	43db      	mvns	r3, r3
 800328e:	401a      	ands	r2, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f003 0318 	and.w	r3, r3, #24
 8003296:	4908      	ldr	r1, [pc, #32]	@ (80032b8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003298:	40d9      	lsrs	r1, r3
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	400b      	ands	r3, r1
 800329e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032a2:	431a      	orrs	r2, r3
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 80032aa:	bf00      	nop
 80032ac:	3714      	adds	r7, #20
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop
 80032b8:	0007ffff 	.word	0x0007ffff

080032bc <LL_ADC_GetMultimode>:
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f003 031f 	and.w	r3, r3, #31
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	370c      	adds	r7, #12
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr

080032d8 <LL_ADC_IsEnabled>:
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	f003 0301 	and.w	r3, r3, #1
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d101      	bne.n	80032f0 <LL_ADC_IsEnabled+0x18>
 80032ec:	2301      	movs	r3, #1
 80032ee:	e000      	b.n	80032f2 <LL_ADC_IsEnabled+0x1a>
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	370c      	adds	r7, #12
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr

080032fe <LL_ADC_StartCalibration>:
{
 80032fe:	b480      	push	{r7}
 8003300:	b083      	sub	sp, #12
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
 8003306:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8003310:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003314:	683a      	ldr	r2, [r7, #0]
 8003316:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800331a:	4313      	orrs	r3, r2
 800331c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	609a      	str	r2, [r3, #8]
}
 8003324:	bf00      	nop
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr

08003330 <LL_ADC_IsCalibrationOnGoing>:
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003340:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003344:	d101      	bne.n	800334a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003346:	2301      	movs	r3, #1
 8003348:	e000      	b.n	800334c <LL_ADC_IsCalibrationOnGoing+0x1c>
 800334a:	2300      	movs	r3, #0
}
 800334c:	4618      	mov	r0, r3
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <LL_ADC_REG_IsConversionOngoing>:
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f003 0304 	and.w	r3, r3, #4
 8003368:	2b04      	cmp	r3, #4
 800336a:	d101      	bne.n	8003370 <LL_ADC_REG_IsConversionOngoing+0x18>
 800336c:	2301      	movs	r3, #1
 800336e:	e000      	b.n	8003372 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003370:	2300      	movs	r3, #0
}
 8003372:	4618      	mov	r0, r3
 8003374:	370c      	adds	r7, #12
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr

0800337e <LL_ADC_INJ_StartConversion>:
{
 800337e:	b480      	push	{r7}
 8003380:	b083      	sub	sp, #12
 8003382:	af00      	add	r7, sp, #0
 8003384:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800338e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003392:	f043 0208 	orr.w	r2, r3, #8
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	609a      	str	r2, [r3, #8]
}
 800339a:	bf00      	nop
 800339c:	370c      	adds	r7, #12
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr

080033a6 <LL_ADC_INJ_IsConversionOngoing>:
{
 80033a6:	b480      	push	{r7}
 80033a8:	b083      	sub	sp, #12
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	f003 0308 	and.w	r3, r3, #8
 80033b6:	2b08      	cmp	r3, #8
 80033b8:	d101      	bne.n	80033be <LL_ADC_INJ_IsConversionOngoing+0x18>
 80033ba:	2301      	movs	r3, #1
 80033bc:	e000      	b.n	80033c0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80033be:	2300      	movs	r3, #0
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	370c      	adds	r7, #12
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr

080033cc <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80033d6:	2300      	movs	r3, #0
 80033d8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d101      	bne.n	80033e8 <HAL_ADCEx_Calibration_Start+0x1c>
 80033e4:	2302      	movs	r3, #2
 80033e6:	e04d      	b.n	8003484 <HAL_ADCEx_Calibration_Start+0xb8>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f7ff fde7 	bl	8002fc4 <ADC_Disable>
 80033f6:	4603      	mov	r3, r0
 80033f8:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80033fa:	7bfb      	ldrb	r3, [r7, #15]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d136      	bne.n	800346e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003404:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003408:	f023 0302 	bic.w	r3, r3, #2
 800340c:	f043 0202 	orr.w	r2, r3, #2
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	6839      	ldr	r1, [r7, #0]
 800341a:	4618      	mov	r0, r3
 800341c:	f7ff ff6f 	bl	80032fe <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003420:	e014      	b.n	800344c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	3301      	adds	r3, #1
 8003426:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	4a18      	ldr	r2, [pc, #96]	@ (800348c <HAL_ADCEx_Calibration_Start+0xc0>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d90d      	bls.n	800344c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003434:	f023 0312 	bic.w	r3, r3, #18
 8003438:	f043 0210 	orr.w	r2, r3, #16
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e01b      	b.n	8003484 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4618      	mov	r0, r3
 8003452:	f7ff ff6d 	bl	8003330 <LL_ADC_IsCalibrationOnGoing>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d1e2      	bne.n	8003422 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003460:	f023 0303 	bic.w	r3, r3, #3
 8003464:	f043 0201 	orr.w	r2, r3, #1
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800346c:	e005      	b.n	800347a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003472:	f043 0210 	orr.w	r2, r3, #16
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003482:	7bfb      	ldrb	r3, [r7, #15]
}
 8003484:	4618      	mov	r0, r3
 8003486:	3710      	adds	r7, #16
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}
 800348c:	0004de01 	.word	0x0004de01

08003490 <HAL_ADCEx_InjectedStart>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef *hadc)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b086      	sub	sp, #24
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003498:	4853      	ldr	r0, [pc, #332]	@ (80035e8 <HAL_ADCEx_InjectedStart+0x158>)
 800349a:	f7ff ff0f 	bl	80032bc <LL_ADC_GetMultimode>
 800349e:	6178      	str	r0, [r7, #20]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4618      	mov	r0, r3
 80034a6:	f7ff ff7e 	bl	80033a6 <LL_ADC_INJ_IsConversionOngoing>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d001      	beq.n	80034b4 <HAL_ADCEx_InjectedStart+0x24>
  {
    return HAL_BUSY;
 80034b0:	2302      	movs	r3, #2
 80034b2:	e094      	b.n	80035de <HAL_ADCEx_InjectedStart+0x14e>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80034be:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034c6:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d10a      	bne.n	80034e4 <HAL_ADCEx_InjectedStart+0x54>
        && (tmp_config_injected_queue == 0UL)
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d107      	bne.n	80034e4 <HAL_ADCEx_InjectedStart+0x54>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034d8:	f043 0220 	orr.w	r2, r3, #32
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e07c      	b.n	80035de <HAL_ADCEx_InjectedStart+0x14e>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d101      	bne.n	80034f2 <HAL_ADCEx_InjectedStart+0x62>
 80034ee:	2302      	movs	r3, #2
 80034f0:	e075      	b.n	80035de <HAL_ADCEx_InjectedStart+0x14e>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2201      	movs	r2, #1
 80034f6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f7ff fcdc 	bl	8002eb8 <ADC_Enable>
 8003500:	4603      	mov	r3, r0
 8003502:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003504:	7bfb      	ldrb	r3, [r7, #15]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d164      	bne.n	80035d4 <HAL_ADCEx_InjectedStart+0x144>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800350e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003512:	2b00      	cmp	r3, #0
 8003514:	d006      	beq.n	8003524 <HAL_ADCEx_InjectedStart+0x94>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800351a:	f023 0208 	bic.w	r2, r3, #8
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	661a      	str	r2, [r3, #96]	@ 0x60
 8003522:	e002      	b.n	800352a <HAL_ADCEx_InjectedStart+0x9a>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800352e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003532:	f023 0301 	bic.w	r3, r3, #1
 8003536:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a2a      	ldr	r2, [pc, #168]	@ (80035ec <HAL_ADCEx_InjectedStart+0x15c>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d002      	beq.n	800354e <HAL_ADCEx_InjectedStart+0xbe>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	e001      	b.n	8003552 <HAL_ADCEx_InjectedStart+0xc2>
 800354e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	6812      	ldr	r2, [r2, #0]
 8003556:	4293      	cmp	r3, r2
 8003558:	d002      	beq.n	8003560 <HAL_ADCEx_InjectedStart+0xd0>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d105      	bne.n	800356c <HAL_ADCEx_InjectedStart+0xdc>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003564:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2260      	movs	r2, #96	@ 0x60
 8003572:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a1a      	ldr	r2, [pc, #104]	@ (80035ec <HAL_ADCEx_InjectedStart+0x15c>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d002      	beq.n	800358c <HAL_ADCEx_InjectedStart+0xfc>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	e001      	b.n	8003590 <HAL_ADCEx_InjectedStart+0x100>
 800358c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	6812      	ldr	r2, [r2, #0]
 8003594:	4293      	cmp	r3, r2
 8003596:	d008      	beq.n	80035aa <HAL_ADCEx_InjectedStart+0x11a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d005      	beq.n	80035aa <HAL_ADCEx_InjectedStart+0x11a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	2b06      	cmp	r3, #6
 80035a2:	d002      	beq.n	80035aa <HAL_ADCEx_InjectedStart+0x11a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	2b07      	cmp	r3, #7
 80035a8:	d10d      	bne.n	80035c6 <HAL_ADCEx_InjectedStart+0x136>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f7ff fe26 	bl	8003200 <LL_ADC_INJ_GetTrigAuto>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d110      	bne.n	80035dc <HAL_ADCEx_InjectedStart+0x14c>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4618      	mov	r0, r3
 80035c0:	f7ff fedd 	bl	800337e <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 80035c4:	e00a      	b.n	80035dc <HAL_ADCEx_InjectedStart+0x14c>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035ca:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80035d2:	e003      	b.n	80035dc <HAL_ADCEx_InjectedStart+0x14c>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 80035dc:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3718      	adds	r7, #24
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	50000300 	.word	0x50000300
 80035ec:	50000100 	.word	0x50000100

080035f0 <HAL_ADCEx_InjectedStart_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef *hadc)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b086      	sub	sp, #24
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80035f8:	486e      	ldr	r0, [pc, #440]	@ (80037b4 <HAL_ADCEx_InjectedStart_IT+0x1c4>)
 80035fa:	f7ff fe5f 	bl	80032bc <LL_ADC_GetMultimode>
 80035fe:	6178      	str	r0, [r7, #20]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4618      	mov	r0, r3
 8003606:	f7ff fece 	bl	80033a6 <LL_ADC_INJ_IsConversionOngoing>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d001      	beq.n	8003614 <HAL_ADCEx_InjectedStart_IT+0x24>
  {
    return HAL_BUSY;
 8003610:	2302      	movs	r3, #2
 8003612:	e0ca      	b.n	80037aa <HAL_ADCEx_InjectedStart_IT+0x1ba>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800361e:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003626:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800362a:	2b00      	cmp	r3, #0
 800362c:	d10a      	bne.n	8003644 <HAL_ADCEx_InjectedStart_IT+0x54>
        && (tmp_config_injected_queue == 0UL)
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d107      	bne.n	8003644 <HAL_ADCEx_InjectedStart_IT+0x54>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003638:	f043 0220 	orr.w	r2, r3, #32
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e0b2      	b.n	80037aa <HAL_ADCEx_InjectedStart_IT+0x1ba>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800364a:	2b01      	cmp	r3, #1
 800364c:	d101      	bne.n	8003652 <HAL_ADCEx_InjectedStart_IT+0x62>
 800364e:	2302      	movs	r3, #2
 8003650:	e0ab      	b.n	80037aa <HAL_ADCEx_InjectedStart_IT+0x1ba>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2201      	movs	r2, #1
 8003656:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f7ff fc2c 	bl	8002eb8 <ADC_Enable>
 8003660:	4603      	mov	r3, r0
 8003662:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003664:	7bfb      	ldrb	r3, [r7, #15]
 8003666:	2b00      	cmp	r3, #0
 8003668:	f040 809a 	bne.w	80037a0 <HAL_ADCEx_InjectedStart_IT+0x1b0>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003670:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003674:	2b00      	cmp	r3, #0
 8003676:	d006      	beq.n	8003686 <HAL_ADCEx_InjectedStart_IT+0x96>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800367c:	f023 0208 	bic.w	r2, r3, #8
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	661a      	str	r2, [r3, #96]	@ 0x60
 8003684:	e002      	b.n	800368c <HAL_ADCEx_InjectedStart_IT+0x9c>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003690:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003694:	f023 0301 	bic.w	r3, r3, #1
 8003698:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a44      	ldr	r2, [pc, #272]	@ (80037b8 <HAL_ADCEx_InjectedStart_IT+0x1c8>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d002      	beq.n	80036b0 <HAL_ADCEx_InjectedStart_IT+0xc0>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	e001      	b.n	80036b4 <HAL_ADCEx_InjectedStart_IT+0xc4>
 80036b0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	6812      	ldr	r2, [r2, #0]
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d002      	beq.n	80036c2 <HAL_ADCEx_InjectedStart_IT+0xd2>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d105      	bne.n	80036ce <HAL_ADCEx_InjectedStart_IT+0xde>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036c6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2260      	movs	r2, #96	@ 0x60
 80036d4:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      /* Enable ADC Injected context queue overflow interrupt if this feature   */
      /* is enabled.                                                            */
      if ((hadc->Instance->CFGR & ADC_CFGR_JQM) != 0UL)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d007      	beq.n	80036fc <HAL_ADCEx_InjectedStart_IT+0x10c>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_FLAG_JQOVF);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	685a      	ldr	r2, [r3, #4]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80036fa:	605a      	str	r2, [r3, #4]
      }

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	699b      	ldr	r3, [r3, #24]
 8003700:	2b08      	cmp	r3, #8
 8003702:	d110      	bne.n	8003726 <HAL_ADCEx_InjectedStart_IT+0x136>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	685a      	ldr	r2, [r3, #4]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f022 0220 	bic.w	r2, r2, #32
 8003712:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	685a      	ldr	r2, [r3, #4]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003722:	605a      	str	r2, [r3, #4]
          break;
 8003724:	e010      	b.n	8003748 <HAL_ADCEx_InjectedStart_IT+0x158>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	685a      	ldr	r2, [r3, #4]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003734:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	685a      	ldr	r2, [r3, #4]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f042 0220 	orr.w	r2, r2, #32
 8003744:	605a      	str	r2, [r3, #4]
          break;
 8003746:	bf00      	nop
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a1a      	ldr	r2, [pc, #104]	@ (80037b8 <HAL_ADCEx_InjectedStart_IT+0x1c8>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d002      	beq.n	8003758 <HAL_ADCEx_InjectedStart_IT+0x168>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	e001      	b.n	800375c <HAL_ADCEx_InjectedStart_IT+0x16c>
 8003758:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	6812      	ldr	r2, [r2, #0]
 8003760:	4293      	cmp	r3, r2
 8003762:	d008      	beq.n	8003776 <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d005      	beq.n	8003776 <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	2b06      	cmp	r3, #6
 800376e:	d002      	beq.n	8003776 <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	2b07      	cmp	r3, #7
 8003774:	d10d      	bne.n	8003792 <HAL_ADCEx_InjectedStart_IT+0x1a2>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4618      	mov	r0, r3
 800377c:	f7ff fd40 	bl	8003200 <LL_ADC_INJ_GetTrigAuto>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d110      	bne.n	80037a8 <HAL_ADCEx_InjectedStart_IT+0x1b8>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4618      	mov	r0, r3
 800378c:	f7ff fdf7 	bl	800337e <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8003790:	e00a      	b.n	80037a8 <HAL_ADCEx_InjectedStart_IT+0x1b8>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003796:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800379e:	e003      	b.n	80037a8 <HAL_ADCEx_InjectedStart_IT+0x1b8>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 80037a8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3718      	adds	r7, #24
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	50000300 	.word	0x50000300
 80037b8:	50000100 	.word	0x50000100

080037bc <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80037c4:	bf00      	nop
 80037c6:	370c      	adds	r7, #12
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr

080037d0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80037d8:	bf00      	nop
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80037ec:	bf00      	nop
 80037ee:	370c      	adds	r7, #12
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr

080037f8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003800:	bf00      	nop
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <HAL_ADCEx_InjectedConfigChannel>:
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc,
                                                  const ADC_InjectionConfTypeDef *pConfigInjected)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b0b6      	sub	sp, #216	@ 0xd8
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003816:	2300      	movs	r3, #0
 8003818:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 800381c:	2300      	movs	r3, #0
 800381e:	60bb      	str	r3, [r7, #8]

  uint32_t tmp_jsqr_context_queue_being_built = 0U;
 8003820:	2300      	movs	r3, #0
 8003822:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800382c:	2b01      	cmp	r3, #1
 800382e:	d102      	bne.n	8003836 <HAL_ADCEx_InjectedConfigChannel+0x2a>
 8003830:	2302      	movs	r3, #2
 8003832:	f000 bcb5 	b.w	80041a0 <HAL_ADCEx_InjectedConfigChannel+0x994>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2201      	movs	r2, #1
 800383a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	695b      	ldr	r3, [r3, #20]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d003      	beq.n	800384e <HAL_ADCEx_InjectedConfigChannel+0x42>
      (pConfigInjected->InjectedNbrOfConversion == 1U))
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	6a1b      	ldr	r3, [r3, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 800384a:	2b01      	cmp	r3, #1
 800384c:	d130      	bne.n	80038b0 <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	2b09      	cmp	r3, #9
 8003854:	d179      	bne.n	800394a <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800385a:	2b00      	cmp	r3, #0
 800385c:	d010      	beq.n	8003880 <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	0e9b      	lsrs	r3, r3, #26
 8003864:	025b      	lsls	r3, r3, #9
 8003866:	f403 5278 	and.w	r2, r3, #15872	@ 0x3e00
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800386e:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 8003872:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8003878:	4313      	orrs	r3, r2
 800387a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800387e:	e007      	b.n	8003890 <HAL_ADCEx_InjectedConfigChannel+0x84>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	0e9b      	lsrs	r3, r3, #26
 8003886:	025b      	lsls	r3, r3, #9
 8003888:	f403 5378 	and.w	r3, r3, #15872	@ 0x3e00
 800388c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_jsqr_context_queue_being_built);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003896:	4b84      	ldr	r3, [pc, #528]	@ (8003aa8 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8003898:	4013      	ands	r3, r2
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	6812      	ldr	r2, [r2, #0]
 800389e:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80038a2:	430b      	orrs	r3, r1
 80038a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_jsqr_context_queue_being_built;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80038ac:	665a      	str	r2, [r3, #100]	@ 0x64
    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 80038ae:	e04c      	b.n	800394a <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d11d      	bne.n	80038f4 <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = pConfigInjected->InjectedNbrOfConversion;
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	6a1a      	ldr	r2, [r3, #32]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	669a      	str	r2, [r3, #104]	@ 0x68
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00d      	beq.n	80038ea <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	6a1b      	ldr	r3, [r3, #32]
 80038d2:	1e5a      	subs	r2, r3, #1
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038d8:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 80038dc:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80038e8:	e004      	b.n	80038f4 <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U));
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	6a1b      	ldr	r3, [r3, #32]
 80038ee:	3b01      	subs	r3, #1
 80038f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, pConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built |= ADC_JSQR_RK(pConfigInjected->InjectedChannel, pConfigInjected->InjectedRank);
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	0e9b      	lsrs	r3, r3, #26
 80038fa:	f003 021f 	and.w	r2, r3, #31
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	f003 031f 	and.w	r3, r3, #31
 8003906:	fa02 f303 	lsl.w	r3, r2, r3
 800390a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800390e:	4313      	orrs	r3, r2
 8003910:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003918:	1e5a      	subs	r2, r3, #1
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	669a      	str	r2, [r3, #104]	@ 0x68

    /* 3. tmp_jsqr_context_queue_being_built is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003922:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003926:	431a      	orrs	r2, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	665a      	str	r2, [r3, #100]	@ 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003930:	2b00      	cmp	r3, #0
 8003932:	d10a      	bne.n	800394a <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800393a:	4b5b      	ldr	r3, [pc, #364]	@ (8003aa8 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 800393c:	4013      	ands	r3, r2
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	6e51      	ldr	r1, [r2, #100]	@ 0x64
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	6812      	ldr	r2, [r2, #0]
 8003946:	430b      	orrs	r3, r1
 8003948:	64d3      	str	r3, [r2, #76]	@ 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4618      	mov	r0, r3
 8003950:	f7ff fd29 	bl	80033a6 <LL_ADC_INJ_IsConversionOngoing>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d124      	bne.n	80039a4 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (pConfigInjected->AutoInjectedConv == DISABLE)
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003960:	2b00      	cmp	r3, #0
 8003962:	d112      	bne.n	800398a <HAL_ADCEx_InjectedConfigChannel+0x17e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8003974:	055a      	lsls	r2, r3, #21
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800397c:	051b      	lsls	r3, r3, #20
 800397e:	431a      	orrs	r2, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	430a      	orrs	r2, r1
 8003986:	60da      	str	r2, [r3, #12]
 8003988:	e00c      	b.n	80039a4 <HAL_ADCEx_InjectedConfigChannel+0x198>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800399a:	055a      	lsls	r2, r3, #21
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	430a      	orrs	r2, r1
 80039a2:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4618      	mov	r0, r3
 80039aa:	f7ff fcd5 	bl	8003358 <LL_ADC_REG_IsConversionOngoing>
 80039ae:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4618      	mov	r0, r3
 80039b8:	f7ff fcf5 	bl	80033a6 <LL_ADC_INJ_IsConversionOngoing>
 80039bc:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80039c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	f040 822e 	bne.w	8003e26 <HAL_ADCEx_InjectedConfigChannel+0x61a>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80039ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	f040 8229 	bne.w	8003e26 <HAL_ADCEx_InjectedConfigChannel+0x61a>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((pConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d003      	beq.n	80039e4 <HAL_ADCEx_InjectedConfigChannel+0x1d8>
        || (pConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d116      	bne.n	8003a12 <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d108      	bne.n	8003a00 <HAL_ADCEx_InjectedConfigChannel+0x1f4>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	68da      	ldr	r2, [r3, #12]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 80039fc:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 80039fe:	e01f      	b.n	8003a40 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	68da      	ldr	r2, [r3, #12]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 8003a0e:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8003a10:	e016      	b.n	8003a40 <HAL_ADCEx_InjectedConfigChannel+0x234>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d109      	bne.n	8003a30 <HAL_ADCEx_InjectedConfigChannel+0x224>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a20:	f043 0220 	orr.w	r2, r3, #32
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	65da      	str	r2, [r3, #92]	@ 0x5c

        tmp_hal_status = HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003a2e:	e007      	b.n	8003a40 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	68da      	ldr	r2, [r3, #12]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 8003a3e:	60da      	str	r2, [r3, #12]
      }
    }

    if (pConfigInjected->InjecOversamplingMode == ENABLE)
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d110      	bne.n	8003a6c <HAL_ADCEx_InjectedConfigChannel+0x260>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	691b      	ldr	r3, [r3, #16]
 8003a50:	f423 72ff 	bic.w	r2, r3, #510	@ 0x1fe
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a5c:	430b      	orrs	r3, r1
 8003a5e:	431a      	orrs	r2, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f042 0202 	orr.w	r2, r2, #2
 8003a68:	611a      	str	r2, [r3, #16]
 8003a6a:	e007      	b.n	8003a7c <HAL_ADCEx_InjectedConfigChannel+0x270>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	691a      	ldr	r2, [r3, #16]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f022 0202 	bic.w	r2, r2, #2
 8003a7a:	611a      	str	r2, [r3, #16]
    }

    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (pConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003a84:	d112      	bne.n	8003aac <HAL_ADCEx_InjectedConfigChannel+0x2a0>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6818      	ldr	r0, [r3, #0]
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	4619      	mov	r1, r3
 8003a92:	f7ff fbc3 	bl	800321c <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f7ff fb9b 	bl	80031da <LL_ADC_SetSamplingTimeCommonConfig>
 8003aa4:	e011      	b.n	8003aca <HAL_ADCEx_InjectedConfigChannel+0x2be>
 8003aa6:	bf00      	nop
 8003aa8:	04104000 	.word	0x04104000
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6818      	ldr	r0, [r3, #0]
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	6819      	ldr	r1, [r3, #0]
                                    pConfigInjected->InjectedSamplingTime);
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	689b      	ldr	r3, [r3, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 8003ab8:	461a      	mov	r2, r3
 8003aba:	f7ff fbaf 	bl	800321c <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	2100      	movs	r1, #0
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f7ff fb88 	bl	80031da <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, pConfigInjected->InjectedOffset);
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	695a      	ldr	r2, [r3, #20]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	08db      	lsrs	r3, r3, #3
 8003ad6:	f003 0303 	and.w	r3, r3, #3
 8003ada:	005b      	lsls	r3, r3, #1
 8003adc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

    if (pConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	691b      	ldr	r3, [r3, #16]
 8003ae8:	2b04      	cmp	r3, #4
 8003aea:	d022      	beq.n	8003b32 <HAL_ADCEx_InjectedConfigChannel+0x326>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedChannel,
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6818      	ldr	r0, [r3, #0]
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	6919      	ldr	r1, [r3, #16]
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003afc:	f7ff fae2 	bl	80030c4 <LL_ADC_SetOffset>
                       tmp_offset_shifted);

      /* Set ADC selected offset sign & saturation */
      LL_ADC_SetOffsetSign(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedOffsetSign);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6818      	ldr	r0, [r3, #0]
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	6919      	ldr	r1, [r3, #16]
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	699b      	ldr	r3, [r3, #24]
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	f7ff fb2e 	bl	800316e <LL_ADC_SetOffsetSign>
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6818      	ldr	r0, [r3, #0]
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	6919      	ldr	r1, [r3, #16]
                                 (pConfigInjected->InjectedOffsetSaturation == ENABLE) ?
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	7f1b      	ldrb	r3, [r3, #28]
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d102      	bne.n	8003b28 <HAL_ADCEx_InjectedConfigChannel+0x31c>
 8003b22:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003b26:	e000      	b.n	8003b2a <HAL_ADCEx_InjectedConfigChannel+0x31e>
 8003b28:	2300      	movs	r3, #0
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	f7ff fb3a 	bl	80031a4 <LL_ADC_SetOffsetSaturation>
 8003b30:	e179      	b.n	8003e26 <HAL_ADCEx_InjectedConfigChannel+0x61a>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	2100      	movs	r1, #0
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f7ff fae7 	bl	800310c <LL_ADC_GetOffsetChannel>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d10a      	bne.n	8003b5e <HAL_ADCEx_InjectedConfigChannel+0x352>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2100      	movs	r1, #0
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f7ff fadc 	bl	800310c <LL_ADC_GetOffsetChannel>
 8003b54:	4603      	mov	r3, r0
 8003b56:	0e9b      	lsrs	r3, r3, #26
 8003b58:	f003 021f 	and.w	r2, r3, #31
 8003b5c:	e01e      	b.n	8003b9c <HAL_ADCEx_InjectedConfigChannel+0x390>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	2100      	movs	r1, #0
 8003b64:	4618      	mov	r0, r3
 8003b66:	f7ff fad1 	bl	800310c <LL_ADC_GetOffsetChannel>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b70:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003b74:	fa93 f3a3 	rbit	r3, r3
 8003b78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8003b7c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003b80:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8003b84:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d101      	bne.n	8003b90 <HAL_ADCEx_InjectedConfigChannel+0x384>
    return 32U;
 8003b8c:	2320      	movs	r3, #32
 8003b8e:	e004      	b.n	8003b9a <HAL_ADCEx_InjectedConfigChannel+0x38e>
  return __builtin_clz(value);
 8003b90:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003b94:	fab3 f383 	clz	r3, r3
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d105      	bne.n	8003bb4 <HAL_ADCEx_InjectedConfigChannel+0x3a8>
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	0e9b      	lsrs	r3, r3, #26
 8003bae:	f003 031f 	and.w	r3, r3, #31
 8003bb2:	e018      	b.n	8003be6 <HAL_ADCEx_InjectedConfigChannel+0x3da>
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bbc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003bc0:	fa93 f3a3 	rbit	r3, r3
 8003bc4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8003bc8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003bcc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8003bd0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d101      	bne.n	8003bdc <HAL_ADCEx_InjectedConfigChannel+0x3d0>
    return 32U;
 8003bd8:	2320      	movs	r3, #32
 8003bda:	e004      	b.n	8003be6 <HAL_ADCEx_InjectedConfigChannel+0x3da>
  return __builtin_clz(value);
 8003bdc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003be0:	fab3 f383 	clz	r3, r3
 8003be4:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d106      	bne.n	8003bf8 <HAL_ADCEx_InjectedConfigChannel+0x3ec>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	2100      	movs	r1, #0
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f7ff faa0 	bl	8003138 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	2101      	movs	r1, #1
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7ff fa84 	bl	800310c <LL_ADC_GetOffsetChannel>
 8003c04:	4603      	mov	r3, r0
 8003c06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d10a      	bne.n	8003c24 <HAL_ADCEx_InjectedConfigChannel+0x418>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2101      	movs	r1, #1
 8003c14:	4618      	mov	r0, r3
 8003c16:	f7ff fa79 	bl	800310c <LL_ADC_GetOffsetChannel>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	0e9b      	lsrs	r3, r3, #26
 8003c1e:	f003 021f 	and.w	r2, r3, #31
 8003c22:	e01e      	b.n	8003c62 <HAL_ADCEx_InjectedConfigChannel+0x456>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	2101      	movs	r1, #1
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f7ff fa6e 	bl	800310c <LL_ADC_GetOffsetChannel>
 8003c30:	4603      	mov	r3, r0
 8003c32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003c3a:	fa93 f3a3 	rbit	r3, r3
 8003c3e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8003c42:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003c46:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8003c4a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d101      	bne.n	8003c56 <HAL_ADCEx_InjectedConfigChannel+0x44a>
    return 32U;
 8003c52:	2320      	movs	r3, #32
 8003c54:	e004      	b.n	8003c60 <HAL_ADCEx_InjectedConfigChannel+0x454>
  return __builtin_clz(value);
 8003c56:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003c5a:	fab3 f383 	clz	r3, r3
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d105      	bne.n	8003c7a <HAL_ADCEx_InjectedConfigChannel+0x46e>
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	0e9b      	lsrs	r3, r3, #26
 8003c74:	f003 031f 	and.w	r3, r3, #31
 8003c78:	e018      	b.n	8003cac <HAL_ADCEx_InjectedConfigChannel+0x4a0>
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c82:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003c86:	fa93 f3a3 	rbit	r3, r3
 8003c8a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8003c8e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003c92:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8003c96:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d101      	bne.n	8003ca2 <HAL_ADCEx_InjectedConfigChannel+0x496>
    return 32U;
 8003c9e:	2320      	movs	r3, #32
 8003ca0:	e004      	b.n	8003cac <HAL_ADCEx_InjectedConfigChannel+0x4a0>
  return __builtin_clz(value);
 8003ca2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003ca6:	fab3 f383 	clz	r3, r3
 8003caa:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d106      	bne.n	8003cbe <HAL_ADCEx_InjectedConfigChannel+0x4b2>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	2101      	movs	r1, #1
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f7ff fa3d 	bl	8003138 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	2102      	movs	r1, #2
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f7ff fa21 	bl	800310c <LL_ADC_GetOffsetChannel>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d10a      	bne.n	8003cea <HAL_ADCEx_InjectedConfigChannel+0x4de>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2102      	movs	r1, #2
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7ff fa16 	bl	800310c <LL_ADC_GetOffsetChannel>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	0e9b      	lsrs	r3, r3, #26
 8003ce4:	f003 021f 	and.w	r2, r3, #31
 8003ce8:	e01e      	b.n	8003d28 <HAL_ADCEx_InjectedConfigChannel+0x51c>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	2102      	movs	r1, #2
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f7ff fa0b 	bl	800310c <LL_ADC_GetOffsetChannel>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cfc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003d00:	fa93 f3a3 	rbit	r3, r3
 8003d04:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8003d08:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003d0c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8003d10:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d101      	bne.n	8003d1c <HAL_ADCEx_InjectedConfigChannel+0x510>
    return 32U;
 8003d18:	2320      	movs	r3, #32
 8003d1a:	e004      	b.n	8003d26 <HAL_ADCEx_InjectedConfigChannel+0x51a>
  return __builtin_clz(value);
 8003d1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d20:	fab3 f383 	clz	r3, r3
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d105      	bne.n	8003d40 <HAL_ADCEx_InjectedConfigChannel+0x534>
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	0e9b      	lsrs	r3, r3, #26
 8003d3a:	f003 031f 	and.w	r3, r3, #31
 8003d3e:	e014      	b.n	8003d6a <HAL_ADCEx_InjectedConfigChannel+0x55e>
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d46:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003d48:	fa93 f3a3 	rbit	r3, r3
 8003d4c:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8003d4e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003d50:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8003d54:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d101      	bne.n	8003d60 <HAL_ADCEx_InjectedConfigChannel+0x554>
    return 32U;
 8003d5c:	2320      	movs	r3, #32
 8003d5e:	e004      	b.n	8003d6a <HAL_ADCEx_InjectedConfigChannel+0x55e>
  return __builtin_clz(value);
 8003d60:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003d64:	fab3 f383 	clz	r3, r3
 8003d68:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d106      	bne.n	8003d7c <HAL_ADCEx_InjectedConfigChannel+0x570>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	2200      	movs	r2, #0
 8003d74:	2102      	movs	r1, #2
 8003d76:	4618      	mov	r0, r3
 8003d78:	f7ff f9de 	bl	8003138 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2103      	movs	r1, #3
 8003d82:	4618      	mov	r0, r3
 8003d84:	f7ff f9c2 	bl	800310c <LL_ADC_GetOffsetChannel>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d10a      	bne.n	8003da8 <HAL_ADCEx_InjectedConfigChannel+0x59c>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	2103      	movs	r1, #3
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f7ff f9b7 	bl	800310c <LL_ADC_GetOffsetChannel>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	0e9b      	lsrs	r3, r3, #26
 8003da2:	f003 021f 	and.w	r2, r3, #31
 8003da6:	e017      	b.n	8003dd8 <HAL_ADCEx_InjectedConfigChannel+0x5cc>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2103      	movs	r1, #3
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7ff f9ac 	bl	800310c <LL_ADC_GetOffsetChannel>
 8003db4:	4603      	mov	r3, r0
 8003db6:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003db8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003dba:	fa93 f3a3 	rbit	r3, r3
 8003dbe:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003dc0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003dc2:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8003dc4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d101      	bne.n	8003dce <HAL_ADCEx_InjectedConfigChannel+0x5c2>
    return 32U;
 8003dca:	2320      	movs	r3, #32
 8003dcc:	e003      	b.n	8003dd6 <HAL_ADCEx_InjectedConfigChannel+0x5ca>
  return __builtin_clz(value);
 8003dce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003dd0:	fab3 f383 	clz	r3, r3
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d105      	bne.n	8003df0 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	0e9b      	lsrs	r3, r3, #26
 8003dea:	f003 031f 	and.w	r3, r3, #31
 8003dee:	e011      	b.n	8003e14 <HAL_ADCEx_InjectedConfigChannel+0x608>
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003df6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003df8:	fa93 f3a3 	rbit	r3, r3
 8003dfc:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8003dfe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003e00:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8003e02:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d101      	bne.n	8003e0c <HAL_ADCEx_InjectedConfigChannel+0x600>
    return 32U;
 8003e08:	2320      	movs	r3, #32
 8003e0a:	e003      	b.n	8003e14 <HAL_ADCEx_InjectedConfigChannel+0x608>
  return __builtin_clz(value);
 8003e0c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003e0e:	fab3 f383 	clz	r3, r3
 8003e12:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d106      	bne.n	8003e26 <HAL_ADCEx_InjectedConfigChannel+0x61a>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	2103      	movs	r1, #3
 8003e20:	4618      	mov	r0, r3
 8003e22:	f7ff f989 	bl	8003138 <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7ff fa54 	bl	80032d8 <LL_ADC_IsEnabled>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	f040 8140 	bne.w	80040b8 <HAL_ADCEx_InjectedConfigChannel+0x8ac>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6818      	ldr	r0, [r3, #0]
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	6819      	ldr	r1, [r3, #0]
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	461a      	mov	r2, r3
 8003e46:	f7ff fa15 	bl	8003274 <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (pConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	4a8f      	ldr	r2, [pc, #572]	@ (800408c <HAL_ADCEx_InjectedConfigChannel+0x880>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	f040 8131 	bne.w	80040b8 <HAL_ADCEx_InjectedConfigChannel+0x8ac>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6818      	ldr	r0, [r3, #0]
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d10b      	bne.n	8003e7e <HAL_ADCEx_InjectedConfigChannel+0x672>
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	0e9b      	lsrs	r3, r3, #26
 8003e6c:	3301      	adds	r3, #1
 8003e6e:	f003 031f 	and.w	r3, r3, #31
 8003e72:	2b09      	cmp	r3, #9
 8003e74:	bf94      	ite	ls
 8003e76:	2301      	movls	r3, #1
 8003e78:	2300      	movhi	r3, #0
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	e019      	b.n	8003eb2 <HAL_ADCEx_InjectedConfigChannel+0x6a6>
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e84:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e86:	fa93 f3a3 	rbit	r3, r3
 8003e8a:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8003e8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e8e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8003e90:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d101      	bne.n	8003e9a <HAL_ADCEx_InjectedConfigChannel+0x68e>
    return 32U;
 8003e96:	2320      	movs	r3, #32
 8003e98:	e003      	b.n	8003ea2 <HAL_ADCEx_InjectedConfigChannel+0x696>
  return __builtin_clz(value);
 8003e9a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e9c:	fab3 f383 	clz	r3, r3
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	3301      	adds	r3, #1
 8003ea4:	f003 031f 	and.w	r3, r3, #31
 8003ea8:	2b09      	cmp	r3, #9
 8003eaa:	bf94      	ite	ls
 8003eac:	2301      	movls	r3, #1
 8003eae:	2300      	movhi	r3, #0
 8003eb0:	b2db      	uxtb	r3, r3
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d079      	beq.n	8003faa <HAL_ADCEx_InjectedConfigChannel+0x79e>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d107      	bne.n	8003ed2 <HAL_ADCEx_InjectedConfigChannel+0x6c6>
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	0e9b      	lsrs	r3, r3, #26
 8003ec8:	3301      	adds	r3, #1
 8003eca:	069b      	lsls	r3, r3, #26
 8003ecc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003ed0:	e015      	b.n	8003efe <HAL_ADCEx_InjectedConfigChannel+0x6f2>
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ed8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003eda:	fa93 f3a3 	rbit	r3, r3
 8003ede:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8003ee0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ee2:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8003ee4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d101      	bne.n	8003eee <HAL_ADCEx_InjectedConfigChannel+0x6e2>
    return 32U;
 8003eea:	2320      	movs	r3, #32
 8003eec:	e003      	b.n	8003ef6 <HAL_ADCEx_InjectedConfigChannel+0x6ea>
  return __builtin_clz(value);
 8003eee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ef0:	fab3 f383 	clz	r3, r3
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	069b      	lsls	r3, r3, #26
 8003efa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d109      	bne.n	8003f1e <HAL_ADCEx_InjectedConfigChannel+0x712>
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	0e9b      	lsrs	r3, r3, #26
 8003f10:	3301      	adds	r3, #1
 8003f12:	f003 031f 	and.w	r3, r3, #31
 8003f16:	2101      	movs	r1, #1
 8003f18:	fa01 f303 	lsl.w	r3, r1, r3
 8003f1c:	e017      	b.n	8003f4e <HAL_ADCEx_InjectedConfigChannel+0x742>
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f26:	fa93 f3a3 	rbit	r3, r3
 8003f2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8003f2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f2e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8003f30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d101      	bne.n	8003f3a <HAL_ADCEx_InjectedConfigChannel+0x72e>
    return 32U;
 8003f36:	2320      	movs	r3, #32
 8003f38:	e003      	b.n	8003f42 <HAL_ADCEx_InjectedConfigChannel+0x736>
  return __builtin_clz(value);
 8003f3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f3c:	fab3 f383 	clz	r3, r3
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	3301      	adds	r3, #1
 8003f44:	f003 031f 	and.w	r3, r3, #31
 8003f48:	2101      	movs	r1, #1
 8003f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f4e:	ea42 0103 	orr.w	r1, r2, r3
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d10a      	bne.n	8003f74 <HAL_ADCEx_InjectedConfigChannel+0x768>
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	0e9b      	lsrs	r3, r3, #26
 8003f64:	3301      	adds	r3, #1
 8003f66:	f003 021f 	and.w	r2, r3, #31
 8003f6a:	4613      	mov	r3, r2
 8003f6c:	005b      	lsls	r3, r3, #1
 8003f6e:	4413      	add	r3, r2
 8003f70:	051b      	lsls	r3, r3, #20
 8003f72:	e018      	b.n	8003fa6 <HAL_ADCEx_InjectedConfigChannel+0x79a>
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f7c:	fa93 f3a3 	rbit	r3, r3
 8003f80:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8003f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f84:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8003f86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d101      	bne.n	8003f90 <HAL_ADCEx_InjectedConfigChannel+0x784>
    return 32U;
 8003f8c:	2320      	movs	r3, #32
 8003f8e:	e003      	b.n	8003f98 <HAL_ADCEx_InjectedConfigChannel+0x78c>
  return __builtin_clz(value);
 8003f90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f92:	fab3 f383 	clz	r3, r3
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	3301      	adds	r3, #1
 8003f9a:	f003 021f 	and.w	r2, r3, #31
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	005b      	lsls	r3, r3, #1
 8003fa2:	4413      	add	r3, r2
 8003fa4:	051b      	lsls	r3, r3, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003fa6:	430b      	orrs	r3, r1
 8003fa8:	e081      	b.n	80040ae <HAL_ADCEx_InjectedConfigChannel+0x8a2>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d107      	bne.n	8003fc6 <HAL_ADCEx_InjectedConfigChannel+0x7ba>
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	0e9b      	lsrs	r3, r3, #26
 8003fbc:	3301      	adds	r3, #1
 8003fbe:	069b      	lsls	r3, r3, #26
 8003fc0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003fc4:	e015      	b.n	8003ff2 <HAL_ADCEx_InjectedConfigChannel+0x7e6>
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fce:	fa93 f3a3 	rbit	r3, r3
 8003fd2:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8003fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8003fd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d101      	bne.n	8003fe2 <HAL_ADCEx_InjectedConfigChannel+0x7d6>
    return 32U;
 8003fde:	2320      	movs	r3, #32
 8003fe0:	e003      	b.n	8003fea <HAL_ADCEx_InjectedConfigChannel+0x7de>
  return __builtin_clz(value);
 8003fe2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fe4:	fab3 f383 	clz	r3, r3
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	3301      	adds	r3, #1
 8003fec:	069b      	lsls	r3, r3, #26
 8003fee:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d109      	bne.n	8004012 <HAL_ADCEx_InjectedConfigChannel+0x806>
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	0e9b      	lsrs	r3, r3, #26
 8004004:	3301      	adds	r3, #1
 8004006:	f003 031f 	and.w	r3, r3, #31
 800400a:	2101      	movs	r1, #1
 800400c:	fa01 f303 	lsl.w	r3, r1, r3
 8004010:	e017      	b.n	8004042 <HAL_ADCEx_InjectedConfigChannel+0x836>
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	fa93 f3a3 	rbit	r3, r3
 800401e:	61bb      	str	r3, [r7, #24]
  return result;
 8004020:	69bb      	ldr	r3, [r7, #24]
 8004022:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004024:	6a3b      	ldr	r3, [r7, #32]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d101      	bne.n	800402e <HAL_ADCEx_InjectedConfigChannel+0x822>
    return 32U;
 800402a:	2320      	movs	r3, #32
 800402c:	e003      	b.n	8004036 <HAL_ADCEx_InjectedConfigChannel+0x82a>
  return __builtin_clz(value);
 800402e:	6a3b      	ldr	r3, [r7, #32]
 8004030:	fab3 f383 	clz	r3, r3
 8004034:	b2db      	uxtb	r3, r3
 8004036:	3301      	adds	r3, #1
 8004038:	f003 031f 	and.w	r3, r3, #31
 800403c:	2101      	movs	r1, #1
 800403e:	fa01 f303 	lsl.w	r3, r1, r3
 8004042:	ea42 0103 	orr.w	r1, r2, r3
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800404e:	2b00      	cmp	r3, #0
 8004050:	d10d      	bne.n	800406e <HAL_ADCEx_InjectedConfigChannel+0x862>
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	0e9b      	lsrs	r3, r3, #26
 8004058:	3301      	adds	r3, #1
 800405a:	f003 021f 	and.w	r2, r3, #31
 800405e:	4613      	mov	r3, r2
 8004060:	005b      	lsls	r3, r3, #1
 8004062:	4413      	add	r3, r2
 8004064:	3b1e      	subs	r3, #30
 8004066:	051b      	lsls	r3, r3, #20
 8004068:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800406c:	e01e      	b.n	80040ac <HAL_ADCEx_InjectedConfigChannel+0x8a0>
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	fa93 f3a3 	rbit	r3, r3
 800407a:	60fb      	str	r3, [r7, #12]
  return result;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d104      	bne.n	8004090 <HAL_ADCEx_InjectedConfigChannel+0x884>
    return 32U;
 8004086:	2320      	movs	r3, #32
 8004088:	e006      	b.n	8004098 <HAL_ADCEx_InjectedConfigChannel+0x88c>
 800408a:	bf00      	nop
 800408c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	fab3 f383 	clz	r3, r3
 8004096:	b2db      	uxtb	r3, r3
 8004098:	3301      	adds	r3, #1
 800409a:	f003 021f 	and.w	r2, r3, #31
 800409e:	4613      	mov	r3, r2
 80040a0:	005b      	lsls	r3, r3, #1
 80040a2:	4413      	add	r3, r2
 80040a4:	3b1e      	subs	r3, #30
 80040a6:	051b      	lsls	r3, r3, #20
 80040a8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80040ac:	430b      	orrs	r3, r1
                                                 (__LL_ADC_CHANNEL_TO_DECIMAL_NB(
                                                    (uint32_t)pConfigInjected->InjectedChannel)
                                                  + 1UL) & 0x1FUL)),
                                    pConfigInjected->InjectedSamplingTime);
 80040ae:	683a      	ldr	r2, [r7, #0]
 80040b0:	6892      	ldr	r2, [r2, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80040b2:	4619      	mov	r1, r3
 80040b4:	f7ff f8b2 	bl	800321c <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfigInjected->InjectedChannel))
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	4b3a      	ldr	r3, [pc, #232]	@ (80041a8 <HAL_ADCEx_InjectedConfigChannel+0x99c>)
 80040be:	4013      	ands	r3, r2
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d067      	beq.n	8004194 <HAL_ADCEx_InjectedConfigChannel+0x988>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80040c4:	4839      	ldr	r0, [pc, #228]	@ (80041ac <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 80040c6:	f7fe ffef 	bl	80030a8 <LL_ADC_GetCommonPathInternalCh>
 80040ca:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a37      	ldr	r2, [pc, #220]	@ (80041b0 <HAL_ADCEx_InjectedConfigChannel+0x9a4>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d004      	beq.n	80040e2 <HAL_ADCEx_InjectedConfigChannel+0x8d6>
         || (pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a35      	ldr	r2, [pc, #212]	@ (80041b4 <HAL_ADCEx_InjectedConfigChannel+0x9a8>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d127      	bne.n	8004132 <HAL_ADCEx_InjectedConfigChannel+0x926>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80040e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80040e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d121      	bne.n	8004132 <HAL_ADCEx_InjectedConfigChannel+0x926>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80040f6:	d14d      	bne.n	8004194 <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80040f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80040fc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004100:	4619      	mov	r1, r3
 8004102:	482a      	ldr	r0, [pc, #168]	@ (80041ac <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8004104:	f7fe ffbd 	bl	8003082 <LL_ADC_SetCommonPathInternalCh>
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                           * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8004108:	4b2b      	ldr	r3, [pc, #172]	@ (80041b8 <HAL_ADCEx_InjectedConfigChannel+0x9ac>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	099b      	lsrs	r3, r3, #6
 800410e:	4a2b      	ldr	r2, [pc, #172]	@ (80041bc <HAL_ADCEx_InjectedConfigChannel+0x9b0>)
 8004110:	fba2 2303 	umull	r2, r3, r2, r3
 8004114:	099a      	lsrs	r2, r3, #6
 8004116:	4613      	mov	r3, r2
 8004118:	005b      	lsls	r3, r3, #1
 800411a:	4413      	add	r3, r2
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	3318      	adds	r3, #24
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 8004120:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8004122:	e002      	b.n	800412a <HAL_ADCEx_InjectedConfigChannel+0x91e>
        {
          wait_loop_index--;
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	3b01      	subs	r3, #1
 8004128:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d1f9      	bne.n	8004124 <HAL_ADCEx_InjectedConfigChannel+0x918>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004130:	e030      	b.n	8004194 <HAL_ADCEx_InjectedConfigChannel+0x988>
        }
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a22      	ldr	r2, [pc, #136]	@ (80041c0 <HAL_ADCEx_InjectedConfigChannel+0x9b4>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d113      	bne.n	8004164 <HAL_ADCEx_InjectedConfigChannel+0x958>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800413c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004140:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004144:	2b00      	cmp	r3, #0
 8004146:	d10d      	bne.n	8004164 <HAL_ADCEx_InjectedConfigChannel+0x958>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a1d      	ldr	r2, [pc, #116]	@ (80041c4 <HAL_ADCEx_InjectedConfigChannel+0x9b8>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d020      	beq.n	8004194 <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004152:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004156:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800415a:	4619      	mov	r1, r3
 800415c:	4813      	ldr	r0, [pc, #76]	@ (80041ac <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 800415e:	f7fe ff90 	bl	8003082 <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004162:	e017      	b.n	8004194 <HAL_ADCEx_InjectedConfigChannel+0x988>
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a17      	ldr	r2, [pc, #92]	@ (80041c8 <HAL_ADCEx_InjectedConfigChannel+0x9bc>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d112      	bne.n	8004194 <HAL_ADCEx_InjectedConfigChannel+0x988>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800416e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004172:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d10c      	bne.n	8004194 <HAL_ADCEx_InjectedConfigChannel+0x988>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a11      	ldr	r2, [pc, #68]	@ (80041c4 <HAL_ADCEx_InjectedConfigChannel+0x9b8>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d007      	beq.n	8004194 <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004184:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004188:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800418c:	4619      	mov	r1, r3
 800418e:	4807      	ldr	r0, [pc, #28]	@ (80041ac <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8004190:	f7fe ff77 	bl	8003082 <LL_ADC_SetCommonPathInternalCh>
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800419c:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	37d8      	adds	r7, #216	@ 0xd8
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	80080000 	.word	0x80080000
 80041ac:	50000300 	.word	0x50000300
 80041b0:	c3210000 	.word	0xc3210000
 80041b4:	90c00010 	.word	0x90c00010
 80041b8:	20000000 	.word	0x20000000
 80041bc:	053e2d63 	.word	0x053e2d63
 80041c0:	c7520000 	.word	0xc7520000
 80041c4:	50000100 	.word	0x50000100
 80041c8:	cb840000 	.word	0xcb840000

080041cc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80041cc:	b590      	push	{r4, r7, lr}
 80041ce:	b0a1      	sub	sp, #132	@ 0x84
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041d6:	2300      	movs	r3, #0
 80041d8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d101      	bne.n	80041ea <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80041e6:	2302      	movs	r3, #2
 80041e8:	e08b      	b.n	8004302 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2201      	movs	r2, #1
 80041ee:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80041f2:	2300      	movs	r3, #0
 80041f4:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80041f6:	2300      	movs	r3, #0
 80041f8:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004202:	d102      	bne.n	800420a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004204:	4b41      	ldr	r3, [pc, #260]	@ (800430c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004206:	60bb      	str	r3, [r7, #8]
 8004208:	e001      	b.n	800420e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800420a:	2300      	movs	r3, #0
 800420c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d10b      	bne.n	800422c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004218:	f043 0220 	orr.w	r2, r3, #32
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e06a      	b.n	8004302 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	4618      	mov	r0, r3
 8004230:	f7ff f892 	bl	8003358 <LL_ADC_REG_IsConversionOngoing>
 8004234:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4618      	mov	r0, r3
 800423c:	f7ff f88c 	bl	8003358 <LL_ADC_REG_IsConversionOngoing>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d14c      	bne.n	80042e0 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004246:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004248:	2b00      	cmp	r3, #0
 800424a:	d149      	bne.n	80042e0 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800424c:	4b30      	ldr	r3, [pc, #192]	@ (8004310 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800424e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d028      	beq.n	80042aa <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004258:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	6859      	ldr	r1, [r3, #4]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800426a:	035b      	lsls	r3, r3, #13
 800426c:	430b      	orrs	r3, r1
 800426e:	431a      	orrs	r2, r3
 8004270:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004272:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004274:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004278:	f7ff f82e 	bl	80032d8 <LL_ADC_IsEnabled>
 800427c:	4604      	mov	r4, r0
 800427e:	4823      	ldr	r0, [pc, #140]	@ (800430c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004280:	f7ff f82a 	bl	80032d8 <LL_ADC_IsEnabled>
 8004284:	4603      	mov	r3, r0
 8004286:	4323      	orrs	r3, r4
 8004288:	2b00      	cmp	r3, #0
 800428a:	d133      	bne.n	80042f4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800428c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004294:	f023 030f 	bic.w	r3, r3, #15
 8004298:	683a      	ldr	r2, [r7, #0]
 800429a:	6811      	ldr	r1, [r2, #0]
 800429c:	683a      	ldr	r2, [r7, #0]
 800429e:	6892      	ldr	r2, [r2, #8]
 80042a0:	430a      	orrs	r2, r1
 80042a2:	431a      	orrs	r2, r3
 80042a4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80042a6:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80042a8:	e024      	b.n	80042f4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80042aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80042b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80042b4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80042b6:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80042ba:	f7ff f80d 	bl	80032d8 <LL_ADC_IsEnabled>
 80042be:	4604      	mov	r4, r0
 80042c0:	4812      	ldr	r0, [pc, #72]	@ (800430c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80042c2:	f7ff f809 	bl	80032d8 <LL_ADC_IsEnabled>
 80042c6:	4603      	mov	r3, r0
 80042c8:	4323      	orrs	r3, r4
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d112      	bne.n	80042f4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80042ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80042d6:	f023 030f 	bic.w	r3, r3, #15
 80042da:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80042dc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80042de:	e009      	b.n	80042f4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042e4:	f043 0220 	orr.w	r2, r3, #32
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80042f2:	e000      	b.n	80042f6 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80042f4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80042fe:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004302:	4618      	mov	r0, r3
 8004304:	3784      	adds	r7, #132	@ 0x84
 8004306:	46bd      	mov	sp, r7
 8004308:	bd90      	pop	{r4, r7, pc}
 800430a:	bf00      	nop
 800430c:	50000100 	.word	0x50000100
 8004310:	50000300 	.word	0x50000300

08004314 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800431c:	4b05      	ldr	r3, [pc, #20]	@ (8004334 <LL_EXTI_EnableIT_0_31+0x20>)
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	4904      	ldr	r1, [pc, #16]	@ (8004334 <LL_EXTI_EnableIT_0_31+0x20>)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4313      	orrs	r3, r2
 8004326:	600b      	str	r3, [r1, #0]
}
 8004328:	bf00      	nop
 800432a:	370c      	adds	r7, #12
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr
 8004334:	40010400 	.word	0x40010400

08004338 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8004340:	4b06      	ldr	r3, [pc, #24]	@ (800435c <LL_EXTI_DisableIT_0_31+0x24>)
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	43db      	mvns	r3, r3
 8004348:	4904      	ldr	r1, [pc, #16]	@ (800435c <LL_EXTI_DisableIT_0_31+0x24>)
 800434a:	4013      	ands	r3, r2
 800434c:	600b      	str	r3, [r1, #0]
}
 800434e:	bf00      	nop
 8004350:	370c      	adds	r7, #12
 8004352:	46bd      	mov	sp, r7
 8004354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004358:	4770      	bx	lr
 800435a:	bf00      	nop
 800435c:	40010400 	.word	0x40010400

08004360 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8004360:	b480      	push	{r7}
 8004362:	b083      	sub	sp, #12
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8004368:	4b05      	ldr	r3, [pc, #20]	@ (8004380 <LL_EXTI_EnableEvent_0_31+0x20>)
 800436a:	685a      	ldr	r2, [r3, #4]
 800436c:	4904      	ldr	r1, [pc, #16]	@ (8004380 <LL_EXTI_EnableEvent_0_31+0x20>)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4313      	orrs	r3, r2
 8004372:	604b      	str	r3, [r1, #4]

}
 8004374:	bf00      	nop
 8004376:	370c      	adds	r7, #12
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr
 8004380:	40010400 	.word	0x40010400

08004384 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800438c:	4b06      	ldr	r3, [pc, #24]	@ (80043a8 <LL_EXTI_DisableEvent_0_31+0x24>)
 800438e:	685a      	ldr	r2, [r3, #4]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	43db      	mvns	r3, r3
 8004394:	4904      	ldr	r1, [pc, #16]	@ (80043a8 <LL_EXTI_DisableEvent_0_31+0x24>)
 8004396:	4013      	ands	r3, r2
 8004398:	604b      	str	r3, [r1, #4]
}
 800439a:	bf00      	nop
 800439c:	370c      	adds	r7, #12
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr
 80043a6:	bf00      	nop
 80043a8:	40010400 	.word	0x40010400

080043ac <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80043b4:	4b05      	ldr	r3, [pc, #20]	@ (80043cc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80043b6:	689a      	ldr	r2, [r3, #8]
 80043b8:	4904      	ldr	r1, [pc, #16]	@ (80043cc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4313      	orrs	r3, r2
 80043be:	608b      	str	r3, [r1, #8]

}
 80043c0:	bf00      	nop
 80043c2:	370c      	adds	r7, #12
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr
 80043cc:	40010400 	.word	0x40010400

080043d0 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80043d8:	4b06      	ldr	r3, [pc, #24]	@ (80043f4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80043da:	689a      	ldr	r2, [r3, #8]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	43db      	mvns	r3, r3
 80043e0:	4904      	ldr	r1, [pc, #16]	@ (80043f4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80043e2:	4013      	ands	r3, r2
 80043e4:	608b      	str	r3, [r1, #8]

}
 80043e6:	bf00      	nop
 80043e8:	370c      	adds	r7, #12
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
 80043f2:	bf00      	nop
 80043f4:	40010400 	.word	0x40010400

080043f8 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8004400:	4b05      	ldr	r3, [pc, #20]	@ (8004418 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8004402:	68da      	ldr	r2, [r3, #12]
 8004404:	4904      	ldr	r1, [pc, #16]	@ (8004418 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4313      	orrs	r3, r2
 800440a:	60cb      	str	r3, [r1, #12]
}
 800440c:	bf00      	nop
 800440e:	370c      	adds	r7, #12
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr
 8004418:	40010400 	.word	0x40010400

0800441c <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8004424:	4b06      	ldr	r3, [pc, #24]	@ (8004440 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8004426:	68da      	ldr	r2, [r3, #12]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	43db      	mvns	r3, r3
 800442c:	4904      	ldr	r1, [pc, #16]	@ (8004440 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800442e:	4013      	ands	r3, r2
 8004430:	60cb      	str	r3, [r1, #12]
}
 8004432:	bf00      	nop
 8004434:	370c      	adds	r7, #12
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr
 800443e:	bf00      	nop
 8004440:	40010400 	.word	0x40010400

08004444 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 800444c:	4b07      	ldr	r3, [pc, #28]	@ (800446c <LL_EXTI_IsActiveFlag_0_31+0x28>)
 800444e:	695a      	ldr	r2, [r3, #20]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	4013      	ands	r3, r2
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	429a      	cmp	r2, r3
 8004458:	d101      	bne.n	800445e <LL_EXTI_IsActiveFlag_0_31+0x1a>
 800445a:	2301      	movs	r3, #1
 800445c:	e000      	b.n	8004460 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 800445e:	2300      	movs	r3, #0
}
 8004460:	4618      	mov	r0, r3
 8004462:	370c      	adds	r7, #12
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr
 800446c:	40010400 	.word	0x40010400

08004470 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8004478:	4a04      	ldr	r2, [pc, #16]	@ (800448c <LL_EXTI_ClearFlag_0_31+0x1c>)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6153      	str	r3, [r2, #20]
}
 800447e:	bf00      	nop
 8004480:	370c      	adds	r7, #12
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop
 800448c:	40010400 	.word	0x40010400

08004490 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b088      	sub	sp, #32
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8004498:	2300      	movs	r3, #0
 800449a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800449c:	2300      	movs	r3, #0
 800449e:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d102      	bne.n	80044ac <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	77fb      	strb	r3, [r7, #31]
 80044aa:	e0bc      	b.n	8004626 <HAL_COMP_Init+0x196>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80044b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80044ba:	d102      	bne.n	80044c2 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	77fb      	strb	r3, [r7, #31]
 80044c0:	e0b1      	b.n	8004626 <HAL_COMP_Init+0x196>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if (hcomp->State == HAL_COMP_STATE_RESET)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	7f5b      	ldrb	r3, [r3, #29]
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d108      	bne.n	80044de <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f7fc fa5d 	bl	8000998 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80044e8:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.InputMinus
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	695b      	ldr	r3, [r3, #20]
 80044f8:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (hcomp->Init.InputMinus
 8004504:	4313      	orrs	r3, r2
 8004506:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	4b48      	ldr	r3, [pc, #288]	@ (8004630 <HAL_COMP_Init+0x1a0>)
 8004510:	4013      	ands	r3, r2
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	6812      	ldr	r2, [r2, #0]
 8004516:	6979      	ldr	r1, [r7, #20]
 8004518:	430b      	orrs	r3, r1
 800451a:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d016      	beq.n	8004558 <HAL_COMP_Init+0xc8>
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d113      	bne.n	8004558 <HAL_COMP_Init+0xc8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004530:	4b40      	ldr	r3, [pc, #256]	@ (8004634 <HAL_COMP_Init+0x1a4>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	099b      	lsrs	r3, r3, #6
 8004536:	4a40      	ldr	r2, [pc, #256]	@ (8004638 <HAL_COMP_Init+0x1a8>)
 8004538:	fba2 2303 	umull	r2, r3, r2, r3
 800453c:	099b      	lsrs	r3, r3, #6
 800453e:	1c5a      	adds	r2, r3, #1
 8004540:	4613      	mov	r3, r2
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	4413      	add	r3, r2
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 800454a:	e002      	b.n	8004552 <HAL_COMP_Init+0xc2>
      {
        wait_loop_index--;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	3b01      	subs	r3, #1
 8004550:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d1f9      	bne.n	800454c <HAL_COMP_Init+0xbc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a37      	ldr	r2, [pc, #220]	@ (800463c <HAL_COMP_Init+0x1ac>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d012      	beq.n	8004588 <HAL_COMP_Init+0xf8>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a36      	ldr	r2, [pc, #216]	@ (8004640 <HAL_COMP_Init+0x1b0>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d00a      	beq.n	8004582 <HAL_COMP_Init+0xf2>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a34      	ldr	r2, [pc, #208]	@ (8004644 <HAL_COMP_Init+0x1b4>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d102      	bne.n	800457c <HAL_COMP_Init+0xec>
 8004576:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800457a:	e007      	b.n	800458c <HAL_COMP_Init+0xfc>
 800457c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004580:	e004      	b.n	800458c <HAL_COMP_Init+0xfc>
 8004582:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004586:	e001      	b.n	800458c <HAL_COMP_Init+0xfc>
 8004588:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800458c:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	699b      	ldr	r3, [r3, #24]
 8004592:	f003 0303 	and.w	r3, r3, #3
 8004596:	2b00      	cmp	r3, #0
 8004598:	d037      	beq.n	800460a <HAL_COMP_Init+0x17a>
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	699b      	ldr	r3, [r3, #24]
 800459e:	f003 0310 	and.w	r3, r3, #16
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d003      	beq.n	80045ae <HAL_COMP_Init+0x11e>
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 80045a6:	6938      	ldr	r0, [r7, #16]
 80045a8:	f7ff ff00 	bl	80043ac <LL_EXTI_EnableRisingTrig_0_31>
 80045ac:	e002      	b.n	80045b4 <HAL_COMP_Init+0x124>
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 80045ae:	6938      	ldr	r0, [r7, #16]
 80045b0:	f7ff ff0e 	bl	80043d0 <LL_EXTI_DisableRisingTrig_0_31>
#endif /* COMP7 */
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	699b      	ldr	r3, [r3, #24]
 80045b8:	f003 0320 	and.w	r3, r3, #32
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d003      	beq.n	80045c8 <HAL_COMP_Init+0x138>
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 80045c0:	6938      	ldr	r0, [r7, #16]
 80045c2:	f7ff ff19 	bl	80043f8 <LL_EXTI_EnableFallingTrig_0_31>
 80045c6:	e002      	b.n	80045ce <HAL_COMP_Init+0x13e>
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 80045c8:	6938      	ldr	r0, [r7, #16]
 80045ca:	f7ff ff27 	bl	800441c <LL_EXTI_DisableFallingTrig_0_31>
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
      }
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
 80045ce:	6938      	ldr	r0, [r7, #16]
 80045d0:	f7ff ff4e 	bl	8004470 <LL_EXTI_ClearFlag_0_31>
#endif /* COMP7 */

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	699b      	ldr	r3, [r3, #24]
 80045d8:	f003 0302 	and.w	r3, r3, #2
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d003      	beq.n	80045e8 <HAL_COMP_Init+0x158>
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
        }
#else
        LL_EXTI_EnableEvent_0_31(exti_line);
 80045e0:	6938      	ldr	r0, [r7, #16]
 80045e2:	f7ff febd 	bl	8004360 <LL_EXTI_EnableEvent_0_31>
 80045e6:	e002      	b.n	80045ee <HAL_COMP_Init+0x15e>
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
        }
#else
        LL_EXTI_DisableEvent_0_31(exti_line);
 80045e8:	6938      	ldr	r0, [r7, #16]
 80045ea:	f7ff fecb 	bl	8004384 <LL_EXTI_DisableEvent_0_31>
#endif /* COMP7 */
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	699b      	ldr	r3, [r3, #24]
 80045f2:	f003 0301 	and.w	r3, r3, #1
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d003      	beq.n	8004602 <HAL_COMP_Init+0x172>
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
        }
#else
        LL_EXTI_EnableIT_0_31(exti_line);
 80045fa:	6938      	ldr	r0, [r7, #16]
 80045fc:	f7ff fe8a 	bl	8004314 <LL_EXTI_EnableIT_0_31>
 8004600:	e009      	b.n	8004616 <HAL_COMP_Init+0x186>
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
        }
#else
        LL_EXTI_DisableIT_0_31(exti_line);
 8004602:	6938      	ldr	r0, [r7, #16]
 8004604:	f7ff fe98 	bl	8004338 <LL_EXTI_DisableIT_0_31>
 8004608:	e005      	b.n	8004616 <HAL_COMP_Init+0x186>
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
      }
#else
      LL_EXTI_DisableEvent_0_31(exti_line);
 800460a:	6938      	ldr	r0, [r7, #16]
 800460c:	f7ff feba 	bl	8004384 <LL_EXTI_DisableEvent_0_31>
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
      }
#else
      LL_EXTI_DisableIT_0_31(exti_line);
 8004610:	6938      	ldr	r0, [r7, #16]
 8004612:	f7ff fe91 	bl	8004338 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	7f5b      	ldrb	r3, [r3, #29]
 800461a:	b2db      	uxtb	r3, r3
 800461c:	2b00      	cmp	r3, #0
 800461e:	d102      	bne.n	8004626 <HAL_COMP_Init+0x196>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 8004626:	7ffb      	ldrb	r3, [r7, #31]
}
 8004628:	4618      	mov	r0, r3
 800462a:	3720      	adds	r7, #32
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}
 8004630:	ff007e0f 	.word	0xff007e0f
 8004634:	20000000 	.word	0x20000000
 8004638:	053e2d63 	.word	0x053e2d63
 800463c:	40010200 	.word	0x40010200
 8004640:	40010204 	.word	0x40010204
 8004644:	40010208 	.word	0x40010208

08004648 <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 8004648:	b480      	push	{r7}
 800464a:	b085      	sub	sp, #20
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 8004650:	2300      	movs	r3, #0
 8004652:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004654:	2300      	movs	r3, #0
 8004656:	73fb      	strb	r3, [r7, #15]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d102      	bne.n	8004664 <HAL_COMP_Start+0x1c>
  {
    status = HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	73fb      	strb	r3, [r7, #15]
 8004662:	e02e      	b.n	80046c2 <HAL_COMP_Start+0x7a>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800466e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004672:	d102      	bne.n	800467a <HAL_COMP_Start+0x32>
  {
    status = HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	73fb      	strb	r3, [r7, #15]
 8004678:	e023      	b.n	80046c2 <HAL_COMP_Start+0x7a>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if (hcomp->State == HAL_COMP_STATE_READY)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	7f5b      	ldrb	r3, [r3, #29]
 800467e:	b2db      	uxtb	r3, r3
 8004680:	2b01      	cmp	r3, #1
 8004682:	d11c      	bne.n	80046be <HAL_COMP_Start+0x76>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f042 0201 	orr.w	r2, r2, #1
 8004692:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2202      	movs	r2, #2
 8004698:	775a      	strb	r2, [r3, #29]
      /* Note: Variable divided by 2 to compensate partially                  */
      /*       CPU processing cycles.                                         */
      /* Note: In case of system low frequency (below 1Mhz), short delay      */
      /*       of startup time (few us) is within CPU processing cycles       */
      /*       of following instructions.                                     */
      wait_loop_index = (COMP_DELAY_STARTUP_US * (SystemCoreClock / (1000000UL * 2UL)));
 800469a:	4b0d      	ldr	r3, [pc, #52]	@ (80046d0 <HAL_COMP_Start+0x88>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a0d      	ldr	r2, [pc, #52]	@ (80046d4 <HAL_COMP_Start+0x8c>)
 80046a0:	fba2 2303 	umull	r2, r3, r2, r3
 80046a4:	0cda      	lsrs	r2, r3, #19
 80046a6:	4613      	mov	r3, r2
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	4413      	add	r3, r2
 80046ac:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80046ae:	e002      	b.n	80046b6 <HAL_COMP_Start+0x6e>
      {
        wait_loop_index--;
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	3b01      	subs	r3, #1
 80046b4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d1f9      	bne.n	80046b0 <HAL_COMP_Start+0x68>
 80046bc:	e001      	b.n	80046c2 <HAL_COMP_Start+0x7a>
      }
    }
    else
    {
      status = HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80046c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3714      	adds	r7, #20
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr
 80046d0:	20000000 	.word	0x20000000
 80046d4:	431bde83 	.word	0x431bde83

080046d8 <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ handler.
  * @param  hcomp  COMP handle
  * @retval None
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a17      	ldr	r2, [pc, #92]	@ (8004744 <HAL_COMP_IRQHandler+0x6c>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d012      	beq.n	8004710 <HAL_COMP_IRQHandler+0x38>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a16      	ldr	r2, [pc, #88]	@ (8004748 <HAL_COMP_IRQHandler+0x70>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d00a      	beq.n	800470a <HAL_COMP_IRQHandler+0x32>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a14      	ldr	r2, [pc, #80]	@ (800474c <HAL_COMP_IRQHandler+0x74>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d102      	bne.n	8004704 <HAL_COMP_IRQHandler+0x2c>
 80046fe:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8004702:	e007      	b.n	8004714 <HAL_COMP_IRQHandler+0x3c>
 8004704:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004708:	e004      	b.n	8004714 <HAL_COMP_IRQHandler+0x3c>
 800470a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800470e:	e001      	b.n	8004714 <HAL_COMP_IRQHandler+0x3c>
 8004710:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004714:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_comp_exti_flag_set = 0UL;
 8004716:	2300      	movs	r3, #0
 8004718:	60fb      	str	r3, [r7, #12]
    {
      tmp_comp_exti_flag_set = 1UL;
    }
  }
#else
  if (LL_EXTI_IsActiveFlag_0_31(exti_line) != 0UL)
 800471a:	68b8      	ldr	r0, [r7, #8]
 800471c:	f7ff fe92 	bl	8004444 <LL_EXTI_IsActiveFlag_0_31>
 8004720:	4603      	mov	r3, r0
 8004722:	2b00      	cmp	r3, #0
 8004724:	d001      	beq.n	800472a <HAL_COMP_IRQHandler+0x52>
  {
    tmp_comp_exti_flag_set = 1UL;
 8004726:	2301      	movs	r3, #1
 8004728:	60fb      	str	r3, [r7, #12]
  }
#endif /* COMP7 */

  if (tmp_comp_exti_flag_set != 0UL)
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d005      	beq.n	800473c <HAL_COMP_IRQHandler+0x64>
    else
    {
      LL_EXTI_ClearFlag_0_31(exti_line);
    }
#else
    LL_EXTI_ClearFlag_0_31(exti_line);
 8004730:	68b8      	ldr	r0, [r7, #8]
 8004732:	f7ff fe9d 	bl	8004470 <LL_EXTI_ClearFlag_0_31>

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 f80a 	bl	8004750 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }
}
 800473c:	bf00      	nop
 800473e:	3710      	adds	r7, #16
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}
 8004744:	40010200 	.word	0x40010200
 8004748:	40010204 	.word	0x40010204
 800474c:	40010208 	.word	0x40010208

08004750 <HAL_COMP_TriggerCallback>:
  * @brief  Comparator trigger callback.
  * @param  hcomp  COMP handle
  * @retval None
  */
__weak void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp)
{
 8004750:	b480      	push	{r7}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  UNUSED(hcomp);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_COMP_TriggerCallback should be implemented in the user file
   */
}
 8004758:	bf00      	nop
 800475a:	370c      	adds	r7, #12
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr

08004764 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004764:	b480      	push	{r7}
 8004766:	b085      	sub	sp, #20
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f003 0307 	and.w	r3, r3, #7
 8004772:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004774:	4b0c      	ldr	r3, [pc, #48]	@ (80047a8 <__NVIC_SetPriorityGrouping+0x44>)
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800477a:	68ba      	ldr	r2, [r7, #8]
 800477c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004780:	4013      	ands	r3, r2
 8004782:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800478c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004790:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004794:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004796:	4a04      	ldr	r2, [pc, #16]	@ (80047a8 <__NVIC_SetPriorityGrouping+0x44>)
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	60d3      	str	r3, [r2, #12]
}
 800479c:	bf00      	nop
 800479e:	3714      	adds	r7, #20
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr
 80047a8:	e000ed00 	.word	0xe000ed00

080047ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80047ac:	b480      	push	{r7}
 80047ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80047b0:	4b04      	ldr	r3, [pc, #16]	@ (80047c4 <__NVIC_GetPriorityGrouping+0x18>)
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	0a1b      	lsrs	r3, r3, #8
 80047b6:	f003 0307 	and.w	r3, r3, #7
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr
 80047c4:	e000ed00 	.word	0xe000ed00

080047c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	4603      	mov	r3, r0
 80047d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	db0b      	blt.n	80047f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047da:	79fb      	ldrb	r3, [r7, #7]
 80047dc:	f003 021f 	and.w	r2, r3, #31
 80047e0:	4907      	ldr	r1, [pc, #28]	@ (8004800 <__NVIC_EnableIRQ+0x38>)
 80047e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047e6:	095b      	lsrs	r3, r3, #5
 80047e8:	2001      	movs	r0, #1
 80047ea:	fa00 f202 	lsl.w	r2, r0, r2
 80047ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80047f2:	bf00      	nop
 80047f4:	370c      	adds	r7, #12
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr
 80047fe:	bf00      	nop
 8004800:	e000e100 	.word	0xe000e100

08004804 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
 800480a:	4603      	mov	r3, r0
 800480c:	6039      	str	r1, [r7, #0]
 800480e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004814:	2b00      	cmp	r3, #0
 8004816:	db0a      	blt.n	800482e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	b2da      	uxtb	r2, r3
 800481c:	490c      	ldr	r1, [pc, #48]	@ (8004850 <__NVIC_SetPriority+0x4c>)
 800481e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004822:	0112      	lsls	r2, r2, #4
 8004824:	b2d2      	uxtb	r2, r2
 8004826:	440b      	add	r3, r1
 8004828:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800482c:	e00a      	b.n	8004844 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	b2da      	uxtb	r2, r3
 8004832:	4908      	ldr	r1, [pc, #32]	@ (8004854 <__NVIC_SetPriority+0x50>)
 8004834:	79fb      	ldrb	r3, [r7, #7]
 8004836:	f003 030f 	and.w	r3, r3, #15
 800483a:	3b04      	subs	r3, #4
 800483c:	0112      	lsls	r2, r2, #4
 800483e:	b2d2      	uxtb	r2, r2
 8004840:	440b      	add	r3, r1
 8004842:	761a      	strb	r2, [r3, #24]
}
 8004844:	bf00      	nop
 8004846:	370c      	adds	r7, #12
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr
 8004850:	e000e100 	.word	0xe000e100
 8004854:	e000ed00 	.word	0xe000ed00

08004858 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004858:	b480      	push	{r7}
 800485a:	b089      	sub	sp, #36	@ 0x24
 800485c:	af00      	add	r7, sp, #0
 800485e:	60f8      	str	r0, [r7, #12]
 8004860:	60b9      	str	r1, [r7, #8]
 8004862:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f003 0307 	and.w	r3, r3, #7
 800486a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	f1c3 0307 	rsb	r3, r3, #7
 8004872:	2b04      	cmp	r3, #4
 8004874:	bf28      	it	cs
 8004876:	2304      	movcs	r3, #4
 8004878:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	3304      	adds	r3, #4
 800487e:	2b06      	cmp	r3, #6
 8004880:	d902      	bls.n	8004888 <NVIC_EncodePriority+0x30>
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	3b03      	subs	r3, #3
 8004886:	e000      	b.n	800488a <NVIC_EncodePriority+0x32>
 8004888:	2300      	movs	r3, #0
 800488a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800488c:	f04f 32ff 	mov.w	r2, #4294967295
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	fa02 f303 	lsl.w	r3, r2, r3
 8004896:	43da      	mvns	r2, r3
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	401a      	ands	r2, r3
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80048a0:	f04f 31ff 	mov.w	r1, #4294967295
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	fa01 f303 	lsl.w	r3, r1, r3
 80048aa:	43d9      	mvns	r1, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048b0:	4313      	orrs	r3, r2
         );
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3724      	adds	r7, #36	@ 0x24
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr
	...

080048c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b082      	sub	sp, #8
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	3b01      	subs	r3, #1
 80048cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80048d0:	d301      	bcc.n	80048d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80048d2:	2301      	movs	r3, #1
 80048d4:	e00f      	b.n	80048f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80048d6:	4a0a      	ldr	r2, [pc, #40]	@ (8004900 <SysTick_Config+0x40>)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	3b01      	subs	r3, #1
 80048dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80048de:	210f      	movs	r1, #15
 80048e0:	f04f 30ff 	mov.w	r0, #4294967295
 80048e4:	f7ff ff8e 	bl	8004804 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80048e8:	4b05      	ldr	r3, [pc, #20]	@ (8004900 <SysTick_Config+0x40>)
 80048ea:	2200      	movs	r2, #0
 80048ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80048ee:	4b04      	ldr	r3, [pc, #16]	@ (8004900 <SysTick_Config+0x40>)
 80048f0:	2207      	movs	r2, #7
 80048f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80048f4:	2300      	movs	r3, #0
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3708      	adds	r7, #8
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}
 80048fe:	bf00      	nop
 8004900:	e000e010 	.word	0xe000e010

08004904 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b082      	sub	sp, #8
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f7ff ff29 	bl	8004764 <__NVIC_SetPriorityGrouping>
}
 8004912:	bf00      	nop
 8004914:	3708      	adds	r7, #8
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}

0800491a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800491a:	b580      	push	{r7, lr}
 800491c:	b086      	sub	sp, #24
 800491e:	af00      	add	r7, sp, #0
 8004920:	4603      	mov	r3, r0
 8004922:	60b9      	str	r1, [r7, #8]
 8004924:	607a      	str	r2, [r7, #4]
 8004926:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004928:	f7ff ff40 	bl	80047ac <__NVIC_GetPriorityGrouping>
 800492c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	68b9      	ldr	r1, [r7, #8]
 8004932:	6978      	ldr	r0, [r7, #20]
 8004934:	f7ff ff90 	bl	8004858 <NVIC_EncodePriority>
 8004938:	4602      	mov	r2, r0
 800493a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800493e:	4611      	mov	r1, r2
 8004940:	4618      	mov	r0, r3
 8004942:	f7ff ff5f 	bl	8004804 <__NVIC_SetPriority>
}
 8004946:	bf00      	nop
 8004948:	3718      	adds	r7, #24
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}

0800494e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800494e:	b580      	push	{r7, lr}
 8004950:	b082      	sub	sp, #8
 8004952:	af00      	add	r7, sp, #0
 8004954:	4603      	mov	r3, r0
 8004956:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004958:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800495c:	4618      	mov	r0, r3
 800495e:	f7ff ff33 	bl	80047c8 <__NVIC_EnableIRQ>
}
 8004962:	bf00      	nop
 8004964:	3708      	adds	r7, #8
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}

0800496a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800496a:	b580      	push	{r7, lr}
 800496c:	b082      	sub	sp, #8
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f7ff ffa4 	bl	80048c0 <SysTick_Config>
 8004978:	4603      	mov	r3, r0
}
 800497a:	4618      	mov	r0, r3
 800497c:	3708      	adds	r7, #8
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}

08004982 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004982:	b580      	push	{r7, lr}
 8004984:	b082      	sub	sp, #8
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d101      	bne.n	8004994 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e014      	b.n	80049be <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	791b      	ldrb	r3, [r3, #4]
 8004998:	b2db      	uxtb	r3, r3
 800499a:	2b00      	cmp	r3, #0
 800499c:	d105      	bne.n	80049aa <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f7fc f8a7 	bl	8000af8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2202      	movs	r2, #2
 80049ae:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2201      	movs	r2, #1
 80049ba:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80049bc:	2300      	movs	r3, #0
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3708      	adds	r7, #8
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
	...

080049c8 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b085      	sub	sp, #20
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d101      	bne.n	80049dc <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e056      	b.n	8004a8a <HAL_DAC_Start+0xc2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	795b      	ldrb	r3, [r3, #5]
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d101      	bne.n	80049e8 <HAL_DAC_Start+0x20>
 80049e4:	2302      	movs	r3, #2
 80049e6:	e050      	b.n	8004a8a <HAL_DAC_Start+0xc2>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2202      	movs	r2, #2
 80049f2:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	6819      	ldr	r1, [r3, #0]
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	f003 0310 	and.w	r3, r3, #16
 8004a00:	2201      	movs	r2, #1
 8004a02:	409a      	lsls	r2, r3
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	430a      	orrs	r2, r1
 8004a0a:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  /* Wait loop initialization and execution */
  /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed 32 */
  /*       bits register capacity and handle low frequency. */
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004a0c:	4b22      	ldr	r3, [pc, #136]	@ (8004a98 <HAL_DAC_Start+0xd0>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	099b      	lsrs	r3, r3, #6
 8004a12:	4a22      	ldr	r2, [pc, #136]	@ (8004a9c <HAL_DAC_Start+0xd4>)
 8004a14:	fba2 2303 	umull	r2, r3, r2, r3
 8004a18:	099b      	lsrs	r3, r3, #6
 8004a1a:	3301      	adds	r3, #1
 8004a1c:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 8004a1e:	e002      	b.n	8004a26 <HAL_DAC_Start+0x5e>
  {
    wait_loop_index--;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	3b01      	subs	r3, #1
 8004a24:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d1f9      	bne.n	8004a20 <HAL_DAC_Start+0x58>
  }

  if (Channel == DAC_CHANNEL_1)
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d10f      	bne.n	8004a52 <HAL_DAC_Start+0x8a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8004a3c:	2b02      	cmp	r3, #2
 8004a3e:	d11d      	bne.n	8004a7c <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	685a      	ldr	r2, [r3, #4]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f042 0201 	orr.w	r2, r2, #1
 8004a4e:	605a      	str	r2, [r3, #4]
 8004a50:	e014      	b.n	8004a7c <HAL_DAC_Start+0xb4>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	f003 0310 	and.w	r3, r3, #16
 8004a62:	2102      	movs	r1, #2
 8004a64:	fa01 f303 	lsl.w	r3, r1, r3
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d107      	bne.n	8004a7c <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	685a      	ldr	r2, [r3, #4]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f042 0202 	orr.w	r2, r2, #2
 8004a7a:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004a88:	2300      	movs	r3, #0
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3714      	adds	r7, #20
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr
 8004a96:	bf00      	nop
 8004a98:	20000000 	.word	0x20000000
 8004a9c:	053e2d63 	.word	0x053e2d63

08004aa0 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b087      	sub	sp, #28
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	60f8      	str	r0, [r7, #12]
 8004aa8:	60b9      	str	r1, [r7, #8]
 8004aaa:	607a      	str	r2, [r7, #4]
 8004aac:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d101      	bne.n	8004abc <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e018      	b.n	8004aee <HAL_DAC_SetValue+0x4e>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d105      	bne.n	8004ada <HAL_DAC_SetValue+0x3a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8004ace:	697a      	ldr	r2, [r7, #20]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	4413      	add	r3, r2
 8004ad4:	3308      	adds	r3, #8
 8004ad6:	617b      	str	r3, [r7, #20]
 8004ad8:	e004      	b.n	8004ae4 <HAL_DAC_SetValue+0x44>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8004ada:	697a      	ldr	r2, [r7, #20]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	4413      	add	r3, r2
 8004ae0:	3314      	adds	r3, #20
 8004ae2:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8004aec:	2300      	movs	r3, #0
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	371c      	adds	r7, #28
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr
	...

08004afc <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b08a      	sub	sp, #40	@ 0x28
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	60f8      	str	r0, [r7, #12]
 8004b04:	60b9      	str	r1, [r7, #8]
 8004b06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d002      	beq.n	8004b18 <HAL_DAC_ConfigChannel+0x1c>
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d101      	bne.n	8004b1c <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e19e      	b.n	8004e5a <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	795b      	ldrb	r3, [r3, #5]
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d101      	bne.n	8004b28 <HAL_DAC_ConfigChannel+0x2c>
 8004b24:	2302      	movs	r3, #2
 8004b26:	e198      	b.n	8004e5a <HAL_DAC_ConfigChannel+0x35e>
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2202      	movs	r2, #2
 8004b32:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	2b04      	cmp	r3, #4
 8004b3a:	d17a      	bne.n	8004c32 <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004b3c:	f7fc ffb2 	bl	8001aa4 <HAL_GetTick>
 8004b40:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d13d      	bne.n	8004bc4 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004b48:	e018      	b.n	8004b7c <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004b4a:	f7fc ffab 	bl	8001aa4 <HAL_GetTick>
 8004b4e:	4602      	mov	r2, r0
 8004b50:	69bb      	ldr	r3, [r7, #24]
 8004b52:	1ad3      	subs	r3, r2, r3
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d911      	bls.n	8004b7c <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b5e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d00a      	beq.n	8004b7c <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	f043 0208 	orr.w	r2, r3, #8
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2203      	movs	r2, #3
 8004b76:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004b78:	2303      	movs	r3, #3
 8004b7a:	e16e      	b.n	8004e5a <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b82:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d1df      	bne.n	8004b4a <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	68ba      	ldr	r2, [r7, #8]
 8004b90:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004b92:	641a      	str	r2, [r3, #64]	@ 0x40
 8004b94:	e020      	b.n	8004bd8 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004b96:	f7fc ff85 	bl	8001aa4 <HAL_GetTick>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	69bb      	ldr	r3, [r7, #24]
 8004b9e:	1ad3      	subs	r3, r2, r3
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d90f      	bls.n	8004bc4 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	da0a      	bge.n	8004bc4 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	691b      	ldr	r3, [r3, #16]
 8004bb2:	f043 0208 	orr.w	r2, r3, #8
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2203      	movs	r2, #3
 8004bbe:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004bc0:	2303      	movs	r3, #3
 8004bc2:	e14a      	b.n	8004e5a <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	dbe3      	blt.n	8004b96 <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	68ba      	ldr	r2, [r7, #8]
 8004bd4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004bd6:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f003 0310 	and.w	r3, r3, #16
 8004be4:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8004be8:	fa01 f303 	lsl.w	r3, r1, r3
 8004bec:	43db      	mvns	r3, r3
 8004bee:	ea02 0103 	and.w	r1, r2, r3
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f003 0310 	and.w	r3, r3, #16
 8004bfc:	409a      	lsls	r2, r3
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	430a      	orrs	r2, r1
 8004c04:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f003 0310 	and.w	r3, r3, #16
 8004c12:	21ff      	movs	r1, #255	@ 0xff
 8004c14:	fa01 f303 	lsl.w	r3, r1, r3
 8004c18:	43db      	mvns	r3, r3
 8004c1a:	ea02 0103 	and.w	r1, r2, r3
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f003 0310 	and.w	r3, r3, #16
 8004c28:	409a      	lsls	r2, r3
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	430a      	orrs	r2, r1
 8004c30:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	69db      	ldr	r3, [r3, #28]
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d11d      	bne.n	8004c76 <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c40:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f003 0310 	and.w	r3, r3, #16
 8004c48:	221f      	movs	r2, #31
 8004c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c4e:	43db      	mvns	r3, r3
 8004c50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c52:	4013      	ands	r3, r2
 8004c54:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	6a1b      	ldr	r3, [r3, #32]
 8004c5a:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f003 0310 	and.w	r3, r3, #16
 8004c62:	697a      	ldr	r2, [r7, #20]
 8004c64:	fa02 f303 	lsl.w	r3, r2, r3
 8004c68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c74:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c7c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f003 0310 	and.w	r3, r3, #16
 8004c84:	2207      	movs	r2, #7
 8004c86:	fa02 f303 	lsl.w	r3, r2, r3
 8004c8a:	43db      	mvns	r3, r3
 8004c8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c8e:	4013      	ands	r3, r2
 8004c90:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	699b      	ldr	r3, [r3, #24]
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d102      	bne.n	8004ca0 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	623b      	str	r3, [r7, #32]
 8004c9e:	e00f      	b.n	8004cc0 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	699b      	ldr	r3, [r3, #24]
 8004ca4:	2b02      	cmp	r3, #2
 8004ca6:	d102      	bne.n	8004cae <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	623b      	str	r3, [r7, #32]
 8004cac:	e008      	b.n	8004cc0 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	695b      	ldr	r3, [r3, #20]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d102      	bne.n	8004cbc <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	623b      	str	r3, [r7, #32]
 8004cba:	e001      	b.n	8004cc0 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	689a      	ldr	r2, [r3, #8]
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	695b      	ldr	r3, [r3, #20]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	6a3a      	ldr	r2, [r7, #32]
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f003 0310 	and.w	r3, r3, #16
 8004cd6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004cda:	fa02 f303 	lsl.w	r3, r2, r3
 8004cde:	43db      	mvns	r3, r3
 8004ce0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	791b      	ldrb	r3, [r3, #4]
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d102      	bne.n	8004cf4 <HAL_DAC_ConfigChannel+0x1f8>
 8004cee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004cf2:	e000      	b.n	8004cf6 <HAL_DAC_ConfigChannel+0x1fa>
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	697a      	ldr	r2, [r7, #20]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	f003 0310 	and.w	r3, r3, #16
 8004d02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d06:	fa02 f303 	lsl.w	r3, r2, r3
 8004d0a:	43db      	mvns	r3, r3
 8004d0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d0e:	4013      	ands	r3, r2
 8004d10:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	795b      	ldrb	r3, [r3, #5]
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d102      	bne.n	8004d20 <HAL_DAC_ConfigChannel+0x224>
 8004d1a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004d1e:	e000      	b.n	8004d22 <HAL_DAC_ConfigChannel+0x226>
 8004d20:	2300      	movs	r3, #0
 8004d22:	697a      	ldr	r2, [r7, #20]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8004d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d2a:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8004d2e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	2b02      	cmp	r3, #2
 8004d36:	d114      	bne.n	8004d62 <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8004d38:	f002 f834 	bl	8006da4 <HAL_RCC_GetHCLKFreq>
 8004d3c:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	4a48      	ldr	r2, [pc, #288]	@ (8004e64 <HAL_DAC_ConfigChannel+0x368>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d904      	bls.n	8004d50 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8004d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d48:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d4e:	e00f      	b.n	8004d70 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	4a45      	ldr	r2, [pc, #276]	@ (8004e68 <HAL_DAC_ConfigChannel+0x36c>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d90a      	bls.n	8004d6e <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8004d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d5a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004d5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d60:	e006      	b.n	8004d70 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d6c:	e000      	b.n	8004d70 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8004d6e:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f003 0310 	and.w	r3, r3, #16
 8004d76:	697a      	ldr	r2, [r7, #20]
 8004d78:	fa02 f303 	lsl.w	r3, r2, r3
 8004d7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d88:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	6819      	ldr	r1, [r3, #0]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f003 0310 	and.w	r3, r3, #16
 8004d96:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d9e:	43da      	mvns	r2, r3
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	400a      	ands	r2, r1
 8004da6:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f003 0310 	and.w	r3, r3, #16
 8004db6:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8004dba:	fa02 f303 	lsl.w	r3, r2, r3
 8004dbe:	43db      	mvns	r3, r3
 8004dc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004dc2:	4013      	ands	r3, r2
 8004dc4:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f003 0310 	and.w	r3, r3, #16
 8004dd2:	697a      	ldr	r2, [r7, #20]
 8004dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004de4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	6819      	ldr	r1, [r3, #0]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f003 0310 	and.w	r3, r3, #16
 8004df2:	22c0      	movs	r2, #192	@ 0xc0
 8004df4:	fa02 f303 	lsl.w	r3, r2, r3
 8004df8:	43da      	mvns	r2, r3
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	400a      	ands	r2, r1
 8004e00:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	089b      	lsrs	r3, r3, #2
 8004e08:	f003 030f 	and.w	r3, r3, #15
 8004e0c:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	691b      	ldr	r3, [r3, #16]
 8004e12:	089b      	lsrs	r3, r3, #2
 8004e14:	021b      	lsls	r3, r3, #8
 8004e16:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004e1a:	697a      	ldr	r2, [r7, #20]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f003 0310 	and.w	r3, r3, #16
 8004e2c:	f640 710f 	movw	r1, #3855	@ 0xf0f
 8004e30:	fa01 f303 	lsl.w	r3, r1, r3
 8004e34:	43db      	mvns	r3, r3
 8004e36:	ea02 0103 	and.w	r1, r2, r3
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f003 0310 	and.w	r3, r3, #16
 8004e40:	697a      	ldr	r2, [r7, #20]
 8004e42:	409a      	lsls	r2, r3
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	430a      	orrs	r2, r1
 8004e4a:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2200      	movs	r2, #0
 8004e56:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8004e58:	7ffb      	ldrb	r3, [r7, #31]
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3728      	adds	r7, #40	@ 0x28
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}
 8004e62:	bf00      	nop
 8004e64:	09896800 	.word	0x09896800
 8004e68:	04c4b400 	.word	0x04c4b400

08004e6c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b084      	sub	sp, #16
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d101      	bne.n	8004e7e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e08d      	b.n	8004f9a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	461a      	mov	r2, r3
 8004e84:	4b47      	ldr	r3, [pc, #284]	@ (8004fa4 <HAL_DMA_Init+0x138>)
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d80f      	bhi.n	8004eaa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	461a      	mov	r2, r3
 8004e90:	4b45      	ldr	r3, [pc, #276]	@ (8004fa8 <HAL_DMA_Init+0x13c>)
 8004e92:	4413      	add	r3, r2
 8004e94:	4a45      	ldr	r2, [pc, #276]	@ (8004fac <HAL_DMA_Init+0x140>)
 8004e96:	fba2 2303 	umull	r2, r3, r2, r3
 8004e9a:	091b      	lsrs	r3, r3, #4
 8004e9c:	009a      	lsls	r2, r3, #2
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a42      	ldr	r2, [pc, #264]	@ (8004fb0 <HAL_DMA_Init+0x144>)
 8004ea6:	641a      	str	r2, [r3, #64]	@ 0x40
 8004ea8:	e00e      	b.n	8004ec8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	461a      	mov	r2, r3
 8004eb0:	4b40      	ldr	r3, [pc, #256]	@ (8004fb4 <HAL_DMA_Init+0x148>)
 8004eb2:	4413      	add	r3, r2
 8004eb4:	4a3d      	ldr	r2, [pc, #244]	@ (8004fac <HAL_DMA_Init+0x140>)
 8004eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8004eba:	091b      	lsrs	r3, r3, #4
 8004ebc:	009a      	lsls	r2, r3, #2
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4a3c      	ldr	r2, [pc, #240]	@ (8004fb8 <HAL_DMA_Init+0x14c>)
 8004ec6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2202      	movs	r2, #2
 8004ecc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004ede:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ee2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004eec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ef8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	699b      	ldr	r3, [r3, #24]
 8004efe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f04:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a1b      	ldr	r3, [r3, #32]
 8004f0a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004f0c:	68fa      	ldr	r2, [r7, #12]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	68fa      	ldr	r2, [r7, #12]
 8004f18:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f000 fa76 	bl	800540c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004f28:	d102      	bne.n	8004f30 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	685a      	ldr	r2, [r3, #4]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f38:	b2d2      	uxtb	r2, r2
 8004f3a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004f44:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d010      	beq.n	8004f70 <HAL_DMA_Init+0x104>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	2b04      	cmp	r3, #4
 8004f54:	d80c      	bhi.n	8004f70 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f000 fa96 	bl	8005488 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f60:	2200      	movs	r2, #0
 8004f62:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004f6c:	605a      	str	r2, [r3, #4]
 8004f6e:	e008      	b.n	8004f82 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3710      	adds	r7, #16
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	40020407 	.word	0x40020407
 8004fa8:	bffdfff8 	.word	0xbffdfff8
 8004fac:	cccccccd 	.word	0xcccccccd
 8004fb0:	40020000 	.word	0x40020000
 8004fb4:	bffdfbf8 	.word	0xbffdfbf8
 8004fb8:	40020400 	.word	0x40020400

08004fbc <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b086      	sub	sp, #24
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	60f8      	str	r0, [r7, #12]
 8004fc4:	60b9      	str	r1, [r7, #8]
 8004fc6:	607a      	str	r2, [r7, #4]
 8004fc8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d101      	bne.n	8004fdc <HAL_DMA_Start_IT+0x20>
 8004fd8:	2302      	movs	r3, #2
 8004fda:	e066      	b.n	80050aa <HAL_DMA_Start_IT+0xee>
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d155      	bne.n	800509c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2202      	movs	r2, #2
 8004ff4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f022 0201 	bic.w	r2, r2, #1
 800500c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	68b9      	ldr	r1, [r7, #8]
 8005014:	68f8      	ldr	r0, [r7, #12]
 8005016:	f000 f9bb 	bl	8005390 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800501e:	2b00      	cmp	r3, #0
 8005020:	d008      	beq.n	8005034 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f042 020e 	orr.w	r2, r2, #14
 8005030:	601a      	str	r2, [r3, #0]
 8005032:	e00f      	b.n	8005054 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f022 0204 	bic.w	r2, r2, #4
 8005042:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f042 020a 	orr.w	r2, r2, #10
 8005052:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800505e:	2b00      	cmp	r3, #0
 8005060:	d007      	beq.n	8005072 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800506c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005070:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005076:	2b00      	cmp	r3, #0
 8005078:	d007      	beq.n	800508a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005084:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005088:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f042 0201 	orr.w	r2, r2, #1
 8005098:	601a      	str	r2, [r3, #0]
 800509a:	e005      	b.n	80050a8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2200      	movs	r2, #0
 80050a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80050a4:	2302      	movs	r3, #2
 80050a6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80050a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3718      	adds	r7, #24
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}

080050b2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80050b2:	b480      	push	{r7}
 80050b4:	b085      	sub	sp, #20
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050ba:	2300      	movs	r3, #0
 80050bc:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	2b02      	cmp	r3, #2
 80050c8:	d005      	beq.n	80050d6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2204      	movs	r2, #4
 80050ce:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	73fb      	strb	r3, [r7, #15]
 80050d4:	e037      	b.n	8005146 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f022 020e 	bic.w	r2, r2, #14
 80050e4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80050f4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f022 0201 	bic.w	r2, r2, #1
 8005104:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800510a:	f003 021f 	and.w	r2, r3, #31
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005112:	2101      	movs	r1, #1
 8005114:	fa01 f202 	lsl.w	r2, r1, r2
 8005118:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005122:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005128:	2b00      	cmp	r3, #0
 800512a:	d00c      	beq.n	8005146 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005136:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800513a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005144:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2201      	movs	r2, #1
 800514a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2200      	movs	r2, #0
 8005152:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8005156:	7bfb      	ldrb	r3, [r7, #15]
}
 8005158:	4618      	mov	r0, r3
 800515a:	3714      	adds	r7, #20
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr

08005164 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b084      	sub	sp, #16
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800516c:	2300      	movs	r3, #0
 800516e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005176:	b2db      	uxtb	r3, r3
 8005178:	2b02      	cmp	r3, #2
 800517a:	d00d      	beq.n	8005198 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2204      	movs	r2, #4
 8005180:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2201      	movs	r2, #1
 8005186:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2200      	movs	r2, #0
 800518e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	73fb      	strb	r3, [r7, #15]
 8005196:	e047      	b.n	8005228 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f022 020e 	bic.w	r2, r2, #14
 80051a6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f022 0201 	bic.w	r2, r2, #1
 80051b6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051c2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80051c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051cc:	f003 021f 	and.w	r2, r3, #31
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051d4:	2101      	movs	r1, #1
 80051d6:	fa01 f202 	lsl.w	r2, r1, r2
 80051da:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80051e4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d00c      	beq.n	8005208 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051f8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80051fc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005206:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2201      	movs	r2, #1
 800520c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800521c:	2b00      	cmp	r3, #0
 800521e:	d003      	beq.n	8005228 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	4798      	blx	r3
    }
  }
  return status;
 8005228:	7bfb      	ldrb	r3, [r7, #15]
}
 800522a:	4618      	mov	r0, r3
 800522c:	3710      	adds	r7, #16
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}

08005232 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005232:	b580      	push	{r7, lr}
 8005234:	b084      	sub	sp, #16
 8005236:	af00      	add	r7, sp, #0
 8005238:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800524e:	f003 031f 	and.w	r3, r3, #31
 8005252:	2204      	movs	r2, #4
 8005254:	409a      	lsls	r2, r3
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	4013      	ands	r3, r2
 800525a:	2b00      	cmp	r3, #0
 800525c:	d026      	beq.n	80052ac <HAL_DMA_IRQHandler+0x7a>
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	f003 0304 	and.w	r3, r3, #4
 8005264:	2b00      	cmp	r3, #0
 8005266:	d021      	beq.n	80052ac <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 0320 	and.w	r3, r3, #32
 8005272:	2b00      	cmp	r3, #0
 8005274:	d107      	bne.n	8005286 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f022 0204 	bic.w	r2, r2, #4
 8005284:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800528a:	f003 021f 	and.w	r2, r3, #31
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005292:	2104      	movs	r1, #4
 8005294:	fa01 f202 	lsl.w	r2, r1, r2
 8005298:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d071      	beq.n	8005386 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80052aa:	e06c      	b.n	8005386 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052b0:	f003 031f 	and.w	r3, r3, #31
 80052b4:	2202      	movs	r2, #2
 80052b6:	409a      	lsls	r2, r3
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	4013      	ands	r3, r2
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d02e      	beq.n	800531e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	f003 0302 	and.w	r3, r3, #2
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d029      	beq.n	800531e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 0320 	and.w	r3, r3, #32
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d10b      	bne.n	80052f0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f022 020a 	bic.w	r2, r2, #10
 80052e6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052f4:	f003 021f 	and.w	r2, r3, #31
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052fc:	2102      	movs	r1, #2
 80052fe:	fa01 f202 	lsl.w	r2, r1, r2
 8005302:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2200      	movs	r2, #0
 8005308:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005310:	2b00      	cmp	r3, #0
 8005312:	d038      	beq.n	8005386 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800531c:	e033      	b.n	8005386 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005322:	f003 031f 	and.w	r3, r3, #31
 8005326:	2208      	movs	r2, #8
 8005328:	409a      	lsls	r2, r3
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	4013      	ands	r3, r2
 800532e:	2b00      	cmp	r3, #0
 8005330:	d02a      	beq.n	8005388 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	f003 0308 	and.w	r3, r3, #8
 8005338:	2b00      	cmp	r3, #0
 800533a:	d025      	beq.n	8005388 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f022 020e 	bic.w	r2, r2, #14
 800534a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005350:	f003 021f 	and.w	r2, r3, #31
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005358:	2101      	movs	r1, #1
 800535a:	fa01 f202 	lsl.w	r2, r1, r2
 800535e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2201      	movs	r2, #1
 800536a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800537a:	2b00      	cmp	r3, #0
 800537c:	d004      	beq.n	8005388 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005386:	bf00      	nop
 8005388:	bf00      	nop
}
 800538a:	3710      	adds	r7, #16
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}

08005390 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005390:	b480      	push	{r7}
 8005392:	b085      	sub	sp, #20
 8005394:	af00      	add	r7, sp, #0
 8005396:	60f8      	str	r0, [r7, #12]
 8005398:	60b9      	str	r1, [r7, #8]
 800539a:	607a      	str	r2, [r7, #4]
 800539c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053a2:	68fa      	ldr	r2, [r7, #12]
 80053a4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80053a6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d004      	beq.n	80053ba <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053b4:	68fa      	ldr	r2, [r7, #12]
 80053b6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80053b8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053be:	f003 021f 	and.w	r2, r3, #31
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053c6:	2101      	movs	r1, #1
 80053c8:	fa01 f202 	lsl.w	r2, r1, r2
 80053cc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	683a      	ldr	r2, [r7, #0]
 80053d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	2b10      	cmp	r3, #16
 80053dc:	d108      	bne.n	80053f0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	68ba      	ldr	r2, [r7, #8]
 80053ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80053ee:	e007      	b.n	8005400 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68ba      	ldr	r2, [r7, #8]
 80053f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	60da      	str	r2, [r3, #12]
}
 8005400:	bf00      	nop
 8005402:	3714      	adds	r7, #20
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr

0800540c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800540c:	b480      	push	{r7}
 800540e:	b087      	sub	sp, #28
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	461a      	mov	r2, r3
 800541a:	4b16      	ldr	r3, [pc, #88]	@ (8005474 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800541c:	429a      	cmp	r2, r3
 800541e:	d802      	bhi.n	8005426 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005420:	4b15      	ldr	r3, [pc, #84]	@ (8005478 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005422:	617b      	str	r3, [r7, #20]
 8005424:	e001      	b.n	800542a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8005426:	4b15      	ldr	r3, [pc, #84]	@ (800547c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005428:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	b2db      	uxtb	r3, r3
 8005434:	3b08      	subs	r3, #8
 8005436:	4a12      	ldr	r2, [pc, #72]	@ (8005480 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005438:	fba2 2303 	umull	r2, r3, r2, r3
 800543c:	091b      	lsrs	r3, r3, #4
 800543e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005444:	089b      	lsrs	r3, r3, #2
 8005446:	009a      	lsls	r2, r3, #2
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	4413      	add	r3, r2
 800544c:	461a      	mov	r2, r3
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	4a0b      	ldr	r2, [pc, #44]	@ (8005484 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005456:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f003 031f 	and.w	r3, r3, #31
 800545e:	2201      	movs	r2, #1
 8005460:	409a      	lsls	r2, r3
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005466:	bf00      	nop
 8005468:	371c      	adds	r7, #28
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr
 8005472:	bf00      	nop
 8005474:	40020407 	.word	0x40020407
 8005478:	40020800 	.word	0x40020800
 800547c:	40020820 	.word	0x40020820
 8005480:	cccccccd 	.word	0xcccccccd
 8005484:	40020880 	.word	0x40020880

08005488 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005488:	b480      	push	{r7}
 800548a:	b085      	sub	sp, #20
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	b2db      	uxtb	r3, r3
 8005496:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005498:	68fa      	ldr	r2, [r7, #12]
 800549a:	4b0b      	ldr	r3, [pc, #44]	@ (80054c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800549c:	4413      	add	r3, r2
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	461a      	mov	r2, r3
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4a08      	ldr	r2, [pc, #32]	@ (80054cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80054aa:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	3b01      	subs	r3, #1
 80054b0:	f003 031f 	and.w	r3, r3, #31
 80054b4:	2201      	movs	r2, #1
 80054b6:	409a      	lsls	r2, r3
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80054bc:	bf00      	nop
 80054be:	3714      	adds	r7, #20
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr
 80054c8:	1000823f 	.word	0x1000823f
 80054cc:	40020940 	.word	0x40020940

080054d0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b084      	sub	sp, #16
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d101      	bne.n	80054e2 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	e147      	b.n	8005772 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d106      	bne.n	80054fc <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f7fb fbc0 	bl	8000c7c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	699a      	ldr	r2, [r3, #24]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f022 0210 	bic.w	r2, r2, #16
 800550a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800550c:	f7fc faca 	bl	8001aa4 <HAL_GetTick>
 8005510:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005512:	e012      	b.n	800553a <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005514:	f7fc fac6 	bl	8001aa4 <HAL_GetTick>
 8005518:	4602      	mov	r2, r0
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	1ad3      	subs	r3, r2, r3
 800551e:	2b0a      	cmp	r3, #10
 8005520:	d90b      	bls.n	800553a <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005526:	f043 0201 	orr.w	r2, r3, #1
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2203      	movs	r2, #3
 8005532:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	e11b      	b.n	8005772 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	699b      	ldr	r3, [r3, #24]
 8005540:	f003 0308 	and.w	r3, r3, #8
 8005544:	2b08      	cmp	r3, #8
 8005546:	d0e5      	beq.n	8005514 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	699a      	ldr	r2, [r3, #24]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f042 0201 	orr.w	r2, r2, #1
 8005556:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005558:	f7fc faa4 	bl	8001aa4 <HAL_GetTick>
 800555c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800555e:	e012      	b.n	8005586 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005560:	f7fc faa0 	bl	8001aa4 <HAL_GetTick>
 8005564:	4602      	mov	r2, r0
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	1ad3      	subs	r3, r2, r3
 800556a:	2b0a      	cmp	r3, #10
 800556c:	d90b      	bls.n	8005586 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005572:	f043 0201 	orr.w	r2, r3, #1
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2203      	movs	r2, #3
 800557e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	e0f5      	b.n	8005772 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	699b      	ldr	r3, [r3, #24]
 800558c:	f003 0301 	and.w	r3, r3, #1
 8005590:	2b00      	cmp	r3, #0
 8005592:	d0e5      	beq.n	8005560 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	699a      	ldr	r2, [r3, #24]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f042 0202 	orr.w	r2, r2, #2
 80055a2:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a74      	ldr	r2, [pc, #464]	@ (800577c <HAL_FDCAN_Init+0x2ac>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d103      	bne.n	80055b6 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80055ae:	4a74      	ldr	r2, [pc, #464]	@ (8005780 <HAL_FDCAN_Init+0x2b0>)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	7c1b      	ldrb	r3, [r3, #16]
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d108      	bne.n	80055d0 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	699a      	ldr	r2, [r3, #24]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80055cc:	619a      	str	r2, [r3, #24]
 80055ce:	e007      	b.n	80055e0 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	699a      	ldr	r2, [r3, #24]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80055de:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	7c5b      	ldrb	r3, [r3, #17]
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d108      	bne.n	80055fa <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	699a      	ldr	r2, [r3, #24]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80055f6:	619a      	str	r2, [r3, #24]
 80055f8:	e007      	b.n	800560a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	699a      	ldr	r2, [r3, #24]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005608:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	7c9b      	ldrb	r3, [r3, #18]
 800560e:	2b01      	cmp	r3, #1
 8005610:	d108      	bne.n	8005624 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	699a      	ldr	r2, [r3, #24]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005620:	619a      	str	r2, [r3, #24]
 8005622:	e007      	b.n	8005634 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	699a      	ldr	r2, [r3, #24]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005632:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	699b      	ldr	r3, [r3, #24]
 800563a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	689a      	ldr	r2, [r3, #8]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	430a      	orrs	r2, r1
 8005648:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	699a      	ldr	r2, [r3, #24]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8005658:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	691a      	ldr	r2, [r3, #16]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f022 0210 	bic.w	r2, r2, #16
 8005668:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	68db      	ldr	r3, [r3, #12]
 800566e:	2b01      	cmp	r3, #1
 8005670:	d108      	bne.n	8005684 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	699a      	ldr	r2, [r3, #24]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f042 0204 	orr.w	r2, r2, #4
 8005680:	619a      	str	r2, [r3, #24]
 8005682:	e02c      	b.n	80056de <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d028      	beq.n	80056de <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	68db      	ldr	r3, [r3, #12]
 8005690:	2b02      	cmp	r3, #2
 8005692:	d01c      	beq.n	80056ce <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	699a      	ldr	r2, [r3, #24]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80056a2:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	691a      	ldr	r2, [r3, #16]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f042 0210 	orr.w	r2, r2, #16
 80056b2:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	2b03      	cmp	r3, #3
 80056ba:	d110      	bne.n	80056de <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	699a      	ldr	r2, [r3, #24]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f042 0220 	orr.w	r2, r2, #32
 80056ca:	619a      	str	r2, [r3, #24]
 80056cc:	e007      	b.n	80056de <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	699a      	ldr	r2, [r3, #24]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f042 0220 	orr.w	r2, r2, #32
 80056dc:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	699b      	ldr	r3, [r3, #24]
 80056e2:	3b01      	subs	r3, #1
 80056e4:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	69db      	ldr	r3, [r3, #28]
 80056ea:	3b01      	subs	r3, #1
 80056ec:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80056ee:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6a1b      	ldr	r3, [r3, #32]
 80056f4:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80056f6:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	695b      	ldr	r3, [r3, #20]
 80056fe:	3b01      	subs	r3, #1
 8005700:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005706:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005708:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005712:	d115      	bne.n	8005740 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005718:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800571e:	3b01      	subs	r3, #1
 8005720:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005722:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005728:	3b01      	subs	r3, #1
 800572a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800572c:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005734:	3b01      	subs	r3, #1
 8005736:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800573c:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800573e:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	430a      	orrs	r2, r1
 8005752:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f000 fab6 	bl	8005cc8 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2200      	movs	r2, #0
 8005760:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2200      	movs	r2, #0
 8005766:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8005770:	2300      	movs	r3, #0
}
 8005772:	4618      	mov	r0, r3
 8005774:	3710      	adds	r7, #16
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
 800577a:	bf00      	nop
 800577c:	40006400 	.word	0x40006400
 8005780:	40006500 	.word	0x40006500

08005784 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8005784:	b480      	push	{r7}
 8005786:	b08b      	sub	sp, #44	@ 0x2c
 8005788:	af00      	add	r7, sp, #0
 800578a:	60f8      	str	r0, [r7, #12]
 800578c:	60b9      	str	r1, [r7, #8]
 800578e:	607a      	str	r2, [r7, #4]
 8005790:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8005792:	2300      	movs	r3, #0
 8005794:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800579c:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 800579e:	7efb      	ldrb	r3, [r7, #27]
 80057a0:	2b02      	cmp	r3, #2
 80057a2:	f040 80e8 	bne.w	8005976 <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	2b40      	cmp	r3, #64	@ 0x40
 80057aa:	d137      	bne.n	800581c <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057b4:	f003 030f 	and.w	r3, r3, #15
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d107      	bne.n	80057cc <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057c0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	e0db      	b.n	8005984 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057d4:	0e1b      	lsrs	r3, r3, #24
 80057d6:	f003 0301 	and.w	r3, r3, #1
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d10a      	bne.n	80057f4 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80057e6:	0a5b      	lsrs	r3, r3, #9
 80057e8:	f003 0301 	and.w	r3, r3, #1
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d101      	bne.n	80057f4 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80057f0:	2301      	movs	r3, #1
 80057f2:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057fc:	0a1b      	lsrs	r3, r3, #8
 80057fe:	f003 0303 	and.w	r3, r3, #3
 8005802:	69fa      	ldr	r2, [r7, #28]
 8005804:	4413      	add	r3, r2
 8005806:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 800580c:	69fa      	ldr	r2, [r7, #28]
 800580e:	4613      	mov	r3, r2
 8005810:	00db      	lsls	r3, r3, #3
 8005812:	4413      	add	r3, r2
 8005814:	00db      	lsls	r3, r3, #3
 8005816:	440b      	add	r3, r1
 8005818:	627b      	str	r3, [r7, #36]	@ 0x24
 800581a:	e036      	b.n	800588a <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005824:	f003 030f 	and.w	r3, r3, #15
 8005828:	2b00      	cmp	r3, #0
 800582a:	d107      	bne.n	800583c <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005830:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	e0a3      	b.n	8005984 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005844:	0e1b      	lsrs	r3, r3, #24
 8005846:	f003 0301 	and.w	r3, r3, #1
 800584a:	2b01      	cmp	r3, #1
 800584c:	d10a      	bne.n	8005864 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005856:	0a1b      	lsrs	r3, r3, #8
 8005858:	f003 0301 	and.w	r3, r3, #1
 800585c:	2b01      	cmp	r3, #1
 800585e:	d101      	bne.n	8005864 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8005860:	2301      	movs	r3, #1
 8005862:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800586c:	0a1b      	lsrs	r3, r3, #8
 800586e:	f003 0303 	and.w	r3, r3, #3
 8005872:	69fa      	ldr	r2, [r7, #28]
 8005874:	4413      	add	r3, r2
 8005876:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800587c:	69fa      	ldr	r2, [r7, #28]
 800587e:	4613      	mov	r3, r2
 8005880:	00db      	lsls	r3, r3, #3
 8005882:	4413      	add	r3, r2
 8005884:	00db      	lsls	r3, r3, #3
 8005886:	440b      	add	r3, r1
 8005888:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800588a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d107      	bne.n	80058ae <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 800589e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	0c9b      	lsrs	r3, r3, #18
 80058a4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	601a      	str	r2, [r3, #0]
 80058ac:	e005      	b.n	80058ba <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80058ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80058ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80058c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80058d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d4:	3304      	adds	r3, #4
 80058d6:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80058d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	b29a      	uxth	r2, r3
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 80058e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	0c1b      	lsrs	r3, r3, #16
 80058e8:	f003 020f 	and.w	r2, r3, #15
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80058f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80058fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8005908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	0e1b      	lsrs	r3, r3, #24
 800590e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8005916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	0fda      	lsrs	r2, r3, #31
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8005920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005922:	3304      	adds	r3, #4
 8005924:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8005926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005928:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800592a:	2300      	movs	r3, #0
 800592c:	623b      	str	r3, [r7, #32]
 800592e:	e00a      	b.n	8005946 <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8005930:	697a      	ldr	r2, [r7, #20]
 8005932:	6a3b      	ldr	r3, [r7, #32]
 8005934:	441a      	add	r2, r3
 8005936:	6839      	ldr	r1, [r7, #0]
 8005938:	6a3b      	ldr	r3, [r7, #32]
 800593a:	440b      	add	r3, r1
 800593c:	7812      	ldrb	r2, [r2, #0]
 800593e:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8005940:	6a3b      	ldr	r3, [r7, #32]
 8005942:	3301      	adds	r3, #1
 8005944:	623b      	str	r3, [r7, #32]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	68db      	ldr	r3, [r3, #12]
 800594a:	4a11      	ldr	r2, [pc, #68]	@ (8005990 <HAL_FDCAN_GetRxMessage+0x20c>)
 800594c:	5cd3      	ldrb	r3, [r2, r3]
 800594e:	461a      	mov	r2, r3
 8005950:	6a3b      	ldr	r3, [r7, #32]
 8005952:	4293      	cmp	r3, r2
 8005954:	d3ec      	bcc.n	8005930 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	2b40      	cmp	r3, #64	@ 0x40
 800595a:	d105      	bne.n	8005968 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	69fa      	ldr	r2, [r7, #28]
 8005962:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8005966:	e004      	b.n	8005972 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	69fa      	ldr	r2, [r7, #28]
 800596e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8005972:	2300      	movs	r3, #0
 8005974:	e006      	b.n	8005984 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800597a:	f043 0208 	orr.w	r2, r3, #8
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
  }
}
 8005984:	4618      	mov	r0, r3
 8005986:	372c      	adds	r7, #44	@ 0x2c
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr
 8005990:	0800abcc 	.word	0x0800abcc

08005994 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b08c      	sub	sp, #48	@ 0x30
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059a2:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 80059a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80059b0:	4013      	ands	r3, r2
 80059b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059ba:	f003 0307 	and.w	r3, r3, #7
 80059be:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80059c8:	4013      	ands	r3, r2
 80059ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80059d6:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059e0:	4013      	ands	r3, r2
 80059e2:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059ea:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 80059ee:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059f6:	6a3a      	ldr	r2, [r7, #32]
 80059f8:	4013      	ands	r3, r2
 80059fa:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a02:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8005a06:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a0e:	69fa      	ldr	r2, [r7, #28]
 8005a10:	4013      	ands	r3, r2
 8005a12:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a1a:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a22:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d00b      	beq.n	8005a46 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8005a2e:	69bb      	ldr	r3, [r7, #24]
 8005a30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d006      	beq.n	8005a46 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	2240      	movs	r2, #64	@ 0x40
 8005a3e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f000 f921 	bl	8005c88 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d019      	beq.n	8005a84 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d014      	beq.n	8005a84 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005a62:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005a6c:	693a      	ldr	r2, [r7, #16]
 8005a6e:	4013      	ands	r3, r2
 8005a70:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005a7a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8005a7c:	6939      	ldr	r1, [r7, #16]
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f000 f8e3 	bl	8005c4a <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8005a84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d007      	beq.n	8005a9a <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a90:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8005a92:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f000 f8a2 	bl	8005bde <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8005a9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d007      	beq.n	8005ab0 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005aa6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8005aa8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 f8a2 	bl	8005bf4 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8005ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d007      	beq.n	8005ac6 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005abc:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8005abe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f000 f8a2 	bl	8005c0a <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d00c      	beq.n	8005aea <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8005ad0:	69bb      	ldr	r3, [r7, #24]
 8005ad2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d007      	beq.n	8005aea <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ae2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f000 f89b 	bl	8005c20 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d018      	beq.n	8005b26 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8005af4:	69bb      	ldr	r3, [r7, #24]
 8005af6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d013      	beq.n	8005b26 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8005b06:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005b10:	68fa      	ldr	r2, [r7, #12]
 8005b12:	4013      	ands	r3, r2
 8005b14:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	2280      	movs	r2, #128	@ 0x80
 8005b1c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8005b1e:	68f9      	ldr	r1, [r7, #12]
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f000 f887 	bl	8005c34 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d00c      	beq.n	8005b4a <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8005b30:	69bb      	ldr	r3, [r7, #24]
 8005b32:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d007      	beq.n	8005b4a <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005b42:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f000 f88b 	bl	8005c60 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d00c      	beq.n	8005b6e <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8005b54:	69bb      	ldr	r3, [r7, #24]
 8005b56:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d007      	beq.n	8005b6e <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8005b66:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f000 f883 	bl	8005c74 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d00f      	beq.n	8005b98 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8005b78:	69bb      	ldr	r3, [r7, #24]
 8005b7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d00a      	beq.n	8005b98 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005b8a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b90:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8005b98:	69fb      	ldr	r3, [r7, #28]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d007      	beq.n	8005bae <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	69fa      	ldr	r2, [r7, #28]
 8005ba4:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8005ba6:	69f9      	ldr	r1, [r7, #28]
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f000 f881 	bl	8005cb0 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8005bae:	6a3b      	ldr	r3, [r7, #32]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d009      	beq.n	8005bc8 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	6a3a      	ldr	r2, [r7, #32]
 8005bba:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005bc0:	6a3b      	ldr	r3, [r7, #32]
 8005bc2:	431a      	orrs	r2, r3
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d002      	beq.n	8005bd6 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f000 f863 	bl	8005c9c <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8005bd6:	bf00      	nop
 8005bd8:	3730      	adds	r7, #48	@ 0x30
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}

08005bde <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8005bde:	b480      	push	{r7}
 8005be0:	b083      	sub	sp, #12
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	6078      	str	r0, [r7, #4]
 8005be6:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8005be8:	bf00      	nop
 8005bea:	370c      	adds	r7, #12
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr

08005bf4 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b083      	sub	sp, #12
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
 8005bfc:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 8005bfe:	bf00      	nop
 8005c00:	370c      	adds	r7, #12
 8005c02:	46bd      	mov	sp, r7
 8005c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c08:	4770      	bx	lr

08005c0a <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8005c0a:	b480      	push	{r7}
 8005c0c:	b083      	sub	sp, #12
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	6078      	str	r0, [r7, #4]
 8005c12:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8005c14:	bf00      	nop
 8005c16:	370c      	adds	r7, #12
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr

08005c20 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b083      	sub	sp, #12
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8005c28:	bf00      	nop
 8005c2a:	370c      	adds	r7, #12
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr

08005c34 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b083      	sub	sp, #12
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8005c3e:	bf00      	nop
 8005c40:	370c      	adds	r7, #12
 8005c42:	46bd      	mov	sp, r7
 8005c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c48:	4770      	bx	lr

08005c4a <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005c4a:	b480      	push	{r7}
 8005c4c:	b083      	sub	sp, #12
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	6078      	str	r0, [r7, #4]
 8005c52:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8005c54:	bf00      	nop
 8005c56:	370c      	adds	r7, #12
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr

08005c60 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b083      	sub	sp, #12
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8005c68:	bf00      	nop
 8005c6a:	370c      	adds	r7, #12
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr

08005c74 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b083      	sub	sp, #12
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8005c7c:	bf00      	nop
 8005c7e:	370c      	adds	r7, #12
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr

08005c88 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8005c90:	bf00      	nop
 8005c92:	370c      	adds	r7, #12
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr

08005c9c <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b083      	sub	sp, #12
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8005ca4:	bf00      	nop
 8005ca6:	370c      	adds	r7, #12
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr

08005cb0 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b083      	sub	sp, #12
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8005cba:	bf00      	nop
 8005cbc:	370c      	adds	r7, #12
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc4:	4770      	bx	lr
	...

08005cc8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b085      	sub	sp, #20
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8005cd0:	4b27      	ldr	r3, [pc, #156]	@ (8005d70 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8005cd2:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	68ba      	ldr	r2, [r7, #8]
 8005cd8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ce2:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cea:	041a      	lsls	r2, r3, #16
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	430a      	orrs	r2, r1
 8005cf2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d08:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d10:	061a      	lsls	r2, r3, #24
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	430a      	orrs	r2, r1
 8005d18:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	60fb      	str	r3, [r7, #12]
 8005d48:	e005      	b.n	8005d56 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	3304      	adds	r3, #4
 8005d54:	60fb      	str	r3, [r7, #12]
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8005d5c:	68fa      	ldr	r2, [r7, #12]
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d3f3      	bcc.n	8005d4a <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8005d62:	bf00      	nop
 8005d64:	bf00      	nop
 8005d66:	3714      	adds	r7, #20
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr
 8005d70:	4000a400 	.word	0x4000a400

08005d74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b087      	sub	sp, #28
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005d82:	e15a      	b.n	800603a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	2101      	movs	r1, #1
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	fa01 f303 	lsl.w	r3, r1, r3
 8005d90:	4013      	ands	r3, r2
 8005d92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	f000 814c 	beq.w	8006034 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	f003 0303 	and.w	r3, r3, #3
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d005      	beq.n	8005db4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005db0:	2b02      	cmp	r3, #2
 8005db2:	d130      	bne.n	8005e16 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	005b      	lsls	r3, r3, #1
 8005dbe:	2203      	movs	r2, #3
 8005dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc4:	43db      	mvns	r3, r3
 8005dc6:	693a      	ldr	r2, [r7, #16]
 8005dc8:	4013      	ands	r3, r2
 8005dca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	68da      	ldr	r2, [r3, #12]
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	005b      	lsls	r3, r3, #1
 8005dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd8:	693a      	ldr	r2, [r7, #16]
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	693a      	ldr	r2, [r7, #16]
 8005de2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005dea:	2201      	movs	r2, #1
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	fa02 f303 	lsl.w	r3, r2, r3
 8005df2:	43db      	mvns	r3, r3
 8005df4:	693a      	ldr	r2, [r7, #16]
 8005df6:	4013      	ands	r3, r2
 8005df8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	091b      	lsrs	r3, r3, #4
 8005e00:	f003 0201 	and.w	r2, r3, #1
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	fa02 f303 	lsl.w	r3, r2, r3
 8005e0a:	693a      	ldr	r2, [r7, #16]
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	693a      	ldr	r2, [r7, #16]
 8005e14:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	f003 0303 	and.w	r3, r3, #3
 8005e1e:	2b03      	cmp	r3, #3
 8005e20:	d017      	beq.n	8005e52 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	68db      	ldr	r3, [r3, #12]
 8005e26:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	005b      	lsls	r3, r3, #1
 8005e2c:	2203      	movs	r2, #3
 8005e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e32:	43db      	mvns	r3, r3
 8005e34:	693a      	ldr	r2, [r7, #16]
 8005e36:	4013      	ands	r3, r2
 8005e38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	689a      	ldr	r2, [r3, #8]
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	005b      	lsls	r3, r3, #1
 8005e42:	fa02 f303 	lsl.w	r3, r2, r3
 8005e46:	693a      	ldr	r2, [r7, #16]
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	693a      	ldr	r2, [r7, #16]
 8005e50:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	f003 0303 	and.w	r3, r3, #3
 8005e5a:	2b02      	cmp	r3, #2
 8005e5c:	d123      	bne.n	8005ea6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	08da      	lsrs	r2, r3, #3
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	3208      	adds	r2, #8
 8005e66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	f003 0307 	and.w	r3, r3, #7
 8005e72:	009b      	lsls	r3, r3, #2
 8005e74:	220f      	movs	r2, #15
 8005e76:	fa02 f303 	lsl.w	r3, r2, r3
 8005e7a:	43db      	mvns	r3, r3
 8005e7c:	693a      	ldr	r2, [r7, #16]
 8005e7e:	4013      	ands	r3, r2
 8005e80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	691a      	ldr	r2, [r3, #16]
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	f003 0307 	and.w	r3, r3, #7
 8005e8c:	009b      	lsls	r3, r3, #2
 8005e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e92:	693a      	ldr	r2, [r7, #16]
 8005e94:	4313      	orrs	r3, r2
 8005e96:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	08da      	lsrs	r2, r3, #3
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	3208      	adds	r2, #8
 8005ea0:	6939      	ldr	r1, [r7, #16]
 8005ea2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	005b      	lsls	r3, r3, #1
 8005eb0:	2203      	movs	r2, #3
 8005eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8005eb6:	43db      	mvns	r3, r3
 8005eb8:	693a      	ldr	r2, [r7, #16]
 8005eba:	4013      	ands	r3, r2
 8005ebc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	f003 0203 	and.w	r2, r3, #3
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	005b      	lsls	r3, r3, #1
 8005eca:	fa02 f303 	lsl.w	r3, r2, r3
 8005ece:	693a      	ldr	r2, [r7, #16]
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	693a      	ldr	r2, [r7, #16]
 8005ed8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	f000 80a6 	beq.w	8006034 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ee8:	4b5b      	ldr	r3, [pc, #364]	@ (8006058 <HAL_GPIO_Init+0x2e4>)
 8005eea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005eec:	4a5a      	ldr	r2, [pc, #360]	@ (8006058 <HAL_GPIO_Init+0x2e4>)
 8005eee:	f043 0301 	orr.w	r3, r3, #1
 8005ef2:	6613      	str	r3, [r2, #96]	@ 0x60
 8005ef4:	4b58      	ldr	r3, [pc, #352]	@ (8006058 <HAL_GPIO_Init+0x2e4>)
 8005ef6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ef8:	f003 0301 	and.w	r3, r3, #1
 8005efc:	60bb      	str	r3, [r7, #8]
 8005efe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005f00:	4a56      	ldr	r2, [pc, #344]	@ (800605c <HAL_GPIO_Init+0x2e8>)
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	089b      	lsrs	r3, r3, #2
 8005f06:	3302      	adds	r3, #2
 8005f08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	f003 0303 	and.w	r3, r3, #3
 8005f14:	009b      	lsls	r3, r3, #2
 8005f16:	220f      	movs	r2, #15
 8005f18:	fa02 f303 	lsl.w	r3, r2, r3
 8005f1c:	43db      	mvns	r3, r3
 8005f1e:	693a      	ldr	r2, [r7, #16]
 8005f20:	4013      	ands	r3, r2
 8005f22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005f2a:	d01f      	beq.n	8005f6c <HAL_GPIO_Init+0x1f8>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	4a4c      	ldr	r2, [pc, #304]	@ (8006060 <HAL_GPIO_Init+0x2ec>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d019      	beq.n	8005f68 <HAL_GPIO_Init+0x1f4>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	4a4b      	ldr	r2, [pc, #300]	@ (8006064 <HAL_GPIO_Init+0x2f0>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d013      	beq.n	8005f64 <HAL_GPIO_Init+0x1f0>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	4a4a      	ldr	r2, [pc, #296]	@ (8006068 <HAL_GPIO_Init+0x2f4>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d00d      	beq.n	8005f60 <HAL_GPIO_Init+0x1ec>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	4a49      	ldr	r2, [pc, #292]	@ (800606c <HAL_GPIO_Init+0x2f8>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d007      	beq.n	8005f5c <HAL_GPIO_Init+0x1e8>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	4a48      	ldr	r2, [pc, #288]	@ (8006070 <HAL_GPIO_Init+0x2fc>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d101      	bne.n	8005f58 <HAL_GPIO_Init+0x1e4>
 8005f54:	2305      	movs	r3, #5
 8005f56:	e00a      	b.n	8005f6e <HAL_GPIO_Init+0x1fa>
 8005f58:	2306      	movs	r3, #6
 8005f5a:	e008      	b.n	8005f6e <HAL_GPIO_Init+0x1fa>
 8005f5c:	2304      	movs	r3, #4
 8005f5e:	e006      	b.n	8005f6e <HAL_GPIO_Init+0x1fa>
 8005f60:	2303      	movs	r3, #3
 8005f62:	e004      	b.n	8005f6e <HAL_GPIO_Init+0x1fa>
 8005f64:	2302      	movs	r3, #2
 8005f66:	e002      	b.n	8005f6e <HAL_GPIO_Init+0x1fa>
 8005f68:	2301      	movs	r3, #1
 8005f6a:	e000      	b.n	8005f6e <HAL_GPIO_Init+0x1fa>
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	697a      	ldr	r2, [r7, #20]
 8005f70:	f002 0203 	and.w	r2, r2, #3
 8005f74:	0092      	lsls	r2, r2, #2
 8005f76:	4093      	lsls	r3, r2
 8005f78:	693a      	ldr	r2, [r7, #16]
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005f7e:	4937      	ldr	r1, [pc, #220]	@ (800605c <HAL_GPIO_Init+0x2e8>)
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	089b      	lsrs	r3, r3, #2
 8005f84:	3302      	adds	r3, #2
 8005f86:	693a      	ldr	r2, [r7, #16]
 8005f88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005f8c:	4b39      	ldr	r3, [pc, #228]	@ (8006074 <HAL_GPIO_Init+0x300>)
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	43db      	mvns	r3, r3
 8005f96:	693a      	ldr	r2, [r7, #16]
 8005f98:	4013      	ands	r3, r2
 8005f9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d003      	beq.n	8005fb0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005fa8:	693a      	ldr	r2, [r7, #16]
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	4313      	orrs	r3, r2
 8005fae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005fb0:	4a30      	ldr	r2, [pc, #192]	@ (8006074 <HAL_GPIO_Init+0x300>)
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005fb6:	4b2f      	ldr	r3, [pc, #188]	@ (8006074 <HAL_GPIO_Init+0x300>)
 8005fb8:	68db      	ldr	r3, [r3, #12]
 8005fba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	43db      	mvns	r3, r3
 8005fc0:	693a      	ldr	r2, [r7, #16]
 8005fc2:	4013      	ands	r3, r2
 8005fc4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d003      	beq.n	8005fda <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005fd2:	693a      	ldr	r2, [r7, #16]
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005fda:	4a26      	ldr	r2, [pc, #152]	@ (8006074 <HAL_GPIO_Init+0x300>)
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005fe0:	4b24      	ldr	r3, [pc, #144]	@ (8006074 <HAL_GPIO_Init+0x300>)
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	43db      	mvns	r3, r3
 8005fea:	693a      	ldr	r2, [r7, #16]
 8005fec:	4013      	ands	r3, r2
 8005fee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d003      	beq.n	8006004 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005ffc:	693a      	ldr	r2, [r7, #16]
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	4313      	orrs	r3, r2
 8006002:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006004:	4a1b      	ldr	r2, [pc, #108]	@ (8006074 <HAL_GPIO_Init+0x300>)
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800600a:	4b1a      	ldr	r3, [pc, #104]	@ (8006074 <HAL_GPIO_Init+0x300>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	43db      	mvns	r3, r3
 8006014:	693a      	ldr	r2, [r7, #16]
 8006016:	4013      	ands	r3, r2
 8006018:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006022:	2b00      	cmp	r3, #0
 8006024:	d003      	beq.n	800602e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8006026:	693a      	ldr	r2, [r7, #16]
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	4313      	orrs	r3, r2
 800602c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800602e:	4a11      	ldr	r2, [pc, #68]	@ (8006074 <HAL_GPIO_Init+0x300>)
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	3301      	adds	r3, #1
 8006038:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	fa22 f303 	lsr.w	r3, r2, r3
 8006044:	2b00      	cmp	r3, #0
 8006046:	f47f ae9d 	bne.w	8005d84 <HAL_GPIO_Init+0x10>
  }
}
 800604a:	bf00      	nop
 800604c:	bf00      	nop
 800604e:	371c      	adds	r7, #28
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr
 8006058:	40021000 	.word	0x40021000
 800605c:	40010000 	.word	0x40010000
 8006060:	48000400 	.word	0x48000400
 8006064:	48000800 	.word	0x48000800
 8006068:	48000c00 	.word	0x48000c00
 800606c:	48001000 	.word	0x48001000
 8006070:	48001400 	.word	0x48001400
 8006074:	40010400 	.word	0x40010400

08006078 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006078:	b480      	push	{r7}
 800607a:	b083      	sub	sp, #12
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	460b      	mov	r3, r1
 8006082:	807b      	strh	r3, [r7, #2]
 8006084:	4613      	mov	r3, r2
 8006086:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006088:	787b      	ldrb	r3, [r7, #1]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d003      	beq.n	8006096 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800608e:	887a      	ldrh	r2, [r7, #2]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006094:	e002      	b.n	800609c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006096:	887a      	ldrh	r2, [r7, #2]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800609c:	bf00      	nop
 800609e:	370c      	adds	r7, #12
 80060a0:	46bd      	mov	sp, r7
 80060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a6:	4770      	bx	lr

080060a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b082      	sub	sp, #8
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	4603      	mov	r3, r0
 80060b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80060b2:	4b08      	ldr	r3, [pc, #32]	@ (80060d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80060b4:	695a      	ldr	r2, [r3, #20]
 80060b6:	88fb      	ldrh	r3, [r7, #6]
 80060b8:	4013      	ands	r3, r2
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d006      	beq.n	80060cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80060be:	4a05      	ldr	r2, [pc, #20]	@ (80060d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80060c0:	88fb      	ldrh	r3, [r7, #6]
 80060c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80060c4:	88fb      	ldrh	r3, [r7, #6]
 80060c6:	4618      	mov	r0, r3
 80060c8:	f004 fbfe 	bl	800a8c8 <HAL_GPIO_EXTI_Callback>
  }
}
 80060cc:	bf00      	nop
 80060ce:	3708      	adds	r7, #8
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}
 80060d4:	40010400 	.word	0x40010400

080060d8 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b084      	sub	sp, #16
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060e0:	2300      	movs	r3, #0
 80060e2:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d101      	bne.n	80060ee <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	e0bb      	b.n	8006266 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80060f4:	b2db      	uxtb	r3, r3
 80060f6:	2b05      	cmp	r3, #5
 80060f8:	d101      	bne.n	80060fe <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 80060fa:	2301      	movs	r3, #1
 80060fc:	e0b3      	b.n	8006266 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8006104:	b2db      	uxtb	r3, r3
 8006106:	2b02      	cmp	r3, #2
 8006108:	d101      	bne.n	800610e <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 800610a:	2301      	movs	r3, #1
 800610c:	e0ab      	b.n	8006266 <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800610e:	4b58      	ldr	r3, [pc, #352]	@ (8006270 <HAL_OPAMP_Init+0x198>)
 8006110:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006112:	4a57      	ldr	r2, [pc, #348]	@ (8006270 <HAL_OPAMP_Init+0x198>)
 8006114:	f043 0301 	orr.w	r3, r3, #1
 8006118:	6613      	str	r3, [r2, #96]	@ 0x60
 800611a:	4b55      	ldr	r3, [pc, #340]	@ (8006270 <HAL_OPAMP_Init+0x198>)
 800611c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800611e:	f003 0301 	and.w	r3, r3, #1
 8006122:	60bb      	str	r3, [r7, #8]
 8006124:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800612c:	b2db      	uxtb	r3, r3
 800612e:	2b00      	cmp	r3, #0
 8006130:	d103      	bne.n	800613a <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2200      	movs	r2, #0
 8006136:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f7fa ffba 	bl	80010b4 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	689b      	ldr	r3, [r3, #8]
 8006144:	2b40      	cmp	r3, #64	@ 0x40
 8006146:	d003      	beq.n	8006150 <HAL_OPAMP_Init+0x78>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	2b60      	cmp	r3, #96	@ 0x60
 800614e:	d133      	bne.n	80061b8 <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f023 0110 	bic.w	r1, r3, #16
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	430a      	orrs	r2, r1
 8006164:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	4b41      	ldr	r3, [pc, #260]	@ (8006274 <HAL_OPAMP_Init+0x19c>)
 800616e:	4013      	ands	r3, r2
 8006170:	687a      	ldr	r2, [r7, #4]
 8006172:	6851      	ldr	r1, [r2, #4]
 8006174:	687a      	ldr	r2, [r7, #4]
 8006176:	6892      	ldr	r2, [r2, #8]
 8006178:	4311      	orrs	r1, r2
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	6912      	ldr	r2, [r2, #16]
 800617e:	430a      	orrs	r2, r1
 8006180:	6879      	ldr	r1, [r7, #4]
 8006182:	7d09      	ldrb	r1, [r1, #20]
 8006184:	2901      	cmp	r1, #1
 8006186:	d102      	bne.n	800618e <HAL_OPAMP_Init+0xb6>
 8006188:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800618c:	e000      	b.n	8006190 <HAL_OPAMP_Init+0xb8>
 800618e:	2100      	movs	r1, #0
 8006190:	4311      	orrs	r1, r2
 8006192:	687a      	ldr	r2, [r7, #4]
 8006194:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006196:	4311      	orrs	r1, r2
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800619c:	4311      	orrs	r1, r2
 800619e:	687a      	ldr	r2, [r7, #4]
 80061a0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80061a2:	04d2      	lsls	r2, r2, #19
 80061a4:	4311      	orrs	r1, r2
 80061a6:	687a      	ldr	r2, [r7, #4]
 80061a8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80061aa:	0612      	lsls	r2, r2, #24
 80061ac:	4311      	orrs	r1, r2
 80061ae:	687a      	ldr	r2, [r7, #4]
 80061b0:	6812      	ldr	r2, [r2, #0]
 80061b2:	430b      	orrs	r3, r1
 80061b4:	6013      	str	r3, [r2, #0]
 80061b6:	e035      	b.n	8006224 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f023 0110 	bic.w	r1, r3, #16
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	430a      	orrs	r2, r1
 80061cc:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	681a      	ldr	r2, [r3, #0]
 80061d4:	4b27      	ldr	r3, [pc, #156]	@ (8006274 <HAL_OPAMP_Init+0x19c>)
 80061d6:	4013      	ands	r3, r2
 80061d8:	687a      	ldr	r2, [r7, #4]
 80061da:	6851      	ldr	r1, [r2, #4]
 80061dc:	687a      	ldr	r2, [r7, #4]
 80061de:	6892      	ldr	r2, [r2, #8]
 80061e0:	4311      	orrs	r1, r2
 80061e2:	687a      	ldr	r2, [r7, #4]
 80061e4:	68d2      	ldr	r2, [r2, #12]
 80061e6:	4311      	orrs	r1, r2
 80061e8:	687a      	ldr	r2, [r7, #4]
 80061ea:	6912      	ldr	r2, [r2, #16]
 80061ec:	430a      	orrs	r2, r1
 80061ee:	6879      	ldr	r1, [r7, #4]
 80061f0:	7d09      	ldrb	r1, [r1, #20]
 80061f2:	2901      	cmp	r1, #1
 80061f4:	d102      	bne.n	80061fc <HAL_OPAMP_Init+0x124>
 80061f6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80061fa:	e000      	b.n	80061fe <HAL_OPAMP_Init+0x126>
 80061fc:	2100      	movs	r1, #0
 80061fe:	4311      	orrs	r1, r2
 8006200:	687a      	ldr	r2, [r7, #4]
 8006202:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006204:	4311      	orrs	r1, r2
 8006206:	687a      	ldr	r2, [r7, #4]
 8006208:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800620a:	4311      	orrs	r1, r2
 800620c:	687a      	ldr	r2, [r7, #4]
 800620e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006210:	04d2      	lsls	r2, r2, #19
 8006212:	4311      	orrs	r1, r2
 8006214:	687a      	ldr	r2, [r7, #4]
 8006216:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006218:	0612      	lsls	r2, r2, #24
 800621a:	4311      	orrs	r1, r2
 800621c:	687a      	ldr	r2, [r7, #4]
 800621e:	6812      	ldr	r2, [r2, #0]
 8006220:	430b      	orrs	r3, r1
 8006222:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	699b      	ldr	r3, [r3, #24]
 800622a:	2b00      	cmp	r3, #0
 800622c:	db10      	blt.n	8006250 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	699b      	ldr	r3, [r3, #24]
 8006234:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	699a      	ldr	r2, [r3, #24]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	69db      	ldr	r3, [r3, #28]
 8006240:	431a      	orrs	r2, r3
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6a1b      	ldr	r3, [r3, #32]
 8006246:	431a      	orrs	r2, r3
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	430a      	orrs	r2, r1
 800624e:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8006256:	b2db      	uxtb	r3, r3
 8006258:	2b00      	cmp	r3, #0
 800625a:	d103      	bne.n	8006264 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2201      	movs	r2, #1
 8006260:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8006264:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8006266:	4618      	mov	r0, r3
 8006268:	3710      	adds	r7, #16
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}
 800626e:	bf00      	nop
 8006270:	40021000 	.word	0x40021000
 8006274:	e0003e11 	.word	0xe0003e11

08006278 <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 8006278:	b480      	push	{r7}
 800627a:	b085      	sub	sp, #20
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006280:	2300      	movs	r3, #0
 8006282:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d102      	bne.n	8006290 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 800628a:	2301      	movs	r3, #1
 800628c:	73fb      	strb	r3, [r7, #15]
 800628e:	e01d      	b.n	80062cc <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8006296:	b2db      	uxtb	r3, r3
 8006298:	2b05      	cmp	r3, #5
 800629a:	d102      	bne.n	80062a2 <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 800629c:	2301      	movs	r3, #1
 800629e:	73fb      	strb	r3, [r7, #15]
 80062a0:	e014      	b.n	80062cc <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80062a8:	b2db      	uxtb	r3, r3
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d10c      	bne.n	80062c8 <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	681a      	ldr	r2, [r3, #0]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f042 0201 	orr.w	r2, r2, #1
 80062bc:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2204      	movs	r2, #4
 80062c2:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 80062c6:	e001      	b.n	80062cc <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 80062c8:	2301      	movs	r3, #1
 80062ca:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 80062cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3714      	adds	r7, #20
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr
	...

080062dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80062dc:	b480      	push	{r7}
 80062de:	b085      	sub	sp, #20
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d141      	bne.n	800636e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80062ea:	4b4b      	ldr	r3, [pc, #300]	@ (8006418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80062f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062f6:	d131      	bne.n	800635c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80062f8:	4b47      	ldr	r3, [pc, #284]	@ (8006418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80062fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80062fe:	4a46      	ldr	r2, [pc, #280]	@ (8006418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006300:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006304:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006308:	4b43      	ldr	r3, [pc, #268]	@ (8006418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006310:	4a41      	ldr	r2, [pc, #260]	@ (8006418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006312:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006316:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006318:	4b40      	ldr	r3, [pc, #256]	@ (800641c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	2232      	movs	r2, #50	@ 0x32
 800631e:	fb02 f303 	mul.w	r3, r2, r3
 8006322:	4a3f      	ldr	r2, [pc, #252]	@ (8006420 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006324:	fba2 2303 	umull	r2, r3, r2, r3
 8006328:	0c9b      	lsrs	r3, r3, #18
 800632a:	3301      	adds	r3, #1
 800632c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800632e:	e002      	b.n	8006336 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	3b01      	subs	r3, #1
 8006334:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006336:	4b38      	ldr	r3, [pc, #224]	@ (8006418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006338:	695b      	ldr	r3, [r3, #20]
 800633a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800633e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006342:	d102      	bne.n	800634a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d1f2      	bne.n	8006330 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800634a:	4b33      	ldr	r3, [pc, #204]	@ (8006418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800634c:	695b      	ldr	r3, [r3, #20]
 800634e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006352:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006356:	d158      	bne.n	800640a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006358:	2303      	movs	r3, #3
 800635a:	e057      	b.n	800640c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800635c:	4b2e      	ldr	r3, [pc, #184]	@ (8006418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800635e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006362:	4a2d      	ldr	r2, [pc, #180]	@ (8006418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006364:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006368:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800636c:	e04d      	b.n	800640a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006374:	d141      	bne.n	80063fa <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006376:	4b28      	ldr	r3, [pc, #160]	@ (8006418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800637e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006382:	d131      	bne.n	80063e8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006384:	4b24      	ldr	r3, [pc, #144]	@ (8006418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006386:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800638a:	4a23      	ldr	r2, [pc, #140]	@ (8006418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800638c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006390:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006394:	4b20      	ldr	r3, [pc, #128]	@ (8006418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800639c:	4a1e      	ldr	r2, [pc, #120]	@ (8006418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800639e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80063a2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80063a4:	4b1d      	ldr	r3, [pc, #116]	@ (800641c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	2232      	movs	r2, #50	@ 0x32
 80063aa:	fb02 f303 	mul.w	r3, r2, r3
 80063ae:	4a1c      	ldr	r2, [pc, #112]	@ (8006420 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80063b0:	fba2 2303 	umull	r2, r3, r2, r3
 80063b4:	0c9b      	lsrs	r3, r3, #18
 80063b6:	3301      	adds	r3, #1
 80063b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80063ba:	e002      	b.n	80063c2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	3b01      	subs	r3, #1
 80063c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80063c2:	4b15      	ldr	r3, [pc, #84]	@ (8006418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063c4:	695b      	ldr	r3, [r3, #20]
 80063c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063ce:	d102      	bne.n	80063d6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d1f2      	bne.n	80063bc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80063d6:	4b10      	ldr	r3, [pc, #64]	@ (8006418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063d8:	695b      	ldr	r3, [r3, #20]
 80063da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063e2:	d112      	bne.n	800640a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80063e4:	2303      	movs	r3, #3
 80063e6:	e011      	b.n	800640c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80063e8:	4b0b      	ldr	r3, [pc, #44]	@ (8006418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80063ee:	4a0a      	ldr	r2, [pc, #40]	@ (8006418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80063f4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80063f8:	e007      	b.n	800640a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80063fa:	4b07      	ldr	r3, [pc, #28]	@ (8006418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006402:	4a05      	ldr	r2, [pc, #20]	@ (8006418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006404:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006408:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800640a:	2300      	movs	r3, #0
}
 800640c:	4618      	mov	r0, r3
 800640e:	3714      	adds	r7, #20
 8006410:	46bd      	mov	sp, r7
 8006412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006416:	4770      	bx	lr
 8006418:	40007000 	.word	0x40007000
 800641c:	20000000 	.word	0x20000000
 8006420:	431bde83 	.word	0x431bde83

08006424 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006424:	b480      	push	{r7}
 8006426:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006428:	4b05      	ldr	r3, [pc, #20]	@ (8006440 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	4a04      	ldr	r2, [pc, #16]	@ (8006440 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800642e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006432:	6093      	str	r3, [r2, #8]
}
 8006434:	bf00      	nop
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr
 800643e:	bf00      	nop
 8006440:	40007000 	.word	0x40007000

08006444 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b088      	sub	sp, #32
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d101      	bne.n	8006456 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006452:	2301      	movs	r3, #1
 8006454:	e2fe      	b.n	8006a54 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f003 0301 	and.w	r3, r3, #1
 800645e:	2b00      	cmp	r3, #0
 8006460:	d075      	beq.n	800654e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006462:	4b97      	ldr	r3, [pc, #604]	@ (80066c0 <HAL_RCC_OscConfig+0x27c>)
 8006464:	689b      	ldr	r3, [r3, #8]
 8006466:	f003 030c 	and.w	r3, r3, #12
 800646a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800646c:	4b94      	ldr	r3, [pc, #592]	@ (80066c0 <HAL_RCC_OscConfig+0x27c>)
 800646e:	68db      	ldr	r3, [r3, #12]
 8006470:	f003 0303 	and.w	r3, r3, #3
 8006474:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006476:	69bb      	ldr	r3, [r7, #24]
 8006478:	2b0c      	cmp	r3, #12
 800647a:	d102      	bne.n	8006482 <HAL_RCC_OscConfig+0x3e>
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	2b03      	cmp	r3, #3
 8006480:	d002      	beq.n	8006488 <HAL_RCC_OscConfig+0x44>
 8006482:	69bb      	ldr	r3, [r7, #24]
 8006484:	2b08      	cmp	r3, #8
 8006486:	d10b      	bne.n	80064a0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006488:	4b8d      	ldr	r3, [pc, #564]	@ (80066c0 <HAL_RCC_OscConfig+0x27c>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006490:	2b00      	cmp	r3, #0
 8006492:	d05b      	beq.n	800654c <HAL_RCC_OscConfig+0x108>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d157      	bne.n	800654c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800649c:	2301      	movs	r3, #1
 800649e:	e2d9      	b.n	8006a54 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064a8:	d106      	bne.n	80064b8 <HAL_RCC_OscConfig+0x74>
 80064aa:	4b85      	ldr	r3, [pc, #532]	@ (80066c0 <HAL_RCC_OscConfig+0x27c>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a84      	ldr	r2, [pc, #528]	@ (80066c0 <HAL_RCC_OscConfig+0x27c>)
 80064b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80064b4:	6013      	str	r3, [r2, #0]
 80064b6:	e01d      	b.n	80064f4 <HAL_RCC_OscConfig+0xb0>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80064c0:	d10c      	bne.n	80064dc <HAL_RCC_OscConfig+0x98>
 80064c2:	4b7f      	ldr	r3, [pc, #508]	@ (80066c0 <HAL_RCC_OscConfig+0x27c>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a7e      	ldr	r2, [pc, #504]	@ (80066c0 <HAL_RCC_OscConfig+0x27c>)
 80064c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80064cc:	6013      	str	r3, [r2, #0]
 80064ce:	4b7c      	ldr	r3, [pc, #496]	@ (80066c0 <HAL_RCC_OscConfig+0x27c>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a7b      	ldr	r2, [pc, #492]	@ (80066c0 <HAL_RCC_OscConfig+0x27c>)
 80064d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80064d8:	6013      	str	r3, [r2, #0]
 80064da:	e00b      	b.n	80064f4 <HAL_RCC_OscConfig+0xb0>
 80064dc:	4b78      	ldr	r3, [pc, #480]	@ (80066c0 <HAL_RCC_OscConfig+0x27c>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a77      	ldr	r2, [pc, #476]	@ (80066c0 <HAL_RCC_OscConfig+0x27c>)
 80064e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80064e6:	6013      	str	r3, [r2, #0]
 80064e8:	4b75      	ldr	r3, [pc, #468]	@ (80066c0 <HAL_RCC_OscConfig+0x27c>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a74      	ldr	r2, [pc, #464]	@ (80066c0 <HAL_RCC_OscConfig+0x27c>)
 80064ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80064f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d013      	beq.n	8006524 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064fc:	f7fb fad2 	bl	8001aa4 <HAL_GetTick>
 8006500:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006502:	e008      	b.n	8006516 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006504:	f7fb face 	bl	8001aa4 <HAL_GetTick>
 8006508:	4602      	mov	r2, r0
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	1ad3      	subs	r3, r2, r3
 800650e:	2b64      	cmp	r3, #100	@ 0x64
 8006510:	d901      	bls.n	8006516 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006512:	2303      	movs	r3, #3
 8006514:	e29e      	b.n	8006a54 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006516:	4b6a      	ldr	r3, [pc, #424]	@ (80066c0 <HAL_RCC_OscConfig+0x27c>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800651e:	2b00      	cmp	r3, #0
 8006520:	d0f0      	beq.n	8006504 <HAL_RCC_OscConfig+0xc0>
 8006522:	e014      	b.n	800654e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006524:	f7fb fabe 	bl	8001aa4 <HAL_GetTick>
 8006528:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800652a:	e008      	b.n	800653e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800652c:	f7fb faba 	bl	8001aa4 <HAL_GetTick>
 8006530:	4602      	mov	r2, r0
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	1ad3      	subs	r3, r2, r3
 8006536:	2b64      	cmp	r3, #100	@ 0x64
 8006538:	d901      	bls.n	800653e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800653a:	2303      	movs	r3, #3
 800653c:	e28a      	b.n	8006a54 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800653e:	4b60      	ldr	r3, [pc, #384]	@ (80066c0 <HAL_RCC_OscConfig+0x27c>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006546:	2b00      	cmp	r3, #0
 8006548:	d1f0      	bne.n	800652c <HAL_RCC_OscConfig+0xe8>
 800654a:	e000      	b.n	800654e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800654c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f003 0302 	and.w	r3, r3, #2
 8006556:	2b00      	cmp	r3, #0
 8006558:	d075      	beq.n	8006646 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800655a:	4b59      	ldr	r3, [pc, #356]	@ (80066c0 <HAL_RCC_OscConfig+0x27c>)
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	f003 030c 	and.w	r3, r3, #12
 8006562:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006564:	4b56      	ldr	r3, [pc, #344]	@ (80066c0 <HAL_RCC_OscConfig+0x27c>)
 8006566:	68db      	ldr	r3, [r3, #12]
 8006568:	f003 0303 	and.w	r3, r3, #3
 800656c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800656e:	69bb      	ldr	r3, [r7, #24]
 8006570:	2b0c      	cmp	r3, #12
 8006572:	d102      	bne.n	800657a <HAL_RCC_OscConfig+0x136>
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	2b02      	cmp	r3, #2
 8006578:	d002      	beq.n	8006580 <HAL_RCC_OscConfig+0x13c>
 800657a:	69bb      	ldr	r3, [r7, #24]
 800657c:	2b04      	cmp	r3, #4
 800657e:	d11f      	bne.n	80065c0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006580:	4b4f      	ldr	r3, [pc, #316]	@ (80066c0 <HAL_RCC_OscConfig+0x27c>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006588:	2b00      	cmp	r3, #0
 800658a:	d005      	beq.n	8006598 <HAL_RCC_OscConfig+0x154>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	68db      	ldr	r3, [r3, #12]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d101      	bne.n	8006598 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006594:	2301      	movs	r3, #1
 8006596:	e25d      	b.n	8006a54 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006598:	4b49      	ldr	r3, [pc, #292]	@ (80066c0 <HAL_RCC_OscConfig+0x27c>)
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	691b      	ldr	r3, [r3, #16]
 80065a4:	061b      	lsls	r3, r3, #24
 80065a6:	4946      	ldr	r1, [pc, #280]	@ (80066c0 <HAL_RCC_OscConfig+0x27c>)
 80065a8:	4313      	orrs	r3, r2
 80065aa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80065ac:	4b45      	ldr	r3, [pc, #276]	@ (80066c4 <HAL_RCC_OscConfig+0x280>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4618      	mov	r0, r3
 80065b2:	f7fb fa2b 	bl	8001a0c <HAL_InitTick>
 80065b6:	4603      	mov	r3, r0
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d043      	beq.n	8006644 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80065bc:	2301      	movs	r3, #1
 80065be:	e249      	b.n	8006a54 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	68db      	ldr	r3, [r3, #12]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d023      	beq.n	8006610 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80065c8:	4b3d      	ldr	r3, [pc, #244]	@ (80066c0 <HAL_RCC_OscConfig+0x27c>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a3c      	ldr	r2, [pc, #240]	@ (80066c0 <HAL_RCC_OscConfig+0x27c>)
 80065ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80065d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065d4:	f7fb fa66 	bl	8001aa4 <HAL_GetTick>
 80065d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80065da:	e008      	b.n	80065ee <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80065dc:	f7fb fa62 	bl	8001aa4 <HAL_GetTick>
 80065e0:	4602      	mov	r2, r0
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	1ad3      	subs	r3, r2, r3
 80065e6:	2b02      	cmp	r3, #2
 80065e8:	d901      	bls.n	80065ee <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80065ea:	2303      	movs	r3, #3
 80065ec:	e232      	b.n	8006a54 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80065ee:	4b34      	ldr	r3, [pc, #208]	@ (80066c0 <HAL_RCC_OscConfig+0x27c>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d0f0      	beq.n	80065dc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065fa:	4b31      	ldr	r3, [pc, #196]	@ (80066c0 <HAL_RCC_OscConfig+0x27c>)
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	691b      	ldr	r3, [r3, #16]
 8006606:	061b      	lsls	r3, r3, #24
 8006608:	492d      	ldr	r1, [pc, #180]	@ (80066c0 <HAL_RCC_OscConfig+0x27c>)
 800660a:	4313      	orrs	r3, r2
 800660c:	604b      	str	r3, [r1, #4]
 800660e:	e01a      	b.n	8006646 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006610:	4b2b      	ldr	r3, [pc, #172]	@ (80066c0 <HAL_RCC_OscConfig+0x27c>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a2a      	ldr	r2, [pc, #168]	@ (80066c0 <HAL_RCC_OscConfig+0x27c>)
 8006616:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800661a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800661c:	f7fb fa42 	bl	8001aa4 <HAL_GetTick>
 8006620:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006622:	e008      	b.n	8006636 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006624:	f7fb fa3e 	bl	8001aa4 <HAL_GetTick>
 8006628:	4602      	mov	r2, r0
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	1ad3      	subs	r3, r2, r3
 800662e:	2b02      	cmp	r3, #2
 8006630:	d901      	bls.n	8006636 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006632:	2303      	movs	r3, #3
 8006634:	e20e      	b.n	8006a54 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006636:	4b22      	ldr	r3, [pc, #136]	@ (80066c0 <HAL_RCC_OscConfig+0x27c>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800663e:	2b00      	cmp	r3, #0
 8006640:	d1f0      	bne.n	8006624 <HAL_RCC_OscConfig+0x1e0>
 8006642:	e000      	b.n	8006646 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006644:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f003 0308 	and.w	r3, r3, #8
 800664e:	2b00      	cmp	r3, #0
 8006650:	d041      	beq.n	80066d6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	695b      	ldr	r3, [r3, #20]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d01c      	beq.n	8006694 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800665a:	4b19      	ldr	r3, [pc, #100]	@ (80066c0 <HAL_RCC_OscConfig+0x27c>)
 800665c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006660:	4a17      	ldr	r2, [pc, #92]	@ (80066c0 <HAL_RCC_OscConfig+0x27c>)
 8006662:	f043 0301 	orr.w	r3, r3, #1
 8006666:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800666a:	f7fb fa1b 	bl	8001aa4 <HAL_GetTick>
 800666e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006670:	e008      	b.n	8006684 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006672:	f7fb fa17 	bl	8001aa4 <HAL_GetTick>
 8006676:	4602      	mov	r2, r0
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	1ad3      	subs	r3, r2, r3
 800667c:	2b02      	cmp	r3, #2
 800667e:	d901      	bls.n	8006684 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006680:	2303      	movs	r3, #3
 8006682:	e1e7      	b.n	8006a54 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006684:	4b0e      	ldr	r3, [pc, #56]	@ (80066c0 <HAL_RCC_OscConfig+0x27c>)
 8006686:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800668a:	f003 0302 	and.w	r3, r3, #2
 800668e:	2b00      	cmp	r3, #0
 8006690:	d0ef      	beq.n	8006672 <HAL_RCC_OscConfig+0x22e>
 8006692:	e020      	b.n	80066d6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006694:	4b0a      	ldr	r3, [pc, #40]	@ (80066c0 <HAL_RCC_OscConfig+0x27c>)
 8006696:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800669a:	4a09      	ldr	r2, [pc, #36]	@ (80066c0 <HAL_RCC_OscConfig+0x27c>)
 800669c:	f023 0301 	bic.w	r3, r3, #1
 80066a0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066a4:	f7fb f9fe 	bl	8001aa4 <HAL_GetTick>
 80066a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80066aa:	e00d      	b.n	80066c8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80066ac:	f7fb f9fa 	bl	8001aa4 <HAL_GetTick>
 80066b0:	4602      	mov	r2, r0
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	1ad3      	subs	r3, r2, r3
 80066b6:	2b02      	cmp	r3, #2
 80066b8:	d906      	bls.n	80066c8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80066ba:	2303      	movs	r3, #3
 80066bc:	e1ca      	b.n	8006a54 <HAL_RCC_OscConfig+0x610>
 80066be:	bf00      	nop
 80066c0:	40021000 	.word	0x40021000
 80066c4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80066c8:	4b8c      	ldr	r3, [pc, #560]	@ (80068fc <HAL_RCC_OscConfig+0x4b8>)
 80066ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80066ce:	f003 0302 	and.w	r3, r3, #2
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d1ea      	bne.n	80066ac <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f003 0304 	and.w	r3, r3, #4
 80066de:	2b00      	cmp	r3, #0
 80066e0:	f000 80a6 	beq.w	8006830 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80066e4:	2300      	movs	r3, #0
 80066e6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80066e8:	4b84      	ldr	r3, [pc, #528]	@ (80068fc <HAL_RCC_OscConfig+0x4b8>)
 80066ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d101      	bne.n	80066f8 <HAL_RCC_OscConfig+0x2b4>
 80066f4:	2301      	movs	r3, #1
 80066f6:	e000      	b.n	80066fa <HAL_RCC_OscConfig+0x2b6>
 80066f8:	2300      	movs	r3, #0
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d00d      	beq.n	800671a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80066fe:	4b7f      	ldr	r3, [pc, #508]	@ (80068fc <HAL_RCC_OscConfig+0x4b8>)
 8006700:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006702:	4a7e      	ldr	r2, [pc, #504]	@ (80068fc <HAL_RCC_OscConfig+0x4b8>)
 8006704:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006708:	6593      	str	r3, [r2, #88]	@ 0x58
 800670a:	4b7c      	ldr	r3, [pc, #496]	@ (80068fc <HAL_RCC_OscConfig+0x4b8>)
 800670c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800670e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006712:	60fb      	str	r3, [r7, #12]
 8006714:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006716:	2301      	movs	r3, #1
 8006718:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800671a:	4b79      	ldr	r3, [pc, #484]	@ (8006900 <HAL_RCC_OscConfig+0x4bc>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006722:	2b00      	cmp	r3, #0
 8006724:	d118      	bne.n	8006758 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006726:	4b76      	ldr	r3, [pc, #472]	@ (8006900 <HAL_RCC_OscConfig+0x4bc>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a75      	ldr	r2, [pc, #468]	@ (8006900 <HAL_RCC_OscConfig+0x4bc>)
 800672c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006730:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006732:	f7fb f9b7 	bl	8001aa4 <HAL_GetTick>
 8006736:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006738:	e008      	b.n	800674c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800673a:	f7fb f9b3 	bl	8001aa4 <HAL_GetTick>
 800673e:	4602      	mov	r2, r0
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	1ad3      	subs	r3, r2, r3
 8006744:	2b02      	cmp	r3, #2
 8006746:	d901      	bls.n	800674c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006748:	2303      	movs	r3, #3
 800674a:	e183      	b.n	8006a54 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800674c:	4b6c      	ldr	r3, [pc, #432]	@ (8006900 <HAL_RCC_OscConfig+0x4bc>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006754:	2b00      	cmp	r3, #0
 8006756:	d0f0      	beq.n	800673a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	2b01      	cmp	r3, #1
 800675e:	d108      	bne.n	8006772 <HAL_RCC_OscConfig+0x32e>
 8006760:	4b66      	ldr	r3, [pc, #408]	@ (80068fc <HAL_RCC_OscConfig+0x4b8>)
 8006762:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006766:	4a65      	ldr	r2, [pc, #404]	@ (80068fc <HAL_RCC_OscConfig+0x4b8>)
 8006768:	f043 0301 	orr.w	r3, r3, #1
 800676c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006770:	e024      	b.n	80067bc <HAL_RCC_OscConfig+0x378>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	2b05      	cmp	r3, #5
 8006778:	d110      	bne.n	800679c <HAL_RCC_OscConfig+0x358>
 800677a:	4b60      	ldr	r3, [pc, #384]	@ (80068fc <HAL_RCC_OscConfig+0x4b8>)
 800677c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006780:	4a5e      	ldr	r2, [pc, #376]	@ (80068fc <HAL_RCC_OscConfig+0x4b8>)
 8006782:	f043 0304 	orr.w	r3, r3, #4
 8006786:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800678a:	4b5c      	ldr	r3, [pc, #368]	@ (80068fc <HAL_RCC_OscConfig+0x4b8>)
 800678c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006790:	4a5a      	ldr	r2, [pc, #360]	@ (80068fc <HAL_RCC_OscConfig+0x4b8>)
 8006792:	f043 0301 	orr.w	r3, r3, #1
 8006796:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800679a:	e00f      	b.n	80067bc <HAL_RCC_OscConfig+0x378>
 800679c:	4b57      	ldr	r3, [pc, #348]	@ (80068fc <HAL_RCC_OscConfig+0x4b8>)
 800679e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067a2:	4a56      	ldr	r2, [pc, #344]	@ (80068fc <HAL_RCC_OscConfig+0x4b8>)
 80067a4:	f023 0301 	bic.w	r3, r3, #1
 80067a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80067ac:	4b53      	ldr	r3, [pc, #332]	@ (80068fc <HAL_RCC_OscConfig+0x4b8>)
 80067ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067b2:	4a52      	ldr	r2, [pc, #328]	@ (80068fc <HAL_RCC_OscConfig+0x4b8>)
 80067b4:	f023 0304 	bic.w	r3, r3, #4
 80067b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	689b      	ldr	r3, [r3, #8]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d016      	beq.n	80067f2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067c4:	f7fb f96e 	bl	8001aa4 <HAL_GetTick>
 80067c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80067ca:	e00a      	b.n	80067e2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067cc:	f7fb f96a 	bl	8001aa4 <HAL_GetTick>
 80067d0:	4602      	mov	r2, r0
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	1ad3      	subs	r3, r2, r3
 80067d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067da:	4293      	cmp	r3, r2
 80067dc:	d901      	bls.n	80067e2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80067de:	2303      	movs	r3, #3
 80067e0:	e138      	b.n	8006a54 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80067e2:	4b46      	ldr	r3, [pc, #280]	@ (80068fc <HAL_RCC_OscConfig+0x4b8>)
 80067e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067e8:	f003 0302 	and.w	r3, r3, #2
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d0ed      	beq.n	80067cc <HAL_RCC_OscConfig+0x388>
 80067f0:	e015      	b.n	800681e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067f2:	f7fb f957 	bl	8001aa4 <HAL_GetTick>
 80067f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80067f8:	e00a      	b.n	8006810 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067fa:	f7fb f953 	bl	8001aa4 <HAL_GetTick>
 80067fe:	4602      	mov	r2, r0
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	1ad3      	subs	r3, r2, r3
 8006804:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006808:	4293      	cmp	r3, r2
 800680a:	d901      	bls.n	8006810 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800680c:	2303      	movs	r3, #3
 800680e:	e121      	b.n	8006a54 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006810:	4b3a      	ldr	r3, [pc, #232]	@ (80068fc <HAL_RCC_OscConfig+0x4b8>)
 8006812:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006816:	f003 0302 	and.w	r3, r3, #2
 800681a:	2b00      	cmp	r3, #0
 800681c:	d1ed      	bne.n	80067fa <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800681e:	7ffb      	ldrb	r3, [r7, #31]
 8006820:	2b01      	cmp	r3, #1
 8006822:	d105      	bne.n	8006830 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006824:	4b35      	ldr	r3, [pc, #212]	@ (80068fc <HAL_RCC_OscConfig+0x4b8>)
 8006826:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006828:	4a34      	ldr	r2, [pc, #208]	@ (80068fc <HAL_RCC_OscConfig+0x4b8>)
 800682a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800682e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f003 0320 	and.w	r3, r3, #32
 8006838:	2b00      	cmp	r3, #0
 800683a:	d03c      	beq.n	80068b6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	699b      	ldr	r3, [r3, #24]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d01c      	beq.n	800687e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006844:	4b2d      	ldr	r3, [pc, #180]	@ (80068fc <HAL_RCC_OscConfig+0x4b8>)
 8006846:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800684a:	4a2c      	ldr	r2, [pc, #176]	@ (80068fc <HAL_RCC_OscConfig+0x4b8>)
 800684c:	f043 0301 	orr.w	r3, r3, #1
 8006850:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006854:	f7fb f926 	bl	8001aa4 <HAL_GetTick>
 8006858:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800685a:	e008      	b.n	800686e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800685c:	f7fb f922 	bl	8001aa4 <HAL_GetTick>
 8006860:	4602      	mov	r2, r0
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	1ad3      	subs	r3, r2, r3
 8006866:	2b02      	cmp	r3, #2
 8006868:	d901      	bls.n	800686e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800686a:	2303      	movs	r3, #3
 800686c:	e0f2      	b.n	8006a54 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800686e:	4b23      	ldr	r3, [pc, #140]	@ (80068fc <HAL_RCC_OscConfig+0x4b8>)
 8006870:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006874:	f003 0302 	and.w	r3, r3, #2
 8006878:	2b00      	cmp	r3, #0
 800687a:	d0ef      	beq.n	800685c <HAL_RCC_OscConfig+0x418>
 800687c:	e01b      	b.n	80068b6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800687e:	4b1f      	ldr	r3, [pc, #124]	@ (80068fc <HAL_RCC_OscConfig+0x4b8>)
 8006880:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006884:	4a1d      	ldr	r2, [pc, #116]	@ (80068fc <HAL_RCC_OscConfig+0x4b8>)
 8006886:	f023 0301 	bic.w	r3, r3, #1
 800688a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800688e:	f7fb f909 	bl	8001aa4 <HAL_GetTick>
 8006892:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006894:	e008      	b.n	80068a8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006896:	f7fb f905 	bl	8001aa4 <HAL_GetTick>
 800689a:	4602      	mov	r2, r0
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	1ad3      	subs	r3, r2, r3
 80068a0:	2b02      	cmp	r3, #2
 80068a2:	d901      	bls.n	80068a8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80068a4:	2303      	movs	r3, #3
 80068a6:	e0d5      	b.n	8006a54 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80068a8:	4b14      	ldr	r3, [pc, #80]	@ (80068fc <HAL_RCC_OscConfig+0x4b8>)
 80068aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80068ae:	f003 0302 	and.w	r3, r3, #2
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d1ef      	bne.n	8006896 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	69db      	ldr	r3, [r3, #28]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	f000 80c9 	beq.w	8006a52 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80068c0:	4b0e      	ldr	r3, [pc, #56]	@ (80068fc <HAL_RCC_OscConfig+0x4b8>)
 80068c2:	689b      	ldr	r3, [r3, #8]
 80068c4:	f003 030c 	and.w	r3, r3, #12
 80068c8:	2b0c      	cmp	r3, #12
 80068ca:	f000 8083 	beq.w	80069d4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	69db      	ldr	r3, [r3, #28]
 80068d2:	2b02      	cmp	r3, #2
 80068d4:	d15e      	bne.n	8006994 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068d6:	4b09      	ldr	r3, [pc, #36]	@ (80068fc <HAL_RCC_OscConfig+0x4b8>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a08      	ldr	r2, [pc, #32]	@ (80068fc <HAL_RCC_OscConfig+0x4b8>)
 80068dc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80068e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068e2:	f7fb f8df 	bl	8001aa4 <HAL_GetTick>
 80068e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80068e8:	e00c      	b.n	8006904 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068ea:	f7fb f8db 	bl	8001aa4 <HAL_GetTick>
 80068ee:	4602      	mov	r2, r0
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	1ad3      	subs	r3, r2, r3
 80068f4:	2b02      	cmp	r3, #2
 80068f6:	d905      	bls.n	8006904 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80068f8:	2303      	movs	r3, #3
 80068fa:	e0ab      	b.n	8006a54 <HAL_RCC_OscConfig+0x610>
 80068fc:	40021000 	.word	0x40021000
 8006900:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006904:	4b55      	ldr	r3, [pc, #340]	@ (8006a5c <HAL_RCC_OscConfig+0x618>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800690c:	2b00      	cmp	r3, #0
 800690e:	d1ec      	bne.n	80068ea <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006910:	4b52      	ldr	r3, [pc, #328]	@ (8006a5c <HAL_RCC_OscConfig+0x618>)
 8006912:	68da      	ldr	r2, [r3, #12]
 8006914:	4b52      	ldr	r3, [pc, #328]	@ (8006a60 <HAL_RCC_OscConfig+0x61c>)
 8006916:	4013      	ands	r3, r2
 8006918:	687a      	ldr	r2, [r7, #4]
 800691a:	6a11      	ldr	r1, [r2, #32]
 800691c:	687a      	ldr	r2, [r7, #4]
 800691e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006920:	3a01      	subs	r2, #1
 8006922:	0112      	lsls	r2, r2, #4
 8006924:	4311      	orrs	r1, r2
 8006926:	687a      	ldr	r2, [r7, #4]
 8006928:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800692a:	0212      	lsls	r2, r2, #8
 800692c:	4311      	orrs	r1, r2
 800692e:	687a      	ldr	r2, [r7, #4]
 8006930:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006932:	0852      	lsrs	r2, r2, #1
 8006934:	3a01      	subs	r2, #1
 8006936:	0552      	lsls	r2, r2, #21
 8006938:	4311      	orrs	r1, r2
 800693a:	687a      	ldr	r2, [r7, #4]
 800693c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800693e:	0852      	lsrs	r2, r2, #1
 8006940:	3a01      	subs	r2, #1
 8006942:	0652      	lsls	r2, r2, #25
 8006944:	4311      	orrs	r1, r2
 8006946:	687a      	ldr	r2, [r7, #4]
 8006948:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800694a:	06d2      	lsls	r2, r2, #27
 800694c:	430a      	orrs	r2, r1
 800694e:	4943      	ldr	r1, [pc, #268]	@ (8006a5c <HAL_RCC_OscConfig+0x618>)
 8006950:	4313      	orrs	r3, r2
 8006952:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006954:	4b41      	ldr	r3, [pc, #260]	@ (8006a5c <HAL_RCC_OscConfig+0x618>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a40      	ldr	r2, [pc, #256]	@ (8006a5c <HAL_RCC_OscConfig+0x618>)
 800695a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800695e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006960:	4b3e      	ldr	r3, [pc, #248]	@ (8006a5c <HAL_RCC_OscConfig+0x618>)
 8006962:	68db      	ldr	r3, [r3, #12]
 8006964:	4a3d      	ldr	r2, [pc, #244]	@ (8006a5c <HAL_RCC_OscConfig+0x618>)
 8006966:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800696a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800696c:	f7fb f89a 	bl	8001aa4 <HAL_GetTick>
 8006970:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006972:	e008      	b.n	8006986 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006974:	f7fb f896 	bl	8001aa4 <HAL_GetTick>
 8006978:	4602      	mov	r2, r0
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	1ad3      	subs	r3, r2, r3
 800697e:	2b02      	cmp	r3, #2
 8006980:	d901      	bls.n	8006986 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006982:	2303      	movs	r3, #3
 8006984:	e066      	b.n	8006a54 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006986:	4b35      	ldr	r3, [pc, #212]	@ (8006a5c <HAL_RCC_OscConfig+0x618>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800698e:	2b00      	cmp	r3, #0
 8006990:	d0f0      	beq.n	8006974 <HAL_RCC_OscConfig+0x530>
 8006992:	e05e      	b.n	8006a52 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006994:	4b31      	ldr	r3, [pc, #196]	@ (8006a5c <HAL_RCC_OscConfig+0x618>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a30      	ldr	r2, [pc, #192]	@ (8006a5c <HAL_RCC_OscConfig+0x618>)
 800699a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800699e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069a0:	f7fb f880 	bl	8001aa4 <HAL_GetTick>
 80069a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80069a6:	e008      	b.n	80069ba <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069a8:	f7fb f87c 	bl	8001aa4 <HAL_GetTick>
 80069ac:	4602      	mov	r2, r0
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	1ad3      	subs	r3, r2, r3
 80069b2:	2b02      	cmp	r3, #2
 80069b4:	d901      	bls.n	80069ba <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80069b6:	2303      	movs	r3, #3
 80069b8:	e04c      	b.n	8006a54 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80069ba:	4b28      	ldr	r3, [pc, #160]	@ (8006a5c <HAL_RCC_OscConfig+0x618>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d1f0      	bne.n	80069a8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80069c6:	4b25      	ldr	r3, [pc, #148]	@ (8006a5c <HAL_RCC_OscConfig+0x618>)
 80069c8:	68da      	ldr	r2, [r3, #12]
 80069ca:	4924      	ldr	r1, [pc, #144]	@ (8006a5c <HAL_RCC_OscConfig+0x618>)
 80069cc:	4b25      	ldr	r3, [pc, #148]	@ (8006a64 <HAL_RCC_OscConfig+0x620>)
 80069ce:	4013      	ands	r3, r2
 80069d0:	60cb      	str	r3, [r1, #12]
 80069d2:	e03e      	b.n	8006a52 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	69db      	ldr	r3, [r3, #28]
 80069d8:	2b01      	cmp	r3, #1
 80069da:	d101      	bne.n	80069e0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80069dc:	2301      	movs	r3, #1
 80069de:	e039      	b.n	8006a54 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80069e0:	4b1e      	ldr	r3, [pc, #120]	@ (8006a5c <HAL_RCC_OscConfig+0x618>)
 80069e2:	68db      	ldr	r3, [r3, #12]
 80069e4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	f003 0203 	and.w	r2, r3, #3
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6a1b      	ldr	r3, [r3, #32]
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d12c      	bne.n	8006a4e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069fe:	3b01      	subs	r3, #1
 8006a00:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d123      	bne.n	8006a4e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a10:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d11b      	bne.n	8006a4e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a20:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006a22:	429a      	cmp	r2, r3
 8006a24:	d113      	bne.n	8006a4e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a30:	085b      	lsrs	r3, r3, #1
 8006a32:	3b01      	subs	r3, #1
 8006a34:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006a36:	429a      	cmp	r2, r3
 8006a38:	d109      	bne.n	8006a4e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a44:	085b      	lsrs	r3, r3, #1
 8006a46:	3b01      	subs	r3, #1
 8006a48:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006a4a:	429a      	cmp	r2, r3
 8006a4c:	d001      	beq.n	8006a52 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	e000      	b.n	8006a54 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8006a52:	2300      	movs	r3, #0
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	3720      	adds	r7, #32
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}
 8006a5c:	40021000 	.word	0x40021000
 8006a60:	019f800c 	.word	0x019f800c
 8006a64:	feeefffc 	.word	0xfeeefffc

08006a68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b086      	sub	sp, #24
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006a72:	2300      	movs	r3, #0
 8006a74:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d101      	bne.n	8006a80 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	e11e      	b.n	8006cbe <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006a80:	4b91      	ldr	r3, [pc, #580]	@ (8006cc8 <HAL_RCC_ClockConfig+0x260>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f003 030f 	and.w	r3, r3, #15
 8006a88:	683a      	ldr	r2, [r7, #0]
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	d910      	bls.n	8006ab0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a8e:	4b8e      	ldr	r3, [pc, #568]	@ (8006cc8 <HAL_RCC_ClockConfig+0x260>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f023 020f 	bic.w	r2, r3, #15
 8006a96:	498c      	ldr	r1, [pc, #560]	@ (8006cc8 <HAL_RCC_ClockConfig+0x260>)
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a9e:	4b8a      	ldr	r3, [pc, #552]	@ (8006cc8 <HAL_RCC_ClockConfig+0x260>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f003 030f 	and.w	r3, r3, #15
 8006aa6:	683a      	ldr	r2, [r7, #0]
 8006aa8:	429a      	cmp	r2, r3
 8006aaa:	d001      	beq.n	8006ab0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006aac:	2301      	movs	r3, #1
 8006aae:	e106      	b.n	8006cbe <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f003 0301 	and.w	r3, r3, #1
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d073      	beq.n	8006ba4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	2b03      	cmp	r3, #3
 8006ac2:	d129      	bne.n	8006b18 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006ac4:	4b81      	ldr	r3, [pc, #516]	@ (8006ccc <HAL_RCC_ClockConfig+0x264>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d101      	bne.n	8006ad4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	e0f4      	b.n	8006cbe <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006ad4:	f000 f99e 	bl	8006e14 <RCC_GetSysClockFreqFromPLLSource>
 8006ad8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	4a7c      	ldr	r2, [pc, #496]	@ (8006cd0 <HAL_RCC_ClockConfig+0x268>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d93f      	bls.n	8006b62 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006ae2:	4b7a      	ldr	r3, [pc, #488]	@ (8006ccc <HAL_RCC_ClockConfig+0x264>)
 8006ae4:	689b      	ldr	r3, [r3, #8]
 8006ae6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d009      	beq.n	8006b02 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d033      	beq.n	8006b62 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d12f      	bne.n	8006b62 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006b02:	4b72      	ldr	r3, [pc, #456]	@ (8006ccc <HAL_RCC_ClockConfig+0x264>)
 8006b04:	689b      	ldr	r3, [r3, #8]
 8006b06:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006b0a:	4a70      	ldr	r2, [pc, #448]	@ (8006ccc <HAL_RCC_ClockConfig+0x264>)
 8006b0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b10:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006b12:	2380      	movs	r3, #128	@ 0x80
 8006b14:	617b      	str	r3, [r7, #20]
 8006b16:	e024      	b.n	8006b62 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	2b02      	cmp	r3, #2
 8006b1e:	d107      	bne.n	8006b30 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006b20:	4b6a      	ldr	r3, [pc, #424]	@ (8006ccc <HAL_RCC_ClockConfig+0x264>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d109      	bne.n	8006b40 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	e0c6      	b.n	8006cbe <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006b30:	4b66      	ldr	r3, [pc, #408]	@ (8006ccc <HAL_RCC_ClockConfig+0x264>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d101      	bne.n	8006b40 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	e0be      	b.n	8006cbe <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006b40:	f000 f8ce 	bl	8006ce0 <HAL_RCC_GetSysClockFreq>
 8006b44:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	4a61      	ldr	r2, [pc, #388]	@ (8006cd0 <HAL_RCC_ClockConfig+0x268>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d909      	bls.n	8006b62 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006b4e:	4b5f      	ldr	r3, [pc, #380]	@ (8006ccc <HAL_RCC_ClockConfig+0x264>)
 8006b50:	689b      	ldr	r3, [r3, #8]
 8006b52:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006b56:	4a5d      	ldr	r2, [pc, #372]	@ (8006ccc <HAL_RCC_ClockConfig+0x264>)
 8006b58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b5c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006b5e:	2380      	movs	r3, #128	@ 0x80
 8006b60:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006b62:	4b5a      	ldr	r3, [pc, #360]	@ (8006ccc <HAL_RCC_ClockConfig+0x264>)
 8006b64:	689b      	ldr	r3, [r3, #8]
 8006b66:	f023 0203 	bic.w	r2, r3, #3
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	4957      	ldr	r1, [pc, #348]	@ (8006ccc <HAL_RCC_ClockConfig+0x264>)
 8006b70:	4313      	orrs	r3, r2
 8006b72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b74:	f7fa ff96 	bl	8001aa4 <HAL_GetTick>
 8006b78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b7a:	e00a      	b.n	8006b92 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b7c:	f7fa ff92 	bl	8001aa4 <HAL_GetTick>
 8006b80:	4602      	mov	r2, r0
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	1ad3      	subs	r3, r2, r3
 8006b86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d901      	bls.n	8006b92 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006b8e:	2303      	movs	r3, #3
 8006b90:	e095      	b.n	8006cbe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b92:	4b4e      	ldr	r3, [pc, #312]	@ (8006ccc <HAL_RCC_ClockConfig+0x264>)
 8006b94:	689b      	ldr	r3, [r3, #8]
 8006b96:	f003 020c 	and.w	r2, r3, #12
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	009b      	lsls	r3, r3, #2
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	d1eb      	bne.n	8006b7c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f003 0302 	and.w	r3, r3, #2
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d023      	beq.n	8006bf8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f003 0304 	and.w	r3, r3, #4
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d005      	beq.n	8006bc8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006bbc:	4b43      	ldr	r3, [pc, #268]	@ (8006ccc <HAL_RCC_ClockConfig+0x264>)
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	4a42      	ldr	r2, [pc, #264]	@ (8006ccc <HAL_RCC_ClockConfig+0x264>)
 8006bc2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006bc6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f003 0308 	and.w	r3, r3, #8
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d007      	beq.n	8006be4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006bd4:	4b3d      	ldr	r3, [pc, #244]	@ (8006ccc <HAL_RCC_ClockConfig+0x264>)
 8006bd6:	689b      	ldr	r3, [r3, #8]
 8006bd8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006bdc:	4a3b      	ldr	r2, [pc, #236]	@ (8006ccc <HAL_RCC_ClockConfig+0x264>)
 8006bde:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006be2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006be4:	4b39      	ldr	r3, [pc, #228]	@ (8006ccc <HAL_RCC_ClockConfig+0x264>)
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	689b      	ldr	r3, [r3, #8]
 8006bf0:	4936      	ldr	r1, [pc, #216]	@ (8006ccc <HAL_RCC_ClockConfig+0x264>)
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	608b      	str	r3, [r1, #8]
 8006bf6:	e008      	b.n	8006c0a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	2b80      	cmp	r3, #128	@ 0x80
 8006bfc:	d105      	bne.n	8006c0a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006bfe:	4b33      	ldr	r3, [pc, #204]	@ (8006ccc <HAL_RCC_ClockConfig+0x264>)
 8006c00:	689b      	ldr	r3, [r3, #8]
 8006c02:	4a32      	ldr	r2, [pc, #200]	@ (8006ccc <HAL_RCC_ClockConfig+0x264>)
 8006c04:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006c08:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006c0a:	4b2f      	ldr	r3, [pc, #188]	@ (8006cc8 <HAL_RCC_ClockConfig+0x260>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f003 030f 	and.w	r3, r3, #15
 8006c12:	683a      	ldr	r2, [r7, #0]
 8006c14:	429a      	cmp	r2, r3
 8006c16:	d21d      	bcs.n	8006c54 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c18:	4b2b      	ldr	r3, [pc, #172]	@ (8006cc8 <HAL_RCC_ClockConfig+0x260>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f023 020f 	bic.w	r2, r3, #15
 8006c20:	4929      	ldr	r1, [pc, #164]	@ (8006cc8 <HAL_RCC_ClockConfig+0x260>)
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	4313      	orrs	r3, r2
 8006c26:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006c28:	f7fa ff3c 	bl	8001aa4 <HAL_GetTick>
 8006c2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c2e:	e00a      	b.n	8006c46 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c30:	f7fa ff38 	bl	8001aa4 <HAL_GetTick>
 8006c34:	4602      	mov	r2, r0
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	1ad3      	subs	r3, r2, r3
 8006c3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d901      	bls.n	8006c46 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006c42:	2303      	movs	r3, #3
 8006c44:	e03b      	b.n	8006cbe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c46:	4b20      	ldr	r3, [pc, #128]	@ (8006cc8 <HAL_RCC_ClockConfig+0x260>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f003 030f 	and.w	r3, r3, #15
 8006c4e:	683a      	ldr	r2, [r7, #0]
 8006c50:	429a      	cmp	r2, r3
 8006c52:	d1ed      	bne.n	8006c30 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f003 0304 	and.w	r3, r3, #4
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d008      	beq.n	8006c72 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006c60:	4b1a      	ldr	r3, [pc, #104]	@ (8006ccc <HAL_RCC_ClockConfig+0x264>)
 8006c62:	689b      	ldr	r3, [r3, #8]
 8006c64:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	68db      	ldr	r3, [r3, #12]
 8006c6c:	4917      	ldr	r1, [pc, #92]	@ (8006ccc <HAL_RCC_ClockConfig+0x264>)
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f003 0308 	and.w	r3, r3, #8
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d009      	beq.n	8006c92 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006c7e:	4b13      	ldr	r3, [pc, #76]	@ (8006ccc <HAL_RCC_ClockConfig+0x264>)
 8006c80:	689b      	ldr	r3, [r3, #8]
 8006c82:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	691b      	ldr	r3, [r3, #16]
 8006c8a:	00db      	lsls	r3, r3, #3
 8006c8c:	490f      	ldr	r1, [pc, #60]	@ (8006ccc <HAL_RCC_ClockConfig+0x264>)
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006c92:	f000 f825 	bl	8006ce0 <HAL_RCC_GetSysClockFreq>
 8006c96:	4602      	mov	r2, r0
 8006c98:	4b0c      	ldr	r3, [pc, #48]	@ (8006ccc <HAL_RCC_ClockConfig+0x264>)
 8006c9a:	689b      	ldr	r3, [r3, #8]
 8006c9c:	091b      	lsrs	r3, r3, #4
 8006c9e:	f003 030f 	and.w	r3, r3, #15
 8006ca2:	490c      	ldr	r1, [pc, #48]	@ (8006cd4 <HAL_RCC_ClockConfig+0x26c>)
 8006ca4:	5ccb      	ldrb	r3, [r1, r3]
 8006ca6:	f003 031f 	and.w	r3, r3, #31
 8006caa:	fa22 f303 	lsr.w	r3, r2, r3
 8006cae:	4a0a      	ldr	r2, [pc, #40]	@ (8006cd8 <HAL_RCC_ClockConfig+0x270>)
 8006cb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006cb2:	4b0a      	ldr	r3, [pc, #40]	@ (8006cdc <HAL_RCC_ClockConfig+0x274>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f7fa fea8 	bl	8001a0c <HAL_InitTick>
 8006cbc:	4603      	mov	r3, r0
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3718      	adds	r7, #24
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}
 8006cc6:	bf00      	nop
 8006cc8:	40022000 	.word	0x40022000
 8006ccc:	40021000 	.word	0x40021000
 8006cd0:	04c4b400 	.word	0x04c4b400
 8006cd4:	0800abb4 	.word	0x0800abb4
 8006cd8:	20000000 	.word	0x20000000
 8006cdc:	20000004 	.word	0x20000004

08006ce0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b087      	sub	sp, #28
 8006ce4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006ce6:	4b2c      	ldr	r3, [pc, #176]	@ (8006d98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	f003 030c 	and.w	r3, r3, #12
 8006cee:	2b04      	cmp	r3, #4
 8006cf0:	d102      	bne.n	8006cf8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006cf2:	4b2a      	ldr	r3, [pc, #168]	@ (8006d9c <HAL_RCC_GetSysClockFreq+0xbc>)
 8006cf4:	613b      	str	r3, [r7, #16]
 8006cf6:	e047      	b.n	8006d88 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006cf8:	4b27      	ldr	r3, [pc, #156]	@ (8006d98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006cfa:	689b      	ldr	r3, [r3, #8]
 8006cfc:	f003 030c 	and.w	r3, r3, #12
 8006d00:	2b08      	cmp	r3, #8
 8006d02:	d102      	bne.n	8006d0a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006d04:	4b26      	ldr	r3, [pc, #152]	@ (8006da0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006d06:	613b      	str	r3, [r7, #16]
 8006d08:	e03e      	b.n	8006d88 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006d0a:	4b23      	ldr	r3, [pc, #140]	@ (8006d98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d0c:	689b      	ldr	r3, [r3, #8]
 8006d0e:	f003 030c 	and.w	r3, r3, #12
 8006d12:	2b0c      	cmp	r3, #12
 8006d14:	d136      	bne.n	8006d84 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006d16:	4b20      	ldr	r3, [pc, #128]	@ (8006d98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d18:	68db      	ldr	r3, [r3, #12]
 8006d1a:	f003 0303 	and.w	r3, r3, #3
 8006d1e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006d20:	4b1d      	ldr	r3, [pc, #116]	@ (8006d98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d22:	68db      	ldr	r3, [r3, #12]
 8006d24:	091b      	lsrs	r3, r3, #4
 8006d26:	f003 030f 	and.w	r3, r3, #15
 8006d2a:	3301      	adds	r3, #1
 8006d2c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2b03      	cmp	r3, #3
 8006d32:	d10c      	bne.n	8006d4e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006d34:	4a1a      	ldr	r2, [pc, #104]	@ (8006da0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d3c:	4a16      	ldr	r2, [pc, #88]	@ (8006d98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d3e:	68d2      	ldr	r2, [r2, #12]
 8006d40:	0a12      	lsrs	r2, r2, #8
 8006d42:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006d46:	fb02 f303 	mul.w	r3, r2, r3
 8006d4a:	617b      	str	r3, [r7, #20]
      break;
 8006d4c:	e00c      	b.n	8006d68 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006d4e:	4a13      	ldr	r2, [pc, #76]	@ (8006d9c <HAL_RCC_GetSysClockFreq+0xbc>)
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d56:	4a10      	ldr	r2, [pc, #64]	@ (8006d98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d58:	68d2      	ldr	r2, [r2, #12]
 8006d5a:	0a12      	lsrs	r2, r2, #8
 8006d5c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006d60:	fb02 f303 	mul.w	r3, r2, r3
 8006d64:	617b      	str	r3, [r7, #20]
      break;
 8006d66:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006d68:	4b0b      	ldr	r3, [pc, #44]	@ (8006d98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d6a:	68db      	ldr	r3, [r3, #12]
 8006d6c:	0e5b      	lsrs	r3, r3, #25
 8006d6e:	f003 0303 	and.w	r3, r3, #3
 8006d72:	3301      	adds	r3, #1
 8006d74:	005b      	lsls	r3, r3, #1
 8006d76:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006d78:	697a      	ldr	r2, [r7, #20]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d80:	613b      	str	r3, [r7, #16]
 8006d82:	e001      	b.n	8006d88 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006d84:	2300      	movs	r3, #0
 8006d86:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006d88:	693b      	ldr	r3, [r7, #16]
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	371c      	adds	r7, #28
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d94:	4770      	bx	lr
 8006d96:	bf00      	nop
 8006d98:	40021000 	.word	0x40021000
 8006d9c:	00f42400 	.word	0x00f42400
 8006da0:	016e3600 	.word	0x016e3600

08006da4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006da4:	b480      	push	{r7}
 8006da6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006da8:	4b03      	ldr	r3, [pc, #12]	@ (8006db8 <HAL_RCC_GetHCLKFreq+0x14>)
 8006daa:	681b      	ldr	r3, [r3, #0]
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	46bd      	mov	sp, r7
 8006db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db4:	4770      	bx	lr
 8006db6:	bf00      	nop
 8006db8:	20000000 	.word	0x20000000

08006dbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006dc0:	f7ff fff0 	bl	8006da4 <HAL_RCC_GetHCLKFreq>
 8006dc4:	4602      	mov	r2, r0
 8006dc6:	4b06      	ldr	r3, [pc, #24]	@ (8006de0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006dc8:	689b      	ldr	r3, [r3, #8]
 8006dca:	0a1b      	lsrs	r3, r3, #8
 8006dcc:	f003 0307 	and.w	r3, r3, #7
 8006dd0:	4904      	ldr	r1, [pc, #16]	@ (8006de4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006dd2:	5ccb      	ldrb	r3, [r1, r3]
 8006dd4:	f003 031f 	and.w	r3, r3, #31
 8006dd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	bd80      	pop	{r7, pc}
 8006de0:	40021000 	.word	0x40021000
 8006de4:	0800abc4 	.word	0x0800abc4

08006de8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006dec:	f7ff ffda 	bl	8006da4 <HAL_RCC_GetHCLKFreq>
 8006df0:	4602      	mov	r2, r0
 8006df2:	4b06      	ldr	r3, [pc, #24]	@ (8006e0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006df4:	689b      	ldr	r3, [r3, #8]
 8006df6:	0adb      	lsrs	r3, r3, #11
 8006df8:	f003 0307 	and.w	r3, r3, #7
 8006dfc:	4904      	ldr	r1, [pc, #16]	@ (8006e10 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006dfe:	5ccb      	ldrb	r3, [r1, r3]
 8006e00:	f003 031f 	and.w	r3, r3, #31
 8006e04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	bd80      	pop	{r7, pc}
 8006e0c:	40021000 	.word	0x40021000
 8006e10:	0800abc4 	.word	0x0800abc4

08006e14 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b087      	sub	sp, #28
 8006e18:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006e1a:	4b1e      	ldr	r3, [pc, #120]	@ (8006e94 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006e1c:	68db      	ldr	r3, [r3, #12]
 8006e1e:	f003 0303 	and.w	r3, r3, #3
 8006e22:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006e24:	4b1b      	ldr	r3, [pc, #108]	@ (8006e94 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006e26:	68db      	ldr	r3, [r3, #12]
 8006e28:	091b      	lsrs	r3, r3, #4
 8006e2a:	f003 030f 	and.w	r3, r3, #15
 8006e2e:	3301      	adds	r3, #1
 8006e30:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	2b03      	cmp	r3, #3
 8006e36:	d10c      	bne.n	8006e52 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006e38:	4a17      	ldr	r2, [pc, #92]	@ (8006e98 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e40:	4a14      	ldr	r2, [pc, #80]	@ (8006e94 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006e42:	68d2      	ldr	r2, [r2, #12]
 8006e44:	0a12      	lsrs	r2, r2, #8
 8006e46:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006e4a:	fb02 f303 	mul.w	r3, r2, r3
 8006e4e:	617b      	str	r3, [r7, #20]
    break;
 8006e50:	e00c      	b.n	8006e6c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006e52:	4a12      	ldr	r2, [pc, #72]	@ (8006e9c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e5a:	4a0e      	ldr	r2, [pc, #56]	@ (8006e94 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006e5c:	68d2      	ldr	r2, [r2, #12]
 8006e5e:	0a12      	lsrs	r2, r2, #8
 8006e60:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006e64:	fb02 f303 	mul.w	r3, r2, r3
 8006e68:	617b      	str	r3, [r7, #20]
    break;
 8006e6a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006e6c:	4b09      	ldr	r3, [pc, #36]	@ (8006e94 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006e6e:	68db      	ldr	r3, [r3, #12]
 8006e70:	0e5b      	lsrs	r3, r3, #25
 8006e72:	f003 0303 	and.w	r3, r3, #3
 8006e76:	3301      	adds	r3, #1
 8006e78:	005b      	lsls	r3, r3, #1
 8006e7a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006e7c:	697a      	ldr	r2, [r7, #20]
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e84:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006e86:	687b      	ldr	r3, [r7, #4]
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	371c      	adds	r7, #28
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr
 8006e94:	40021000 	.word	0x40021000
 8006e98:	016e3600 	.word	0x016e3600
 8006e9c:	00f42400 	.word	0x00f42400

08006ea0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b086      	sub	sp, #24
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006eac:	2300      	movs	r3, #0
 8006eae:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	f000 8098 	beq.w	8006fee <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006ec2:	4b43      	ldr	r3, [pc, #268]	@ (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ec4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ec6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d10d      	bne.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ece:	4b40      	ldr	r3, [pc, #256]	@ (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ed0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ed2:	4a3f      	ldr	r2, [pc, #252]	@ (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ed4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ed8:	6593      	str	r3, [r2, #88]	@ 0x58
 8006eda:	4b3d      	ldr	r3, [pc, #244]	@ (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006edc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ede:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ee2:	60bb      	str	r3, [r7, #8]
 8006ee4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006eea:	4b3a      	ldr	r3, [pc, #232]	@ (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a39      	ldr	r2, [pc, #228]	@ (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006ef0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ef4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006ef6:	f7fa fdd5 	bl	8001aa4 <HAL_GetTick>
 8006efa:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006efc:	e009      	b.n	8006f12 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006efe:	f7fa fdd1 	bl	8001aa4 <HAL_GetTick>
 8006f02:	4602      	mov	r2, r0
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	1ad3      	subs	r3, r2, r3
 8006f08:	2b02      	cmp	r3, #2
 8006f0a:	d902      	bls.n	8006f12 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006f0c:	2303      	movs	r3, #3
 8006f0e:	74fb      	strb	r3, [r7, #19]
        break;
 8006f10:	e005      	b.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006f12:	4b30      	ldr	r3, [pc, #192]	@ (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d0ef      	beq.n	8006efe <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006f1e:	7cfb      	ldrb	r3, [r7, #19]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d159      	bne.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006f24:	4b2a      	ldr	r3, [pc, #168]	@ (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f2e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d01e      	beq.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f3a:	697a      	ldr	r2, [r7, #20]
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	d019      	beq.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006f40:	4b23      	ldr	r3, [pc, #140]	@ (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006f4a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006f4c:	4b20      	ldr	r3, [pc, #128]	@ (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f52:	4a1f      	ldr	r2, [pc, #124]	@ (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006f5c:	4b1c      	ldr	r3, [pc, #112]	@ (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f62:	4a1b      	ldr	r2, [pc, #108]	@ (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006f6c:	4a18      	ldr	r2, [pc, #96]	@ (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	f003 0301 	and.w	r3, r3, #1
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d016      	beq.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f7e:	f7fa fd91 	bl	8001aa4 <HAL_GetTick>
 8006f82:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006f84:	e00b      	b.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f86:	f7fa fd8d 	bl	8001aa4 <HAL_GetTick>
 8006f8a:	4602      	mov	r2, r0
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	1ad3      	subs	r3, r2, r3
 8006f90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d902      	bls.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006f98:	2303      	movs	r3, #3
 8006f9a:	74fb      	strb	r3, [r7, #19]
            break;
 8006f9c:	e006      	b.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006f9e:	4b0c      	ldr	r3, [pc, #48]	@ (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006fa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fa4:	f003 0302 	and.w	r3, r3, #2
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d0ec      	beq.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006fac:	7cfb      	ldrb	r3, [r7, #19]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d10b      	bne.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006fb2:	4b07      	ldr	r3, [pc, #28]	@ (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fb8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fc0:	4903      	ldr	r1, [pc, #12]	@ (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006fc8:	e008      	b.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006fca:	7cfb      	ldrb	r3, [r7, #19]
 8006fcc:	74bb      	strb	r3, [r7, #18]
 8006fce:	e005      	b.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006fd0:	40021000 	.word	0x40021000
 8006fd4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fd8:	7cfb      	ldrb	r3, [r7, #19]
 8006fda:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006fdc:	7c7b      	ldrb	r3, [r7, #17]
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	d105      	bne.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006fe2:	4ba6      	ldr	r3, [pc, #664]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006fe4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fe6:	4aa5      	ldr	r2, [pc, #660]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006fe8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006fec:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f003 0301 	and.w	r3, r3, #1
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d00a      	beq.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006ffa:	4ba0      	ldr	r3, [pc, #640]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007000:	f023 0203 	bic.w	r2, r3, #3
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	499c      	ldr	r1, [pc, #624]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800700a:	4313      	orrs	r3, r2
 800700c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f003 0302 	and.w	r3, r3, #2
 8007018:	2b00      	cmp	r3, #0
 800701a:	d00a      	beq.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800701c:	4b97      	ldr	r3, [pc, #604]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800701e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007022:	f023 020c 	bic.w	r2, r3, #12
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	689b      	ldr	r3, [r3, #8]
 800702a:	4994      	ldr	r1, [pc, #592]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800702c:	4313      	orrs	r3, r2
 800702e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f003 0304 	and.w	r3, r3, #4
 800703a:	2b00      	cmp	r3, #0
 800703c:	d00a      	beq.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800703e:	4b8f      	ldr	r3, [pc, #572]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007040:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007044:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	68db      	ldr	r3, [r3, #12]
 800704c:	498b      	ldr	r1, [pc, #556]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800704e:	4313      	orrs	r3, r2
 8007050:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f003 0308 	and.w	r3, r3, #8
 800705c:	2b00      	cmp	r3, #0
 800705e:	d00a      	beq.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007060:	4b86      	ldr	r3, [pc, #536]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007062:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007066:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	691b      	ldr	r3, [r3, #16]
 800706e:	4983      	ldr	r1, [pc, #524]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007070:	4313      	orrs	r3, r2
 8007072:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f003 0320 	and.w	r3, r3, #32
 800707e:	2b00      	cmp	r3, #0
 8007080:	d00a      	beq.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007082:	4b7e      	ldr	r3, [pc, #504]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007084:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007088:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	695b      	ldr	r3, [r3, #20]
 8007090:	497a      	ldr	r1, [pc, #488]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007092:	4313      	orrs	r3, r2
 8007094:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d00a      	beq.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80070a4:	4b75      	ldr	r3, [pc, #468]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80070a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070aa:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	699b      	ldr	r3, [r3, #24]
 80070b2:	4972      	ldr	r1, [pc, #456]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80070b4:	4313      	orrs	r3, r2
 80070b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d00a      	beq.n	80070dc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80070c6:	4b6d      	ldr	r3, [pc, #436]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80070c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070cc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	69db      	ldr	r3, [r3, #28]
 80070d4:	4969      	ldr	r1, [pc, #420]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80070d6:	4313      	orrs	r3, r2
 80070d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d00a      	beq.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80070e8:	4b64      	ldr	r3, [pc, #400]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80070ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070ee:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6a1b      	ldr	r3, [r3, #32]
 80070f6:	4961      	ldr	r1, [pc, #388]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80070f8:	4313      	orrs	r3, r2
 80070fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007106:	2b00      	cmp	r3, #0
 8007108:	d00a      	beq.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800710a:	4b5c      	ldr	r3, [pc, #368]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800710c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007110:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007118:	4958      	ldr	r1, [pc, #352]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800711a:	4313      	orrs	r3, r2
 800711c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007128:	2b00      	cmp	r3, #0
 800712a:	d015      	beq.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800712c:	4b53      	ldr	r3, [pc, #332]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800712e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007132:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800713a:	4950      	ldr	r1, [pc, #320]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800713c:	4313      	orrs	r3, r2
 800713e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007146:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800714a:	d105      	bne.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800714c:	4b4b      	ldr	r3, [pc, #300]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800714e:	68db      	ldr	r3, [r3, #12]
 8007150:	4a4a      	ldr	r2, [pc, #296]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007152:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007156:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007160:	2b00      	cmp	r3, #0
 8007162:	d015      	beq.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007164:	4b45      	ldr	r3, [pc, #276]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007166:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800716a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007172:	4942      	ldr	r1, [pc, #264]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007174:	4313      	orrs	r3, r2
 8007176:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800717e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007182:	d105      	bne.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007184:	4b3d      	ldr	r3, [pc, #244]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007186:	68db      	ldr	r3, [r3, #12]
 8007188:	4a3c      	ldr	r2, [pc, #240]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800718a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800718e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007198:	2b00      	cmp	r3, #0
 800719a:	d015      	beq.n	80071c8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800719c:	4b37      	ldr	r3, [pc, #220]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800719e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071a2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071aa:	4934      	ldr	r1, [pc, #208]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80071ac:	4313      	orrs	r3, r2
 80071ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071b6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80071ba:	d105      	bne.n	80071c8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80071bc:	4b2f      	ldr	r3, [pc, #188]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80071be:	68db      	ldr	r3, [r3, #12]
 80071c0:	4a2e      	ldr	r2, [pc, #184]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80071c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80071c6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d015      	beq.n	8007200 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80071d4:	4b29      	ldr	r3, [pc, #164]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80071d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071da:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071e2:	4926      	ldr	r1, [pc, #152]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80071e4:	4313      	orrs	r3, r2
 80071e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80071f2:	d105      	bne.n	8007200 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80071f4:	4b21      	ldr	r3, [pc, #132]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80071f6:	68db      	ldr	r3, [r3, #12]
 80071f8:	4a20      	ldr	r2, [pc, #128]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80071fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80071fe:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007208:	2b00      	cmp	r3, #0
 800720a:	d015      	beq.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800720c:	4b1b      	ldr	r3, [pc, #108]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800720e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007212:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800721a:	4918      	ldr	r1, [pc, #96]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800721c:	4313      	orrs	r3, r2
 800721e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007226:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800722a:	d105      	bne.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800722c:	4b13      	ldr	r3, [pc, #76]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800722e:	68db      	ldr	r3, [r3, #12]
 8007230:	4a12      	ldr	r2, [pc, #72]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007232:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007236:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007240:	2b00      	cmp	r3, #0
 8007242:	d015      	beq.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007244:	4b0d      	ldr	r3, [pc, #52]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007246:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800724a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007252:	490a      	ldr	r1, [pc, #40]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007254:	4313      	orrs	r3, r2
 8007256:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800725e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007262:	d105      	bne.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007264:	4b05      	ldr	r3, [pc, #20]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007266:	68db      	ldr	r3, [r3, #12]
 8007268:	4a04      	ldr	r2, [pc, #16]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800726a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800726e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007270:	7cbb      	ldrb	r3, [r7, #18]
}
 8007272:	4618      	mov	r0, r3
 8007274:	3718      	adds	r7, #24
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}
 800727a:	bf00      	nop
 800727c:	40021000 	.word	0x40021000

08007280 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b082      	sub	sp, #8
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d101      	bne.n	8007292 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800728e:	2301      	movs	r3, #1
 8007290:	e049      	b.n	8007326 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007298:	b2db      	uxtb	r3, r3
 800729a:	2b00      	cmp	r3, #0
 800729c:	d106      	bne.n	80072ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2200      	movs	r2, #0
 80072a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f7fa f9b4 	bl	8001614 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2202      	movs	r2, #2
 80072b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681a      	ldr	r2, [r3, #0]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	3304      	adds	r3, #4
 80072bc:	4619      	mov	r1, r3
 80072be:	4610      	mov	r0, r2
 80072c0:	f000 fe16 	bl	8007ef0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2201      	movs	r2, #1
 80072c8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2201      	movs	r2, #1
 80072d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2201      	movs	r2, #1
 80072d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2201      	movs	r2, #1
 80072e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2201      	movs	r2, #1
 80072e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2201      	movs	r2, #1
 80072f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2201      	movs	r2, #1
 80072f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2201      	movs	r2, #1
 8007300:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2201      	movs	r2, #1
 8007308:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2201      	movs	r2, #1
 8007310:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2201      	movs	r2, #1
 8007318:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2201      	movs	r2, #1
 8007320:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007324:	2300      	movs	r3, #0
}
 8007326:	4618      	mov	r0, r3
 8007328:	3708      	adds	r7, #8
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}
	...

08007330 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007330:	b480      	push	{r7}
 8007332:	b085      	sub	sp, #20
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800733e:	b2db      	uxtb	r3, r3
 8007340:	2b01      	cmp	r3, #1
 8007342:	d001      	beq.n	8007348 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007344:	2301      	movs	r3, #1
 8007346:	e042      	b.n	80073ce <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2202      	movs	r2, #2
 800734c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a21      	ldr	r2, [pc, #132]	@ (80073dc <HAL_TIM_Base_Start+0xac>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d018      	beq.n	800738c <HAL_TIM_Base_Start+0x5c>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007362:	d013      	beq.n	800738c <HAL_TIM_Base_Start+0x5c>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a1d      	ldr	r2, [pc, #116]	@ (80073e0 <HAL_TIM_Base_Start+0xb0>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d00e      	beq.n	800738c <HAL_TIM_Base_Start+0x5c>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a1c      	ldr	r2, [pc, #112]	@ (80073e4 <HAL_TIM_Base_Start+0xb4>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d009      	beq.n	800738c <HAL_TIM_Base_Start+0x5c>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a1a      	ldr	r2, [pc, #104]	@ (80073e8 <HAL_TIM_Base_Start+0xb8>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d004      	beq.n	800738c <HAL_TIM_Base_Start+0x5c>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a19      	ldr	r2, [pc, #100]	@ (80073ec <HAL_TIM_Base_Start+0xbc>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d115      	bne.n	80073b8 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	689a      	ldr	r2, [r3, #8]
 8007392:	4b17      	ldr	r3, [pc, #92]	@ (80073f0 <HAL_TIM_Base_Start+0xc0>)
 8007394:	4013      	ands	r3, r2
 8007396:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2b06      	cmp	r3, #6
 800739c:	d015      	beq.n	80073ca <HAL_TIM_Base_Start+0x9a>
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073a4:	d011      	beq.n	80073ca <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	681a      	ldr	r2, [r3, #0]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f042 0201 	orr.w	r2, r2, #1
 80073b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073b6:	e008      	b.n	80073ca <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	681a      	ldr	r2, [r3, #0]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f042 0201 	orr.w	r2, r2, #1
 80073c6:	601a      	str	r2, [r3, #0]
 80073c8:	e000      	b.n	80073cc <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073ca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80073cc:	2300      	movs	r3, #0
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3714      	adds	r7, #20
 80073d2:	46bd      	mov	sp, r7
 80073d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d8:	4770      	bx	lr
 80073da:	bf00      	nop
 80073dc:	40012c00 	.word	0x40012c00
 80073e0:	40000400 	.word	0x40000400
 80073e4:	40000800 	.word	0x40000800
 80073e8:	40013400 	.word	0x40013400
 80073ec:	40014000 	.word	0x40014000
 80073f0:	00010007 	.word	0x00010007

080073f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b082      	sub	sp, #8
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d101      	bne.n	8007406 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007402:	2301      	movs	r3, #1
 8007404:	e049      	b.n	800749a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800740c:	b2db      	uxtb	r3, r3
 800740e:	2b00      	cmp	r3, #0
 8007410:	d106      	bne.n	8007420 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2200      	movs	r2, #0
 8007416:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f000 f841 	bl	80074a2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2202      	movs	r2, #2
 8007424:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681a      	ldr	r2, [r3, #0]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	3304      	adds	r3, #4
 8007430:	4619      	mov	r1, r3
 8007432:	4610      	mov	r0, r2
 8007434:	f000 fd5c 	bl	8007ef0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2201      	movs	r2, #1
 800743c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2201      	movs	r2, #1
 8007444:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2201      	movs	r2, #1
 800744c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2201      	movs	r2, #1
 8007454:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2201      	movs	r2, #1
 800745c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2201      	movs	r2, #1
 8007464:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2201      	movs	r2, #1
 800746c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2201      	movs	r2, #1
 8007474:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2201      	movs	r2, #1
 800747c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2201      	movs	r2, #1
 8007484:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2201      	movs	r2, #1
 800748c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2201      	movs	r2, #1
 8007494:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007498:	2300      	movs	r3, #0
}
 800749a:	4618      	mov	r0, r3
 800749c:	3708      	adds	r7, #8
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}

080074a2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80074a2:	b480      	push	{r7}
 80074a4:	b083      	sub	sp, #12
 80074a6:	af00      	add	r7, sp, #0
 80074a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80074aa:	bf00      	nop
 80074ac:	370c      	adds	r7, #12
 80074ae:	46bd      	mov	sp, r7
 80074b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b4:	4770      	bx	lr
	...

080074b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b084      	sub	sp, #16
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
 80074c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d109      	bne.n	80074dc <HAL_TIM_PWM_Start+0x24>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80074ce:	b2db      	uxtb	r3, r3
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	bf14      	ite	ne
 80074d4:	2301      	movne	r3, #1
 80074d6:	2300      	moveq	r3, #0
 80074d8:	b2db      	uxtb	r3, r3
 80074da:	e03c      	b.n	8007556 <HAL_TIM_PWM_Start+0x9e>
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	2b04      	cmp	r3, #4
 80074e0:	d109      	bne.n	80074f6 <HAL_TIM_PWM_Start+0x3e>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80074e8:	b2db      	uxtb	r3, r3
 80074ea:	2b01      	cmp	r3, #1
 80074ec:	bf14      	ite	ne
 80074ee:	2301      	movne	r3, #1
 80074f0:	2300      	moveq	r3, #0
 80074f2:	b2db      	uxtb	r3, r3
 80074f4:	e02f      	b.n	8007556 <HAL_TIM_PWM_Start+0x9e>
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	2b08      	cmp	r3, #8
 80074fa:	d109      	bne.n	8007510 <HAL_TIM_PWM_Start+0x58>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007502:	b2db      	uxtb	r3, r3
 8007504:	2b01      	cmp	r3, #1
 8007506:	bf14      	ite	ne
 8007508:	2301      	movne	r3, #1
 800750a:	2300      	moveq	r3, #0
 800750c:	b2db      	uxtb	r3, r3
 800750e:	e022      	b.n	8007556 <HAL_TIM_PWM_Start+0x9e>
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	2b0c      	cmp	r3, #12
 8007514:	d109      	bne.n	800752a <HAL_TIM_PWM_Start+0x72>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800751c:	b2db      	uxtb	r3, r3
 800751e:	2b01      	cmp	r3, #1
 8007520:	bf14      	ite	ne
 8007522:	2301      	movne	r3, #1
 8007524:	2300      	moveq	r3, #0
 8007526:	b2db      	uxtb	r3, r3
 8007528:	e015      	b.n	8007556 <HAL_TIM_PWM_Start+0x9e>
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	2b10      	cmp	r3, #16
 800752e:	d109      	bne.n	8007544 <HAL_TIM_PWM_Start+0x8c>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007536:	b2db      	uxtb	r3, r3
 8007538:	2b01      	cmp	r3, #1
 800753a:	bf14      	ite	ne
 800753c:	2301      	movne	r3, #1
 800753e:	2300      	moveq	r3, #0
 8007540:	b2db      	uxtb	r3, r3
 8007542:	e008      	b.n	8007556 <HAL_TIM_PWM_Start+0x9e>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800754a:	b2db      	uxtb	r3, r3
 800754c:	2b01      	cmp	r3, #1
 800754e:	bf14      	ite	ne
 8007550:	2301      	movne	r3, #1
 8007552:	2300      	moveq	r3, #0
 8007554:	b2db      	uxtb	r3, r3
 8007556:	2b00      	cmp	r3, #0
 8007558:	d001      	beq.n	800755e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800755a:	2301      	movs	r3, #1
 800755c:	e097      	b.n	800768e <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d104      	bne.n	800756e <HAL_TIM_PWM_Start+0xb6>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2202      	movs	r2, #2
 8007568:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800756c:	e023      	b.n	80075b6 <HAL_TIM_PWM_Start+0xfe>
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	2b04      	cmp	r3, #4
 8007572:	d104      	bne.n	800757e <HAL_TIM_PWM_Start+0xc6>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2202      	movs	r2, #2
 8007578:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800757c:	e01b      	b.n	80075b6 <HAL_TIM_PWM_Start+0xfe>
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	2b08      	cmp	r3, #8
 8007582:	d104      	bne.n	800758e <HAL_TIM_PWM_Start+0xd6>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2202      	movs	r2, #2
 8007588:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800758c:	e013      	b.n	80075b6 <HAL_TIM_PWM_Start+0xfe>
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	2b0c      	cmp	r3, #12
 8007592:	d104      	bne.n	800759e <HAL_TIM_PWM_Start+0xe6>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2202      	movs	r2, #2
 8007598:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800759c:	e00b      	b.n	80075b6 <HAL_TIM_PWM_Start+0xfe>
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	2b10      	cmp	r3, #16
 80075a2:	d104      	bne.n	80075ae <HAL_TIM_PWM_Start+0xf6>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2202      	movs	r2, #2
 80075a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80075ac:	e003      	b.n	80075b6 <HAL_TIM_PWM_Start+0xfe>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2202      	movs	r2, #2
 80075b2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	2201      	movs	r2, #1
 80075bc:	6839      	ldr	r1, [r7, #0]
 80075be:	4618      	mov	r0, r3
 80075c0:	f001 f92c 	bl	800881c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4a33      	ldr	r2, [pc, #204]	@ (8007698 <HAL_TIM_PWM_Start+0x1e0>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d013      	beq.n	80075f6 <HAL_TIM_PWM_Start+0x13e>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4a32      	ldr	r2, [pc, #200]	@ (800769c <HAL_TIM_PWM_Start+0x1e4>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d00e      	beq.n	80075f6 <HAL_TIM_PWM_Start+0x13e>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a30      	ldr	r2, [pc, #192]	@ (80076a0 <HAL_TIM_PWM_Start+0x1e8>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d009      	beq.n	80075f6 <HAL_TIM_PWM_Start+0x13e>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a2f      	ldr	r2, [pc, #188]	@ (80076a4 <HAL_TIM_PWM_Start+0x1ec>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d004      	beq.n	80075f6 <HAL_TIM_PWM_Start+0x13e>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a2d      	ldr	r2, [pc, #180]	@ (80076a8 <HAL_TIM_PWM_Start+0x1f0>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d101      	bne.n	80075fa <HAL_TIM_PWM_Start+0x142>
 80075f6:	2301      	movs	r3, #1
 80075f8:	e000      	b.n	80075fc <HAL_TIM_PWM_Start+0x144>
 80075fa:	2300      	movs	r3, #0
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d007      	beq.n	8007610 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800760e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4a20      	ldr	r2, [pc, #128]	@ (8007698 <HAL_TIM_PWM_Start+0x1e0>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d018      	beq.n	800764c <HAL_TIM_PWM_Start+0x194>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007622:	d013      	beq.n	800764c <HAL_TIM_PWM_Start+0x194>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4a20      	ldr	r2, [pc, #128]	@ (80076ac <HAL_TIM_PWM_Start+0x1f4>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d00e      	beq.n	800764c <HAL_TIM_PWM_Start+0x194>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4a1f      	ldr	r2, [pc, #124]	@ (80076b0 <HAL_TIM_PWM_Start+0x1f8>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d009      	beq.n	800764c <HAL_TIM_PWM_Start+0x194>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4a17      	ldr	r2, [pc, #92]	@ (800769c <HAL_TIM_PWM_Start+0x1e4>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d004      	beq.n	800764c <HAL_TIM_PWM_Start+0x194>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4a16      	ldr	r2, [pc, #88]	@ (80076a0 <HAL_TIM_PWM_Start+0x1e8>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d115      	bne.n	8007678 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	689a      	ldr	r2, [r3, #8]
 8007652:	4b18      	ldr	r3, [pc, #96]	@ (80076b4 <HAL_TIM_PWM_Start+0x1fc>)
 8007654:	4013      	ands	r3, r2
 8007656:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	2b06      	cmp	r3, #6
 800765c:	d015      	beq.n	800768a <HAL_TIM_PWM_Start+0x1d2>
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007664:	d011      	beq.n	800768a <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	681a      	ldr	r2, [r3, #0]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f042 0201 	orr.w	r2, r2, #1
 8007674:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007676:	e008      	b.n	800768a <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	681a      	ldr	r2, [r3, #0]
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f042 0201 	orr.w	r2, r2, #1
 8007686:	601a      	str	r2, [r3, #0]
 8007688:	e000      	b.n	800768c <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800768a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800768c:	2300      	movs	r3, #0
}
 800768e:	4618      	mov	r0, r3
 8007690:	3710      	adds	r7, #16
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}
 8007696:	bf00      	nop
 8007698:	40012c00 	.word	0x40012c00
 800769c:	40013400 	.word	0x40013400
 80076a0:	40014000 	.word	0x40014000
 80076a4:	40014400 	.word	0x40014400
 80076a8:	40014800 	.word	0x40014800
 80076ac:	40000400 	.word	0x40000400
 80076b0:	40000800 	.word	0x40000800
 80076b4:	00010007 	.word	0x00010007

080076b8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b082      	sub	sp, #8
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
 80076c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	2200      	movs	r2, #0
 80076c8:	6839      	ldr	r1, [r7, #0]
 80076ca:	4618      	mov	r0, r3
 80076cc:	f001 f8a6 	bl	800881c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a3e      	ldr	r2, [pc, #248]	@ (80077d0 <HAL_TIM_PWM_Stop+0x118>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d013      	beq.n	8007702 <HAL_TIM_PWM_Stop+0x4a>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4a3d      	ldr	r2, [pc, #244]	@ (80077d4 <HAL_TIM_PWM_Stop+0x11c>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d00e      	beq.n	8007702 <HAL_TIM_PWM_Stop+0x4a>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a3b      	ldr	r2, [pc, #236]	@ (80077d8 <HAL_TIM_PWM_Stop+0x120>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d009      	beq.n	8007702 <HAL_TIM_PWM_Stop+0x4a>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a3a      	ldr	r2, [pc, #232]	@ (80077dc <HAL_TIM_PWM_Stop+0x124>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d004      	beq.n	8007702 <HAL_TIM_PWM_Stop+0x4a>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a38      	ldr	r2, [pc, #224]	@ (80077e0 <HAL_TIM_PWM_Stop+0x128>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d101      	bne.n	8007706 <HAL_TIM_PWM_Stop+0x4e>
 8007702:	2301      	movs	r3, #1
 8007704:	e000      	b.n	8007708 <HAL_TIM_PWM_Stop+0x50>
 8007706:	2300      	movs	r3, #0
 8007708:	2b00      	cmp	r3, #0
 800770a:	d017      	beq.n	800773c <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	6a1a      	ldr	r2, [r3, #32]
 8007712:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007716:	4013      	ands	r3, r2
 8007718:	2b00      	cmp	r3, #0
 800771a:	d10f      	bne.n	800773c <HAL_TIM_PWM_Stop+0x84>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	6a1a      	ldr	r2, [r3, #32]
 8007722:	f244 4344 	movw	r3, #17476	@ 0x4444
 8007726:	4013      	ands	r3, r2
 8007728:	2b00      	cmp	r3, #0
 800772a:	d107      	bne.n	800773c <HAL_TIM_PWM_Stop+0x84>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800773a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	6a1a      	ldr	r2, [r3, #32]
 8007742:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007746:	4013      	ands	r3, r2
 8007748:	2b00      	cmp	r3, #0
 800774a:	d10f      	bne.n	800776c <HAL_TIM_PWM_Stop+0xb4>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	6a1a      	ldr	r2, [r3, #32]
 8007752:	f244 4344 	movw	r3, #17476	@ 0x4444
 8007756:	4013      	ands	r3, r2
 8007758:	2b00      	cmp	r3, #0
 800775a:	d107      	bne.n	800776c <HAL_TIM_PWM_Stop+0xb4>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	681a      	ldr	r2, [r3, #0]
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f022 0201 	bic.w	r2, r2, #1
 800776a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d104      	bne.n	800777c <HAL_TIM_PWM_Stop+0xc4>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2201      	movs	r2, #1
 8007776:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800777a:	e023      	b.n	80077c4 <HAL_TIM_PWM_Stop+0x10c>
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	2b04      	cmp	r3, #4
 8007780:	d104      	bne.n	800778c <HAL_TIM_PWM_Stop+0xd4>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2201      	movs	r2, #1
 8007786:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800778a:	e01b      	b.n	80077c4 <HAL_TIM_PWM_Stop+0x10c>
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	2b08      	cmp	r3, #8
 8007790:	d104      	bne.n	800779c <HAL_TIM_PWM_Stop+0xe4>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2201      	movs	r2, #1
 8007796:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800779a:	e013      	b.n	80077c4 <HAL_TIM_PWM_Stop+0x10c>
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	2b0c      	cmp	r3, #12
 80077a0:	d104      	bne.n	80077ac <HAL_TIM_PWM_Stop+0xf4>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2201      	movs	r2, #1
 80077a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80077aa:	e00b      	b.n	80077c4 <HAL_TIM_PWM_Stop+0x10c>
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	2b10      	cmp	r3, #16
 80077b0:	d104      	bne.n	80077bc <HAL_TIM_PWM_Stop+0x104>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2201      	movs	r2, #1
 80077b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80077ba:	e003      	b.n	80077c4 <HAL_TIM_PWM_Stop+0x10c>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2201      	movs	r2, #1
 80077c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 80077c4:	2300      	movs	r3, #0
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3708      	adds	r7, #8
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}
 80077ce:	bf00      	nop
 80077d0:	40012c00 	.word	0x40012c00
 80077d4:	40013400 	.word	0x40013400
 80077d8:	40014000 	.word	0x40014000
 80077dc:	40014400 	.word	0x40014400
 80077e0:	40014800 	.word	0x40014800

080077e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b084      	sub	sp, #16
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	68db      	ldr	r3, [r3, #12]
 80077f2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	691b      	ldr	r3, [r3, #16]
 80077fa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	f003 0302 	and.w	r3, r3, #2
 8007802:	2b00      	cmp	r3, #0
 8007804:	d020      	beq.n	8007848 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	f003 0302 	and.w	r3, r3, #2
 800780c:	2b00      	cmp	r3, #0
 800780e:	d01b      	beq.n	8007848 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f06f 0202 	mvn.w	r2, #2
 8007818:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2201      	movs	r2, #1
 800781e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	699b      	ldr	r3, [r3, #24]
 8007826:	f003 0303 	and.w	r3, r3, #3
 800782a:	2b00      	cmp	r3, #0
 800782c:	d003      	beq.n	8007836 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f003 f976 	bl	800ab20 <HAL_TIM_IC_CaptureCallback>
 8007834:	e005      	b.n	8007842 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f000 fb3c 	bl	8007eb4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f000 fb43 	bl	8007ec8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2200      	movs	r2, #0
 8007846:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	f003 0304 	and.w	r3, r3, #4
 800784e:	2b00      	cmp	r3, #0
 8007850:	d020      	beq.n	8007894 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	f003 0304 	and.w	r3, r3, #4
 8007858:	2b00      	cmp	r3, #0
 800785a:	d01b      	beq.n	8007894 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f06f 0204 	mvn.w	r2, #4
 8007864:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2202      	movs	r2, #2
 800786a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	699b      	ldr	r3, [r3, #24]
 8007872:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007876:	2b00      	cmp	r3, #0
 8007878:	d003      	beq.n	8007882 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f003 f950 	bl	800ab20 <HAL_TIM_IC_CaptureCallback>
 8007880:	e005      	b.n	800788e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f000 fb16 	bl	8007eb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f000 fb1d 	bl	8007ec8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2200      	movs	r2, #0
 8007892:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	f003 0308 	and.w	r3, r3, #8
 800789a:	2b00      	cmp	r3, #0
 800789c:	d020      	beq.n	80078e0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	f003 0308 	and.w	r3, r3, #8
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d01b      	beq.n	80078e0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f06f 0208 	mvn.w	r2, #8
 80078b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2204      	movs	r2, #4
 80078b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	69db      	ldr	r3, [r3, #28]
 80078be:	f003 0303 	and.w	r3, r3, #3
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d003      	beq.n	80078ce <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f003 f92a 	bl	800ab20 <HAL_TIM_IC_CaptureCallback>
 80078cc:	e005      	b.n	80078da <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f000 faf0 	bl	8007eb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f000 faf7 	bl	8007ec8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2200      	movs	r2, #0
 80078de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	f003 0310 	and.w	r3, r3, #16
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d020      	beq.n	800792c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	f003 0310 	and.w	r3, r3, #16
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d01b      	beq.n	800792c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f06f 0210 	mvn.w	r2, #16
 80078fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2208      	movs	r2, #8
 8007902:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	69db      	ldr	r3, [r3, #28]
 800790a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800790e:	2b00      	cmp	r3, #0
 8007910:	d003      	beq.n	800791a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f003 f904 	bl	800ab20 <HAL_TIM_IC_CaptureCallback>
 8007918:	e005      	b.n	8007926 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f000 faca 	bl	8007eb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f000 fad1 	bl	8007ec8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2200      	movs	r2, #0
 800792a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	f003 0301 	and.w	r3, r3, #1
 8007932:	2b00      	cmp	r3, #0
 8007934:	d00c      	beq.n	8007950 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	f003 0301 	and.w	r3, r3, #1
 800793c:	2b00      	cmp	r3, #0
 800793e:	d007      	beq.n	8007950 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f06f 0201 	mvn.w	r2, #1
 8007948:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f000 faa8 	bl	8007ea0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007956:	2b00      	cmp	r3, #0
 8007958:	d104      	bne.n	8007964 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007960:	2b00      	cmp	r3, #0
 8007962:	d00c      	beq.n	800797e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800796a:	2b00      	cmp	r3, #0
 800796c:	d007      	beq.n	800797e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007976:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f001 fbbf 	bl	80090fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007984:	2b00      	cmp	r3, #0
 8007986:	d00c      	beq.n	80079a2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800798e:	2b00      	cmp	r3, #0
 8007990:	d007      	beq.n	80079a2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800799a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f001 fbb7 	bl	8009110 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d00c      	beq.n	80079c6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d007      	beq.n	80079c6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80079be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f000 fa8b 	bl	8007edc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	f003 0320 	and.w	r3, r3, #32
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d00c      	beq.n	80079ea <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	f003 0320 	and.w	r3, r3, #32
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d007      	beq.n	80079ea <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f06f 0220 	mvn.w	r2, #32
 80079e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f001 fb7f 	bl	80090e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d00c      	beq.n	8007a0e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d007      	beq.n	8007a0e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8007a06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f001 fb8b 	bl	8009124 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d00c      	beq.n	8007a32 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d007      	beq.n	8007a32 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8007a2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f001 fb83 	bl	8009138 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d00c      	beq.n	8007a56 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d007      	beq.n	8007a56 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8007a4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f001 fb7b 	bl	800914c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d00c      	beq.n	8007a7a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d007      	beq.n	8007a7a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8007a72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f001 fb73 	bl	8009160 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007a7a:	bf00      	nop
 8007a7c:	3710      	adds	r7, #16
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}
	...

08007a84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b086      	sub	sp, #24
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	60f8      	str	r0, [r7, #12]
 8007a8c:	60b9      	str	r1, [r7, #8]
 8007a8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007a90:	2300      	movs	r3, #0
 8007a92:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007a9a:	2b01      	cmp	r3, #1
 8007a9c:	d101      	bne.n	8007aa2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007a9e:	2302      	movs	r3, #2
 8007aa0:	e0ff      	b.n	8007ca2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2201      	movs	r2, #1
 8007aa6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2b14      	cmp	r3, #20
 8007aae:	f200 80f0 	bhi.w	8007c92 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007ab2:	a201      	add	r2, pc, #4	@ (adr r2, 8007ab8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ab8:	08007b0d 	.word	0x08007b0d
 8007abc:	08007c93 	.word	0x08007c93
 8007ac0:	08007c93 	.word	0x08007c93
 8007ac4:	08007c93 	.word	0x08007c93
 8007ac8:	08007b4d 	.word	0x08007b4d
 8007acc:	08007c93 	.word	0x08007c93
 8007ad0:	08007c93 	.word	0x08007c93
 8007ad4:	08007c93 	.word	0x08007c93
 8007ad8:	08007b8f 	.word	0x08007b8f
 8007adc:	08007c93 	.word	0x08007c93
 8007ae0:	08007c93 	.word	0x08007c93
 8007ae4:	08007c93 	.word	0x08007c93
 8007ae8:	08007bcf 	.word	0x08007bcf
 8007aec:	08007c93 	.word	0x08007c93
 8007af0:	08007c93 	.word	0x08007c93
 8007af4:	08007c93 	.word	0x08007c93
 8007af8:	08007c11 	.word	0x08007c11
 8007afc:	08007c93 	.word	0x08007c93
 8007b00:	08007c93 	.word	0x08007c93
 8007b04:	08007c93 	.word	0x08007c93
 8007b08:	08007c51 	.word	0x08007c51
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	68b9      	ldr	r1, [r7, #8]
 8007b12:	4618      	mov	r0, r3
 8007b14:	f000 fa88 	bl	8008028 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	699a      	ldr	r2, [r3, #24]
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f042 0208 	orr.w	r2, r2, #8
 8007b26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	699a      	ldr	r2, [r3, #24]
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f022 0204 	bic.w	r2, r2, #4
 8007b36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	6999      	ldr	r1, [r3, #24]
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	691a      	ldr	r2, [r3, #16]
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	430a      	orrs	r2, r1
 8007b48:	619a      	str	r2, [r3, #24]
      break;
 8007b4a:	e0a5      	b.n	8007c98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	68b9      	ldr	r1, [r7, #8]
 8007b52:	4618      	mov	r0, r3
 8007b54:	f000 faf8 	bl	8008148 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	699a      	ldr	r2, [r3, #24]
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007b66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	699a      	ldr	r2, [r3, #24]
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007b76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	6999      	ldr	r1, [r3, #24]
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	691b      	ldr	r3, [r3, #16]
 8007b82:	021a      	lsls	r2, r3, #8
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	430a      	orrs	r2, r1
 8007b8a:	619a      	str	r2, [r3, #24]
      break;
 8007b8c:	e084      	b.n	8007c98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	68b9      	ldr	r1, [r7, #8]
 8007b94:	4618      	mov	r0, r3
 8007b96:	f000 fb61 	bl	800825c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	69da      	ldr	r2, [r3, #28]
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f042 0208 	orr.w	r2, r2, #8
 8007ba8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	69da      	ldr	r2, [r3, #28]
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f022 0204 	bic.w	r2, r2, #4
 8007bb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	69d9      	ldr	r1, [r3, #28]
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	691a      	ldr	r2, [r3, #16]
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	430a      	orrs	r2, r1
 8007bca:	61da      	str	r2, [r3, #28]
      break;
 8007bcc:	e064      	b.n	8007c98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	68b9      	ldr	r1, [r7, #8]
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	f000 fbc9 	bl	800836c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	69da      	ldr	r2, [r3, #28]
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007be8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	69da      	ldr	r2, [r3, #28]
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007bf8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	69d9      	ldr	r1, [r3, #28]
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	691b      	ldr	r3, [r3, #16]
 8007c04:	021a      	lsls	r2, r3, #8
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	430a      	orrs	r2, r1
 8007c0c:	61da      	str	r2, [r3, #28]
      break;
 8007c0e:	e043      	b.n	8007c98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	68b9      	ldr	r1, [r7, #8]
 8007c16:	4618      	mov	r0, r3
 8007c18:	f000 fc32 	bl	8008480 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f042 0208 	orr.w	r2, r2, #8
 8007c2a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f022 0204 	bic.w	r2, r2, #4
 8007c3a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	691a      	ldr	r2, [r3, #16]
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	430a      	orrs	r2, r1
 8007c4c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007c4e:	e023      	b.n	8007c98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	68b9      	ldr	r1, [r7, #8]
 8007c56:	4618      	mov	r0, r3
 8007c58:	f000 fc76 	bl	8008548 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007c6a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007c7a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	691b      	ldr	r3, [r3, #16]
 8007c86:	021a      	lsls	r2, r3, #8
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	430a      	orrs	r2, r1
 8007c8e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007c90:	e002      	b.n	8007c98 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007c92:	2301      	movs	r3, #1
 8007c94:	75fb      	strb	r3, [r7, #23]
      break;
 8007c96:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007ca0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3718      	adds	r7, #24
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}
 8007caa:	bf00      	nop

08007cac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b084      	sub	sp, #16
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
 8007cb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007cc0:	2b01      	cmp	r3, #1
 8007cc2:	d101      	bne.n	8007cc8 <HAL_TIM_ConfigClockSource+0x1c>
 8007cc4:	2302      	movs	r3, #2
 8007cc6:	e0de      	b.n	8007e86 <HAL_TIM_ConfigClockSource+0x1da>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2201      	movs	r2, #1
 8007ccc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2202      	movs	r2, #2
 8007cd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	689b      	ldr	r3, [r3, #8]
 8007cde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8007ce6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007cea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007cf2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	68ba      	ldr	r2, [r7, #8]
 8007cfa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4a63      	ldr	r2, [pc, #396]	@ (8007e90 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	f000 80a9 	beq.w	8007e5a <HAL_TIM_ConfigClockSource+0x1ae>
 8007d08:	4a61      	ldr	r2, [pc, #388]	@ (8007e90 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	f200 80ae 	bhi.w	8007e6c <HAL_TIM_ConfigClockSource+0x1c0>
 8007d10:	4a60      	ldr	r2, [pc, #384]	@ (8007e94 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	f000 80a1 	beq.w	8007e5a <HAL_TIM_ConfigClockSource+0x1ae>
 8007d18:	4a5e      	ldr	r2, [pc, #376]	@ (8007e94 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	f200 80a6 	bhi.w	8007e6c <HAL_TIM_ConfigClockSource+0x1c0>
 8007d20:	4a5d      	ldr	r2, [pc, #372]	@ (8007e98 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	f000 8099 	beq.w	8007e5a <HAL_TIM_ConfigClockSource+0x1ae>
 8007d28:	4a5b      	ldr	r2, [pc, #364]	@ (8007e98 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	f200 809e 	bhi.w	8007e6c <HAL_TIM_ConfigClockSource+0x1c0>
 8007d30:	4a5a      	ldr	r2, [pc, #360]	@ (8007e9c <HAL_TIM_ConfigClockSource+0x1f0>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	f000 8091 	beq.w	8007e5a <HAL_TIM_ConfigClockSource+0x1ae>
 8007d38:	4a58      	ldr	r2, [pc, #352]	@ (8007e9c <HAL_TIM_ConfigClockSource+0x1f0>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	f200 8096 	bhi.w	8007e6c <HAL_TIM_ConfigClockSource+0x1c0>
 8007d40:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007d44:	f000 8089 	beq.w	8007e5a <HAL_TIM_ConfigClockSource+0x1ae>
 8007d48:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007d4c:	f200 808e 	bhi.w	8007e6c <HAL_TIM_ConfigClockSource+0x1c0>
 8007d50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d54:	d03e      	beq.n	8007dd4 <HAL_TIM_ConfigClockSource+0x128>
 8007d56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d5a:	f200 8087 	bhi.w	8007e6c <HAL_TIM_ConfigClockSource+0x1c0>
 8007d5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d62:	f000 8086 	beq.w	8007e72 <HAL_TIM_ConfigClockSource+0x1c6>
 8007d66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d6a:	d87f      	bhi.n	8007e6c <HAL_TIM_ConfigClockSource+0x1c0>
 8007d6c:	2b70      	cmp	r3, #112	@ 0x70
 8007d6e:	d01a      	beq.n	8007da6 <HAL_TIM_ConfigClockSource+0xfa>
 8007d70:	2b70      	cmp	r3, #112	@ 0x70
 8007d72:	d87b      	bhi.n	8007e6c <HAL_TIM_ConfigClockSource+0x1c0>
 8007d74:	2b60      	cmp	r3, #96	@ 0x60
 8007d76:	d050      	beq.n	8007e1a <HAL_TIM_ConfigClockSource+0x16e>
 8007d78:	2b60      	cmp	r3, #96	@ 0x60
 8007d7a:	d877      	bhi.n	8007e6c <HAL_TIM_ConfigClockSource+0x1c0>
 8007d7c:	2b50      	cmp	r3, #80	@ 0x50
 8007d7e:	d03c      	beq.n	8007dfa <HAL_TIM_ConfigClockSource+0x14e>
 8007d80:	2b50      	cmp	r3, #80	@ 0x50
 8007d82:	d873      	bhi.n	8007e6c <HAL_TIM_ConfigClockSource+0x1c0>
 8007d84:	2b40      	cmp	r3, #64	@ 0x40
 8007d86:	d058      	beq.n	8007e3a <HAL_TIM_ConfigClockSource+0x18e>
 8007d88:	2b40      	cmp	r3, #64	@ 0x40
 8007d8a:	d86f      	bhi.n	8007e6c <HAL_TIM_ConfigClockSource+0x1c0>
 8007d8c:	2b30      	cmp	r3, #48	@ 0x30
 8007d8e:	d064      	beq.n	8007e5a <HAL_TIM_ConfigClockSource+0x1ae>
 8007d90:	2b30      	cmp	r3, #48	@ 0x30
 8007d92:	d86b      	bhi.n	8007e6c <HAL_TIM_ConfigClockSource+0x1c0>
 8007d94:	2b20      	cmp	r3, #32
 8007d96:	d060      	beq.n	8007e5a <HAL_TIM_ConfigClockSource+0x1ae>
 8007d98:	2b20      	cmp	r3, #32
 8007d9a:	d867      	bhi.n	8007e6c <HAL_TIM_ConfigClockSource+0x1c0>
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d05c      	beq.n	8007e5a <HAL_TIM_ConfigClockSource+0x1ae>
 8007da0:	2b10      	cmp	r3, #16
 8007da2:	d05a      	beq.n	8007e5a <HAL_TIM_ConfigClockSource+0x1ae>
 8007da4:	e062      	b.n	8007e6c <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007db6:	f000 fd11 	bl	80087dc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	689b      	ldr	r3, [r3, #8]
 8007dc0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007dc8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	68ba      	ldr	r2, [r7, #8]
 8007dd0:	609a      	str	r2, [r3, #8]
      break;
 8007dd2:	e04f      	b.n	8007e74 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007de4:	f000 fcfa 	bl	80087dc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	689a      	ldr	r2, [r3, #8]
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007df6:	609a      	str	r2, [r3, #8]
      break;
 8007df8:	e03c      	b.n	8007e74 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e06:	461a      	mov	r2, r3
 8007e08:	f000 fc6c 	bl	80086e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	2150      	movs	r1, #80	@ 0x50
 8007e12:	4618      	mov	r0, r3
 8007e14:	f000 fcc5 	bl	80087a2 <TIM_ITRx_SetConfig>
      break;
 8007e18:	e02c      	b.n	8007e74 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007e26:	461a      	mov	r2, r3
 8007e28:	f000 fc8b 	bl	8008742 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	2160      	movs	r1, #96	@ 0x60
 8007e32:	4618      	mov	r0, r3
 8007e34:	f000 fcb5 	bl	80087a2 <TIM_ITRx_SetConfig>
      break;
 8007e38:	e01c      	b.n	8007e74 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e46:	461a      	mov	r2, r3
 8007e48:	f000 fc4c 	bl	80086e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	2140      	movs	r1, #64	@ 0x40
 8007e52:	4618      	mov	r0, r3
 8007e54:	f000 fca5 	bl	80087a2 <TIM_ITRx_SetConfig>
      break;
 8007e58:	e00c      	b.n	8007e74 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681a      	ldr	r2, [r3, #0]
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	4619      	mov	r1, r3
 8007e64:	4610      	mov	r0, r2
 8007e66:	f000 fc9c 	bl	80087a2 <TIM_ITRx_SetConfig>
      break;
 8007e6a:	e003      	b.n	8007e74 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	73fb      	strb	r3, [r7, #15]
      break;
 8007e70:	e000      	b.n	8007e74 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8007e72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2201      	movs	r2, #1
 8007e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	3710      	adds	r7, #16
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}
 8007e8e:	bf00      	nop
 8007e90:	00100070 	.word	0x00100070
 8007e94:	00100040 	.word	0x00100040
 8007e98:	00100030 	.word	0x00100030
 8007e9c:	00100020 	.word	0x00100020

08007ea0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b083      	sub	sp, #12
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007ea8:	bf00      	nop
 8007eaa:	370c      	adds	r7, #12
 8007eac:	46bd      	mov	sp, r7
 8007eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb2:	4770      	bx	lr

08007eb4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b083      	sub	sp, #12
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007ebc:	bf00      	nop
 8007ebe:	370c      	adds	r7, #12
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec6:	4770      	bx	lr

08007ec8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b083      	sub	sp, #12
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007ed0:	bf00      	nop
 8007ed2:	370c      	adds	r7, #12
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eda:	4770      	bx	lr

08007edc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007edc:	b480      	push	{r7}
 8007ede:	b083      	sub	sp, #12
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007ee4:	bf00      	nop
 8007ee6:	370c      	adds	r7, #12
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eee:	4770      	bx	lr

08007ef0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b085      	sub	sp, #20
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
 8007ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	4a42      	ldr	r2, [pc, #264]	@ (800800c <TIM_Base_SetConfig+0x11c>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d00f      	beq.n	8007f28 <TIM_Base_SetConfig+0x38>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f0e:	d00b      	beq.n	8007f28 <TIM_Base_SetConfig+0x38>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	4a3f      	ldr	r2, [pc, #252]	@ (8008010 <TIM_Base_SetConfig+0x120>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d007      	beq.n	8007f28 <TIM_Base_SetConfig+0x38>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	4a3e      	ldr	r2, [pc, #248]	@ (8008014 <TIM_Base_SetConfig+0x124>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d003      	beq.n	8007f28 <TIM_Base_SetConfig+0x38>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	4a3d      	ldr	r2, [pc, #244]	@ (8008018 <TIM_Base_SetConfig+0x128>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d108      	bne.n	8007f3a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	685b      	ldr	r3, [r3, #4]
 8007f34:	68fa      	ldr	r2, [r7, #12]
 8007f36:	4313      	orrs	r3, r2
 8007f38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	4a33      	ldr	r2, [pc, #204]	@ (800800c <TIM_Base_SetConfig+0x11c>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d01b      	beq.n	8007f7a <TIM_Base_SetConfig+0x8a>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f48:	d017      	beq.n	8007f7a <TIM_Base_SetConfig+0x8a>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	4a30      	ldr	r2, [pc, #192]	@ (8008010 <TIM_Base_SetConfig+0x120>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d013      	beq.n	8007f7a <TIM_Base_SetConfig+0x8a>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	4a2f      	ldr	r2, [pc, #188]	@ (8008014 <TIM_Base_SetConfig+0x124>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d00f      	beq.n	8007f7a <TIM_Base_SetConfig+0x8a>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	4a2e      	ldr	r2, [pc, #184]	@ (8008018 <TIM_Base_SetConfig+0x128>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d00b      	beq.n	8007f7a <TIM_Base_SetConfig+0x8a>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	4a2d      	ldr	r2, [pc, #180]	@ (800801c <TIM_Base_SetConfig+0x12c>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d007      	beq.n	8007f7a <TIM_Base_SetConfig+0x8a>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	4a2c      	ldr	r2, [pc, #176]	@ (8008020 <TIM_Base_SetConfig+0x130>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d003      	beq.n	8007f7a <TIM_Base_SetConfig+0x8a>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	4a2b      	ldr	r2, [pc, #172]	@ (8008024 <TIM_Base_SetConfig+0x134>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d108      	bne.n	8007f8c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007f80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	68db      	ldr	r3, [r3, #12]
 8007f86:	68fa      	ldr	r2, [r7, #12]
 8007f88:	4313      	orrs	r3, r2
 8007f8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	695b      	ldr	r3, [r3, #20]
 8007f96:	4313      	orrs	r3, r2
 8007f98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	68fa      	ldr	r2, [r7, #12]
 8007f9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	689a      	ldr	r2, [r3, #8]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	681a      	ldr	r2, [r3, #0]
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	4a16      	ldr	r2, [pc, #88]	@ (800800c <TIM_Base_SetConfig+0x11c>)
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d00f      	beq.n	8007fd8 <TIM_Base_SetConfig+0xe8>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	4a17      	ldr	r2, [pc, #92]	@ (8008018 <TIM_Base_SetConfig+0x128>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d00b      	beq.n	8007fd8 <TIM_Base_SetConfig+0xe8>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	4a16      	ldr	r2, [pc, #88]	@ (800801c <TIM_Base_SetConfig+0x12c>)
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d007      	beq.n	8007fd8 <TIM_Base_SetConfig+0xe8>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	4a15      	ldr	r2, [pc, #84]	@ (8008020 <TIM_Base_SetConfig+0x130>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d003      	beq.n	8007fd8 <TIM_Base_SetConfig+0xe8>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	4a14      	ldr	r2, [pc, #80]	@ (8008024 <TIM_Base_SetConfig+0x134>)
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d103      	bne.n	8007fe0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	691a      	ldr	r2, [r3, #16]
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2201      	movs	r2, #1
 8007fe4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	691b      	ldr	r3, [r3, #16]
 8007fea:	f003 0301 	and.w	r3, r3, #1
 8007fee:	2b01      	cmp	r3, #1
 8007ff0:	d105      	bne.n	8007ffe <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	691b      	ldr	r3, [r3, #16]
 8007ff6:	f023 0201 	bic.w	r2, r3, #1
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	611a      	str	r2, [r3, #16]
  }
}
 8007ffe:	bf00      	nop
 8008000:	3714      	adds	r7, #20
 8008002:	46bd      	mov	sp, r7
 8008004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008008:	4770      	bx	lr
 800800a:	bf00      	nop
 800800c:	40012c00 	.word	0x40012c00
 8008010:	40000400 	.word	0x40000400
 8008014:	40000800 	.word	0x40000800
 8008018:	40013400 	.word	0x40013400
 800801c:	40014000 	.word	0x40014000
 8008020:	40014400 	.word	0x40014400
 8008024:	40014800 	.word	0x40014800

08008028 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008028:	b480      	push	{r7}
 800802a:	b087      	sub	sp, #28
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
 8008030:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6a1b      	ldr	r3, [r3, #32]
 8008036:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6a1b      	ldr	r3, [r3, #32]
 800803c:	f023 0201 	bic.w	r2, r3, #1
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	685b      	ldr	r3, [r3, #4]
 8008048:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	699b      	ldr	r3, [r3, #24]
 800804e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008056:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800805a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	f023 0303 	bic.w	r3, r3, #3
 8008062:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	68fa      	ldr	r2, [r7, #12]
 800806a:	4313      	orrs	r3, r2
 800806c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800806e:	697b      	ldr	r3, [r7, #20]
 8008070:	f023 0302 	bic.w	r3, r3, #2
 8008074:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	689b      	ldr	r3, [r3, #8]
 800807a:	697a      	ldr	r2, [r7, #20]
 800807c:	4313      	orrs	r3, r2
 800807e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	4a2c      	ldr	r2, [pc, #176]	@ (8008134 <TIM_OC1_SetConfig+0x10c>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d00f      	beq.n	80080a8 <TIM_OC1_SetConfig+0x80>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	4a2b      	ldr	r2, [pc, #172]	@ (8008138 <TIM_OC1_SetConfig+0x110>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d00b      	beq.n	80080a8 <TIM_OC1_SetConfig+0x80>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	4a2a      	ldr	r2, [pc, #168]	@ (800813c <TIM_OC1_SetConfig+0x114>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d007      	beq.n	80080a8 <TIM_OC1_SetConfig+0x80>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	4a29      	ldr	r2, [pc, #164]	@ (8008140 <TIM_OC1_SetConfig+0x118>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d003      	beq.n	80080a8 <TIM_OC1_SetConfig+0x80>
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	4a28      	ldr	r2, [pc, #160]	@ (8008144 <TIM_OC1_SetConfig+0x11c>)
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d10c      	bne.n	80080c2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80080a8:	697b      	ldr	r3, [r7, #20]
 80080aa:	f023 0308 	bic.w	r3, r3, #8
 80080ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	68db      	ldr	r3, [r3, #12]
 80080b4:	697a      	ldr	r2, [r7, #20]
 80080b6:	4313      	orrs	r3, r2
 80080b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80080ba:	697b      	ldr	r3, [r7, #20]
 80080bc:	f023 0304 	bic.w	r3, r3, #4
 80080c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	4a1b      	ldr	r2, [pc, #108]	@ (8008134 <TIM_OC1_SetConfig+0x10c>)
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d00f      	beq.n	80080ea <TIM_OC1_SetConfig+0xc2>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	4a1a      	ldr	r2, [pc, #104]	@ (8008138 <TIM_OC1_SetConfig+0x110>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d00b      	beq.n	80080ea <TIM_OC1_SetConfig+0xc2>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	4a19      	ldr	r2, [pc, #100]	@ (800813c <TIM_OC1_SetConfig+0x114>)
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d007      	beq.n	80080ea <TIM_OC1_SetConfig+0xc2>
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	4a18      	ldr	r2, [pc, #96]	@ (8008140 <TIM_OC1_SetConfig+0x118>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d003      	beq.n	80080ea <TIM_OC1_SetConfig+0xc2>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	4a17      	ldr	r2, [pc, #92]	@ (8008144 <TIM_OC1_SetConfig+0x11c>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d111      	bne.n	800810e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80080ea:	693b      	ldr	r3, [r7, #16]
 80080ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80080f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80080f2:	693b      	ldr	r3, [r7, #16]
 80080f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80080f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	695b      	ldr	r3, [r3, #20]
 80080fe:	693a      	ldr	r2, [r7, #16]
 8008100:	4313      	orrs	r3, r2
 8008102:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	699b      	ldr	r3, [r3, #24]
 8008108:	693a      	ldr	r2, [r7, #16]
 800810a:	4313      	orrs	r3, r2
 800810c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	693a      	ldr	r2, [r7, #16]
 8008112:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	68fa      	ldr	r2, [r7, #12]
 8008118:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	685a      	ldr	r2, [r3, #4]
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	697a      	ldr	r2, [r7, #20]
 8008126:	621a      	str	r2, [r3, #32]
}
 8008128:	bf00      	nop
 800812a:	371c      	adds	r7, #28
 800812c:	46bd      	mov	sp, r7
 800812e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008132:	4770      	bx	lr
 8008134:	40012c00 	.word	0x40012c00
 8008138:	40013400 	.word	0x40013400
 800813c:	40014000 	.word	0x40014000
 8008140:	40014400 	.word	0x40014400
 8008144:	40014800 	.word	0x40014800

08008148 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008148:	b480      	push	{r7}
 800814a:	b087      	sub	sp, #28
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
 8008150:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6a1b      	ldr	r3, [r3, #32]
 8008156:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6a1b      	ldr	r3, [r3, #32]
 800815c:	f023 0210 	bic.w	r2, r3, #16
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	685b      	ldr	r3, [r3, #4]
 8008168:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	699b      	ldr	r3, [r3, #24]
 800816e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008176:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800817a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008182:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	021b      	lsls	r3, r3, #8
 800818a:	68fa      	ldr	r2, [r7, #12]
 800818c:	4313      	orrs	r3, r2
 800818e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008190:	697b      	ldr	r3, [r7, #20]
 8008192:	f023 0320 	bic.w	r3, r3, #32
 8008196:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	689b      	ldr	r3, [r3, #8]
 800819c:	011b      	lsls	r3, r3, #4
 800819e:	697a      	ldr	r2, [r7, #20]
 80081a0:	4313      	orrs	r3, r2
 80081a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	4a28      	ldr	r2, [pc, #160]	@ (8008248 <TIM_OC2_SetConfig+0x100>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d003      	beq.n	80081b4 <TIM_OC2_SetConfig+0x6c>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	4a27      	ldr	r2, [pc, #156]	@ (800824c <TIM_OC2_SetConfig+0x104>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d10d      	bne.n	80081d0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80081b4:	697b      	ldr	r3, [r7, #20]
 80081b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80081ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	68db      	ldr	r3, [r3, #12]
 80081c0:	011b      	lsls	r3, r3, #4
 80081c2:	697a      	ldr	r2, [r7, #20]
 80081c4:	4313      	orrs	r3, r2
 80081c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80081c8:	697b      	ldr	r3, [r7, #20]
 80081ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80081ce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	4a1d      	ldr	r2, [pc, #116]	@ (8008248 <TIM_OC2_SetConfig+0x100>)
 80081d4:	4293      	cmp	r3, r2
 80081d6:	d00f      	beq.n	80081f8 <TIM_OC2_SetConfig+0xb0>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	4a1c      	ldr	r2, [pc, #112]	@ (800824c <TIM_OC2_SetConfig+0x104>)
 80081dc:	4293      	cmp	r3, r2
 80081de:	d00b      	beq.n	80081f8 <TIM_OC2_SetConfig+0xb0>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	4a1b      	ldr	r2, [pc, #108]	@ (8008250 <TIM_OC2_SetConfig+0x108>)
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d007      	beq.n	80081f8 <TIM_OC2_SetConfig+0xb0>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	4a1a      	ldr	r2, [pc, #104]	@ (8008254 <TIM_OC2_SetConfig+0x10c>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d003      	beq.n	80081f8 <TIM_OC2_SetConfig+0xb0>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	4a19      	ldr	r2, [pc, #100]	@ (8008258 <TIM_OC2_SetConfig+0x110>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d113      	bne.n	8008220 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80081f8:	693b      	ldr	r3, [r7, #16]
 80081fa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80081fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008200:	693b      	ldr	r3, [r7, #16]
 8008202:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008206:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	695b      	ldr	r3, [r3, #20]
 800820c:	009b      	lsls	r3, r3, #2
 800820e:	693a      	ldr	r2, [r7, #16]
 8008210:	4313      	orrs	r3, r2
 8008212:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	699b      	ldr	r3, [r3, #24]
 8008218:	009b      	lsls	r3, r3, #2
 800821a:	693a      	ldr	r2, [r7, #16]
 800821c:	4313      	orrs	r3, r2
 800821e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	693a      	ldr	r2, [r7, #16]
 8008224:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	68fa      	ldr	r2, [r7, #12]
 800822a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	685a      	ldr	r2, [r3, #4]
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	697a      	ldr	r2, [r7, #20]
 8008238:	621a      	str	r2, [r3, #32]
}
 800823a:	bf00      	nop
 800823c:	371c      	adds	r7, #28
 800823e:	46bd      	mov	sp, r7
 8008240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008244:	4770      	bx	lr
 8008246:	bf00      	nop
 8008248:	40012c00 	.word	0x40012c00
 800824c:	40013400 	.word	0x40013400
 8008250:	40014000 	.word	0x40014000
 8008254:	40014400 	.word	0x40014400
 8008258:	40014800 	.word	0x40014800

0800825c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800825c:	b480      	push	{r7}
 800825e:	b087      	sub	sp, #28
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
 8008264:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6a1b      	ldr	r3, [r3, #32]
 800826a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6a1b      	ldr	r3, [r3, #32]
 8008270:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	685b      	ldr	r3, [r3, #4]
 800827c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	69db      	ldr	r3, [r3, #28]
 8008282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800828a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800828e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	f023 0303 	bic.w	r3, r3, #3
 8008296:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	68fa      	ldr	r2, [r7, #12]
 800829e:	4313      	orrs	r3, r2
 80082a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80082a2:	697b      	ldr	r3, [r7, #20]
 80082a4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80082a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	689b      	ldr	r3, [r3, #8]
 80082ae:	021b      	lsls	r3, r3, #8
 80082b0:	697a      	ldr	r2, [r7, #20]
 80082b2:	4313      	orrs	r3, r2
 80082b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	4a27      	ldr	r2, [pc, #156]	@ (8008358 <TIM_OC3_SetConfig+0xfc>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d003      	beq.n	80082c6 <TIM_OC3_SetConfig+0x6a>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	4a26      	ldr	r2, [pc, #152]	@ (800835c <TIM_OC3_SetConfig+0x100>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d10d      	bne.n	80082e2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80082cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	68db      	ldr	r3, [r3, #12]
 80082d2:	021b      	lsls	r3, r3, #8
 80082d4:	697a      	ldr	r2, [r7, #20]
 80082d6:	4313      	orrs	r3, r2
 80082d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80082da:	697b      	ldr	r3, [r7, #20]
 80082dc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80082e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	4a1c      	ldr	r2, [pc, #112]	@ (8008358 <TIM_OC3_SetConfig+0xfc>)
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d00f      	beq.n	800830a <TIM_OC3_SetConfig+0xae>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	4a1b      	ldr	r2, [pc, #108]	@ (800835c <TIM_OC3_SetConfig+0x100>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d00b      	beq.n	800830a <TIM_OC3_SetConfig+0xae>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	4a1a      	ldr	r2, [pc, #104]	@ (8008360 <TIM_OC3_SetConfig+0x104>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d007      	beq.n	800830a <TIM_OC3_SetConfig+0xae>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	4a19      	ldr	r2, [pc, #100]	@ (8008364 <TIM_OC3_SetConfig+0x108>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	d003      	beq.n	800830a <TIM_OC3_SetConfig+0xae>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	4a18      	ldr	r2, [pc, #96]	@ (8008368 <TIM_OC3_SetConfig+0x10c>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d113      	bne.n	8008332 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800830a:	693b      	ldr	r3, [r7, #16]
 800830c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008310:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008312:	693b      	ldr	r3, [r7, #16]
 8008314:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008318:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	695b      	ldr	r3, [r3, #20]
 800831e:	011b      	lsls	r3, r3, #4
 8008320:	693a      	ldr	r2, [r7, #16]
 8008322:	4313      	orrs	r3, r2
 8008324:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	699b      	ldr	r3, [r3, #24]
 800832a:	011b      	lsls	r3, r3, #4
 800832c:	693a      	ldr	r2, [r7, #16]
 800832e:	4313      	orrs	r3, r2
 8008330:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	693a      	ldr	r2, [r7, #16]
 8008336:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	68fa      	ldr	r2, [r7, #12]
 800833c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	685a      	ldr	r2, [r3, #4]
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	697a      	ldr	r2, [r7, #20]
 800834a:	621a      	str	r2, [r3, #32]
}
 800834c:	bf00      	nop
 800834e:	371c      	adds	r7, #28
 8008350:	46bd      	mov	sp, r7
 8008352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008356:	4770      	bx	lr
 8008358:	40012c00 	.word	0x40012c00
 800835c:	40013400 	.word	0x40013400
 8008360:	40014000 	.word	0x40014000
 8008364:	40014400 	.word	0x40014400
 8008368:	40014800 	.word	0x40014800

0800836c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800836c:	b480      	push	{r7}
 800836e:	b087      	sub	sp, #28
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
 8008374:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6a1b      	ldr	r3, [r3, #32]
 800837a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6a1b      	ldr	r3, [r3, #32]
 8008380:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	685b      	ldr	r3, [r3, #4]
 800838c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	69db      	ldr	r3, [r3, #28]
 8008392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800839a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800839e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80083a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	021b      	lsls	r3, r3, #8
 80083ae:	68fa      	ldr	r2, [r7, #12]
 80083b0:	4313      	orrs	r3, r2
 80083b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80083b4:	697b      	ldr	r3, [r7, #20]
 80083b6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80083ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	689b      	ldr	r3, [r3, #8]
 80083c0:	031b      	lsls	r3, r3, #12
 80083c2:	697a      	ldr	r2, [r7, #20]
 80083c4:	4313      	orrs	r3, r2
 80083c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	4a28      	ldr	r2, [pc, #160]	@ (800846c <TIM_OC4_SetConfig+0x100>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d003      	beq.n	80083d8 <TIM_OC4_SetConfig+0x6c>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	4a27      	ldr	r2, [pc, #156]	@ (8008470 <TIM_OC4_SetConfig+0x104>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d10d      	bne.n	80083f4 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80083d8:	697b      	ldr	r3, [r7, #20]
 80083da:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80083de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	68db      	ldr	r3, [r3, #12]
 80083e4:	031b      	lsls	r3, r3, #12
 80083e6:	697a      	ldr	r2, [r7, #20]
 80083e8:	4313      	orrs	r3, r2
 80083ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80083f2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	4a1d      	ldr	r2, [pc, #116]	@ (800846c <TIM_OC4_SetConfig+0x100>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d00f      	beq.n	800841c <TIM_OC4_SetConfig+0xb0>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	4a1c      	ldr	r2, [pc, #112]	@ (8008470 <TIM_OC4_SetConfig+0x104>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d00b      	beq.n	800841c <TIM_OC4_SetConfig+0xb0>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	4a1b      	ldr	r2, [pc, #108]	@ (8008474 <TIM_OC4_SetConfig+0x108>)
 8008408:	4293      	cmp	r3, r2
 800840a:	d007      	beq.n	800841c <TIM_OC4_SetConfig+0xb0>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	4a1a      	ldr	r2, [pc, #104]	@ (8008478 <TIM_OC4_SetConfig+0x10c>)
 8008410:	4293      	cmp	r3, r2
 8008412:	d003      	beq.n	800841c <TIM_OC4_SetConfig+0xb0>
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	4a19      	ldr	r2, [pc, #100]	@ (800847c <TIM_OC4_SetConfig+0x110>)
 8008418:	4293      	cmp	r3, r2
 800841a:	d113      	bne.n	8008444 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800841c:	693b      	ldr	r3, [r7, #16]
 800841e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008422:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008424:	693b      	ldr	r3, [r7, #16]
 8008426:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800842a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	695b      	ldr	r3, [r3, #20]
 8008430:	019b      	lsls	r3, r3, #6
 8008432:	693a      	ldr	r2, [r7, #16]
 8008434:	4313      	orrs	r3, r2
 8008436:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	699b      	ldr	r3, [r3, #24]
 800843c:	019b      	lsls	r3, r3, #6
 800843e:	693a      	ldr	r2, [r7, #16]
 8008440:	4313      	orrs	r3, r2
 8008442:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	693a      	ldr	r2, [r7, #16]
 8008448:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	68fa      	ldr	r2, [r7, #12]
 800844e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	685a      	ldr	r2, [r3, #4]
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	697a      	ldr	r2, [r7, #20]
 800845c:	621a      	str	r2, [r3, #32]
}
 800845e:	bf00      	nop
 8008460:	371c      	adds	r7, #28
 8008462:	46bd      	mov	sp, r7
 8008464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008468:	4770      	bx	lr
 800846a:	bf00      	nop
 800846c:	40012c00 	.word	0x40012c00
 8008470:	40013400 	.word	0x40013400
 8008474:	40014000 	.word	0x40014000
 8008478:	40014400 	.word	0x40014400
 800847c:	40014800 	.word	0x40014800

08008480 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008480:	b480      	push	{r7}
 8008482:	b087      	sub	sp, #28
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
 8008488:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6a1b      	ldr	r3, [r3, #32]
 800848e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6a1b      	ldr	r3, [r3, #32]
 8008494:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	685b      	ldr	r3, [r3, #4]
 80084a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80084ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	68fa      	ldr	r2, [r7, #12]
 80084ba:	4313      	orrs	r3, r2
 80084bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80084be:	693b      	ldr	r3, [r7, #16]
 80084c0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80084c4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	689b      	ldr	r3, [r3, #8]
 80084ca:	041b      	lsls	r3, r3, #16
 80084cc:	693a      	ldr	r2, [r7, #16]
 80084ce:	4313      	orrs	r3, r2
 80084d0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	4a17      	ldr	r2, [pc, #92]	@ (8008534 <TIM_OC5_SetConfig+0xb4>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d00f      	beq.n	80084fa <TIM_OC5_SetConfig+0x7a>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	4a16      	ldr	r2, [pc, #88]	@ (8008538 <TIM_OC5_SetConfig+0xb8>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d00b      	beq.n	80084fa <TIM_OC5_SetConfig+0x7a>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	4a15      	ldr	r2, [pc, #84]	@ (800853c <TIM_OC5_SetConfig+0xbc>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d007      	beq.n	80084fa <TIM_OC5_SetConfig+0x7a>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	4a14      	ldr	r2, [pc, #80]	@ (8008540 <TIM_OC5_SetConfig+0xc0>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d003      	beq.n	80084fa <TIM_OC5_SetConfig+0x7a>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	4a13      	ldr	r2, [pc, #76]	@ (8008544 <TIM_OC5_SetConfig+0xc4>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d109      	bne.n	800850e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008500:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	695b      	ldr	r3, [r3, #20]
 8008506:	021b      	lsls	r3, r3, #8
 8008508:	697a      	ldr	r2, [r7, #20]
 800850a:	4313      	orrs	r3, r2
 800850c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	697a      	ldr	r2, [r7, #20]
 8008512:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	68fa      	ldr	r2, [r7, #12]
 8008518:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	685a      	ldr	r2, [r3, #4]
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	693a      	ldr	r2, [r7, #16]
 8008526:	621a      	str	r2, [r3, #32]
}
 8008528:	bf00      	nop
 800852a:	371c      	adds	r7, #28
 800852c:	46bd      	mov	sp, r7
 800852e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008532:	4770      	bx	lr
 8008534:	40012c00 	.word	0x40012c00
 8008538:	40013400 	.word	0x40013400
 800853c:	40014000 	.word	0x40014000
 8008540:	40014400 	.word	0x40014400
 8008544:	40014800 	.word	0x40014800

08008548 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008548:	b480      	push	{r7}
 800854a:	b087      	sub	sp, #28
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
 8008550:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6a1b      	ldr	r3, [r3, #32]
 8008556:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6a1b      	ldr	r3, [r3, #32]
 800855c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	685b      	ldr	r3, [r3, #4]
 8008568:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800856e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008576:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800857a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	021b      	lsls	r3, r3, #8
 8008582:	68fa      	ldr	r2, [r7, #12]
 8008584:	4313      	orrs	r3, r2
 8008586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008588:	693b      	ldr	r3, [r7, #16]
 800858a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800858e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	689b      	ldr	r3, [r3, #8]
 8008594:	051b      	lsls	r3, r3, #20
 8008596:	693a      	ldr	r2, [r7, #16]
 8008598:	4313      	orrs	r3, r2
 800859a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	4a18      	ldr	r2, [pc, #96]	@ (8008600 <TIM_OC6_SetConfig+0xb8>)
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d00f      	beq.n	80085c4 <TIM_OC6_SetConfig+0x7c>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	4a17      	ldr	r2, [pc, #92]	@ (8008604 <TIM_OC6_SetConfig+0xbc>)
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d00b      	beq.n	80085c4 <TIM_OC6_SetConfig+0x7c>
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	4a16      	ldr	r2, [pc, #88]	@ (8008608 <TIM_OC6_SetConfig+0xc0>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d007      	beq.n	80085c4 <TIM_OC6_SetConfig+0x7c>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	4a15      	ldr	r2, [pc, #84]	@ (800860c <TIM_OC6_SetConfig+0xc4>)
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d003      	beq.n	80085c4 <TIM_OC6_SetConfig+0x7c>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	4a14      	ldr	r2, [pc, #80]	@ (8008610 <TIM_OC6_SetConfig+0xc8>)
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d109      	bne.n	80085d8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80085ca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	695b      	ldr	r3, [r3, #20]
 80085d0:	029b      	lsls	r3, r3, #10
 80085d2:	697a      	ldr	r2, [r7, #20]
 80085d4:	4313      	orrs	r3, r2
 80085d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	697a      	ldr	r2, [r7, #20]
 80085dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	68fa      	ldr	r2, [r7, #12]
 80085e2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	685a      	ldr	r2, [r3, #4]
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	693a      	ldr	r2, [r7, #16]
 80085f0:	621a      	str	r2, [r3, #32]
}
 80085f2:	bf00      	nop
 80085f4:	371c      	adds	r7, #28
 80085f6:	46bd      	mov	sp, r7
 80085f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fc:	4770      	bx	lr
 80085fe:	bf00      	nop
 8008600:	40012c00 	.word	0x40012c00
 8008604:	40013400 	.word	0x40013400
 8008608:	40014000 	.word	0x40014000
 800860c:	40014400 	.word	0x40014400
 8008610:	40014800 	.word	0x40014800

08008614 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008614:	b480      	push	{r7}
 8008616:	b087      	sub	sp, #28
 8008618:	af00      	add	r7, sp, #0
 800861a:	60f8      	str	r0, [r7, #12]
 800861c:	60b9      	str	r1, [r7, #8]
 800861e:	607a      	str	r2, [r7, #4]
 8008620:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	6a1b      	ldr	r3, [r3, #32]
 8008626:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	6a1b      	ldr	r3, [r3, #32]
 800862c:	f023 0201 	bic.w	r2, r3, #1
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	699b      	ldr	r3, [r3, #24]
 8008638:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	4a24      	ldr	r2, [pc, #144]	@ (80086d0 <TIM_TI1_SetConfig+0xbc>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d013      	beq.n	800866a <TIM_TI1_SetConfig+0x56>
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008648:	d00f      	beq.n	800866a <TIM_TI1_SetConfig+0x56>
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	4a21      	ldr	r2, [pc, #132]	@ (80086d4 <TIM_TI1_SetConfig+0xc0>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d00b      	beq.n	800866a <TIM_TI1_SetConfig+0x56>
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	4a20      	ldr	r2, [pc, #128]	@ (80086d8 <TIM_TI1_SetConfig+0xc4>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d007      	beq.n	800866a <TIM_TI1_SetConfig+0x56>
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	4a1f      	ldr	r2, [pc, #124]	@ (80086dc <TIM_TI1_SetConfig+0xc8>)
 800865e:	4293      	cmp	r3, r2
 8008660:	d003      	beq.n	800866a <TIM_TI1_SetConfig+0x56>
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	4a1e      	ldr	r2, [pc, #120]	@ (80086e0 <TIM_TI1_SetConfig+0xcc>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d101      	bne.n	800866e <TIM_TI1_SetConfig+0x5a>
 800866a:	2301      	movs	r3, #1
 800866c:	e000      	b.n	8008670 <TIM_TI1_SetConfig+0x5c>
 800866e:	2300      	movs	r3, #0
 8008670:	2b00      	cmp	r3, #0
 8008672:	d008      	beq.n	8008686 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008674:	697b      	ldr	r3, [r7, #20]
 8008676:	f023 0303 	bic.w	r3, r3, #3
 800867a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800867c:	697a      	ldr	r2, [r7, #20]
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	4313      	orrs	r3, r2
 8008682:	617b      	str	r3, [r7, #20]
 8008684:	e003      	b.n	800868e <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008686:	697b      	ldr	r3, [r7, #20]
 8008688:	f043 0301 	orr.w	r3, r3, #1
 800868c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800868e:	697b      	ldr	r3, [r7, #20]
 8008690:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008694:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	011b      	lsls	r3, r3, #4
 800869a:	b2db      	uxtb	r3, r3
 800869c:	697a      	ldr	r2, [r7, #20]
 800869e:	4313      	orrs	r3, r2
 80086a0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	f023 030a 	bic.w	r3, r3, #10
 80086a8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	f003 030a 	and.w	r3, r3, #10
 80086b0:	693a      	ldr	r2, [r7, #16]
 80086b2:	4313      	orrs	r3, r2
 80086b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	697a      	ldr	r2, [r7, #20]
 80086ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	693a      	ldr	r2, [r7, #16]
 80086c0:	621a      	str	r2, [r3, #32]
}
 80086c2:	bf00      	nop
 80086c4:	371c      	adds	r7, #28
 80086c6:	46bd      	mov	sp, r7
 80086c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086cc:	4770      	bx	lr
 80086ce:	bf00      	nop
 80086d0:	40012c00 	.word	0x40012c00
 80086d4:	40000400 	.word	0x40000400
 80086d8:	40000800 	.word	0x40000800
 80086dc:	40013400 	.word	0x40013400
 80086e0:	40014000 	.word	0x40014000

080086e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80086e4:	b480      	push	{r7}
 80086e6:	b087      	sub	sp, #28
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	60f8      	str	r0, [r7, #12]
 80086ec:	60b9      	str	r1, [r7, #8]
 80086ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	6a1b      	ldr	r3, [r3, #32]
 80086f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	6a1b      	ldr	r3, [r3, #32]
 80086fa:	f023 0201 	bic.w	r2, r3, #1
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	699b      	ldr	r3, [r3, #24]
 8008706:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800870e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	011b      	lsls	r3, r3, #4
 8008714:	693a      	ldr	r2, [r7, #16]
 8008716:	4313      	orrs	r3, r2
 8008718:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800871a:	697b      	ldr	r3, [r7, #20]
 800871c:	f023 030a 	bic.w	r3, r3, #10
 8008720:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008722:	697a      	ldr	r2, [r7, #20]
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	4313      	orrs	r3, r2
 8008728:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	693a      	ldr	r2, [r7, #16]
 800872e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	697a      	ldr	r2, [r7, #20]
 8008734:	621a      	str	r2, [r3, #32]
}
 8008736:	bf00      	nop
 8008738:	371c      	adds	r7, #28
 800873a:	46bd      	mov	sp, r7
 800873c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008740:	4770      	bx	lr

08008742 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008742:	b480      	push	{r7}
 8008744:	b087      	sub	sp, #28
 8008746:	af00      	add	r7, sp, #0
 8008748:	60f8      	str	r0, [r7, #12]
 800874a:	60b9      	str	r1, [r7, #8]
 800874c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	6a1b      	ldr	r3, [r3, #32]
 8008752:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	6a1b      	ldr	r3, [r3, #32]
 8008758:	f023 0210 	bic.w	r2, r3, #16
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	699b      	ldr	r3, [r3, #24]
 8008764:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008766:	693b      	ldr	r3, [r7, #16]
 8008768:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800876c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	031b      	lsls	r3, r3, #12
 8008772:	693a      	ldr	r2, [r7, #16]
 8008774:	4313      	orrs	r3, r2
 8008776:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008778:	697b      	ldr	r3, [r7, #20]
 800877a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800877e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	011b      	lsls	r3, r3, #4
 8008784:	697a      	ldr	r2, [r7, #20]
 8008786:	4313      	orrs	r3, r2
 8008788:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	693a      	ldr	r2, [r7, #16]
 800878e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	697a      	ldr	r2, [r7, #20]
 8008794:	621a      	str	r2, [r3, #32]
}
 8008796:	bf00      	nop
 8008798:	371c      	adds	r7, #28
 800879a:	46bd      	mov	sp, r7
 800879c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a0:	4770      	bx	lr

080087a2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80087a2:	b480      	push	{r7}
 80087a4:	b085      	sub	sp, #20
 80087a6:	af00      	add	r7, sp, #0
 80087a8:	6078      	str	r0, [r7, #4]
 80087aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	689b      	ldr	r3, [r3, #8]
 80087b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80087b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80087bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80087be:	683a      	ldr	r2, [r7, #0]
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	4313      	orrs	r3, r2
 80087c4:	f043 0307 	orr.w	r3, r3, #7
 80087c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	68fa      	ldr	r2, [r7, #12]
 80087ce:	609a      	str	r2, [r3, #8]
}
 80087d0:	bf00      	nop
 80087d2:	3714      	adds	r7, #20
 80087d4:	46bd      	mov	sp, r7
 80087d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087da:	4770      	bx	lr

080087dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80087dc:	b480      	push	{r7}
 80087de:	b087      	sub	sp, #28
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	60f8      	str	r0, [r7, #12]
 80087e4:	60b9      	str	r1, [r7, #8]
 80087e6:	607a      	str	r2, [r7, #4]
 80087e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	689b      	ldr	r3, [r3, #8]
 80087ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80087f0:	697b      	ldr	r3, [r7, #20]
 80087f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80087f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	021a      	lsls	r2, r3, #8
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	431a      	orrs	r2, r3
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	4313      	orrs	r3, r2
 8008804:	697a      	ldr	r2, [r7, #20]
 8008806:	4313      	orrs	r3, r2
 8008808:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	697a      	ldr	r2, [r7, #20]
 800880e:	609a      	str	r2, [r3, #8]
}
 8008810:	bf00      	nop
 8008812:	371c      	adds	r7, #28
 8008814:	46bd      	mov	sp, r7
 8008816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881a:	4770      	bx	lr

0800881c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800881c:	b480      	push	{r7}
 800881e:	b087      	sub	sp, #28
 8008820:	af00      	add	r7, sp, #0
 8008822:	60f8      	str	r0, [r7, #12]
 8008824:	60b9      	str	r1, [r7, #8]
 8008826:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	f003 031f 	and.w	r3, r3, #31
 800882e:	2201      	movs	r2, #1
 8008830:	fa02 f303 	lsl.w	r3, r2, r3
 8008834:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	6a1a      	ldr	r2, [r3, #32]
 800883a:	697b      	ldr	r3, [r7, #20]
 800883c:	43db      	mvns	r3, r3
 800883e:	401a      	ands	r2, r3
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	6a1a      	ldr	r2, [r3, #32]
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	f003 031f 	and.w	r3, r3, #31
 800884e:	6879      	ldr	r1, [r7, #4]
 8008850:	fa01 f303 	lsl.w	r3, r1, r3
 8008854:	431a      	orrs	r2, r3
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	621a      	str	r2, [r3, #32]
}
 800885a:	bf00      	nop
 800885c:	371c      	adds	r7, #28
 800885e:	46bd      	mov	sp, r7
 8008860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008864:	4770      	bx	lr

08008866 <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, const TIM_HallSensor_InitTypeDef *sConfig)
{
 8008866:	b580      	push	{r7, lr}
 8008868:	b08a      	sub	sp, #40	@ 0x28
 800886a:	af00      	add	r7, sp, #0
 800886c:	6078      	str	r0, [r7, #4]
 800886e:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d101      	bne.n	800887a <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 8008876:	2301      	movs	r3, #1
 8008878:	e0a0      	b.n	80089bc <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008880:	b2db      	uxtb	r3, r3
 8008882:	2b00      	cmp	r3, #0
 8008884:	d106      	bne.n	8008894 <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2200      	movs	r2, #0
 800888a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f000 f898 	bl	80089c4 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2202      	movs	r2, #2
 8008898:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681a      	ldr	r2, [r3, #0]
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	3304      	adds	r3, #4
 80088a4:	4619      	mov	r1, r3
 80088a6:	4610      	mov	r0, r2
 80088a8:	f7ff fb22 	bl	8007ef0 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6818      	ldr	r0, [r3, #0]
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	6819      	ldr	r1, [r3, #0]
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	689b      	ldr	r3, [r3, #8]
 80088b8:	2203      	movs	r2, #3
 80088ba:	f7ff feab 	bl	8008614 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	699a      	ldr	r2, [r3, #24]
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f022 020c 	bic.w	r2, r2, #12
 80088cc:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	6999      	ldr	r1, [r3, #24]
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	685a      	ldr	r2, [r3, #4]
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	430a      	orrs	r2, r1
 80088de:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	685a      	ldr	r2, [r3, #4]
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80088ee:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	689b      	ldr	r3, [r3, #8]
 80088f6:	687a      	ldr	r2, [r7, #4]
 80088f8:	6812      	ldr	r2, [r2, #0]
 80088fa:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80088fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008902:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	689a      	ldr	r2, [r3, #8]
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008912:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	689b      	ldr	r3, [r3, #8]
 800891a:	687a      	ldr	r2, [r7, #4]
 800891c:	6812      	ldr	r2, [r2, #0]
 800891e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008922:	f023 0307 	bic.w	r3, r3, #7
 8008926:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	689a      	ldr	r2, [r3, #8]
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f042 0204 	orr.w	r2, r2, #4
 8008936:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8008938:	2300      	movs	r3, #0
 800893a:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 800893c:	2300      	movs	r3, #0
 800893e:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8008940:	2370      	movs	r3, #112	@ 0x70
 8008942:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8008944:	2300      	movs	r3, #0
 8008946:	627b      	str	r3, [r7, #36]	@ 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8008948:	2300      	movs	r3, #0
 800894a:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 800894c:	2300      	movs	r3, #0
 800894e:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	68db      	ldr	r3, [r3, #12]
 8008954:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f107 020c 	add.w	r2, r7, #12
 800895e:	4611      	mov	r1, r2
 8008960:	4618      	mov	r0, r3
 8008962:	f7ff fbf1 	bl	8008148 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	685b      	ldr	r3, [r3, #4]
 800896c:	687a      	ldr	r2, [r7, #4]
 800896e:	6812      	ldr	r2, [r2, #0]
 8008970:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008974:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008978:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	685a      	ldr	r2, [r3, #4]
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 8008988:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2201      	movs	r2, #1
 800898e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2201      	movs	r2, #1
 8008996:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2201      	movs	r2, #1
 800899e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2201      	movs	r2, #1
 80089a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2201      	movs	r2, #1
 80089ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2201      	movs	r2, #1
 80089b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80089ba:	2300      	movs	r3, #0
}
 80089bc:	4618      	mov	r0, r3
 80089be:	3728      	adds	r7, #40	@ 0x28
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}

080089c4 <HAL_TIMEx_HallSensor_MspInit>:
  * @brief  Initializes the TIM Hall Sensor MSP.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval None
  */
__weak void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef *htim)
{
 80089c4:	b480      	push	{r7}
 80089c6:	b083      	sub	sp, #12
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
   */
}
 80089cc:	bf00      	nop
 80089ce:	370c      	adds	r7, #12
 80089d0:	46bd      	mov	sp, r7
 80089d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d6:	4770      	bx	lr

080089d8 <HAL_TIMEx_HallSensor_Start_IT>:
  * @brief  Starts the TIM Hall Sensor Interface in interrupt mode.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start_IT(TIM_HandleTypeDef *htim)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b084      	sub	sp, #16
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80089e6:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80089ee:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80089f6:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80089fe:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(htim->Instance));

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008a00:	7bfb      	ldrb	r3, [r7, #15]
 8008a02:	2b01      	cmp	r3, #1
 8008a04:	d108      	bne.n	8008a18 <HAL_TIMEx_HallSensor_Start_IT+0x40>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008a06:	7bbb      	ldrb	r3, [r7, #14]
 8008a08:	2b01      	cmp	r3, #1
 8008a0a:	d105      	bne.n	8008a18 <HAL_TIMEx_HallSensor_Start_IT+0x40>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008a0c:	7b7b      	ldrb	r3, [r7, #13]
 8008a0e:	2b01      	cmp	r3, #1
 8008a10:	d102      	bne.n	8008a18 <HAL_TIMEx_HallSensor_Start_IT+0x40>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008a12:	7b3b      	ldrb	r3, [r7, #12]
 8008a14:	2b01      	cmp	r3, #1
 8008a16:	d001      	beq.n	8008a1c <HAL_TIMEx_HallSensor_Start_IT+0x44>
  {
    return HAL_ERROR;
 8008a18:	2301      	movs	r3, #1
 8008a1a:	e05d      	b.n	8008ad8 <HAL_TIMEx_HallSensor_Start_IT+0x100>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2202      	movs	r2, #2
 8008a20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2202      	movs	r2, #2
 8008a28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2202      	movs	r2, #2
 8008a30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2202      	movs	r2, #2
 8008a38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Enable the capture compare Interrupts 1 event */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	68da      	ldr	r2, [r3, #12]
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f042 0202 	orr.w	r2, r2, #2
 8008a4a:	60da      	str	r2, [r3, #12]

  /* Enable the Input Capture channel 1
  (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1,
  TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	2201      	movs	r2, #1
 8008a52:	2100      	movs	r1, #0
 8008a54:	4618      	mov	r0, r3
 8008a56:	f7ff fee1 	bl	800881c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	4a20      	ldr	r2, [pc, #128]	@ (8008ae0 <HAL_TIMEx_HallSensor_Start_IT+0x108>)
 8008a60:	4293      	cmp	r3, r2
 8008a62:	d018      	beq.n	8008a96 <HAL_TIMEx_HallSensor_Start_IT+0xbe>
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a6c:	d013      	beq.n	8008a96 <HAL_TIMEx_HallSensor_Start_IT+0xbe>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	4a1c      	ldr	r2, [pc, #112]	@ (8008ae4 <HAL_TIMEx_HallSensor_Start_IT+0x10c>)
 8008a74:	4293      	cmp	r3, r2
 8008a76:	d00e      	beq.n	8008a96 <HAL_TIMEx_HallSensor_Start_IT+0xbe>
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	4a1a      	ldr	r2, [pc, #104]	@ (8008ae8 <HAL_TIMEx_HallSensor_Start_IT+0x110>)
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d009      	beq.n	8008a96 <HAL_TIMEx_HallSensor_Start_IT+0xbe>
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	4a19      	ldr	r2, [pc, #100]	@ (8008aec <HAL_TIMEx_HallSensor_Start_IT+0x114>)
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	d004      	beq.n	8008a96 <HAL_TIMEx_HallSensor_Start_IT+0xbe>
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	4a17      	ldr	r2, [pc, #92]	@ (8008af0 <HAL_TIMEx_HallSensor_Start_IT+0x118>)
 8008a92:	4293      	cmp	r3, r2
 8008a94:	d115      	bne.n	8008ac2 <HAL_TIMEx_HallSensor_Start_IT+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	689a      	ldr	r2, [r3, #8]
 8008a9c:	4b15      	ldr	r3, [pc, #84]	@ (8008af4 <HAL_TIMEx_HallSensor_Start_IT+0x11c>)
 8008a9e:	4013      	ands	r3, r2
 8008aa0:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008aa2:	68bb      	ldr	r3, [r7, #8]
 8008aa4:	2b06      	cmp	r3, #6
 8008aa6:	d015      	beq.n	8008ad4 <HAL_TIMEx_HallSensor_Start_IT+0xfc>
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008aae:	d011      	beq.n	8008ad4 <HAL_TIMEx_HallSensor_Start_IT+0xfc>
    {
      __HAL_TIM_ENABLE(htim);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	681a      	ldr	r2, [r3, #0]
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f042 0201 	orr.w	r2, r2, #1
 8008abe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ac0:	e008      	b.n	8008ad4 <HAL_TIMEx_HallSensor_Start_IT+0xfc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	681a      	ldr	r2, [r3, #0]
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f042 0201 	orr.w	r2, r2, #1
 8008ad0:	601a      	str	r2, [r3, #0]
 8008ad2:	e000      	b.n	8008ad6 <HAL_TIMEx_HallSensor_Start_IT+0xfe>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ad4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008ad6:	2300      	movs	r3, #0
}
 8008ad8:	4618      	mov	r0, r3
 8008ada:	3710      	adds	r7, #16
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}
 8008ae0:	40012c00 	.word	0x40012c00
 8008ae4:	40000400 	.word	0x40000400
 8008ae8:	40000800 	.word	0x40000800
 8008aec:	40013400 	.word	0x40013400
 8008af0:	40014000 	.word	0x40014000
 8008af4:	00010007 	.word	0x00010007

08008af8 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b084      	sub	sp, #16
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
 8008b00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d109      	bne.n	8008b1c <HAL_TIMEx_PWMN_Start+0x24>
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008b0e:	b2db      	uxtb	r3, r3
 8008b10:	2b01      	cmp	r3, #1
 8008b12:	bf14      	ite	ne
 8008b14:	2301      	movne	r3, #1
 8008b16:	2300      	moveq	r3, #0
 8008b18:	b2db      	uxtb	r3, r3
 8008b1a:	e022      	b.n	8008b62 <HAL_TIMEx_PWMN_Start+0x6a>
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	2b04      	cmp	r3, #4
 8008b20:	d109      	bne.n	8008b36 <HAL_TIMEx_PWMN_Start+0x3e>
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008b28:	b2db      	uxtb	r3, r3
 8008b2a:	2b01      	cmp	r3, #1
 8008b2c:	bf14      	ite	ne
 8008b2e:	2301      	movne	r3, #1
 8008b30:	2300      	moveq	r3, #0
 8008b32:	b2db      	uxtb	r3, r3
 8008b34:	e015      	b.n	8008b62 <HAL_TIMEx_PWMN_Start+0x6a>
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	2b08      	cmp	r3, #8
 8008b3a:	d109      	bne.n	8008b50 <HAL_TIMEx_PWMN_Start+0x58>
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8008b42:	b2db      	uxtb	r3, r3
 8008b44:	2b01      	cmp	r3, #1
 8008b46:	bf14      	ite	ne
 8008b48:	2301      	movne	r3, #1
 8008b4a:	2300      	moveq	r3, #0
 8008b4c:	b2db      	uxtb	r3, r3
 8008b4e:	e008      	b.n	8008b62 <HAL_TIMEx_PWMN_Start+0x6a>
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8008b56:	b2db      	uxtb	r3, r3
 8008b58:	2b01      	cmp	r3, #1
 8008b5a:	bf14      	ite	ne
 8008b5c:	2301      	movne	r3, #1
 8008b5e:	2300      	moveq	r3, #0
 8008b60:	b2db      	uxtb	r3, r3
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d001      	beq.n	8008b6a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8008b66:	2301      	movs	r3, #1
 8008b68:	e069      	b.n	8008c3e <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d104      	bne.n	8008b7a <HAL_TIMEx_PWMN_Start+0x82>
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2202      	movs	r2, #2
 8008b74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008b78:	e013      	b.n	8008ba2 <HAL_TIMEx_PWMN_Start+0xaa>
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	2b04      	cmp	r3, #4
 8008b7e:	d104      	bne.n	8008b8a <HAL_TIMEx_PWMN_Start+0x92>
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2202      	movs	r2, #2
 8008b84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008b88:	e00b      	b.n	8008ba2 <HAL_TIMEx_PWMN_Start+0xaa>
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	2b08      	cmp	r3, #8
 8008b8e:	d104      	bne.n	8008b9a <HAL_TIMEx_PWMN_Start+0xa2>
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2202      	movs	r2, #2
 8008b94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008b98:	e003      	b.n	8008ba2 <HAL_TIMEx_PWMN_Start+0xaa>
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2202      	movs	r2, #2
 8008b9e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	2204      	movs	r2, #4
 8008ba8:	6839      	ldr	r1, [r7, #0]
 8008baa:	4618      	mov	r0, r3
 8008bac:	f000 fae2 	bl	8009174 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008bbe:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	4a20      	ldr	r2, [pc, #128]	@ (8008c48 <HAL_TIMEx_PWMN_Start+0x150>)
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	d018      	beq.n	8008bfc <HAL_TIMEx_PWMN_Start+0x104>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008bd2:	d013      	beq.n	8008bfc <HAL_TIMEx_PWMN_Start+0x104>
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	4a1c      	ldr	r2, [pc, #112]	@ (8008c4c <HAL_TIMEx_PWMN_Start+0x154>)
 8008bda:	4293      	cmp	r3, r2
 8008bdc:	d00e      	beq.n	8008bfc <HAL_TIMEx_PWMN_Start+0x104>
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	4a1b      	ldr	r2, [pc, #108]	@ (8008c50 <HAL_TIMEx_PWMN_Start+0x158>)
 8008be4:	4293      	cmp	r3, r2
 8008be6:	d009      	beq.n	8008bfc <HAL_TIMEx_PWMN_Start+0x104>
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	4a19      	ldr	r2, [pc, #100]	@ (8008c54 <HAL_TIMEx_PWMN_Start+0x15c>)
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	d004      	beq.n	8008bfc <HAL_TIMEx_PWMN_Start+0x104>
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	4a18      	ldr	r2, [pc, #96]	@ (8008c58 <HAL_TIMEx_PWMN_Start+0x160>)
 8008bf8:	4293      	cmp	r3, r2
 8008bfa:	d115      	bne.n	8008c28 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	689a      	ldr	r2, [r3, #8]
 8008c02:	4b16      	ldr	r3, [pc, #88]	@ (8008c5c <HAL_TIMEx_PWMN_Start+0x164>)
 8008c04:	4013      	ands	r3, r2
 8008c06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	2b06      	cmp	r3, #6
 8008c0c:	d015      	beq.n	8008c3a <HAL_TIMEx_PWMN_Start+0x142>
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c14:	d011      	beq.n	8008c3a <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	681a      	ldr	r2, [r3, #0]
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f042 0201 	orr.w	r2, r2, #1
 8008c24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c26:	e008      	b.n	8008c3a <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	681a      	ldr	r2, [r3, #0]
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f042 0201 	orr.w	r2, r2, #1
 8008c36:	601a      	str	r2, [r3, #0]
 8008c38:	e000      	b.n	8008c3c <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c3a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008c3c:	2300      	movs	r3, #0
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	3710      	adds	r7, #16
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bd80      	pop	{r7, pc}
 8008c46:	bf00      	nop
 8008c48:	40012c00 	.word	0x40012c00
 8008c4c:	40000400 	.word	0x40000400
 8008c50:	40000800 	.word	0x40000800
 8008c54:	40013400 	.word	0x40013400
 8008c58:	40014000 	.word	0x40014000
 8008c5c:	00010007 	.word	0x00010007

08008c60 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b082      	sub	sp, #8
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
 8008c68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	2200      	movs	r2, #0
 8008c70:	6839      	ldr	r1, [r7, #0]
 8008c72:	4618      	mov	r0, r3
 8008c74:	f000 fa7e 	bl	8009174 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	6a1a      	ldr	r2, [r3, #32]
 8008c7e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008c82:	4013      	ands	r3, r2
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d10f      	bne.n	8008ca8 <HAL_TIMEx_PWMN_Stop+0x48>
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	6a1a      	ldr	r2, [r3, #32]
 8008c8e:	f244 4344 	movw	r3, #17476	@ 0x4444
 8008c92:	4013      	ands	r3, r2
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d107      	bne.n	8008ca8 <HAL_TIMEx_PWMN_Stop+0x48>
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008ca6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	6a1a      	ldr	r2, [r3, #32]
 8008cae:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008cb2:	4013      	ands	r3, r2
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d10f      	bne.n	8008cd8 <HAL_TIMEx_PWMN_Stop+0x78>
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	6a1a      	ldr	r2, [r3, #32]
 8008cbe:	f244 4344 	movw	r3, #17476	@ 0x4444
 8008cc2:	4013      	ands	r3, r2
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d107      	bne.n	8008cd8 <HAL_TIMEx_PWMN_Stop+0x78>
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	681a      	ldr	r2, [r3, #0]
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f022 0201 	bic.w	r2, r2, #1
 8008cd6:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d104      	bne.n	8008ce8 <HAL_TIMEx_PWMN_Stop+0x88>
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2201      	movs	r2, #1
 8008ce2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008ce6:	e013      	b.n	8008d10 <HAL_TIMEx_PWMN_Stop+0xb0>
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	2b04      	cmp	r3, #4
 8008cec:	d104      	bne.n	8008cf8 <HAL_TIMEx_PWMN_Stop+0x98>
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2201      	movs	r2, #1
 8008cf2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008cf6:	e00b      	b.n	8008d10 <HAL_TIMEx_PWMN_Stop+0xb0>
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	2b08      	cmp	r3, #8
 8008cfc:	d104      	bne.n	8008d08 <HAL_TIMEx_PWMN_Stop+0xa8>
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2201      	movs	r2, #1
 8008d02:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008d06:	e003      	b.n	8008d10 <HAL_TIMEx_PWMN_Stop+0xb0>
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2201      	movs	r2, #1
 8008d0c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 8008d10:	2300      	movs	r3, #0
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	3708      	adds	r7, #8
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}
	...

08008d1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	b085      	sub	sp, #20
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
 8008d24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008d2c:	2b01      	cmp	r3, #1
 8008d2e:	d101      	bne.n	8008d34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008d30:	2302      	movs	r3, #2
 8008d32:	e065      	b.n	8008e00 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2201      	movs	r2, #1
 8008d38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2202      	movs	r2, #2
 8008d40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	685b      	ldr	r3, [r3, #4]
 8008d4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	689b      	ldr	r3, [r3, #8]
 8008d52:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	4a2c      	ldr	r2, [pc, #176]	@ (8008e0c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d004      	beq.n	8008d68 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	4a2b      	ldr	r2, [pc, #172]	@ (8008e10 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008d64:	4293      	cmp	r3, r2
 8008d66:	d108      	bne.n	8008d7a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008d6e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	685b      	ldr	r3, [r3, #4]
 8008d74:	68fa      	ldr	r2, [r7, #12]
 8008d76:	4313      	orrs	r3, r2
 8008d78:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008d80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d84:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	68fa      	ldr	r2, [r7, #12]
 8008d8c:	4313      	orrs	r3, r2
 8008d8e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	68fa      	ldr	r2, [r7, #12]
 8008d96:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	4a1b      	ldr	r2, [pc, #108]	@ (8008e0c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d018      	beq.n	8008dd4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008daa:	d013      	beq.n	8008dd4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	4a18      	ldr	r2, [pc, #96]	@ (8008e14 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d00e      	beq.n	8008dd4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	4a17      	ldr	r2, [pc, #92]	@ (8008e18 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	d009      	beq.n	8008dd4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	4a12      	ldr	r2, [pc, #72]	@ (8008e10 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	d004      	beq.n	8008dd4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	4a13      	ldr	r2, [pc, #76]	@ (8008e1c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008dd0:	4293      	cmp	r3, r2
 8008dd2:	d10c      	bne.n	8008dee <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008dd4:	68bb      	ldr	r3, [r7, #8]
 8008dd6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008dda:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	689b      	ldr	r3, [r3, #8]
 8008de0:	68ba      	ldr	r2, [r7, #8]
 8008de2:	4313      	orrs	r3, r2
 8008de4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	68ba      	ldr	r2, [r7, #8]
 8008dec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2201      	movs	r2, #1
 8008df2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008dfe:	2300      	movs	r3, #0
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	3714      	adds	r7, #20
 8008e04:	46bd      	mov	sp, r7
 8008e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0a:	4770      	bx	lr
 8008e0c:	40012c00 	.word	0x40012c00
 8008e10:	40013400 	.word	0x40013400
 8008e14:	40000400 	.word	0x40000400
 8008e18:	40000800 	.word	0x40000800
 8008e1c:	40014000 	.word	0x40014000

08008e20 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008e20:	b480      	push	{r7}
 8008e22:	b085      	sub	sp, #20
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
 8008e28:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008e34:	2b01      	cmp	r3, #1
 8008e36:	d101      	bne.n	8008e3c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008e38:	2302      	movs	r3, #2
 8008e3a:	e073      	b.n	8008f24 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2201      	movs	r2, #1
 8008e40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	68db      	ldr	r3, [r3, #12]
 8008e4e:	4313      	orrs	r3, r2
 8008e50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	689b      	ldr	r3, [r3, #8]
 8008e5c:	4313      	orrs	r3, r2
 8008e5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	685b      	ldr	r3, [r3, #4]
 8008e6a:	4313      	orrs	r3, r2
 8008e6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	4313      	orrs	r3, r2
 8008e7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	691b      	ldr	r3, [r3, #16]
 8008e86:	4313      	orrs	r3, r2
 8008e88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	695b      	ldr	r3, [r3, #20]
 8008e94:	4313      	orrs	r3, r2
 8008e96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ea2:	4313      	orrs	r3, r2
 8008ea4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	699b      	ldr	r3, [r3, #24]
 8008eb0:	041b      	lsls	r3, r3, #16
 8008eb2:	4313      	orrs	r3, r2
 8008eb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	69db      	ldr	r3, [r3, #28]
 8008ec0:	4313      	orrs	r3, r2
 8008ec2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	4a19      	ldr	r2, [pc, #100]	@ (8008f30 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	d004      	beq.n	8008ed8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	4a18      	ldr	r2, [pc, #96]	@ (8008f34 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8008ed4:	4293      	cmp	r3, r2
 8008ed6:	d11c      	bne.n	8008f12 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ee2:	051b      	lsls	r3, r3, #20
 8008ee4:	4313      	orrs	r3, r2
 8008ee6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	6a1b      	ldr	r3, [r3, #32]
 8008ef2:	4313      	orrs	r3, r2
 8008ef4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f00:	4313      	orrs	r3, r2
 8008f02:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f0e:	4313      	orrs	r3, r2
 8008f10:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	68fa      	ldr	r2, [r7, #12]
 8008f18:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008f22:	2300      	movs	r3, #0
}
 8008f24:	4618      	mov	r0, r3
 8008f26:	3714      	adds	r7, #20
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2e:	4770      	bx	lr
 8008f30:	40012c00 	.word	0x40012c00
 8008f34:	40013400 	.word	0x40013400

08008f38 <HAL_TIMEx_ConfigBreakInput>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             const TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b08b      	sub	sp, #44	@ 0x2c
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	60f8      	str	r0, [r7, #12]
 8008f40:	60b9      	str	r1, [r7, #8]
 8008f42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008f44:	2300      	movs	r3, #0
 8008f46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008f50:	2b01      	cmp	r3, #1
 8008f52:	d101      	bne.n	8008f58 <HAL_TIMEx_ConfigBreakInput+0x20>
 8008f54:	2302      	movs	r3, #2
 8008f56:	e0c1      	b.n	80090dc <HAL_TIMEx_ConfigBreakInput+0x1a4>
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	2201      	movs	r2, #1
 8008f5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (sBreakInputConfig->Source)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	3b01      	subs	r3, #1
 8008f66:	2b0f      	cmp	r3, #15
 8008f68:	d854      	bhi.n	8009014 <HAL_TIMEx_ConfigBreakInput+0xdc>
 8008f6a:	a201      	add	r2, pc, #4	@ (adr r2, 8008f70 <HAL_TIMEx_ConfigBreakInput+0x38>)
 8008f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f70:	08008fb1 	.word	0x08008fb1
 8008f74:	08008fc5 	.word	0x08008fc5
 8008f78:	08009015 	.word	0x08009015
 8008f7c:	08008fd9 	.word	0x08008fd9
 8008f80:	08009015 	.word	0x08009015
 8008f84:	08009015 	.word	0x08009015
 8008f88:	08009015 	.word	0x08009015
 8008f8c:	08008fed 	.word	0x08008fed
 8008f90:	08009015 	.word	0x08009015
 8008f94:	08009015 	.word	0x08009015
 8008f98:	08009015 	.word	0x08009015
 8008f9c:	08009015 	.word	0x08009015
 8008fa0:	08009015 	.word	0x08009015
 8008fa4:	08009015 	.word	0x08009015
 8008fa8:	08009015 	.word	0x08009015
 8008fac:	08009001 	.word	0x08009001
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_AF1_BKINE;
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKINP;
 8008fb8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008fbc:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 8008fbe:	2309      	movs	r3, #9
 8008fc0:	617b      	str	r3, [r7, #20]
      break;
 8008fc2:	e030      	b.n	8009026 <HAL_TIMEx_ConfigBreakInput+0xee>
    }
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP1E;
 8008fc4:	2302      	movs	r3, #2
 8008fc6:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP1E_Pos;
 8008fc8:	2301      	movs	r3, #1
 8008fca:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP1P;
 8008fcc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008fd0:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP1P_Pos;
 8008fd2:	230a      	movs	r3, #10
 8008fd4:	617b      	str	r3, [r7, #20]
      break;
 8008fd6:	e026      	b.n	8009026 <HAL_TIMEx_ConfigBreakInput+0xee>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP2E;
 8008fd8:	2304      	movs	r3, #4
 8008fda:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 8008fdc:	2302      	movs	r3, #2
 8008fde:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 8008fe0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008fe4:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 8008fe6:	230b      	movs	r3, #11
 8008fe8:	617b      	str	r3, [r7, #20]
      break;
 8008fea:	e01c      	b.n	8009026 <HAL_TIMEx_ConfigBreakInput+0xee>
    }
    case TIM_BREAKINPUTSOURCE_COMP3:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP3E;
 8008fec:	2308      	movs	r3, #8
 8008fee:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP3E_Pos;
 8008ff0:	2303      	movs	r3, #3
 8008ff2:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP3P;
 8008ff4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008ff8:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP3P_Pos;
 8008ffa:	230c      	movs	r3, #12
 8008ffc:	617b      	str	r3, [r7, #20]
      break;
 8008ffe:	e012      	b.n	8009026 <HAL_TIMEx_ConfigBreakInput+0xee>
    }
    case TIM_BREAKINPUTSOURCE_COMP4:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP4E;
 8009000:	2310      	movs	r3, #16
 8009002:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP4E_Pos;
 8009004:	2304      	movs	r3, #4
 8009006:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP4P;
 8009008:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800900c:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP4P_Pos;
 800900e:	230d      	movs	r3, #13
 8009010:	617b      	str	r3, [r7, #20]
      break;
 8009012:	e008      	b.n	8009026 <HAL_TIMEx_ConfigBreakInput+0xee>
    }
#endif /* COMP7 */

    default:
    {
      bkin_enable_mask = 0U;
 8009014:	2300      	movs	r3, #0
 8009016:	623b      	str	r3, [r7, #32]
      bkin_polarity_mask = 0U;
 8009018:	2300      	movs	r3, #0
 800901a:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = 0U;
 800901c:	2300      	movs	r3, #0
 800901e:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = 0U;
 8009020:	2300      	movs	r3, #0
 8009022:	617b      	str	r3, [r7, #20]
      break;
 8009024:	bf00      	nop
    }
  }

  switch (BreakInput)
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	2b01      	cmp	r3, #1
 800902a:	d003      	beq.n	8009034 <HAL_TIMEx_ConfigBreakInput+0xfc>
 800902c:	68bb      	ldr	r3, [r7, #8]
 800902e:	2b02      	cmp	r3, #2
 8009030:	d025      	beq.n	800907e <HAL_TIMEx_ConfigBreakInput+0x146>
 8009032:	e049      	b.n	80090c8 <HAL_TIMEx_ConfigBreakInput+0x190>
  {
    case TIM_BREAKINPUT_BRK:
    {
      /* Get the TIMx_AF1 register value */
      tmporx = htim->Instance->AF1;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800903a:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800903c:	6a3b      	ldr	r3, [r7, #32]
 800903e:	43db      	mvns	r3, r3
 8009040:	693a      	ldr	r2, [r7, #16]
 8009042:	4013      	ands	r3, r2
 8009044:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	685a      	ldr	r2, [r3, #4]
 800904a:	69bb      	ldr	r3, [r7, #24]
 800904c:	409a      	lsls	r2, r3
 800904e:	6a3b      	ldr	r3, [r7, #32]
 8009050:	4013      	ands	r3, r2
 8009052:	693a      	ldr	r2, [r7, #16]
 8009054:	4313      	orrs	r3, r2
 8009056:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 8009058:	69fb      	ldr	r3, [r7, #28]
 800905a:	43db      	mvns	r3, r3
 800905c:	693a      	ldr	r2, [r7, #16]
 800905e:	4013      	ands	r3, r2
 8009060:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	689a      	ldr	r2, [r3, #8]
 8009066:	697b      	ldr	r3, [r7, #20]
 8009068:	409a      	lsls	r2, r3
 800906a:	69fb      	ldr	r3, [r7, #28]
 800906c:	4013      	ands	r3, r2
 800906e:	693a      	ldr	r2, [r7, #16]
 8009070:	4313      	orrs	r3, r2
 8009072:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF1 */
      htim->Instance->AF1 = tmporx;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	693a      	ldr	r2, [r7, #16]
 800907a:	661a      	str	r2, [r3, #96]	@ 0x60
      break;
 800907c:	e028      	b.n	80090d0 <HAL_TIMEx_ConfigBreakInput+0x198>
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_AF2 register value */
      tmporx = htim->Instance->AF2;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009084:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 8009086:	6a3b      	ldr	r3, [r7, #32]
 8009088:	43db      	mvns	r3, r3
 800908a:	693a      	ldr	r2, [r7, #16]
 800908c:	4013      	ands	r3, r2
 800908e:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	685a      	ldr	r2, [r3, #4]
 8009094:	69bb      	ldr	r3, [r7, #24]
 8009096:	409a      	lsls	r2, r3
 8009098:	6a3b      	ldr	r3, [r7, #32]
 800909a:	4013      	ands	r3, r2
 800909c:	693a      	ldr	r2, [r7, #16]
 800909e:	4313      	orrs	r3, r2
 80090a0:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 80090a2:	69fb      	ldr	r3, [r7, #28]
 80090a4:	43db      	mvns	r3, r3
 80090a6:	693a      	ldr	r2, [r7, #16]
 80090a8:	4013      	ands	r3, r2
 80090aa:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	689a      	ldr	r2, [r3, #8]
 80090b0:	697b      	ldr	r3, [r7, #20]
 80090b2:	409a      	lsls	r2, r3
 80090b4:	69fb      	ldr	r3, [r7, #28]
 80090b6:	4013      	ands	r3, r2
 80090b8:	693a      	ldr	r2, [r7, #16]
 80090ba:	4313      	orrs	r3, r2
 80090bc:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	693a      	ldr	r2, [r7, #16]
 80090c4:	665a      	str	r2, [r3, #100]	@ 0x64
      break;
 80090c6:	e003      	b.n	80090d0 <HAL_TIMEx_ConfigBreakInput+0x198>
    }
    default:
      status = HAL_ERROR;
 80090c8:	2301      	movs	r3, #1
 80090ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80090ce:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	2200      	movs	r2, #0
 80090d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80090d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80090dc:	4618      	mov	r0, r3
 80090de:	372c      	adds	r7, #44	@ 0x2c
 80090e0:	46bd      	mov	sp, r7
 80090e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e6:	4770      	bx	lr

080090e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80090e8:	b480      	push	{r7}
 80090ea:	b083      	sub	sp, #12
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80090f0:	bf00      	nop
 80090f2:	370c      	adds	r7, #12
 80090f4:	46bd      	mov	sp, r7
 80090f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fa:	4770      	bx	lr

080090fc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80090fc:	b480      	push	{r7}
 80090fe:	b083      	sub	sp, #12
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009104:	bf00      	nop
 8009106:	370c      	adds	r7, #12
 8009108:	46bd      	mov	sp, r7
 800910a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910e:	4770      	bx	lr

08009110 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009110:	b480      	push	{r7}
 8009112:	b083      	sub	sp, #12
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009118:	bf00      	nop
 800911a:	370c      	adds	r7, #12
 800911c:	46bd      	mov	sp, r7
 800911e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009122:	4770      	bx	lr

08009124 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009124:	b480      	push	{r7}
 8009126:	b083      	sub	sp, #12
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800912c:	bf00      	nop
 800912e:	370c      	adds	r7, #12
 8009130:	46bd      	mov	sp, r7
 8009132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009136:	4770      	bx	lr

08009138 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009138:	b480      	push	{r7}
 800913a:	b083      	sub	sp, #12
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009140:	bf00      	nop
 8009142:	370c      	adds	r7, #12
 8009144:	46bd      	mov	sp, r7
 8009146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914a:	4770      	bx	lr

0800914c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800914c:	b480      	push	{r7}
 800914e:	b083      	sub	sp, #12
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009154:	bf00      	nop
 8009156:	370c      	adds	r7, #12
 8009158:	46bd      	mov	sp, r7
 800915a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915e:	4770      	bx	lr

08009160 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009160:	b480      	push	{r7}
 8009162:	b083      	sub	sp, #12
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009168:	bf00      	nop
 800916a:	370c      	adds	r7, #12
 800916c:	46bd      	mov	sp, r7
 800916e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009172:	4770      	bx	lr

08009174 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8009174:	b480      	push	{r7}
 8009176:	b087      	sub	sp, #28
 8009178:	af00      	add	r7, sp, #0
 800917a:	60f8      	str	r0, [r7, #12]
 800917c:	60b9      	str	r1, [r7, #8]
 800917e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	f003 030f 	and.w	r3, r3, #15
 8009186:	2204      	movs	r2, #4
 8009188:	fa02 f303 	lsl.w	r3, r2, r3
 800918c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	6a1a      	ldr	r2, [r3, #32]
 8009192:	697b      	ldr	r3, [r7, #20]
 8009194:	43db      	mvns	r3, r3
 8009196:	401a      	ands	r2, r3
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	6a1a      	ldr	r2, [r3, #32]
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	f003 030f 	and.w	r3, r3, #15
 80091a6:	6879      	ldr	r1, [r7, #4]
 80091a8:	fa01 f303 	lsl.w	r3, r1, r3
 80091ac:	431a      	orrs	r2, r3
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	621a      	str	r2, [r3, #32]
}
 80091b2:	bf00      	nop
 80091b4:	371c      	adds	r7, #28
 80091b6:	46bd      	mov	sp, r7
 80091b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091bc:	4770      	bx	lr

080091be <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80091be:	b580      	push	{r7, lr}
 80091c0:	b082      	sub	sp, #8
 80091c2:	af00      	add	r7, sp, #0
 80091c4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d101      	bne.n	80091d0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80091cc:	2301      	movs	r3, #1
 80091ce:	e042      	b.n	8009256 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d106      	bne.n	80091e8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2200      	movs	r2, #0
 80091de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	f7f8 fb42 	bl	800186c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2224      	movs	r2, #36	@ 0x24
 80091ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	681a      	ldr	r2, [r3, #0]
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f022 0201 	bic.w	r2, r2, #1
 80091fe:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009204:	2b00      	cmp	r3, #0
 8009206:	d002      	beq.n	800920e <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	f000 fec3 	bl	8009f94 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f000 fbf4 	bl	80099fc <UART_SetConfig>
 8009214:	4603      	mov	r3, r0
 8009216:	2b01      	cmp	r3, #1
 8009218:	d101      	bne.n	800921e <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800921a:	2301      	movs	r3, #1
 800921c:	e01b      	b.n	8009256 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	685a      	ldr	r2, [r3, #4]
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800922c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	689a      	ldr	r2, [r3, #8]
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800923c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	681a      	ldr	r2, [r3, #0]
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f042 0201 	orr.w	r2, r2, #1
 800924c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800924e:	6878      	ldr	r0, [r7, #4]
 8009250:	f000 ff42 	bl	800a0d8 <UART_CheckIdleState>
 8009254:	4603      	mov	r3, r0
}
 8009256:	4618      	mov	r0, r3
 8009258:	3708      	adds	r7, #8
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}
	...

08009260 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b08a      	sub	sp, #40	@ 0x28
 8009264:	af00      	add	r7, sp, #0
 8009266:	60f8      	str	r0, [r7, #12]
 8009268:	60b9      	str	r1, [r7, #8]
 800926a:	4613      	mov	r3, r2
 800926c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009274:	2b20      	cmp	r3, #32
 8009276:	d167      	bne.n	8009348 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8009278:	68bb      	ldr	r3, [r7, #8]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d002      	beq.n	8009284 <HAL_UART_Transmit_DMA+0x24>
 800927e:	88fb      	ldrh	r3, [r7, #6]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d101      	bne.n	8009288 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8009284:	2301      	movs	r3, #1
 8009286:	e060      	b.n	800934a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	68ba      	ldr	r2, [r7, #8]
 800928c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	88fa      	ldrh	r2, [r7, #6]
 8009292:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	88fa      	ldrh	r2, [r7, #6]
 800929a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	2200      	movs	r2, #0
 80092a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	2221      	movs	r2, #33	@ 0x21
 80092aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d028      	beq.n	8009308 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80092ba:	4a26      	ldr	r2, [pc, #152]	@ (8009354 <HAL_UART_Transmit_DMA+0xf4>)
 80092bc:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80092c2:	4a25      	ldr	r2, [pc, #148]	@ (8009358 <HAL_UART_Transmit_DMA+0xf8>)
 80092c4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80092ca:	4a24      	ldr	r2, [pc, #144]	@ (800935c <HAL_UART_Transmit_DMA+0xfc>)
 80092cc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80092d2:	2200      	movs	r2, #0
 80092d4:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80092de:	4619      	mov	r1, r3
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	3328      	adds	r3, #40	@ 0x28
 80092e6:	461a      	mov	r2, r3
 80092e8:	88fb      	ldrh	r3, [r7, #6]
 80092ea:	f7fb fe67 	bl	8004fbc <HAL_DMA_Start_IT>
 80092ee:	4603      	mov	r3, r0
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d009      	beq.n	8009308 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	2210      	movs	r2, #16
 80092f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	2220      	movs	r2, #32
 8009300:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8009304:	2301      	movs	r3, #1
 8009306:	e020      	b.n	800934a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	2240      	movs	r2, #64	@ 0x40
 800930e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	3308      	adds	r3, #8
 8009316:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009318:	697b      	ldr	r3, [r7, #20]
 800931a:	e853 3f00 	ldrex	r3, [r3]
 800931e:	613b      	str	r3, [r7, #16]
   return(result);
 8009320:	693b      	ldr	r3, [r7, #16]
 8009322:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009326:	627b      	str	r3, [r7, #36]	@ 0x24
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	3308      	adds	r3, #8
 800932e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009330:	623a      	str	r2, [r7, #32]
 8009332:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009334:	69f9      	ldr	r1, [r7, #28]
 8009336:	6a3a      	ldr	r2, [r7, #32]
 8009338:	e841 2300 	strex	r3, r2, [r1]
 800933c:	61bb      	str	r3, [r7, #24]
   return(result);
 800933e:	69bb      	ldr	r3, [r7, #24]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d1e5      	bne.n	8009310 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8009344:	2300      	movs	r3, #0
 8009346:	e000      	b.n	800934a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8009348:	2302      	movs	r3, #2
  }
}
 800934a:	4618      	mov	r0, r3
 800934c:	3728      	adds	r7, #40	@ 0x28
 800934e:	46bd      	mov	sp, r7
 8009350:	bd80      	pop	{r7, pc}
 8009352:	bf00      	nop
 8009354:	0800a455 	.word	0x0800a455
 8009358:	0800a4ef 	.word	0x0800a4ef
 800935c:	0800a50b 	.word	0x0800a50b

08009360 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b0ba      	sub	sp, #232	@ 0xe8
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	69db      	ldr	r3, [r3, #28]
 800936e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	689b      	ldr	r3, [r3, #8]
 8009382:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009386:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800938a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800938e:	4013      	ands	r3, r2
 8009390:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009394:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009398:	2b00      	cmp	r3, #0
 800939a:	d11b      	bne.n	80093d4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800939c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093a0:	f003 0320 	and.w	r3, r3, #32
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d015      	beq.n	80093d4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80093a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80093ac:	f003 0320 	and.w	r3, r3, #32
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d105      	bne.n	80093c0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80093b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80093b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d009      	beq.n	80093d4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	f000 82e3 	beq.w	8009990 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	4798      	blx	r3
      }
      return;
 80093d2:	e2dd      	b.n	8009990 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80093d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80093d8:	2b00      	cmp	r3, #0
 80093da:	f000 8123 	beq.w	8009624 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80093de:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80093e2:	4b8d      	ldr	r3, [pc, #564]	@ (8009618 <HAL_UART_IRQHandler+0x2b8>)
 80093e4:	4013      	ands	r3, r2
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d106      	bne.n	80093f8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80093ea:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80093ee:	4b8b      	ldr	r3, [pc, #556]	@ (800961c <HAL_UART_IRQHandler+0x2bc>)
 80093f0:	4013      	ands	r3, r2
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	f000 8116 	beq.w	8009624 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80093f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093fc:	f003 0301 	and.w	r3, r3, #1
 8009400:	2b00      	cmp	r3, #0
 8009402:	d011      	beq.n	8009428 <HAL_UART_IRQHandler+0xc8>
 8009404:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009408:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800940c:	2b00      	cmp	r3, #0
 800940e:	d00b      	beq.n	8009428 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	2201      	movs	r2, #1
 8009416:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800941e:	f043 0201 	orr.w	r2, r3, #1
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009428:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800942c:	f003 0302 	and.w	r3, r3, #2
 8009430:	2b00      	cmp	r3, #0
 8009432:	d011      	beq.n	8009458 <HAL_UART_IRQHandler+0xf8>
 8009434:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009438:	f003 0301 	and.w	r3, r3, #1
 800943c:	2b00      	cmp	r3, #0
 800943e:	d00b      	beq.n	8009458 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	2202      	movs	r2, #2
 8009446:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800944e:	f043 0204 	orr.w	r2, r3, #4
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009458:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800945c:	f003 0304 	and.w	r3, r3, #4
 8009460:	2b00      	cmp	r3, #0
 8009462:	d011      	beq.n	8009488 <HAL_UART_IRQHandler+0x128>
 8009464:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009468:	f003 0301 	and.w	r3, r3, #1
 800946c:	2b00      	cmp	r3, #0
 800946e:	d00b      	beq.n	8009488 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	2204      	movs	r2, #4
 8009476:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800947e:	f043 0202 	orr.w	r2, r3, #2
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009488:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800948c:	f003 0308 	and.w	r3, r3, #8
 8009490:	2b00      	cmp	r3, #0
 8009492:	d017      	beq.n	80094c4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009494:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009498:	f003 0320 	and.w	r3, r3, #32
 800949c:	2b00      	cmp	r3, #0
 800949e:	d105      	bne.n	80094ac <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80094a0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80094a4:	4b5c      	ldr	r3, [pc, #368]	@ (8009618 <HAL_UART_IRQHandler+0x2b8>)
 80094a6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d00b      	beq.n	80094c4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	2208      	movs	r2, #8
 80094b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80094ba:	f043 0208 	orr.w	r2, r3, #8
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80094c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80094c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d012      	beq.n	80094f6 <HAL_UART_IRQHandler+0x196>
 80094d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80094d4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d00c      	beq.n	80094f6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80094e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80094ec:	f043 0220 	orr.w	r2, r3, #32
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	f000 8249 	beq.w	8009994 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009502:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009506:	f003 0320 	and.w	r3, r3, #32
 800950a:	2b00      	cmp	r3, #0
 800950c:	d013      	beq.n	8009536 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800950e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009512:	f003 0320 	and.w	r3, r3, #32
 8009516:	2b00      	cmp	r3, #0
 8009518:	d105      	bne.n	8009526 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800951a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800951e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009522:	2b00      	cmp	r3, #0
 8009524:	d007      	beq.n	8009536 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800952a:	2b00      	cmp	r3, #0
 800952c:	d003      	beq.n	8009536 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800953c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	689b      	ldr	r3, [r3, #8]
 8009546:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800954a:	2b40      	cmp	r3, #64	@ 0x40
 800954c:	d005      	beq.n	800955a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800954e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009552:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009556:	2b00      	cmp	r3, #0
 8009558:	d054      	beq.n	8009604 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f000 ff14 	bl	800a388 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	689b      	ldr	r3, [r3, #8]
 8009566:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800956a:	2b40      	cmp	r3, #64	@ 0x40
 800956c:	d146      	bne.n	80095fc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	3308      	adds	r3, #8
 8009574:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009578:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800957c:	e853 3f00 	ldrex	r3, [r3]
 8009580:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009584:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009588:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800958c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	3308      	adds	r3, #8
 8009596:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800959a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800959e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80095a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80095aa:	e841 2300 	strex	r3, r2, [r1]
 80095ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80095b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d1d9      	bne.n	800956e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d017      	beq.n	80095f4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80095ca:	4a15      	ldr	r2, [pc, #84]	@ (8009620 <HAL_UART_IRQHandler+0x2c0>)
 80095cc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80095d4:	4618      	mov	r0, r3
 80095d6:	f7fb fdc5 	bl	8005164 <HAL_DMA_Abort_IT>
 80095da:	4603      	mov	r3, r0
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d019      	beq.n	8009614 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80095e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095e8:	687a      	ldr	r2, [r7, #4]
 80095ea:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80095ee:	4610      	mov	r0, r2
 80095f0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095f2:	e00f      	b.n	8009614 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80095f4:	6878      	ldr	r0, [r7, #4]
 80095f6:	f000 f9eb 	bl	80099d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095fa:	e00b      	b.n	8009614 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	f000 f9e7 	bl	80099d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009602:	e007      	b.n	8009614 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009604:	6878      	ldr	r0, [r7, #4]
 8009606:	f000 f9e3 	bl	80099d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2200      	movs	r2, #0
 800960e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8009612:	e1bf      	b.n	8009994 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009614:	bf00      	nop
    return;
 8009616:	e1bd      	b.n	8009994 <HAL_UART_IRQHandler+0x634>
 8009618:	10000001 	.word	0x10000001
 800961c:	04000120 	.word	0x04000120
 8009620:	0800a58b 	.word	0x0800a58b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009628:	2b01      	cmp	r3, #1
 800962a:	f040 8153 	bne.w	80098d4 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800962e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009632:	f003 0310 	and.w	r3, r3, #16
 8009636:	2b00      	cmp	r3, #0
 8009638:	f000 814c 	beq.w	80098d4 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800963c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009640:	f003 0310 	and.w	r3, r3, #16
 8009644:	2b00      	cmp	r3, #0
 8009646:	f000 8145 	beq.w	80098d4 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	2210      	movs	r2, #16
 8009650:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	689b      	ldr	r3, [r3, #8]
 8009658:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800965c:	2b40      	cmp	r3, #64	@ 0x40
 800965e:	f040 80bb 	bne.w	80097d8 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	685b      	ldr	r3, [r3, #4]
 800966c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009670:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009674:	2b00      	cmp	r3, #0
 8009676:	f000 818f 	beq.w	8009998 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009680:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009684:	429a      	cmp	r2, r3
 8009686:	f080 8187 	bcs.w	8009998 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009690:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f003 0320 	and.w	r3, r3, #32
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	f040 8087 	bne.w	80097b6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80096b4:	e853 3f00 	ldrex	r3, [r3]
 80096b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80096bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80096c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80096c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	461a      	mov	r2, r3
 80096ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80096d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80096d6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096da:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80096de:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80096e2:	e841 2300 	strex	r3, r2, [r1]
 80096e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80096ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d1da      	bne.n	80096a8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	3308      	adds	r3, #8
 80096f8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80096fc:	e853 3f00 	ldrex	r3, [r3]
 8009700:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009702:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009704:	f023 0301 	bic.w	r3, r3, #1
 8009708:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	3308      	adds	r3, #8
 8009712:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009716:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800971a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800971c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800971e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009722:	e841 2300 	strex	r3, r2, [r1]
 8009726:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009728:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800972a:	2b00      	cmp	r3, #0
 800972c:	d1e1      	bne.n	80096f2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	3308      	adds	r3, #8
 8009734:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009736:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009738:	e853 3f00 	ldrex	r3, [r3]
 800973c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800973e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009740:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009744:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	3308      	adds	r3, #8
 800974e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009752:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009754:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009756:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009758:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800975a:	e841 2300 	strex	r3, r2, [r1]
 800975e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009760:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009762:	2b00      	cmp	r3, #0
 8009764:	d1e3      	bne.n	800972e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2220      	movs	r2, #32
 800976a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2200      	movs	r2, #0
 8009772:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800977a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800977c:	e853 3f00 	ldrex	r3, [r3]
 8009780:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009782:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009784:	f023 0310 	bic.w	r3, r3, #16
 8009788:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	461a      	mov	r2, r3
 8009792:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009796:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009798:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800979a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800979c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800979e:	e841 2300 	strex	r3, r2, [r1]
 80097a2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80097a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d1e4      	bne.n	8009774 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80097b0:	4618      	mov	r0, r3
 80097b2:	f7fb fc7e 	bl	80050b2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	2202      	movs	r2, #2
 80097ba:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80097c8:	b29b      	uxth	r3, r3
 80097ca:	1ad3      	subs	r3, r2, r3
 80097cc:	b29b      	uxth	r3, r3
 80097ce:	4619      	mov	r1, r3
 80097d0:	6878      	ldr	r0, [r7, #4]
 80097d2:	f000 f907 	bl	80099e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80097d6:	e0df      	b.n	8009998 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80097e4:	b29b      	uxth	r3, r3
 80097e6:	1ad3      	subs	r3, r2, r3
 80097e8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80097f2:	b29b      	uxth	r3, r3
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	f000 80d1 	beq.w	800999c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80097fa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80097fe:	2b00      	cmp	r3, #0
 8009800:	f000 80cc 	beq.w	800999c <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800980a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800980c:	e853 3f00 	ldrex	r3, [r3]
 8009810:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009812:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009814:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009818:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	461a      	mov	r2, r3
 8009822:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009826:	647b      	str	r3, [r7, #68]	@ 0x44
 8009828:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800982a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800982c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800982e:	e841 2300 	strex	r3, r2, [r1]
 8009832:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009834:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009836:	2b00      	cmp	r3, #0
 8009838:	d1e4      	bne.n	8009804 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	3308      	adds	r3, #8
 8009840:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009844:	e853 3f00 	ldrex	r3, [r3]
 8009848:	623b      	str	r3, [r7, #32]
   return(result);
 800984a:	6a3b      	ldr	r3, [r7, #32]
 800984c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009850:	f023 0301 	bic.w	r3, r3, #1
 8009854:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	3308      	adds	r3, #8
 800985e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009862:	633a      	str	r2, [r7, #48]	@ 0x30
 8009864:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009866:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009868:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800986a:	e841 2300 	strex	r3, r2, [r1]
 800986e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009872:	2b00      	cmp	r3, #0
 8009874:	d1e1      	bne.n	800983a <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	2220      	movs	r2, #32
 800987a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2200      	movs	r2, #0
 8009882:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2200      	movs	r2, #0
 8009888:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009890:	693b      	ldr	r3, [r7, #16]
 8009892:	e853 3f00 	ldrex	r3, [r3]
 8009896:	60fb      	str	r3, [r7, #12]
   return(result);
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	f023 0310 	bic.w	r3, r3, #16
 800989e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	461a      	mov	r2, r3
 80098a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80098ac:	61fb      	str	r3, [r7, #28]
 80098ae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098b0:	69b9      	ldr	r1, [r7, #24]
 80098b2:	69fa      	ldr	r2, [r7, #28]
 80098b4:	e841 2300 	strex	r3, r2, [r1]
 80098b8:	617b      	str	r3, [r7, #20]
   return(result);
 80098ba:	697b      	ldr	r3, [r7, #20]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d1e4      	bne.n	800988a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2202      	movs	r2, #2
 80098c4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80098c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80098ca:	4619      	mov	r1, r3
 80098cc:	6878      	ldr	r0, [r7, #4]
 80098ce:	f000 f889 	bl	80099e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80098d2:	e063      	b.n	800999c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80098d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098d8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d00e      	beq.n	80098fe <HAL_UART_IRQHandler+0x59e>
 80098e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80098e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d008      	beq.n	80098fe <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80098f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	f000 fe88 	bl	800a60c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80098fc:	e051      	b.n	80099a2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80098fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009902:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009906:	2b00      	cmp	r3, #0
 8009908:	d014      	beq.n	8009934 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800990a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800990e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009912:	2b00      	cmp	r3, #0
 8009914:	d105      	bne.n	8009922 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009916:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800991a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800991e:	2b00      	cmp	r3, #0
 8009920:	d008      	beq.n	8009934 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009926:	2b00      	cmp	r3, #0
 8009928:	d03a      	beq.n	80099a0 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	4798      	blx	r3
    }
    return;
 8009932:	e035      	b.n	80099a0 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009934:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009938:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800993c:	2b00      	cmp	r3, #0
 800993e:	d009      	beq.n	8009954 <HAL_UART_IRQHandler+0x5f4>
 8009940:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009944:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009948:	2b00      	cmp	r3, #0
 800994a:	d003      	beq.n	8009954 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	f000 fe32 	bl	800a5b6 <UART_EndTransmit_IT>
    return;
 8009952:	e026      	b.n	80099a2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009954:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009958:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800995c:	2b00      	cmp	r3, #0
 800995e:	d009      	beq.n	8009974 <HAL_UART_IRQHandler+0x614>
 8009960:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009964:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009968:	2b00      	cmp	r3, #0
 800996a:	d003      	beq.n	8009974 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800996c:	6878      	ldr	r0, [r7, #4]
 800996e:	f000 fe61 	bl	800a634 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009972:	e016      	b.n	80099a2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009974:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009978:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800997c:	2b00      	cmp	r3, #0
 800997e:	d010      	beq.n	80099a2 <HAL_UART_IRQHandler+0x642>
 8009980:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009984:	2b00      	cmp	r3, #0
 8009986:	da0c      	bge.n	80099a2 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f000 fe49 	bl	800a620 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800998e:	e008      	b.n	80099a2 <HAL_UART_IRQHandler+0x642>
      return;
 8009990:	bf00      	nop
 8009992:	e006      	b.n	80099a2 <HAL_UART_IRQHandler+0x642>
    return;
 8009994:	bf00      	nop
 8009996:	e004      	b.n	80099a2 <HAL_UART_IRQHandler+0x642>
      return;
 8009998:	bf00      	nop
 800999a:	e002      	b.n	80099a2 <HAL_UART_IRQHandler+0x642>
      return;
 800999c:	bf00      	nop
 800999e:	e000      	b.n	80099a2 <HAL_UART_IRQHandler+0x642>
    return;
 80099a0:	bf00      	nop
  }
}
 80099a2:	37e8      	adds	r7, #232	@ 0xe8
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bd80      	pop	{r7, pc}

080099a8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80099a8:	b480      	push	{r7}
 80099aa:	b083      	sub	sp, #12
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80099b0:	bf00      	nop
 80099b2:	370c      	adds	r7, #12
 80099b4:	46bd      	mov	sp, r7
 80099b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ba:	4770      	bx	lr

080099bc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80099bc:	b480      	push	{r7}
 80099be:	b083      	sub	sp, #12
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80099c4:	bf00      	nop
 80099c6:	370c      	adds	r7, #12
 80099c8:	46bd      	mov	sp, r7
 80099ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ce:	4770      	bx	lr

080099d0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80099d0:	b480      	push	{r7}
 80099d2:	b083      	sub	sp, #12
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80099d8:	bf00      	nop
 80099da:	370c      	adds	r7, #12
 80099dc:	46bd      	mov	sp, r7
 80099de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e2:	4770      	bx	lr

080099e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80099e4:	b480      	push	{r7}
 80099e6:	b083      	sub	sp, #12
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
 80099ec:	460b      	mov	r3, r1
 80099ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80099f0:	bf00      	nop
 80099f2:	370c      	adds	r7, #12
 80099f4:	46bd      	mov	sp, r7
 80099f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fa:	4770      	bx	lr

080099fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80099fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009a00:	b08c      	sub	sp, #48	@ 0x30
 8009a02:	af00      	add	r7, sp, #0
 8009a04:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009a06:	2300      	movs	r3, #0
 8009a08:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009a0c:	697b      	ldr	r3, [r7, #20]
 8009a0e:	689a      	ldr	r2, [r3, #8]
 8009a10:	697b      	ldr	r3, [r7, #20]
 8009a12:	691b      	ldr	r3, [r3, #16]
 8009a14:	431a      	orrs	r2, r3
 8009a16:	697b      	ldr	r3, [r7, #20]
 8009a18:	695b      	ldr	r3, [r3, #20]
 8009a1a:	431a      	orrs	r2, r3
 8009a1c:	697b      	ldr	r3, [r7, #20]
 8009a1e:	69db      	ldr	r3, [r3, #28]
 8009a20:	4313      	orrs	r3, r2
 8009a22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009a24:	697b      	ldr	r3, [r7, #20]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	681a      	ldr	r2, [r3, #0]
 8009a2a:	4bab      	ldr	r3, [pc, #684]	@ (8009cd8 <UART_SetConfig+0x2dc>)
 8009a2c:	4013      	ands	r3, r2
 8009a2e:	697a      	ldr	r2, [r7, #20]
 8009a30:	6812      	ldr	r2, [r2, #0]
 8009a32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009a34:	430b      	orrs	r3, r1
 8009a36:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009a38:	697b      	ldr	r3, [r7, #20]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	685b      	ldr	r3, [r3, #4]
 8009a3e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009a42:	697b      	ldr	r3, [r7, #20]
 8009a44:	68da      	ldr	r2, [r3, #12]
 8009a46:	697b      	ldr	r3, [r7, #20]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	430a      	orrs	r2, r1
 8009a4c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009a4e:	697b      	ldr	r3, [r7, #20]
 8009a50:	699b      	ldr	r3, [r3, #24]
 8009a52:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009a54:	697b      	ldr	r3, [r7, #20]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	4aa0      	ldr	r2, [pc, #640]	@ (8009cdc <UART_SetConfig+0x2e0>)
 8009a5a:	4293      	cmp	r3, r2
 8009a5c:	d004      	beq.n	8009a68 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009a5e:	697b      	ldr	r3, [r7, #20]
 8009a60:	6a1b      	ldr	r3, [r3, #32]
 8009a62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009a64:	4313      	orrs	r3, r2
 8009a66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009a68:	697b      	ldr	r3, [r7, #20]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	689b      	ldr	r3, [r3, #8]
 8009a6e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8009a72:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8009a76:	697a      	ldr	r2, [r7, #20]
 8009a78:	6812      	ldr	r2, [r2, #0]
 8009a7a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009a7c:	430b      	orrs	r3, r1
 8009a7e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009a80:	697b      	ldr	r3, [r7, #20]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a86:	f023 010f 	bic.w	r1, r3, #15
 8009a8a:	697b      	ldr	r3, [r7, #20]
 8009a8c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009a8e:	697b      	ldr	r3, [r7, #20]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	430a      	orrs	r2, r1
 8009a94:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009a96:	697b      	ldr	r3, [r7, #20]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	4a91      	ldr	r2, [pc, #580]	@ (8009ce0 <UART_SetConfig+0x2e4>)
 8009a9c:	4293      	cmp	r3, r2
 8009a9e:	d125      	bne.n	8009aec <UART_SetConfig+0xf0>
 8009aa0:	4b90      	ldr	r3, [pc, #576]	@ (8009ce4 <UART_SetConfig+0x2e8>)
 8009aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009aa6:	f003 0303 	and.w	r3, r3, #3
 8009aaa:	2b03      	cmp	r3, #3
 8009aac:	d81a      	bhi.n	8009ae4 <UART_SetConfig+0xe8>
 8009aae:	a201      	add	r2, pc, #4	@ (adr r2, 8009ab4 <UART_SetConfig+0xb8>)
 8009ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ab4:	08009ac5 	.word	0x08009ac5
 8009ab8:	08009ad5 	.word	0x08009ad5
 8009abc:	08009acd 	.word	0x08009acd
 8009ac0:	08009add 	.word	0x08009add
 8009ac4:	2301      	movs	r3, #1
 8009ac6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009aca:	e0d6      	b.n	8009c7a <UART_SetConfig+0x27e>
 8009acc:	2302      	movs	r3, #2
 8009ace:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ad2:	e0d2      	b.n	8009c7a <UART_SetConfig+0x27e>
 8009ad4:	2304      	movs	r3, #4
 8009ad6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ada:	e0ce      	b.n	8009c7a <UART_SetConfig+0x27e>
 8009adc:	2308      	movs	r3, #8
 8009ade:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ae2:	e0ca      	b.n	8009c7a <UART_SetConfig+0x27e>
 8009ae4:	2310      	movs	r3, #16
 8009ae6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009aea:	e0c6      	b.n	8009c7a <UART_SetConfig+0x27e>
 8009aec:	697b      	ldr	r3, [r7, #20]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	4a7d      	ldr	r2, [pc, #500]	@ (8009ce8 <UART_SetConfig+0x2ec>)
 8009af2:	4293      	cmp	r3, r2
 8009af4:	d138      	bne.n	8009b68 <UART_SetConfig+0x16c>
 8009af6:	4b7b      	ldr	r3, [pc, #492]	@ (8009ce4 <UART_SetConfig+0x2e8>)
 8009af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009afc:	f003 030c 	and.w	r3, r3, #12
 8009b00:	2b0c      	cmp	r3, #12
 8009b02:	d82d      	bhi.n	8009b60 <UART_SetConfig+0x164>
 8009b04:	a201      	add	r2, pc, #4	@ (adr r2, 8009b0c <UART_SetConfig+0x110>)
 8009b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b0a:	bf00      	nop
 8009b0c:	08009b41 	.word	0x08009b41
 8009b10:	08009b61 	.word	0x08009b61
 8009b14:	08009b61 	.word	0x08009b61
 8009b18:	08009b61 	.word	0x08009b61
 8009b1c:	08009b51 	.word	0x08009b51
 8009b20:	08009b61 	.word	0x08009b61
 8009b24:	08009b61 	.word	0x08009b61
 8009b28:	08009b61 	.word	0x08009b61
 8009b2c:	08009b49 	.word	0x08009b49
 8009b30:	08009b61 	.word	0x08009b61
 8009b34:	08009b61 	.word	0x08009b61
 8009b38:	08009b61 	.word	0x08009b61
 8009b3c:	08009b59 	.word	0x08009b59
 8009b40:	2300      	movs	r3, #0
 8009b42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b46:	e098      	b.n	8009c7a <UART_SetConfig+0x27e>
 8009b48:	2302      	movs	r3, #2
 8009b4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b4e:	e094      	b.n	8009c7a <UART_SetConfig+0x27e>
 8009b50:	2304      	movs	r3, #4
 8009b52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b56:	e090      	b.n	8009c7a <UART_SetConfig+0x27e>
 8009b58:	2308      	movs	r3, #8
 8009b5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b5e:	e08c      	b.n	8009c7a <UART_SetConfig+0x27e>
 8009b60:	2310      	movs	r3, #16
 8009b62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b66:	e088      	b.n	8009c7a <UART_SetConfig+0x27e>
 8009b68:	697b      	ldr	r3, [r7, #20]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	4a5f      	ldr	r2, [pc, #380]	@ (8009cec <UART_SetConfig+0x2f0>)
 8009b6e:	4293      	cmp	r3, r2
 8009b70:	d125      	bne.n	8009bbe <UART_SetConfig+0x1c2>
 8009b72:	4b5c      	ldr	r3, [pc, #368]	@ (8009ce4 <UART_SetConfig+0x2e8>)
 8009b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b78:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009b7c:	2b30      	cmp	r3, #48	@ 0x30
 8009b7e:	d016      	beq.n	8009bae <UART_SetConfig+0x1b2>
 8009b80:	2b30      	cmp	r3, #48	@ 0x30
 8009b82:	d818      	bhi.n	8009bb6 <UART_SetConfig+0x1ba>
 8009b84:	2b20      	cmp	r3, #32
 8009b86:	d00a      	beq.n	8009b9e <UART_SetConfig+0x1a2>
 8009b88:	2b20      	cmp	r3, #32
 8009b8a:	d814      	bhi.n	8009bb6 <UART_SetConfig+0x1ba>
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d002      	beq.n	8009b96 <UART_SetConfig+0x19a>
 8009b90:	2b10      	cmp	r3, #16
 8009b92:	d008      	beq.n	8009ba6 <UART_SetConfig+0x1aa>
 8009b94:	e00f      	b.n	8009bb6 <UART_SetConfig+0x1ba>
 8009b96:	2300      	movs	r3, #0
 8009b98:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b9c:	e06d      	b.n	8009c7a <UART_SetConfig+0x27e>
 8009b9e:	2302      	movs	r3, #2
 8009ba0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ba4:	e069      	b.n	8009c7a <UART_SetConfig+0x27e>
 8009ba6:	2304      	movs	r3, #4
 8009ba8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009bac:	e065      	b.n	8009c7a <UART_SetConfig+0x27e>
 8009bae:	2308      	movs	r3, #8
 8009bb0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009bb4:	e061      	b.n	8009c7a <UART_SetConfig+0x27e>
 8009bb6:	2310      	movs	r3, #16
 8009bb8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009bbc:	e05d      	b.n	8009c7a <UART_SetConfig+0x27e>
 8009bbe:	697b      	ldr	r3, [r7, #20]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	4a4b      	ldr	r2, [pc, #300]	@ (8009cf0 <UART_SetConfig+0x2f4>)
 8009bc4:	4293      	cmp	r3, r2
 8009bc6:	d125      	bne.n	8009c14 <UART_SetConfig+0x218>
 8009bc8:	4b46      	ldr	r3, [pc, #280]	@ (8009ce4 <UART_SetConfig+0x2e8>)
 8009bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009bce:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009bd2:	2bc0      	cmp	r3, #192	@ 0xc0
 8009bd4:	d016      	beq.n	8009c04 <UART_SetConfig+0x208>
 8009bd6:	2bc0      	cmp	r3, #192	@ 0xc0
 8009bd8:	d818      	bhi.n	8009c0c <UART_SetConfig+0x210>
 8009bda:	2b80      	cmp	r3, #128	@ 0x80
 8009bdc:	d00a      	beq.n	8009bf4 <UART_SetConfig+0x1f8>
 8009bde:	2b80      	cmp	r3, #128	@ 0x80
 8009be0:	d814      	bhi.n	8009c0c <UART_SetConfig+0x210>
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d002      	beq.n	8009bec <UART_SetConfig+0x1f0>
 8009be6:	2b40      	cmp	r3, #64	@ 0x40
 8009be8:	d008      	beq.n	8009bfc <UART_SetConfig+0x200>
 8009bea:	e00f      	b.n	8009c0c <UART_SetConfig+0x210>
 8009bec:	2300      	movs	r3, #0
 8009bee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009bf2:	e042      	b.n	8009c7a <UART_SetConfig+0x27e>
 8009bf4:	2302      	movs	r3, #2
 8009bf6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009bfa:	e03e      	b.n	8009c7a <UART_SetConfig+0x27e>
 8009bfc:	2304      	movs	r3, #4
 8009bfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c02:	e03a      	b.n	8009c7a <UART_SetConfig+0x27e>
 8009c04:	2308      	movs	r3, #8
 8009c06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c0a:	e036      	b.n	8009c7a <UART_SetConfig+0x27e>
 8009c0c:	2310      	movs	r3, #16
 8009c0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c12:	e032      	b.n	8009c7a <UART_SetConfig+0x27e>
 8009c14:	697b      	ldr	r3, [r7, #20]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	4a30      	ldr	r2, [pc, #192]	@ (8009cdc <UART_SetConfig+0x2e0>)
 8009c1a:	4293      	cmp	r3, r2
 8009c1c:	d12a      	bne.n	8009c74 <UART_SetConfig+0x278>
 8009c1e:	4b31      	ldr	r3, [pc, #196]	@ (8009ce4 <UART_SetConfig+0x2e8>)
 8009c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c24:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009c28:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009c2c:	d01a      	beq.n	8009c64 <UART_SetConfig+0x268>
 8009c2e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009c32:	d81b      	bhi.n	8009c6c <UART_SetConfig+0x270>
 8009c34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009c38:	d00c      	beq.n	8009c54 <UART_SetConfig+0x258>
 8009c3a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009c3e:	d815      	bhi.n	8009c6c <UART_SetConfig+0x270>
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d003      	beq.n	8009c4c <UART_SetConfig+0x250>
 8009c44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009c48:	d008      	beq.n	8009c5c <UART_SetConfig+0x260>
 8009c4a:	e00f      	b.n	8009c6c <UART_SetConfig+0x270>
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c52:	e012      	b.n	8009c7a <UART_SetConfig+0x27e>
 8009c54:	2302      	movs	r3, #2
 8009c56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c5a:	e00e      	b.n	8009c7a <UART_SetConfig+0x27e>
 8009c5c:	2304      	movs	r3, #4
 8009c5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c62:	e00a      	b.n	8009c7a <UART_SetConfig+0x27e>
 8009c64:	2308      	movs	r3, #8
 8009c66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c6a:	e006      	b.n	8009c7a <UART_SetConfig+0x27e>
 8009c6c:	2310      	movs	r3, #16
 8009c6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c72:	e002      	b.n	8009c7a <UART_SetConfig+0x27e>
 8009c74:	2310      	movs	r3, #16
 8009c76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009c7a:	697b      	ldr	r3, [r7, #20]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	4a17      	ldr	r2, [pc, #92]	@ (8009cdc <UART_SetConfig+0x2e0>)
 8009c80:	4293      	cmp	r3, r2
 8009c82:	f040 80a8 	bne.w	8009dd6 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009c86:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009c8a:	2b08      	cmp	r3, #8
 8009c8c:	d834      	bhi.n	8009cf8 <UART_SetConfig+0x2fc>
 8009c8e:	a201      	add	r2, pc, #4	@ (adr r2, 8009c94 <UART_SetConfig+0x298>)
 8009c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c94:	08009cb9 	.word	0x08009cb9
 8009c98:	08009cf9 	.word	0x08009cf9
 8009c9c:	08009cc1 	.word	0x08009cc1
 8009ca0:	08009cf9 	.word	0x08009cf9
 8009ca4:	08009cc7 	.word	0x08009cc7
 8009ca8:	08009cf9 	.word	0x08009cf9
 8009cac:	08009cf9 	.word	0x08009cf9
 8009cb0:	08009cf9 	.word	0x08009cf9
 8009cb4:	08009ccf 	.word	0x08009ccf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009cb8:	f7fd f880 	bl	8006dbc <HAL_RCC_GetPCLK1Freq>
 8009cbc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009cbe:	e021      	b.n	8009d04 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009cc0:	4b0c      	ldr	r3, [pc, #48]	@ (8009cf4 <UART_SetConfig+0x2f8>)
 8009cc2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009cc4:	e01e      	b.n	8009d04 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009cc6:	f7fd f80b 	bl	8006ce0 <HAL_RCC_GetSysClockFreq>
 8009cca:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009ccc:	e01a      	b.n	8009d04 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009cce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009cd2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009cd4:	e016      	b.n	8009d04 <UART_SetConfig+0x308>
 8009cd6:	bf00      	nop
 8009cd8:	cfff69f3 	.word	0xcfff69f3
 8009cdc:	40008000 	.word	0x40008000
 8009ce0:	40013800 	.word	0x40013800
 8009ce4:	40021000 	.word	0x40021000
 8009ce8:	40004400 	.word	0x40004400
 8009cec:	40004800 	.word	0x40004800
 8009cf0:	40004c00 	.word	0x40004c00
 8009cf4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009cfc:	2301      	movs	r3, #1
 8009cfe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009d02:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	f000 812a 	beq.w	8009f60 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009d0c:	697b      	ldr	r3, [r7, #20]
 8009d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d10:	4a9e      	ldr	r2, [pc, #632]	@ (8009f8c <UART_SetConfig+0x590>)
 8009d12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d16:	461a      	mov	r2, r3
 8009d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d1a:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d1e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009d20:	697b      	ldr	r3, [r7, #20]
 8009d22:	685a      	ldr	r2, [r3, #4]
 8009d24:	4613      	mov	r3, r2
 8009d26:	005b      	lsls	r3, r3, #1
 8009d28:	4413      	add	r3, r2
 8009d2a:	69ba      	ldr	r2, [r7, #24]
 8009d2c:	429a      	cmp	r2, r3
 8009d2e:	d305      	bcc.n	8009d3c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009d30:	697b      	ldr	r3, [r7, #20]
 8009d32:	685b      	ldr	r3, [r3, #4]
 8009d34:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009d36:	69ba      	ldr	r2, [r7, #24]
 8009d38:	429a      	cmp	r2, r3
 8009d3a:	d903      	bls.n	8009d44 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8009d3c:	2301      	movs	r3, #1
 8009d3e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009d42:	e10d      	b.n	8009f60 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d46:	2200      	movs	r2, #0
 8009d48:	60bb      	str	r3, [r7, #8]
 8009d4a:	60fa      	str	r2, [r7, #12]
 8009d4c:	697b      	ldr	r3, [r7, #20]
 8009d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d50:	4a8e      	ldr	r2, [pc, #568]	@ (8009f8c <UART_SetConfig+0x590>)
 8009d52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d56:	b29b      	uxth	r3, r3
 8009d58:	2200      	movs	r2, #0
 8009d5a:	603b      	str	r3, [r7, #0]
 8009d5c:	607a      	str	r2, [r7, #4]
 8009d5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d62:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009d66:	f7f6 fa57 	bl	8000218 <__aeabi_uldivmod>
 8009d6a:	4602      	mov	r2, r0
 8009d6c:	460b      	mov	r3, r1
 8009d6e:	4610      	mov	r0, r2
 8009d70:	4619      	mov	r1, r3
 8009d72:	f04f 0200 	mov.w	r2, #0
 8009d76:	f04f 0300 	mov.w	r3, #0
 8009d7a:	020b      	lsls	r3, r1, #8
 8009d7c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009d80:	0202      	lsls	r2, r0, #8
 8009d82:	6979      	ldr	r1, [r7, #20]
 8009d84:	6849      	ldr	r1, [r1, #4]
 8009d86:	0849      	lsrs	r1, r1, #1
 8009d88:	2000      	movs	r0, #0
 8009d8a:	460c      	mov	r4, r1
 8009d8c:	4605      	mov	r5, r0
 8009d8e:	eb12 0804 	adds.w	r8, r2, r4
 8009d92:	eb43 0905 	adc.w	r9, r3, r5
 8009d96:	697b      	ldr	r3, [r7, #20]
 8009d98:	685b      	ldr	r3, [r3, #4]
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	469a      	mov	sl, r3
 8009d9e:	4693      	mov	fp, r2
 8009da0:	4652      	mov	r2, sl
 8009da2:	465b      	mov	r3, fp
 8009da4:	4640      	mov	r0, r8
 8009da6:	4649      	mov	r1, r9
 8009da8:	f7f6 fa36 	bl	8000218 <__aeabi_uldivmod>
 8009dac:	4602      	mov	r2, r0
 8009dae:	460b      	mov	r3, r1
 8009db0:	4613      	mov	r3, r2
 8009db2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009db4:	6a3b      	ldr	r3, [r7, #32]
 8009db6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009dba:	d308      	bcc.n	8009dce <UART_SetConfig+0x3d2>
 8009dbc:	6a3b      	ldr	r3, [r7, #32]
 8009dbe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009dc2:	d204      	bcs.n	8009dce <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8009dc4:	697b      	ldr	r3, [r7, #20]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	6a3a      	ldr	r2, [r7, #32]
 8009dca:	60da      	str	r2, [r3, #12]
 8009dcc:	e0c8      	b.n	8009f60 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8009dce:	2301      	movs	r3, #1
 8009dd0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009dd4:	e0c4      	b.n	8009f60 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009dd6:	697b      	ldr	r3, [r7, #20]
 8009dd8:	69db      	ldr	r3, [r3, #28]
 8009dda:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009dde:	d167      	bne.n	8009eb0 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8009de0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009de4:	2b08      	cmp	r3, #8
 8009de6:	d828      	bhi.n	8009e3a <UART_SetConfig+0x43e>
 8009de8:	a201      	add	r2, pc, #4	@ (adr r2, 8009df0 <UART_SetConfig+0x3f4>)
 8009dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dee:	bf00      	nop
 8009df0:	08009e15 	.word	0x08009e15
 8009df4:	08009e1d 	.word	0x08009e1d
 8009df8:	08009e25 	.word	0x08009e25
 8009dfc:	08009e3b 	.word	0x08009e3b
 8009e00:	08009e2b 	.word	0x08009e2b
 8009e04:	08009e3b 	.word	0x08009e3b
 8009e08:	08009e3b 	.word	0x08009e3b
 8009e0c:	08009e3b 	.word	0x08009e3b
 8009e10:	08009e33 	.word	0x08009e33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009e14:	f7fc ffd2 	bl	8006dbc <HAL_RCC_GetPCLK1Freq>
 8009e18:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009e1a:	e014      	b.n	8009e46 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009e1c:	f7fc ffe4 	bl	8006de8 <HAL_RCC_GetPCLK2Freq>
 8009e20:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009e22:	e010      	b.n	8009e46 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009e24:	4b5a      	ldr	r3, [pc, #360]	@ (8009f90 <UART_SetConfig+0x594>)
 8009e26:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009e28:	e00d      	b.n	8009e46 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009e2a:	f7fc ff59 	bl	8006ce0 <HAL_RCC_GetSysClockFreq>
 8009e2e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009e30:	e009      	b.n	8009e46 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009e36:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009e38:	e005      	b.n	8009e46 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009e3e:	2301      	movs	r3, #1
 8009e40:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009e44:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	f000 8089 	beq.w	8009f60 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e4e:	697b      	ldr	r3, [r7, #20]
 8009e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e52:	4a4e      	ldr	r2, [pc, #312]	@ (8009f8c <UART_SetConfig+0x590>)
 8009e54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e58:	461a      	mov	r2, r3
 8009e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e60:	005a      	lsls	r2, r3, #1
 8009e62:	697b      	ldr	r3, [r7, #20]
 8009e64:	685b      	ldr	r3, [r3, #4]
 8009e66:	085b      	lsrs	r3, r3, #1
 8009e68:	441a      	add	r2, r3
 8009e6a:	697b      	ldr	r3, [r7, #20]
 8009e6c:	685b      	ldr	r3, [r3, #4]
 8009e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e72:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009e74:	6a3b      	ldr	r3, [r7, #32]
 8009e76:	2b0f      	cmp	r3, #15
 8009e78:	d916      	bls.n	8009ea8 <UART_SetConfig+0x4ac>
 8009e7a:	6a3b      	ldr	r3, [r7, #32]
 8009e7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e80:	d212      	bcs.n	8009ea8 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009e82:	6a3b      	ldr	r3, [r7, #32]
 8009e84:	b29b      	uxth	r3, r3
 8009e86:	f023 030f 	bic.w	r3, r3, #15
 8009e8a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009e8c:	6a3b      	ldr	r3, [r7, #32]
 8009e8e:	085b      	lsrs	r3, r3, #1
 8009e90:	b29b      	uxth	r3, r3
 8009e92:	f003 0307 	and.w	r3, r3, #7
 8009e96:	b29a      	uxth	r2, r3
 8009e98:	8bfb      	ldrh	r3, [r7, #30]
 8009e9a:	4313      	orrs	r3, r2
 8009e9c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009e9e:	697b      	ldr	r3, [r7, #20]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	8bfa      	ldrh	r2, [r7, #30]
 8009ea4:	60da      	str	r2, [r3, #12]
 8009ea6:	e05b      	b.n	8009f60 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8009ea8:	2301      	movs	r3, #1
 8009eaa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009eae:	e057      	b.n	8009f60 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009eb0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009eb4:	2b08      	cmp	r3, #8
 8009eb6:	d828      	bhi.n	8009f0a <UART_SetConfig+0x50e>
 8009eb8:	a201      	add	r2, pc, #4	@ (adr r2, 8009ec0 <UART_SetConfig+0x4c4>)
 8009eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ebe:	bf00      	nop
 8009ec0:	08009ee5 	.word	0x08009ee5
 8009ec4:	08009eed 	.word	0x08009eed
 8009ec8:	08009ef5 	.word	0x08009ef5
 8009ecc:	08009f0b 	.word	0x08009f0b
 8009ed0:	08009efb 	.word	0x08009efb
 8009ed4:	08009f0b 	.word	0x08009f0b
 8009ed8:	08009f0b 	.word	0x08009f0b
 8009edc:	08009f0b 	.word	0x08009f0b
 8009ee0:	08009f03 	.word	0x08009f03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009ee4:	f7fc ff6a 	bl	8006dbc <HAL_RCC_GetPCLK1Freq>
 8009ee8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009eea:	e014      	b.n	8009f16 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009eec:	f7fc ff7c 	bl	8006de8 <HAL_RCC_GetPCLK2Freq>
 8009ef0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009ef2:	e010      	b.n	8009f16 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009ef4:	4b26      	ldr	r3, [pc, #152]	@ (8009f90 <UART_SetConfig+0x594>)
 8009ef6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009ef8:	e00d      	b.n	8009f16 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009efa:	f7fc fef1 	bl	8006ce0 <HAL_RCC_GetSysClockFreq>
 8009efe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009f00:	e009      	b.n	8009f16 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009f02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009f06:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009f08:	e005      	b.n	8009f16 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009f0e:	2301      	movs	r3, #1
 8009f10:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009f14:	bf00      	nop
    }

    if (pclk != 0U)
 8009f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d021      	beq.n	8009f60 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009f1c:	697b      	ldr	r3, [r7, #20]
 8009f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f20:	4a1a      	ldr	r2, [pc, #104]	@ (8009f8c <UART_SetConfig+0x590>)
 8009f22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009f26:	461a      	mov	r2, r3
 8009f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f2a:	fbb3 f2f2 	udiv	r2, r3, r2
 8009f2e:	697b      	ldr	r3, [r7, #20]
 8009f30:	685b      	ldr	r3, [r3, #4]
 8009f32:	085b      	lsrs	r3, r3, #1
 8009f34:	441a      	add	r2, r3
 8009f36:	697b      	ldr	r3, [r7, #20]
 8009f38:	685b      	ldr	r3, [r3, #4]
 8009f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f3e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009f40:	6a3b      	ldr	r3, [r7, #32]
 8009f42:	2b0f      	cmp	r3, #15
 8009f44:	d909      	bls.n	8009f5a <UART_SetConfig+0x55e>
 8009f46:	6a3b      	ldr	r3, [r7, #32]
 8009f48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009f4c:	d205      	bcs.n	8009f5a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009f4e:	6a3b      	ldr	r3, [r7, #32]
 8009f50:	b29a      	uxth	r2, r3
 8009f52:	697b      	ldr	r3, [r7, #20]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	60da      	str	r2, [r3, #12]
 8009f58:	e002      	b.n	8009f60 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8009f5a:	2301      	movs	r3, #1
 8009f5c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009f60:	697b      	ldr	r3, [r7, #20]
 8009f62:	2201      	movs	r2, #1
 8009f64:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009f68:	697b      	ldr	r3, [r7, #20]
 8009f6a:	2201      	movs	r2, #1
 8009f6c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009f70:	697b      	ldr	r3, [r7, #20]
 8009f72:	2200      	movs	r2, #0
 8009f74:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009f76:	697b      	ldr	r3, [r7, #20]
 8009f78:	2200      	movs	r2, #0
 8009f7a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009f7c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8009f80:	4618      	mov	r0, r3
 8009f82:	3730      	adds	r7, #48	@ 0x30
 8009f84:	46bd      	mov	sp, r7
 8009f86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009f8a:	bf00      	nop
 8009f8c:	0800abdc 	.word	0x0800abdc
 8009f90:	00f42400 	.word	0x00f42400

08009f94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009f94:	b480      	push	{r7}
 8009f96:	b083      	sub	sp, #12
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fa0:	f003 0308 	and.w	r3, r3, #8
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d00a      	beq.n	8009fbe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	685b      	ldr	r3, [r3, #4]
 8009fae:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	430a      	orrs	r2, r1
 8009fbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fc2:	f003 0301 	and.w	r3, r3, #1
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d00a      	beq.n	8009fe0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	685b      	ldr	r3, [r3, #4]
 8009fd0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	430a      	orrs	r2, r1
 8009fde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fe4:	f003 0302 	and.w	r3, r3, #2
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d00a      	beq.n	800a002 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	685b      	ldr	r3, [r3, #4]
 8009ff2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	430a      	orrs	r2, r1
 800a000:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a006:	f003 0304 	and.w	r3, r3, #4
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d00a      	beq.n	800a024 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	685b      	ldr	r3, [r3, #4]
 800a014:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	430a      	orrs	r2, r1
 800a022:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a028:	f003 0310 	and.w	r3, r3, #16
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d00a      	beq.n	800a046 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	689b      	ldr	r3, [r3, #8]
 800a036:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	430a      	orrs	r2, r1
 800a044:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a04a:	f003 0320 	and.w	r3, r3, #32
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d00a      	beq.n	800a068 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	689b      	ldr	r3, [r3, #8]
 800a058:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	430a      	orrs	r2, r1
 800a066:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a06c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a070:	2b00      	cmp	r3, #0
 800a072:	d01a      	beq.n	800a0aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	685b      	ldr	r3, [r3, #4]
 800a07a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	430a      	orrs	r2, r1
 800a088:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a08e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a092:	d10a      	bne.n	800a0aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	685b      	ldr	r3, [r3, #4]
 800a09a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	430a      	orrs	r2, r1
 800a0a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d00a      	beq.n	800a0cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	685b      	ldr	r3, [r3, #4]
 800a0bc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	430a      	orrs	r2, r1
 800a0ca:	605a      	str	r2, [r3, #4]
  }
}
 800a0cc:	bf00      	nop
 800a0ce:	370c      	adds	r7, #12
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d6:	4770      	bx	lr

0800a0d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b098      	sub	sp, #96	@ 0x60
 800a0dc:	af02      	add	r7, sp, #8
 800a0de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a0e8:	f7f7 fcdc 	bl	8001aa4 <HAL_GetTick>
 800a0ec:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	f003 0308 	and.w	r3, r3, #8
 800a0f8:	2b08      	cmp	r3, #8
 800a0fa:	d12f      	bne.n	800a15c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a0fc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a100:	9300      	str	r3, [sp, #0]
 800a102:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a104:	2200      	movs	r2, #0
 800a106:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a10a:	6878      	ldr	r0, [r7, #4]
 800a10c:	f000 f88e 	bl	800a22c <UART_WaitOnFlagUntilTimeout>
 800a110:	4603      	mov	r3, r0
 800a112:	2b00      	cmp	r3, #0
 800a114:	d022      	beq.n	800a15c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a11c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a11e:	e853 3f00 	ldrex	r3, [r3]
 800a122:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a124:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a126:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a12a:	653b      	str	r3, [r7, #80]	@ 0x50
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	461a      	mov	r2, r3
 800a132:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a134:	647b      	str	r3, [r7, #68]	@ 0x44
 800a136:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a138:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a13a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a13c:	e841 2300 	strex	r3, r2, [r1]
 800a140:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a142:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a144:	2b00      	cmp	r3, #0
 800a146:	d1e6      	bne.n	800a116 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2220      	movs	r2, #32
 800a14c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2200      	movs	r2, #0
 800a154:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a158:	2303      	movs	r3, #3
 800a15a:	e063      	b.n	800a224 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	f003 0304 	and.w	r3, r3, #4
 800a166:	2b04      	cmp	r3, #4
 800a168:	d149      	bne.n	800a1fe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a16a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a16e:	9300      	str	r3, [sp, #0]
 800a170:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a172:	2200      	movs	r2, #0
 800a174:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a178:	6878      	ldr	r0, [r7, #4]
 800a17a:	f000 f857 	bl	800a22c <UART_WaitOnFlagUntilTimeout>
 800a17e:	4603      	mov	r3, r0
 800a180:	2b00      	cmp	r3, #0
 800a182:	d03c      	beq.n	800a1fe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a18a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a18c:	e853 3f00 	ldrex	r3, [r3]
 800a190:	623b      	str	r3, [r7, #32]
   return(result);
 800a192:	6a3b      	ldr	r3, [r7, #32]
 800a194:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a198:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	461a      	mov	r2, r3
 800a1a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a1a2:	633b      	str	r3, [r7, #48]	@ 0x30
 800a1a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a1a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a1aa:	e841 2300 	strex	r3, r2, [r1]
 800a1ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a1b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d1e6      	bne.n	800a184 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	3308      	adds	r3, #8
 800a1bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1be:	693b      	ldr	r3, [r7, #16]
 800a1c0:	e853 3f00 	ldrex	r3, [r3]
 800a1c4:	60fb      	str	r3, [r7, #12]
   return(result);
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	f023 0301 	bic.w	r3, r3, #1
 800a1cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	3308      	adds	r3, #8
 800a1d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a1d6:	61fa      	str	r2, [r7, #28]
 800a1d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1da:	69b9      	ldr	r1, [r7, #24]
 800a1dc:	69fa      	ldr	r2, [r7, #28]
 800a1de:	e841 2300 	strex	r3, r2, [r1]
 800a1e2:	617b      	str	r3, [r7, #20]
   return(result);
 800a1e4:	697b      	ldr	r3, [r7, #20]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d1e5      	bne.n	800a1b6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	2220      	movs	r2, #32
 800a1ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a1fa:	2303      	movs	r3, #3
 800a1fc:	e012      	b.n	800a224 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	2220      	movs	r2, #32
 800a202:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	2220      	movs	r2, #32
 800a20a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2200      	movs	r2, #0
 800a212:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2200      	movs	r2, #0
 800a218:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	2200      	movs	r2, #0
 800a21e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a222:	2300      	movs	r3, #0
}
 800a224:	4618      	mov	r0, r3
 800a226:	3758      	adds	r7, #88	@ 0x58
 800a228:	46bd      	mov	sp, r7
 800a22a:	bd80      	pop	{r7, pc}

0800a22c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b084      	sub	sp, #16
 800a230:	af00      	add	r7, sp, #0
 800a232:	60f8      	str	r0, [r7, #12]
 800a234:	60b9      	str	r1, [r7, #8]
 800a236:	603b      	str	r3, [r7, #0]
 800a238:	4613      	mov	r3, r2
 800a23a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a23c:	e04f      	b.n	800a2de <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a23e:	69bb      	ldr	r3, [r7, #24]
 800a240:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a244:	d04b      	beq.n	800a2de <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a246:	f7f7 fc2d 	bl	8001aa4 <HAL_GetTick>
 800a24a:	4602      	mov	r2, r0
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	1ad3      	subs	r3, r2, r3
 800a250:	69ba      	ldr	r2, [r7, #24]
 800a252:	429a      	cmp	r2, r3
 800a254:	d302      	bcc.n	800a25c <UART_WaitOnFlagUntilTimeout+0x30>
 800a256:	69bb      	ldr	r3, [r7, #24]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d101      	bne.n	800a260 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a25c:	2303      	movs	r3, #3
 800a25e:	e04e      	b.n	800a2fe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	f003 0304 	and.w	r3, r3, #4
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d037      	beq.n	800a2de <UART_WaitOnFlagUntilTimeout+0xb2>
 800a26e:	68bb      	ldr	r3, [r7, #8]
 800a270:	2b80      	cmp	r3, #128	@ 0x80
 800a272:	d034      	beq.n	800a2de <UART_WaitOnFlagUntilTimeout+0xb2>
 800a274:	68bb      	ldr	r3, [r7, #8]
 800a276:	2b40      	cmp	r3, #64	@ 0x40
 800a278:	d031      	beq.n	800a2de <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	69db      	ldr	r3, [r3, #28]
 800a280:	f003 0308 	and.w	r3, r3, #8
 800a284:	2b08      	cmp	r3, #8
 800a286:	d110      	bne.n	800a2aa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	2208      	movs	r2, #8
 800a28e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a290:	68f8      	ldr	r0, [r7, #12]
 800a292:	f000 f879 	bl	800a388 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	2208      	movs	r2, #8
 800a29a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a2a6:	2301      	movs	r3, #1
 800a2a8:	e029      	b.n	800a2fe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	69db      	ldr	r3, [r3, #28]
 800a2b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a2b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a2b8:	d111      	bne.n	800a2de <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a2c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a2c4:	68f8      	ldr	r0, [r7, #12]
 800a2c6:	f000 f85f 	bl	800a388 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	2220      	movs	r2, #32
 800a2ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a2da:	2303      	movs	r3, #3
 800a2dc:	e00f      	b.n	800a2fe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	69da      	ldr	r2, [r3, #28]
 800a2e4:	68bb      	ldr	r3, [r7, #8]
 800a2e6:	4013      	ands	r3, r2
 800a2e8:	68ba      	ldr	r2, [r7, #8]
 800a2ea:	429a      	cmp	r2, r3
 800a2ec:	bf0c      	ite	eq
 800a2ee:	2301      	moveq	r3, #1
 800a2f0:	2300      	movne	r3, #0
 800a2f2:	b2db      	uxtb	r3, r3
 800a2f4:	461a      	mov	r2, r3
 800a2f6:	79fb      	ldrb	r3, [r7, #7]
 800a2f8:	429a      	cmp	r2, r3
 800a2fa:	d0a0      	beq.n	800a23e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a2fc:	2300      	movs	r3, #0
}
 800a2fe:	4618      	mov	r0, r3
 800a300:	3710      	adds	r7, #16
 800a302:	46bd      	mov	sp, r7
 800a304:	bd80      	pop	{r7, pc}

0800a306 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a306:	b480      	push	{r7}
 800a308:	b08f      	sub	sp, #60	@ 0x3c
 800a30a:	af00      	add	r7, sp, #0
 800a30c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a314:	6a3b      	ldr	r3, [r7, #32]
 800a316:	e853 3f00 	ldrex	r3, [r3]
 800a31a:	61fb      	str	r3, [r7, #28]
   return(result);
 800a31c:	69fb      	ldr	r3, [r7, #28]
 800a31e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a322:	637b      	str	r3, [r7, #52]	@ 0x34
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	461a      	mov	r2, r3
 800a32a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a32c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a32e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a330:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a332:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a334:	e841 2300 	strex	r3, r2, [r1]
 800a338:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a33a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d1e6      	bne.n	800a30e <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	3308      	adds	r3, #8
 800a346:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	e853 3f00 	ldrex	r3, [r3]
 800a34e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a350:	68bb      	ldr	r3, [r7, #8]
 800a352:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a356:	633b      	str	r3, [r7, #48]	@ 0x30
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	3308      	adds	r3, #8
 800a35e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a360:	61ba      	str	r2, [r7, #24]
 800a362:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a364:	6979      	ldr	r1, [r7, #20]
 800a366:	69ba      	ldr	r2, [r7, #24]
 800a368:	e841 2300 	strex	r3, r2, [r1]
 800a36c:	613b      	str	r3, [r7, #16]
   return(result);
 800a36e:	693b      	ldr	r3, [r7, #16]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d1e5      	bne.n	800a340 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2220      	movs	r2, #32
 800a378:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800a37c:	bf00      	nop
 800a37e:	373c      	adds	r7, #60	@ 0x3c
 800a380:	46bd      	mov	sp, r7
 800a382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a386:	4770      	bx	lr

0800a388 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a388:	b480      	push	{r7}
 800a38a:	b095      	sub	sp, #84	@ 0x54
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a396:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a398:	e853 3f00 	ldrex	r3, [r3]
 800a39c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a39e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a3a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	461a      	mov	r2, r3
 800a3ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a3ae:	643b      	str	r3, [r7, #64]	@ 0x40
 800a3b0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3b2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a3b4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a3b6:	e841 2300 	strex	r3, r2, [r1]
 800a3ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a3bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d1e6      	bne.n	800a390 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	3308      	adds	r3, #8
 800a3c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3ca:	6a3b      	ldr	r3, [r7, #32]
 800a3cc:	e853 3f00 	ldrex	r3, [r3]
 800a3d0:	61fb      	str	r3, [r7, #28]
   return(result);
 800a3d2:	69fb      	ldr	r3, [r7, #28]
 800a3d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a3d8:	f023 0301 	bic.w	r3, r3, #1
 800a3dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	3308      	adds	r3, #8
 800a3e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a3e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a3e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a3ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a3ee:	e841 2300 	strex	r3, r2, [r1]
 800a3f2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a3f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d1e3      	bne.n	800a3c2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a3fe:	2b01      	cmp	r3, #1
 800a400:	d118      	bne.n	800a434 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	e853 3f00 	ldrex	r3, [r3]
 800a40e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a410:	68bb      	ldr	r3, [r7, #8]
 800a412:	f023 0310 	bic.w	r3, r3, #16
 800a416:	647b      	str	r3, [r7, #68]	@ 0x44
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	461a      	mov	r2, r3
 800a41e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a420:	61bb      	str	r3, [r7, #24]
 800a422:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a424:	6979      	ldr	r1, [r7, #20]
 800a426:	69ba      	ldr	r2, [r7, #24]
 800a428:	e841 2300 	strex	r3, r2, [r1]
 800a42c:	613b      	str	r3, [r7, #16]
   return(result);
 800a42e:	693b      	ldr	r3, [r7, #16]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d1e6      	bne.n	800a402 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2220      	movs	r2, #32
 800a438:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2200      	movs	r2, #0
 800a440:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	2200      	movs	r2, #0
 800a446:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a448:	bf00      	nop
 800a44a:	3754      	adds	r7, #84	@ 0x54
 800a44c:	46bd      	mov	sp, r7
 800a44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a452:	4770      	bx	lr

0800a454 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b090      	sub	sp, #64	@ 0x40
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a460:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	f003 0320 	and.w	r3, r3, #32
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d137      	bne.n	800a4e0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800a470:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a472:	2200      	movs	r2, #0
 800a474:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a478:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	3308      	adds	r3, #8
 800a47e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a482:	e853 3f00 	ldrex	r3, [r3]
 800a486:	623b      	str	r3, [r7, #32]
   return(result);
 800a488:	6a3b      	ldr	r3, [r7, #32]
 800a48a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a48e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a490:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	3308      	adds	r3, #8
 800a496:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a498:	633a      	str	r2, [r7, #48]	@ 0x30
 800a49a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a49c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a49e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a4a0:	e841 2300 	strex	r3, r2, [r1]
 800a4a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a4a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d1e5      	bne.n	800a478 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a4ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4b2:	693b      	ldr	r3, [r7, #16]
 800a4b4:	e853 3f00 	ldrex	r3, [r3]
 800a4b8:	60fb      	str	r3, [r7, #12]
   return(result);
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a4c0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a4c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	461a      	mov	r2, r3
 800a4c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4ca:	61fb      	str	r3, [r7, #28]
 800a4cc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4ce:	69b9      	ldr	r1, [r7, #24]
 800a4d0:	69fa      	ldr	r2, [r7, #28]
 800a4d2:	e841 2300 	strex	r3, r2, [r1]
 800a4d6:	617b      	str	r3, [r7, #20]
   return(result);
 800a4d8:	697b      	ldr	r3, [r7, #20]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d1e6      	bne.n	800a4ac <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a4de:	e002      	b.n	800a4e6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800a4e0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a4e2:	f7ff fa61 	bl	80099a8 <HAL_UART_TxCpltCallback>
}
 800a4e6:	bf00      	nop
 800a4e8:	3740      	adds	r7, #64	@ 0x40
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	bd80      	pop	{r7, pc}

0800a4ee <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a4ee:	b580      	push	{r7, lr}
 800a4f0:	b084      	sub	sp, #16
 800a4f2:	af00      	add	r7, sp, #0
 800a4f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4fa:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a4fc:	68f8      	ldr	r0, [r7, #12]
 800a4fe:	f7ff fa5d 	bl	80099bc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a502:	bf00      	nop
 800a504:	3710      	adds	r7, #16
 800a506:	46bd      	mov	sp, r7
 800a508:	bd80      	pop	{r7, pc}

0800a50a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a50a:	b580      	push	{r7, lr}
 800a50c:	b086      	sub	sp, #24
 800a50e:	af00      	add	r7, sp, #0
 800a510:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a516:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a518:	697b      	ldr	r3, [r7, #20]
 800a51a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a51e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a520:	697b      	ldr	r3, [r7, #20]
 800a522:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a526:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a528:	697b      	ldr	r3, [r7, #20]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	689b      	ldr	r3, [r3, #8]
 800a52e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a532:	2b80      	cmp	r3, #128	@ 0x80
 800a534:	d109      	bne.n	800a54a <UART_DMAError+0x40>
 800a536:	693b      	ldr	r3, [r7, #16]
 800a538:	2b21      	cmp	r3, #33	@ 0x21
 800a53a:	d106      	bne.n	800a54a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a53c:	697b      	ldr	r3, [r7, #20]
 800a53e:	2200      	movs	r2, #0
 800a540:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800a544:	6978      	ldr	r0, [r7, #20]
 800a546:	f7ff fede 	bl	800a306 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a54a:	697b      	ldr	r3, [r7, #20]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	689b      	ldr	r3, [r3, #8]
 800a550:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a554:	2b40      	cmp	r3, #64	@ 0x40
 800a556:	d109      	bne.n	800a56c <UART_DMAError+0x62>
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	2b22      	cmp	r3, #34	@ 0x22
 800a55c:	d106      	bne.n	800a56c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a55e:	697b      	ldr	r3, [r7, #20]
 800a560:	2200      	movs	r2, #0
 800a562:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800a566:	6978      	ldr	r0, [r7, #20]
 800a568:	f7ff ff0e 	bl	800a388 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a56c:	697b      	ldr	r3, [r7, #20]
 800a56e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a572:	f043 0210 	orr.w	r2, r3, #16
 800a576:	697b      	ldr	r3, [r7, #20]
 800a578:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a57c:	6978      	ldr	r0, [r7, #20]
 800a57e:	f7ff fa27 	bl	80099d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a582:	bf00      	nop
 800a584:	3718      	adds	r7, #24
 800a586:	46bd      	mov	sp, r7
 800a588:	bd80      	pop	{r7, pc}

0800a58a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a58a:	b580      	push	{r7, lr}
 800a58c:	b084      	sub	sp, #16
 800a58e:	af00      	add	r7, sp, #0
 800a590:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a596:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	2200      	movs	r2, #0
 800a59c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a5a8:	68f8      	ldr	r0, [r7, #12]
 800a5aa:	f7ff fa11 	bl	80099d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a5ae:	bf00      	nop
 800a5b0:	3710      	adds	r7, #16
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	bd80      	pop	{r7, pc}

0800a5b6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a5b6:	b580      	push	{r7, lr}
 800a5b8:	b088      	sub	sp, #32
 800a5ba:	af00      	add	r7, sp, #0
 800a5bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	e853 3f00 	ldrex	r3, [r3]
 800a5ca:	60bb      	str	r3, [r7, #8]
   return(result);
 800a5cc:	68bb      	ldr	r3, [r7, #8]
 800a5ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a5d2:	61fb      	str	r3, [r7, #28]
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	461a      	mov	r2, r3
 800a5da:	69fb      	ldr	r3, [r7, #28]
 800a5dc:	61bb      	str	r3, [r7, #24]
 800a5de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5e0:	6979      	ldr	r1, [r7, #20]
 800a5e2:	69ba      	ldr	r2, [r7, #24]
 800a5e4:	e841 2300 	strex	r3, r2, [r1]
 800a5e8:	613b      	str	r3, [r7, #16]
   return(result);
 800a5ea:	693b      	ldr	r3, [r7, #16]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d1e6      	bne.n	800a5be <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	2220      	movs	r2, #32
 800a5f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a5fe:	6878      	ldr	r0, [r7, #4]
 800a600:	f7ff f9d2 	bl	80099a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a604:	bf00      	nop
 800a606:	3720      	adds	r7, #32
 800a608:	46bd      	mov	sp, r7
 800a60a:	bd80      	pop	{r7, pc}

0800a60c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a60c:	b480      	push	{r7}
 800a60e:	b083      	sub	sp, #12
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a614:	bf00      	nop
 800a616:	370c      	adds	r7, #12
 800a618:	46bd      	mov	sp, r7
 800a61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61e:	4770      	bx	lr

0800a620 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a620:	b480      	push	{r7}
 800a622:	b083      	sub	sp, #12
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a628:	bf00      	nop
 800a62a:	370c      	adds	r7, #12
 800a62c:	46bd      	mov	sp, r7
 800a62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a632:	4770      	bx	lr

0800a634 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a634:	b480      	push	{r7}
 800a636:	b083      	sub	sp, #12
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a63c:	bf00      	nop
 800a63e:	370c      	adds	r7, #12
 800a640:	46bd      	mov	sp, r7
 800a642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a646:	4770      	bx	lr

0800a648 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a648:	b480      	push	{r7}
 800a64a:	b085      	sub	sp, #20
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a656:	2b01      	cmp	r3, #1
 800a658:	d101      	bne.n	800a65e <HAL_UARTEx_DisableFifoMode+0x16>
 800a65a:	2302      	movs	r3, #2
 800a65c:	e027      	b.n	800a6ae <HAL_UARTEx_DisableFifoMode+0x66>
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	2201      	movs	r2, #1
 800a662:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2224      	movs	r2, #36	@ 0x24
 800a66a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	681a      	ldr	r2, [r3, #0]
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	f022 0201 	bic.w	r2, r2, #1
 800a684:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a68c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	2200      	movs	r2, #0
 800a692:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	68fa      	ldr	r2, [r7, #12]
 800a69a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2220      	movs	r2, #32
 800a6a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a6ac:	2300      	movs	r3, #0
}
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	3714      	adds	r7, #20
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b8:	4770      	bx	lr

0800a6ba <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a6ba:	b580      	push	{r7, lr}
 800a6bc:	b084      	sub	sp, #16
 800a6be:	af00      	add	r7, sp, #0
 800a6c0:	6078      	str	r0, [r7, #4]
 800a6c2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a6ca:	2b01      	cmp	r3, #1
 800a6cc:	d101      	bne.n	800a6d2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a6ce:	2302      	movs	r3, #2
 800a6d0:	e02d      	b.n	800a72e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	2201      	movs	r2, #1
 800a6d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2224      	movs	r2, #36	@ 0x24
 800a6de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	681a      	ldr	r2, [r3, #0]
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	f022 0201 	bic.w	r2, r2, #1
 800a6f8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	689b      	ldr	r3, [r3, #8]
 800a700:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	683a      	ldr	r2, [r7, #0]
 800a70a:	430a      	orrs	r2, r1
 800a70c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a70e:	6878      	ldr	r0, [r7, #4]
 800a710:	f000 f850 	bl	800a7b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	68fa      	ldr	r2, [r7, #12]
 800a71a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	2220      	movs	r2, #32
 800a720:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	2200      	movs	r2, #0
 800a728:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a72c:	2300      	movs	r3, #0
}
 800a72e:	4618      	mov	r0, r3
 800a730:	3710      	adds	r7, #16
 800a732:	46bd      	mov	sp, r7
 800a734:	bd80      	pop	{r7, pc}

0800a736 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a736:	b580      	push	{r7, lr}
 800a738:	b084      	sub	sp, #16
 800a73a:	af00      	add	r7, sp, #0
 800a73c:	6078      	str	r0, [r7, #4]
 800a73e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a746:	2b01      	cmp	r3, #1
 800a748:	d101      	bne.n	800a74e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a74a:	2302      	movs	r3, #2
 800a74c:	e02d      	b.n	800a7aa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	2201      	movs	r2, #1
 800a752:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	2224      	movs	r2, #36	@ 0x24
 800a75a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	681a      	ldr	r2, [r3, #0]
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	f022 0201 	bic.w	r2, r2, #1
 800a774:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	689b      	ldr	r3, [r3, #8]
 800a77c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	683a      	ldr	r2, [r7, #0]
 800a786:	430a      	orrs	r2, r1
 800a788:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a78a:	6878      	ldr	r0, [r7, #4]
 800a78c:	f000 f812 	bl	800a7b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	68fa      	ldr	r2, [r7, #12]
 800a796:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2220      	movs	r2, #32
 800a79c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a7a8:	2300      	movs	r3, #0
}
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	3710      	adds	r7, #16
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	bd80      	pop	{r7, pc}
	...

0800a7b4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a7b4:	b480      	push	{r7}
 800a7b6:	b085      	sub	sp, #20
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d108      	bne.n	800a7d6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2201      	movs	r2, #1
 800a7c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	2201      	movs	r2, #1
 800a7d0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a7d4:	e031      	b.n	800a83a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a7d6:	2308      	movs	r3, #8
 800a7d8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a7da:	2308      	movs	r3, #8
 800a7dc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	689b      	ldr	r3, [r3, #8]
 800a7e4:	0e5b      	lsrs	r3, r3, #25
 800a7e6:	b2db      	uxtb	r3, r3
 800a7e8:	f003 0307 	and.w	r3, r3, #7
 800a7ec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	689b      	ldr	r3, [r3, #8]
 800a7f4:	0f5b      	lsrs	r3, r3, #29
 800a7f6:	b2db      	uxtb	r3, r3
 800a7f8:	f003 0307 	and.w	r3, r3, #7
 800a7fc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a7fe:	7bbb      	ldrb	r3, [r7, #14]
 800a800:	7b3a      	ldrb	r2, [r7, #12]
 800a802:	4911      	ldr	r1, [pc, #68]	@ (800a848 <UARTEx_SetNbDataToProcess+0x94>)
 800a804:	5c8a      	ldrb	r2, [r1, r2]
 800a806:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a80a:	7b3a      	ldrb	r2, [r7, #12]
 800a80c:	490f      	ldr	r1, [pc, #60]	@ (800a84c <UARTEx_SetNbDataToProcess+0x98>)
 800a80e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a810:	fb93 f3f2 	sdiv	r3, r3, r2
 800a814:	b29a      	uxth	r2, r3
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a81c:	7bfb      	ldrb	r3, [r7, #15]
 800a81e:	7b7a      	ldrb	r2, [r7, #13]
 800a820:	4909      	ldr	r1, [pc, #36]	@ (800a848 <UARTEx_SetNbDataToProcess+0x94>)
 800a822:	5c8a      	ldrb	r2, [r1, r2]
 800a824:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a828:	7b7a      	ldrb	r2, [r7, #13]
 800a82a:	4908      	ldr	r1, [pc, #32]	@ (800a84c <UARTEx_SetNbDataToProcess+0x98>)
 800a82c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a82e:	fb93 f3f2 	sdiv	r3, r3, r2
 800a832:	b29a      	uxth	r2, r3
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a83a:	bf00      	nop
 800a83c:	3714      	adds	r7, #20
 800a83e:	46bd      	mov	sp, r7
 800a840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a844:	4770      	bx	lr
 800a846:	bf00      	nop
 800a848:	0800abf4 	.word	0x0800abf4
 800a84c:	0800abfc 	.word	0x0800abfc

0800a850 <appInit>:
#endif
/*
deal per 100ms
*/
void appInit()
{
 800a850:	b580      	push	{r7, lr}
 800a852:	af00      	add	r7, sp, #0
    motorInit();
 800a854:	f000 f802 	bl	800a85c <motorInit>
}
 800a858:	bf00      	nop
 800a85a:	bd80      	pop	{r7, pc}

0800a85c <motorInit>:
FocParameters fp1;

static void setPwm1(unsigned short int a, unsigned short int b, unsigned short int c);

void motorInit()
{
 800a85c:	b480      	push	{r7}
 800a85e:	af00      	add	r7, sp, #0
    fp1.shaft_angle = 0;
 800a860:	4b0a      	ldr	r3, [pc, #40]	@ (800a88c <motorInit+0x30>)
 800a862:	f04f 0200 	mov.w	r2, #0
 800a866:	601a      	str	r2, [r3, #0]
    fp1.Uq = 2.0f;
 800a868:	4b08      	ldr	r3, [pc, #32]	@ (800a88c <motorInit+0x30>)
 800a86a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800a86e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    fp1.pole_pairs = 7;
 800a872:	4b06      	ldr	r3, [pc, #24]	@ (800a88c <motorInit+0x30>)
 800a874:	2207      	movs	r2, #7
 800a876:	711a      	strb	r2, [r3, #4]
    fp1.setPwm = setPwm1;
 800a878:	4b04      	ldr	r3, [pc, #16]	@ (800a88c <motorInit+0x30>)
 800a87a:	4a05      	ldr	r2, [pc, #20]	@ (800a890 <motorInit+0x34>)
 800a87c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
}
 800a880:	bf00      	nop
 800a882:	46bd      	mov	sp, r7
 800a884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a888:	4770      	bx	lr
 800a88a:	bf00      	nop
 800a88c:	20000410 	.word	0x20000410
 800a890:	0800a895 	.word	0x0800a895

0800a894 <setPwm1>:
    fp->angle_el = _electricalAngle(fp->shaft_angle, fp->pole_pairs);
    SVPWM(fp);
}

static void setPwm1(unsigned short int a, unsigned short int b, unsigned short int c)
{
 800a894:	b480      	push	{r7}
 800a896:	b083      	sub	sp, #12
 800a898:	af00      	add	r7, sp, #0
 800a89a:	4603      	mov	r3, r0
 800a89c:	80fb      	strh	r3, [r7, #6]
 800a89e:	460b      	mov	r3, r1
 800a8a0:	80bb      	strh	r3, [r7, #4]
 800a8a2:	4613      	mov	r3, r2
 800a8a4:	807b      	strh	r3, [r7, #2]
    TIM1->CCR1 = a;
 800a8a6:	4a07      	ldr	r2, [pc, #28]	@ (800a8c4 <setPwm1+0x30>)
 800a8a8:	88fb      	ldrh	r3, [r7, #6]
 800a8aa:	6353      	str	r3, [r2, #52]	@ 0x34
    TIM1->CCR2 = b;
 800a8ac:	4a05      	ldr	r2, [pc, #20]	@ (800a8c4 <setPwm1+0x30>)
 800a8ae:	88bb      	ldrh	r3, [r7, #4]
 800a8b0:	6393      	str	r3, [r2, #56]	@ 0x38
    TIM1->CCR3 = c;
 800a8b2:	4a04      	ldr	r2, [pc, #16]	@ (800a8c4 <setPwm1+0x30>)
 800a8b4:	887b      	ldrh	r3, [r7, #2]
 800a8b6:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800a8b8:	bf00      	nop
 800a8ba:	370c      	adds	r7, #12
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c2:	4770      	bx	lr
 800a8c4:	40012c00 	.word	0x40012c00

0800a8c8 <HAL_GPIO_EXTI_Callback>:
void setPowerLost()
{
	powerLost = 1;
}
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b082      	sub	sp, #8
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	4603      	mov	r3, r0
 800a8d0:	80fb      	strh	r3, [r7, #6]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(GPIO_Pin);
	if (Button3_Pin == GPIO_Pin)
 800a8d2:	88fb      	ldrh	r3, [r7, #6]
 800a8d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a8d8:	d13a      	bne.n	800a950 <HAL_GPIO_EXTI_Callback+0x88>
	{
		Motor_state = ~Motor_state;
 800a8da:	4b1f      	ldr	r3, [pc, #124]	@ (800a958 <HAL_GPIO_EXTI_Callback+0x90>)
 800a8dc:	781b      	ldrb	r3, [r3, #0]
 800a8de:	43db      	mvns	r3, r3
 800a8e0:	b2da      	uxtb	r2, r3
 800a8e2:	4b1d      	ldr	r3, [pc, #116]	@ (800a958 <HAL_GPIO_EXTI_Callback+0x90>)
 800a8e4:	701a      	strb	r2, [r3, #0]
		if (0 == Motor_state)
 800a8e6:	4b1c      	ldr	r3, [pc, #112]	@ (800a958 <HAL_GPIO_EXTI_Callback+0x90>)
 800a8e8:	781b      	ldrb	r3, [r3, #0]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d118      	bne.n	800a920 <HAL_GPIO_EXTI_Callback+0x58>
		{
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800a8ee:	2100      	movs	r1, #0
 800a8f0:	481a      	ldr	r0, [pc, #104]	@ (800a95c <HAL_GPIO_EXTI_Callback+0x94>)
 800a8f2:	f7fc fee1 	bl	80076b8 <HAL_TIM_PWM_Stop>
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 800a8f6:	2104      	movs	r1, #4
 800a8f8:	4818      	ldr	r0, [pc, #96]	@ (800a95c <HAL_GPIO_EXTI_Callback+0x94>)
 800a8fa:	f7fc fedd 	bl	80076b8 <HAL_TIM_PWM_Stop>
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 800a8fe:	2108      	movs	r1, #8
 800a900:	4816      	ldr	r0, [pc, #88]	@ (800a95c <HAL_GPIO_EXTI_Callback+0x94>)
 800a902:	f7fc fed9 	bl	80076b8 <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 800a906:	2100      	movs	r1, #0
 800a908:	4814      	ldr	r0, [pc, #80]	@ (800a95c <HAL_GPIO_EXTI_Callback+0x94>)
 800a90a:	f7fe f9a9 	bl	8008c60 <HAL_TIMEx_PWMN_Stop>
			HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 800a90e:	2104      	movs	r1, #4
 800a910:	4812      	ldr	r0, [pc, #72]	@ (800a95c <HAL_GPIO_EXTI_Callback+0x94>)
 800a912:	f7fe f9a5 	bl	8008c60 <HAL_TIMEx_PWMN_Stop>
			HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3);
 800a916:	2108      	movs	r1, #8
 800a918:	4810      	ldr	r0, [pc, #64]	@ (800a95c <HAL_GPIO_EXTI_Callback+0x94>)
 800a91a:	f7fe f9a1 	bl	8008c60 <HAL_TIMEx_PWMN_Stop>
		}
	}
	/* NOTE: This function should not be modified, when the callback is needed,
			 the HAL_GPIO_EXTI_Callback could be implemented in the user file
	 */
}
 800a91e:	e017      	b.n	800a950 <HAL_GPIO_EXTI_Callback+0x88>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800a920:	2100      	movs	r1, #0
 800a922:	480e      	ldr	r0, [pc, #56]	@ (800a95c <HAL_GPIO_EXTI_Callback+0x94>)
 800a924:	f7fc fdc8 	bl	80074b8 <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800a928:	2104      	movs	r1, #4
 800a92a:	480c      	ldr	r0, [pc, #48]	@ (800a95c <HAL_GPIO_EXTI_Callback+0x94>)
 800a92c:	f7fc fdc4 	bl	80074b8 <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800a930:	2108      	movs	r1, #8
 800a932:	480a      	ldr	r0, [pc, #40]	@ (800a95c <HAL_GPIO_EXTI_Callback+0x94>)
 800a934:	f7fc fdc0 	bl	80074b8 <HAL_TIM_PWM_Start>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 800a938:	2100      	movs	r1, #0
 800a93a:	4808      	ldr	r0, [pc, #32]	@ (800a95c <HAL_GPIO_EXTI_Callback+0x94>)
 800a93c:	f7fe f8dc 	bl	8008af8 <HAL_TIMEx_PWMN_Start>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 800a940:	2104      	movs	r1, #4
 800a942:	4806      	ldr	r0, [pc, #24]	@ (800a95c <HAL_GPIO_EXTI_Callback+0x94>)
 800a944:	f7fe f8d8 	bl	8008af8 <HAL_TIMEx_PWMN_Start>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 800a948:	2108      	movs	r1, #8
 800a94a:	4804      	ldr	r0, [pc, #16]	@ (800a95c <HAL_GPIO_EXTI_Callback+0x94>)
 800a94c:	f7fe f8d4 	bl	8008af8 <HAL_TIMEx_PWMN_Start>
}
 800a950:	bf00      	nop
 800a952:	3708      	adds	r7, #8
 800a954:	46bd      	mov	sp, r7
 800a956:	bd80      	pop	{r7, pc}
 800a958:	200004cc 	.word	0x200004cc
 800a95c:	20000280 	.word	0x20000280

0800a960 <HAL_ADCEx_InjectedConvCpltCallback>:
	USART3->TDR = (uint8_t)ch;
	return ch;
}

void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800a960:	b5b0      	push	{r4, r5, r7, lr}
 800a962:	b082      	sub	sp, #8
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
	static uint8_t cnt;
	/* Prevent unused argument(s) compilation warning */
	UNUSED(hadc);
	if (hadc == &hadc1)
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	4a5b      	ldr	r2, [pc, #364]	@ (800aad8 <HAL_ADCEx_InjectedConvCpltCallback+0x178>)
 800a96c:	4293      	cmp	r3, r2
 800a96e:	f040 80af 	bne.w	800aad0 <HAL_ADCEx_InjectedConvCpltCallback+0x170>
	{
		if (ADC_offset == 0)
 800a972:	4b5a      	ldr	r3, [pc, #360]	@ (800aadc <HAL_ADCEx_InjectedConvCpltCallback+0x17c>)
 800a974:	781b      	ldrb	r3, [r3, #0]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d155      	bne.n	800aa26 <HAL_ADCEx_InjectedConvCpltCallback+0xc6>
		{
			cnt++;
 800a97a:	4b59      	ldr	r3, [pc, #356]	@ (800aae0 <HAL_ADCEx_InjectedConvCpltCallback+0x180>)
 800a97c:	781b      	ldrb	r3, [r3, #0]
 800a97e:	3301      	adds	r3, #1
 800a980:	b2da      	uxtb	r2, r3
 800a982:	4b57      	ldr	r3, [pc, #348]	@ (800aae0 <HAL_ADCEx_InjectedConvCpltCallback+0x180>)
 800a984:	701a      	strb	r2, [r3, #0]
			adc1_in1 = hadc1.Instance->JDR1;
 800a986:	4b54      	ldr	r3, [pc, #336]	@ (800aad8 <HAL_ADCEx_InjectedConvCpltCallback+0x178>)
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a98e:	b29a      	uxth	r2, r3
 800a990:	4b54      	ldr	r3, [pc, #336]	@ (800aae4 <HAL_ADCEx_InjectedConvCpltCallback+0x184>)
 800a992:	801a      	strh	r2, [r3, #0]
			adc1_in2 = hadc2.Instance->JDR1;
 800a994:	4b54      	ldr	r3, [pc, #336]	@ (800aae8 <HAL_ADCEx_InjectedConvCpltCallback+0x188>)
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a99c:	b29a      	uxth	r2, r3
 800a99e:	4b53      	ldr	r3, [pc, #332]	@ (800aaec <HAL_ADCEx_InjectedConvCpltCallback+0x18c>)
 800a9a0:	801a      	strh	r2, [r3, #0]
			adc1_in3 = hadc1.Instance->JDR2;
 800a9a2:	4b4d      	ldr	r3, [pc, #308]	@ (800aad8 <HAL_ADCEx_InjectedConvCpltCallback+0x178>)
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a9aa:	b29a      	uxth	r2, r3
 800a9ac:	4b50      	ldr	r3, [pc, #320]	@ (800aaf0 <HAL_ADCEx_InjectedConvCpltCallback+0x190>)
 800a9ae:	801a      	strh	r2, [r3, #0]
			IA_Offset += adc1_in1;
 800a9b0:	4b50      	ldr	r3, [pc, #320]	@ (800aaf4 <HAL_ADCEx_InjectedConvCpltCallback+0x194>)
 800a9b2:	881a      	ldrh	r2, [r3, #0]
 800a9b4:	4b4b      	ldr	r3, [pc, #300]	@ (800aae4 <HAL_ADCEx_InjectedConvCpltCallback+0x184>)
 800a9b6:	881b      	ldrh	r3, [r3, #0]
 800a9b8:	4413      	add	r3, r2
 800a9ba:	b29a      	uxth	r2, r3
 800a9bc:	4b4d      	ldr	r3, [pc, #308]	@ (800aaf4 <HAL_ADCEx_InjectedConvCpltCallback+0x194>)
 800a9be:	801a      	strh	r2, [r3, #0]
			IB_Offset += adc1_in2;
 800a9c0:	4b4d      	ldr	r3, [pc, #308]	@ (800aaf8 <HAL_ADCEx_InjectedConvCpltCallback+0x198>)
 800a9c2:	881a      	ldrh	r2, [r3, #0]
 800a9c4:	4b49      	ldr	r3, [pc, #292]	@ (800aaec <HAL_ADCEx_InjectedConvCpltCallback+0x18c>)
 800a9c6:	881b      	ldrh	r3, [r3, #0]
 800a9c8:	4413      	add	r3, r2
 800a9ca:	b29a      	uxth	r2, r3
 800a9cc:	4b4a      	ldr	r3, [pc, #296]	@ (800aaf8 <HAL_ADCEx_InjectedConvCpltCallback+0x198>)
 800a9ce:	801a      	strh	r2, [r3, #0]
			IC_Offset += adc1_in3;
 800a9d0:	4b4a      	ldr	r3, [pc, #296]	@ (800aafc <HAL_ADCEx_InjectedConvCpltCallback+0x19c>)
 800a9d2:	881a      	ldrh	r2, [r3, #0]
 800a9d4:	4b46      	ldr	r3, [pc, #280]	@ (800aaf0 <HAL_ADCEx_InjectedConvCpltCallback+0x190>)
 800a9d6:	881b      	ldrh	r3, [r3, #0]
 800a9d8:	4413      	add	r3, r2
 800a9da:	b29a      	uxth	r2, r3
 800a9dc:	4b47      	ldr	r3, [pc, #284]	@ (800aafc <HAL_ADCEx_InjectedConvCpltCallback+0x19c>)
 800a9de:	801a      	strh	r2, [r3, #0]
			if (cnt >= 10)
 800a9e0:	4b3f      	ldr	r3, [pc, #252]	@ (800aae0 <HAL_ADCEx_InjectedConvCpltCallback+0x180>)
 800a9e2:	781b      	ldrb	r3, [r3, #0]
 800a9e4:	2b09      	cmp	r3, #9
 800a9e6:	d973      	bls.n	800aad0 <HAL_ADCEx_InjectedConvCpltCallback+0x170>
			{
				ADC_offset = 1;
 800a9e8:	4b3c      	ldr	r3, [pc, #240]	@ (800aadc <HAL_ADCEx_InjectedConvCpltCallback+0x17c>)
 800a9ea:	2201      	movs	r2, #1
 800a9ec:	701a      	strb	r2, [r3, #0]
				IA_Offset = IA_Offset / 10;
 800a9ee:	4b41      	ldr	r3, [pc, #260]	@ (800aaf4 <HAL_ADCEx_InjectedConvCpltCallback+0x194>)
 800a9f0:	881b      	ldrh	r3, [r3, #0]
 800a9f2:	4a43      	ldr	r2, [pc, #268]	@ (800ab00 <HAL_ADCEx_InjectedConvCpltCallback+0x1a0>)
 800a9f4:	fba2 2303 	umull	r2, r3, r2, r3
 800a9f8:	08db      	lsrs	r3, r3, #3
 800a9fa:	b29a      	uxth	r2, r3
 800a9fc:	4b3d      	ldr	r3, [pc, #244]	@ (800aaf4 <HAL_ADCEx_InjectedConvCpltCallback+0x194>)
 800a9fe:	801a      	strh	r2, [r3, #0]
				IB_Offset = IB_Offset / 10;
 800aa00:	4b3d      	ldr	r3, [pc, #244]	@ (800aaf8 <HAL_ADCEx_InjectedConvCpltCallback+0x198>)
 800aa02:	881b      	ldrh	r3, [r3, #0]
 800aa04:	4a3e      	ldr	r2, [pc, #248]	@ (800ab00 <HAL_ADCEx_InjectedConvCpltCallback+0x1a0>)
 800aa06:	fba2 2303 	umull	r2, r3, r2, r3
 800aa0a:	08db      	lsrs	r3, r3, #3
 800aa0c:	b29a      	uxth	r2, r3
 800aa0e:	4b3a      	ldr	r3, [pc, #232]	@ (800aaf8 <HAL_ADCEx_InjectedConvCpltCallback+0x198>)
 800aa10:	801a      	strh	r2, [r3, #0]
				IC_Offset = IC_Offset / 10;
 800aa12:	4b3a      	ldr	r3, [pc, #232]	@ (800aafc <HAL_ADCEx_InjectedConvCpltCallback+0x19c>)
 800aa14:	881b      	ldrh	r3, [r3, #0]
 800aa16:	4a3a      	ldr	r2, [pc, #232]	@ (800ab00 <HAL_ADCEx_InjectedConvCpltCallback+0x1a0>)
 800aa18:	fba2 2303 	umull	r2, r3, r2, r3
 800aa1c:	08db      	lsrs	r3, r3, #3
 800aa1e:	b29a      	uxth	r2, r3
 800aa20:	4b36      	ldr	r3, [pc, #216]	@ (800aafc <HAL_ADCEx_InjectedConvCpltCallback+0x19c>)
 800aa22:	801a      	strh	r2, [r3, #0]
	}

	/* NOTE : This function should not be modified. When the callback is needed,
			  function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
	*/
}
 800aa24:	e054      	b.n	800aad0 <HAL_ADCEx_InjectedConvCpltCallback+0x170>
			adc1_in1 = hadc1.Instance->JDR1;
 800aa26:	4b2c      	ldr	r3, [pc, #176]	@ (800aad8 <HAL_ADCEx_InjectedConvCpltCallback+0x178>)
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aa2e:	b29a      	uxth	r2, r3
 800aa30:	4b2c      	ldr	r3, [pc, #176]	@ (800aae4 <HAL_ADCEx_InjectedConvCpltCallback+0x184>)
 800aa32:	801a      	strh	r2, [r3, #0]
			adc1_in3 = hadc1.Instance->JDR2;
 800aa34:	4b28      	ldr	r3, [pc, #160]	@ (800aad8 <HAL_ADCEx_InjectedConvCpltCallback+0x178>)
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aa3c:	b29a      	uxth	r2, r3
 800aa3e:	4b2c      	ldr	r3, [pc, #176]	@ (800aaf0 <HAL_ADCEx_InjectedConvCpltCallback+0x190>)
 800aa40:	801a      	strh	r2, [r3, #0]
			adc1_in2 = hadc2.Instance->JDR1;
 800aa42:	4b29      	ldr	r3, [pc, #164]	@ (800aae8 <HAL_ADCEx_InjectedConvCpltCallback+0x188>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aa4a:	b29a      	uxth	r2, r3
 800aa4c:	4b27      	ldr	r3, [pc, #156]	@ (800aaec <HAL_ADCEx_InjectedConvCpltCallback+0x18c>)
 800aa4e:	801a      	strh	r2, [r3, #0]
			Ia = (adc1_in1 - IA_Offset) * 0.02197f;
 800aa50:	4b24      	ldr	r3, [pc, #144]	@ (800aae4 <HAL_ADCEx_InjectedConvCpltCallback+0x184>)
 800aa52:	881b      	ldrh	r3, [r3, #0]
 800aa54:	461a      	mov	r2, r3
 800aa56:	4b27      	ldr	r3, [pc, #156]	@ (800aaf4 <HAL_ADCEx_InjectedConvCpltCallback+0x194>)
 800aa58:	881b      	ldrh	r3, [r3, #0]
 800aa5a:	1ad3      	subs	r3, r2, r3
 800aa5c:	ee07 3a90 	vmov	s15, r3
 800aa60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aa64:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 800ab04 <HAL_ADCEx_InjectedConvCpltCallback+0x1a4>
 800aa68:	ee67 7a87 	vmul.f32	s15, s15, s14
 800aa6c:	4b26      	ldr	r3, [pc, #152]	@ (800ab08 <HAL_ADCEx_InjectedConvCpltCallback+0x1a8>)
 800aa6e:	edc3 7a00 	vstr	s15, [r3]
			Ib = (adc1_in2 - IB_Offset) * 0.02197f;
 800aa72:	4b1e      	ldr	r3, [pc, #120]	@ (800aaec <HAL_ADCEx_InjectedConvCpltCallback+0x18c>)
 800aa74:	881b      	ldrh	r3, [r3, #0]
 800aa76:	461a      	mov	r2, r3
 800aa78:	4b1f      	ldr	r3, [pc, #124]	@ (800aaf8 <HAL_ADCEx_InjectedConvCpltCallback+0x198>)
 800aa7a:	881b      	ldrh	r3, [r3, #0]
 800aa7c:	1ad3      	subs	r3, r2, r3
 800aa7e:	ee07 3a90 	vmov	s15, r3
 800aa82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aa86:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 800ab04 <HAL_ADCEx_InjectedConvCpltCallback+0x1a4>
 800aa8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800aa8e:	4b1f      	ldr	r3, [pc, #124]	@ (800ab0c <HAL_ADCEx_InjectedConvCpltCallback+0x1ac>)
 800aa90:	edc3 7a00 	vstr	s15, [r3]
			Ic = (adc1_in3 - IC_Offset) * 0.02197f;
 800aa94:	4b16      	ldr	r3, [pc, #88]	@ (800aaf0 <HAL_ADCEx_InjectedConvCpltCallback+0x190>)
 800aa96:	881b      	ldrh	r3, [r3, #0]
 800aa98:	461a      	mov	r2, r3
 800aa9a:	4b18      	ldr	r3, [pc, #96]	@ (800aafc <HAL_ADCEx_InjectedConvCpltCallback+0x19c>)
 800aa9c:	881b      	ldrh	r3, [r3, #0]
 800aa9e:	1ad3      	subs	r3, r2, r3
 800aaa0:	ee07 3a90 	vmov	s15, r3
 800aaa4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aaa8:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 800ab04 <HAL_ADCEx_InjectedConvCpltCallback+0x1a4>
 800aaac:	ee67 7a87 	vmul.f32	s15, s15, s14
 800aab0:	4b17      	ldr	r3, [pc, #92]	@ (800ab10 <HAL_ADCEx_InjectedConvCpltCallback+0x1b0>)
 800aab2:	edc3 7a00 	vstr	s15, [r3]
			memcpy(tempData, (uint8_t *)&load_data, sizeof(load_data));
 800aab6:	4a17      	ldr	r2, [pc, #92]	@ (800ab14 <HAL_ADCEx_InjectedConvCpltCallback+0x1b4>)
 800aab8:	4b17      	ldr	r3, [pc, #92]	@ (800ab18 <HAL_ADCEx_InjectedConvCpltCallback+0x1b8>)
 800aaba:	4614      	mov	r4, r2
 800aabc:	461d      	mov	r5, r3
 800aabe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aac0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aac2:	682b      	ldr	r3, [r5, #0]
 800aac4:	6023      	str	r3, [r4, #0]
			HAL_UART_Transmit_DMA(&huart3, (uint8_t *)tempData, 6 * 4);
 800aac6:	2218      	movs	r2, #24
 800aac8:	4912      	ldr	r1, [pc, #72]	@ (800ab14 <HAL_ADCEx_InjectedConvCpltCallback+0x1b4>)
 800aaca:	4814      	ldr	r0, [pc, #80]	@ (800ab1c <HAL_ADCEx_InjectedConvCpltCallback+0x1bc>)
 800aacc:	f7fe fbc8 	bl	8009260 <HAL_UART_Transmit_DMA>
}
 800aad0:	bf00      	nop
 800aad2:	3708      	adds	r7, #8
 800aad4:	46bd      	mov	sp, r7
 800aad6:	bdb0      	pop	{r4, r5, r7, pc}
 800aad8:	20000040 	.word	0x20000040
 800aadc:	200004da 	.word	0x200004da
 800aae0:	2000050c 	.word	0x2000050c
 800aae4:	200004d4 	.word	0x200004d4
 800aae8:	200000ac 	.word	0x200000ac
 800aaec:	200004d6 	.word	0x200004d6
 800aaf0:	200004d8 	.word	0x200004d8
 800aaf4:	200004ce 	.word	0x200004ce
 800aaf8:	200004d0 	.word	0x200004d0
 800aafc:	200004d2 	.word	0x200004d2
 800ab00:	cccccccd 	.word	0xcccccccd
 800ab04:	3cb3fa6e 	.word	0x3cb3fa6e
 800ab08:	200004c0 	.word	0x200004c0
 800ab0c:	200004c4 	.word	0x200004c4
 800ab10:	200004c8 	.word	0x200004c8
 800ab14:	2000000c 	.word	0x2000000c
 800ab18:	200004ac 	.word	0x200004ac
 800ab1c:	20000318 	.word	0x20000318

0800ab20 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ab20:	b480      	push	{r7}
 800ab22:	b083      	sub	sp, #12
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
	// }

	/* NOTE : This function should not be modified, when the callback is needed,
			  the HAL_TIM_IC_CaptureCallback could be implemented in the user file
	 */
}
 800ab28:	bf00      	nop
 800ab2a:	370c      	adds	r7, #12
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab32:	4770      	bx	lr

0800ab34 <FDCAN_Config>:

void FDCAN_Config(void)
{
 800ab34:	b480      	push	{r7}
 800ab36:	af00      	add	r7, sp, #0
	// TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
	// TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
	// TxHeader.MessageMarker = 0x52;

	// HAL_FDCAN_Start(&hfdcan1);
 800ab38:	bf00      	nop
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab40:	4770      	bx	lr

0800ab42 <memset>:
 800ab42:	4402      	add	r2, r0
 800ab44:	4603      	mov	r3, r0
 800ab46:	4293      	cmp	r3, r2
 800ab48:	d100      	bne.n	800ab4c <memset+0xa>
 800ab4a:	4770      	bx	lr
 800ab4c:	f803 1b01 	strb.w	r1, [r3], #1
 800ab50:	e7f9      	b.n	800ab46 <memset+0x4>
	...

0800ab54 <__libc_init_array>:
 800ab54:	b570      	push	{r4, r5, r6, lr}
 800ab56:	4d0d      	ldr	r5, [pc, #52]	@ (800ab8c <__libc_init_array+0x38>)
 800ab58:	4c0d      	ldr	r4, [pc, #52]	@ (800ab90 <__libc_init_array+0x3c>)
 800ab5a:	1b64      	subs	r4, r4, r5
 800ab5c:	10a4      	asrs	r4, r4, #2
 800ab5e:	2600      	movs	r6, #0
 800ab60:	42a6      	cmp	r6, r4
 800ab62:	d109      	bne.n	800ab78 <__libc_init_array+0x24>
 800ab64:	4d0b      	ldr	r5, [pc, #44]	@ (800ab94 <__libc_init_array+0x40>)
 800ab66:	4c0c      	ldr	r4, [pc, #48]	@ (800ab98 <__libc_init_array+0x44>)
 800ab68:	f000 f818 	bl	800ab9c <_init>
 800ab6c:	1b64      	subs	r4, r4, r5
 800ab6e:	10a4      	asrs	r4, r4, #2
 800ab70:	2600      	movs	r6, #0
 800ab72:	42a6      	cmp	r6, r4
 800ab74:	d105      	bne.n	800ab82 <__libc_init_array+0x2e>
 800ab76:	bd70      	pop	{r4, r5, r6, pc}
 800ab78:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab7c:	4798      	blx	r3
 800ab7e:	3601      	adds	r6, #1
 800ab80:	e7ee      	b.n	800ab60 <__libc_init_array+0xc>
 800ab82:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab86:	4798      	blx	r3
 800ab88:	3601      	adds	r6, #1
 800ab8a:	e7f2      	b.n	800ab72 <__libc_init_array+0x1e>
 800ab8c:	0800ac0c 	.word	0x0800ac0c
 800ab90:	0800ac0c 	.word	0x0800ac0c
 800ab94:	0800ac0c 	.word	0x0800ac0c
 800ab98:	0800ac10 	.word	0x0800ac10

0800ab9c <_init>:
 800ab9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab9e:	bf00      	nop
 800aba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aba2:	bc08      	pop	{r3}
 800aba4:	469e      	mov	lr, r3
 800aba6:	4770      	bx	lr

0800aba8 <_fini>:
 800aba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abaa:	bf00      	nop
 800abac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abae:	bc08      	pop	{r3}
 800abb0:	469e      	mov	lr, r3
 800abb2:	4770      	bx	lr
