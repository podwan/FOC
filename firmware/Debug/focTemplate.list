
focTemplate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< HEAD
  1 .text         000124f4  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a8  080126d8  080126d8  000136d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012c80  08012c80  00014258  2**0
                  CONTENTS
  4 .ARM          00000008  08012c80  08012c80  00013c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012c88  08012c88  00014258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012c88  08012c88  00013c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012c8c  08012c8c  00013c8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000258  20000000  08012c90  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000870  20000258  08012ee8  00014258  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ac8  08012ee8  00014ac8  2**0
=======
  1 .text         000137d4  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a0  080139b8  080139b8  000149b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013f58  08013f58  00015258  2**0
                  CONTENTS
  4 .ARM          00000008  08013f58  08013f58  00014f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013f60  08013f60  00015258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013f60  08013f60  00014f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08013f64  08013f64  00014f64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000258  20000000  08013f68  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008e0  20000258  080141c0  00015258  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b38  080141c0  00015b38  2**0
>>>>>>> f88694781bd54d0bca96bec7ac145bdac62fa329
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00015258  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c0a3  00000000  00000000  00015288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006891  00000000  00000000  0004132b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002398  00000000  00000000  00047bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
<<<<<<< HEAD
 15 .debug_rnglists 00001872  00000000  00000000  000440e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029769  00000000  00000000  00045952  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002fea6  00000000  00000000  0006f0bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eeef4  00000000  00000000  0009ef61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018de55  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000099f0  00000000  00000000  0018de98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  00197888  2**0
=======
 15 .debug_rnglists 00001b2b  00000000  00000000  00049f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ac56  00000000  00000000  0004ba83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00036337  00000000  00000000  000766d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f208c  00000000  00000000  000aca10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0019ea9c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a8ac  00000000  00000000  0019eae0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  001a938c  2**0
>>>>>>> f88694781bd54d0bca96bec7ac145bdac62fa329
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000258 	.word	0x20000258
 80001fc:	00000000 	.word	0x00000000
<<<<<<< HEAD
 8000200:	080126bc 	.word	0x080126bc
=======
 8000200:	0801399c 	.word	0x0801399c
>>>>>>> f88694781bd54d0bca96bec7ac145bdac62fa329

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000025c 	.word	0x2000025c
<<<<<<< HEAD
 800021c:	080126bc 	.word	0x080126bc
=======
 800021c:	0801399c 	.word	0x0801399c
>>>>>>> f88694781bd54d0bca96bec7ac145bdac62fa329

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b09a      	sub	sp, #104	@ 0x68
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800103a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001046:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800104a:	2220      	movs	r2, #32
 800104c:	2100      	movs	r1, #0
 800104e:	4618      	mov	r0, r3
<<<<<<< HEAD
 8001050:	f00e fc2e 	bl	800f8b0 <memset>
=======
 8001050:	f00f fd9e 	bl	8010b90 <memset>
>>>>>>> f88694781bd54d0bca96bec7ac145bdac62fa329
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001054:	463b      	mov	r3, r7
 8001056:	223c      	movs	r2, #60	@ 0x3c
 8001058:	2100      	movs	r1, #0
 800105a:	4618      	mov	r0, r3
<<<<<<< HEAD
 800105c:	f00e fc28 	bl	800f8b0 <memset>
=======
 800105c:	f00f fd98 	bl	8010b90 <memset>
>>>>>>> f88694781bd54d0bca96bec7ac145bdac62fa329

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001060:	4b4d      	ldr	r3, [pc, #308]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001062:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001066:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8001068:	4b4b      	ldr	r3, [pc, #300]	@ (8001198 <MX_ADC1_Init+0x164>)
 800106a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800106e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001070:	4b49      	ldr	r3, [pc, #292]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001076:	4b48      	ldr	r3, [pc, #288]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001078:	2200      	movs	r2, #0
 800107a:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800107c:	4b46      	ldr	r3, [pc, #280]	@ (8001198 <MX_ADC1_Init+0x164>)
 800107e:	2200      	movs	r2, #0
 8001080:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001082:	4b45      	ldr	r3, [pc, #276]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001084:	2201      	movs	r2, #1
 8001086:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001088:	4b43      	ldr	r3, [pc, #268]	@ (8001198 <MX_ADC1_Init+0x164>)
 800108a:	2204      	movs	r2, #4
 800108c:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800108e:	4b42      	ldr	r3, [pc, #264]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001090:	2200      	movs	r2, #0
 8001092:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001094:	4b40      	ldr	r3, [pc, #256]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001096:	2200      	movs	r2, #0
 8001098:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800109a:	4b3f      	ldr	r3, [pc, #252]	@ (8001198 <MX_ADC1_Init+0x164>)
 800109c:	2201      	movs	r2, #1
 800109e:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010a0:	4b3d      	ldr	r3, [pc, #244]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010a8:	4b3b      	ldr	r3, [pc, #236]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010ae:	4b3a      	ldr	r3, [pc, #232]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010b4:	4b38      	ldr	r3, [pc, #224]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010bc:	4b36      	ldr	r3, [pc, #216]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010be:	2200      	movs	r2, #0
 80010c0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80010c2:	4b35      	ldr	r3, [pc, #212]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010ca:	4833      	ldr	r0, [pc, #204]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010cc:	f001 fe5a 	bl	8002d84 <HAL_ADC_Init>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80010d6:	f000 fd56 	bl	8001b86 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010da:	2300      	movs	r3, #0
 80010dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010de:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80010e2:	4619      	mov	r1, r3
 80010e4:	482c      	ldr	r0, [pc, #176]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010e6:	f004 f84d 	bl	8005184 <HAL_ADCEx_MultiModeConfigChannel>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 80010f0:	f000 fd49 	bl	8001b86 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80010f4:	4b29      	ldr	r3, [pc, #164]	@ (800119c <MX_ADC1_Init+0x168>)
 80010f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010f8:	2306      	movs	r3, #6
 80010fa:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010fc:	2300      	movs	r3, #0
 80010fe:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001100:	237f      	movs	r3, #127	@ 0x7f
 8001102:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001104:	2304      	movs	r3, #4
 8001106:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfig.Offset = 0;
 8001108:	2300      	movs	r3, #0
 800110a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800110c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001110:	4619      	mov	r1, r3
 8001112:	4821      	ldr	r0, [pc, #132]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001114:	f002 fabc 	bl	8003690 <HAL_ADC_ConfigChannel>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 800111e:	f000 fd32 	bl	8001b86 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8001122:	4b1f      	ldr	r3, [pc, #124]	@ (80011a0 <MX_ADC1_Init+0x16c>)
 8001124:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8001126:	2309      	movs	r3, #9
 8001128:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 800112a:	2301      	movs	r3, #1
 800112c:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 800112e:	237f      	movs	r3, #127	@ 0x7f
 8001130:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8001132:	2304      	movs	r3, #4
 8001134:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffset = 0;
 8001136:	2300      	movs	r3, #0
 8001138:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedNbrOfConversion = 2;
 800113a:	2302      	movs	r3, #2
 800113c:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800113e:	2300      	movs	r3, #0
 8001140:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 8001144:	2300      	movs	r3, #0
 8001146:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  sConfigInjected.QueueInjectedContext = DISABLE;
 800114a:	2300      	movs	r3, #0
 800114c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 8001150:	2384      	movs	r3, #132	@ 0x84
 8001152:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8001154:	2380      	movs	r3, #128	@ 0x80
 8001156:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8001158:	2300      	movs	r3, #0
 800115a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800115e:	463b      	mov	r3, r7
 8001160:	4619      	mov	r1, r3
 8001162:	480d      	ldr	r0, [pc, #52]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001164:	f003 fb2e 	bl	80047c4 <HAL_ADCEx_InjectedConfigChannel>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_ADC1_Init+0x13e>
  {
    Error_Handler();
 800116e:	f000 fd0a 	bl	8001b86 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_12;
 8001172:	4b0c      	ldr	r3, [pc, #48]	@ (80011a4 <MX_ADC1_Init+0x170>)
 8001174:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8001176:	f240 130f 	movw	r3, #271	@ 0x10f
 800117a:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800117c:	463b      	mov	r3, r7
 800117e:	4619      	mov	r1, r3
 8001180:	4805      	ldr	r0, [pc, #20]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001182:	f003 fb1f 	bl	80047c4 <HAL_ADCEx_InjectedConfigChannel>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_ADC1_Init+0x15c>
  {
    Error_Handler();
 800118c:	f000 fcfb 	bl	8001b86 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001190:	bf00      	nop
 8001192:	3768      	adds	r7, #104	@ 0x68
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	20000274 	.word	0x20000274
 800119c:	2e300800 	.word	0x2e300800
 80011a0:	0c900008 	.word	0x0c900008
 80011a4:	32601000 	.word	0x32601000

080011a8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b098      	sub	sp, #96	@ 0x60
 80011ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80011ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011b2:	223c      	movs	r2, #60	@ 0x3c
 80011b4:	2100      	movs	r1, #0
 80011b6:	4618      	mov	r0, r3
<<<<<<< HEAD
 80011b8:	f00e fb7a 	bl	800f8b0 <memset>
=======
 80011b8:	f00f fcea 	bl	8010b90 <memset>
>>>>>>> f88694781bd54d0bca96bec7ac145bdac62fa329
  ADC_ChannelConfTypeDef sConfig = {0};
 80011bc:	1d3b      	adds	r3, r7, #4
 80011be:	2220      	movs	r2, #32
 80011c0:	2100      	movs	r1, #0
 80011c2:	4618      	mov	r0, r3
<<<<<<< HEAD
 80011c4:	f00e fb74 	bl	800f8b0 <memset>
=======
 80011c4:	f00f fce4 	bl	8010b90 <memset>
>>>>>>> f88694781bd54d0bca96bec7ac145bdac62fa329

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80011c8:	4b3f      	ldr	r3, [pc, #252]	@ (80012c8 <MX_ADC2_Init+0x120>)
 80011ca:	4a40      	ldr	r2, [pc, #256]	@ (80012cc <MX_ADC2_Init+0x124>)
 80011cc:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80011ce:	4b3e      	ldr	r3, [pc, #248]	@ (80012c8 <MX_ADC2_Init+0x120>)
 80011d0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80011d4:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80011d6:	4b3c      	ldr	r3, [pc, #240]	@ (80012c8 <MX_ADC2_Init+0x120>)
 80011d8:	2200      	movs	r2, #0
 80011da:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011dc:	4b3a      	ldr	r3, [pc, #232]	@ (80012c8 <MX_ADC2_Init+0x120>)
 80011de:	2200      	movs	r2, #0
 80011e0:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80011e2:	4b39      	ldr	r3, [pc, #228]	@ (80012c8 <MX_ADC2_Init+0x120>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011e8:	4b37      	ldr	r3, [pc, #220]	@ (80012c8 <MX_ADC2_Init+0x120>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011ee:	4b36      	ldr	r3, [pc, #216]	@ (80012c8 <MX_ADC2_Init+0x120>)
 80011f0:	2204      	movs	r2, #4
 80011f2:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80011f4:	4b34      	ldr	r3, [pc, #208]	@ (80012c8 <MX_ADC2_Init+0x120>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80011fa:	4b33      	ldr	r3, [pc, #204]	@ (80012c8 <MX_ADC2_Init+0x120>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8001200:	4b31      	ldr	r3, [pc, #196]	@ (80012c8 <MX_ADC2_Init+0x120>)
 8001202:	2201      	movs	r2, #1
 8001204:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001206:	4b30      	ldr	r3, [pc, #192]	@ (80012c8 <MX_ADC2_Init+0x120>)
 8001208:	2200      	movs	r2, #0
 800120a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800120e:	4b2e      	ldr	r3, [pc, #184]	@ (80012c8 <MX_ADC2_Init+0x120>)
 8001210:	2200      	movs	r2, #0
 8001212:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001214:	4b2c      	ldr	r3, [pc, #176]	@ (80012c8 <MX_ADC2_Init+0x120>)
 8001216:	2200      	movs	r2, #0
 8001218:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800121a:	4b2b      	ldr	r3, [pc, #172]	@ (80012c8 <MX_ADC2_Init+0x120>)
 800121c:	2200      	movs	r2, #0
 800121e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001222:	4b29      	ldr	r3, [pc, #164]	@ (80012c8 <MX_ADC2_Init+0x120>)
 8001224:	2200      	movs	r2, #0
 8001226:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001228:	4b27      	ldr	r3, [pc, #156]	@ (80012c8 <MX_ADC2_Init+0x120>)
 800122a:	2200      	movs	r2, #0
 800122c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001230:	4825      	ldr	r0, [pc, #148]	@ (80012c8 <MX_ADC2_Init+0x120>)
 8001232:	f001 fda7 	bl	8002d84 <HAL_ADC_Init>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_ADC2_Init+0x98>
  {
    Error_Handler();
 800123c:	f000 fca3 	bl	8001b86 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8001240:	4b23      	ldr	r3, [pc, #140]	@ (80012d0 <MX_ADC2_Init+0x128>)
 8001242:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8001244:	2309      	movs	r3, #9
 8001246:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8001248:	2301      	movs	r3, #1
 800124a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 800124c:	237f      	movs	r3, #127	@ 0x7f
 800124e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8001250:	2304      	movs	r3, #4
 8001252:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigInjected.InjectedOffset = 0;
 8001254:	2300      	movs	r3, #0
 8001256:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigInjected.InjectedNbrOfConversion = 1;
 8001258:	2301      	movs	r3, #1
 800125a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800125c:	2300      	movs	r3, #0
 800125e:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  sConfigInjected.AutoInjectedConv = DISABLE;
 8001262:	2300      	movs	r3, #0
 8001264:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  sConfigInjected.QueueInjectedContext = DISABLE;
 8001268:	2300      	movs	r3, #0
 800126a:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 800126e:	2384      	movs	r3, #132	@ 0x84
 8001270:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8001272:	2380      	movs	r3, #128	@ 0x80
 8001274:	653b      	str	r3, [r7, #80]	@ 0x50
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8001276:	2300      	movs	r3, #0
 8001278:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800127c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001280:	4619      	mov	r1, r3
 8001282:	4811      	ldr	r0, [pc, #68]	@ (80012c8 <MX_ADC2_Init+0x120>)
 8001284:	f003 fa9e 	bl	80047c4 <HAL_ADCEx_InjectedConfigChannel>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_ADC2_Init+0xea>
  {
    Error_Handler();
 800128e:	f000 fc7a 	bl	8001b86 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001292:	4b10      	ldr	r3, [pc, #64]	@ (80012d4 <MX_ADC2_Init+0x12c>)
 8001294:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001296:	2306      	movs	r3, #6
 8001298:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800129a:	2300      	movs	r3, #0
 800129c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800129e:	237f      	movs	r3, #127	@ 0x7f
 80012a0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012a2:	2304      	movs	r3, #4
 80012a4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80012a6:	2300      	movs	r3, #0
 80012a8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80012aa:	1d3b      	adds	r3, r7, #4
 80012ac:	4619      	mov	r1, r3
 80012ae:	4806      	ldr	r0, [pc, #24]	@ (80012c8 <MX_ADC2_Init+0x120>)
 80012b0:	f002 f9ee 	bl	8003690 <HAL_ADC_ConfigChannel>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_ADC2_Init+0x116>
  {
    Error_Handler();
 80012ba:	f000 fc64 	bl	8001b86 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80012be:	bf00      	nop
 80012c0:	3760      	adds	r7, #96	@ 0x60
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	200002e0 	.word	0x200002e0
 80012cc:	50000100 	.word	0x50000100
 80012d0:	0c900008 	.word	0x0c900008
 80012d4:	04300002 	.word	0x04300002

080012d8 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b09e      	sub	sp, #120	@ 0x78
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	60da      	str	r2, [r3, #12]
 80012ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012f0:	f107 0320 	add.w	r3, r7, #32
 80012f4:	2244      	movs	r2, #68	@ 0x44
 80012f6:	2100      	movs	r1, #0
 80012f8:	4618      	mov	r0, r3
<<<<<<< HEAD
 80012fa:	f00e fad9 	bl	800f8b0 <memset>
=======
 80012fa:	f00f fc49 	bl	8010b90 <memset>
>>>>>>> f88694781bd54d0bca96bec7ac145bdac62fa329
  if(adcHandle->Instance==ADC1)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001306:	d15f      	bne.n	80013c8 <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001308:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800130c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800130e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001312:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001314:	f107 0320 	add.w	r3, r7, #32
 8001318:	4618      	mov	r0, r3
 800131a:	f007 f929 	bl	8008570 <HAL_RCCEx_PeriphCLKConfig>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001324:	f000 fc2f 	bl	8001b86 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001328:	4b4f      	ldr	r3, [pc, #316]	@ (8001468 <HAL_ADC_MspInit+0x190>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	3301      	adds	r3, #1
 800132e:	4a4e      	ldr	r2, [pc, #312]	@ (8001468 <HAL_ADC_MspInit+0x190>)
 8001330:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001332:	4b4d      	ldr	r3, [pc, #308]	@ (8001468 <HAL_ADC_MspInit+0x190>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	2b01      	cmp	r3, #1
 8001338:	d10b      	bne.n	8001352 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800133a:	4b4c      	ldr	r3, [pc, #304]	@ (800146c <HAL_ADC_MspInit+0x194>)
 800133c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800133e:	4a4b      	ldr	r2, [pc, #300]	@ (800146c <HAL_ADC_MspInit+0x194>)
 8001340:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001344:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001346:	4b49      	ldr	r3, [pc, #292]	@ (800146c <HAL_ADC_MspInit+0x194>)
 8001348:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800134a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800134e:	61fb      	str	r3, [r7, #28]
 8001350:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001352:	4b46      	ldr	r3, [pc, #280]	@ (800146c <HAL_ADC_MspInit+0x194>)
 8001354:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001356:	4a45      	ldr	r2, [pc, #276]	@ (800146c <HAL_ADC_MspInit+0x194>)
 8001358:	f043 0301 	orr.w	r3, r3, #1
 800135c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800135e:	4b43      	ldr	r3, [pc, #268]	@ (800146c <HAL_ADC_MspInit+0x194>)
 8001360:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	61bb      	str	r3, [r7, #24]
 8001368:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800136a:	4b40      	ldr	r3, [pc, #256]	@ (800146c <HAL_ADC_MspInit+0x194>)
 800136c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800136e:	4a3f      	ldr	r2, [pc, #252]	@ (800146c <HAL_ADC_MspInit+0x194>)
 8001370:	f043 0302 	orr.w	r3, r3, #2
 8001374:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001376:	4b3d      	ldr	r3, [pc, #244]	@ (800146c <HAL_ADC_MspInit+0x194>)
 8001378:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800137a:	f003 0302 	and.w	r3, r3, #2
 800137e:	617b      	str	r3, [r7, #20]
 8001380:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN3
    PB1     ------> ADC1_IN12
    PB12     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001382:	2304      	movs	r3, #4
 8001384:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001386:	2303      	movs	r3, #3
 8001388:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138a:	2300      	movs	r3, #0
 800138c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800138e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001392:	4619      	mov	r1, r3
 8001394:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001398:	f005 f944 	bl	8006624 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_12;
 800139c:	f241 0302 	movw	r3, #4098	@ 0x1002
 80013a0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013a2:	2303      	movs	r3, #3
 80013a4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	2300      	movs	r3, #0
 80013a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013aa:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80013ae:	4619      	mov	r1, r3
 80013b0:	482f      	ldr	r0, [pc, #188]	@ (8001470 <HAL_ADC_MspInit+0x198>)
 80013b2:	f005 f937 	bl	8006624 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80013b6:	2200      	movs	r2, #0
 80013b8:	2100      	movs	r1, #0
 80013ba:	2012      	movs	r0, #18
 80013bc:	f004 fa41 	bl	8005842 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80013c0:	2012      	movs	r0, #18
 80013c2:	f004 fa58 	bl	8005876 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80013c6:	e04a      	b.n	800145e <HAL_ADC_MspInit+0x186>
  else if(adcHandle->Instance==ADC2)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a29      	ldr	r2, [pc, #164]	@ (8001474 <HAL_ADC_MspInit+0x19c>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d145      	bne.n	800145e <HAL_ADC_MspInit+0x186>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80013d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80013d6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80013d8:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80013dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013de:	f107 0320 	add.w	r3, r7, #32
 80013e2:	4618      	mov	r0, r3
 80013e4:	f007 f8c4 	bl	8008570 <HAL_RCCEx_PeriphCLKConfig>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <HAL_ADC_MspInit+0x11a>
      Error_Handler();
 80013ee:	f000 fbca 	bl	8001b86 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80013f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001468 <HAL_ADC_MspInit+0x190>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	3301      	adds	r3, #1
 80013f8:	4a1b      	ldr	r2, [pc, #108]	@ (8001468 <HAL_ADC_MspInit+0x190>)
 80013fa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80013fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001468 <HAL_ADC_MspInit+0x190>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2b01      	cmp	r3, #1
 8001402:	d10b      	bne.n	800141c <HAL_ADC_MspInit+0x144>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001404:	4b19      	ldr	r3, [pc, #100]	@ (800146c <HAL_ADC_MspInit+0x194>)
 8001406:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001408:	4a18      	ldr	r2, [pc, #96]	@ (800146c <HAL_ADC_MspInit+0x194>)
 800140a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800140e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001410:	4b16      	ldr	r3, [pc, #88]	@ (800146c <HAL_ADC_MspInit+0x194>)
 8001412:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001414:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001418:	613b      	str	r3, [r7, #16]
 800141a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800141c:	4b13      	ldr	r3, [pc, #76]	@ (800146c <HAL_ADC_MspInit+0x194>)
 800141e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001420:	4a12      	ldr	r2, [pc, #72]	@ (800146c <HAL_ADC_MspInit+0x194>)
 8001422:	f043 0301 	orr.w	r3, r3, #1
 8001426:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001428:	4b10      	ldr	r3, [pc, #64]	@ (800146c <HAL_ADC_MspInit+0x194>)
 800142a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800142c:	f003 0301 	and.w	r3, r3, #1
 8001430:	60fb      	str	r3, [r7, #12]
 8001432:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6;
 8001434:	2341      	movs	r3, #65	@ 0x41
 8001436:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001438:	2303      	movs	r3, #3
 800143a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	2300      	movs	r3, #0
 800143e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001440:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001444:	4619      	mov	r1, r3
 8001446:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800144a:	f005 f8eb 	bl	8006624 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800144e:	2200      	movs	r2, #0
 8001450:	2100      	movs	r1, #0
 8001452:	2012      	movs	r0, #18
 8001454:	f004 f9f5 	bl	8005842 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001458:	2012      	movs	r0, #18
 800145a:	f004 fa0c 	bl	8005876 <HAL_NVIC_EnableIRQ>
}
 800145e:	bf00      	nop
 8001460:	3778      	adds	r7, #120	@ 0x78
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	2000034c 	.word	0x2000034c
 800146c:	40021000 	.word	0x40021000
 8001470:	48000400 	.word	0x48000400
 8001474:	50000100 	.word	0x50000100

08001478 <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 800147c:	4b0f      	ldr	r3, [pc, #60]	@ (80014bc <MX_COMP1_Init+0x44>)
 800147e:	4a10      	ldr	r2, [pc, #64]	@ (80014c0 <MX_COMP1_Init+0x48>)
 8001480:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO2;
 8001482:	4b0e      	ldr	r3, [pc, #56]	@ (80014bc <MX_COMP1_Init+0x44>)
 8001484:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001488:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH1;
 800148a:	4b0c      	ldr	r3, [pc, #48]	@ (80014bc <MX_COMP1_Init+0x44>)
 800148c:	2240      	movs	r2, #64	@ 0x40
 800148e:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8001490:	4b0a      	ldr	r3, [pc, #40]	@ (80014bc <MX_COMP1_Init+0x44>)
 8001492:	2200      	movs	r2, #0
 8001494:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8001496:	4b09      	ldr	r3, [pc, #36]	@ (80014bc <MX_COMP1_Init+0x44>)
 8001498:	2200      	movs	r2, #0
 800149a:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 800149c:	4b07      	ldr	r3, [pc, #28]	@ (80014bc <MX_COMP1_Init+0x44>)
 800149e:	2200      	movs	r2, #0
 80014a0:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING;
 80014a2:	4b06      	ldr	r3, [pc, #24]	@ (80014bc <MX_COMP1_Init+0x44>)
 80014a4:	2211      	movs	r2, #17
 80014a6:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 80014a8:	4804      	ldr	r0, [pc, #16]	@ (80014bc <MX_COMP1_Init+0x44>)
 80014aa:	f003 ffcd 	bl	8005448 <HAL_COMP_Init>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_COMP1_Init+0x40>
  {
    Error_Handler();
 80014b4:	f000 fb67 	bl	8001b86 <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 80014b8:	bf00      	nop
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	20000350 	.word	0x20000350
 80014c0:	40010200 	.word	0x40010200

080014c4 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b088      	sub	sp, #32
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014cc:	f107 030c 	add.w	r3, r7, #12
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	605a      	str	r2, [r3, #4]
 80014d6:	609a      	str	r2, [r3, #8]
 80014d8:	60da      	str	r2, [r3, #12]
 80014da:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a13      	ldr	r2, [pc, #76]	@ (8001530 <HAL_COMP_MspInit+0x6c>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d11f      	bne.n	8001526 <HAL_COMP_MspInit+0x62>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014e6:	4b13      	ldr	r3, [pc, #76]	@ (8001534 <HAL_COMP_MspInit+0x70>)
 80014e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ea:	4a12      	ldr	r2, [pc, #72]	@ (8001534 <HAL_COMP_MspInit+0x70>)
 80014ec:	f043 0302 	orr.w	r3, r3, #2
 80014f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014f2:	4b10      	ldr	r3, [pc, #64]	@ (8001534 <HAL_COMP_MspInit+0x70>)
 80014f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014f6:	f003 0302 	and.w	r3, r3, #2
 80014fa:	60bb      	str	r3, [r7, #8]
 80014fc:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration
    PB1     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80014fe:	2302      	movs	r3, #2
 8001500:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001502:	2303      	movs	r3, #3
 8001504:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001506:	2300      	movs	r3, #0
 8001508:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800150a:	f107 030c 	add.w	r3, r7, #12
 800150e:	4619      	mov	r1, r3
 8001510:	4809      	ldr	r0, [pc, #36]	@ (8001538 <HAL_COMP_MspInit+0x74>)
 8001512:	f005 f887 	bl	8006624 <HAL_GPIO_Init>

    /* COMP1 interrupt Init */
    HAL_NVIC_SetPriority(COMP1_2_3_IRQn, 1, 0);
 8001516:	2200      	movs	r2, #0
 8001518:	2101      	movs	r1, #1
 800151a:	2040      	movs	r0, #64	@ 0x40
 800151c:	f004 f991 	bl	8005842 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP1_2_3_IRQn);
 8001520:	2040      	movs	r0, #64	@ 0x40
 8001522:	f004 f9a8 	bl	8005876 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 8001526:	bf00      	nop
 8001528:	3720      	adds	r7, #32
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40010200 	.word	0x40010200
 8001534:	40021000 	.word	0x40021000
 8001538:	48000400 	.word	0x48000400

0800153c <MX_DAC3_Init>:

DAC_HandleTypeDef hdac3;

/* DAC3 init function */
void MX_DAC3_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b08c      	sub	sp, #48	@ 0x30
 8001540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC3_Init 0 */

  /* USER CODE END DAC3_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001542:	463b      	mov	r3, r7
 8001544:	2230      	movs	r2, #48	@ 0x30
 8001546:	2100      	movs	r1, #0
 8001548:	4618      	mov	r0, r3
<<<<<<< HEAD
 800154a:	f00e f9b1 	bl	800f8b0 <memset>
=======
 800154a:	f00f fb21 	bl	8010b90 <memset>
>>>>>>> f88694781bd54d0bca96bec7ac145bdac62fa329

  /* USER CODE END DAC3_Init 1 */

  /** DAC Initialization
  */
  hdac3.Instance = DAC3;
 800154e:	4b16      	ldr	r3, [pc, #88]	@ (80015a8 <MX_DAC3_Init+0x6c>)
 8001550:	4a16      	ldr	r2, [pc, #88]	@ (80015ac <MX_DAC3_Init+0x70>)
 8001552:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac3) != HAL_OK)
 8001554:	4814      	ldr	r0, [pc, #80]	@ (80015a8 <MX_DAC3_Init+0x6c>)
 8001556:	f004 f9a8 	bl	80058aa <HAL_DAC_Init>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_DAC3_Init+0x28>
  {
    Error_Handler();
 8001560:	f000 fb11 	bl	8001b86 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001564:	2302      	movs	r3, #2
 8001566:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001568:	2300      	movs	r3, #0
 800156a:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 800156c:	2300      	movs	r3, #0
 800156e:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001570:	2300      	movs	r3, #0
 8001572:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001574:	2300      	movs	r3, #0
 8001576:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001578:	2300      	movs	r3, #0
 800157a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 800157c:	2302      	movs	r3, #2
 800157e:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8001580:	2302      	movs	r3, #2
 8001582:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001584:	2300      	movs	r3, #0
 8001586:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001588:	463b      	mov	r3, r7
 800158a:	2200      	movs	r2, #0
 800158c:	4619      	mov	r1, r3
 800158e:	4806      	ldr	r0, [pc, #24]	@ (80015a8 <MX_DAC3_Init+0x6c>)
 8001590:	f004 f9ae 	bl	80058f0 <HAL_DAC_ConfigChannel>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_DAC3_Init+0x62>
  {
    Error_Handler();
 800159a:	f000 faf4 	bl	8001b86 <Error_Handler>
  }
  /* USER CODE BEGIN DAC3_Init 2 */

  /* USER CODE END DAC3_Init 2 */

}
 800159e:	bf00      	nop
 80015a0:	3730      	adds	r7, #48	@ 0x30
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	20000374 	.word	0x20000374
 80015ac:	50001000 	.word	0x50001000

080015b0 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]

  if(dacHandle->Instance==DAC3)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a0a      	ldr	r2, [pc, #40]	@ (80015e8 <HAL_DAC_MspInit+0x38>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d10b      	bne.n	80015da <HAL_DAC_MspInit+0x2a>
  {
  /* USER CODE BEGIN DAC3_MspInit 0 */

  /* USER CODE END DAC3_MspInit 0 */
    /* DAC3 clock enable */
    __HAL_RCC_DAC3_CLK_ENABLE();
 80015c2:	4b0a      	ldr	r3, [pc, #40]	@ (80015ec <HAL_DAC_MspInit+0x3c>)
 80015c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015c6:	4a09      	ldr	r2, [pc, #36]	@ (80015ec <HAL_DAC_MspInit+0x3c>)
 80015c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015ce:	4b07      	ldr	r3, [pc, #28]	@ (80015ec <HAL_DAC_MspInit+0x3c>)
 80015d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015d6:	60fb      	str	r3, [r7, #12]
 80015d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DAC3_MspInit 1 */

  /* USER CODE END DAC3_MspInit 1 */
  }
}
 80015da:	bf00      	nop
 80015dc:	3714      	adds	r7, #20
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	50001000 	.word	0x50001000
 80015ec:	40021000 	.word	0x40021000

080015f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80015f6:	4b16      	ldr	r3, [pc, #88]	@ (8001650 <MX_DMA_Init+0x60>)
 80015f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015fa:	4a15      	ldr	r2, [pc, #84]	@ (8001650 <MX_DMA_Init+0x60>)
 80015fc:	f043 0304 	orr.w	r3, r3, #4
 8001600:	6493      	str	r3, [r2, #72]	@ 0x48
 8001602:	4b13      	ldr	r3, [pc, #76]	@ (8001650 <MX_DMA_Init+0x60>)
 8001604:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001606:	f003 0304 	and.w	r3, r3, #4
 800160a:	607b      	str	r3, [r7, #4]
 800160c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800160e:	4b10      	ldr	r3, [pc, #64]	@ (8001650 <MX_DMA_Init+0x60>)
 8001610:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001612:	4a0f      	ldr	r2, [pc, #60]	@ (8001650 <MX_DMA_Init+0x60>)
 8001614:	f043 0301 	orr.w	r3, r3, #1
 8001618:	6493      	str	r3, [r2, #72]	@ 0x48
 800161a:	4b0d      	ldr	r3, [pc, #52]	@ (8001650 <MX_DMA_Init+0x60>)
 800161c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	603b      	str	r3, [r7, #0]
 8001624:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8001626:	2200      	movs	r2, #0
 8001628:	2101      	movs	r1, #1
 800162a:	200b      	movs	r0, #11
 800162c:	f004 f909 	bl	8005842 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001630:	200b      	movs	r0, #11
 8001632:	f004 f920 	bl	8005876 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 1, 0);
 8001636:	2200      	movs	r2, #0
 8001638:	2101      	movs	r1, #1
 800163a:	200c      	movs	r0, #12
 800163c:	f004 f901 	bl	8005842 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001640:	200c      	movs	r0, #12
 8001642:	f004 f918 	bl	8005876 <HAL_NVIC_EnableIRQ>

}
 8001646:	bf00      	nop
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	40021000 	.word	0x40021000

08001654 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001658:	4b1f      	ldr	r3, [pc, #124]	@ (80016d8 <MX_FDCAN1_Init+0x84>)
 800165a:	4a20      	ldr	r2, [pc, #128]	@ (80016dc <MX_FDCAN1_Init+0x88>)
 800165c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800165e:	4b1e      	ldr	r3, [pc, #120]	@ (80016d8 <MX_FDCAN1_Init+0x84>)
 8001660:	2200      	movs	r2, #0
 8001662:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001664:	4b1c      	ldr	r3, [pc, #112]	@ (80016d8 <MX_FDCAN1_Init+0x84>)
 8001666:	2200      	movs	r2, #0
 8001668:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800166a:	4b1b      	ldr	r3, [pc, #108]	@ (80016d8 <MX_FDCAN1_Init+0x84>)
 800166c:	2200      	movs	r2, #0
 800166e:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001670:	4b19      	ldr	r3, [pc, #100]	@ (80016d8 <MX_FDCAN1_Init+0x84>)
 8001672:	2200      	movs	r2, #0
 8001674:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001676:	4b18      	ldr	r3, [pc, #96]	@ (80016d8 <MX_FDCAN1_Init+0x84>)
 8001678:	2200      	movs	r2, #0
 800167a:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800167c:	4b16      	ldr	r3, [pc, #88]	@ (80016d8 <MX_FDCAN1_Init+0x84>)
 800167e:	2200      	movs	r2, #0
 8001680:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 20;
 8001682:	4b15      	ldr	r3, [pc, #84]	@ (80016d8 <MX_FDCAN1_Init+0x84>)
 8001684:	2214      	movs	r2, #20
 8001686:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001688:	4b13      	ldr	r3, [pc, #76]	@ (80016d8 <MX_FDCAN1_Init+0x84>)
 800168a:	2201      	movs	r2, #1
 800168c:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 10;
 800168e:	4b12      	ldr	r3, [pc, #72]	@ (80016d8 <MX_FDCAN1_Init+0x84>)
 8001690:	220a      	movs	r2, #10
 8001692:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 5;
 8001694:	4b10      	ldr	r3, [pc, #64]	@ (80016d8 <MX_FDCAN1_Init+0x84>)
 8001696:	2205      	movs	r2, #5
 8001698:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 20;
 800169a:	4b0f      	ldr	r3, [pc, #60]	@ (80016d8 <MX_FDCAN1_Init+0x84>)
 800169c:	2214      	movs	r2, #20
 800169e:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80016a0:	4b0d      	ldr	r3, [pc, #52]	@ (80016d8 <MX_FDCAN1_Init+0x84>)
 80016a2:	2201      	movs	r2, #1
 80016a4:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 10;
 80016a6:	4b0c      	ldr	r3, [pc, #48]	@ (80016d8 <MX_FDCAN1_Init+0x84>)
 80016a8:	220a      	movs	r2, #10
 80016aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 5;
 80016ac:	4b0a      	ldr	r3, [pc, #40]	@ (80016d8 <MX_FDCAN1_Init+0x84>)
 80016ae:	2205      	movs	r2, #5
 80016b0:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 80016b2:	4b09      	ldr	r3, [pc, #36]	@ (80016d8 <MX_FDCAN1_Init+0x84>)
 80016b4:	2201      	movs	r2, #1
 80016b6:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 1;
 80016b8:	4b07      	ldr	r3, [pc, #28]	@ (80016d8 <MX_FDCAN1_Init+0x84>)
 80016ba:	2201      	movs	r2, #1
 80016bc:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80016be:	4b06      	ldr	r3, [pc, #24]	@ (80016d8 <MX_FDCAN1_Init+0x84>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80016c4:	4804      	ldr	r0, [pc, #16]	@ (80016d8 <MX_FDCAN1_Init+0x84>)
 80016c6:	f004 fdfd 	bl	80062c4 <HAL_FDCAN_Init>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 80016d0:	f000 fa59 	bl	8001b86 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80016d4:	bf00      	nop
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	20000388 	.word	0x20000388
 80016dc:	40006400 	.word	0x40006400

080016e0 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b09a      	sub	sp, #104	@ 0x68
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	605a      	str	r2, [r3, #4]
 80016f2:	609a      	str	r2, [r3, #8]
 80016f4:	60da      	str	r2, [r3, #12]
 80016f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016f8:	f107 0310 	add.w	r3, r7, #16
 80016fc:	2244      	movs	r2, #68	@ 0x44
 80016fe:	2100      	movs	r1, #0
 8001700:	4618      	mov	r0, r3
<<<<<<< HEAD
 8001702:	f00e f8d5 	bl	800f8b0 <memset>
=======
 8001702:	f00f fa45 	bl	8010b90 <memset>
>>>>>>> f88694781bd54d0bca96bec7ac145bdac62fa329
  if(fdcanHandle->Instance==FDCAN1)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a20      	ldr	r2, [pc, #128]	@ (800178c <HAL_FDCAN_MspInit+0xac>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d139      	bne.n	8001784 <HAL_FDCAN_MspInit+0xa4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001710:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001714:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001716:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800171a:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800171c:	f107 0310 	add.w	r3, r7, #16
 8001720:	4618      	mov	r0, r3
 8001722:	f006 ff25 	bl	8008570 <HAL_RCCEx_PeriphCLKConfig>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 800172c:	f000 fa2b 	bl	8001b86 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001730:	4b17      	ldr	r3, [pc, #92]	@ (8001790 <HAL_FDCAN_MspInit+0xb0>)
 8001732:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001734:	4a16      	ldr	r2, [pc, #88]	@ (8001790 <HAL_FDCAN_MspInit+0xb0>)
 8001736:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800173a:	6593      	str	r3, [r2, #88]	@ 0x58
 800173c:	4b14      	ldr	r3, [pc, #80]	@ (8001790 <HAL_FDCAN_MspInit+0xb0>)
 800173e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001740:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001744:	60fb      	str	r3, [r7, #12]
 8001746:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001748:	4b11      	ldr	r3, [pc, #68]	@ (8001790 <HAL_FDCAN_MspInit+0xb0>)
 800174a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800174c:	4a10      	ldr	r2, [pc, #64]	@ (8001790 <HAL_FDCAN_MspInit+0xb0>)
 800174e:	f043 0301 	orr.w	r3, r3, #1
 8001752:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001754:	4b0e      	ldr	r3, [pc, #56]	@ (8001790 <HAL_FDCAN_MspInit+0xb0>)
 8001756:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001758:	f003 0301 	and.w	r3, r3, #1
 800175c:	60bb      	str	r3, [r7, #8]
 800175e:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001760:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001764:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001766:	2302      	movs	r3, #2
 8001768:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176a:	2300      	movs	r3, #0
 800176c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176e:	2300      	movs	r3, #0
 8001770:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001772:	2309      	movs	r3, #9
 8001774:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001776:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800177a:	4619      	mov	r1, r3
 800177c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001780:	f004 ff50 	bl	8006624 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8001784:	bf00      	nop
 8001786:	3768      	adds	r7, #104	@ 0x68
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	40006400 	.word	0x40006400
 8001790:	40021000 	.word	0x40021000

08001794 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b08a      	sub	sp, #40	@ 0x28
 8001798:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800179a:	f107 0314 	add.w	r3, r7, #20
 800179e:	2200      	movs	r2, #0
 80017a0:	601a      	str	r2, [r3, #0]
 80017a2:	605a      	str	r2, [r3, #4]
 80017a4:	609a      	str	r2, [r3, #8]
 80017a6:	60da      	str	r2, [r3, #12]
 80017a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017aa:	4b34      	ldr	r3, [pc, #208]	@ (800187c <MX_GPIO_Init+0xe8>)
 80017ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ae:	4a33      	ldr	r2, [pc, #204]	@ (800187c <MX_GPIO_Init+0xe8>)
 80017b0:	f043 0304 	orr.w	r3, r3, #4
 80017b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017b6:	4b31      	ldr	r3, [pc, #196]	@ (800187c <MX_GPIO_Init+0xe8>)
 80017b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ba:	f003 0304 	and.w	r3, r3, #4
 80017be:	613b      	str	r3, [r7, #16]
 80017c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80017c2:	4b2e      	ldr	r3, [pc, #184]	@ (800187c <MX_GPIO_Init+0xe8>)
 80017c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017c6:	4a2d      	ldr	r2, [pc, #180]	@ (800187c <MX_GPIO_Init+0xe8>)
 80017c8:	f043 0320 	orr.w	r3, r3, #32
 80017cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017ce:	4b2b      	ldr	r3, [pc, #172]	@ (800187c <MX_GPIO_Init+0xe8>)
 80017d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017d2:	f003 0320 	and.w	r3, r3, #32
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017da:	4b28      	ldr	r3, [pc, #160]	@ (800187c <MX_GPIO_Init+0xe8>)
 80017dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017de:	4a27      	ldr	r2, [pc, #156]	@ (800187c <MX_GPIO_Init+0xe8>)
 80017e0:	f043 0301 	orr.w	r3, r3, #1
 80017e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017e6:	4b25      	ldr	r3, [pc, #148]	@ (800187c <MX_GPIO_Init+0xe8>)
 80017e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	60bb      	str	r3, [r7, #8]
 80017f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017f2:	4b22      	ldr	r3, [pc, #136]	@ (800187c <MX_GPIO_Init+0xe8>)
 80017f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017f6:	4a21      	ldr	r2, [pc, #132]	@ (800187c <MX_GPIO_Init+0xe8>)
 80017f8:	f043 0302 	orr.w	r3, r3, #2
 80017fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017fe:	4b1f      	ldr	r3, [pc, #124]	@ (800187c <MX_GPIO_Init+0xe8>)
 8001800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	607b      	str	r3, [r7, #4]
 8001808:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 800180a:	2201      	movs	r2, #1
 800180c:	2110      	movs	r1, #16
 800180e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001812:	f005 f8a1 	bl	8006958 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 8001816:	2200      	movs	r2, #0
 8001818:	2150      	movs	r1, #80	@ 0x50
 800181a:	4819      	ldr	r0, [pc, #100]	@ (8001880 <MX_GPIO_Init+0xec>)
 800181c:	f005 f89c 	bl	8006958 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_10|GPIO_PIN_11;
 8001820:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8001824:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001826:	2300      	movs	r3, #0
 8001828:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182a:	2300      	movs	r3, #0
 800182c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800182e:	f107 0314 	add.w	r3, r7, #20
 8001832:	4619      	mov	r1, r3
 8001834:	4812      	ldr	r0, [pc, #72]	@ (8001880 <MX_GPIO_Init+0xec>)
 8001836:	f004 fef5 	bl	8006624 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 800183a:	2310      	movs	r3, #16
 800183c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800183e:	2301      	movs	r3, #1
 8001840:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001842:	2300      	movs	r3, #0
 8001844:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001846:	2303      	movs	r3, #3
 8001848:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 800184a:	f107 0314 	add.w	r3, r7, #20
 800184e:	4619      	mov	r1, r3
 8001850:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001854:	f004 fee6 	bl	8006624 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin;
 8001858:	2350      	movs	r3, #80	@ 0x50
 800185a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800185c:	2301      	movs	r3, #1
 800185e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001860:	2300      	movs	r3, #0
 8001862:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001864:	2300      	movs	r3, #0
 8001866:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001868:	f107 0314 	add.w	r3, r7, #20
 800186c:	4619      	mov	r1, r3
 800186e:	4804      	ldr	r0, [pc, #16]	@ (8001880 <MX_GPIO_Init+0xec>)
 8001870:	f004 fed8 	bl	8006624 <HAL_GPIO_Init>

}
 8001874:	bf00      	nop
 8001876:	3728      	adds	r7, #40	@ 0x28
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	40021000 	.word	0x40021000
 8001880:	48000800 	.word	0x48000800

08001884 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001888:	4b1b      	ldr	r3, [pc, #108]	@ (80018f8 <MX_I2C1_Init+0x74>)
 800188a:	4a1c      	ldr	r2, [pc, #112]	@ (80018fc <MX_I2C1_Init+0x78>)
 800188c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30909DEC;
 800188e:	4b1a      	ldr	r3, [pc, #104]	@ (80018f8 <MX_I2C1_Init+0x74>)
 8001890:	4a1b      	ldr	r2, [pc, #108]	@ (8001900 <MX_I2C1_Init+0x7c>)
 8001892:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001894:	4b18      	ldr	r3, [pc, #96]	@ (80018f8 <MX_I2C1_Init+0x74>)
 8001896:	2200      	movs	r2, #0
 8001898:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800189a:	4b17      	ldr	r3, [pc, #92]	@ (80018f8 <MX_I2C1_Init+0x74>)
 800189c:	2201      	movs	r2, #1
 800189e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018a0:	4b15      	ldr	r3, [pc, #84]	@ (80018f8 <MX_I2C1_Init+0x74>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80018a6:	4b14      	ldr	r3, [pc, #80]	@ (80018f8 <MX_I2C1_Init+0x74>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80018ac:	4b12      	ldr	r3, [pc, #72]	@ (80018f8 <MX_I2C1_Init+0x74>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018b2:	4b11      	ldr	r3, [pc, #68]	@ (80018f8 <MX_I2C1_Init+0x74>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018b8:	4b0f      	ldr	r3, [pc, #60]	@ (80018f8 <MX_I2C1_Init+0x74>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018be:	480e      	ldr	r0, [pc, #56]	@ (80018f8 <MX_I2C1_Init+0x74>)
 80018c0:	f005 f862 	bl	8006988 <HAL_I2C_Init>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80018ca:	f000 f95c 	bl	8001b86 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80018ce:	2100      	movs	r1, #0
 80018d0:	4809      	ldr	r0, [pc, #36]	@ (80018f8 <MX_I2C1_Init+0x74>)
 80018d2:	f005 fed1 	bl	8007678 <HAL_I2CEx_ConfigAnalogFilter>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80018dc:	f000 f953 	bl	8001b86 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80018e0:	2100      	movs	r1, #0
 80018e2:	4805      	ldr	r0, [pc, #20]	@ (80018f8 <MX_I2C1_Init+0x74>)
 80018e4:	f005 ff13 	bl	800770e <HAL_I2CEx_ConfigDigitalFilter>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80018ee:	f000 f94a 	bl	8001b86 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018f2:	bf00      	nop
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	200003ec 	.word	0x200003ec
 80018fc:	40005400 	.word	0x40005400
 8001900:	30909dec 	.word	0x30909dec

08001904 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b09c      	sub	sp, #112	@ 0x70
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800190c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001910:	2200      	movs	r2, #0
 8001912:	601a      	str	r2, [r3, #0]
 8001914:	605a      	str	r2, [r3, #4]
 8001916:	609a      	str	r2, [r3, #8]
 8001918:	60da      	str	r2, [r3, #12]
 800191a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800191c:	f107 0318 	add.w	r3, r7, #24
 8001920:	2244      	movs	r2, #68	@ 0x44
 8001922:	2100      	movs	r1, #0
 8001924:	4618      	mov	r0, r3
 8001926:	f00f f933 	bl	8010b90 <memset>
  if(i2cHandle->Instance==I2C1)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a2e      	ldr	r2, [pc, #184]	@ (80019e8 <HAL_I2C_MspInit+0xe4>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d154      	bne.n	80019de <HAL_I2C_MspInit+0xda>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001934:	2340      	movs	r3, #64	@ 0x40
 8001936:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001938:	2300      	movs	r3, #0
 800193a:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800193c:	f107 0318 	add.w	r3, r7, #24
 8001940:	4618      	mov	r0, r3
 8001942:	f006 fe15 	bl	8008570 <HAL_RCCEx_PeriphCLKConfig>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800194c:	f000 f91b 	bl	8001b86 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001950:	4b26      	ldr	r3, [pc, #152]	@ (80019ec <HAL_I2C_MspInit+0xe8>)
 8001952:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001954:	4a25      	ldr	r2, [pc, #148]	@ (80019ec <HAL_I2C_MspInit+0xe8>)
 8001956:	f043 0301 	orr.w	r3, r3, #1
 800195a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800195c:	4b23      	ldr	r3, [pc, #140]	@ (80019ec <HAL_I2C_MspInit+0xe8>)
 800195e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001960:	f003 0301 	and.w	r3, r3, #1
 8001964:	617b      	str	r3, [r7, #20]
 8001966:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001968:	4b20      	ldr	r3, [pc, #128]	@ (80019ec <HAL_I2C_MspInit+0xe8>)
 800196a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800196c:	4a1f      	ldr	r2, [pc, #124]	@ (80019ec <HAL_I2C_MspInit+0xe8>)
 800196e:	f043 0302 	orr.w	r3, r3, #2
 8001972:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001974:	4b1d      	ldr	r3, [pc, #116]	@ (80019ec <HAL_I2C_MspInit+0xe8>)
 8001976:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001978:	f003 0302 	and.w	r3, r3, #2
 800197c:	613b      	str	r3, [r7, #16]
 800197e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001980:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001984:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001986:	2312      	movs	r3, #18
 8001988:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198a:	2300      	movs	r3, #0
 800198c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198e:	2300      	movs	r3, #0
 8001990:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001992:	2304      	movs	r3, #4
 8001994:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001996:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800199a:	4619      	mov	r1, r3
 800199c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019a0:	f004 fe40 	bl	8006624 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80019a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80019a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019aa:	2312      	movs	r3, #18
 80019ac:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ae:	2300      	movs	r3, #0
 80019b0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b2:	2300      	movs	r3, #0
 80019b4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019b6:	2304      	movs	r3, #4
 80019b8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ba:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80019be:	4619      	mov	r1, r3
 80019c0:	480b      	ldr	r0, [pc, #44]	@ (80019f0 <HAL_I2C_MspInit+0xec>)
 80019c2:	f004 fe2f 	bl	8006624 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019c6:	4b09      	ldr	r3, [pc, #36]	@ (80019ec <HAL_I2C_MspInit+0xe8>)
 80019c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019ca:	4a08      	ldr	r2, [pc, #32]	@ (80019ec <HAL_I2C_MspInit+0xe8>)
 80019cc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80019d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80019d2:	4b06      	ldr	r3, [pc, #24]	@ (80019ec <HAL_I2C_MspInit+0xe8>)
 80019d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019da:	60fb      	str	r3, [r7, #12]
 80019dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80019de:	bf00      	nop
 80019e0:	3770      	adds	r7, #112	@ 0x70
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40005400 	.word	0x40005400
 80019ec:	40021000 	.word	0x40021000
 80019f0:	48000400 	.word	0x48000400

080019f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019f8:	f000 feed 	bl	80027d6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019fc:	f000 f87a 	bl	8001af4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a00:	f7ff fec8 	bl	8001794 <MX_GPIO_Init>
  MX_DMA_Init();
 8001a04:	f7ff fdf4 	bl	80015f0 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8001a08:	f000 fdb2 	bl	8002570 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8001a0c:	f7ff fb12 	bl	8001034 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001a10:	f7ff fbca 	bl	80011a8 <MX_ADC2_Init>
  MX_OPAMP1_Init();
 8001a14:	f000 f8be 	bl	8001b94 <MX_OPAMP1_Init>
  MX_OPAMP2_Init();
 8001a18:	f000 f8e4 	bl	8001be4 <MX_OPAMP2_Init>
  MX_OPAMP3_Init();
 8001a1c:	f000 f90a 	bl	8001c34 <MX_OPAMP3_Init>
  MX_TIM1_Init();
 8001a20:	f000 fb8a 	bl	8002138 <MX_TIM1_Init>
  MX_COMP1_Init();
 8001a24:	f7ff fd28 	bl	8001478 <MX_COMP1_Init>
  MX_DAC3_Init();
 8001a28:	f7ff fd88 	bl	800153c <MX_DAC3_Init>
  MX_FDCAN1_Init();
 8001a2c:	f7ff fe12 	bl	8001654 <MX_FDCAN1_Init>
  MX_TIM4_Init();
 8001a30:	f000 fc76 	bl	8002320 <MX_TIM4_Init>
  MX_SPI1_Init();
 8001a34:	f000 f99c 	bl	8001d70 <MX_SPI1_Init>
  MX_I2C1_Init();
 8001a38:	f7ff ff24 	bl	8001884 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  appInit();
 8001a3c:	f00c fa38 	bl	800deb0 <appInit>
  HAL_OPAMP_Start(&hopamp1);
 8001a40:	4824      	ldr	r0, [pc, #144]	@ (8001ad4 <main+0xe0>)
 8001a42:	f005 ff81 	bl	8007948 <HAL_OPAMP_Start>
  HAL_OPAMP_Start(&hopamp2);
 8001a46:	4824      	ldr	r0, [pc, #144]	@ (8001ad8 <main+0xe4>)
 8001a48:	f005 ff7e 	bl	8007948 <HAL_OPAMP_Start>
  HAL_OPAMP_Start(&hopamp3);
 8001a4c:	4823      	ldr	r0, [pc, #140]	@ (8001adc <main+0xe8>)
 8001a4e:	f005 ff7b 	bl	8007948 <HAL_OPAMP_Start>
  // HAL_UART_Receive_IT(&huart3, (uint8_t *)&aRxBuffer, 1);
  HAL_UARTEx_ReceiveToIdle_DMA(&huart3, rxBuffer, sizeof(rxBuffer));
 8001a52:	2264      	movs	r2, #100	@ 0x64
 8001a54:	4922      	ldr	r1, [pc, #136]	@ (8001ae0 <main+0xec>)
 8001a56:	4823      	ldr	r0, [pc, #140]	@ (8001ae4 <main+0xf0>)
 8001a58:	f00a fe0d 	bl	800c676 <HAL_UARTEx_ReceiveToIdle_DMA>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001a5c:	217f      	movs	r1, #127	@ 0x7f
 8001a5e:	4822      	ldr	r0, [pc, #136]	@ (8001ae8 <main+0xf4>)
 8001a60:	f002 fc90 	bl	8004384 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8001a64:	217f      	movs	r1, #127	@ 0x7f
 8001a66:	4821      	ldr	r0, [pc, #132]	@ (8001aec <main+0xf8>)
 8001a68:	f002 fc8c 	bl	8004384 <HAL_ADCEx_Calibration_Start>
  __HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_JEOC);
 8001a6c:	4b1e      	ldr	r3, [pc, #120]	@ (8001ae8 <main+0xf4>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2220      	movs	r2, #32
 8001a72:	601a      	str	r2, [r3, #0]
  __HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_EOC);
 8001a74:	4b1c      	ldr	r3, [pc, #112]	@ (8001ae8 <main+0xf4>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2204      	movs	r2, #4
 8001a7a:	601a      	str	r2, [r3, #0]
  __HAL_ADC_CLEAR_FLAG(&hadc2, ADC_FLAG_JEOC);
 8001a7c:	4b1b      	ldr	r3, [pc, #108]	@ (8001aec <main+0xf8>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2220      	movs	r2, #32
 8001a82:	601a      	str	r2, [r3, #0]
  HAL_ADCEx_InjectedStart_IT(&hadc1);
 8001a84:	4818      	ldr	r0, [pc, #96]	@ (8001ae8 <main+0xf4>)
 8001a86:	f002 fd8f 	bl	80045a8 <HAL_ADCEx_InjectedStart_IT>
  HAL_ADCEx_InjectedStart(&hadc2);
 8001a8a:	4818      	ldr	r0, [pc, #96]	@ (8001aec <main+0xf8>)
 8001a8c:	f002 fcdc 	bl	8004448 <HAL_ADCEx_InjectedStart>

  HAL_TIM_Base_Start(&htim1);
 8001a90:	4817      	ldr	r0, [pc, #92]	@ (8001af0 <main+0xfc>)
 8001a92:	f007 fbf5 	bl	8009280 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001a96:	210c      	movs	r1, #12
 8001a98:	4815      	ldr	r0, [pc, #84]	@ (8001af0 <main+0xfc>)
 8001a9a:	f007 fcb5 	bl	8009408 <HAL_TIM_PWM_Start>
  // HAL_DAC_Start(&hdac3, DAC_CHANNEL_1);
  // //  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
  // HAL_COMP_Start(&hcomp1);
  // HAL_TIMEx_HallSensor_Start_IT(&htim4);
  // FDCAN_Config();
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	4813      	ldr	r0, [pc, #76]	@ (8001af0 <main+0xfc>)
 8001aa2:	f007 fcb1 	bl	8009408 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001aa6:	2104      	movs	r1, #4
 8001aa8:	4811      	ldr	r0, [pc, #68]	@ (8001af0 <main+0xfc>)
 8001aaa:	f007 fcad 	bl	8009408 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001aae:	2108      	movs	r1, #8
 8001ab0:	480f      	ldr	r0, [pc, #60]	@ (8001af0 <main+0xfc>)
 8001ab2:	f007 fca9 	bl	8009408 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	480d      	ldr	r0, [pc, #52]	@ (8001af0 <main+0xfc>)
 8001aba:	f008 fdbd 	bl	800a638 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8001abe:	2104      	movs	r1, #4
 8001ac0:	480b      	ldr	r0, [pc, #44]	@ (8001af0 <main+0xfc>)
 8001ac2:	f008 fdb9 	bl	800a638 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8001ac6:	2108      	movs	r1, #8
 8001ac8:	4809      	ldr	r0, [pc, #36]	@ (8001af0 <main+0xfc>)
 8001aca:	f008 fdb5 	bl	800a638 <HAL_TIMEx_PWMN_Start>
    //    HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData);
    //    HAL_Delay(10);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    userMain();
<<<<<<< HEAD
 800196a:	f00c f88b 	bl	800da84 <userMain>
 800196e:	e7fc      	b.n	800196a <main+0xd6>
 8001970:	200003ec 	.word	0x200003ec
 8001974:	20000428 	.word	0x20000428
 8001978:	20000464 	.word	0x20000464
 800197c:	200008a4 	.word	0x200008a4
 8001980:	200005a0 	.word	0x200005a0
 8001984:	20000274 	.word	0x20000274
 8001988:	200002e0 	.word	0x200002e0
 800198c:	20000508 	.word	0x20000508
=======
 8001ace:	f00d f94b 	bl	800ed68 <userMain>
 8001ad2:	e7fc      	b.n	8001ace <main+0xda>
 8001ad4:	20000440 	.word	0x20000440
 8001ad8:	2000047c 	.word	0x2000047c
 8001adc:	200004b8 	.word	0x200004b8
 8001ae0:	200008f8 	.word	0x200008f8
 8001ae4:	200005f4 	.word	0x200005f4
 8001ae8:	20000274 	.word	0x20000274
 8001aec:	200002e0 	.word	0x200002e0
 8001af0:	2000055c 	.word	0x2000055c
>>>>>>> f88694781bd54d0bca96bec7ac145bdac62fa329

08001af4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b094      	sub	sp, #80	@ 0x50
 8001af8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
<<<<<<< HEAD
 8001996:	f107 0318 	add.w	r3, r7, #24
 800199a:	2238      	movs	r2, #56	@ 0x38
 800199c:	2100      	movs	r1, #0
 800199e:	4618      	mov	r0, r3
 80019a0:	f00d ff86 	bl	800f8b0 <memset>
=======
 8001afa:	f107 0318 	add.w	r3, r7, #24
 8001afe:	2238      	movs	r2, #56	@ 0x38
 8001b00:	2100      	movs	r1, #0
 8001b02:	4618      	mov	r0, r3
 8001b04:	f00f f844 	bl	8010b90 <memset>
>>>>>>> f88694781bd54d0bca96bec7ac145bdac62fa329
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b08:	1d3b      	adds	r3, r7, #4
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	601a      	str	r2, [r3, #0]
 8001b0e:	605a      	str	r2, [r3, #4]
 8001b10:	609a      	str	r2, [r3, #8]
 8001b12:	60da      	str	r2, [r3, #12]
 8001b14:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001b16:	2000      	movs	r0, #0
 8001b18:	f005 ff48 	bl	80079ac <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b20:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001b24:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b26:	2302      	movs	r3, #2
 8001b28:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV3;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001b32:	2328      	movs	r3, #40	@ 0x28
 8001b34:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b36:	2302      	movs	r3, #2
 8001b38:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001b3e:	2302      	movs	r3, #2
 8001b40:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b42:	f107 0318 	add.w	r3, r7, #24
 8001b46:	4618      	mov	r0, r3
 8001b48:	f005 ffe4 	bl	8007b14 <HAL_RCC_OscConfig>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8001b52:	f000 f818 	bl	8001b86 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b56:	230f      	movs	r3, #15
 8001b58:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b62:	2300      	movs	r3, #0
 8001b64:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b66:	2300      	movs	r3, #0
 8001b68:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001b6a:	1d3b      	adds	r3, r7, #4
 8001b6c:	2104      	movs	r1, #4
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f006 fae2 	bl	8008138 <HAL_RCC_ClockConfig>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001b7a:	f000 f804 	bl	8001b86 <Error_Handler>
  }
}
 8001b7e:	bf00      	nop
 8001b80:	3750      	adds	r7, #80	@ 0x50
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b86:	b480      	push	{r7}
 8001b88:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b8a:	b672      	cpsid	i
}
 8001b8c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b8e:	bf00      	nop
 8001b90:	e7fd      	b.n	8001b8e <Error_Handler+0x8>
	...

08001b94 <MX_OPAMP1_Init>:
OPAMP_HandleTypeDef hopamp2;
OPAMP_HandleTypeDef hopamp3;

/* OPAMP1 init function */
void MX_OPAMP1_Init(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8001b98:	4b10      	ldr	r3, [pc, #64]	@ (8001bdc <MX_OPAMP1_Init+0x48>)
 8001b9a:	4a11      	ldr	r2, [pc, #68]	@ (8001be0 <MX_OPAMP1_Init+0x4c>)
 8001b9c:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8001b9e:	4b0f      	ldr	r3, [pc, #60]	@ (8001bdc <MX_OPAMP1_Init+0x48>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_STANDALONE_MODE;
 8001ba4:	4b0d      	ldr	r3, [pc, #52]	@ (8001bdc <MX_OPAMP1_Init+0x48>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	609a      	str	r2, [r3, #8]
  hopamp1.Init.InvertingInput = OPAMP_INVERTINGINPUT_IO0;
 8001baa:	4b0c      	ldr	r3, [pc, #48]	@ (8001bdc <MX_OPAMP1_Init+0x48>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	60da      	str	r2, [r3, #12]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8001bb0:	4b0a      	ldr	r3, [pc, #40]	@ (8001bdc <MX_OPAMP1_Init+0x48>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = DISABLE;
 8001bb6:	4b09      	ldr	r3, [pc, #36]	@ (8001bdc <MX_OPAMP1_Init+0x48>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001bbc:	4b07      	ldr	r3, [pc, #28]	@ (8001bdc <MX_OPAMP1_Init+0x48>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	619a      	str	r2, [r3, #24]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001bc2:	4b06      	ldr	r3, [pc, #24]	@ (8001bdc <MX_OPAMP1_Init+0x48>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8001bc8:	4804      	ldr	r0, [pc, #16]	@ (8001bdc <MX_OPAMP1_Init+0x48>)
 8001bca:	f005 fded 	bl	80077a8 <HAL_OPAMP_Init>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <MX_OPAMP1_Init+0x44>
  {
    Error_Handler();
 8001bd4:	f7ff ffd7 	bl	8001b86 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 8001bd8:	bf00      	nop
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	20000440 	.word	0x20000440
 8001be0:	40010300 	.word	0x40010300

08001be4 <MX_OPAMP2_Init>:
/* OPAMP2 init function */
void MX_OPAMP2_Init(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP2_Init 0 */

  /* USER CODE BEGIN OPAMP2_Init 1 */

  /* USER CODE END OPAMP2_Init 1 */
  hopamp2.Instance = OPAMP2;
 8001be8:	4b10      	ldr	r3, [pc, #64]	@ (8001c2c <MX_OPAMP2_Init+0x48>)
 8001bea:	4a11      	ldr	r2, [pc, #68]	@ (8001c30 <MX_OPAMP2_Init+0x4c>)
 8001bec:	601a      	str	r2, [r3, #0]
  hopamp2.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8001bee:	4b0f      	ldr	r3, [pc, #60]	@ (8001c2c <MX_OPAMP2_Init+0x48>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	605a      	str	r2, [r3, #4]
  hopamp2.Init.Mode = OPAMP_STANDALONE_MODE;
 8001bf4:	4b0d      	ldr	r3, [pc, #52]	@ (8001c2c <MX_OPAMP2_Init+0x48>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	609a      	str	r2, [r3, #8]
  hopamp2.Init.InvertingInput = OPAMP_INVERTINGINPUT_IO0;
 8001bfa:	4b0c      	ldr	r3, [pc, #48]	@ (8001c2c <MX_OPAMP2_Init+0x48>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	60da      	str	r2, [r3, #12]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8001c00:	4b0a      	ldr	r3, [pc, #40]	@ (8001c2c <MX_OPAMP2_Init+0x48>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	611a      	str	r2, [r3, #16]
  hopamp2.Init.InternalOutput = DISABLE;
 8001c06:	4b09      	ldr	r3, [pc, #36]	@ (8001c2c <MX_OPAMP2_Init+0x48>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	751a      	strb	r2, [r3, #20]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001c0c:	4b07      	ldr	r3, [pc, #28]	@ (8001c2c <MX_OPAMP2_Init+0x48>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	619a      	str	r2, [r3, #24]
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001c12:	4b06      	ldr	r3, [pc, #24]	@ (8001c2c <MX_OPAMP2_Init+0x48>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 8001c18:	4804      	ldr	r0, [pc, #16]	@ (8001c2c <MX_OPAMP2_Init+0x48>)
 8001c1a:	f005 fdc5 	bl	80077a8 <HAL_OPAMP_Init>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <MX_OPAMP2_Init+0x44>
  {
    Error_Handler();
 8001c24:	f7ff ffaf 	bl	8001b86 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP2_Init 2 */

  /* USER CODE END OPAMP2_Init 2 */

}
 8001c28:	bf00      	nop
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	2000047c 	.word	0x2000047c
 8001c30:	40010304 	.word	0x40010304

08001c34 <MX_OPAMP3_Init>:
/* OPAMP3 init function */
void MX_OPAMP3_Init(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP3_Init 0 */

  /* USER CODE BEGIN OPAMP3_Init 1 */

  /* USER CODE END OPAMP3_Init 1 */
  hopamp3.Instance = OPAMP3;
 8001c38:	4b10      	ldr	r3, [pc, #64]	@ (8001c7c <MX_OPAMP3_Init+0x48>)
 8001c3a:	4a11      	ldr	r2, [pc, #68]	@ (8001c80 <MX_OPAMP3_Init+0x4c>)
 8001c3c:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8001c3e:	4b0f      	ldr	r3, [pc, #60]	@ (8001c7c <MX_OPAMP3_Init+0x48>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_STANDALONE_MODE;
 8001c44:	4b0d      	ldr	r3, [pc, #52]	@ (8001c7c <MX_OPAMP3_Init+0x48>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	609a      	str	r2, [r3, #8]
  hopamp3.Init.InvertingInput = OPAMP_INVERTINGINPUT_IO0;
 8001c4a:	4b0c      	ldr	r3, [pc, #48]	@ (8001c7c <MX_OPAMP3_Init+0x48>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	60da      	str	r2, [r3, #12]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8001c50:	4b0a      	ldr	r3, [pc, #40]	@ (8001c7c <MX_OPAMP3_Init+0x48>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = DISABLE;
 8001c56:	4b09      	ldr	r3, [pc, #36]	@ (8001c7c <MX_OPAMP3_Init+0x48>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001c5c:	4b07      	ldr	r3, [pc, #28]	@ (8001c7c <MX_OPAMP3_Init+0x48>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	619a      	str	r2, [r3, #24]
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001c62:	4b06      	ldr	r3, [pc, #24]	@ (8001c7c <MX_OPAMP3_Init+0x48>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 8001c68:	4804      	ldr	r0, [pc, #16]	@ (8001c7c <MX_OPAMP3_Init+0x48>)
 8001c6a:	f005 fd9d 	bl	80077a8 <HAL_OPAMP_Init>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <MX_OPAMP3_Init+0x44>
  {
    Error_Handler();
 8001c74:	f7ff ff87 	bl	8001b86 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP3_Init 2 */

  /* USER CODE END OPAMP3_Init 2 */

}
 8001c78:	bf00      	nop
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	200004b8 	.word	0x200004b8
 8001c80:	40010308 	.word	0x40010308

08001c84 <HAL_OPAMP_MspInit>:

void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* opampHandle)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b08a      	sub	sp, #40	@ 0x28
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c8c:	f107 0314 	add.w	r3, r7, #20
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]
 8001c94:	605a      	str	r2, [r3, #4]
 8001c96:	609a      	str	r2, [r3, #8]
 8001c98:	60da      	str	r2, [r3, #12]
 8001c9a:	611a      	str	r2, [r3, #16]
  if(opampHandle->Instance==OPAMP1)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a2e      	ldr	r2, [pc, #184]	@ (8001d5c <HAL_OPAMP_MspInit+0xd8>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d119      	bne.n	8001cda <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ca6:	4b2e      	ldr	r3, [pc, #184]	@ (8001d60 <HAL_OPAMP_MspInit+0xdc>)
 8001ca8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001caa:	4a2d      	ldr	r2, [pc, #180]	@ (8001d60 <HAL_OPAMP_MspInit+0xdc>)
 8001cac:	f043 0301 	orr.w	r3, r3, #1
 8001cb0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cb2:	4b2b      	ldr	r3, [pc, #172]	@ (8001d60 <HAL_OPAMP_MspInit+0xdc>)
 8001cb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cb6:	f003 0301 	and.w	r3, r3, #1
 8001cba:	613b      	str	r3, [r7, #16]
 8001cbc:	693b      	ldr	r3, [r7, #16]
    /**OPAMP1 GPIO Configuration
    PA1     ------> OPAMP1_VINP
    PA2     ------> OPAMP1_VOUT
    PA3     ------> OPAMP1_VINM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001cbe:	230e      	movs	r3, #14
 8001cc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cca:	f107 0314 	add.w	r3, r7, #20
 8001cce:	4619      	mov	r1, r3
 8001cd0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cd4:	f004 fca6 	bl	8006624 <HAL_GPIO_Init>

  /* USER CODE BEGIN OPAMP3_MspInit 1 */

  /* USER CODE END OPAMP3_MspInit 1 */
  }
}
 8001cd8:	e03b      	b.n	8001d52 <HAL_OPAMP_MspInit+0xce>
  else if(opampHandle->Instance==OPAMP2)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a21      	ldr	r2, [pc, #132]	@ (8001d64 <HAL_OPAMP_MspInit+0xe0>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d119      	bne.n	8001d18 <HAL_OPAMP_MspInit+0x94>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce4:	4b1e      	ldr	r3, [pc, #120]	@ (8001d60 <HAL_OPAMP_MspInit+0xdc>)
 8001ce6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ce8:	4a1d      	ldr	r2, [pc, #116]	@ (8001d60 <HAL_OPAMP_MspInit+0xdc>)
 8001cea:	f043 0301 	orr.w	r3, r3, #1
 8001cee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cf0:	4b1b      	ldr	r3, [pc, #108]	@ (8001d60 <HAL_OPAMP_MspInit+0xdc>)
 8001cf2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cf4:	f003 0301 	and.w	r3, r3, #1
 8001cf8:	60fb      	str	r3, [r7, #12]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001cfc:	23e0      	movs	r3, #224	@ 0xe0
 8001cfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d00:	2303      	movs	r3, #3
 8001d02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d04:	2300      	movs	r3, #0
 8001d06:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d08:	f107 0314 	add.w	r3, r7, #20
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d12:	f004 fc87 	bl	8006624 <HAL_GPIO_Init>
}
 8001d16:	e01c      	b.n	8001d52 <HAL_OPAMP_MspInit+0xce>
  else if(opampHandle->Instance==OPAMP3)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a12      	ldr	r2, [pc, #72]	@ (8001d68 <HAL_OPAMP_MspInit+0xe4>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d117      	bne.n	8001d52 <HAL_OPAMP_MspInit+0xce>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d22:	4b0f      	ldr	r3, [pc, #60]	@ (8001d60 <HAL_OPAMP_MspInit+0xdc>)
 8001d24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d26:	4a0e      	ldr	r2, [pc, #56]	@ (8001d60 <HAL_OPAMP_MspInit+0xdc>)
 8001d28:	f043 0302 	orr.w	r3, r3, #2
 8001d2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d2e:	4b0c      	ldr	r3, [pc, #48]	@ (8001d60 <HAL_OPAMP_MspInit+0xdc>)
 8001d30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	60bb      	str	r3, [r7, #8]
 8001d38:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001d3a:	2307      	movs	r3, #7
 8001d3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d42:	2300      	movs	r3, #0
 8001d44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d46:	f107 0314 	add.w	r3, r7, #20
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	4807      	ldr	r0, [pc, #28]	@ (8001d6c <HAL_OPAMP_MspInit+0xe8>)
 8001d4e:	f004 fc69 	bl	8006624 <HAL_GPIO_Init>
}
 8001d52:	bf00      	nop
 8001d54:	3728      	adds	r7, #40	@ 0x28
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	40010300 	.word	0x40010300
 8001d60:	40021000 	.word	0x40021000
 8001d64:	40010304 	.word	0x40010304
 8001d68:	40010308 	.word	0x40010308
 8001d6c:	48000400 	.word	0x48000400

08001d70 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001d74:	4b1b      	ldr	r3, [pc, #108]	@ (8001de4 <MX_SPI1_Init+0x74>)
 8001d76:	4a1c      	ldr	r2, [pc, #112]	@ (8001de8 <MX_SPI1_Init+0x78>)
 8001d78:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d7a:	4b1a      	ldr	r3, [pc, #104]	@ (8001de4 <MX_SPI1_Init+0x74>)
 8001d7c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001d80:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001d82:	4b18      	ldr	r3, [pc, #96]	@ (8001de4 <MX_SPI1_Init+0x74>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001d88:	4b16      	ldr	r3, [pc, #88]	@ (8001de4 <MX_SPI1_Init+0x74>)
 8001d8a:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 8001d8e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d90:	4b14      	ldr	r3, [pc, #80]	@ (8001de4 <MX_SPI1_Init+0x74>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001d96:	4b13      	ldr	r3, [pc, #76]	@ (8001de4 <MX_SPI1_Init+0x74>)
 8001d98:	2201      	movs	r2, #1
 8001d9a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d9c:	4b11      	ldr	r3, [pc, #68]	@ (8001de4 <MX_SPI1_Init+0x74>)
 8001d9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001da2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001da4:	4b0f      	ldr	r3, [pc, #60]	@ (8001de4 <MX_SPI1_Init+0x74>)
 8001da6:	2218      	movs	r2, #24
 8001da8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001daa:	4b0e      	ldr	r3, [pc, #56]	@ (8001de4 <MX_SPI1_Init+0x74>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001db0:	4b0c      	ldr	r3, [pc, #48]	@ (8001de4 <MX_SPI1_Init+0x74>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001db6:	4b0b      	ldr	r3, [pc, #44]	@ (8001de4 <MX_SPI1_Init+0x74>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001dbc:	4b09      	ldr	r3, [pc, #36]	@ (8001de4 <MX_SPI1_Init+0x74>)
 8001dbe:	2207      	movs	r2, #7
 8001dc0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001dc2:	4b08      	ldr	r3, [pc, #32]	@ (8001de4 <MX_SPI1_Init+0x74>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001dc8:	4b06      	ldr	r3, [pc, #24]	@ (8001de4 <MX_SPI1_Init+0x74>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001dce:	4805      	ldr	r0, [pc, #20]	@ (8001de4 <MX_SPI1_Init+0x74>)
 8001dd0:	f006 fdbe 	bl	8008950 <HAL_SPI_Init>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001dda:	f7ff fed4 	bl	8001b86 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001dde:	bf00      	nop
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	200004f4 	.word	0x200004f4
 8001de8:	40013000 	.word	0x40013000

08001dec <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b08a      	sub	sp, #40	@ 0x28
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df4:	f107 0314 	add.w	r3, r7, #20
 8001df8:	2200      	movs	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]
 8001dfc:	605a      	str	r2, [r3, #4]
 8001dfe:	609a      	str	r2, [r3, #8]
 8001e00:	60da      	str	r2, [r3, #12]
 8001e02:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a17      	ldr	r2, [pc, #92]	@ (8001e68 <HAL_SPI_MspInit+0x7c>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d127      	bne.n	8001e5e <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e0e:	4b17      	ldr	r3, [pc, #92]	@ (8001e6c <HAL_SPI_MspInit+0x80>)
 8001e10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e12:	4a16      	ldr	r2, [pc, #88]	@ (8001e6c <HAL_SPI_MspInit+0x80>)
 8001e14:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001e18:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e1a:	4b14      	ldr	r3, [pc, #80]	@ (8001e6c <HAL_SPI_MspInit+0x80>)
 8001e1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e1e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e22:	613b      	str	r3, [r7, #16]
 8001e24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e26:	4b11      	ldr	r3, [pc, #68]	@ (8001e6c <HAL_SPI_MspInit+0x80>)
 8001e28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e2a:	4a10      	ldr	r2, [pc, #64]	@ (8001e6c <HAL_SPI_MspInit+0x80>)
 8001e2c:	f043 0302 	orr.w	r3, r3, #2
 8001e30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e32:	4b0e      	ldr	r3, [pc, #56]	@ (8001e6c <HAL_SPI_MspInit+0x80>)
 8001e34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e36:	f003 0302 	and.w	r3, r3, #2
 8001e3a:	60fb      	str	r3, [r7, #12]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001e3e:	2338      	movs	r3, #56	@ 0x38
 8001e40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e42:	2302      	movs	r3, #2
 8001e44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e46:	2300      	movs	r3, #0
 8001e48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e4e:	2305      	movs	r3, #5
 8001e50:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e52:	f107 0314 	add.w	r3, r7, #20
 8001e56:	4619      	mov	r1, r3
 8001e58:	4805      	ldr	r0, [pc, #20]	@ (8001e70 <HAL_SPI_MspInit+0x84>)
 8001e5a:	f004 fbe3 	bl	8006624 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001e5e:	bf00      	nop
 8001e60:	3728      	adds	r7, #40	@ 0x28
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	40013000 	.word	0x40013000
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	48000400 	.word	0x48000400

08001e74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e7a:	4b0f      	ldr	r3, [pc, #60]	@ (8001eb8 <HAL_MspInit+0x44>)
 8001e7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e7e:	4a0e      	ldr	r2, [pc, #56]	@ (8001eb8 <HAL_MspInit+0x44>)
 8001e80:	f043 0301 	orr.w	r3, r3, #1
 8001e84:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e86:	4b0c      	ldr	r3, [pc, #48]	@ (8001eb8 <HAL_MspInit+0x44>)
 8001e88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	607b      	str	r3, [r7, #4]
 8001e90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e92:	4b09      	ldr	r3, [pc, #36]	@ (8001eb8 <HAL_MspInit+0x44>)
 8001e94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e96:	4a08      	ldr	r2, [pc, #32]	@ (8001eb8 <HAL_MspInit+0x44>)
 8001e98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e9c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e9e:	4b06      	ldr	r3, [pc, #24]	@ (8001eb8 <HAL_MspInit+0x44>)
 8001ea0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ea2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ea6:	603b      	str	r3, [r7, #0]
 8001ea8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001eaa:	f005 fe23 	bl	8007af4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001eae:	bf00      	nop
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	40021000 	.word	0x40021000

08001ebc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ec0:	bf00      	nop
 8001ec2:	e7fd      	b.n	8001ec0 <NMI_Handler+0x4>

08001ec4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ec8:	bf00      	nop
 8001eca:	e7fd      	b.n	8001ec8 <HardFault_Handler+0x4>

08001ecc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ed0:	bf00      	nop
 8001ed2:	e7fd      	b.n	8001ed0 <MemManage_Handler+0x4>

08001ed4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ed8:	bf00      	nop
 8001eda:	e7fd      	b.n	8001ed8 <BusFault_Handler+0x4>

08001edc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ee0:	bf00      	nop
 8001ee2:	e7fd      	b.n	8001ee0 <UsageFault_Handler+0x4>

08001ee4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ee8:	bf00      	nop
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr

08001ef2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ef6:	bf00      	nop
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f04:	bf00      	nop
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr

08001f0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f12:	f000 fcb3 	bl	800287c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f16:	bf00      	nop
 8001f18:	bd80      	pop	{r7, pc}
	...

08001f1c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001f20:	4802      	ldr	r0, [pc, #8]	@ (8001f2c <DMA1_Channel1_IRQHandler+0x10>)
 8001f22:	f004 f880 	bl	8006026 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001f26:	bf00      	nop
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	20000688 	.word	0x20000688

08001f30 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001f34:	4802      	ldr	r0, [pc, #8]	@ (8001f40 <DMA1_Channel2_IRQHandler+0x10>)
 8001f36:	f004 f876 	bl	8006026 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001f3a:	bf00      	nop
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	200006e8 	.word	0x200006e8

08001f44 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001f48:	4803      	ldr	r0, [pc, #12]	@ (8001f58 <ADC1_2_IRQHandler+0x14>)
 8001f4a:	f001 f969 	bl	8003220 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001f4e:	4803      	ldr	r0, [pc, #12]	@ (8001f5c <ADC1_2_IRQHandler+0x18>)
 8001f50:	f001 f966 	bl	8003220 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001f54:	bf00      	nop
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	20000274 	.word	0x20000274
 8001f5c:	200002e0 	.word	0x200002e0

08001f60 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001f64:	4802      	ldr	r0, [pc, #8]	@ (8001f70 <USART3_IRQHandler+0x10>)
 8001f66:	f008 ffe3 	bl	800af30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001f6a:	bf00      	nop
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	200005f4 	.word	0x200005f4

08001f74 <COMP1_2_3_IRQHandler>:

/**
  * @brief This function handles COMP1, COMP2 and COMP3 interrupts through EXTI lines 21, 22 and 29.
  */
void COMP1_2_3_IRQHandler(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP1_2_3_IRQn 0 */

  /* USER CODE END COMP1_2_3_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp1);
 8001f78:	4802      	ldr	r0, [pc, #8]	@ (8001f84 <COMP1_2_3_IRQHandler+0x10>)
 8001f7a:	f003 fb41 	bl	8005600 <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP1_2_3_IRQn 1 */

  /* USER CODE END COMP1_2_3_IRQn 1 */
}
 8001f7e:	bf00      	nop
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	20000350 	.word	0x20000350

08001f88 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  return 1;
 8001f8c:	2301      	movs	r3, #1
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr

08001f98 <_kill>:

int _kill(int pid, int sig)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
<<<<<<< HEAD
 8001e3e:	f00d fd9b 	bl	800f978 <__errno>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2216      	movs	r2, #22
 8001e46:	601a      	str	r2, [r3, #0]
=======
 8001fa2:	f00e fe59 	bl	8010c58 <__errno>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2216      	movs	r2, #22
 8001faa:	601a      	str	r2, [r3, #0]
>>>>>>> f88694781bd54d0bca96bec7ac145bdac62fa329
  return -1;
 8001fac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3708      	adds	r7, #8
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <_exit>:

void _exit (int status)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001fc0:	f04f 31ff 	mov.w	r1, #4294967295
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f7ff ffe7 	bl	8001f98 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001fca:	bf00      	nop
 8001fcc:	e7fd      	b.n	8001fca <_exit+0x12>

08001fce <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	b086      	sub	sp, #24
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	60f8      	str	r0, [r7, #12]
 8001fd6:	60b9      	str	r1, [r7, #8]
 8001fd8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fda:	2300      	movs	r3, #0
 8001fdc:	617b      	str	r3, [r7, #20]
 8001fde:	e00a      	b.n	8001ff6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001fe0:	f3af 8000 	nop.w
 8001fe4:	4601      	mov	r1, r0
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	1c5a      	adds	r2, r3, #1
 8001fea:	60ba      	str	r2, [r7, #8]
 8001fec:	b2ca      	uxtb	r2, r1
 8001fee:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	617b      	str	r3, [r7, #20]
 8001ff6:	697a      	ldr	r2, [r7, #20]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	dbf0      	blt.n	8001fe0 <_read+0x12>
  }

  return len;
 8001ffe:	687b      	ldr	r3, [r7, #4]
}
 8002000:	4618      	mov	r0, r3
 8002002:	3718      	adds	r7, #24
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}

08002008 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b086      	sub	sp, #24
 800200c:	af00      	add	r7, sp, #0
 800200e:	60f8      	str	r0, [r7, #12]
 8002010:	60b9      	str	r1, [r7, #8]
 8002012:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002014:	2300      	movs	r3, #0
 8002016:	617b      	str	r3, [r7, #20]
 8002018:	e009      	b.n	800202e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	1c5a      	adds	r2, r3, #1
 800201e:	60ba      	str	r2, [r7, #8]
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	4618      	mov	r0, r3
 8002024:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	3301      	adds	r3, #1
 800202c:	617b      	str	r3, [r7, #20]
 800202e:	697a      	ldr	r2, [r7, #20]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	429a      	cmp	r2, r3
 8002034:	dbf1      	blt.n	800201a <_write+0x12>
  }
  return len;
 8002036:	687b      	ldr	r3, [r7, #4]
}
 8002038:	4618      	mov	r0, r3
 800203a:	3718      	adds	r7, #24
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}

08002040 <_close>:

int _close(int file)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002048:	f04f 33ff 	mov.w	r3, #4294967295
}
 800204c:	4618      	mov	r0, r3
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002068:	605a      	str	r2, [r3, #4]
  return 0;
 800206a:	2300      	movs	r3, #0
}
 800206c:	4618      	mov	r0, r3
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <_isatty>:

int _isatty(int file)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002080:	2301      	movs	r3, #1
}
 8002082:	4618      	mov	r0, r3
 8002084:	370c      	adds	r7, #12
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr

0800208e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800208e:	b480      	push	{r7}
 8002090:	b085      	sub	sp, #20
 8002092:	af00      	add	r7, sp, #0
 8002094:	60f8      	str	r0, [r7, #12]
 8002096:	60b9      	str	r1, [r7, #8]
 8002098:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800209a:	2300      	movs	r3, #0
}
 800209c:	4618      	mov	r0, r3
 800209e:	3714      	adds	r7, #20
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b086      	sub	sp, #24
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020b0:	4a14      	ldr	r2, [pc, #80]	@ (8002104 <_sbrk+0x5c>)
 80020b2:	4b15      	ldr	r3, [pc, #84]	@ (8002108 <_sbrk+0x60>)
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020bc:	4b13      	ldr	r3, [pc, #76]	@ (800210c <_sbrk+0x64>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d102      	bne.n	80020ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020c4:	4b11      	ldr	r3, [pc, #68]	@ (800210c <_sbrk+0x64>)
 80020c6:	4a12      	ldr	r2, [pc, #72]	@ (8002110 <_sbrk+0x68>)
 80020c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020ca:	4b10      	ldr	r3, [pc, #64]	@ (800210c <_sbrk+0x64>)
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4413      	add	r3, r2
 80020d2:	693a      	ldr	r2, [r7, #16]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d207      	bcs.n	80020e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
<<<<<<< HEAD
 8001f74:	f00d fd00 	bl	800f978 <__errno>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	220c      	movs	r2, #12
 8001f7c:	601a      	str	r2, [r3, #0]
=======
 80020d8:	f00e fdbe 	bl	8010c58 <__errno>
 80020dc:	4603      	mov	r3, r0
 80020de:	220c      	movs	r2, #12
 80020e0:	601a      	str	r2, [r3, #0]
>>>>>>> f88694781bd54d0bca96bec7ac145bdac62fa329
    return (void *)-1;
 80020e2:	f04f 33ff 	mov.w	r3, #4294967295
 80020e6:	e009      	b.n	80020fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020e8:	4b08      	ldr	r3, [pc, #32]	@ (800210c <_sbrk+0x64>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020ee:	4b07      	ldr	r3, [pc, #28]	@ (800210c <_sbrk+0x64>)
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4413      	add	r3, r2
 80020f6:	4a05      	ldr	r2, [pc, #20]	@ (800210c <_sbrk+0x64>)
 80020f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020fa:	68fb      	ldr	r3, [r7, #12]
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3718      	adds	r7, #24
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	20008000 	.word	0x20008000
 8002108:	00000400 	.word	0x00000400
 800210c:	20000558 	.word	0x20000558
 8002110:	20000b38 	.word	0x20000b38

08002114 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002118:	4b06      	ldr	r3, [pc, #24]	@ (8002134 <SystemInit+0x20>)
 800211a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800211e:	4a05      	ldr	r2, [pc, #20]	@ (8002134 <SystemInit+0x20>)
 8002120:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002124:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002128:	bf00      	nop
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	e000ed00 	.word	0xe000ed00

08002138 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b09e      	sub	sp, #120	@ 0x78
 800213c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800213e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002142:	2200      	movs	r2, #0
 8002144:	601a      	str	r2, [r3, #0]
 8002146:	605a      	str	r2, [r3, #4]
 8002148:	609a      	str	r2, [r3, #8]
 800214a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800214c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002150:	2200      	movs	r2, #0
 8002152:	601a      	str	r2, [r3, #0]
 8002154:	605a      	str	r2, [r3, #4]
 8002156:	609a      	str	r2, [r3, #8]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8002158:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800215c:	2200      	movs	r2, #0
 800215e:	601a      	str	r2, [r3, #0]
 8002160:	605a      	str	r2, [r3, #4]
 8002162:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002164:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002168:	2200      	movs	r2, #0
 800216a:	601a      	str	r2, [r3, #0]
 800216c:	605a      	str	r2, [r3, #4]
 800216e:	609a      	str	r2, [r3, #8]
 8002170:	60da      	str	r2, [r3, #12]
 8002172:	611a      	str	r2, [r3, #16]
 8002174:	615a      	str	r2, [r3, #20]
 8002176:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
<<<<<<< HEAD
 8002014:	463b      	mov	r3, r7
 8002016:	2234      	movs	r2, #52	@ 0x34
 8002018:	2100      	movs	r1, #0
 800201a:	4618      	mov	r0, r3
 800201c:	f00d fc48 	bl	800f8b0 <memset>
=======
 8002178:	463b      	mov	r3, r7
 800217a:	2234      	movs	r2, #52	@ 0x34
 800217c:	2100      	movs	r1, #0
 800217e:	4618      	mov	r0, r3
 8002180:	f00e fd06 	bl	8010b90 <memset>
>>>>>>> f88694781bd54d0bca96bec7ac145bdac62fa329

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002184:	4b64      	ldr	r3, [pc, #400]	@ (8002318 <MX_TIM1_Init+0x1e0>)
 8002186:	4a65      	ldr	r2, [pc, #404]	@ (800231c <MX_TIM1_Init+0x1e4>)
 8002188:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1-1;
 800218a:	4b63      	ldr	r3, [pc, #396]	@ (8002318 <MX_TIM1_Init+0x1e0>)
 800218c:	2200      	movs	r2, #0
 800218e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8002190:	4b61      	ldr	r3, [pc, #388]	@ (8002318 <MX_TIM1_Init+0x1e0>)
 8002192:	2220      	movs	r2, #32
 8002194:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7999;
 8002196:	4b60      	ldr	r3, [pc, #384]	@ (8002318 <MX_TIM1_Init+0x1e0>)
 8002198:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 800219c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 800219e:	4b5e      	ldr	r3, [pc, #376]	@ (8002318 <MX_TIM1_Init+0x1e0>)
 80021a0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80021a4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 80021a6:	4b5c      	ldr	r3, [pc, #368]	@ (8002318 <MX_TIM1_Init+0x1e0>)
 80021a8:	2201      	movs	r2, #1
 80021aa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021ac:	4b5a      	ldr	r3, [pc, #360]	@ (8002318 <MX_TIM1_Init+0x1e0>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80021b2:	4859      	ldr	r0, [pc, #356]	@ (8002318 <MX_TIM1_Init+0x1e0>)
 80021b4:	f007 f80c 	bl	80091d0 <HAL_TIM_Base_Init>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80021be:	f7ff fce2 	bl	8001b86 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021c6:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80021c8:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80021cc:	4619      	mov	r1, r3
 80021ce:	4852      	ldr	r0, [pc, #328]	@ (8002318 <MX_TIM1_Init+0x1e0>)
 80021d0:	f007 fbc4 	bl	800995c <HAL_TIM_ConfigClockSource>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80021da:	f7ff fcd4 	bl	8001b86 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80021de:	484e      	ldr	r0, [pc, #312]	@ (8002318 <MX_TIM1_Init+0x1e0>)
 80021e0:	f007 f8b0 	bl	8009344 <HAL_TIM_PWM_Init>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 80021ea:	f7ff fccc 	bl	8001b86 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 80021ee:	2370      	movs	r3, #112	@ 0x70
 80021f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80021f2:	2300      	movs	r3, #0
 80021f4:	663b      	str	r3, [r7, #96]	@ 0x60
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021f6:	2300      	movs	r3, #0
 80021f8:	667b      	str	r3, [r7, #100]	@ 0x64
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80021fa:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80021fe:	4619      	mov	r1, r3
 8002200:	4845      	ldr	r0, [pc, #276]	@ (8002318 <MX_TIM1_Init+0x1e0>)
 8002202:	f008 fb2b 	bl	800a85c <HAL_TIMEx_MasterConfigSynchronization>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d001      	beq.n	8002210 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 800220c:	f7ff fcbb 	bl	8001b86 <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP1;
 8002210:	2302      	movs	r3, #2
 8002212:	653b      	str	r3, [r7, #80]	@ 0x50
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 8002214:	2301      	movs	r3, #1
 8002216:	657b      	str	r3, [r7, #84]	@ 0x54
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8002218:	2300      	movs	r3, #0
 800221a:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 800221c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002220:	461a      	mov	r2, r3
 8002222:	2101      	movs	r1, #1
 8002224:	483c      	ldr	r0, [pc, #240]	@ (8002318 <MX_TIM1_Init+0x1e0>)
 8002226:	f008 fc27 	bl	800aa78 <HAL_TIMEx_ConfigBreakInput>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d001      	beq.n	8002234 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8002230:	f7ff fca9 	bl	8001b86 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002234:	2360      	movs	r3, #96	@ 0x60
 8002236:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 8002238:	2300      	movs	r3, #0
 800223a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800223c:	2300      	movs	r3, #0
 800223e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002240:	2300      	movs	r3, #0
 8002242:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002244:	2300      	movs	r3, #0
 8002246:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002248:	2300      	movs	r3, #0
 800224a:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800224c:	2300      	movs	r3, #0
 800224e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002250:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002254:	2200      	movs	r2, #0
 8002256:	4619      	mov	r1, r3
 8002258:	482f      	ldr	r0, [pc, #188]	@ (8002318 <MX_TIM1_Init+0x1e0>)
 800225a:	f007 fa6b 	bl	8009734 <HAL_TIM_PWM_ConfigChannel>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d001      	beq.n	8002268 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 8002264:	f7ff fc8f 	bl	8001b86 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002268:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800226c:	2204      	movs	r2, #4
 800226e:	4619      	mov	r1, r3
 8002270:	4829      	ldr	r0, [pc, #164]	@ (8002318 <MX_TIM1_Init+0x1e0>)
 8002272:	f007 fa5f 	bl	8009734 <HAL_TIM_PWM_ConfigChannel>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 800227c:	f7ff fc83 	bl	8001b86 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002280:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002284:	2208      	movs	r2, #8
 8002286:	4619      	mov	r1, r3
 8002288:	4823      	ldr	r0, [pc, #140]	@ (8002318 <MX_TIM1_Init+0x1e0>)
 800228a:	f007 fa53 	bl	8009734 <HAL_TIM_PWM_ConfigChannel>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <MX_TIM1_Init+0x160>
  {
    Error_Handler();
 8002294:	f7ff fc77 	bl	8001b86 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8002298:	2370      	movs	r3, #112	@ 0x70
 800229a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 7998;
 800229c:	f641 733e 	movw	r3, #7998	@ 0x1f3e
 80022a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80022a2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80022a6:	220c      	movs	r2, #12
 80022a8:	4619      	mov	r1, r3
 80022aa:	481b      	ldr	r0, [pc, #108]	@ (8002318 <MX_TIM1_Init+0x1e0>)
 80022ac:	f007 fa42 	bl	8009734 <HAL_TIM_PWM_ConfigChannel>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <MX_TIM1_Init+0x182>
  {
    Error_Handler();
 80022b6:	f7ff fc66 	bl	8001b86 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80022ba:	2300      	movs	r3, #0
 80022bc:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80022be:	2300      	movs	r3, #0
 80022c0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80022c2:	2300      	movs	r3, #0
 80022c4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 120;
 80022c6:	2378      	movs	r3, #120	@ 0x78
 80022c8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 80022ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022ce:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80022d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80022d4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 2;
 80022d6:	2302      	movs	r3, #2
 80022d8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80022da:	2300      	movs	r3, #0
 80022dc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80022de:	2300      	movs	r3, #0
 80022e0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80022e2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80022e6:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80022e8:	2300      	movs	r3, #0
 80022ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80022ec:	2300      	movs	r3, #0
 80022ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80022f0:	2300      	movs	r3, #0
 80022f2:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80022f4:	463b      	mov	r3, r7
 80022f6:	4619      	mov	r1, r3
 80022f8:	4807      	ldr	r0, [pc, #28]	@ (8002318 <MX_TIM1_Init+0x1e0>)
 80022fa:	f008 fb31 	bl	800a960 <HAL_TIMEx_ConfigBreakDeadTime>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d001      	beq.n	8002308 <MX_TIM1_Init+0x1d0>
  {
    Error_Handler();
 8002304:	f7ff fc3f 	bl	8001b86 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002308:	4803      	ldr	r0, [pc, #12]	@ (8002318 <MX_TIM1_Init+0x1e0>)
 800230a:	f000 f8c9 	bl	80024a0 <HAL_TIM_MspPostInit>

}
 800230e:	bf00      	nop
 8002310:	3778      	adds	r7, #120	@ 0x78
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	2000055c 	.word	0x2000055c
 800231c:	40012c00 	.word	0x40012c00

08002320 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b08c      	sub	sp, #48	@ 0x30
 8002324:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002326:	f107 0320 	add.w	r3, r7, #32
 800232a:	2200      	movs	r2, #0
 800232c:	601a      	str	r2, [r3, #0]
 800232e:	605a      	str	r2, [r3, #4]
 8002330:	609a      	str	r2, [r3, #8]
 8002332:	60da      	str	r2, [r3, #12]
  TIM_HallSensor_InitTypeDef sConfig = {0};
 8002334:	f107 0310 	add.w	r3, r7, #16
 8002338:	2200      	movs	r2, #0
 800233a:	601a      	str	r2, [r3, #0]
 800233c:	605a      	str	r2, [r3, #4]
 800233e:	609a      	str	r2, [r3, #8]
 8002340:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002342:	1d3b      	adds	r3, r7, #4
 8002344:	2200      	movs	r2, #0
 8002346:	601a      	str	r2, [r3, #0]
 8002348:	605a      	str	r2, [r3, #4]
 800234a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800234c:	4b26      	ldr	r3, [pc, #152]	@ (80023e8 <MX_TIM4_Init+0xc8>)
 800234e:	4a27      	ldr	r2, [pc, #156]	@ (80023ec <MX_TIM4_Init+0xcc>)
 8002350:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16-1;
 8002352:	4b25      	ldr	r3, [pc, #148]	@ (80023e8 <MX_TIM4_Init+0xc8>)
 8002354:	220f      	movs	r2, #15
 8002356:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002358:	4b23      	ldr	r3, [pc, #140]	@ (80023e8 <MX_TIM4_Init+0xc8>)
 800235a:	2200      	movs	r2, #0
 800235c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800235e:	4b22      	ldr	r3, [pc, #136]	@ (80023e8 <MX_TIM4_Init+0xc8>)
 8002360:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002364:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002366:	4b20      	ldr	r3, [pc, #128]	@ (80023e8 <MX_TIM4_Init+0xc8>)
 8002368:	2200      	movs	r2, #0
 800236a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800236c:	4b1e      	ldr	r3, [pc, #120]	@ (80023e8 <MX_TIM4_Init+0xc8>)
 800236e:	2200      	movs	r2, #0
 8002370:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002372:	481d      	ldr	r0, [pc, #116]	@ (80023e8 <MX_TIM4_Init+0xc8>)
 8002374:	f006 ff2c 	bl	80091d0 <HAL_TIM_Base_Init>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d001      	beq.n	8002382 <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 800237e:	f7ff fc02 	bl	8001b86 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002382:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002386:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002388:	f107 0320 	add.w	r3, r7, #32
 800238c:	4619      	mov	r1, r3
 800238e:	4816      	ldr	r0, [pc, #88]	@ (80023e8 <MX_TIM4_Init+0xc8>)
 8002390:	f007 fae4 	bl	800995c <HAL_TIM_ConfigClockSource>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800239a:	f7ff fbf4 	bl	8001b86 <Error_Handler>
  }
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800239e:	2300      	movs	r3, #0
 80023a0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80023a2:	2300      	movs	r3, #0
 80023a4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 10;
 80023a6:	230a      	movs	r3, #10
 80023a8:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 5;
 80023aa:	2305      	movs	r3, #5
 80023ac:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim4, &sConfig) != HAL_OK)
 80023ae:	f107 0310 	add.w	r3, r7, #16
 80023b2:	4619      	mov	r1, r3
 80023b4:	480c      	ldr	r0, [pc, #48]	@ (80023e8 <MX_TIM4_Init+0xc8>)
 80023b6:	f008 f886 	bl	800a4c6 <HAL_TIMEx_HallSensor_Init>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d001      	beq.n	80023c4 <MX_TIM4_Init+0xa4>
  {
    Error_Handler();
 80023c0:	f7ff fbe1 	bl	8001b86 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 80023c4:	2350      	movs	r3, #80	@ 0x50
 80023c6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023c8:	2300      	movs	r3, #0
 80023ca:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80023cc:	1d3b      	adds	r3, r7, #4
 80023ce:	4619      	mov	r1, r3
 80023d0:	4805      	ldr	r0, [pc, #20]	@ (80023e8 <MX_TIM4_Init+0xc8>)
 80023d2:	f008 fa43 	bl	800a85c <HAL_TIMEx_MasterConfigSynchronization>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d001      	beq.n	80023e0 <MX_TIM4_Init+0xc0>
  {
    Error_Handler();
 80023dc:	f7ff fbd3 	bl	8001b86 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80023e0:	bf00      	nop
 80023e2:	3730      	adds	r7, #48	@ 0x30
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	200005a8 	.word	0x200005a8
 80023ec:	40000800 	.word	0x40000800

080023f0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b08a      	sub	sp, #40	@ 0x28
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f8:	f107 0314 	add.w	r3, r7, #20
 80023fc:	2200      	movs	r2, #0
 80023fe:	601a      	str	r2, [r3, #0]
 8002400:	605a      	str	r2, [r3, #4]
 8002402:	609a      	str	r2, [r3, #8]
 8002404:	60da      	str	r2, [r3, #12]
 8002406:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a20      	ldr	r2, [pc, #128]	@ (8002490 <HAL_TIM_Base_MspInit+0xa0>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d10c      	bne.n	800242c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002412:	4b20      	ldr	r3, [pc, #128]	@ (8002494 <HAL_TIM_Base_MspInit+0xa4>)
 8002414:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002416:	4a1f      	ldr	r2, [pc, #124]	@ (8002494 <HAL_TIM_Base_MspInit+0xa4>)
 8002418:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800241c:	6613      	str	r3, [r2, #96]	@ 0x60
 800241e:	4b1d      	ldr	r3, [pc, #116]	@ (8002494 <HAL_TIM_Base_MspInit+0xa4>)
 8002420:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002422:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002426:	613b      	str	r3, [r7, #16]
 8002428:	693b      	ldr	r3, [r7, #16]

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800242a:	e02d      	b.n	8002488 <HAL_TIM_Base_MspInit+0x98>
  else if(tim_baseHandle->Instance==TIM4)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a19      	ldr	r2, [pc, #100]	@ (8002498 <HAL_TIM_Base_MspInit+0xa8>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d128      	bne.n	8002488 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002436:	4b17      	ldr	r3, [pc, #92]	@ (8002494 <HAL_TIM_Base_MspInit+0xa4>)
 8002438:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800243a:	4a16      	ldr	r2, [pc, #88]	@ (8002494 <HAL_TIM_Base_MspInit+0xa4>)
 800243c:	f043 0304 	orr.w	r3, r3, #4
 8002440:	6593      	str	r3, [r2, #88]	@ 0x58
 8002442:	4b14      	ldr	r3, [pc, #80]	@ (8002494 <HAL_TIM_Base_MspInit+0xa4>)
 8002444:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002446:	f003 0304 	and.w	r3, r3, #4
 800244a:	60fb      	str	r3, [r7, #12]
 800244c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800244e:	4b11      	ldr	r3, [pc, #68]	@ (8002494 <HAL_TIM_Base_MspInit+0xa4>)
 8002450:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002452:	4a10      	ldr	r2, [pc, #64]	@ (8002494 <HAL_TIM_Base_MspInit+0xa4>)
 8002454:	f043 0302 	orr.w	r3, r3, #2
 8002458:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800245a:	4b0e      	ldr	r3, [pc, #56]	@ (8002494 <HAL_TIM_Base_MspInit+0xa4>)
 800245c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	60bb      	str	r3, [r7, #8]
 8002464:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8002466:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 800246a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800246c:	2302      	movs	r3, #2
 800246e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002470:	2300      	movs	r3, #0
 8002472:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002474:	2300      	movs	r3, #0
 8002476:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002478:	2302      	movs	r3, #2
 800247a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800247c:	f107 0314 	add.w	r3, r7, #20
 8002480:	4619      	mov	r1, r3
 8002482:	4806      	ldr	r0, [pc, #24]	@ (800249c <HAL_TIM_Base_MspInit+0xac>)
 8002484:	f004 f8ce 	bl	8006624 <HAL_GPIO_Init>
}
 8002488:	bf00      	nop
 800248a:	3728      	adds	r7, #40	@ 0x28
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	40012c00 	.word	0x40012c00
 8002494:	40021000 	.word	0x40021000
 8002498:	40000800 	.word	0x40000800
 800249c:	48000400 	.word	0x48000400

080024a0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b08a      	sub	sp, #40	@ 0x28
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a8:	f107 0314 	add.w	r3, r7, #20
 80024ac:	2200      	movs	r2, #0
 80024ae:	601a      	str	r2, [r3, #0]
 80024b0:	605a      	str	r2, [r3, #4]
 80024b2:	609a      	str	r2, [r3, #8]
 80024b4:	60da      	str	r2, [r3, #12]
 80024b6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a29      	ldr	r2, [pc, #164]	@ (8002564 <HAL_TIM_MspPostInit+0xc4>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d14b      	bne.n	800255a <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024c2:	4b29      	ldr	r3, [pc, #164]	@ (8002568 <HAL_TIM_MspPostInit+0xc8>)
 80024c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024c6:	4a28      	ldr	r2, [pc, #160]	@ (8002568 <HAL_TIM_MspPostInit+0xc8>)
 80024c8:	f043 0302 	orr.w	r3, r3, #2
 80024cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024ce:	4b26      	ldr	r3, [pc, #152]	@ (8002568 <HAL_TIM_MspPostInit+0xc8>)
 80024d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	613b      	str	r3, [r7, #16]
 80024d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024da:	4b23      	ldr	r3, [pc, #140]	@ (8002568 <HAL_TIM_MspPostInit+0xc8>)
 80024dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024de:	4a22      	ldr	r2, [pc, #136]	@ (8002568 <HAL_TIM_MspPostInit+0xc8>)
 80024e0:	f043 0301 	orr.w	r3, r3, #1
 80024e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024e6:	4b20      	ldr	r3, [pc, #128]	@ (8002568 <HAL_TIM_MspPostInit+0xc8>)
 80024e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ea:	f003 0301 	and.w	r3, r3, #1
 80024ee:	60fb      	str	r3, [r7, #12]
 80024f0:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80024f2:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80024f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f8:	2302      	movs	r3, #2
 80024fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fc:	2300      	movs	r3, #0
 80024fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002500:	2300      	movs	r3, #0
 8002502:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002504:	2306      	movs	r3, #6
 8002506:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002508:	f107 0314 	add.w	r3, r7, #20
 800250c:	4619      	mov	r1, r3
 800250e:	4817      	ldr	r0, [pc, #92]	@ (800256c <HAL_TIM_MspPostInit+0xcc>)
 8002510:	f004 f888 	bl	8006624 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002514:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002518:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800251a:	2302      	movs	r3, #2
 800251c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251e:	2300      	movs	r3, #0
 8002520:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002522:	2300      	movs	r3, #0
 8002524:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8002526:	2304      	movs	r3, #4
 8002528:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800252a:	f107 0314 	add.w	r3, r7, #20
 800252e:	4619      	mov	r1, r3
 8002530:	480e      	ldr	r0, [pc, #56]	@ (800256c <HAL_TIM_MspPostInit+0xcc>)
 8002532:	f004 f877 	bl	8006624 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002536:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 800253a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800253c:	2302      	movs	r3, #2
 800253e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002540:	2300      	movs	r3, #0
 8002542:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002544:	2300      	movs	r3, #0
 8002546:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002548:	2306      	movs	r3, #6
 800254a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800254c:	f107 0314 	add.w	r3, r7, #20
 8002550:	4619      	mov	r1, r3
 8002552:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002556:	f004 f865 	bl	8006624 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800255a:	bf00      	nop
 800255c:	3728      	adds	r7, #40	@ 0x28
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	40012c00 	.word	0x40012c00
 8002568:	40021000 	.word	0x40021000
 800256c:	48000400 	.word	0x48000400

08002570 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002574:	4b22      	ldr	r3, [pc, #136]	@ (8002600 <MX_USART3_UART_Init+0x90>)
 8002576:	4a23      	ldr	r2, [pc, #140]	@ (8002604 <MX_USART3_UART_Init+0x94>)
 8002578:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 800257a:	4b21      	ldr	r3, [pc, #132]	@ (8002600 <MX_USART3_UART_Init+0x90>)
 800257c:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8002580:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002582:	4b1f      	ldr	r3, [pc, #124]	@ (8002600 <MX_USART3_UART_Init+0x90>)
 8002584:	2200      	movs	r2, #0
 8002586:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002588:	4b1d      	ldr	r3, [pc, #116]	@ (8002600 <MX_USART3_UART_Init+0x90>)
 800258a:	2200      	movs	r2, #0
 800258c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800258e:	4b1c      	ldr	r3, [pc, #112]	@ (8002600 <MX_USART3_UART_Init+0x90>)
 8002590:	2200      	movs	r2, #0
 8002592:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002594:	4b1a      	ldr	r3, [pc, #104]	@ (8002600 <MX_USART3_UART_Init+0x90>)
 8002596:	220c      	movs	r2, #12
 8002598:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800259a:	4b19      	ldr	r3, [pc, #100]	@ (8002600 <MX_USART3_UART_Init+0x90>)
 800259c:	2200      	movs	r2, #0
 800259e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80025a0:	4b17      	ldr	r3, [pc, #92]	@ (8002600 <MX_USART3_UART_Init+0x90>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025a6:	4b16      	ldr	r3, [pc, #88]	@ (8002600 <MX_USART3_UART_Init+0x90>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80025ac:	4b14      	ldr	r3, [pc, #80]	@ (8002600 <MX_USART3_UART_Init+0x90>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025b2:	4b13      	ldr	r3, [pc, #76]	@ (8002600 <MX_USART3_UART_Init+0x90>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80025b8:	4811      	ldr	r0, [pc, #68]	@ (8002600 <MX_USART3_UART_Init+0x90>)
 80025ba:	f008 fb5a 	bl	800ac72 <HAL_UART_Init>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d001      	beq.n	80025c8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80025c4:	f7ff fadf 	bl	8001b86 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80025c8:	2100      	movs	r1, #0
 80025ca:	480d      	ldr	r0, [pc, #52]	@ (8002600 <MX_USART3_UART_Init+0x90>)
 80025cc:	f009 ffd7 	bl	800c57e <HAL_UARTEx_SetTxFifoThreshold>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80025d6:	f7ff fad6 	bl	8001b86 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80025da:	2100      	movs	r1, #0
 80025dc:	4808      	ldr	r0, [pc, #32]	@ (8002600 <MX_USART3_UART_Init+0x90>)
 80025de:	f00a f80c 	bl	800c5fa <HAL_UARTEx_SetRxFifoThreshold>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d001      	beq.n	80025ec <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80025e8:	f7ff facd 	bl	8001b86 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80025ec:	4804      	ldr	r0, [pc, #16]	@ (8002600 <MX_USART3_UART_Init+0x90>)
 80025ee:	f009 ff8d 	bl	800c50c <HAL_UARTEx_DisableFifoMode>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d001      	beq.n	80025fc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80025f8:	f7ff fac5 	bl	8001b86 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80025fc:	bf00      	nop
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	200005f4 	.word	0x200005f4
 8002604:	40004800 	.word	0x40004800

08002608 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b09a      	sub	sp, #104	@ 0x68
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002610:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002614:	2200      	movs	r2, #0
 8002616:	601a      	str	r2, [r3, #0]
 8002618:	605a      	str	r2, [r3, #4]
 800261a:	609a      	str	r2, [r3, #8]
 800261c:	60da      	str	r2, [r3, #12]
 800261e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
<<<<<<< HEAD
 80024bc:	f107 0310 	add.w	r3, r7, #16
 80024c0:	2244      	movs	r2, #68	@ 0x44
 80024c2:	2100      	movs	r1, #0
 80024c4:	4618      	mov	r0, r3
 80024c6:	f00d f9f3 	bl	800f8b0 <memset>
=======
 8002620:	f107 0310 	add.w	r3, r7, #16
 8002624:	2244      	movs	r2, #68	@ 0x44
 8002626:	2100      	movs	r1, #0
 8002628:	4618      	mov	r0, r3
 800262a:	f00e fab1 	bl	8010b90 <memset>
>>>>>>> f88694781bd54d0bca96bec7ac145bdac62fa329
  if(uartHandle->Instance==USART3)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a4d      	ldr	r2, [pc, #308]	@ (8002768 <HAL_UART_MspInit+0x160>)
 8002634:	4293      	cmp	r3, r2
 8002636:	f040 8092 	bne.w	800275e <HAL_UART_MspInit+0x156>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800263a:	2304      	movs	r3, #4
 800263c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800263e:	2300      	movs	r3, #0
 8002640:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002642:	f107 0310 	add.w	r3, r7, #16
 8002646:	4618      	mov	r0, r3
 8002648:	f005 ff92 	bl	8008570 <HAL_RCCEx_PeriphCLKConfig>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002652:	f7ff fa98 	bl	8001b86 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002656:	4b45      	ldr	r3, [pc, #276]	@ (800276c <HAL_UART_MspInit+0x164>)
 8002658:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800265a:	4a44      	ldr	r2, [pc, #272]	@ (800276c <HAL_UART_MspInit+0x164>)
 800265c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002660:	6593      	str	r3, [r2, #88]	@ 0x58
 8002662:	4b42      	ldr	r3, [pc, #264]	@ (800276c <HAL_UART_MspInit+0x164>)
 8002664:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002666:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800266a:	60fb      	str	r3, [r7, #12]
 800266c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800266e:	4b3f      	ldr	r3, [pc, #252]	@ (800276c <HAL_UART_MspInit+0x164>)
 8002670:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002672:	4a3e      	ldr	r2, [pc, #248]	@ (800276c <HAL_UART_MspInit+0x164>)
 8002674:	f043 0302 	orr.w	r3, r3, #2
 8002678:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800267a:	4b3c      	ldr	r3, [pc, #240]	@ (800276c <HAL_UART_MspInit+0x164>)
 800267c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	60bb      	str	r3, [r7, #8]
 8002684:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002686:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800268a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800268c:	2302      	movs	r3, #2
 800268e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002690:	2300      	movs	r3, #0
 8002692:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002694:	2300      	movs	r3, #0
 8002696:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002698:	2307      	movs	r3, #7
 800269a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800269c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80026a0:	4619      	mov	r1, r3
 80026a2:	4833      	ldr	r0, [pc, #204]	@ (8002770 <HAL_UART_MspInit+0x168>)
 80026a4:	f003 ffbe 	bl	8006624 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel1;
 80026a8:	4b32      	ldr	r3, [pc, #200]	@ (8002774 <HAL_UART_MspInit+0x16c>)
 80026aa:	4a33      	ldr	r2, [pc, #204]	@ (8002778 <HAL_UART_MspInit+0x170>)
 80026ac:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80026ae:	4b31      	ldr	r3, [pc, #196]	@ (8002774 <HAL_UART_MspInit+0x16c>)
 80026b0:	221d      	movs	r2, #29
 80026b2:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80026b4:	4b2f      	ldr	r3, [pc, #188]	@ (8002774 <HAL_UART_MspInit+0x16c>)
 80026b6:	2210      	movs	r2, #16
 80026b8:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026ba:	4b2e      	ldr	r3, [pc, #184]	@ (8002774 <HAL_UART_MspInit+0x16c>)
 80026bc:	2200      	movs	r2, #0
 80026be:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80026c0:	4b2c      	ldr	r3, [pc, #176]	@ (8002774 <HAL_UART_MspInit+0x16c>)
 80026c2:	2280      	movs	r2, #128	@ 0x80
 80026c4:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026c6:	4b2b      	ldr	r3, [pc, #172]	@ (8002774 <HAL_UART_MspInit+0x16c>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026cc:	4b29      	ldr	r3, [pc, #164]	@ (8002774 <HAL_UART_MspInit+0x16c>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80026d2:	4b28      	ldr	r3, [pc, #160]	@ (8002774 <HAL_UART_MspInit+0x16c>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80026d8:	4b26      	ldr	r3, [pc, #152]	@ (8002774 <HAL_UART_MspInit+0x16c>)
 80026da:	2200      	movs	r2, #0
 80026dc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80026de:	4825      	ldr	r0, [pc, #148]	@ (8002774 <HAL_UART_MspInit+0x16c>)
 80026e0:	f003 fabe 	bl	8005c60 <HAL_DMA_Init>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 80026ea:	f7ff fa4c 	bl	8001b86 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a20      	ldr	r2, [pc, #128]	@ (8002774 <HAL_UART_MspInit+0x16c>)
 80026f2:	67da      	str	r2, [r3, #124]	@ 0x7c
 80026f4:	4a1f      	ldr	r2, [pc, #124]	@ (8002774 <HAL_UART_MspInit+0x16c>)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel2;
 80026fa:	4b20      	ldr	r3, [pc, #128]	@ (800277c <HAL_UART_MspInit+0x174>)
 80026fc:	4a20      	ldr	r2, [pc, #128]	@ (8002780 <HAL_UART_MspInit+0x178>)
 80026fe:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8002700:	4b1e      	ldr	r3, [pc, #120]	@ (800277c <HAL_UART_MspInit+0x174>)
 8002702:	221c      	movs	r2, #28
 8002704:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002706:	4b1d      	ldr	r3, [pc, #116]	@ (800277c <HAL_UART_MspInit+0x174>)
 8002708:	2200      	movs	r2, #0
 800270a:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800270c:	4b1b      	ldr	r3, [pc, #108]	@ (800277c <HAL_UART_MspInit+0x174>)
 800270e:	2200      	movs	r2, #0
 8002710:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002712:	4b1a      	ldr	r3, [pc, #104]	@ (800277c <HAL_UART_MspInit+0x174>)
 8002714:	2280      	movs	r2, #128	@ 0x80
 8002716:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002718:	4b18      	ldr	r3, [pc, #96]	@ (800277c <HAL_UART_MspInit+0x174>)
 800271a:	2200      	movs	r2, #0
 800271c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800271e:	4b17      	ldr	r3, [pc, #92]	@ (800277c <HAL_UART_MspInit+0x174>)
 8002720:	2200      	movs	r2, #0
 8002722:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002724:	4b15      	ldr	r3, [pc, #84]	@ (800277c <HAL_UART_MspInit+0x174>)
 8002726:	2200      	movs	r2, #0
 8002728:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800272a:	4b14      	ldr	r3, [pc, #80]	@ (800277c <HAL_UART_MspInit+0x174>)
 800272c:	2200      	movs	r2, #0
 800272e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002730:	4812      	ldr	r0, [pc, #72]	@ (800277c <HAL_UART_MspInit+0x174>)
 8002732:	f003 fa95 	bl	8005c60 <HAL_DMA_Init>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d001      	beq.n	8002740 <HAL_UART_MspInit+0x138>
    {
      Error_Handler();
 800273c:	f7ff fa23 	bl	8001b86 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	4a0e      	ldr	r2, [pc, #56]	@ (800277c <HAL_UART_MspInit+0x174>)
 8002744:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002748:	4a0c      	ldr	r2, [pc, #48]	@ (800277c <HAL_UART_MspInit+0x174>)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 800274e:	2200      	movs	r2, #0
 8002750:	2101      	movs	r1, #1
 8002752:	2027      	movs	r0, #39	@ 0x27
 8002754:	f003 f875 	bl	8005842 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002758:	2027      	movs	r0, #39	@ 0x27
 800275a:	f003 f88c 	bl	8005876 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800275e:	bf00      	nop
 8002760:	3768      	adds	r7, #104	@ 0x68
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	40004800 	.word	0x40004800
 800276c:	40021000 	.word	0x40021000
 8002770:	48000400 	.word	0x48000400
 8002774:	20000688 	.word	0x20000688
 8002778:	40020008 	.word	0x40020008
 800277c:	200006e8 	.word	0x200006e8
 8002780:	4002001c 	.word	0x4002001c

08002784 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002784:	480d      	ldr	r0, [pc, #52]	@ (80027bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002786:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002788:	f7ff fcc4 	bl	8002114 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800278c:	480c      	ldr	r0, [pc, #48]	@ (80027c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800278e:	490d      	ldr	r1, [pc, #52]	@ (80027c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002790:	4a0d      	ldr	r2, [pc, #52]	@ (80027c8 <LoopForever+0xe>)
  movs r3, #0
 8002792:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002794:	e002      	b.n	800279c <LoopCopyDataInit>

08002796 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002796:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002798:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800279a:	3304      	adds	r3, #4

0800279c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800279c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800279e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027a0:	d3f9      	bcc.n	8002796 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027a2:	4a0a      	ldr	r2, [pc, #40]	@ (80027cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80027a4:	4c0a      	ldr	r4, [pc, #40]	@ (80027d0 <LoopForever+0x16>)
  movs r3, #0
 80027a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027a8:	e001      	b.n	80027ae <LoopFillZerobss>

080027aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027ac:	3204      	adds	r2, #4

080027ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027b0:	d3fb      	bcc.n	80027aa <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
<<<<<<< HEAD
 800264e:	f00d f999 	bl	800f984 <__libc_init_array>
=======
 80027b2:	f00e fa57 	bl	8010c64 <__libc_init_array>
>>>>>>> f88694781bd54d0bca96bec7ac145bdac62fa329
/* Call the application's entry point.*/
	bl	main
 80027b6:	f7ff f91d 	bl	80019f4 <main>

080027ba <LoopForever>:

LoopForever:
    b LoopForever
 80027ba:	e7fe      	b.n	80027ba <LoopForever>
  ldr   r0, =_estack
 80027bc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80027c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027c4:	20000258 	.word	0x20000258
  ldr r2, =_sidata
<<<<<<< HEAD
 8002664:	08012c90 	.word	0x08012c90
=======
 80027c8:	08013f68 	.word	0x08013f68
>>>>>>> f88694781bd54d0bca96bec7ac145bdac62fa329
  ldr r2, =_sbss
 80027cc:	20000258 	.word	0x20000258
  ldr r4, =_ebss
 80027d0:	20000b38 	.word	0x20000b38

080027d4 <COMP4_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80027d4:	e7fe      	b.n	80027d4 <COMP4_IRQHandler>

080027d6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027d6:	b580      	push	{r7, lr}
 80027d8:	b082      	sub	sp, #8
 80027da:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80027dc:	2300      	movs	r3, #0
 80027de:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027e0:	2003      	movs	r0, #3
 80027e2:	f003 f823 	bl	800582c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80027e6:	200f      	movs	r0, #15
 80027e8:	f000 f80e 	bl	8002808 <HAL_InitTick>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d002      	beq.n	80027f8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	71fb      	strb	r3, [r7, #7]
 80027f6:	e001      	b.n	80027fc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80027f8:	f7ff fb3c 	bl	8001e74 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80027fc:	79fb      	ldrb	r3, [r7, #7]

}
 80027fe:	4618      	mov	r0, r3
 8002800:	3708      	adds	r7, #8
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
	...

08002808 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002810:	2300      	movs	r3, #0
 8002812:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002814:	4b16      	ldr	r3, [pc, #88]	@ (8002870 <HAL_InitTick+0x68>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d022      	beq.n	8002862 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800281c:	4b15      	ldr	r3, [pc, #84]	@ (8002874 <HAL_InitTick+0x6c>)
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	4b13      	ldr	r3, [pc, #76]	@ (8002870 <HAL_InitTick+0x68>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002828:	fbb1 f3f3 	udiv	r3, r1, r3
 800282c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002830:	4618      	mov	r0, r3
 8002832:	f003 f82e 	bl	8005892 <HAL_SYSTICK_Config>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d10f      	bne.n	800285c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2b0f      	cmp	r3, #15
 8002840:	d809      	bhi.n	8002856 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002842:	2200      	movs	r2, #0
 8002844:	6879      	ldr	r1, [r7, #4]
 8002846:	f04f 30ff 	mov.w	r0, #4294967295
 800284a:	f002 fffa 	bl	8005842 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800284e:	4a0a      	ldr	r2, [pc, #40]	@ (8002878 <HAL_InitTick+0x70>)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6013      	str	r3, [r2, #0]
 8002854:	e007      	b.n	8002866 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	73fb      	strb	r3, [r7, #15]
 800285a:	e004      	b.n	8002866 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	73fb      	strb	r3, [r7, #15]
 8002860:	e001      	b.n	8002866 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002866:	7bfb      	ldrb	r3, [r7, #15]
}
 8002868:	4618      	mov	r0, r3
 800286a:	3710      	adds	r7, #16
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	20000008 	.word	0x20000008
 8002874:	20000000 	.word	0x20000000
 8002878:	20000004 	.word	0x20000004

0800287c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002880:	4b05      	ldr	r3, [pc, #20]	@ (8002898 <HAL_IncTick+0x1c>)
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	4b05      	ldr	r3, [pc, #20]	@ (800289c <HAL_IncTick+0x20>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4413      	add	r3, r2
 800288a:	4a03      	ldr	r2, [pc, #12]	@ (8002898 <HAL_IncTick+0x1c>)
 800288c:	6013      	str	r3, [r2, #0]
}
 800288e:	bf00      	nop
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr
 8002898:	20000748 	.word	0x20000748
 800289c:	20000008 	.word	0x20000008

080028a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
  return uwTick;
 80028a4:	4b03      	ldr	r3, [pc, #12]	@ (80028b4 <HAL_GetTick+0x14>)
 80028a6:	681b      	ldr	r3, [r3, #0]
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	20000748 	.word	0x20000748

080028b8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	431a      	orrs	r2, r3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	609a      	str	r2, [r3, #8]
}
 80028d2:	bf00      	nop
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr

080028de <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80028de:	b480      	push	{r7}
 80028e0:	b083      	sub	sp, #12
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
 80028e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	431a      	orrs	r2, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	609a      	str	r2, [r3, #8]
}
 80028f8:	bf00      	nop
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002914:	4618      	mov	r0, r3
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002920:	b480      	push	{r7}
 8002922:	b087      	sub	sp, #28
 8002924:	af00      	add	r7, sp, #0
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	60b9      	str	r1, [r7, #8]
 800292a:	607a      	str	r2, [r7, #4]
 800292c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	3360      	adds	r3, #96	@ 0x60
 8002932:	461a      	mov	r2, r3
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	4413      	add	r3, r2
 800293a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	4b08      	ldr	r3, [pc, #32]	@ (8002964 <LL_ADC_SetOffset+0x44>)
 8002942:	4013      	ands	r3, r2
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800294a:	683a      	ldr	r2, [r7, #0]
 800294c:	430a      	orrs	r2, r1
 800294e:	4313      	orrs	r3, r2
 8002950:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002958:	bf00      	nop
 800295a:	371c      	adds	r7, #28
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr
 8002964:	03fff000 	.word	0x03fff000

08002968 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002968:	b480      	push	{r7}
 800296a:	b085      	sub	sp, #20
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	3360      	adds	r3, #96	@ 0x60
 8002976:	461a      	mov	r2, r3
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	4413      	add	r3, r2
 800297e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002988:	4618      	mov	r0, r3
 800298a:	3714      	adds	r7, #20
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002994:	b480      	push	{r7}
 8002996:	b087      	sub	sp, #28
 8002998:	af00      	add	r7, sp, #0
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	60b9      	str	r1, [r7, #8]
 800299e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	3360      	adds	r3, #96	@ 0x60
 80029a4:	461a      	mov	r2, r3
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	4413      	add	r3, r2
 80029ac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	431a      	orrs	r2, r3
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80029be:	bf00      	nop
 80029c0:	371c      	adds	r7, #28
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr

080029ca <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80029ca:	b480      	push	{r7}
 80029cc:	b087      	sub	sp, #28
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	60f8      	str	r0, [r7, #12]
 80029d2:	60b9      	str	r1, [r7, #8]
 80029d4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	3360      	adds	r3, #96	@ 0x60
 80029da:	461a      	mov	r2, r3
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	4413      	add	r3, r2
 80029e2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	431a      	orrs	r2, r3
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80029f4:	bf00      	nop
 80029f6:	371c      	adds	r7, #28
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b087      	sub	sp, #28
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	60f8      	str	r0, [r7, #12]
 8002a08:	60b9      	str	r1, [r7, #8]
 8002a0a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	3360      	adds	r3, #96	@ 0x60
 8002a10:	461a      	mov	r2, r3
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	4413      	add	r3, r2
 8002a18:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	431a      	orrs	r2, r3
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002a2a:	bf00      	nop
 8002a2c:	371c      	adds	r7, #28
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr

08002a36 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002a36:	b480      	push	{r7}
 8002a38:	b083      	sub	sp, #12
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
 8002a3e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	695b      	ldr	r3, [r3, #20]
 8002a44:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	431a      	orrs	r2, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	615a      	str	r2, [r3, #20]
}
 8002a50:	bf00      	nop
 8002a52:	370c      	adds	r7, #12
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d101      	bne.n	8002a74 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002a70:	2301      	movs	r3, #1
 8002a72:	e000      	b.n	8002a76 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr

08002a82 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002a82:	b480      	push	{r7}
 8002a84:	b087      	sub	sp, #28
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	60f8      	str	r0, [r7, #12]
 8002a8a:	60b9      	str	r1, [r7, #8]
 8002a8c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	3330      	adds	r3, #48	@ 0x30
 8002a92:	461a      	mov	r2, r3
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	0a1b      	lsrs	r3, r3, #8
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	f003 030c 	and.w	r3, r3, #12
 8002a9e:	4413      	add	r3, r2
 8002aa0:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	f003 031f 	and.w	r3, r3, #31
 8002aac:	211f      	movs	r1, #31
 8002aae:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab2:	43db      	mvns	r3, r3
 8002ab4:	401a      	ands	r2, r3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	0e9b      	lsrs	r3, r3, #26
 8002aba:	f003 011f 	and.w	r1, r3, #31
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	f003 031f 	and.w	r3, r3, #31
 8002ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac8:	431a      	orrs	r2, r3
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002ace:	bf00      	nop
 8002ad0:	371c      	adds	r7, #28
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr

08002ada <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002ada:	b480      	push	{r7}
 8002adc:	b083      	sub	sp, #12
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ae6:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d101      	bne.n	8002af2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002aee:	2301      	movs	r3, #1
 8002af0:	e000      	b.n	8002af4 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002af2:	2300      	movs	r3, #0
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr

08002b00 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b087      	sub	sp, #28
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	60b9      	str	r1, [r7, #8]
 8002b0a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	3314      	adds	r3, #20
 8002b10:	461a      	mov	r2, r3
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	0e5b      	lsrs	r3, r3, #25
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	f003 0304 	and.w	r3, r3, #4
 8002b1c:	4413      	add	r3, r2
 8002b1e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	0d1b      	lsrs	r3, r3, #20
 8002b28:	f003 031f 	and.w	r3, r3, #31
 8002b2c:	2107      	movs	r1, #7
 8002b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b32:	43db      	mvns	r3, r3
 8002b34:	401a      	ands	r2, r3
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	0d1b      	lsrs	r3, r3, #20
 8002b3a:	f003 031f 	and.w	r3, r3, #31
 8002b3e:	6879      	ldr	r1, [r7, #4]
 8002b40:	fa01 f303 	lsl.w	r3, r1, r3
 8002b44:	431a      	orrs	r2, r3
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002b4a:	bf00      	nop
 8002b4c:	371c      	adds	r7, #28
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
	...

08002b58 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b085      	sub	sp, #20
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	60b9      	str	r1, [r7, #8]
 8002b62:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b70:	43db      	mvns	r3, r3
 8002b72:	401a      	ands	r2, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f003 0318 	and.w	r3, r3, #24
 8002b7a:	4908      	ldr	r1, [pc, #32]	@ (8002b9c <LL_ADC_SetChannelSingleDiff+0x44>)
 8002b7c:	40d9      	lsrs	r1, r3
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	400b      	ands	r3, r1
 8002b82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b86:	431a      	orrs	r2, r3
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002b8e:	bf00      	nop
 8002b90:	3714      	adds	r7, #20
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	0007ffff 	.word	0x0007ffff

08002ba0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	f003 031f 	and.w	r3, r3, #31
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	370c      	adds	r7, #12
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr

08002bbc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr

08002bd8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002be8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	6093      	str	r3, [r2, #8]
}
 8002bf0:	bf00      	nop
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr

08002bfc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002c0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c10:	d101      	bne.n	8002c16 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002c12:	2301      	movs	r3, #1
 8002c14:	e000      	b.n	8002c18 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002c16:	2300      	movs	r3, #0
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr

08002c24 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002c34:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002c38:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002c40:	bf00      	nop
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c5c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002c60:	d101      	bne.n	8002c66 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002c62:	2301      	movs	r3, #1
 8002c64:	e000      	b.n	8002c68 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002c66:	2300      	movs	r3, #0
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr

08002c74 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002c84:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002c88:	f043 0201 	orr.w	r2, r3, #1
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002c90:	bf00      	nop
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr

08002c9c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002cac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002cb0:	f043 0202 	orr.w	r2, r3, #2
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002cb8:	bf00      	nop
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	f003 0301 	and.w	r3, r3, #1
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d101      	bne.n	8002cdc <LL_ADC_IsEnabled+0x18>
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e000      	b.n	8002cde <LL_ADC_IsEnabled+0x1a>
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	370c      	adds	r7, #12
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr

08002cea <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002cea:	b480      	push	{r7}
 8002cec:	b083      	sub	sp, #12
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d101      	bne.n	8002d02 <LL_ADC_IsDisableOngoing+0x18>
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e000      	b.n	8002d04 <LL_ADC_IsDisableOngoing+0x1a>
 8002d02:	2300      	movs	r3, #0
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002d20:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002d24:	f043 0204 	orr.w	r2, r3, #4
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002d2c:	bf00      	nop
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr

08002d38 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	f003 0304 	and.w	r3, r3, #4
 8002d48:	2b04      	cmp	r3, #4
 8002d4a:	d101      	bne.n	8002d50 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e000      	b.n	8002d52 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	370c      	adds	r7, #12
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr

08002d5e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002d5e:	b480      	push	{r7}
 8002d60:	b083      	sub	sp, #12
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	f003 0308 	and.w	r3, r3, #8
 8002d6e:	2b08      	cmp	r3, #8
 8002d70:	d101      	bne.n	8002d76 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002d72:	2301      	movs	r3, #1
 8002d74:	e000      	b.n	8002d78 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002d76:	2300      	movs	r3, #0
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002d84:	b590      	push	{r4, r7, lr}
 8002d86:	b089      	sub	sp, #36	@ 0x24
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002d90:	2300      	movs	r3, #0
 8002d92:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d101      	bne.n	8002d9e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e167      	b.n	800306e <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d109      	bne.n	8002dc0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f7fe fa93 	bl	80012d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7ff ff19 	bl	8002bfc <LL_ADC_IsDeepPowerDownEnabled>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d004      	beq.n	8002dda <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f7ff feff 	bl	8002bd8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7ff ff34 	bl	8002c4c <LL_ADC_IsInternalRegulatorEnabled>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d115      	bne.n	8002e16 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7ff ff18 	bl	8002c24 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002df4:	4ba0      	ldr	r3, [pc, #640]	@ (8003078 <HAL_ADC_Init+0x2f4>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	099b      	lsrs	r3, r3, #6
 8002dfa:	4aa0      	ldr	r2, [pc, #640]	@ (800307c <HAL_ADC_Init+0x2f8>)
 8002dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8002e00:	099b      	lsrs	r3, r3, #6
 8002e02:	3301      	adds	r3, #1
 8002e04:	005b      	lsls	r3, r3, #1
 8002e06:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002e08:	e002      	b.n	8002e10 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	3b01      	subs	r3, #1
 8002e0e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d1f9      	bne.n	8002e0a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7ff ff16 	bl	8002c4c <LL_ADC_IsInternalRegulatorEnabled>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d10d      	bne.n	8002e42 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e2a:	f043 0210 	orr.w	r2, r3, #16
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e36:	f043 0201 	orr.w	r2, r3, #1
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7ff ff76 	bl	8002d38 <LL_ADC_REG_IsConversionOngoing>
 8002e4c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e52:	f003 0310 	and.w	r3, r3, #16
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	f040 8100 	bne.w	800305c <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	f040 80fc 	bne.w	800305c <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e68:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002e6c:	f043 0202 	orr.w	r2, r3, #2
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7ff ff23 	bl	8002cc4 <LL_ADC_IsEnabled>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d111      	bne.n	8002ea8 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e84:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002e88:	f7ff ff1c 	bl	8002cc4 <LL_ADC_IsEnabled>
 8002e8c:	4604      	mov	r4, r0
 8002e8e:	487c      	ldr	r0, [pc, #496]	@ (8003080 <HAL_ADC_Init+0x2fc>)
 8002e90:	f7ff ff18 	bl	8002cc4 <LL_ADC_IsEnabled>
 8002e94:	4603      	mov	r3, r0
 8002e96:	4323      	orrs	r3, r4
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d105      	bne.n	8002ea8 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	4878      	ldr	r0, [pc, #480]	@ (8003084 <HAL_ADC_Init+0x300>)
 8002ea4:	f7ff fd08 	bl	80028b8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	7f5b      	ldrb	r3, [r3, #29]
 8002eac:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002eb2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002eb8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002ebe:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002ec6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d106      	bne.n	8002ee4 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eda:	3b01      	subs	r3, #1
 8002edc:	045b      	lsls	r3, r3, #17
 8002ede:	69ba      	ldr	r2, [r7, #24]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d009      	beq.n	8002f00 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ef0:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ef8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002efa:	69ba      	ldr	r2, [r7, #24]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	68da      	ldr	r2, [r3, #12]
 8002f06:	4b60      	ldr	r3, [pc, #384]	@ (8003088 <HAL_ADC_Init+0x304>)
 8002f08:	4013      	ands	r3, r2
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	6812      	ldr	r2, [r2, #0]
 8002f0e:	69b9      	ldr	r1, [r7, #24]
 8002f10:	430b      	orrs	r3, r1
 8002f12:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	691b      	ldr	r3, [r3, #16]
 8002f1a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	430a      	orrs	r2, r1
 8002f28:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7ff ff15 	bl	8002d5e <LL_ADC_INJ_IsConversionOngoing>
 8002f34:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d16d      	bne.n	8003018 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d16a      	bne.n	8003018 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002f46:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002f4e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002f50:	4313      	orrs	r3, r2
 8002f52:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002f5e:	f023 0302 	bic.w	r3, r3, #2
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	6812      	ldr	r2, [r2, #0]
 8002f66:	69b9      	ldr	r1, [r7, #24]
 8002f68:	430b      	orrs	r3, r1
 8002f6a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	691b      	ldr	r3, [r3, #16]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d017      	beq.n	8002fa4 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	691a      	ldr	r2, [r3, #16]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002f82:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002f8c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002f90:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	6911      	ldr	r1, [r2, #16]
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	6812      	ldr	r2, [r2, #0]
 8002f9c:	430b      	orrs	r3, r1
 8002f9e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002fa2:	e013      	b.n	8002fcc <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	691a      	ldr	r2, [r3, #16]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002fb2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	6812      	ldr	r2, [r2, #0]
 8002fc0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002fc4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002fc8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d118      	bne.n	8003008 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	691b      	ldr	r3, [r3, #16]
 8002fdc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002fe0:	f023 0304 	bic.w	r3, r3, #4
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002fec:	4311      	orrs	r1, r2
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002ff2:	4311      	orrs	r1, r2
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002ff8:	430a      	orrs	r2, r1
 8002ffa:	431a      	orrs	r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f042 0201 	orr.w	r2, r2, #1
 8003004:	611a      	str	r2, [r3, #16]
 8003006:	e007      	b.n	8003018 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	691a      	ldr	r2, [r3, #16]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f022 0201 	bic.w	r2, r2, #1
 8003016:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	695b      	ldr	r3, [r3, #20]
 800301c:	2b01      	cmp	r3, #1
 800301e:	d10c      	bne.n	800303a <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003026:	f023 010f 	bic.w	r1, r3, #15
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a1b      	ldr	r3, [r3, #32]
 800302e:	1e5a      	subs	r2, r3, #1
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	430a      	orrs	r2, r1
 8003036:	631a      	str	r2, [r3, #48]	@ 0x30
 8003038:	e007      	b.n	800304a <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f022 020f 	bic.w	r2, r2, #15
 8003048:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800304e:	f023 0303 	bic.w	r3, r3, #3
 8003052:	f043 0201 	orr.w	r2, r3, #1
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	65da      	str	r2, [r3, #92]	@ 0x5c
 800305a:	e007      	b.n	800306c <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003060:	f043 0210 	orr.w	r2, r3, #16
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800306c:	7ffb      	ldrb	r3, [r7, #31]
}
 800306e:	4618      	mov	r0, r3
 8003070:	3724      	adds	r7, #36	@ 0x24
 8003072:	46bd      	mov	sp, r7
 8003074:	bd90      	pop	{r4, r7, pc}
 8003076:	bf00      	nop
 8003078:	20000000 	.word	0x20000000
 800307c:	053e2d63 	.word	0x053e2d63
 8003080:	50000100 	.word	0x50000100
 8003084:	50000300 	.word	0x50000300
 8003088:	fff04007 	.word	0xfff04007

0800308c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b086      	sub	sp, #24
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003094:	4859      	ldr	r0, [pc, #356]	@ (80031fc <HAL_ADC_Start+0x170>)
 8003096:	f7ff fd83 	bl	8002ba0 <LL_ADC_GetMultimode>
 800309a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7ff fe49 	bl	8002d38 <LL_ADC_REG_IsConversionOngoing>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	f040 809f 	bne.w	80031ec <HAL_ADC_Start+0x160>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d101      	bne.n	80030bc <HAL_ADC_Start+0x30>
 80030b8:	2302      	movs	r3, #2
 80030ba:	e09a      	b.n	80031f2 <HAL_ADC_Start+0x166>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f000 fed3 	bl	8003e70 <ADC_Enable>
 80030ca:	4603      	mov	r3, r0
 80030cc:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80030ce:	7dfb      	ldrb	r3, [r7, #23]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	f040 8086 	bne.w	80031e2 <HAL_ADC_Start+0x156>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030da:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80030de:	f023 0301 	bic.w	r3, r3, #1
 80030e2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a44      	ldr	r2, [pc, #272]	@ (8003200 <HAL_ADC_Start+0x174>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d002      	beq.n	80030fa <HAL_ADC_Start+0x6e>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	e001      	b.n	80030fe <HAL_ADC_Start+0x72>
 80030fa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	6812      	ldr	r2, [r2, #0]
 8003102:	4293      	cmp	r3, r2
 8003104:	d002      	beq.n	800310c <HAL_ADC_Start+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d105      	bne.n	8003118 <HAL_ADC_Start+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003110:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800311c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003120:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003124:	d106      	bne.n	8003134 <HAL_ADC_Start+0xa8>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800312a:	f023 0206 	bic.w	r2, r3, #6
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	661a      	str	r2, [r3, #96]	@ 0x60
 8003132:	e002      	b.n	800313a <HAL_ADC_Start+0xae>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	221c      	movs	r2, #28
 8003140:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a2c      	ldr	r2, [pc, #176]	@ (8003200 <HAL_ADC_Start+0x174>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d002      	beq.n	800315a <HAL_ADC_Start+0xce>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	e001      	b.n	800315e <HAL_ADC_Start+0xd2>
 800315a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	6812      	ldr	r2, [r2, #0]
 8003162:	4293      	cmp	r3, r2
 8003164:	d008      	beq.n	8003178 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d005      	beq.n	8003178 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	2b05      	cmp	r3, #5
 8003170:	d002      	beq.n	8003178 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	2b09      	cmp	r3, #9
 8003176:	d114      	bne.n	80031a2 <HAL_ADC_Start+0x116>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d007      	beq.n	8003196 <HAL_ADC_Start+0x10a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800318a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800318e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4618      	mov	r0, r3
 800319c:	f7ff fdb8 	bl	8002d10 <LL_ADC_REG_StartConversion>
 80031a0:	e026      	b.n	80031f0 <HAL_ADC_Start+0x164>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031a6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a13      	ldr	r2, [pc, #76]	@ (8003200 <HAL_ADC_Start+0x174>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d002      	beq.n	80031be <HAL_ADC_Start+0x132>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	e001      	b.n	80031c2 <HAL_ADC_Start+0x136>
 80031be:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80031c2:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d00f      	beq.n	80031f0 <HAL_ADC_Start+0x164>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031d4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80031d8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	65da      	str	r2, [r3, #92]	@ 0x5c
 80031e0:	e006      	b.n	80031f0 <HAL_ADC_Start+0x164>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80031ea:	e001      	b.n	80031f0 <HAL_ADC_Start+0x164>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80031ec:	2302      	movs	r3, #2
 80031ee:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80031f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3718      	adds	r7, #24
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	50000300 	.word	0x50000300
 8003200:	50000100 	.word	0x50000100

08003204 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003212:	4618      	mov	r0, r3
 8003214:	370c      	adds	r7, #12
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
	...

08003220 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b08a      	sub	sp, #40	@ 0x28
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003228:	2300      	movs	r3, #0
 800322a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800323c:	4883      	ldr	r0, [pc, #524]	@ (800344c <HAL_ADC_IRQHandler+0x22c>)
 800323e:	f7ff fcaf 	bl	8002ba0 <LL_ADC_GetMultimode>
 8003242:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	2b00      	cmp	r3, #0
 800324c:	d017      	beq.n	800327e <HAL_ADC_IRQHandler+0x5e>
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	f003 0302 	and.w	r3, r3, #2
 8003254:	2b00      	cmp	r3, #0
 8003256:	d012      	beq.n	800327e <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800325c:	f003 0310 	and.w	r3, r3, #16
 8003260:	2b00      	cmp	r3, #0
 8003262:	d105      	bne.n	8003270 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003268:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f001 fa9d 	bl	80047b0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2202      	movs	r2, #2
 800327c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	f003 0304 	and.w	r3, r3, #4
 8003284:	2b00      	cmp	r3, #0
 8003286:	d004      	beq.n	8003292 <HAL_ADC_IRQHandler+0x72>
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	f003 0304 	and.w	r3, r3, #4
 800328e:	2b00      	cmp	r3, #0
 8003290:	d10a      	bne.n	80032a8 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003298:	2b00      	cmp	r3, #0
 800329a:	f000 8085 	beq.w	80033a8 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	f003 0308 	and.w	r3, r3, #8
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d07f      	beq.n	80033a8 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032ac:	f003 0310 	and.w	r3, r3, #16
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d105      	bne.n	80032c0 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032b8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7ff fbc9 	bl	8002a5c <LL_ADC_REG_IsTriggerSourceSWStart>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d064      	beq.n	800339a <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a5e      	ldr	r2, [pc, #376]	@ (8003450 <HAL_ADC_IRQHandler+0x230>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d002      	beq.n	80032e0 <HAL_ADC_IRQHandler+0xc0>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	e001      	b.n	80032e4 <HAL_ADC_IRQHandler+0xc4>
 80032e0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	6812      	ldr	r2, [r2, #0]
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d008      	beq.n	80032fe <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d005      	beq.n	80032fe <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	2b05      	cmp	r3, #5
 80032f6:	d002      	beq.n	80032fe <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	2b09      	cmp	r3, #9
 80032fc:	d104      	bne.n	8003308 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	623b      	str	r3, [r7, #32]
 8003306:	e00d      	b.n	8003324 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a50      	ldr	r2, [pc, #320]	@ (8003450 <HAL_ADC_IRQHandler+0x230>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d002      	beq.n	8003318 <HAL_ADC_IRQHandler+0xf8>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	e001      	b.n	800331c <HAL_ADC_IRQHandler+0xfc>
 8003318:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800331c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003324:	6a3b      	ldr	r3, [r7, #32]
 8003326:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d135      	bne.n	800339a <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0308 	and.w	r3, r3, #8
 8003338:	2b08      	cmp	r3, #8
 800333a:	d12e      	bne.n	800339a <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4618      	mov	r0, r3
 8003342:	f7ff fcf9 	bl	8002d38 <LL_ADC_REG_IsConversionOngoing>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d11a      	bne.n	8003382 <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	685a      	ldr	r2, [r3, #4]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f022 020c 	bic.w	r2, r2, #12
 800335a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003360:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800336c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003370:	2b00      	cmp	r3, #0
 8003372:	d112      	bne.n	800339a <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003378:	f043 0201 	orr.w	r2, r3, #1
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003380:	e00b      	b.n	800339a <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003386:	f043 0210 	orr.w	r2, r3, #16
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003392:	f043 0201 	orr.w	r2, r3, #1
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 f95a 	bl	8003654 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	220c      	movs	r2, #12
 80033a6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	f003 0320 	and.w	r3, r3, #32
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d004      	beq.n	80033bc <HAL_ADC_IRQHandler+0x19c>
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	f003 0320 	and.w	r3, r3, #32
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d10b      	bne.n	80033d4 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	f000 809e 	beq.w	8003504 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80033c8:	69bb      	ldr	r3, [r7, #24]
 80033ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	f000 8098 	beq.w	8003504 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033d8:	f003 0310 	and.w	r3, r3, #16
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d105      	bne.n	80033ec <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033e4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4618      	mov	r0, r3
 80033f2:	f7ff fb72 	bl	8002ada <LL_ADC_INJ_IsTriggerSourceSWStart>
 80033f6:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4618      	mov	r0, r3
 80033fe:	f7ff fb2d 	bl	8002a5c <LL_ADC_REG_IsTriggerSourceSWStart>
 8003402:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a11      	ldr	r2, [pc, #68]	@ (8003450 <HAL_ADC_IRQHandler+0x230>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d002      	beq.n	8003414 <HAL_ADC_IRQHandler+0x1f4>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	e001      	b.n	8003418 <HAL_ADC_IRQHandler+0x1f8>
 8003414:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	6812      	ldr	r2, [r2, #0]
 800341c:	4293      	cmp	r3, r2
 800341e:	d008      	beq.n	8003432 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d005      	beq.n	8003432 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	2b06      	cmp	r3, #6
 800342a:	d002      	beq.n	8003432 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	2b07      	cmp	r3, #7
 8003430:	d104      	bne.n	800343c <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	623b      	str	r3, [r7, #32]
 800343a:	e011      	b.n	8003460 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a03      	ldr	r2, [pc, #12]	@ (8003450 <HAL_ADC_IRQHandler+0x230>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d006      	beq.n	8003454 <HAL_ADC_IRQHandler+0x234>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	e005      	b.n	8003458 <HAL_ADC_IRQHandler+0x238>
 800344c:	50000300 	.word	0x50000300
 8003450:	50000100 	.word	0x50000100
 8003454:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003458:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d047      	beq.n	80034f6 <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003466:	6a3b      	ldr	r3, [r7, #32]
 8003468:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800346c:	2b00      	cmp	r3, #0
 800346e:	d007      	beq.n	8003480 <HAL_ADC_IRQHandler+0x260>
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d03f      	beq.n	80034f6 <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003476:	6a3b      	ldr	r3, [r7, #32]
 8003478:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800347c:	2b00      	cmp	r3, #0
 800347e:	d13a      	bne.n	80034f6 <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800348a:	2b40      	cmp	r3, #64	@ 0x40
 800348c:	d133      	bne.n	80034f6 <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800348e:	6a3b      	ldr	r3, [r7, #32]
 8003490:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d12e      	bne.n	80034f6 <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4618      	mov	r0, r3
 800349e:	f7ff fc5e 	bl	8002d5e <LL_ADC_INJ_IsConversionOngoing>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d11a      	bne.n	80034de <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	685a      	ldr	r2, [r3, #4]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80034b6:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034bc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d112      	bne.n	80034f6 <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034d4:	f043 0201 	orr.w	r2, r3, #1
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	65da      	str	r2, [r3, #92]	@ 0x5c
 80034dc:	e00b      	b.n	80034f6 <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034e2:	f043 0210 	orr.w	r2, r3, #16
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034ee:	f043 0201 	orr.w	r2, r3, #1
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
<<<<<<< HEAD
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f009 ff46 	bl	800d224 <HAL_ADCEx_InjectedConvCpltCallback>
=======
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f00a fe74 	bl	800e1e4 <HAL_ADCEx_InjectedConvCpltCallback>
>>>>>>> f88694781bd54d0bca96bec7ac145bdac62fa329
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2260      	movs	r2, #96	@ 0x60
 8003502:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800350a:	2b00      	cmp	r3, #0
 800350c:	d011      	beq.n	8003532 <HAL_ADC_IRQHandler+0x312>
 800350e:	69bb      	ldr	r3, [r7, #24]
 8003510:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003514:	2b00      	cmp	r3, #0
 8003516:	d00c      	beq.n	8003532 <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800351c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f000 f89f 	bl	8003668 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2280      	movs	r2, #128	@ 0x80
 8003530:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003538:	2b00      	cmp	r3, #0
 800353a:	d012      	beq.n	8003562 <HAL_ADC_IRQHandler+0x342>
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003542:	2b00      	cmp	r3, #0
 8003544:	d00d      	beq.n	8003562 <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800354a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f001 f918 	bl	8004788 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003560:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003568:	2b00      	cmp	r3, #0
 800356a:	d012      	beq.n	8003592 <HAL_ADC_IRQHandler+0x372>
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003572:	2b00      	cmp	r3, #0
 8003574:	d00d      	beq.n	8003592 <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800357a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f001 f90a 	bl	800479c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003590:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	f003 0310 	and.w	r3, r3, #16
 8003598:	2b00      	cmp	r3, #0
 800359a:	d036      	beq.n	800360a <HAL_ADC_IRQHandler+0x3ea>
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	f003 0310 	and.w	r3, r3, #16
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d031      	beq.n	800360a <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d102      	bne.n	80035b4 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 80035ae:	2301      	movs	r3, #1
 80035b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80035b2:	e014      	b.n	80035de <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d008      	beq.n	80035cc <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80035ba:	4825      	ldr	r0, [pc, #148]	@ (8003650 <HAL_ADC_IRQHandler+0x430>)
 80035bc:	f7ff fafe 	bl	8002bbc <LL_ADC_GetMultiDMATransfer>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d00b      	beq.n	80035de <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 80035c6:	2301      	movs	r3, #1
 80035c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80035ca:	e008      	b.n	80035de <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	f003 0301 	and.w	r3, r3, #1
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d001      	beq.n	80035de <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 80035da:	2301      	movs	r3, #1
 80035dc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80035de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d10e      	bne.n	8003602 <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035e8:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035f4:	f043 0202 	orr.w	r2, r3, #2
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f000 f83d 	bl	800367c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	2210      	movs	r2, #16
 8003608:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003610:	2b00      	cmp	r3, #0
 8003612:	d018      	beq.n	8003646 <HAL_ADC_IRQHandler+0x426>
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800361a:	2b00      	cmp	r3, #0
 800361c:	d013      	beq.n	8003646 <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003622:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800362e:	f043 0208 	orr.w	r2, r3, #8
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800363e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f001 f897 	bl	8004774 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003646:	bf00      	nop
 8003648:	3728      	adds	r7, #40	@ 0x28
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	50000300 	.word	0x50000300

08003654 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800365c:	bf00      	nop
 800365e:	370c      	adds	r7, #12
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr

08003668 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003670:	bf00      	nop
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003684:	bf00      	nop
 8003686:	370c      	adds	r7, #12
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr

08003690 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b0b6      	sub	sp, #216	@ 0xd8
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800369a:	2300      	movs	r3, #0
 800369c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80036a0:	2300      	movs	r3, #0
 80036a2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d101      	bne.n	80036b2 <HAL_ADC_ConfigChannel+0x22>
 80036ae:	2302      	movs	r3, #2
 80036b0:	e3c8      	b.n	8003e44 <HAL_ADC_ConfigChannel+0x7b4>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2201      	movs	r2, #1
 80036b6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4618      	mov	r0, r3
 80036c0:	f7ff fb3a 	bl	8002d38 <LL_ADC_REG_IsConversionOngoing>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	f040 83ad 	bne.w	8003e26 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6818      	ldr	r0, [r3, #0]
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	6859      	ldr	r1, [r3, #4]
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	461a      	mov	r2, r3
 80036da:	f7ff f9d2 	bl	8002a82 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4618      	mov	r0, r3
 80036e4:	f7ff fb28 	bl	8002d38 <LL_ADC_REG_IsConversionOngoing>
 80036e8:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4618      	mov	r0, r3
 80036f2:	f7ff fb34 	bl	8002d5e <LL_ADC_INJ_IsConversionOngoing>
 80036f6:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80036fa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	f040 81d9 	bne.w	8003ab6 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003704:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003708:	2b00      	cmp	r3, #0
 800370a:	f040 81d4 	bne.w	8003ab6 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003716:	d10f      	bne.n	8003738 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6818      	ldr	r0, [r3, #0]
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2200      	movs	r2, #0
 8003722:	4619      	mov	r1, r3
 8003724:	f7ff f9ec 	bl	8002b00 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003730:	4618      	mov	r0, r3
 8003732:	f7ff f980 	bl	8002a36 <LL_ADC_SetSamplingTimeCommonConfig>
 8003736:	e00e      	b.n	8003756 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6818      	ldr	r0, [r3, #0]
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	6819      	ldr	r1, [r3, #0]
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	461a      	mov	r2, r3
 8003746:	f7ff f9db 	bl	8002b00 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	2100      	movs	r1, #0
 8003750:	4618      	mov	r0, r3
 8003752:	f7ff f970 	bl	8002a36 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	695a      	ldr	r2, [r3, #20]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	08db      	lsrs	r3, r3, #3
 8003762:	f003 0303 	and.w	r3, r3, #3
 8003766:	005b      	lsls	r3, r3, #1
 8003768:	fa02 f303 	lsl.w	r3, r2, r3
 800376c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	691b      	ldr	r3, [r3, #16]
 8003774:	2b04      	cmp	r3, #4
 8003776:	d022      	beq.n	80037be <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6818      	ldr	r0, [r3, #0]
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	6919      	ldr	r1, [r3, #16]
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003788:	f7ff f8ca 	bl	8002920 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6818      	ldr	r0, [r3, #0]
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	6919      	ldr	r1, [r3, #16]
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	699b      	ldr	r3, [r3, #24]
 8003798:	461a      	mov	r2, r3
 800379a:	f7ff f916 	bl	80029ca <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6818      	ldr	r0, [r3, #0]
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d102      	bne.n	80037b4 <HAL_ADC_ConfigChannel+0x124>
 80037ae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80037b2:	e000      	b.n	80037b6 <HAL_ADC_ConfigChannel+0x126>
 80037b4:	2300      	movs	r3, #0
 80037b6:	461a      	mov	r2, r3
 80037b8:	f7ff f922 	bl	8002a00 <LL_ADC_SetOffsetSaturation>
 80037bc:	e17b      	b.n	8003ab6 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2100      	movs	r1, #0
 80037c4:	4618      	mov	r0, r3
 80037c6:	f7ff f8cf 	bl	8002968 <LL_ADC_GetOffsetChannel>
 80037ca:	4603      	mov	r3, r0
 80037cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d10a      	bne.n	80037ea <HAL_ADC_ConfigChannel+0x15a>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	2100      	movs	r1, #0
 80037da:	4618      	mov	r0, r3
 80037dc:	f7ff f8c4 	bl	8002968 <LL_ADC_GetOffsetChannel>
 80037e0:	4603      	mov	r3, r0
 80037e2:	0e9b      	lsrs	r3, r3, #26
 80037e4:	f003 021f 	and.w	r2, r3, #31
 80037e8:	e01e      	b.n	8003828 <HAL_ADC_ConfigChannel+0x198>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2100      	movs	r1, #0
 80037f0:	4618      	mov	r0, r3
 80037f2:	f7ff f8b9 	bl	8002968 <LL_ADC_GetOffsetChannel>
 80037f6:	4603      	mov	r3, r0
 80037f8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037fc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003800:	fa93 f3a3 	rbit	r3, r3
 8003804:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003808:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800380c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003810:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d101      	bne.n	800381c <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8003818:	2320      	movs	r3, #32
 800381a:	e004      	b.n	8003826 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 800381c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003820:	fab3 f383 	clz	r3, r3
 8003824:	b2db      	uxtb	r3, r3
 8003826:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003830:	2b00      	cmp	r3, #0
 8003832:	d105      	bne.n	8003840 <HAL_ADC_ConfigChannel+0x1b0>
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	0e9b      	lsrs	r3, r3, #26
 800383a:	f003 031f 	and.w	r3, r3, #31
 800383e:	e018      	b.n	8003872 <HAL_ADC_ConfigChannel+0x1e2>
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003848:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800384c:	fa93 f3a3 	rbit	r3, r3
 8003850:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003854:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003858:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800385c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003860:	2b00      	cmp	r3, #0
 8003862:	d101      	bne.n	8003868 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8003864:	2320      	movs	r3, #32
 8003866:	e004      	b.n	8003872 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8003868:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800386c:	fab3 f383 	clz	r3, r3
 8003870:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003872:	429a      	cmp	r2, r3
 8003874:	d106      	bne.n	8003884 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2200      	movs	r2, #0
 800387c:	2100      	movs	r1, #0
 800387e:	4618      	mov	r0, r3
 8003880:	f7ff f888 	bl	8002994 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2101      	movs	r1, #1
 800388a:	4618      	mov	r0, r3
 800388c:	f7ff f86c 	bl	8002968 <LL_ADC_GetOffsetChannel>
 8003890:	4603      	mov	r3, r0
 8003892:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003896:	2b00      	cmp	r3, #0
 8003898:	d10a      	bne.n	80038b0 <HAL_ADC_ConfigChannel+0x220>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	2101      	movs	r1, #1
 80038a0:	4618      	mov	r0, r3
 80038a2:	f7ff f861 	bl	8002968 <LL_ADC_GetOffsetChannel>
 80038a6:	4603      	mov	r3, r0
 80038a8:	0e9b      	lsrs	r3, r3, #26
 80038aa:	f003 021f 	and.w	r2, r3, #31
 80038ae:	e01e      	b.n	80038ee <HAL_ADC_ConfigChannel+0x25e>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2101      	movs	r1, #1
 80038b6:	4618      	mov	r0, r3
 80038b8:	f7ff f856 	bl	8002968 <LL_ADC_GetOffsetChannel>
 80038bc:	4603      	mov	r3, r0
 80038be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80038c6:	fa93 f3a3 	rbit	r3, r3
 80038ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80038ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80038d2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80038d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d101      	bne.n	80038e2 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80038de:	2320      	movs	r3, #32
 80038e0:	e004      	b.n	80038ec <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80038e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80038e6:	fab3 f383 	clz	r3, r3
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d105      	bne.n	8003906 <HAL_ADC_ConfigChannel+0x276>
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	0e9b      	lsrs	r3, r3, #26
 8003900:	f003 031f 	and.w	r3, r3, #31
 8003904:	e018      	b.n	8003938 <HAL_ADC_ConfigChannel+0x2a8>
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800390e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003912:	fa93 f3a3 	rbit	r3, r3
 8003916:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800391a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800391e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003922:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003926:	2b00      	cmp	r3, #0
 8003928:	d101      	bne.n	800392e <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 800392a:	2320      	movs	r3, #32
 800392c:	e004      	b.n	8003938 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 800392e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003932:	fab3 f383 	clz	r3, r3
 8003936:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003938:	429a      	cmp	r2, r3
 800393a:	d106      	bne.n	800394a <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2200      	movs	r2, #0
 8003942:	2101      	movs	r1, #1
 8003944:	4618      	mov	r0, r3
 8003946:	f7ff f825 	bl	8002994 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	2102      	movs	r1, #2
 8003950:	4618      	mov	r0, r3
 8003952:	f7ff f809 	bl	8002968 <LL_ADC_GetOffsetChannel>
 8003956:	4603      	mov	r3, r0
 8003958:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800395c:	2b00      	cmp	r3, #0
 800395e:	d10a      	bne.n	8003976 <HAL_ADC_ConfigChannel+0x2e6>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2102      	movs	r1, #2
 8003966:	4618      	mov	r0, r3
 8003968:	f7fe fffe 	bl	8002968 <LL_ADC_GetOffsetChannel>
 800396c:	4603      	mov	r3, r0
 800396e:	0e9b      	lsrs	r3, r3, #26
 8003970:	f003 021f 	and.w	r2, r3, #31
 8003974:	e01e      	b.n	80039b4 <HAL_ADC_ConfigChannel+0x324>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	2102      	movs	r1, #2
 800397c:	4618      	mov	r0, r3
 800397e:	f7fe fff3 	bl	8002968 <LL_ADC_GetOffsetChannel>
 8003982:	4603      	mov	r3, r0
 8003984:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003988:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800398c:	fa93 f3a3 	rbit	r3, r3
 8003990:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003994:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003998:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800399c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d101      	bne.n	80039a8 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80039a4:	2320      	movs	r3, #32
 80039a6:	e004      	b.n	80039b2 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80039a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80039ac:	fab3 f383 	clz	r3, r3
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d105      	bne.n	80039cc <HAL_ADC_ConfigChannel+0x33c>
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	0e9b      	lsrs	r3, r3, #26
 80039c6:	f003 031f 	and.w	r3, r3, #31
 80039ca:	e016      	b.n	80039fa <HAL_ADC_ConfigChannel+0x36a>
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80039d8:	fa93 f3a3 	rbit	r3, r3
 80039dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80039de:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80039e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80039e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d101      	bne.n	80039f0 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80039ec:	2320      	movs	r3, #32
 80039ee:	e004      	b.n	80039fa <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80039f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80039f4:	fab3 f383 	clz	r3, r3
 80039f8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d106      	bne.n	8003a0c <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2200      	movs	r2, #0
 8003a04:	2102      	movs	r1, #2
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7fe ffc4 	bl	8002994 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2103      	movs	r1, #3
 8003a12:	4618      	mov	r0, r3
 8003a14:	f7fe ffa8 	bl	8002968 <LL_ADC_GetOffsetChannel>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d10a      	bne.n	8003a38 <HAL_ADC_ConfigChannel+0x3a8>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2103      	movs	r1, #3
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f7fe ff9d 	bl	8002968 <LL_ADC_GetOffsetChannel>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	0e9b      	lsrs	r3, r3, #26
 8003a32:	f003 021f 	and.w	r2, r3, #31
 8003a36:	e017      	b.n	8003a68 <HAL_ADC_ConfigChannel+0x3d8>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2103      	movs	r1, #3
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f7fe ff92 	bl	8002968 <LL_ADC_GetOffsetChannel>
 8003a44:	4603      	mov	r3, r0
 8003a46:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a48:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a4a:	fa93 f3a3 	rbit	r3, r3
 8003a4e:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003a50:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003a52:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003a54:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d101      	bne.n	8003a5e <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8003a5a:	2320      	movs	r3, #32
 8003a5c:	e003      	b.n	8003a66 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8003a5e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a60:	fab3 f383 	clz	r3, r3
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d105      	bne.n	8003a80 <HAL_ADC_ConfigChannel+0x3f0>
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	0e9b      	lsrs	r3, r3, #26
 8003a7a:	f003 031f 	and.w	r3, r3, #31
 8003a7e:	e011      	b.n	8003aa4 <HAL_ADC_ConfigChannel+0x414>
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a86:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003a88:	fa93 f3a3 	rbit	r3, r3
 8003a8c:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003a8e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a90:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003a92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d101      	bne.n	8003a9c <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8003a98:	2320      	movs	r3, #32
 8003a9a:	e003      	b.n	8003aa4 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8003a9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a9e:	fab3 f383 	clz	r3, r3
 8003aa2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d106      	bne.n	8003ab6 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2200      	movs	r2, #0
 8003aae:	2103      	movs	r1, #3
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f7fe ff6f 	bl	8002994 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4618      	mov	r0, r3
 8003abc:	f7ff f902 	bl	8002cc4 <LL_ADC_IsEnabled>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	f040 8140 	bne.w	8003d48 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6818      	ldr	r0, [r3, #0]
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	6819      	ldr	r1, [r3, #0]
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	f7ff f83f 	bl	8002b58 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	4a8f      	ldr	r2, [pc, #572]	@ (8003d1c <HAL_ADC_ConfigChannel+0x68c>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	f040 8131 	bne.w	8003d48 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d10b      	bne.n	8003b0e <HAL_ADC_ConfigChannel+0x47e>
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	0e9b      	lsrs	r3, r3, #26
 8003afc:	3301      	adds	r3, #1
 8003afe:	f003 031f 	and.w	r3, r3, #31
 8003b02:	2b09      	cmp	r3, #9
 8003b04:	bf94      	ite	ls
 8003b06:	2301      	movls	r3, #1
 8003b08:	2300      	movhi	r3, #0
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	e019      	b.n	8003b42 <HAL_ADC_ConfigChannel+0x4b2>
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b14:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b16:	fa93 f3a3 	rbit	r3, r3
 8003b1a:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003b1c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b1e:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003b20:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d101      	bne.n	8003b2a <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8003b26:	2320      	movs	r3, #32
 8003b28:	e003      	b.n	8003b32 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8003b2a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b2c:	fab3 f383 	clz	r3, r3
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	3301      	adds	r3, #1
 8003b34:	f003 031f 	and.w	r3, r3, #31
 8003b38:	2b09      	cmp	r3, #9
 8003b3a:	bf94      	ite	ls
 8003b3c:	2301      	movls	r3, #1
 8003b3e:	2300      	movhi	r3, #0
 8003b40:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d079      	beq.n	8003c3a <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d107      	bne.n	8003b62 <HAL_ADC_ConfigChannel+0x4d2>
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	0e9b      	lsrs	r3, r3, #26
 8003b58:	3301      	adds	r3, #1
 8003b5a:	069b      	lsls	r3, r3, #26
 8003b5c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003b60:	e015      	b.n	8003b8e <HAL_ADC_ConfigChannel+0x4fe>
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b6a:	fa93 f3a3 	rbit	r3, r3
 8003b6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003b70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b72:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003b74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d101      	bne.n	8003b7e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8003b7a:	2320      	movs	r3, #32
 8003b7c:	e003      	b.n	8003b86 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8003b7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b80:	fab3 f383 	clz	r3, r3
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	3301      	adds	r3, #1
 8003b88:	069b      	lsls	r3, r3, #26
 8003b8a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d109      	bne.n	8003bae <HAL_ADC_ConfigChannel+0x51e>
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	0e9b      	lsrs	r3, r3, #26
 8003ba0:	3301      	adds	r3, #1
 8003ba2:	f003 031f 	and.w	r3, r3, #31
 8003ba6:	2101      	movs	r1, #1
 8003ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8003bac:	e017      	b.n	8003bde <HAL_ADC_ConfigChannel+0x54e>
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003bb6:	fa93 f3a3 	rbit	r3, r3
 8003bba:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003bbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bbe:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003bc0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d101      	bne.n	8003bca <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8003bc6:	2320      	movs	r3, #32
 8003bc8:	e003      	b.n	8003bd2 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8003bca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003bcc:	fab3 f383 	clz	r3, r3
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	3301      	adds	r3, #1
 8003bd4:	f003 031f 	and.w	r3, r3, #31
 8003bd8:	2101      	movs	r1, #1
 8003bda:	fa01 f303 	lsl.w	r3, r1, r3
 8003bde:	ea42 0103 	orr.w	r1, r2, r3
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d10a      	bne.n	8003c04 <HAL_ADC_ConfigChannel+0x574>
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	0e9b      	lsrs	r3, r3, #26
 8003bf4:	3301      	adds	r3, #1
 8003bf6:	f003 021f 	and.w	r2, r3, #31
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	005b      	lsls	r3, r3, #1
 8003bfe:	4413      	add	r3, r2
 8003c00:	051b      	lsls	r3, r3, #20
 8003c02:	e018      	b.n	8003c36 <HAL_ADC_ConfigChannel+0x5a6>
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c0c:	fa93 f3a3 	rbit	r3, r3
 8003c10:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003c12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c14:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003c16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d101      	bne.n	8003c20 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8003c1c:	2320      	movs	r3, #32
 8003c1e:	e003      	b.n	8003c28 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8003c20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c22:	fab3 f383 	clz	r3, r3
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	3301      	adds	r3, #1
 8003c2a:	f003 021f 	and.w	r2, r3, #31
 8003c2e:	4613      	mov	r3, r2
 8003c30:	005b      	lsls	r3, r3, #1
 8003c32:	4413      	add	r3, r2
 8003c34:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c36:	430b      	orrs	r3, r1
 8003c38:	e081      	b.n	8003d3e <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d107      	bne.n	8003c56 <HAL_ADC_ConfigChannel+0x5c6>
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	0e9b      	lsrs	r3, r3, #26
 8003c4c:	3301      	adds	r3, #1
 8003c4e:	069b      	lsls	r3, r3, #26
 8003c50:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003c54:	e015      	b.n	8003c82 <HAL_ADC_ConfigChannel+0x5f2>
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c5e:	fa93 f3a3 	rbit	r3, r3
 8003c62:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003c64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c66:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003c68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d101      	bne.n	8003c72 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8003c6e:	2320      	movs	r3, #32
 8003c70:	e003      	b.n	8003c7a <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8003c72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c74:	fab3 f383 	clz	r3, r3
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	069b      	lsls	r3, r3, #26
 8003c7e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d109      	bne.n	8003ca2 <HAL_ADC_ConfigChannel+0x612>
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	0e9b      	lsrs	r3, r3, #26
 8003c94:	3301      	adds	r3, #1
 8003c96:	f003 031f 	and.w	r3, r3, #31
 8003c9a:	2101      	movs	r1, #1
 8003c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8003ca0:	e017      	b.n	8003cd2 <HAL_ADC_ConfigChannel+0x642>
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ca8:	6a3b      	ldr	r3, [r7, #32]
 8003caa:	fa93 f3a3 	rbit	r3, r3
 8003cae:	61fb      	str	r3, [r7, #28]
  return result;
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d101      	bne.n	8003cbe <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8003cba:	2320      	movs	r3, #32
 8003cbc:	e003      	b.n	8003cc6 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8003cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc0:	fab3 f383 	clz	r3, r3
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	f003 031f 	and.w	r3, r3, #31
 8003ccc:	2101      	movs	r1, #1
 8003cce:	fa01 f303 	lsl.w	r3, r1, r3
 8003cd2:	ea42 0103 	orr.w	r1, r2, r3
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d10d      	bne.n	8003cfe <HAL_ADC_ConfigChannel+0x66e>
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	0e9b      	lsrs	r3, r3, #26
 8003ce8:	3301      	adds	r3, #1
 8003cea:	f003 021f 	and.w	r2, r3, #31
 8003cee:	4613      	mov	r3, r2
 8003cf0:	005b      	lsls	r3, r3, #1
 8003cf2:	4413      	add	r3, r2
 8003cf4:	3b1e      	subs	r3, #30
 8003cf6:	051b      	lsls	r3, r3, #20
 8003cf8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003cfc:	e01e      	b.n	8003d3c <HAL_ADC_ConfigChannel+0x6ac>
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	fa93 f3a3 	rbit	r3, r3
 8003d0a:	613b      	str	r3, [r7, #16]
  return result;
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003d10:	69bb      	ldr	r3, [r7, #24]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d104      	bne.n	8003d20 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8003d16:	2320      	movs	r3, #32
 8003d18:	e006      	b.n	8003d28 <HAL_ADC_ConfigChannel+0x698>
 8003d1a:	bf00      	nop
 8003d1c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	fab3 f383 	clz	r3, r3
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	3301      	adds	r3, #1
 8003d2a:	f003 021f 	and.w	r2, r3, #31
 8003d2e:	4613      	mov	r3, r2
 8003d30:	005b      	lsls	r3, r3, #1
 8003d32:	4413      	add	r3, r2
 8003d34:	3b1e      	subs	r3, #30
 8003d36:	051b      	lsls	r3, r3, #20
 8003d38:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d3c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003d3e:	683a      	ldr	r2, [r7, #0]
 8003d40:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d42:	4619      	mov	r1, r3
 8003d44:	f7fe fedc 	bl	8002b00 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	4b3f      	ldr	r3, [pc, #252]	@ (8003e4c <HAL_ADC_ConfigChannel+0x7bc>)
 8003d4e:	4013      	ands	r3, r2
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d071      	beq.n	8003e38 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003d54:	483e      	ldr	r0, [pc, #248]	@ (8003e50 <HAL_ADC_ConfigChannel+0x7c0>)
 8003d56:	f7fe fdd5 	bl	8002904 <LL_ADC_GetCommonPathInternalCh>
 8003d5a:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a3c      	ldr	r2, [pc, #240]	@ (8003e54 <HAL_ADC_ConfigChannel+0x7c4>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d004      	beq.n	8003d72 <HAL_ADC_ConfigChannel+0x6e2>
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a3a      	ldr	r2, [pc, #232]	@ (8003e58 <HAL_ADC_ConfigChannel+0x7c8>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d127      	bne.n	8003dc2 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003d72:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003d76:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d121      	bne.n	8003dc2 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d86:	d157      	bne.n	8003e38 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003d88:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003d8c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003d90:	4619      	mov	r1, r3
 8003d92:	482f      	ldr	r0, [pc, #188]	@ (8003e50 <HAL_ADC_ConfigChannel+0x7c0>)
 8003d94:	f7fe fda3 	bl	80028de <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003d98:	4b30      	ldr	r3, [pc, #192]	@ (8003e5c <HAL_ADC_ConfigChannel+0x7cc>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	099b      	lsrs	r3, r3, #6
 8003d9e:	4a30      	ldr	r2, [pc, #192]	@ (8003e60 <HAL_ADC_ConfigChannel+0x7d0>)
 8003da0:	fba2 2303 	umull	r2, r3, r2, r3
 8003da4:	099b      	lsrs	r3, r3, #6
 8003da6:	1c5a      	adds	r2, r3, #1
 8003da8:	4613      	mov	r3, r2
 8003daa:	005b      	lsls	r3, r3, #1
 8003dac:	4413      	add	r3, r2
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003db2:	e002      	b.n	8003dba <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	3b01      	subs	r3, #1
 8003db8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d1f9      	bne.n	8003db4 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003dc0:	e03a      	b.n	8003e38 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a27      	ldr	r2, [pc, #156]	@ (8003e64 <HAL_ADC_ConfigChannel+0x7d4>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d113      	bne.n	8003df4 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003dcc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003dd0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d10d      	bne.n	8003df4 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a22      	ldr	r2, [pc, #136]	@ (8003e68 <HAL_ADC_ConfigChannel+0x7d8>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d02a      	beq.n	8003e38 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003de2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003de6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003dea:	4619      	mov	r1, r3
 8003dec:	4818      	ldr	r0, [pc, #96]	@ (8003e50 <HAL_ADC_ConfigChannel+0x7c0>)
 8003dee:	f7fe fd76 	bl	80028de <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003df2:	e021      	b.n	8003e38 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a1c      	ldr	r2, [pc, #112]	@ (8003e6c <HAL_ADC_ConfigChannel+0x7dc>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d11c      	bne.n	8003e38 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003dfe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003e02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d116      	bne.n	8003e38 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a16      	ldr	r2, [pc, #88]	@ (8003e68 <HAL_ADC_ConfigChannel+0x7d8>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d011      	beq.n	8003e38 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e14:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003e18:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	480c      	ldr	r0, [pc, #48]	@ (8003e50 <HAL_ADC_ConfigChannel+0x7c0>)
 8003e20:	f7fe fd5d 	bl	80028de <LL_ADC_SetCommonPathInternalCh>
 8003e24:	e008      	b.n	8003e38 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e2a:	f043 0220 	orr.w	r2, r3, #32
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003e40:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	37d8      	adds	r7, #216	@ 0xd8
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	80080000 	.word	0x80080000
 8003e50:	50000300 	.word	0x50000300
 8003e54:	c3210000 	.word	0xc3210000
 8003e58:	90c00010 	.word	0x90c00010
 8003e5c:	20000000 	.word	0x20000000
 8003e60:	053e2d63 	.word	0x053e2d63
 8003e64:	c7520000 	.word	0xc7520000
 8003e68:	50000100 	.word	0x50000100
 8003e6c:	cb840000 	.word	0xcb840000

08003e70 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b084      	sub	sp, #16
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4618      	mov	r0, r3
 8003e82:	f7fe ff1f 	bl	8002cc4 <LL_ADC_IsEnabled>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d169      	bne.n	8003f60 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	689a      	ldr	r2, [r3, #8]
 8003e92:	4b36      	ldr	r3, [pc, #216]	@ (8003f6c <ADC_Enable+0xfc>)
 8003e94:	4013      	ands	r3, r2
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d00d      	beq.n	8003eb6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e9e:	f043 0210 	orr.w	r2, r3, #16
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003eaa:	f043 0201 	orr.w	r2, r3, #1
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e055      	b.n	8003f62 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f7fe feda 	bl	8002c74 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003ec0:	482b      	ldr	r0, [pc, #172]	@ (8003f70 <ADC_Enable+0x100>)
 8003ec2:	f7fe fd1f 	bl	8002904 <LL_ADC_GetCommonPathInternalCh>
 8003ec6:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003ec8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d013      	beq.n	8003ef8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003ed0:	4b28      	ldr	r3, [pc, #160]	@ (8003f74 <ADC_Enable+0x104>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	099b      	lsrs	r3, r3, #6
 8003ed6:	4a28      	ldr	r2, [pc, #160]	@ (8003f78 <ADC_Enable+0x108>)
 8003ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8003edc:	099b      	lsrs	r3, r3, #6
 8003ede:	1c5a      	adds	r2, r3, #1
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	005b      	lsls	r3, r3, #1
 8003ee4:	4413      	add	r3, r2
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003eea:	e002      	b.n	8003ef2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	3b01      	subs	r3, #1
 8003ef0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d1f9      	bne.n	8003eec <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003ef8:	f7fe fcd2 	bl	80028a0 <HAL_GetTick>
 8003efc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003efe:	e028      	b.n	8003f52 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4618      	mov	r0, r3
 8003f06:	f7fe fedd 	bl	8002cc4 <LL_ADC_IsEnabled>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d104      	bne.n	8003f1a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4618      	mov	r0, r3
 8003f16:	f7fe fead 	bl	8002c74 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003f1a:	f7fe fcc1 	bl	80028a0 <HAL_GetTick>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	2b02      	cmp	r3, #2
 8003f26:	d914      	bls.n	8003f52 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0301 	and.w	r3, r3, #1
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d00d      	beq.n	8003f52 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f3a:	f043 0210 	orr.w	r2, r3, #16
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f46:	f043 0201 	orr.w	r2, r3, #1
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e007      	b.n	8003f62 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 0301 	and.w	r3, r3, #1
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d1cf      	bne.n	8003f00 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3710      	adds	r7, #16
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	8000003f 	.word	0x8000003f
 8003f70:	50000300 	.word	0x50000300
 8003f74:	20000000 	.word	0x20000000
 8003f78:	053e2d63 	.word	0x053e2d63

08003f7c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f7fe feae 	bl	8002cea <LL_ADC_IsDisableOngoing>
 8003f8e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4618      	mov	r0, r3
 8003f96:	f7fe fe95 	bl	8002cc4 <LL_ADC_IsEnabled>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d047      	beq.n	8004030 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d144      	bne.n	8004030 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	f003 030d 	and.w	r3, r3, #13
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d10c      	bne.n	8003fce <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f7fe fe6f 	bl	8002c9c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	2203      	movs	r2, #3
 8003fc4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003fc6:	f7fe fc6b 	bl	80028a0 <HAL_GetTick>
 8003fca:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003fcc:	e029      	b.n	8004022 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fd2:	f043 0210 	orr.w	r2, r3, #16
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fde:	f043 0201 	orr.w	r2, r3, #1
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e023      	b.n	8004032 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003fea:	f7fe fc59 	bl	80028a0 <HAL_GetTick>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	2b02      	cmp	r3, #2
 8003ff6:	d914      	bls.n	8004022 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	f003 0301 	and.w	r3, r3, #1
 8004002:	2b00      	cmp	r3, #0
 8004004:	d00d      	beq.n	8004022 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800400a:	f043 0210 	orr.w	r2, r3, #16
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004016:	f043 0201 	orr.w	r2, r3, #1
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e007      	b.n	8004032 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	f003 0301 	and.w	r3, r3, #1
 800402c:	2b00      	cmp	r3, #0
 800402e:	d1dc      	bne.n	8003fea <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004030:	2300      	movs	r3, #0
}
 8004032:	4618      	mov	r0, r3
 8004034:	3710      	adds	r7, #16
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}

0800403a <LL_ADC_SetCommonPathInternalCh>:
{
 800403a:	b480      	push	{r7}
 800403c:	b083      	sub	sp, #12
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
 8004042:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	431a      	orrs	r2, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	609a      	str	r2, [r3, #8]
}
 8004054:	bf00      	nop
 8004056:	370c      	adds	r7, #12
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr

08004060 <LL_ADC_GetCommonPathInternalCh>:
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8004070:	4618      	mov	r0, r3
 8004072:	370c      	adds	r7, #12
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr

0800407c <LL_ADC_SetOffset>:
{
 800407c:	b480      	push	{r7}
 800407e:	b087      	sub	sp, #28
 8004080:	af00      	add	r7, sp, #0
 8004082:	60f8      	str	r0, [r7, #12]
 8004084:	60b9      	str	r1, [r7, #8]
 8004086:	607a      	str	r2, [r7, #4]
 8004088:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	3360      	adds	r3, #96	@ 0x60
 800408e:	461a      	mov	r2, r3
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	4413      	add	r3, r2
 8004096:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	4b08      	ldr	r3, [pc, #32]	@ (80040c0 <LL_ADC_SetOffset+0x44>)
 800409e:	4013      	ands	r3, r2
 80040a0:	687a      	ldr	r2, [r7, #4]
 80040a2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80040a6:	683a      	ldr	r2, [r7, #0]
 80040a8:	430a      	orrs	r2, r1
 80040aa:	4313      	orrs	r3, r2
 80040ac:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	601a      	str	r2, [r3, #0]
}
 80040b4:	bf00      	nop
 80040b6:	371c      	adds	r7, #28
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr
 80040c0:	03fff000 	.word	0x03fff000

080040c4 <LL_ADC_GetOffsetChannel>:
{
 80040c4:	b480      	push	{r7}
 80040c6:	b085      	sub	sp, #20
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	3360      	adds	r3, #96	@ 0x60
 80040d2:	461a      	mov	r2, r3
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	4413      	add	r3, r2
 80040da:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3714      	adds	r7, #20
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <LL_ADC_SetOffsetState>:
{
 80040f0:	b480      	push	{r7}
 80040f2:	b087      	sub	sp, #28
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	60f8      	str	r0, [r7, #12]
 80040f8:	60b9      	str	r1, [r7, #8]
 80040fa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	3360      	adds	r3, #96	@ 0x60
 8004100:	461a      	mov	r2, r3
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	4413      	add	r3, r2
 8004108:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	431a      	orrs	r2, r3
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	601a      	str	r2, [r3, #0]
}
 800411a:	bf00      	nop
 800411c:	371c      	adds	r7, #28
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr

08004126 <LL_ADC_SetOffsetSign>:
{
 8004126:	b480      	push	{r7}
 8004128:	b087      	sub	sp, #28
 800412a:	af00      	add	r7, sp, #0
 800412c:	60f8      	str	r0, [r7, #12]
 800412e:	60b9      	str	r1, [r7, #8]
 8004130:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	3360      	adds	r3, #96	@ 0x60
 8004136:	461a      	mov	r2, r3
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	4413      	add	r3, r2
 800413e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	431a      	orrs	r2, r3
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	601a      	str	r2, [r3, #0]
}
 8004150:	bf00      	nop
 8004152:	371c      	adds	r7, #28
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr

0800415c <LL_ADC_SetOffsetSaturation>:
{
 800415c:	b480      	push	{r7}
 800415e:	b087      	sub	sp, #28
 8004160:	af00      	add	r7, sp, #0
 8004162:	60f8      	str	r0, [r7, #12]
 8004164:	60b9      	str	r1, [r7, #8]
 8004166:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	3360      	adds	r3, #96	@ 0x60
 800416c:	461a      	mov	r2, r3
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	4413      	add	r3, r2
 8004174:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	431a      	orrs	r2, r3
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	601a      	str	r2, [r3, #0]
}
 8004186:	bf00      	nop
 8004188:	371c      	adds	r7, #28
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr

08004192 <LL_ADC_SetSamplingTimeCommonConfig>:
{
 8004192:	b480      	push	{r7}
 8004194:	b083      	sub	sp, #12
 8004196:	af00      	add	r7, sp, #0
 8004198:	6078      	str	r0, [r7, #4]
 800419a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	695b      	ldr	r3, [r3, #20]
 80041a0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	431a      	orrs	r2, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	615a      	str	r2, [r3, #20]
}
 80041ac:	bf00      	nop
 80041ae:	370c      	adds	r7, #12
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <LL_ADC_INJ_GetTrigAuto>:
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <LL_ADC_SetChannelSamplingTime>:
{
 80041d4:	b480      	push	{r7}
 80041d6:	b087      	sub	sp, #28
 80041d8:	af00      	add	r7, sp, #0
 80041da:	60f8      	str	r0, [r7, #12]
 80041dc:	60b9      	str	r1, [r7, #8]
 80041de:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	3314      	adds	r3, #20
 80041e4:	461a      	mov	r2, r3
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	0e5b      	lsrs	r3, r3, #25
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	f003 0304 	and.w	r3, r3, #4
 80041f0:	4413      	add	r3, r2
 80041f2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	0d1b      	lsrs	r3, r3, #20
 80041fc:	f003 031f 	and.w	r3, r3, #31
 8004200:	2107      	movs	r1, #7
 8004202:	fa01 f303 	lsl.w	r3, r1, r3
 8004206:	43db      	mvns	r3, r3
 8004208:	401a      	ands	r2, r3
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	0d1b      	lsrs	r3, r3, #20
 800420e:	f003 031f 	and.w	r3, r3, #31
 8004212:	6879      	ldr	r1, [r7, #4]
 8004214:	fa01 f303 	lsl.w	r3, r1, r3
 8004218:	431a      	orrs	r2, r3
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	601a      	str	r2, [r3, #0]
}
 800421e:	bf00      	nop
 8004220:	371c      	adds	r7, #28
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr
	...

0800422c <LL_ADC_SetChannelSingleDiff>:
{
 800422c:	b480      	push	{r7}
 800422e:	b085      	sub	sp, #20
 8004230:	af00      	add	r7, sp, #0
 8004232:	60f8      	str	r0, [r7, #12]
 8004234:	60b9      	str	r1, [r7, #8]
 8004236:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004244:	43db      	mvns	r3, r3
 8004246:	401a      	ands	r2, r3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f003 0318 	and.w	r3, r3, #24
 800424e:	4908      	ldr	r1, [pc, #32]	@ (8004270 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004250:	40d9      	lsrs	r1, r3
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	400b      	ands	r3, r1
 8004256:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800425a:	431a      	orrs	r2, r3
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 8004262:	bf00      	nop
 8004264:	3714      	adds	r7, #20
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop
 8004270:	0007ffff 	.word	0x0007ffff

08004274 <LL_ADC_GetMultimode>:
{
 8004274:	b480      	push	{r7}
 8004276:	b083      	sub	sp, #12
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	f003 031f 	and.w	r3, r3, #31
}
 8004284:	4618      	mov	r0, r3
 8004286:	370c      	adds	r7, #12
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr

08004290 <LL_ADC_IsEnabled>:
{
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	f003 0301 	and.w	r3, r3, #1
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d101      	bne.n	80042a8 <LL_ADC_IsEnabled+0x18>
 80042a4:	2301      	movs	r3, #1
 80042a6:	e000      	b.n	80042aa <LL_ADC_IsEnabled+0x1a>
 80042a8:	2300      	movs	r3, #0
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	370c      	adds	r7, #12
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr

080042b6 <LL_ADC_StartCalibration>:
{
 80042b6:	b480      	push	{r7}
 80042b8:	b083      	sub	sp, #12
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
 80042be:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80042c8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80042cc:	683a      	ldr	r2, [r7, #0]
 80042ce:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80042d2:	4313      	orrs	r3, r2
 80042d4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	609a      	str	r2, [r3, #8]
}
 80042dc:	bf00      	nop
 80042de:	370c      	adds	r7, #12
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr

080042e8 <LL_ADC_IsCalibrationOnGoing>:
{
 80042e8:	b480      	push	{r7}
 80042ea:	b083      	sub	sp, #12
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80042f8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80042fc:	d101      	bne.n	8004302 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80042fe:	2301      	movs	r3, #1
 8004300:	e000      	b.n	8004304 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004302:	2300      	movs	r3, #0
}
 8004304:	4618      	mov	r0, r3
 8004306:	370c      	adds	r7, #12
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr

08004310 <LL_ADC_REG_IsConversionOngoing>:
{
 8004310:	b480      	push	{r7}
 8004312:	b083      	sub	sp, #12
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	f003 0304 	and.w	r3, r3, #4
 8004320:	2b04      	cmp	r3, #4
 8004322:	d101      	bne.n	8004328 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004324:	2301      	movs	r3, #1
 8004326:	e000      	b.n	800432a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	370c      	adds	r7, #12
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr

08004336 <LL_ADC_INJ_StartConversion>:
{
 8004336:	b480      	push	{r7}
 8004338:	b083      	sub	sp, #12
 800433a:	af00      	add	r7, sp, #0
 800433c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004346:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800434a:	f043 0208 	orr.w	r2, r3, #8
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	609a      	str	r2, [r3, #8]
}
 8004352:	bf00      	nop
 8004354:	370c      	adds	r7, #12
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr

0800435e <LL_ADC_INJ_IsConversionOngoing>:
{
 800435e:	b480      	push	{r7}
 8004360:	b083      	sub	sp, #12
 8004362:	af00      	add	r7, sp, #0
 8004364:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	f003 0308 	and.w	r3, r3, #8
 800436e:	2b08      	cmp	r3, #8
 8004370:	d101      	bne.n	8004376 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004372:	2301      	movs	r3, #1
 8004374:	e000      	b.n	8004378 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004376:	2300      	movs	r3, #0
}
 8004378:	4618      	mov	r0, r3
 800437a:	370c      	adds	r7, #12
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr

08004384 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800438e:	2300      	movs	r3, #0
 8004390:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004398:	2b01      	cmp	r3, #1
 800439a:	d101      	bne.n	80043a0 <HAL_ADCEx_Calibration_Start+0x1c>
 800439c:	2302      	movs	r3, #2
 800439e:	e04d      	b.n	800443c <HAL_ADCEx_Calibration_Start+0xb8>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f7ff fde7 	bl	8003f7c <ADC_Disable>
 80043ae:	4603      	mov	r3, r0
 80043b0:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80043b2:	7bfb      	ldrb	r3, [r7, #15]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d136      	bne.n	8004426 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043bc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80043c0:	f023 0302 	bic.w	r3, r3, #2
 80043c4:	f043 0202 	orr.w	r2, r3, #2
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	6839      	ldr	r1, [r7, #0]
 80043d2:	4618      	mov	r0, r3
 80043d4:	f7ff ff6f 	bl	80042b6 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80043d8:	e014      	b.n	8004404 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	3301      	adds	r3, #1
 80043de:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	4a18      	ldr	r2, [pc, #96]	@ (8004444 <HAL_ADCEx_Calibration_Start+0xc0>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d90d      	bls.n	8004404 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043ec:	f023 0312 	bic.w	r3, r3, #18
 80043f0:	f043 0210 	orr.w	r2, r3, #16
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2200      	movs	r2, #0
 80043fc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	e01b      	b.n	800443c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4618      	mov	r0, r3
 800440a:	f7ff ff6d 	bl	80042e8 <LL_ADC_IsCalibrationOnGoing>
 800440e:	4603      	mov	r3, r0
 8004410:	2b00      	cmp	r3, #0
 8004412:	d1e2      	bne.n	80043da <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004418:	f023 0303 	bic.w	r3, r3, #3
 800441c:	f043 0201 	orr.w	r2, r3, #1
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004424:	e005      	b.n	8004432 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800442a:	f043 0210 	orr.w	r2, r3, #16
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800443a:	7bfb      	ldrb	r3, [r7, #15]
}
 800443c:	4618      	mov	r0, r3
 800443e:	3710      	adds	r7, #16
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}
 8004444:	0004de01 	.word	0x0004de01

08004448 <HAL_ADCEx_InjectedStart>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef *hadc)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b086      	sub	sp, #24
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004450:	4853      	ldr	r0, [pc, #332]	@ (80045a0 <HAL_ADCEx_InjectedStart+0x158>)
 8004452:	f7ff ff0f 	bl	8004274 <LL_ADC_GetMultimode>
 8004456:	6178      	str	r0, [r7, #20]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4618      	mov	r0, r3
 800445e:	f7ff ff7e 	bl	800435e <LL_ADC_INJ_IsConversionOngoing>
 8004462:	4603      	mov	r3, r0
 8004464:	2b00      	cmp	r3, #0
 8004466:	d001      	beq.n	800446c <HAL_ADCEx_InjectedStart+0x24>
  {
    return HAL_BUSY;
 8004468:	2302      	movs	r3, #2
 800446a:	e094      	b.n	8004596 <HAL_ADCEx_InjectedStart+0x14e>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	68db      	ldr	r3, [r3, #12]
 8004472:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004476:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800447e:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8004482:	2b00      	cmp	r3, #0
 8004484:	d10a      	bne.n	800449c <HAL_ADCEx_InjectedStart+0x54>
        && (tmp_config_injected_queue == 0UL)
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d107      	bne.n	800449c <HAL_ADCEx_InjectedStart+0x54>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004490:	f043 0220 	orr.w	r2, r3, #32
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e07c      	b.n	8004596 <HAL_ADCEx_InjectedStart+0x14e>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d101      	bne.n	80044aa <HAL_ADCEx_InjectedStart+0x62>
 80044a6:	2302      	movs	r3, #2
 80044a8:	e075      	b.n	8004596 <HAL_ADCEx_InjectedStart+0x14e>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2201      	movs	r2, #1
 80044ae:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f7ff fcdc 	bl	8003e70 <ADC_Enable>
 80044b8:	4603      	mov	r3, r0
 80044ba:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80044bc:	7bfb      	ldrb	r3, [r7, #15]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d164      	bne.n	800458c <HAL_ADCEx_InjectedStart+0x144>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d006      	beq.n	80044dc <HAL_ADCEx_InjectedStart+0x94>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044d2:	f023 0208 	bic.w	r2, r3, #8
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	661a      	str	r2, [r3, #96]	@ 0x60
 80044da:	e002      	b.n	80044e2 <HAL_ADCEx_InjectedStart+0x9a>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044e6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80044ea:	f023 0301 	bic.w	r3, r3, #1
 80044ee:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a2a      	ldr	r2, [pc, #168]	@ (80045a4 <HAL_ADCEx_InjectedStart+0x15c>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d002      	beq.n	8004506 <HAL_ADCEx_InjectedStart+0xbe>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	e001      	b.n	800450a <HAL_ADCEx_InjectedStart+0xc2>
 8004506:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	6812      	ldr	r2, [r2, #0]
 800450e:	4293      	cmp	r3, r2
 8004510:	d002      	beq.n	8004518 <HAL_ADCEx_InjectedStart+0xd0>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d105      	bne.n	8004524 <HAL_ADCEx_InjectedStart+0xdc>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800451c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	2260      	movs	r2, #96	@ 0x60
 800452a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a1a      	ldr	r2, [pc, #104]	@ (80045a4 <HAL_ADCEx_InjectedStart+0x15c>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d002      	beq.n	8004544 <HAL_ADCEx_InjectedStart+0xfc>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	e001      	b.n	8004548 <HAL_ADCEx_InjectedStart+0x100>
 8004544:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	6812      	ldr	r2, [r2, #0]
 800454c:	4293      	cmp	r3, r2
 800454e:	d008      	beq.n	8004562 <HAL_ADCEx_InjectedStart+0x11a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d005      	beq.n	8004562 <HAL_ADCEx_InjectedStart+0x11a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	2b06      	cmp	r3, #6
 800455a:	d002      	beq.n	8004562 <HAL_ADCEx_InjectedStart+0x11a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	2b07      	cmp	r3, #7
 8004560:	d10d      	bne.n	800457e <HAL_ADCEx_InjectedStart+0x136>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4618      	mov	r0, r3
 8004568:	f7ff fe26 	bl	80041b8 <LL_ADC_INJ_GetTrigAuto>
 800456c:	4603      	mov	r3, r0
 800456e:	2b00      	cmp	r3, #0
 8004570:	d110      	bne.n	8004594 <HAL_ADCEx_InjectedStart+0x14c>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4618      	mov	r0, r3
 8004578:	f7ff fedd 	bl	8004336 <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 800457c:	e00a      	b.n	8004594 <HAL_ADCEx_InjectedStart+0x14c>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004582:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	65da      	str	r2, [r3, #92]	@ 0x5c
 800458a:	e003      	b.n	8004594 <HAL_ADCEx_InjectedStart+0x14c>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 8004594:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004596:	4618      	mov	r0, r3
 8004598:	3718      	adds	r7, #24
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
 800459e:	bf00      	nop
 80045a0:	50000300 	.word	0x50000300
 80045a4:	50000100 	.word	0x50000100

080045a8 <HAL_ADCEx_InjectedStart_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef *hadc)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b086      	sub	sp, #24
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80045b0:	486e      	ldr	r0, [pc, #440]	@ (800476c <HAL_ADCEx_InjectedStart_IT+0x1c4>)
 80045b2:	f7ff fe5f 	bl	8004274 <LL_ADC_GetMultimode>
 80045b6:	6178      	str	r0, [r7, #20]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4618      	mov	r0, r3
 80045be:	f7ff fece 	bl	800435e <LL_ADC_INJ_IsConversionOngoing>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d001      	beq.n	80045cc <HAL_ADCEx_InjectedStart_IT+0x24>
  {
    return HAL_BUSY;
 80045c8:	2302      	movs	r3, #2
 80045ca:	e0ca      	b.n	8004762 <HAL_ADCEx_InjectedStart_IT+0x1ba>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80045d6:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045de:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d10a      	bne.n	80045fc <HAL_ADCEx_InjectedStart_IT+0x54>
        && (tmp_config_injected_queue == 0UL)
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d107      	bne.n	80045fc <HAL_ADCEx_InjectedStart_IT+0x54>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045f0:	f043 0220 	orr.w	r2, r3, #32
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e0b2      	b.n	8004762 <HAL_ADCEx_InjectedStart_IT+0x1ba>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004602:	2b01      	cmp	r3, #1
 8004604:	d101      	bne.n	800460a <HAL_ADCEx_InjectedStart_IT+0x62>
 8004606:	2302      	movs	r3, #2
 8004608:	e0ab      	b.n	8004762 <HAL_ADCEx_InjectedStart_IT+0x1ba>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2201      	movs	r2, #1
 800460e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f7ff fc2c 	bl	8003e70 <ADC_Enable>
 8004618:	4603      	mov	r3, r0
 800461a:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800461c:	7bfb      	ldrb	r3, [r7, #15]
 800461e:	2b00      	cmp	r3, #0
 8004620:	f040 809a 	bne.w	8004758 <HAL_ADCEx_InjectedStart_IT+0x1b0>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004628:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800462c:	2b00      	cmp	r3, #0
 800462e:	d006      	beq.n	800463e <HAL_ADCEx_InjectedStart_IT+0x96>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004634:	f023 0208 	bic.w	r2, r3, #8
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	661a      	str	r2, [r3, #96]	@ 0x60
 800463c:	e002      	b.n	8004644 <HAL_ADCEx_InjectedStart_IT+0x9c>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004648:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800464c:	f023 0301 	bic.w	r3, r3, #1
 8004650:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a44      	ldr	r2, [pc, #272]	@ (8004770 <HAL_ADCEx_InjectedStart_IT+0x1c8>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d002      	beq.n	8004668 <HAL_ADCEx_InjectedStart_IT+0xc0>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	e001      	b.n	800466c <HAL_ADCEx_InjectedStart_IT+0xc4>
 8004668:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	6812      	ldr	r2, [r2, #0]
 8004670:	4293      	cmp	r3, r2
 8004672:	d002      	beq.n	800467a <HAL_ADCEx_InjectedStart_IT+0xd2>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d105      	bne.n	8004686 <HAL_ADCEx_InjectedStart_IT+0xde>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800467e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	2260      	movs	r2, #96	@ 0x60
 800468c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2200      	movs	r2, #0
 8004692:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      /* Enable ADC Injected context queue overflow interrupt if this feature   */
      /* is enabled.                                                            */
      if ((hadc->Instance->CFGR & ADC_CFGR_JQM) != 0UL)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d007      	beq.n	80046b4 <HAL_ADCEx_InjectedStart_IT+0x10c>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_FLAG_JQOVF);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	685a      	ldr	r2, [r3, #4]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80046b2:	605a      	str	r2, [r3, #4]
      }

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	699b      	ldr	r3, [r3, #24]
 80046b8:	2b08      	cmp	r3, #8
 80046ba:	d110      	bne.n	80046de <HAL_ADCEx_InjectedStart_IT+0x136>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	685a      	ldr	r2, [r3, #4]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f022 0220 	bic.w	r2, r2, #32
 80046ca:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	685a      	ldr	r2, [r3, #4]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80046da:	605a      	str	r2, [r3, #4]
          break;
 80046dc:	e010      	b.n	8004700 <HAL_ADCEx_InjectedStart_IT+0x158>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	685a      	ldr	r2, [r3, #4]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80046ec:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	685a      	ldr	r2, [r3, #4]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f042 0220 	orr.w	r2, r2, #32
 80046fc:	605a      	str	r2, [r3, #4]
          break;
 80046fe:	bf00      	nop
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a1a      	ldr	r2, [pc, #104]	@ (8004770 <HAL_ADCEx_InjectedStart_IT+0x1c8>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d002      	beq.n	8004710 <HAL_ADCEx_InjectedStart_IT+0x168>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	e001      	b.n	8004714 <HAL_ADCEx_InjectedStart_IT+0x16c>
 8004710:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	6812      	ldr	r2, [r2, #0]
 8004718:	4293      	cmp	r3, r2
 800471a:	d008      	beq.n	800472e <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d005      	beq.n	800472e <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	2b06      	cmp	r3, #6
 8004726:	d002      	beq.n	800472e <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	2b07      	cmp	r3, #7
 800472c:	d10d      	bne.n	800474a <HAL_ADCEx_InjectedStart_IT+0x1a2>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4618      	mov	r0, r3
 8004734:	f7ff fd40 	bl	80041b8 <LL_ADC_INJ_GetTrigAuto>
 8004738:	4603      	mov	r3, r0
 800473a:	2b00      	cmp	r3, #0
 800473c:	d110      	bne.n	8004760 <HAL_ADCEx_InjectedStart_IT+0x1b8>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4618      	mov	r0, r3
 8004744:	f7ff fdf7 	bl	8004336 <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8004748:	e00a      	b.n	8004760 <HAL_ADCEx_InjectedStart_IT+0x1b8>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800474e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004756:	e003      	b.n	8004760 <HAL_ADCEx_InjectedStart_IT+0x1b8>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 8004760:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004762:	4618      	mov	r0, r3
 8004764:	3718      	adds	r7, #24
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
 800476a:	bf00      	nop
 800476c:	50000300 	.word	0x50000300
 8004770:	50000100 	.word	0x50000100

08004774 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004774:	b480      	push	{r7}
 8004776:	b083      	sub	sp, #12
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800477c:	bf00      	nop
 800477e:	370c      	adds	r7, #12
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr

08004788 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004790:	bf00      	nop
 8004792:	370c      	adds	r7, #12
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr

0800479c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800479c:	b480      	push	{r7}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80047a4:	bf00      	nop
 80047a6:	370c      	adds	r7, #12
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr

080047b0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80047b8:	bf00      	nop
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <HAL_ADCEx_InjectedConfigChannel>:
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc,
                                                  const ADC_InjectionConfTypeDef *pConfigInjected)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b0b6      	sub	sp, #216	@ 0xd8
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80047ce:	2300      	movs	r3, #0
 80047d0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 80047d4:	2300      	movs	r3, #0
 80047d6:	60bb      	str	r3, [r7, #8]

  uint32_t tmp_jsqr_context_queue_being_built = 0U;
 80047d8:	2300      	movs	r3, #0
 80047da:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d102      	bne.n	80047ee <HAL_ADCEx_InjectedConfigChannel+0x2a>
 80047e8:	2302      	movs	r3, #2
 80047ea:	f000 bcb5 	b.w	8005158 <HAL_ADCEx_InjectedConfigChannel+0x994>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2201      	movs	r2, #1
 80047f2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	695b      	ldr	r3, [r3, #20]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d003      	beq.n	8004806 <HAL_ADCEx_InjectedConfigChannel+0x42>
      (pConfigInjected->InjectedNbrOfConversion == 1U))
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	6a1b      	ldr	r3, [r3, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8004802:	2b01      	cmp	r3, #1
 8004804:	d130      	bne.n	8004868 <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	2b09      	cmp	r3, #9
 800480c:	d179      	bne.n	8004902 <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004812:	2b00      	cmp	r3, #0
 8004814:	d010      	beq.n	8004838 <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	0e9b      	lsrs	r3, r3, #26
 800481c:	025b      	lsls	r3, r3, #9
 800481e:	f403 5278 	and.w	r2, r3, #15872	@ 0x3e00
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004826:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 800482a:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8004830:	4313      	orrs	r3, r2
 8004832:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004836:	e007      	b.n	8004848 <HAL_ADCEx_InjectedConfigChannel+0x84>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	0e9b      	lsrs	r3, r3, #26
 800483e:	025b      	lsls	r3, r3, #9
 8004840:	f403 5378 	and.w	r3, r3, #15872	@ 0x3e00
 8004844:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_jsqr_context_queue_being_built);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800484e:	4b84      	ldr	r3, [pc, #528]	@ (8004a60 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8004850:	4013      	ands	r3, r2
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	6812      	ldr	r2, [r2, #0]
 8004856:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 800485a:	430b      	orrs	r3, r1
 800485c:	64d3      	str	r3, [r2, #76]	@ 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_jsqr_context_queue_being_built;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004864:	665a      	str	r2, [r3, #100]	@ 0x64
    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8004866:	e04c      	b.n	8004902 <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800486c:	2b00      	cmp	r3, #0
 800486e:	d11d      	bne.n	80048ac <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = pConfigInjected->InjectedNbrOfConversion;
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	6a1a      	ldr	r2, [r3, #32]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	669a      	str	r2, [r3, #104]	@ 0x68
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004882:	2b00      	cmp	r3, #0
 8004884:	d00d      	beq.n	80048a2 <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	6a1b      	ldr	r3, [r3, #32]
 800488a:	1e5a      	subs	r2, r3, #1
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004890:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 8004894:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 800489a:	4313      	orrs	r3, r2
 800489c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80048a0:	e004      	b.n	80048ac <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U));
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	6a1b      	ldr	r3, [r3, #32]
 80048a6:	3b01      	subs	r3, #1
 80048a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, pConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built |= ADC_JSQR_RK(pConfigInjected->InjectedChannel, pConfigInjected->InjectedRank);
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	0e9b      	lsrs	r3, r3, #26
 80048b2:	f003 021f 	and.w	r2, r3, #31
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	f003 031f 	and.w	r3, r3, #31
 80048be:	fa02 f303 	lsl.w	r3, r2, r3
 80048c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80048c6:	4313      	orrs	r3, r2
 80048c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80048d0:	1e5a      	subs	r2, r3, #1
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	669a      	str	r2, [r3, #104]	@ 0x68

    /* 3. tmp_jsqr_context_queue_being_built is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80048da:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80048de:	431a      	orrs	r2, r3
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	665a      	str	r2, [r3, #100]	@ 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d10a      	bne.n	8004902 <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80048f2:	4b5b      	ldr	r3, [pc, #364]	@ (8004a60 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 80048f4:	4013      	ands	r3, r2
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	6e51      	ldr	r1, [r2, #100]	@ 0x64
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	6812      	ldr	r2, [r2, #0]
 80048fe:	430b      	orrs	r3, r1
 8004900:	64d3      	str	r3, [r2, #76]	@ 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4618      	mov	r0, r3
 8004908:	f7ff fd29 	bl	800435e <LL_ADC_INJ_IsConversionOngoing>
 800490c:	4603      	mov	r3, r0
 800490e:	2b00      	cmp	r3, #0
 8004910:	d124      	bne.n	800495c <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (pConfigInjected->AutoInjectedConv == DISABLE)
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004918:	2b00      	cmp	r3, #0
 800491a:	d112      	bne.n	8004942 <HAL_ADCEx_InjectedConfigChannel+0x17e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800492c:	055a      	lsls	r2, r3, #21
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004934:	051b      	lsls	r3, r3, #20
 8004936:	431a      	orrs	r2, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	430a      	orrs	r2, r1
 800493e:	60da      	str	r2, [r3, #12]
 8004940:	e00c      	b.n	800495c <HAL_ADCEx_InjectedConfigChannel+0x198>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8004952:	055a      	lsls	r2, r3, #21
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	430a      	orrs	r2, r1
 800495a:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4618      	mov	r0, r3
 8004962:	f7ff fcd5 	bl	8004310 <LL_ADC_REG_IsConversionOngoing>
 8004966:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4618      	mov	r0, r3
 8004970:	f7ff fcf5 	bl	800435e <LL_ADC_INJ_IsConversionOngoing>
 8004974:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004978:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800497c:	2b00      	cmp	r3, #0
 800497e:	f040 822e 	bne.w	8004dde <HAL_ADCEx_InjectedConfigChannel+0x61a>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004982:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004986:	2b00      	cmp	r3, #0
 8004988:	f040 8229 	bne.w	8004dde <HAL_ADCEx_InjectedConfigChannel+0x61a>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((pConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004990:	2b00      	cmp	r3, #0
 8004992:	d003      	beq.n	800499c <HAL_ADCEx_InjectedConfigChannel+0x1d8>
        || (pConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004998:	2b00      	cmp	r3, #0
 800499a:	d116      	bne.n	80049ca <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d108      	bne.n	80049b8 <HAL_ADCEx_InjectedConfigChannel+0x1f4>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	68da      	ldr	r2, [r3, #12]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 80049b4:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 80049b6:	e01f      	b.n	80049f8 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	68da      	ldr	r2, [r3, #12]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 80049c6:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 80049c8:	e016      	b.n	80049f8 <HAL_ADCEx_InjectedConfigChannel+0x234>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d109      	bne.n	80049e8 <HAL_ADCEx_InjectedConfigChannel+0x224>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049d8:	f043 0220 	orr.w	r2, r3, #32
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	65da      	str	r2, [r3, #92]	@ 0x5c

        tmp_hal_status = HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80049e6:	e007      	b.n	80049f8 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	68da      	ldr	r2, [r3, #12]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 80049f6:	60da      	str	r2, [r3, #12]
      }
    }

    if (pConfigInjected->InjecOversamplingMode == ENABLE)
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d110      	bne.n	8004a24 <HAL_ADCEx_InjectedConfigChannel+0x260>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	691b      	ldr	r3, [r3, #16]
 8004a08:	f423 72ff 	bic.w	r2, r3, #510	@ 0x1fe
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a14:	430b      	orrs	r3, r1
 8004a16:	431a      	orrs	r2, r3
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f042 0202 	orr.w	r2, r2, #2
 8004a20:	611a      	str	r2, [r3, #16]
 8004a22:	e007      	b.n	8004a34 <HAL_ADCEx_InjectedConfigChannel+0x270>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	691a      	ldr	r2, [r3, #16]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f022 0202 	bic.w	r2, r2, #2
 8004a32:	611a      	str	r2, [r3, #16]
    }

    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (pConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004a3c:	d112      	bne.n	8004a64 <HAL_ADCEx_InjectedConfigChannel+0x2a0>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6818      	ldr	r0, [r3, #0]
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	2200      	movs	r2, #0
 8004a48:	4619      	mov	r1, r3
 8004a4a:	f7ff fbc3 	bl	80041d4 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8004a56:	4618      	mov	r0, r3
 8004a58:	f7ff fb9b 	bl	8004192 <LL_ADC_SetSamplingTimeCommonConfig>
 8004a5c:	e011      	b.n	8004a82 <HAL_ADCEx_InjectedConfigChannel+0x2be>
 8004a5e:	bf00      	nop
 8004a60:	04104000 	.word	0x04104000
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6818      	ldr	r0, [r3, #0]
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	6819      	ldr	r1, [r3, #0]
                                    pConfigInjected->InjectedSamplingTime);
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	689b      	ldr	r3, [r3, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 8004a70:	461a      	mov	r2, r3
 8004a72:	f7ff fbaf 	bl	80041d4 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	2100      	movs	r1, #0
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f7ff fb88 	bl	8004192 <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, pConfigInjected->InjectedOffset);
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	695a      	ldr	r2, [r3, #20]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	08db      	lsrs	r3, r3, #3
 8004a8e:	f003 0303 	and.w	r3, r3, #3
 8004a92:	005b      	lsls	r3, r3, #1
 8004a94:	fa02 f303 	lsl.w	r3, r2, r3
 8004a98:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

    if (pConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	691b      	ldr	r3, [r3, #16]
 8004aa0:	2b04      	cmp	r3, #4
 8004aa2:	d022      	beq.n	8004aea <HAL_ADCEx_InjectedConfigChannel+0x326>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedChannel,
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6818      	ldr	r0, [r3, #0]
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	6919      	ldr	r1, [r3, #16]
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004ab4:	f7ff fae2 	bl	800407c <LL_ADC_SetOffset>
                       tmp_offset_shifted);

      /* Set ADC selected offset sign & saturation */
      LL_ADC_SetOffsetSign(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedOffsetSign);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6818      	ldr	r0, [r3, #0]
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	6919      	ldr	r1, [r3, #16]
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	699b      	ldr	r3, [r3, #24]
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	f7ff fb2e 	bl	8004126 <LL_ADC_SetOffsetSign>
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6818      	ldr	r0, [r3, #0]
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	6919      	ldr	r1, [r3, #16]
                                 (pConfigInjected->InjectedOffsetSaturation == ENABLE) ?
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	7f1b      	ldrb	r3, [r3, #28]
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d102      	bne.n	8004ae0 <HAL_ADCEx_InjectedConfigChannel+0x31c>
 8004ada:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004ade:	e000      	b.n	8004ae2 <HAL_ADCEx_InjectedConfigChannel+0x31e>
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	f7ff fb3a 	bl	800415c <LL_ADC_SetOffsetSaturation>
 8004ae8:	e179      	b.n	8004dde <HAL_ADCEx_InjectedConfigChannel+0x61a>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	2100      	movs	r1, #0
 8004af0:	4618      	mov	r0, r3
 8004af2:	f7ff fae7 	bl	80040c4 <LL_ADC_GetOffsetChannel>
 8004af6:	4603      	mov	r3, r0
 8004af8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d10a      	bne.n	8004b16 <HAL_ADCEx_InjectedConfigChannel+0x352>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2100      	movs	r1, #0
 8004b06:	4618      	mov	r0, r3
 8004b08:	f7ff fadc 	bl	80040c4 <LL_ADC_GetOffsetChannel>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	0e9b      	lsrs	r3, r3, #26
 8004b10:	f003 021f 	and.w	r2, r3, #31
 8004b14:	e01e      	b.n	8004b54 <HAL_ADCEx_InjectedConfigChannel+0x390>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	2100      	movs	r1, #0
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f7ff fad1 	bl	80040c4 <LL_ADC_GetOffsetChannel>
 8004b22:	4603      	mov	r3, r0
 8004b24:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b28:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004b2c:	fa93 f3a3 	rbit	r3, r3
 8004b30:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8004b34:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004b38:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8004b3c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d101      	bne.n	8004b48 <HAL_ADCEx_InjectedConfigChannel+0x384>
    return 32U;
 8004b44:	2320      	movs	r3, #32
 8004b46:	e004      	b.n	8004b52 <HAL_ADCEx_InjectedConfigChannel+0x38e>
  return __builtin_clz(value);
 8004b48:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004b4c:	fab3 f383 	clz	r3, r3
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d105      	bne.n	8004b6c <HAL_ADCEx_InjectedConfigChannel+0x3a8>
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	0e9b      	lsrs	r3, r3, #26
 8004b66:	f003 031f 	and.w	r3, r3, #31
 8004b6a:	e018      	b.n	8004b9e <HAL_ADCEx_InjectedConfigChannel+0x3da>
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004b78:	fa93 f3a3 	rbit	r3, r3
 8004b7c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8004b80:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004b84:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8004b88:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d101      	bne.n	8004b94 <HAL_ADCEx_InjectedConfigChannel+0x3d0>
    return 32U;
 8004b90:	2320      	movs	r3, #32
 8004b92:	e004      	b.n	8004b9e <HAL_ADCEx_InjectedConfigChannel+0x3da>
  return __builtin_clz(value);
 8004b94:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004b98:	fab3 f383 	clz	r3, r3
 8004b9c:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d106      	bne.n	8004bb0 <HAL_ADCEx_InjectedConfigChannel+0x3ec>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	2100      	movs	r1, #0
 8004baa:	4618      	mov	r0, r3
 8004bac:	f7ff faa0 	bl	80040f0 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	2101      	movs	r1, #1
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f7ff fa84 	bl	80040c4 <LL_ADC_GetOffsetChannel>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d10a      	bne.n	8004bdc <HAL_ADCEx_InjectedConfigChannel+0x418>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	2101      	movs	r1, #1
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f7ff fa79 	bl	80040c4 <LL_ADC_GetOffsetChannel>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	0e9b      	lsrs	r3, r3, #26
 8004bd6:	f003 021f 	and.w	r2, r3, #31
 8004bda:	e01e      	b.n	8004c1a <HAL_ADCEx_InjectedConfigChannel+0x456>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	2101      	movs	r1, #1
 8004be2:	4618      	mov	r0, r3
 8004be4:	f7ff fa6e 	bl	80040c4 <LL_ADC_GetOffsetChannel>
 8004be8:	4603      	mov	r3, r0
 8004bea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004bf2:	fa93 f3a3 	rbit	r3, r3
 8004bf6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8004bfa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004bfe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8004c02:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d101      	bne.n	8004c0e <HAL_ADCEx_InjectedConfigChannel+0x44a>
    return 32U;
 8004c0a:	2320      	movs	r3, #32
 8004c0c:	e004      	b.n	8004c18 <HAL_ADCEx_InjectedConfigChannel+0x454>
  return __builtin_clz(value);
 8004c0e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004c12:	fab3 f383 	clz	r3, r3
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d105      	bne.n	8004c32 <HAL_ADCEx_InjectedConfigChannel+0x46e>
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	0e9b      	lsrs	r3, r3, #26
 8004c2c:	f003 031f 	and.w	r3, r3, #31
 8004c30:	e018      	b.n	8004c64 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c3a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004c3e:	fa93 f3a3 	rbit	r3, r3
 8004c42:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8004c46:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004c4a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8004c4e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d101      	bne.n	8004c5a <HAL_ADCEx_InjectedConfigChannel+0x496>
    return 32U;
 8004c56:	2320      	movs	r3, #32
 8004c58:	e004      	b.n	8004c64 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
  return __builtin_clz(value);
 8004c5a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004c5e:	fab3 f383 	clz	r3, r3
 8004c62:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d106      	bne.n	8004c76 <HAL_ADCEx_InjectedConfigChannel+0x4b2>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	2101      	movs	r1, #1
 8004c70:	4618      	mov	r0, r3
 8004c72:	f7ff fa3d 	bl	80040f0 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	2102      	movs	r1, #2
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f7ff fa21 	bl	80040c4 <LL_ADC_GetOffsetChannel>
 8004c82:	4603      	mov	r3, r0
 8004c84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d10a      	bne.n	8004ca2 <HAL_ADCEx_InjectedConfigChannel+0x4de>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	2102      	movs	r1, #2
 8004c92:	4618      	mov	r0, r3
 8004c94:	f7ff fa16 	bl	80040c4 <LL_ADC_GetOffsetChannel>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	0e9b      	lsrs	r3, r3, #26
 8004c9c:	f003 021f 	and.w	r2, r3, #31
 8004ca0:	e01e      	b.n	8004ce0 <HAL_ADCEx_InjectedConfigChannel+0x51c>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	2102      	movs	r1, #2
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f7ff fa0b 	bl	80040c4 <LL_ADC_GetOffsetChannel>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cb4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004cb8:	fa93 f3a3 	rbit	r3, r3
 8004cbc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8004cc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004cc4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8004cc8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d101      	bne.n	8004cd4 <HAL_ADCEx_InjectedConfigChannel+0x510>
    return 32U;
 8004cd0:	2320      	movs	r3, #32
 8004cd2:	e004      	b.n	8004cde <HAL_ADCEx_InjectedConfigChannel+0x51a>
  return __builtin_clz(value);
 8004cd4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004cd8:	fab3 f383 	clz	r3, r3
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d105      	bne.n	8004cf8 <HAL_ADCEx_InjectedConfigChannel+0x534>
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	0e9b      	lsrs	r3, r3, #26
 8004cf2:	f003 031f 	and.w	r3, r3, #31
 8004cf6:	e014      	b.n	8004d22 <HAL_ADCEx_InjectedConfigChannel+0x55e>
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cfe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004d00:	fa93 f3a3 	rbit	r3, r3
 8004d04:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8004d06:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004d08:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8004d0c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d101      	bne.n	8004d18 <HAL_ADCEx_InjectedConfigChannel+0x554>
    return 32U;
 8004d14:	2320      	movs	r3, #32
 8004d16:	e004      	b.n	8004d22 <HAL_ADCEx_InjectedConfigChannel+0x55e>
  return __builtin_clz(value);
 8004d18:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004d1c:	fab3 f383 	clz	r3, r3
 8004d20:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d106      	bne.n	8004d34 <HAL_ADCEx_InjectedConfigChannel+0x570>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	2102      	movs	r1, #2
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f7ff f9de 	bl	80040f0 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	2103      	movs	r1, #3
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f7ff f9c2 	bl	80040c4 <LL_ADC_GetOffsetChannel>
 8004d40:	4603      	mov	r3, r0
 8004d42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d10a      	bne.n	8004d60 <HAL_ADCEx_InjectedConfigChannel+0x59c>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	2103      	movs	r1, #3
 8004d50:	4618      	mov	r0, r3
 8004d52:	f7ff f9b7 	bl	80040c4 <LL_ADC_GetOffsetChannel>
 8004d56:	4603      	mov	r3, r0
 8004d58:	0e9b      	lsrs	r3, r3, #26
 8004d5a:	f003 021f 	and.w	r2, r3, #31
 8004d5e:	e017      	b.n	8004d90 <HAL_ADCEx_InjectedConfigChannel+0x5cc>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	2103      	movs	r1, #3
 8004d66:	4618      	mov	r0, r3
 8004d68:	f7ff f9ac 	bl	80040c4 <LL_ADC_GetOffsetChannel>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d70:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004d72:	fa93 f3a3 	rbit	r3, r3
 8004d76:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004d78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d7a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8004d7c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d101      	bne.n	8004d86 <HAL_ADCEx_InjectedConfigChannel+0x5c2>
    return 32U;
 8004d82:	2320      	movs	r3, #32
 8004d84:	e003      	b.n	8004d8e <HAL_ADCEx_InjectedConfigChannel+0x5ca>
  return __builtin_clz(value);
 8004d86:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d88:	fab3 f383 	clz	r3, r3
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d105      	bne.n	8004da8 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	0e9b      	lsrs	r3, r3, #26
 8004da2:	f003 031f 	and.w	r3, r3, #31
 8004da6:	e011      	b.n	8004dcc <HAL_ADCEx_InjectedConfigChannel+0x608>
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004db0:	fa93 f3a3 	rbit	r3, r3
 8004db4:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8004db6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004db8:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8004dba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d101      	bne.n	8004dc4 <HAL_ADCEx_InjectedConfigChannel+0x600>
    return 32U;
 8004dc0:	2320      	movs	r3, #32
 8004dc2:	e003      	b.n	8004dcc <HAL_ADCEx_InjectedConfigChannel+0x608>
  return __builtin_clz(value);
 8004dc4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004dc6:	fab3 f383 	clz	r3, r3
 8004dca:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d106      	bne.n	8004dde <HAL_ADCEx_InjectedConfigChannel+0x61a>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	2103      	movs	r1, #3
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f7ff f989 	bl	80040f0 <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4618      	mov	r0, r3
 8004de4:	f7ff fa54 	bl	8004290 <LL_ADC_IsEnabled>
 8004de8:	4603      	mov	r3, r0
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	f040 8140 	bne.w	8005070 <HAL_ADCEx_InjectedConfigChannel+0x8ac>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6818      	ldr	r0, [r3, #0]
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	6819      	ldr	r1, [r3, #0]
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	461a      	mov	r2, r3
 8004dfe:	f7ff fa15 	bl	800422c <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (pConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	4a8f      	ldr	r2, [pc, #572]	@ (8005044 <HAL_ADCEx_InjectedConfigChannel+0x880>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	f040 8131 	bne.w	8005070 <HAL_ADCEx_InjectedConfigChannel+0x8ac>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6818      	ldr	r0, [r3, #0]
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d10b      	bne.n	8004e36 <HAL_ADCEx_InjectedConfigChannel+0x672>
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	0e9b      	lsrs	r3, r3, #26
 8004e24:	3301      	adds	r3, #1
 8004e26:	f003 031f 	and.w	r3, r3, #31
 8004e2a:	2b09      	cmp	r3, #9
 8004e2c:	bf94      	ite	ls
 8004e2e:	2301      	movls	r3, #1
 8004e30:	2300      	movhi	r3, #0
 8004e32:	b2db      	uxtb	r3, r3
 8004e34:	e019      	b.n	8004e6a <HAL_ADCEx_InjectedConfigChannel+0x6a6>
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e3c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004e3e:	fa93 f3a3 	rbit	r3, r3
 8004e42:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8004e44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e46:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8004e48:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d101      	bne.n	8004e52 <HAL_ADCEx_InjectedConfigChannel+0x68e>
    return 32U;
 8004e4e:	2320      	movs	r3, #32
 8004e50:	e003      	b.n	8004e5a <HAL_ADCEx_InjectedConfigChannel+0x696>
  return __builtin_clz(value);
 8004e52:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004e54:	fab3 f383 	clz	r3, r3
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	3301      	adds	r3, #1
 8004e5c:	f003 031f 	and.w	r3, r3, #31
 8004e60:	2b09      	cmp	r3, #9
 8004e62:	bf94      	ite	ls
 8004e64:	2301      	movls	r3, #1
 8004e66:	2300      	movhi	r3, #0
 8004e68:	b2db      	uxtb	r3, r3
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d079      	beq.n	8004f62 <HAL_ADCEx_InjectedConfigChannel+0x79e>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d107      	bne.n	8004e8a <HAL_ADCEx_InjectedConfigChannel+0x6c6>
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	0e9b      	lsrs	r3, r3, #26
 8004e80:	3301      	adds	r3, #1
 8004e82:	069b      	lsls	r3, r3, #26
 8004e84:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004e88:	e015      	b.n	8004eb6 <HAL_ADCEx_InjectedConfigChannel+0x6f2>
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e92:	fa93 f3a3 	rbit	r3, r3
 8004e96:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8004e98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e9a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8004e9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d101      	bne.n	8004ea6 <HAL_ADCEx_InjectedConfigChannel+0x6e2>
    return 32U;
 8004ea2:	2320      	movs	r3, #32
 8004ea4:	e003      	b.n	8004eae <HAL_ADCEx_InjectedConfigChannel+0x6ea>
  return __builtin_clz(value);
 8004ea6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ea8:	fab3 f383 	clz	r3, r3
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	3301      	adds	r3, #1
 8004eb0:	069b      	lsls	r3, r3, #26
 8004eb2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d109      	bne.n	8004ed6 <HAL_ADCEx_InjectedConfigChannel+0x712>
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	0e9b      	lsrs	r3, r3, #26
 8004ec8:	3301      	adds	r3, #1
 8004eca:	f003 031f 	and.w	r3, r3, #31
 8004ece:	2101      	movs	r1, #1
 8004ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ed4:	e017      	b.n	8004f06 <HAL_ADCEx_InjectedConfigChannel+0x742>
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004edc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ede:	fa93 f3a3 	rbit	r3, r3
 8004ee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8004ee4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ee6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8004ee8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d101      	bne.n	8004ef2 <HAL_ADCEx_InjectedConfigChannel+0x72e>
    return 32U;
 8004eee:	2320      	movs	r3, #32
 8004ef0:	e003      	b.n	8004efa <HAL_ADCEx_InjectedConfigChannel+0x736>
  return __builtin_clz(value);
 8004ef2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ef4:	fab3 f383 	clz	r3, r3
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	3301      	adds	r3, #1
 8004efc:	f003 031f 	and.w	r3, r3, #31
 8004f00:	2101      	movs	r1, #1
 8004f02:	fa01 f303 	lsl.w	r3, r1, r3
 8004f06:	ea42 0103 	orr.w	r1, r2, r3
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d10a      	bne.n	8004f2c <HAL_ADCEx_InjectedConfigChannel+0x768>
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	0e9b      	lsrs	r3, r3, #26
 8004f1c:	3301      	adds	r3, #1
 8004f1e:	f003 021f 	and.w	r2, r3, #31
 8004f22:	4613      	mov	r3, r2
 8004f24:	005b      	lsls	r3, r3, #1
 8004f26:	4413      	add	r3, r2
 8004f28:	051b      	lsls	r3, r3, #20
 8004f2a:	e018      	b.n	8004f5e <HAL_ADCEx_InjectedConfigChannel+0x79a>
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f34:	fa93 f3a3 	rbit	r3, r3
 8004f38:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8004f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f3c:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8004f3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d101      	bne.n	8004f48 <HAL_ADCEx_InjectedConfigChannel+0x784>
    return 32U;
 8004f44:	2320      	movs	r3, #32
 8004f46:	e003      	b.n	8004f50 <HAL_ADCEx_InjectedConfigChannel+0x78c>
  return __builtin_clz(value);
 8004f48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f4a:	fab3 f383 	clz	r3, r3
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	3301      	adds	r3, #1
 8004f52:	f003 021f 	and.w	r2, r3, #31
 8004f56:	4613      	mov	r3, r2
 8004f58:	005b      	lsls	r3, r3, #1
 8004f5a:	4413      	add	r3, r2
 8004f5c:	051b      	lsls	r3, r3, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f5e:	430b      	orrs	r3, r1
 8004f60:	e081      	b.n	8005066 <HAL_ADCEx_InjectedConfigChannel+0x8a2>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d107      	bne.n	8004f7e <HAL_ADCEx_InjectedConfigChannel+0x7ba>
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	0e9b      	lsrs	r3, r3, #26
 8004f74:	3301      	adds	r3, #1
 8004f76:	069b      	lsls	r3, r3, #26
 8004f78:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004f7c:	e015      	b.n	8004faa <HAL_ADCEx_InjectedConfigChannel+0x7e6>
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f86:	fa93 f3a3 	rbit	r3, r3
 8004f8a:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8004f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8004f90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d101      	bne.n	8004f9a <HAL_ADCEx_InjectedConfigChannel+0x7d6>
    return 32U;
 8004f96:	2320      	movs	r3, #32
 8004f98:	e003      	b.n	8004fa2 <HAL_ADCEx_InjectedConfigChannel+0x7de>
  return __builtin_clz(value);
 8004f9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f9c:	fab3 f383 	clz	r3, r3
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	3301      	adds	r3, #1
 8004fa4:	069b      	lsls	r3, r3, #26
 8004fa6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d109      	bne.n	8004fca <HAL_ADCEx_InjectedConfigChannel+0x806>
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	0e9b      	lsrs	r3, r3, #26
 8004fbc:	3301      	adds	r3, #1
 8004fbe:	f003 031f 	and.w	r3, r3, #31
 8004fc2:	2101      	movs	r1, #1
 8004fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8004fc8:	e017      	b.n	8004ffa <HAL_ADCEx_InjectedConfigChannel+0x836>
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fd0:	69fb      	ldr	r3, [r7, #28]
 8004fd2:	fa93 f3a3 	rbit	r3, r3
 8004fd6:	61bb      	str	r3, [r7, #24]
  return result;
 8004fd8:	69bb      	ldr	r3, [r7, #24]
 8004fda:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004fdc:	6a3b      	ldr	r3, [r7, #32]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d101      	bne.n	8004fe6 <HAL_ADCEx_InjectedConfigChannel+0x822>
    return 32U;
 8004fe2:	2320      	movs	r3, #32
 8004fe4:	e003      	b.n	8004fee <HAL_ADCEx_InjectedConfigChannel+0x82a>
  return __builtin_clz(value);
 8004fe6:	6a3b      	ldr	r3, [r7, #32]
 8004fe8:	fab3 f383 	clz	r3, r3
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	3301      	adds	r3, #1
 8004ff0:	f003 031f 	and.w	r3, r3, #31
 8004ff4:	2101      	movs	r1, #1
 8004ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8004ffa:	ea42 0103 	orr.w	r1, r2, r3
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005006:	2b00      	cmp	r3, #0
 8005008:	d10d      	bne.n	8005026 <HAL_ADCEx_InjectedConfigChannel+0x862>
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	0e9b      	lsrs	r3, r3, #26
 8005010:	3301      	adds	r3, #1
 8005012:	f003 021f 	and.w	r2, r3, #31
 8005016:	4613      	mov	r3, r2
 8005018:	005b      	lsls	r3, r3, #1
 800501a:	4413      	add	r3, r2
 800501c:	3b1e      	subs	r3, #30
 800501e:	051b      	lsls	r3, r3, #20
 8005020:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005024:	e01e      	b.n	8005064 <HAL_ADCEx_InjectedConfigChannel+0x8a0>
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	fa93 f3a3 	rbit	r3, r3
 8005032:	60fb      	str	r3, [r7, #12]
  return result;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d104      	bne.n	8005048 <HAL_ADCEx_InjectedConfigChannel+0x884>
    return 32U;
 800503e:	2320      	movs	r3, #32
 8005040:	e006      	b.n	8005050 <HAL_ADCEx_InjectedConfigChannel+0x88c>
 8005042:	bf00      	nop
 8005044:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	fab3 f383 	clz	r3, r3
 800504e:	b2db      	uxtb	r3, r3
 8005050:	3301      	adds	r3, #1
 8005052:	f003 021f 	and.w	r2, r3, #31
 8005056:	4613      	mov	r3, r2
 8005058:	005b      	lsls	r3, r3, #1
 800505a:	4413      	add	r3, r2
 800505c:	3b1e      	subs	r3, #30
 800505e:	051b      	lsls	r3, r3, #20
 8005060:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005064:	430b      	orrs	r3, r1
                                                 (__LL_ADC_CHANNEL_TO_DECIMAL_NB(
                                                    (uint32_t)pConfigInjected->InjectedChannel)
                                                  + 1UL) & 0x1FUL)),
                                    pConfigInjected->InjectedSamplingTime);
 8005066:	683a      	ldr	r2, [r7, #0]
 8005068:	6892      	ldr	r2, [r2, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800506a:	4619      	mov	r1, r3
 800506c:	f7ff f8b2 	bl	80041d4 <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfigInjected->InjectedChannel))
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	4b3a      	ldr	r3, [pc, #232]	@ (8005160 <HAL_ADCEx_InjectedConfigChannel+0x99c>)
 8005076:	4013      	ands	r3, r2
 8005078:	2b00      	cmp	r3, #0
 800507a:	d067      	beq.n	800514c <HAL_ADCEx_InjectedConfigChannel+0x988>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800507c:	4839      	ldr	r0, [pc, #228]	@ (8005164 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 800507e:	f7fe ffef 	bl	8004060 <LL_ADC_GetCommonPathInternalCh>
 8005082:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a37      	ldr	r2, [pc, #220]	@ (8005168 <HAL_ADCEx_InjectedConfigChannel+0x9a4>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d004      	beq.n	800509a <HAL_ADCEx_InjectedConfigChannel+0x8d6>
         || (pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a35      	ldr	r2, [pc, #212]	@ (800516c <HAL_ADCEx_InjectedConfigChannel+0x9a8>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d127      	bne.n	80050ea <HAL_ADCEx_InjectedConfigChannel+0x926>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800509a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800509e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d121      	bne.n	80050ea <HAL_ADCEx_InjectedConfigChannel+0x926>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80050ae:	d14d      	bne.n	800514c <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80050b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80050b4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80050b8:	4619      	mov	r1, r3
 80050ba:	482a      	ldr	r0, [pc, #168]	@ (8005164 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 80050bc:	f7fe ffbd 	bl	800403a <LL_ADC_SetCommonPathInternalCh>
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                           * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 80050c0:	4b2b      	ldr	r3, [pc, #172]	@ (8005170 <HAL_ADCEx_InjectedConfigChannel+0x9ac>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	099b      	lsrs	r3, r3, #6
 80050c6:	4a2b      	ldr	r2, [pc, #172]	@ (8005174 <HAL_ADCEx_InjectedConfigChannel+0x9b0>)
 80050c8:	fba2 2303 	umull	r2, r3, r2, r3
 80050cc:	099a      	lsrs	r2, r3, #6
 80050ce:	4613      	mov	r3, r2
 80050d0:	005b      	lsls	r3, r3, #1
 80050d2:	4413      	add	r3, r2
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	3318      	adds	r3, #24
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 80050d8:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 80050da:	e002      	b.n	80050e2 <HAL_ADCEx_InjectedConfigChannel+0x91e>
        {
          wait_loop_index--;
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	3b01      	subs	r3, #1
 80050e0:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d1f9      	bne.n	80050dc <HAL_ADCEx_InjectedConfigChannel+0x918>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80050e8:	e030      	b.n	800514c <HAL_ADCEx_InjectedConfigChannel+0x988>
        }
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a22      	ldr	r2, [pc, #136]	@ (8005178 <HAL_ADCEx_InjectedConfigChannel+0x9b4>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d113      	bne.n	800511c <HAL_ADCEx_InjectedConfigChannel+0x958>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80050f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80050f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d10d      	bne.n	800511c <HAL_ADCEx_InjectedConfigChannel+0x958>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a1d      	ldr	r2, [pc, #116]	@ (800517c <HAL_ADCEx_InjectedConfigChannel+0x9b8>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d020      	beq.n	800514c <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800510a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800510e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005112:	4619      	mov	r1, r3
 8005114:	4813      	ldr	r0, [pc, #76]	@ (8005164 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8005116:	f7fe ff90 	bl	800403a <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800511a:	e017      	b.n	800514c <HAL_ADCEx_InjectedConfigChannel+0x988>
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a17      	ldr	r2, [pc, #92]	@ (8005180 <HAL_ADCEx_InjectedConfigChannel+0x9bc>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d112      	bne.n	800514c <HAL_ADCEx_InjectedConfigChannel+0x988>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005126:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800512a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800512e:	2b00      	cmp	r3, #0
 8005130:	d10c      	bne.n	800514c <HAL_ADCEx_InjectedConfigChannel+0x988>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a11      	ldr	r2, [pc, #68]	@ (800517c <HAL_ADCEx_InjectedConfigChannel+0x9b8>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d007      	beq.n	800514c <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800513c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005140:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005144:	4619      	mov	r1, r3
 8005146:	4807      	ldr	r0, [pc, #28]	@ (8005164 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8005148:	f7fe ff77 	bl	800403a <LL_ADC_SetCommonPathInternalCh>
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2200      	movs	r2, #0
 8005150:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005154:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8005158:	4618      	mov	r0, r3
 800515a:	37d8      	adds	r7, #216	@ 0xd8
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}
 8005160:	80080000 	.word	0x80080000
 8005164:	50000300 	.word	0x50000300
 8005168:	c3210000 	.word	0xc3210000
 800516c:	90c00010 	.word	0x90c00010
 8005170:	20000000 	.word	0x20000000
 8005174:	053e2d63 	.word	0x053e2d63
 8005178:	c7520000 	.word	0xc7520000
 800517c:	50000100 	.word	0x50000100
 8005180:	cb840000 	.word	0xcb840000

08005184 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8005184:	b590      	push	{r4, r7, lr}
 8005186:	b0a1      	sub	sp, #132	@ 0x84
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800518e:	2300      	movs	r3, #0
 8005190:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800519a:	2b01      	cmp	r3, #1
 800519c:	d101      	bne.n	80051a2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800519e:	2302      	movs	r3, #2
 80051a0:	e08b      	b.n	80052ba <HAL_ADCEx_MultiModeConfigChannel+0x136>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2201      	movs	r2, #1
 80051a6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80051aa:	2300      	movs	r3, #0
 80051ac:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80051ae:	2300      	movs	r3, #0
 80051b0:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80051ba:	d102      	bne.n	80051c2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80051bc:	4b41      	ldr	r3, [pc, #260]	@ (80052c4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80051be:	60bb      	str	r3, [r7, #8]
 80051c0:	e001      	b.n	80051c6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80051c2:	2300      	movs	r3, #0
 80051c4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d10b      	bne.n	80051e4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051d0:	f043 0220 	orr.w	r2, r3, #32
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2200      	movs	r2, #0
 80051dc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	e06a      	b.n	80052ba <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	4618      	mov	r0, r3
 80051e8:	f7ff f892 	bl	8004310 <LL_ADC_REG_IsConversionOngoing>
 80051ec:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4618      	mov	r0, r3
 80051f4:	f7ff f88c 	bl	8004310 <LL_ADC_REG_IsConversionOngoing>
 80051f8:	4603      	mov	r3, r0
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d14c      	bne.n	8005298 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80051fe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005200:	2b00      	cmp	r3, #0
 8005202:	d149      	bne.n	8005298 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005204:	4b30      	ldr	r3, [pc, #192]	@ (80052c8 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8005206:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d028      	beq.n	8005262 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005210:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	6859      	ldr	r1, [r3, #4]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005222:	035b      	lsls	r3, r3, #13
 8005224:	430b      	orrs	r3, r1
 8005226:	431a      	orrs	r2, r3
 8005228:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800522a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800522c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005230:	f7ff f82e 	bl	8004290 <LL_ADC_IsEnabled>
 8005234:	4604      	mov	r4, r0
 8005236:	4823      	ldr	r0, [pc, #140]	@ (80052c4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8005238:	f7ff f82a 	bl	8004290 <LL_ADC_IsEnabled>
 800523c:	4603      	mov	r3, r0
 800523e:	4323      	orrs	r3, r4
 8005240:	2b00      	cmp	r3, #0
 8005242:	d133      	bne.n	80052ac <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005244:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800524c:	f023 030f 	bic.w	r3, r3, #15
 8005250:	683a      	ldr	r2, [r7, #0]
 8005252:	6811      	ldr	r1, [r2, #0]
 8005254:	683a      	ldr	r2, [r7, #0]
 8005256:	6892      	ldr	r2, [r2, #8]
 8005258:	430a      	orrs	r2, r1
 800525a:	431a      	orrs	r2, r3
 800525c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800525e:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005260:	e024      	b.n	80052ac <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005262:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800526a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800526c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800526e:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005272:	f7ff f80d 	bl	8004290 <LL_ADC_IsEnabled>
 8005276:	4604      	mov	r4, r0
 8005278:	4812      	ldr	r0, [pc, #72]	@ (80052c4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800527a:	f7ff f809 	bl	8004290 <LL_ADC_IsEnabled>
 800527e:	4603      	mov	r3, r0
 8005280:	4323      	orrs	r3, r4
 8005282:	2b00      	cmp	r3, #0
 8005284:	d112      	bne.n	80052ac <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005286:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800528e:	f023 030f 	bic.w	r3, r3, #15
 8005292:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005294:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005296:	e009      	b.n	80052ac <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800529c:	f043 0220 	orr.w	r2, r3, #32
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80052aa:	e000      	b.n	80052ae <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80052ac:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2200      	movs	r2, #0
 80052b2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80052b6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3784      	adds	r7, #132	@ 0x84
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd90      	pop	{r4, r7, pc}
 80052c2:	bf00      	nop
 80052c4:	50000100 	.word	0x50000100
 80052c8:	50000300 	.word	0x50000300

080052cc <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b083      	sub	sp, #12
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80052d4:	4b05      	ldr	r3, [pc, #20]	@ (80052ec <LL_EXTI_EnableIT_0_31+0x20>)
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	4904      	ldr	r1, [pc, #16]	@ (80052ec <LL_EXTI_EnableIT_0_31+0x20>)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	4313      	orrs	r3, r2
 80052de:	600b      	str	r3, [r1, #0]
}
 80052e0:	bf00      	nop
 80052e2:	370c      	adds	r7, #12
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr
 80052ec:	40010400 	.word	0x40010400

080052f0 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b083      	sub	sp, #12
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80052f8:	4b06      	ldr	r3, [pc, #24]	@ (8005314 <LL_EXTI_DisableIT_0_31+0x24>)
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	43db      	mvns	r3, r3
 8005300:	4904      	ldr	r1, [pc, #16]	@ (8005314 <LL_EXTI_DisableIT_0_31+0x24>)
 8005302:	4013      	ands	r3, r2
 8005304:	600b      	str	r3, [r1, #0]
}
 8005306:	bf00      	nop
 8005308:	370c      	adds	r7, #12
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr
 8005312:	bf00      	nop
 8005314:	40010400 	.word	0x40010400

08005318 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8005318:	b480      	push	{r7}
 800531a:	b083      	sub	sp, #12
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8005320:	4b05      	ldr	r3, [pc, #20]	@ (8005338 <LL_EXTI_EnableEvent_0_31+0x20>)
 8005322:	685a      	ldr	r2, [r3, #4]
 8005324:	4904      	ldr	r1, [pc, #16]	@ (8005338 <LL_EXTI_EnableEvent_0_31+0x20>)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4313      	orrs	r3, r2
 800532a:	604b      	str	r3, [r1, #4]

}
 800532c:	bf00      	nop
 800532e:	370c      	adds	r7, #12
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr
 8005338:	40010400 	.word	0x40010400

0800533c <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 800533c:	b480      	push	{r7}
 800533e:	b083      	sub	sp, #12
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8005344:	4b06      	ldr	r3, [pc, #24]	@ (8005360 <LL_EXTI_DisableEvent_0_31+0x24>)
 8005346:	685a      	ldr	r2, [r3, #4]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	43db      	mvns	r3, r3
 800534c:	4904      	ldr	r1, [pc, #16]	@ (8005360 <LL_EXTI_DisableEvent_0_31+0x24>)
 800534e:	4013      	ands	r3, r2
 8005350:	604b      	str	r3, [r1, #4]
}
 8005352:	bf00      	nop
 8005354:	370c      	adds	r7, #12
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr
 800535e:	bf00      	nop
 8005360:	40010400 	.word	0x40010400

08005364 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8005364:	b480      	push	{r7}
 8005366:	b083      	sub	sp, #12
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800536c:	4b05      	ldr	r3, [pc, #20]	@ (8005384 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800536e:	689a      	ldr	r2, [r3, #8]
 8005370:	4904      	ldr	r1, [pc, #16]	@ (8005384 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4313      	orrs	r3, r2
 8005376:	608b      	str	r3, [r1, #8]

}
 8005378:	bf00      	nop
 800537a:	370c      	adds	r7, #12
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr
 8005384:	40010400 	.word	0x40010400

08005388 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8005388:	b480      	push	{r7}
 800538a:	b083      	sub	sp, #12
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8005390:	4b06      	ldr	r3, [pc, #24]	@ (80053ac <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8005392:	689a      	ldr	r2, [r3, #8]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	43db      	mvns	r3, r3
 8005398:	4904      	ldr	r1, [pc, #16]	@ (80053ac <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800539a:	4013      	ands	r3, r2
 800539c:	608b      	str	r3, [r1, #8]

}
 800539e:	bf00      	nop
 80053a0:	370c      	adds	r7, #12
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr
 80053aa:	bf00      	nop
 80053ac:	40010400 	.word	0x40010400

080053b0 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b083      	sub	sp, #12
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80053b8:	4b05      	ldr	r3, [pc, #20]	@ (80053d0 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80053ba:	68da      	ldr	r2, [r3, #12]
 80053bc:	4904      	ldr	r1, [pc, #16]	@ (80053d0 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4313      	orrs	r3, r2
 80053c2:	60cb      	str	r3, [r1, #12]
}
 80053c4:	bf00      	nop
 80053c6:	370c      	adds	r7, #12
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr
 80053d0:	40010400 	.word	0x40010400

080053d4 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80053dc:	4b06      	ldr	r3, [pc, #24]	@ (80053f8 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80053de:	68da      	ldr	r2, [r3, #12]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	43db      	mvns	r3, r3
 80053e4:	4904      	ldr	r1, [pc, #16]	@ (80053f8 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80053e6:	4013      	ands	r3, r2
 80053e8:	60cb      	str	r3, [r1, #12]
}
 80053ea:	bf00      	nop
 80053ec:	370c      	adds	r7, #12
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr
 80053f6:	bf00      	nop
 80053f8:	40010400 	.word	0x40010400

080053fc <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b083      	sub	sp, #12
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8005404:	4b07      	ldr	r3, [pc, #28]	@ (8005424 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8005406:	695a      	ldr	r2, [r3, #20]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	4013      	ands	r3, r2
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	429a      	cmp	r2, r3
 8005410:	d101      	bne.n	8005416 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8005412:	2301      	movs	r3, #1
 8005414:	e000      	b.n	8005418 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8005416:	2300      	movs	r3, #0
}
 8005418:	4618      	mov	r0, r3
 800541a:	370c      	adds	r7, #12
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr
 8005424:	40010400 	.word	0x40010400

08005428 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8005428:	b480      	push	{r7}
 800542a:	b083      	sub	sp, #12
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8005430:	4a04      	ldr	r2, [pc, #16]	@ (8005444 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6153      	str	r3, [r2, #20]
}
 8005436:	bf00      	nop
 8005438:	370c      	adds	r7, #12
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr
 8005442:	bf00      	nop
 8005444:	40010400 	.word	0x40010400

08005448 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b088      	sub	sp, #32
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8005450:	2300      	movs	r3, #0
 8005452:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8005454:	2300      	movs	r3, #0
 8005456:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d102      	bne.n	8005464 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	77fb      	strb	r3, [r7, #31]
 8005462:	e0bc      	b.n	80055de <HAL_COMP_Init+0x196>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800546e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005472:	d102      	bne.n	800547a <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	77fb      	strb	r3, [r7, #31]
 8005478:	e0b1      	b.n	80055de <HAL_COMP_Init+0x196>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if (hcomp->State == HAL_COMP_STATE_RESET)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	7f5b      	ldrb	r3, [r3, #29]
 800547e:	b2db      	uxtb	r3, r3
 8005480:	2b00      	cmp	r3, #0
 8005482:	d108      	bne.n	8005496 <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2200      	movs	r2, #0
 8005488:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2200      	movs	r2, #0
 800548e:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f7fc f817 	bl	80014c4 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80054a0:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.InputMinus
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	695b      	ldr	r3, [r3, #20]
 80054b0:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	68db      	ldr	r3, [r3, #12]
 80054b6:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (hcomp->Init.InputMinus
 80054bc:	4313      	orrs	r3, r2
 80054be:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	4b48      	ldr	r3, [pc, #288]	@ (80055e8 <HAL_COMP_Init+0x1a0>)
 80054c8:	4013      	ands	r3, r2
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	6812      	ldr	r2, [r2, #0]
 80054ce:	6979      	ldr	r1, [r7, #20]
 80054d0:	430b      	orrs	r3, r1
 80054d2:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d016      	beq.n	8005510 <HAL_COMP_Init+0xc8>
 80054e2:	69bb      	ldr	r3, [r7, #24]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d113      	bne.n	8005510 <HAL_COMP_Init+0xc8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80054e8:	4b40      	ldr	r3, [pc, #256]	@ (80055ec <HAL_COMP_Init+0x1a4>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	099b      	lsrs	r3, r3, #6
 80054ee:	4a40      	ldr	r2, [pc, #256]	@ (80055f0 <HAL_COMP_Init+0x1a8>)
 80054f0:	fba2 2303 	umull	r2, r3, r2, r3
 80054f4:	099b      	lsrs	r3, r3, #6
 80054f6:	1c5a      	adds	r2, r3, #1
 80054f8:	4613      	mov	r3, r2
 80054fa:	009b      	lsls	r3, r3, #2
 80054fc:	4413      	add	r3, r2
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 8005502:	e002      	b.n	800550a <HAL_COMP_Init+0xc2>
      {
        wait_loop_index--;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	3b01      	subs	r3, #1
 8005508:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d1f9      	bne.n	8005504 <HAL_COMP_Init+0xbc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a37      	ldr	r2, [pc, #220]	@ (80055f4 <HAL_COMP_Init+0x1ac>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d012      	beq.n	8005540 <HAL_COMP_Init+0xf8>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a36      	ldr	r2, [pc, #216]	@ (80055f8 <HAL_COMP_Init+0x1b0>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d00a      	beq.n	800553a <HAL_COMP_Init+0xf2>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a34      	ldr	r2, [pc, #208]	@ (80055fc <HAL_COMP_Init+0x1b4>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d102      	bne.n	8005534 <HAL_COMP_Init+0xec>
 800552e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8005532:	e007      	b.n	8005544 <HAL_COMP_Init+0xfc>
 8005534:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005538:	e004      	b.n	8005544 <HAL_COMP_Init+0xfc>
 800553a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800553e:	e001      	b.n	8005544 <HAL_COMP_Init+0xfc>
 8005540:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005544:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	699b      	ldr	r3, [r3, #24]
 800554a:	f003 0303 	and.w	r3, r3, #3
 800554e:	2b00      	cmp	r3, #0
 8005550:	d037      	beq.n	80055c2 <HAL_COMP_Init+0x17a>
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	699b      	ldr	r3, [r3, #24]
 8005556:	f003 0310 	and.w	r3, r3, #16
 800555a:	2b00      	cmp	r3, #0
 800555c:	d003      	beq.n	8005566 <HAL_COMP_Init+0x11e>
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 800555e:	6938      	ldr	r0, [r7, #16]
 8005560:	f7ff ff00 	bl	8005364 <LL_EXTI_EnableRisingTrig_0_31>
 8005564:	e002      	b.n	800556c <HAL_COMP_Init+0x124>
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8005566:	6938      	ldr	r0, [r7, #16]
 8005568:	f7ff ff0e 	bl	8005388 <LL_EXTI_DisableRisingTrig_0_31>
#endif /* COMP7 */
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	699b      	ldr	r3, [r3, #24]
 8005570:	f003 0320 	and.w	r3, r3, #32
 8005574:	2b00      	cmp	r3, #0
 8005576:	d003      	beq.n	8005580 <HAL_COMP_Init+0x138>
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8005578:	6938      	ldr	r0, [r7, #16]
 800557a:	f7ff ff19 	bl	80053b0 <LL_EXTI_EnableFallingTrig_0_31>
 800557e:	e002      	b.n	8005586 <HAL_COMP_Init+0x13e>
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8005580:	6938      	ldr	r0, [r7, #16]
 8005582:	f7ff ff27 	bl	80053d4 <LL_EXTI_DisableFallingTrig_0_31>
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
      }
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
 8005586:	6938      	ldr	r0, [r7, #16]
 8005588:	f7ff ff4e 	bl	8005428 <LL_EXTI_ClearFlag_0_31>
#endif /* COMP7 */

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	699b      	ldr	r3, [r3, #24]
 8005590:	f003 0302 	and.w	r3, r3, #2
 8005594:	2b00      	cmp	r3, #0
 8005596:	d003      	beq.n	80055a0 <HAL_COMP_Init+0x158>
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
        }
#else
        LL_EXTI_EnableEvent_0_31(exti_line);
 8005598:	6938      	ldr	r0, [r7, #16]
 800559a:	f7ff febd 	bl	8005318 <LL_EXTI_EnableEvent_0_31>
 800559e:	e002      	b.n	80055a6 <HAL_COMP_Init+0x15e>
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
        }
#else
        LL_EXTI_DisableEvent_0_31(exti_line);
 80055a0:	6938      	ldr	r0, [r7, #16]
 80055a2:	f7ff fecb 	bl	800533c <LL_EXTI_DisableEvent_0_31>
#endif /* COMP7 */
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	699b      	ldr	r3, [r3, #24]
 80055aa:	f003 0301 	and.w	r3, r3, #1
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d003      	beq.n	80055ba <HAL_COMP_Init+0x172>
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
        }
#else
        LL_EXTI_EnableIT_0_31(exti_line);
 80055b2:	6938      	ldr	r0, [r7, #16]
 80055b4:	f7ff fe8a 	bl	80052cc <LL_EXTI_EnableIT_0_31>
 80055b8:	e009      	b.n	80055ce <HAL_COMP_Init+0x186>
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
        }
#else
        LL_EXTI_DisableIT_0_31(exti_line);
 80055ba:	6938      	ldr	r0, [r7, #16]
 80055bc:	f7ff fe98 	bl	80052f0 <LL_EXTI_DisableIT_0_31>
 80055c0:	e005      	b.n	80055ce <HAL_COMP_Init+0x186>
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
      }
#else
      LL_EXTI_DisableEvent_0_31(exti_line);
 80055c2:	6938      	ldr	r0, [r7, #16]
 80055c4:	f7ff feba 	bl	800533c <LL_EXTI_DisableEvent_0_31>
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
      }
#else
      LL_EXTI_DisableIT_0_31(exti_line);
 80055c8:	6938      	ldr	r0, [r7, #16]
 80055ca:	f7ff fe91 	bl	80052f0 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	7f5b      	ldrb	r3, [r3, #29]
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d102      	bne.n	80055de <HAL_COMP_Init+0x196>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2201      	movs	r2, #1
 80055dc:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 80055de:	7ffb      	ldrb	r3, [r7, #31]
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3720      	adds	r7, #32
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}
 80055e8:	ff007e0f 	.word	0xff007e0f
 80055ec:	20000000 	.word	0x20000000
 80055f0:	053e2d63 	.word	0x053e2d63
 80055f4:	40010200 	.word	0x40010200
 80055f8:	40010204 	.word	0x40010204
 80055fc:	40010208 	.word	0x40010208

08005600 <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ handler.
  * @param  hcomp  COMP handle
  * @retval None
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b084      	sub	sp, #16
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a17      	ldr	r2, [pc, #92]	@ (800566c <HAL_COMP_IRQHandler+0x6c>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d012      	beq.n	8005638 <HAL_COMP_IRQHandler+0x38>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a16      	ldr	r2, [pc, #88]	@ (8005670 <HAL_COMP_IRQHandler+0x70>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d00a      	beq.n	8005632 <HAL_COMP_IRQHandler+0x32>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a14      	ldr	r2, [pc, #80]	@ (8005674 <HAL_COMP_IRQHandler+0x74>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d102      	bne.n	800562c <HAL_COMP_IRQHandler+0x2c>
 8005626:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800562a:	e007      	b.n	800563c <HAL_COMP_IRQHandler+0x3c>
 800562c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005630:	e004      	b.n	800563c <HAL_COMP_IRQHandler+0x3c>
 8005632:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005636:	e001      	b.n	800563c <HAL_COMP_IRQHandler+0x3c>
 8005638:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800563c:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_comp_exti_flag_set = 0UL;
 800563e:	2300      	movs	r3, #0
 8005640:	60fb      	str	r3, [r7, #12]
    {
      tmp_comp_exti_flag_set = 1UL;
    }
  }
#else
  if (LL_EXTI_IsActiveFlag_0_31(exti_line) != 0UL)
 8005642:	68b8      	ldr	r0, [r7, #8]
 8005644:	f7ff feda 	bl	80053fc <LL_EXTI_IsActiveFlag_0_31>
 8005648:	4603      	mov	r3, r0
 800564a:	2b00      	cmp	r3, #0
 800564c:	d001      	beq.n	8005652 <HAL_COMP_IRQHandler+0x52>
  {
    tmp_comp_exti_flag_set = 1UL;
 800564e:	2301      	movs	r3, #1
 8005650:	60fb      	str	r3, [r7, #12]
  }
#endif /* COMP7 */

  if (tmp_comp_exti_flag_set != 0UL)
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d005      	beq.n	8005664 <HAL_COMP_IRQHandler+0x64>
    else
    {
      LL_EXTI_ClearFlag_0_31(exti_line);
    }
#else
    LL_EXTI_ClearFlag_0_31(exti_line);
 8005658:	68b8      	ldr	r0, [r7, #8]
 800565a:	f7ff fee5 	bl	8005428 <LL_EXTI_ClearFlag_0_31>

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f000 f80a 	bl	8005678 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }
}
 8005664:	bf00      	nop
 8005666:	3710      	adds	r7, #16
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}
 800566c:	40010200 	.word	0x40010200
 8005670:	40010204 	.word	0x40010204
 8005674:	40010208 	.word	0x40010208

08005678 <HAL_COMP_TriggerCallback>:
  * @brief  Comparator trigger callback.
  * @param  hcomp  COMP handle
  * @retval None
  */
__weak void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp)
{
 8005678:	b480      	push	{r7}
 800567a:	b083      	sub	sp, #12
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  UNUSED(hcomp);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_COMP_TriggerCallback should be implemented in the user file
   */
}
 8005680:	bf00      	nop
 8005682:	370c      	adds	r7, #12
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr

0800568c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800568c:	b480      	push	{r7}
 800568e:	b085      	sub	sp, #20
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f003 0307 	and.w	r3, r3, #7
 800569a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800569c:	4b0c      	ldr	r3, [pc, #48]	@ (80056d0 <__NVIC_SetPriorityGrouping+0x44>)
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80056a2:	68ba      	ldr	r2, [r7, #8]
 80056a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80056a8:	4013      	ands	r3, r2
 80056aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80056b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80056b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80056bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80056be:	4a04      	ldr	r2, [pc, #16]	@ (80056d0 <__NVIC_SetPriorityGrouping+0x44>)
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	60d3      	str	r3, [r2, #12]
}
 80056c4:	bf00      	nop
 80056c6:	3714      	adds	r7, #20
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr
 80056d0:	e000ed00 	.word	0xe000ed00

080056d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80056d4:	b480      	push	{r7}
 80056d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80056d8:	4b04      	ldr	r3, [pc, #16]	@ (80056ec <__NVIC_GetPriorityGrouping+0x18>)
 80056da:	68db      	ldr	r3, [r3, #12]
 80056dc:	0a1b      	lsrs	r3, r3, #8
 80056de:	f003 0307 	and.w	r3, r3, #7
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr
 80056ec:	e000ed00 	.word	0xe000ed00

080056f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b083      	sub	sp, #12
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	4603      	mov	r3, r0
 80056f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	db0b      	blt.n	800571a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005702:	79fb      	ldrb	r3, [r7, #7]
 8005704:	f003 021f 	and.w	r2, r3, #31
 8005708:	4907      	ldr	r1, [pc, #28]	@ (8005728 <__NVIC_EnableIRQ+0x38>)
 800570a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800570e:	095b      	lsrs	r3, r3, #5
 8005710:	2001      	movs	r0, #1
 8005712:	fa00 f202 	lsl.w	r2, r0, r2
 8005716:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800571a:	bf00      	nop
 800571c:	370c      	adds	r7, #12
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr
 8005726:	bf00      	nop
 8005728:	e000e100 	.word	0xe000e100

0800572c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800572c:	b480      	push	{r7}
 800572e:	b083      	sub	sp, #12
 8005730:	af00      	add	r7, sp, #0
 8005732:	4603      	mov	r3, r0
 8005734:	6039      	str	r1, [r7, #0]
 8005736:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800573c:	2b00      	cmp	r3, #0
 800573e:	db0a      	blt.n	8005756 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	b2da      	uxtb	r2, r3
 8005744:	490c      	ldr	r1, [pc, #48]	@ (8005778 <__NVIC_SetPriority+0x4c>)
 8005746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800574a:	0112      	lsls	r2, r2, #4
 800574c:	b2d2      	uxtb	r2, r2
 800574e:	440b      	add	r3, r1
 8005750:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005754:	e00a      	b.n	800576c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	b2da      	uxtb	r2, r3
 800575a:	4908      	ldr	r1, [pc, #32]	@ (800577c <__NVIC_SetPriority+0x50>)
 800575c:	79fb      	ldrb	r3, [r7, #7]
 800575e:	f003 030f 	and.w	r3, r3, #15
 8005762:	3b04      	subs	r3, #4
 8005764:	0112      	lsls	r2, r2, #4
 8005766:	b2d2      	uxtb	r2, r2
 8005768:	440b      	add	r3, r1
 800576a:	761a      	strb	r2, [r3, #24]
}
 800576c:	bf00      	nop
 800576e:	370c      	adds	r7, #12
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr
 8005778:	e000e100 	.word	0xe000e100
 800577c:	e000ed00 	.word	0xe000ed00

08005780 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005780:	b480      	push	{r7}
 8005782:	b089      	sub	sp, #36	@ 0x24
 8005784:	af00      	add	r7, sp, #0
 8005786:	60f8      	str	r0, [r7, #12]
 8005788:	60b9      	str	r1, [r7, #8]
 800578a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f003 0307 	and.w	r3, r3, #7
 8005792:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	f1c3 0307 	rsb	r3, r3, #7
 800579a:	2b04      	cmp	r3, #4
 800579c:	bf28      	it	cs
 800579e:	2304      	movcs	r3, #4
 80057a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80057a2:	69fb      	ldr	r3, [r7, #28]
 80057a4:	3304      	adds	r3, #4
 80057a6:	2b06      	cmp	r3, #6
 80057a8:	d902      	bls.n	80057b0 <NVIC_EncodePriority+0x30>
 80057aa:	69fb      	ldr	r3, [r7, #28]
 80057ac:	3b03      	subs	r3, #3
 80057ae:	e000      	b.n	80057b2 <NVIC_EncodePriority+0x32>
 80057b0:	2300      	movs	r3, #0
 80057b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057b4:	f04f 32ff 	mov.w	r2, #4294967295
 80057b8:	69bb      	ldr	r3, [r7, #24]
 80057ba:	fa02 f303 	lsl.w	r3, r2, r3
 80057be:	43da      	mvns	r2, r3
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	401a      	ands	r2, r3
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80057c8:	f04f 31ff 	mov.w	r1, #4294967295
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	fa01 f303 	lsl.w	r3, r1, r3
 80057d2:	43d9      	mvns	r1, r3
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057d8:	4313      	orrs	r3, r2
         );
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3724      	adds	r7, #36	@ 0x24
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr
	...

080057e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b082      	sub	sp, #8
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	3b01      	subs	r3, #1
 80057f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80057f8:	d301      	bcc.n	80057fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80057fa:	2301      	movs	r3, #1
 80057fc:	e00f      	b.n	800581e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80057fe:	4a0a      	ldr	r2, [pc, #40]	@ (8005828 <SysTick_Config+0x40>)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	3b01      	subs	r3, #1
 8005804:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005806:	210f      	movs	r1, #15
 8005808:	f04f 30ff 	mov.w	r0, #4294967295
 800580c:	f7ff ff8e 	bl	800572c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005810:	4b05      	ldr	r3, [pc, #20]	@ (8005828 <SysTick_Config+0x40>)
 8005812:	2200      	movs	r2, #0
 8005814:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005816:	4b04      	ldr	r3, [pc, #16]	@ (8005828 <SysTick_Config+0x40>)
 8005818:	2207      	movs	r2, #7
 800581a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800581c:	2300      	movs	r3, #0
}
 800581e:	4618      	mov	r0, r3
 8005820:	3708      	adds	r7, #8
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}
 8005826:	bf00      	nop
 8005828:	e000e010 	.word	0xe000e010

0800582c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b082      	sub	sp, #8
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f7ff ff29 	bl	800568c <__NVIC_SetPriorityGrouping>
}
 800583a:	bf00      	nop
 800583c:	3708      	adds	r7, #8
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}

08005842 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005842:	b580      	push	{r7, lr}
 8005844:	b086      	sub	sp, #24
 8005846:	af00      	add	r7, sp, #0
 8005848:	4603      	mov	r3, r0
 800584a:	60b9      	str	r1, [r7, #8]
 800584c:	607a      	str	r2, [r7, #4]
 800584e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005850:	f7ff ff40 	bl	80056d4 <__NVIC_GetPriorityGrouping>
 8005854:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005856:	687a      	ldr	r2, [r7, #4]
 8005858:	68b9      	ldr	r1, [r7, #8]
 800585a:	6978      	ldr	r0, [r7, #20]
 800585c:	f7ff ff90 	bl	8005780 <NVIC_EncodePriority>
 8005860:	4602      	mov	r2, r0
 8005862:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005866:	4611      	mov	r1, r2
 8005868:	4618      	mov	r0, r3
 800586a:	f7ff ff5f 	bl	800572c <__NVIC_SetPriority>
}
 800586e:	bf00      	nop
 8005870:	3718      	adds	r7, #24
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}

08005876 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005876:	b580      	push	{r7, lr}
 8005878:	b082      	sub	sp, #8
 800587a:	af00      	add	r7, sp, #0
 800587c:	4603      	mov	r3, r0
 800587e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005884:	4618      	mov	r0, r3
 8005886:	f7ff ff33 	bl	80056f0 <__NVIC_EnableIRQ>
}
 800588a:	bf00      	nop
 800588c:	3708      	adds	r7, #8
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}

08005892 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005892:	b580      	push	{r7, lr}
 8005894:	b082      	sub	sp, #8
 8005896:	af00      	add	r7, sp, #0
 8005898:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f7ff ffa4 	bl	80057e8 <SysTick_Config>
 80058a0:	4603      	mov	r3, r0
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3708      	adds	r7, #8
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}

080058aa <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80058aa:	b580      	push	{r7, lr}
 80058ac:	b082      	sub	sp, #8
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d101      	bne.n	80058bc <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	e014      	b.n	80058e6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	791b      	ldrb	r3, [r3, #4]
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d105      	bne.n	80058d2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2200      	movs	r2, #0
 80058ca:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f7fb fe6f 	bl	80015b0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2202      	movs	r2, #2
 80058d6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2200      	movs	r2, #0
 80058dc:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2201      	movs	r2, #1
 80058e2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80058e4:	2300      	movs	r3, #0
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3708      	adds	r7, #8
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}
	...

080058f0 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b08a      	sub	sp, #40	@ 0x28
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	60f8      	str	r0, [r7, #12]
 80058f8:	60b9      	str	r1, [r7, #8]
 80058fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058fc:	2300      	movs	r3, #0
 80058fe:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d002      	beq.n	800590c <HAL_DAC_ConfigChannel+0x1c>
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d101      	bne.n	8005910 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	e19e      	b.n	8005c4e <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	795b      	ldrb	r3, [r3, #5]
 8005914:	2b01      	cmp	r3, #1
 8005916:	d101      	bne.n	800591c <HAL_DAC_ConfigChannel+0x2c>
 8005918:	2302      	movs	r3, #2
 800591a:	e198      	b.n	8005c4e <HAL_DAC_ConfigChannel+0x35e>
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2201      	movs	r2, #1
 8005920:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2202      	movs	r2, #2
 8005926:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	2b04      	cmp	r3, #4
 800592e:	d17a      	bne.n	8005a26 <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8005930:	f7fc ffb6 	bl	80028a0 <HAL_GetTick>
 8005934:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d13d      	bne.n	80059b8 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800593c:	e018      	b.n	8005970 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800593e:	f7fc ffaf 	bl	80028a0 <HAL_GetTick>
 8005942:	4602      	mov	r2, r0
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	1ad3      	subs	r3, r2, r3
 8005948:	2b01      	cmp	r3, #1
 800594a:	d911      	bls.n	8005970 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005952:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005956:	2b00      	cmp	r3, #0
 8005958:	d00a      	beq.n	8005970 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	691b      	ldr	r3, [r3, #16]
 800595e:	f043 0208 	orr.w	r2, r3, #8
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2203      	movs	r2, #3
 800596a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800596c:	2303      	movs	r3, #3
 800596e:	e16e      	b.n	8005c4e <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005976:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800597a:	2b00      	cmp	r3, #0
 800597c:	d1df      	bne.n	800593e <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	68ba      	ldr	r2, [r7, #8]
 8005984:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005986:	641a      	str	r2, [r3, #64]	@ 0x40
 8005988:	e020      	b.n	80059cc <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800598a:	f7fc ff89 	bl	80028a0 <HAL_GetTick>
 800598e:	4602      	mov	r2, r0
 8005990:	69bb      	ldr	r3, [r7, #24]
 8005992:	1ad3      	subs	r3, r2, r3
 8005994:	2b01      	cmp	r3, #1
 8005996:	d90f      	bls.n	80059b8 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800599e:	2b00      	cmp	r3, #0
 80059a0:	da0a      	bge.n	80059b8 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	691b      	ldr	r3, [r3, #16]
 80059a6:	f043 0208 	orr.w	r2, r3, #8
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2203      	movs	r2, #3
 80059b2:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80059b4:	2303      	movs	r3, #3
 80059b6:	e14a      	b.n	8005c4e <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059be:	2b00      	cmp	r3, #0
 80059c0:	dbe3      	blt.n	800598a <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	68ba      	ldr	r2, [r7, #8]
 80059c8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80059ca:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f003 0310 	and.w	r3, r3, #16
 80059d8:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80059dc:	fa01 f303 	lsl.w	r3, r1, r3
 80059e0:	43db      	mvns	r3, r3
 80059e2:	ea02 0103 	and.w	r1, r2, r3
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f003 0310 	and.w	r3, r3, #16
 80059f0:	409a      	lsls	r2, r3
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	430a      	orrs	r2, r1
 80059f8:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f003 0310 	and.w	r3, r3, #16
 8005a06:	21ff      	movs	r1, #255	@ 0xff
 8005a08:	fa01 f303 	lsl.w	r3, r1, r3
 8005a0c:	43db      	mvns	r3, r3
 8005a0e:	ea02 0103 	and.w	r1, r2, r3
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f003 0310 	and.w	r3, r3, #16
 8005a1c:	409a      	lsls	r2, r3
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	430a      	orrs	r2, r1
 8005a24:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	69db      	ldr	r3, [r3, #28]
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d11d      	bne.n	8005a6a <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a34:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f003 0310 	and.w	r3, r3, #16
 8005a3c:	221f      	movs	r2, #31
 8005a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a42:	43db      	mvns	r3, r3
 8005a44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a46:	4013      	ands	r3, r2
 8005a48:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	6a1b      	ldr	r3, [r3, #32]
 8005a4e:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f003 0310 	and.w	r3, r3, #16
 8005a56:	697a      	ldr	r2, [r7, #20]
 8005a58:	fa02 f303 	lsl.w	r3, r2, r3
 8005a5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a68:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a70:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f003 0310 	and.w	r3, r3, #16
 8005a78:	2207      	movs	r2, #7
 8005a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a7e:	43db      	mvns	r3, r3
 8005a80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a82:	4013      	ands	r3, r2
 8005a84:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	699b      	ldr	r3, [r3, #24]
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d102      	bne.n	8005a94 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	623b      	str	r3, [r7, #32]
 8005a92:	e00f      	b.n	8005ab4 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	699b      	ldr	r3, [r3, #24]
 8005a98:	2b02      	cmp	r3, #2
 8005a9a:	d102      	bne.n	8005aa2 <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	623b      	str	r3, [r7, #32]
 8005aa0:	e008      	b.n	8005ab4 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	695b      	ldr	r3, [r3, #20]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d102      	bne.n	8005ab0 <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	623b      	str	r3, [r7, #32]
 8005aae:	e001      	b.n	8005ab4 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	689a      	ldr	r2, [r3, #8]
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	695b      	ldr	r3, [r3, #20]
 8005abc:	4313      	orrs	r3, r2
 8005abe:	6a3a      	ldr	r2, [r7, #32]
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f003 0310 	and.w	r3, r3, #16
 8005aca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005ace:	fa02 f303 	lsl.w	r3, r2, r3
 8005ad2:	43db      	mvns	r3, r3
 8005ad4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ad6:	4013      	ands	r3, r2
 8005ad8:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	791b      	ldrb	r3, [r3, #4]
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	d102      	bne.n	8005ae8 <HAL_DAC_ConfigChannel+0x1f8>
 8005ae2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005ae6:	e000      	b.n	8005aea <HAL_DAC_ConfigChannel+0x1fa>
 8005ae8:	2300      	movs	r3, #0
 8005aea:	697a      	ldr	r2, [r7, #20]
 8005aec:	4313      	orrs	r3, r2
 8005aee:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f003 0310 	and.w	r3, r3, #16
 8005af6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005afa:	fa02 f303 	lsl.w	r3, r2, r3
 8005afe:	43db      	mvns	r3, r3
 8005b00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b02:	4013      	ands	r3, r2
 8005b04:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	795b      	ldrb	r3, [r3, #5]
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	d102      	bne.n	8005b14 <HAL_DAC_ConfigChannel+0x224>
 8005b0e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005b12:	e000      	b.n	8005b16 <HAL_DAC_ConfigChannel+0x226>
 8005b14:	2300      	movs	r3, #0
 8005b16:	697a      	ldr	r2, [r7, #20]
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8005b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b1e:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8005b22:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	2b02      	cmp	r3, #2
 8005b2a:	d114      	bne.n	8005b56 <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8005b2c:	f002 fca2 	bl	8008474 <HAL_RCC_GetHCLKFreq>
 8005b30:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	4a48      	ldr	r2, [pc, #288]	@ (8005c58 <HAL_DAC_ConfigChannel+0x368>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d904      	bls.n	8005b44 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8005b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b3c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b40:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b42:	e00f      	b.n	8005b64 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	4a45      	ldr	r2, [pc, #276]	@ (8005c5c <HAL_DAC_ConfigChannel+0x36c>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d90a      	bls.n	8005b62 <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8005b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b4e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005b52:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b54:	e006      	b.n	8005b64 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b60:	e000      	b.n	8005b64 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8005b62:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f003 0310 	and.w	r3, r3, #16
 8005b6a:	697a      	ldr	r2, [r7, #20]
 8005b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b72:	4313      	orrs	r3, r2
 8005b74:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b7c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	6819      	ldr	r1, [r3, #0]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f003 0310 	and.w	r3, r3, #16
 8005b8a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b92:	43da      	mvns	r2, r3
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	400a      	ands	r2, r1
 8005b9a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f003 0310 	and.w	r3, r3, #16
 8005baa:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8005bae:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb2:	43db      	mvns	r3, r3
 8005bb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bb6:	4013      	ands	r3, r2
 8005bb8:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	68db      	ldr	r3, [r3, #12]
 8005bbe:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f003 0310 	and.w	r3, r3, #16
 8005bc6:	697a      	ldr	r2, [r7, #20]
 8005bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bd8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	6819      	ldr	r1, [r3, #0]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f003 0310 	and.w	r3, r3, #16
 8005be6:	22c0      	movs	r2, #192	@ 0xc0
 8005be8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bec:	43da      	mvns	r2, r3
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	400a      	ands	r2, r1
 8005bf4:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	68db      	ldr	r3, [r3, #12]
 8005bfa:	089b      	lsrs	r3, r3, #2
 8005bfc:	f003 030f 	and.w	r3, r3, #15
 8005c00:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	691b      	ldr	r3, [r3, #16]
 8005c06:	089b      	lsrs	r3, r3, #2
 8005c08:	021b      	lsls	r3, r3, #8
 8005c0a:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005c0e:	697a      	ldr	r2, [r7, #20]
 8005c10:	4313      	orrs	r3, r2
 8005c12:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f003 0310 	and.w	r3, r3, #16
 8005c20:	f640 710f 	movw	r1, #3855	@ 0xf0f
 8005c24:	fa01 f303 	lsl.w	r3, r1, r3
 8005c28:	43db      	mvns	r3, r3
 8005c2a:	ea02 0103 	and.w	r1, r2, r3
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f003 0310 	and.w	r3, r3, #16
 8005c34:	697a      	ldr	r2, [r7, #20]
 8005c36:	409a      	lsls	r2, r3
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	430a      	orrs	r2, r1
 8005c3e:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2201      	movs	r2, #1
 8005c44:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8005c4c:	7ffb      	ldrb	r3, [r7, #31]
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3728      	adds	r7, #40	@ 0x28
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	bf00      	nop
 8005c58:	09896800 	.word	0x09896800
 8005c5c:	04c4b400 	.word	0x04c4b400

08005c60 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b084      	sub	sp, #16
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d101      	bne.n	8005c72 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e08d      	b.n	8005d8e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	461a      	mov	r2, r3
 8005c78:	4b47      	ldr	r3, [pc, #284]	@ (8005d98 <HAL_DMA_Init+0x138>)
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	d80f      	bhi.n	8005c9e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	461a      	mov	r2, r3
 8005c84:	4b45      	ldr	r3, [pc, #276]	@ (8005d9c <HAL_DMA_Init+0x13c>)
 8005c86:	4413      	add	r3, r2
 8005c88:	4a45      	ldr	r2, [pc, #276]	@ (8005da0 <HAL_DMA_Init+0x140>)
 8005c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c8e:	091b      	lsrs	r3, r3, #4
 8005c90:	009a      	lsls	r2, r3, #2
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	4a42      	ldr	r2, [pc, #264]	@ (8005da4 <HAL_DMA_Init+0x144>)
 8005c9a:	641a      	str	r2, [r3, #64]	@ 0x40
 8005c9c:	e00e      	b.n	8005cbc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	4b40      	ldr	r3, [pc, #256]	@ (8005da8 <HAL_DMA_Init+0x148>)
 8005ca6:	4413      	add	r3, r2
 8005ca8:	4a3d      	ldr	r2, [pc, #244]	@ (8005da0 <HAL_DMA_Init+0x140>)
 8005caa:	fba2 2303 	umull	r2, r3, r2, r3
 8005cae:	091b      	lsrs	r3, r3, #4
 8005cb0:	009a      	lsls	r2, r3, #2
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4a3c      	ldr	r2, [pc, #240]	@ (8005dac <HAL_DMA_Init+0x14c>)
 8005cba:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2202      	movs	r2, #2
 8005cc0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8005cd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cd6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005ce0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	691b      	ldr	r3, [r3, #16]
 8005ce6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005cec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	699b      	ldr	r3, [r3, #24]
 8005cf2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005cf8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6a1b      	ldr	r3, [r3, #32]
 8005cfe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005d00:	68fa      	ldr	r2, [r7, #12]
 8005d02:	4313      	orrs	r3, r2
 8005d04:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	68fa      	ldr	r2, [r7, #12]
 8005d0c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f000 fa76 	bl	8006200 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005d1c:	d102      	bne.n	8005d24 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2200      	movs	r2, #0
 8005d22:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	685a      	ldr	r2, [r3, #4]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d2c:	b2d2      	uxtb	r2, r2
 8005d2e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d34:	687a      	ldr	r2, [r7, #4]
 8005d36:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005d38:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d010      	beq.n	8005d64 <HAL_DMA_Init+0x104>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	2b04      	cmp	r3, #4
 8005d48:	d80c      	bhi.n	8005d64 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f000 fa96 	bl	800627c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d54:	2200      	movs	r2, #0
 8005d56:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d5c:	687a      	ldr	r2, [r7, #4]
 8005d5e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005d60:	605a      	str	r2, [r3, #4]
 8005d62:	e008      	b.n	8005d76 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2200      	movs	r2, #0
 8005d74:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2200      	movs	r2, #0
 8005d88:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005d8c:	2300      	movs	r3, #0
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3710      	adds	r7, #16
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}
 8005d96:	bf00      	nop
 8005d98:	40020407 	.word	0x40020407
 8005d9c:	bffdfff8 	.word	0xbffdfff8
 8005da0:	cccccccd 	.word	0xcccccccd
 8005da4:	40020000 	.word	0x40020000
 8005da8:	bffdfbf8 	.word	0xbffdfbf8
 8005dac:	40020400 	.word	0x40020400

08005db0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b086      	sub	sp, #24
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	60f8      	str	r0, [r7, #12]
 8005db8:	60b9      	str	r1, [r7, #8]
 8005dba:	607a      	str	r2, [r7, #4]
 8005dbc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	d101      	bne.n	8005dd0 <HAL_DMA_Start_IT+0x20>
 8005dcc:	2302      	movs	r3, #2
 8005dce:	e066      	b.n	8005e9e <HAL_DMA_Start_IT+0xee>
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005dde:	b2db      	uxtb	r3, r3
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d155      	bne.n	8005e90 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2202      	movs	r2, #2
 8005de8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2200      	movs	r2, #0
 8005df0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	681a      	ldr	r2, [r3, #0]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f022 0201 	bic.w	r2, r2, #1
 8005e00:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	687a      	ldr	r2, [r7, #4]
 8005e06:	68b9      	ldr	r1, [r7, #8]
 8005e08:	68f8      	ldr	r0, [r7, #12]
 8005e0a:	f000 f9bb 	bl	8006184 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d008      	beq.n	8005e28 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f042 020e 	orr.w	r2, r2, #14
 8005e24:	601a      	str	r2, [r3, #0]
 8005e26:	e00f      	b.n	8005e48 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	681a      	ldr	r2, [r3, #0]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f022 0204 	bic.w	r2, r2, #4
 8005e36:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f042 020a 	orr.w	r2, r2, #10
 8005e46:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d007      	beq.n	8005e66 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e5a:	681a      	ldr	r2, [r3, #0]
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e60:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005e64:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d007      	beq.n	8005e7e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e78:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005e7c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f042 0201 	orr.w	r2, r2, #1
 8005e8c:	601a      	str	r2, [r3, #0]
 8005e8e:	e005      	b.n	8005e9c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2200      	movs	r2, #0
 8005e94:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005e98:	2302      	movs	r3, #2
 8005e9a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005e9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3718      	adds	r7, #24
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}

08005ea6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005ea6:	b480      	push	{r7}
 8005ea8:	b085      	sub	sp, #20
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	2b02      	cmp	r3, #2
 8005ebc:	d005      	beq.n	8005eca <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2204      	movs	r2, #4
 8005ec2:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	73fb      	strb	r3, [r7, #15]
 8005ec8:	e037      	b.n	8005f3a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f022 020e 	bic.w	r2, r2, #14
 8005ed8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ee4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005ee8:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f022 0201 	bic.w	r2, r2, #1
 8005ef8:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005efe:	f003 021f 	and.w	r2, r3, #31
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f06:	2101      	movs	r1, #1
 8005f08:	fa01 f202 	lsl.w	r2, r1, r2
 8005f0c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f12:	687a      	ldr	r2, [r7, #4]
 8005f14:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005f16:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d00c      	beq.n	8005f3a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f2a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005f2e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005f38:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8005f4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3714      	adds	r7, #20
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr

08005f58 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b084      	sub	sp, #16
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f60:	2300      	movs	r3, #0
 8005f62:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005f6a:	b2db      	uxtb	r3, r3
 8005f6c:	2b02      	cmp	r3, #2
 8005f6e:	d00d      	beq.n	8005f8c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2204      	movs	r2, #4
 8005f74:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2201      	movs	r2, #1
 8005f7a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2200      	movs	r2, #0
 8005f82:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	73fb      	strb	r3, [r7, #15]
 8005f8a:	e047      	b.n	800601c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	681a      	ldr	r2, [r3, #0]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f022 020e 	bic.w	r2, r2, #14
 8005f9a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	681a      	ldr	r2, [r3, #0]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f022 0201 	bic.w	r2, r2, #1
 8005faa:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005fb6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005fba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fc0:	f003 021f 	and.w	r2, r3, #31
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fc8:	2101      	movs	r1, #1
 8005fca:	fa01 f202 	lsl.w	r2, r1, r2
 8005fce:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005fd4:	687a      	ldr	r2, [r7, #4]
 8005fd6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005fd8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d00c      	beq.n	8005ffc <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005ff0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ff6:	687a      	ldr	r2, [r7, #4]
 8005ff8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005ffa:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2201      	movs	r2, #1
 8006000:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2200      	movs	r2, #0
 8006008:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006010:	2b00      	cmp	r3, #0
 8006012:	d003      	beq.n	800601c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	4798      	blx	r3
    }
  }
  return status;
 800601c:	7bfb      	ldrb	r3, [r7, #15]
}
 800601e:	4618      	mov	r0, r3
 8006020:	3710      	adds	r7, #16
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}

08006026 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006026:	b580      	push	{r7, lr}
 8006028:	b084      	sub	sp, #16
 800602a:	af00      	add	r7, sp, #0
 800602c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006042:	f003 031f 	and.w	r3, r3, #31
 8006046:	2204      	movs	r2, #4
 8006048:	409a      	lsls	r2, r3
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	4013      	ands	r3, r2
 800604e:	2b00      	cmp	r3, #0
 8006050:	d026      	beq.n	80060a0 <HAL_DMA_IRQHandler+0x7a>
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	f003 0304 	and.w	r3, r3, #4
 8006058:	2b00      	cmp	r3, #0
 800605a:	d021      	beq.n	80060a0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f003 0320 	and.w	r3, r3, #32
 8006066:	2b00      	cmp	r3, #0
 8006068:	d107      	bne.n	800607a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	681a      	ldr	r2, [r3, #0]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f022 0204 	bic.w	r2, r2, #4
 8006078:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800607e:	f003 021f 	and.w	r2, r3, #31
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006086:	2104      	movs	r1, #4
 8006088:	fa01 f202 	lsl.w	r2, r1, r2
 800608c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006092:	2b00      	cmp	r3, #0
 8006094:	d071      	beq.n	800617a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800609e:	e06c      	b.n	800617a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060a4:	f003 031f 	and.w	r3, r3, #31
 80060a8:	2202      	movs	r2, #2
 80060aa:	409a      	lsls	r2, r3
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	4013      	ands	r3, r2
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d02e      	beq.n	8006112 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	f003 0302 	and.w	r3, r3, #2
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d029      	beq.n	8006112 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f003 0320 	and.w	r3, r3, #32
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d10b      	bne.n	80060e4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f022 020a 	bic.w	r2, r2, #10
 80060da:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2201      	movs	r2, #1
 80060e0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060e8:	f003 021f 	and.w	r2, r3, #31
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060f0:	2102      	movs	r1, #2
 80060f2:	fa01 f202 	lsl.w	r2, r1, r2
 80060f6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2200      	movs	r2, #0
 80060fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006104:	2b00      	cmp	r3, #0
 8006106:	d038      	beq.n	800617a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8006110:	e033      	b.n	800617a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006116:	f003 031f 	and.w	r3, r3, #31
 800611a:	2208      	movs	r2, #8
 800611c:	409a      	lsls	r2, r3
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	4013      	ands	r3, r2
 8006122:	2b00      	cmp	r3, #0
 8006124:	d02a      	beq.n	800617c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	f003 0308 	and.w	r3, r3, #8
 800612c:	2b00      	cmp	r3, #0
 800612e:	d025      	beq.n	800617c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f022 020e 	bic.w	r2, r2, #14
 800613e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006144:	f003 021f 	and.w	r2, r3, #31
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800614c:	2101      	movs	r1, #1
 800614e:	fa01 f202 	lsl.w	r2, r1, r2
 8006152:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2201      	movs	r2, #1
 8006158:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2201      	movs	r2, #1
 800615e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800616e:	2b00      	cmp	r3, #0
 8006170:	d004      	beq.n	800617c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800617a:	bf00      	nop
 800617c:	bf00      	nop
}
 800617e:	3710      	adds	r7, #16
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}

08006184 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006184:	b480      	push	{r7}
 8006186:	b085      	sub	sp, #20
 8006188:	af00      	add	r7, sp, #0
 800618a:	60f8      	str	r0, [r7, #12]
 800618c:	60b9      	str	r1, [r7, #8]
 800618e:	607a      	str	r2, [r7, #4]
 8006190:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006196:	68fa      	ldr	r2, [r7, #12]
 8006198:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800619a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d004      	beq.n	80061ae <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061a8:	68fa      	ldr	r2, [r7, #12]
 80061aa:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80061ac:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061b2:	f003 021f 	and.w	r2, r3, #31
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061ba:	2101      	movs	r1, #1
 80061bc:	fa01 f202 	lsl.w	r2, r1, r2
 80061c0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	683a      	ldr	r2, [r7, #0]
 80061c8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	2b10      	cmp	r3, #16
 80061d0:	d108      	bne.n	80061e4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	687a      	ldr	r2, [r7, #4]
 80061d8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	68ba      	ldr	r2, [r7, #8]
 80061e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80061e2:	e007      	b.n	80061f4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	68ba      	ldr	r2, [r7, #8]
 80061ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	687a      	ldr	r2, [r7, #4]
 80061f2:	60da      	str	r2, [r3, #12]
}
 80061f4:	bf00      	nop
 80061f6:	3714      	adds	r7, #20
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr

08006200 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006200:	b480      	push	{r7}
 8006202:	b087      	sub	sp, #28
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	461a      	mov	r2, r3
 800620e:	4b16      	ldr	r3, [pc, #88]	@ (8006268 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8006210:	429a      	cmp	r2, r3
 8006212:	d802      	bhi.n	800621a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8006214:	4b15      	ldr	r3, [pc, #84]	@ (800626c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8006216:	617b      	str	r3, [r7, #20]
 8006218:	e001      	b.n	800621e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800621a:	4b15      	ldr	r3, [pc, #84]	@ (8006270 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800621c:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	b2db      	uxtb	r3, r3
 8006228:	3b08      	subs	r3, #8
 800622a:	4a12      	ldr	r2, [pc, #72]	@ (8006274 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800622c:	fba2 2303 	umull	r2, r3, r2, r3
 8006230:	091b      	lsrs	r3, r3, #4
 8006232:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006238:	089b      	lsrs	r3, r3, #2
 800623a:	009a      	lsls	r2, r3, #2
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	4413      	add	r3, r2
 8006240:	461a      	mov	r2, r3
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	4a0b      	ldr	r2, [pc, #44]	@ (8006278 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800624a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f003 031f 	and.w	r3, r3, #31
 8006252:	2201      	movs	r2, #1
 8006254:	409a      	lsls	r2, r3
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800625a:	bf00      	nop
 800625c:	371c      	adds	r7, #28
 800625e:	46bd      	mov	sp, r7
 8006260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006264:	4770      	bx	lr
 8006266:	bf00      	nop
 8006268:	40020407 	.word	0x40020407
 800626c:	40020800 	.word	0x40020800
 8006270:	40020820 	.word	0x40020820
 8006274:	cccccccd 	.word	0xcccccccd
 8006278:	40020880 	.word	0x40020880

0800627c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800627c:	b480      	push	{r7}
 800627e:	b085      	sub	sp, #20
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	b2db      	uxtb	r3, r3
 800628a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800628c:	68fa      	ldr	r2, [r7, #12]
 800628e:	4b0b      	ldr	r3, [pc, #44]	@ (80062bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006290:	4413      	add	r3, r2
 8006292:	009b      	lsls	r3, r3, #2
 8006294:	461a      	mov	r2, r3
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	4a08      	ldr	r2, [pc, #32]	@ (80062c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800629e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	3b01      	subs	r3, #1
 80062a4:	f003 031f 	and.w	r3, r3, #31
 80062a8:	2201      	movs	r2, #1
 80062aa:	409a      	lsls	r2, r3
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80062b0:	bf00      	nop
 80062b2:	3714      	adds	r7, #20
 80062b4:	46bd      	mov	sp, r7
 80062b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ba:	4770      	bx	lr
 80062bc:	1000823f 	.word	0x1000823f
 80062c0:	40020940 	.word	0x40020940

080062c4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b084      	sub	sp, #16
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d101      	bne.n	80062d6 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
 80062d4:	e147      	b.n	8006566 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d106      	bne.n	80062f0 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2200      	movs	r2, #0
 80062e6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f7fb f9f8 	bl	80016e0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	699a      	ldr	r2, [r3, #24]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f022 0210 	bic.w	r2, r2, #16
 80062fe:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006300:	f7fc face 	bl	80028a0 <HAL_GetTick>
 8006304:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006306:	e012      	b.n	800632e <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006308:	f7fc faca 	bl	80028a0 <HAL_GetTick>
 800630c:	4602      	mov	r2, r0
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	1ad3      	subs	r3, r2, r3
 8006312:	2b0a      	cmp	r3, #10
 8006314:	d90b      	bls.n	800632e <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800631a:	f043 0201 	orr.w	r2, r3, #1
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2203      	movs	r2, #3
 8006326:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	e11b      	b.n	8006566 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	699b      	ldr	r3, [r3, #24]
 8006334:	f003 0308 	and.w	r3, r3, #8
 8006338:	2b08      	cmp	r3, #8
 800633a:	d0e5      	beq.n	8006308 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	699a      	ldr	r2, [r3, #24]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f042 0201 	orr.w	r2, r2, #1
 800634a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800634c:	f7fc faa8 	bl	80028a0 <HAL_GetTick>
 8006350:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006352:	e012      	b.n	800637a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006354:	f7fc faa4 	bl	80028a0 <HAL_GetTick>
 8006358:	4602      	mov	r2, r0
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	1ad3      	subs	r3, r2, r3
 800635e:	2b0a      	cmp	r3, #10
 8006360:	d90b      	bls.n	800637a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006366:	f043 0201 	orr.w	r2, r3, #1
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2203      	movs	r2, #3
 8006372:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	e0f5      	b.n	8006566 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	699b      	ldr	r3, [r3, #24]
 8006380:	f003 0301 	and.w	r3, r3, #1
 8006384:	2b00      	cmp	r3, #0
 8006386:	d0e5      	beq.n	8006354 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	699a      	ldr	r2, [r3, #24]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f042 0202 	orr.w	r2, r2, #2
 8006396:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a74      	ldr	r2, [pc, #464]	@ (8006570 <HAL_FDCAN_Init+0x2ac>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d103      	bne.n	80063aa <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80063a2:	4a74      	ldr	r2, [pc, #464]	@ (8006574 <HAL_FDCAN_Init+0x2b0>)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	7c1b      	ldrb	r3, [r3, #16]
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d108      	bne.n	80063c4 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	699a      	ldr	r2, [r3, #24]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80063c0:	619a      	str	r2, [r3, #24]
 80063c2:	e007      	b.n	80063d4 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	699a      	ldr	r2, [r3, #24]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80063d2:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	7c5b      	ldrb	r3, [r3, #17]
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d108      	bne.n	80063ee <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	699a      	ldr	r2, [r3, #24]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80063ea:	619a      	str	r2, [r3, #24]
 80063ec:	e007      	b.n	80063fe <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	699a      	ldr	r2, [r3, #24]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80063fc:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	7c9b      	ldrb	r3, [r3, #18]
 8006402:	2b01      	cmp	r3, #1
 8006404:	d108      	bne.n	8006418 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	699a      	ldr	r2, [r3, #24]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006414:	619a      	str	r2, [r3, #24]
 8006416:	e007      	b.n	8006428 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	699a      	ldr	r2, [r3, #24]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006426:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	699b      	ldr	r3, [r3, #24]
 800642e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	689a      	ldr	r2, [r3, #8]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	430a      	orrs	r2, r1
 800643c:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	699a      	ldr	r2, [r3, #24]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 800644c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	691a      	ldr	r2, [r3, #16]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f022 0210 	bic.w	r2, r2, #16
 800645c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	68db      	ldr	r3, [r3, #12]
 8006462:	2b01      	cmp	r3, #1
 8006464:	d108      	bne.n	8006478 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	699a      	ldr	r2, [r3, #24]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f042 0204 	orr.w	r2, r2, #4
 8006474:	619a      	str	r2, [r3, #24]
 8006476:	e02c      	b.n	80064d2 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d028      	beq.n	80064d2 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	68db      	ldr	r3, [r3, #12]
 8006484:	2b02      	cmp	r3, #2
 8006486:	d01c      	beq.n	80064c2 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	699a      	ldr	r2, [r3, #24]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006496:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	691a      	ldr	r2, [r3, #16]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f042 0210 	orr.w	r2, r2, #16
 80064a6:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	68db      	ldr	r3, [r3, #12]
 80064ac:	2b03      	cmp	r3, #3
 80064ae:	d110      	bne.n	80064d2 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	699a      	ldr	r2, [r3, #24]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f042 0220 	orr.w	r2, r2, #32
 80064be:	619a      	str	r2, [r3, #24]
 80064c0:	e007      	b.n	80064d2 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	699a      	ldr	r2, [r3, #24]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f042 0220 	orr.w	r2, r2, #32
 80064d0:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	699b      	ldr	r3, [r3, #24]
 80064d6:	3b01      	subs	r3, #1
 80064d8:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	69db      	ldr	r3, [r3, #28]
 80064de:	3b01      	subs	r3, #1
 80064e0:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80064e2:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6a1b      	ldr	r3, [r3, #32]
 80064e8:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80064ea:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	695b      	ldr	r3, [r3, #20]
 80064f2:	3b01      	subs	r3, #1
 80064f4:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80064fa:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80064fc:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006506:	d115      	bne.n	8006534 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800650c:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006512:	3b01      	subs	r3, #1
 8006514:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006516:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800651c:	3b01      	subs	r3, #1
 800651e:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006520:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006528:	3b01      	subs	r3, #1
 800652a:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006530:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006532:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	430a      	orrs	r2, r1
 8006546:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f000 f814 	bl	8006578 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2200      	movs	r2, #0
 8006554:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2200      	movs	r2, #0
 800655a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2201      	movs	r2, #1
 8006560:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8006564:	2300      	movs	r3, #0
}
 8006566:	4618      	mov	r0, r3
 8006568:	3710      	adds	r7, #16
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}
 800656e:	bf00      	nop
 8006570:	40006400 	.word	0x40006400
 8006574:	40006500 	.word	0x40006500

08006578 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8006578:	b480      	push	{r7}
 800657a:	b085      	sub	sp, #20
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8006580:	4b27      	ldr	r3, [pc, #156]	@ (8006620 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8006582:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	68ba      	ldr	r2, [r7, #8]
 8006588:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006592:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800659a:	041a      	lsls	r2, r3, #16
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	430a      	orrs	r2, r1
 80065a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80065b8:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065c0:	061a      	lsls	r2, r3, #24
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	430a      	orrs	r2, r1
 80065c8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	60fb      	str	r3, [r7, #12]
 80065f8:	e005      	b.n	8006606 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2200      	movs	r2, #0
 80065fe:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	3304      	adds	r3, #4
 8006604:	60fb      	str	r3, [r7, #12]
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800660c:	68fa      	ldr	r2, [r7, #12]
 800660e:	429a      	cmp	r2, r3
 8006610:	d3f3      	bcc.n	80065fa <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8006612:	bf00      	nop
 8006614:	bf00      	nop
 8006616:	3714      	adds	r7, #20
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr
 8006620:	4000a400 	.word	0x4000a400

08006624 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006624:	b480      	push	{r7}
 8006626:	b087      	sub	sp, #28
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800662e:	2300      	movs	r3, #0
 8006630:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006632:	e15a      	b.n	80068ea <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	681a      	ldr	r2, [r3, #0]
 8006638:	2101      	movs	r1, #1
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	fa01 f303 	lsl.w	r3, r1, r3
 8006640:	4013      	ands	r3, r2
 8006642:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2b00      	cmp	r3, #0
 8006648:	f000 814c 	beq.w	80068e4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	f003 0303 	and.w	r3, r3, #3
 8006654:	2b01      	cmp	r3, #1
 8006656:	d005      	beq.n	8006664 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006660:	2b02      	cmp	r3, #2
 8006662:	d130      	bne.n	80066c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	689b      	ldr	r3, [r3, #8]
 8006668:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	005b      	lsls	r3, r3, #1
 800666e:	2203      	movs	r2, #3
 8006670:	fa02 f303 	lsl.w	r3, r2, r3
 8006674:	43db      	mvns	r3, r3
 8006676:	693a      	ldr	r2, [r7, #16]
 8006678:	4013      	ands	r3, r2
 800667a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	68da      	ldr	r2, [r3, #12]
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	005b      	lsls	r3, r3, #1
 8006684:	fa02 f303 	lsl.w	r3, r2, r3
 8006688:	693a      	ldr	r2, [r7, #16]
 800668a:	4313      	orrs	r3, r2
 800668c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	693a      	ldr	r2, [r7, #16]
 8006692:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800669a:	2201      	movs	r2, #1
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	fa02 f303 	lsl.w	r3, r2, r3
 80066a2:	43db      	mvns	r3, r3
 80066a4:	693a      	ldr	r2, [r7, #16]
 80066a6:	4013      	ands	r3, r2
 80066a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	091b      	lsrs	r3, r3, #4
 80066b0:	f003 0201 	and.w	r2, r3, #1
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	fa02 f303 	lsl.w	r3, r2, r3
 80066ba:	693a      	ldr	r2, [r7, #16]
 80066bc:	4313      	orrs	r3, r2
 80066be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	693a      	ldr	r2, [r7, #16]
 80066c4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	f003 0303 	and.w	r3, r3, #3
 80066ce:	2b03      	cmp	r3, #3
 80066d0:	d017      	beq.n	8006702 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	68db      	ldr	r3, [r3, #12]
 80066d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	005b      	lsls	r3, r3, #1
 80066dc:	2203      	movs	r2, #3
 80066de:	fa02 f303 	lsl.w	r3, r2, r3
 80066e2:	43db      	mvns	r3, r3
 80066e4:	693a      	ldr	r2, [r7, #16]
 80066e6:	4013      	ands	r3, r2
 80066e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	689a      	ldr	r2, [r3, #8]
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	005b      	lsls	r3, r3, #1
 80066f2:	fa02 f303 	lsl.w	r3, r2, r3
 80066f6:	693a      	ldr	r2, [r7, #16]
 80066f8:	4313      	orrs	r3, r2
 80066fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	693a      	ldr	r2, [r7, #16]
 8006700:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	f003 0303 	and.w	r3, r3, #3
 800670a:	2b02      	cmp	r3, #2
 800670c:	d123      	bne.n	8006756 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	08da      	lsrs	r2, r3, #3
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	3208      	adds	r2, #8
 8006716:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800671a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	f003 0307 	and.w	r3, r3, #7
 8006722:	009b      	lsls	r3, r3, #2
 8006724:	220f      	movs	r2, #15
 8006726:	fa02 f303 	lsl.w	r3, r2, r3
 800672a:	43db      	mvns	r3, r3
 800672c:	693a      	ldr	r2, [r7, #16]
 800672e:	4013      	ands	r3, r2
 8006730:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	691a      	ldr	r2, [r3, #16]
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	f003 0307 	and.w	r3, r3, #7
 800673c:	009b      	lsls	r3, r3, #2
 800673e:	fa02 f303 	lsl.w	r3, r2, r3
 8006742:	693a      	ldr	r2, [r7, #16]
 8006744:	4313      	orrs	r3, r2
 8006746:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	08da      	lsrs	r2, r3, #3
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	3208      	adds	r2, #8
 8006750:	6939      	ldr	r1, [r7, #16]
 8006752:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	005b      	lsls	r3, r3, #1
 8006760:	2203      	movs	r2, #3
 8006762:	fa02 f303 	lsl.w	r3, r2, r3
 8006766:	43db      	mvns	r3, r3
 8006768:	693a      	ldr	r2, [r7, #16]
 800676a:	4013      	ands	r3, r2
 800676c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	f003 0203 	and.w	r2, r3, #3
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	005b      	lsls	r3, r3, #1
 800677a:	fa02 f303 	lsl.w	r3, r2, r3
 800677e:	693a      	ldr	r2, [r7, #16]
 8006780:	4313      	orrs	r3, r2
 8006782:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	693a      	ldr	r2, [r7, #16]
 8006788:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006792:	2b00      	cmp	r3, #0
 8006794:	f000 80a6 	beq.w	80068e4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006798:	4b5b      	ldr	r3, [pc, #364]	@ (8006908 <HAL_GPIO_Init+0x2e4>)
 800679a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800679c:	4a5a      	ldr	r2, [pc, #360]	@ (8006908 <HAL_GPIO_Init+0x2e4>)
 800679e:	f043 0301 	orr.w	r3, r3, #1
 80067a2:	6613      	str	r3, [r2, #96]	@ 0x60
 80067a4:	4b58      	ldr	r3, [pc, #352]	@ (8006908 <HAL_GPIO_Init+0x2e4>)
 80067a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80067a8:	f003 0301 	and.w	r3, r3, #1
 80067ac:	60bb      	str	r3, [r7, #8]
 80067ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80067b0:	4a56      	ldr	r2, [pc, #344]	@ (800690c <HAL_GPIO_Init+0x2e8>)
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	089b      	lsrs	r3, r3, #2
 80067b6:	3302      	adds	r3, #2
 80067b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	f003 0303 	and.w	r3, r3, #3
 80067c4:	009b      	lsls	r3, r3, #2
 80067c6:	220f      	movs	r2, #15
 80067c8:	fa02 f303 	lsl.w	r3, r2, r3
 80067cc:	43db      	mvns	r3, r3
 80067ce:	693a      	ldr	r2, [r7, #16]
 80067d0:	4013      	ands	r3, r2
 80067d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80067da:	d01f      	beq.n	800681c <HAL_GPIO_Init+0x1f8>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	4a4c      	ldr	r2, [pc, #304]	@ (8006910 <HAL_GPIO_Init+0x2ec>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d019      	beq.n	8006818 <HAL_GPIO_Init+0x1f4>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	4a4b      	ldr	r2, [pc, #300]	@ (8006914 <HAL_GPIO_Init+0x2f0>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d013      	beq.n	8006814 <HAL_GPIO_Init+0x1f0>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	4a4a      	ldr	r2, [pc, #296]	@ (8006918 <HAL_GPIO_Init+0x2f4>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d00d      	beq.n	8006810 <HAL_GPIO_Init+0x1ec>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	4a49      	ldr	r2, [pc, #292]	@ (800691c <HAL_GPIO_Init+0x2f8>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d007      	beq.n	800680c <HAL_GPIO_Init+0x1e8>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	4a48      	ldr	r2, [pc, #288]	@ (8006920 <HAL_GPIO_Init+0x2fc>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d101      	bne.n	8006808 <HAL_GPIO_Init+0x1e4>
 8006804:	2305      	movs	r3, #5
 8006806:	e00a      	b.n	800681e <HAL_GPIO_Init+0x1fa>
 8006808:	2306      	movs	r3, #6
 800680a:	e008      	b.n	800681e <HAL_GPIO_Init+0x1fa>
 800680c:	2304      	movs	r3, #4
 800680e:	e006      	b.n	800681e <HAL_GPIO_Init+0x1fa>
 8006810:	2303      	movs	r3, #3
 8006812:	e004      	b.n	800681e <HAL_GPIO_Init+0x1fa>
 8006814:	2302      	movs	r3, #2
 8006816:	e002      	b.n	800681e <HAL_GPIO_Init+0x1fa>
 8006818:	2301      	movs	r3, #1
 800681a:	e000      	b.n	800681e <HAL_GPIO_Init+0x1fa>
 800681c:	2300      	movs	r3, #0
 800681e:	697a      	ldr	r2, [r7, #20]
 8006820:	f002 0203 	and.w	r2, r2, #3
 8006824:	0092      	lsls	r2, r2, #2
 8006826:	4093      	lsls	r3, r2
 8006828:	693a      	ldr	r2, [r7, #16]
 800682a:	4313      	orrs	r3, r2
 800682c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800682e:	4937      	ldr	r1, [pc, #220]	@ (800690c <HAL_GPIO_Init+0x2e8>)
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	089b      	lsrs	r3, r3, #2
 8006834:	3302      	adds	r3, #2
 8006836:	693a      	ldr	r2, [r7, #16]
 8006838:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800683c:	4b39      	ldr	r3, [pc, #228]	@ (8006924 <HAL_GPIO_Init+0x300>)
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	43db      	mvns	r3, r3
 8006846:	693a      	ldr	r2, [r7, #16]
 8006848:	4013      	ands	r3, r2
 800684a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006854:	2b00      	cmp	r3, #0
 8006856:	d003      	beq.n	8006860 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8006858:	693a      	ldr	r2, [r7, #16]
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	4313      	orrs	r3, r2
 800685e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006860:	4a30      	ldr	r2, [pc, #192]	@ (8006924 <HAL_GPIO_Init+0x300>)
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006866:	4b2f      	ldr	r3, [pc, #188]	@ (8006924 <HAL_GPIO_Init+0x300>)
 8006868:	68db      	ldr	r3, [r3, #12]
 800686a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	43db      	mvns	r3, r3
 8006870:	693a      	ldr	r2, [r7, #16]
 8006872:	4013      	ands	r3, r2
 8006874:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800687e:	2b00      	cmp	r3, #0
 8006880:	d003      	beq.n	800688a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8006882:	693a      	ldr	r2, [r7, #16]
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	4313      	orrs	r3, r2
 8006888:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800688a:	4a26      	ldr	r2, [pc, #152]	@ (8006924 <HAL_GPIO_Init+0x300>)
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006890:	4b24      	ldr	r3, [pc, #144]	@ (8006924 <HAL_GPIO_Init+0x300>)
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	43db      	mvns	r3, r3
 800689a:	693a      	ldr	r2, [r7, #16]
 800689c:	4013      	ands	r3, r2
 800689e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d003      	beq.n	80068b4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80068ac:	693a      	ldr	r2, [r7, #16]
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	4313      	orrs	r3, r2
 80068b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80068b4:	4a1b      	ldr	r2, [pc, #108]	@ (8006924 <HAL_GPIO_Init+0x300>)
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80068ba:	4b1a      	ldr	r3, [pc, #104]	@ (8006924 <HAL_GPIO_Init+0x300>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	43db      	mvns	r3, r3
 80068c4:	693a      	ldr	r2, [r7, #16]
 80068c6:	4013      	ands	r3, r2
 80068c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d003      	beq.n	80068de <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80068d6:	693a      	ldr	r2, [r7, #16]
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	4313      	orrs	r3, r2
 80068dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80068de:	4a11      	ldr	r2, [pc, #68]	@ (8006924 <HAL_GPIO_Init+0x300>)
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	3301      	adds	r3, #1
 80068e8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	681a      	ldr	r2, [r3, #0]
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	fa22 f303 	lsr.w	r3, r2, r3
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	f47f ae9d 	bne.w	8006634 <HAL_GPIO_Init+0x10>
  }
}
 80068fa:	bf00      	nop
 80068fc:	bf00      	nop
 80068fe:	371c      	adds	r7, #28
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr
 8006908:	40021000 	.word	0x40021000
 800690c:	40010000 	.word	0x40010000
 8006910:	48000400 	.word	0x48000400
 8006914:	48000800 	.word	0x48000800
 8006918:	48000c00 	.word	0x48000c00
 800691c:	48001000 	.word	0x48001000
 8006920:	48001400 	.word	0x48001400
 8006924:	40010400 	.word	0x40010400

08006928 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006928:	b480      	push	{r7}
 800692a:	b085      	sub	sp, #20
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	460b      	mov	r3, r1
 8006932:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	691a      	ldr	r2, [r3, #16]
 8006938:	887b      	ldrh	r3, [r7, #2]
 800693a:	4013      	ands	r3, r2
 800693c:	2b00      	cmp	r3, #0
 800693e:	d002      	beq.n	8006946 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006940:	2301      	movs	r3, #1
 8006942:	73fb      	strb	r3, [r7, #15]
 8006944:	e001      	b.n	800694a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006946:	2300      	movs	r3, #0
 8006948:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800694a:	7bfb      	ldrb	r3, [r7, #15]
}
 800694c:	4618      	mov	r0, r3
 800694e:	3714      	adds	r7, #20
 8006950:	46bd      	mov	sp, r7
 8006952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006956:	4770      	bx	lr

08006958 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006958:	b480      	push	{r7}
 800695a:	b083      	sub	sp, #12
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
 8006960:	460b      	mov	r3, r1
 8006962:	807b      	strh	r3, [r7, #2]
 8006964:	4613      	mov	r3, r2
 8006966:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006968:	787b      	ldrb	r3, [r7, #1]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d003      	beq.n	8006976 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800696e:	887a      	ldrh	r2, [r7, #2]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006974:	e002      	b.n	800697c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006976:	887a      	ldrh	r2, [r7, #2]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800697c:	bf00      	nop
 800697e:	370c      	adds	r7, #12
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr

08006988 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b082      	sub	sp, #8
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d101      	bne.n	800699a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006996:	2301      	movs	r3, #1
 8006998:	e08d      	b.n	8006ab6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80069a0:	b2db      	uxtb	r3, r3
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d106      	bne.n	80069b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2200      	movs	r2, #0
 80069aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f7fa ffa8 	bl	8001904 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2224      	movs	r2, #36	@ 0x24
 80069b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	681a      	ldr	r2, [r3, #0]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f022 0201 	bic.w	r2, r2, #1
 80069ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	685a      	ldr	r2, [r3, #4]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80069d8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	689a      	ldr	r2, [r3, #8]
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80069e8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	68db      	ldr	r3, [r3, #12]
 80069ee:	2b01      	cmp	r3, #1
 80069f0:	d107      	bne.n	8006a02 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	689a      	ldr	r2, [r3, #8]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80069fe:	609a      	str	r2, [r3, #8]
 8006a00:	e006      	b.n	8006a10 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	689a      	ldr	r2, [r3, #8]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006a0e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	68db      	ldr	r3, [r3, #12]
 8006a14:	2b02      	cmp	r3, #2
 8006a16:	d108      	bne.n	8006a2a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	685a      	ldr	r2, [r3, #4]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006a26:	605a      	str	r2, [r3, #4]
 8006a28:	e007      	b.n	8006a3a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	685a      	ldr	r2, [r3, #4]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006a38:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	687a      	ldr	r2, [r7, #4]
 8006a42:	6812      	ldr	r2, [r2, #0]
 8006a44:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006a48:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a4c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	68da      	ldr	r2, [r3, #12]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006a5c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	691a      	ldr	r2, [r3, #16]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	695b      	ldr	r3, [r3, #20]
 8006a66:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	699b      	ldr	r3, [r3, #24]
 8006a6e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	430a      	orrs	r2, r1
 8006a76:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	69d9      	ldr	r1, [r3, #28]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6a1a      	ldr	r2, [r3, #32]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	430a      	orrs	r2, r1
 8006a86:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	681a      	ldr	r2, [r3, #0]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f042 0201 	orr.w	r2, r2, #1
 8006a96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2220      	movs	r2, #32
 8006aa2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006ab4:	2300      	movs	r3, #0
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3708      	adds	r7, #8
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}
	...

08006ac0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b088      	sub	sp, #32
 8006ac4:	af02      	add	r7, sp, #8
 8006ac6:	60f8      	str	r0, [r7, #12]
 8006ac8:	4608      	mov	r0, r1
 8006aca:	4611      	mov	r1, r2
 8006acc:	461a      	mov	r2, r3
 8006ace:	4603      	mov	r3, r0
 8006ad0:	817b      	strh	r3, [r7, #10]
 8006ad2:	460b      	mov	r3, r1
 8006ad4:	813b      	strh	r3, [r7, #8]
 8006ad6:	4613      	mov	r3, r2
 8006ad8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ae0:	b2db      	uxtb	r3, r3
 8006ae2:	2b20      	cmp	r3, #32
 8006ae4:	f040 80f9 	bne.w	8006cda <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ae8:	6a3b      	ldr	r3, [r7, #32]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d002      	beq.n	8006af4 <HAL_I2C_Mem_Write+0x34>
 8006aee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d105      	bne.n	8006b00 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006afa:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8006afc:	2301      	movs	r3, #1
 8006afe:	e0ed      	b.n	8006cdc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006b06:	2b01      	cmp	r3, #1
 8006b08:	d101      	bne.n	8006b0e <HAL_I2C_Mem_Write+0x4e>
 8006b0a:	2302      	movs	r3, #2
 8006b0c:	e0e6      	b.n	8006cdc <HAL_I2C_Mem_Write+0x21c>
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2201      	movs	r2, #1
 8006b12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006b16:	f7fb fec3 	bl	80028a0 <HAL_GetTick>
 8006b1a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	9300      	str	r3, [sp, #0]
 8006b20:	2319      	movs	r3, #25
 8006b22:	2201      	movs	r2, #1
 8006b24:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006b28:	68f8      	ldr	r0, [r7, #12]
 8006b2a:	f000 fbaf 	bl	800728c <I2C_WaitOnFlagUntilTimeout>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d001      	beq.n	8006b38 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006b34:	2301      	movs	r3, #1
 8006b36:	e0d1      	b.n	8006cdc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2221      	movs	r2, #33	@ 0x21
 8006b3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2240      	movs	r2, #64	@ 0x40
 8006b44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	6a3a      	ldr	r2, [r7, #32]
 8006b52:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006b58:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006b60:	88f8      	ldrh	r0, [r7, #6]
 8006b62:	893a      	ldrh	r2, [r7, #8]
 8006b64:	8979      	ldrh	r1, [r7, #10]
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	9301      	str	r3, [sp, #4]
 8006b6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b6c:	9300      	str	r3, [sp, #0]
 8006b6e:	4603      	mov	r3, r0
 8006b70:	68f8      	ldr	r0, [r7, #12]
 8006b72:	f000 fabf 	bl	80070f4 <I2C_RequestMemoryWrite>
 8006b76:	4603      	mov	r3, r0
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d005      	beq.n	8006b88 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8006b84:	2301      	movs	r3, #1
 8006b86:	e0a9      	b.n	8006cdc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	2bff      	cmp	r3, #255	@ 0xff
 8006b90:	d90e      	bls.n	8006bb0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	22ff      	movs	r2, #255	@ 0xff
 8006b96:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b9c:	b2da      	uxtb	r2, r3
 8006b9e:	8979      	ldrh	r1, [r7, #10]
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	9300      	str	r3, [sp, #0]
 8006ba4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006ba8:	68f8      	ldr	r0, [r7, #12]
 8006baa:	f000 fd33 	bl	8007614 <I2C_TransferConfig>
 8006bae:	e00f      	b.n	8006bd0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bb4:	b29a      	uxth	r2, r3
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006bbe:	b2da      	uxtb	r2, r3
 8006bc0:	8979      	ldrh	r1, [r7, #10]
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	9300      	str	r3, [sp, #0]
 8006bc6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006bca:	68f8      	ldr	r0, [r7, #12]
 8006bcc:	f000 fd22 	bl	8007614 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006bd0:	697a      	ldr	r2, [r7, #20]
 8006bd2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006bd4:	68f8      	ldr	r0, [r7, #12]
 8006bd6:	f000 fbb2 	bl	800733e <I2C_WaitOnTXISFlagUntilTimeout>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d001      	beq.n	8006be4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006be0:	2301      	movs	r3, #1
 8006be2:	e07b      	b.n	8006cdc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006be8:	781a      	ldrb	r2, [r3, #0]
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bf4:	1c5a      	adds	r2, r3, #1
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	3b01      	subs	r3, #1
 8006c02:	b29a      	uxth	r2, r3
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c0c:	3b01      	subs	r3, #1
 8006c0e:	b29a      	uxth	r2, r3
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d034      	beq.n	8006c88 <HAL_I2C_Mem_Write+0x1c8>
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d130      	bne.n	8006c88 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	9300      	str	r3, [sp, #0]
 8006c2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	2180      	movs	r1, #128	@ 0x80
 8006c30:	68f8      	ldr	r0, [r7, #12]
 8006c32:	f000 fb2b 	bl	800728c <I2C_WaitOnFlagUntilTimeout>
 8006c36:	4603      	mov	r3, r0
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d001      	beq.n	8006c40 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	e04d      	b.n	8006cdc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	2bff      	cmp	r3, #255	@ 0xff
 8006c48:	d90e      	bls.n	8006c68 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	22ff      	movs	r2, #255	@ 0xff
 8006c4e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c54:	b2da      	uxtb	r2, r3
 8006c56:	8979      	ldrh	r1, [r7, #10]
 8006c58:	2300      	movs	r3, #0
 8006c5a:	9300      	str	r3, [sp, #0]
 8006c5c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006c60:	68f8      	ldr	r0, [r7, #12]
 8006c62:	f000 fcd7 	bl	8007614 <I2C_TransferConfig>
 8006c66:	e00f      	b.n	8006c88 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c6c:	b29a      	uxth	r2, r3
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c76:	b2da      	uxtb	r2, r3
 8006c78:	8979      	ldrh	r1, [r7, #10]
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	9300      	str	r3, [sp, #0]
 8006c7e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006c82:	68f8      	ldr	r0, [r7, #12]
 8006c84:	f000 fcc6 	bl	8007614 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c8c:	b29b      	uxth	r3, r3
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d19e      	bne.n	8006bd0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c92:	697a      	ldr	r2, [r7, #20]
 8006c94:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006c96:	68f8      	ldr	r0, [r7, #12]
 8006c98:	f000 fb98 	bl	80073cc <I2C_WaitOnSTOPFlagUntilTimeout>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d001      	beq.n	8006ca6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	e01a      	b.n	8006cdc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	2220      	movs	r2, #32
 8006cac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	6859      	ldr	r1, [r3, #4]
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681a      	ldr	r2, [r3, #0]
 8006cb8:	4b0a      	ldr	r3, [pc, #40]	@ (8006ce4 <HAL_I2C_Mem_Write+0x224>)
 8006cba:	400b      	ands	r3, r1
 8006cbc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2220      	movs	r2, #32
 8006cc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	e000      	b.n	8006cdc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006cda:	2302      	movs	r3, #2
  }
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3718      	adds	r7, #24
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}
 8006ce4:	fe00e800 	.word	0xfe00e800

08006ce8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b088      	sub	sp, #32
 8006cec:	af02      	add	r7, sp, #8
 8006cee:	60f8      	str	r0, [r7, #12]
 8006cf0:	4608      	mov	r0, r1
 8006cf2:	4611      	mov	r1, r2
 8006cf4:	461a      	mov	r2, r3
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	817b      	strh	r3, [r7, #10]
 8006cfa:	460b      	mov	r3, r1
 8006cfc:	813b      	strh	r3, [r7, #8]
 8006cfe:	4613      	mov	r3, r2
 8006d00:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d08:	b2db      	uxtb	r3, r3
 8006d0a:	2b20      	cmp	r3, #32
 8006d0c:	f040 80fd 	bne.w	8006f0a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d10:	6a3b      	ldr	r3, [r7, #32]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d002      	beq.n	8006d1c <HAL_I2C_Mem_Read+0x34>
 8006d16:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d105      	bne.n	8006d28 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006d22:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8006d24:	2301      	movs	r3, #1
 8006d26:	e0f1      	b.n	8006f0c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006d2e:	2b01      	cmp	r3, #1
 8006d30:	d101      	bne.n	8006d36 <HAL_I2C_Mem_Read+0x4e>
 8006d32:	2302      	movs	r3, #2
 8006d34:	e0ea      	b.n	8006f0c <HAL_I2C_Mem_Read+0x224>
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2201      	movs	r2, #1
 8006d3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006d3e:	f7fb fdaf 	bl	80028a0 <HAL_GetTick>
 8006d42:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	9300      	str	r3, [sp, #0]
 8006d48:	2319      	movs	r3, #25
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006d50:	68f8      	ldr	r0, [r7, #12]
 8006d52:	f000 fa9b 	bl	800728c <I2C_WaitOnFlagUntilTimeout>
 8006d56:	4603      	mov	r3, r0
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d001      	beq.n	8006d60 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	e0d5      	b.n	8006f0c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	2222      	movs	r2, #34	@ 0x22
 8006d64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2240      	movs	r2, #64	@ 0x40
 8006d6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	2200      	movs	r2, #0
 8006d74:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	6a3a      	ldr	r2, [r7, #32]
 8006d7a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006d80:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	2200      	movs	r2, #0
 8006d86:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006d88:	88f8      	ldrh	r0, [r7, #6]
 8006d8a:	893a      	ldrh	r2, [r7, #8]
 8006d8c:	8979      	ldrh	r1, [r7, #10]
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	9301      	str	r3, [sp, #4]
 8006d92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d94:	9300      	str	r3, [sp, #0]
 8006d96:	4603      	mov	r3, r0
 8006d98:	68f8      	ldr	r0, [r7, #12]
 8006d9a:	f000 f9ff 	bl	800719c <I2C_RequestMemoryRead>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d005      	beq.n	8006db0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	2200      	movs	r2, #0
 8006da8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8006dac:	2301      	movs	r3, #1
 8006dae:	e0ad      	b.n	8006f0c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	2bff      	cmp	r3, #255	@ 0xff
 8006db8:	d90e      	bls.n	8006dd8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	22ff      	movs	r2, #255	@ 0xff
 8006dbe:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006dc4:	b2da      	uxtb	r2, r3
 8006dc6:	8979      	ldrh	r1, [r7, #10]
 8006dc8:	4b52      	ldr	r3, [pc, #328]	@ (8006f14 <HAL_I2C_Mem_Read+0x22c>)
 8006dca:	9300      	str	r3, [sp, #0]
 8006dcc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006dd0:	68f8      	ldr	r0, [r7, #12]
 8006dd2:	f000 fc1f 	bl	8007614 <I2C_TransferConfig>
 8006dd6:	e00f      	b.n	8006df8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ddc:	b29a      	uxth	r2, r3
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006de6:	b2da      	uxtb	r2, r3
 8006de8:	8979      	ldrh	r1, [r7, #10]
 8006dea:	4b4a      	ldr	r3, [pc, #296]	@ (8006f14 <HAL_I2C_Mem_Read+0x22c>)
 8006dec:	9300      	str	r3, [sp, #0]
 8006dee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006df2:	68f8      	ldr	r0, [r7, #12]
 8006df4:	f000 fc0e 	bl	8007614 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	9300      	str	r3, [sp, #0]
 8006dfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dfe:	2200      	movs	r2, #0
 8006e00:	2104      	movs	r1, #4
 8006e02:	68f8      	ldr	r0, [r7, #12]
 8006e04:	f000 fa42 	bl	800728c <I2C_WaitOnFlagUntilTimeout>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d001      	beq.n	8006e12 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	e07c      	b.n	8006f0c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e1c:	b2d2      	uxtb	r2, r2
 8006e1e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e24:	1c5a      	adds	r2, r3, #1
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e2e:	3b01      	subs	r3, #1
 8006e30:	b29a      	uxth	r2, r3
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e3a:	b29b      	uxth	r3, r3
 8006e3c:	3b01      	subs	r3, #1
 8006e3e:	b29a      	uxth	r2, r3
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e48:	b29b      	uxth	r3, r3
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d034      	beq.n	8006eb8 <HAL_I2C_Mem_Read+0x1d0>
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d130      	bne.n	8006eb8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	9300      	str	r3, [sp, #0]
 8006e5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	2180      	movs	r1, #128	@ 0x80
 8006e60:	68f8      	ldr	r0, [r7, #12]
 8006e62:	f000 fa13 	bl	800728c <I2C_WaitOnFlagUntilTimeout>
 8006e66:	4603      	mov	r3, r0
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d001      	beq.n	8006e70 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	e04d      	b.n	8006f0c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e74:	b29b      	uxth	r3, r3
 8006e76:	2bff      	cmp	r3, #255	@ 0xff
 8006e78:	d90e      	bls.n	8006e98 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	22ff      	movs	r2, #255	@ 0xff
 8006e7e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e84:	b2da      	uxtb	r2, r3
 8006e86:	8979      	ldrh	r1, [r7, #10]
 8006e88:	2300      	movs	r3, #0
 8006e8a:	9300      	str	r3, [sp, #0]
 8006e8c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006e90:	68f8      	ldr	r0, [r7, #12]
 8006e92:	f000 fbbf 	bl	8007614 <I2C_TransferConfig>
 8006e96:	e00f      	b.n	8006eb8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e9c:	b29a      	uxth	r2, r3
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ea6:	b2da      	uxtb	r2, r3
 8006ea8:	8979      	ldrh	r1, [r7, #10]
 8006eaa:	2300      	movs	r3, #0
 8006eac:	9300      	str	r3, [sp, #0]
 8006eae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006eb2:	68f8      	ldr	r0, [r7, #12]
 8006eb4:	f000 fbae 	bl	8007614 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ebc:	b29b      	uxth	r3, r3
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d19a      	bne.n	8006df8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ec2:	697a      	ldr	r2, [r7, #20]
 8006ec4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006ec6:	68f8      	ldr	r0, [r7, #12]
 8006ec8:	f000 fa80 	bl	80073cc <I2C_WaitOnSTOPFlagUntilTimeout>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d001      	beq.n	8006ed6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	e01a      	b.n	8006f0c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	2220      	movs	r2, #32
 8006edc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	6859      	ldr	r1, [r3, #4]
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681a      	ldr	r2, [r3, #0]
 8006ee8:	4b0b      	ldr	r3, [pc, #44]	@ (8006f18 <HAL_I2C_Mem_Read+0x230>)
 8006eea:	400b      	ands	r3, r1
 8006eec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	2220      	movs	r2, #32
 8006ef2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2200      	movs	r2, #0
 8006f02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006f06:	2300      	movs	r3, #0
 8006f08:	e000      	b.n	8006f0c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006f0a:	2302      	movs	r3, #2
  }
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3718      	adds	r7, #24
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bd80      	pop	{r7, pc}
 8006f14:	80002400 	.word	0x80002400
 8006f18:	fe00e800 	.word	0xfe00e800

08006f1c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b08a      	sub	sp, #40	@ 0x28
 8006f20:	af02      	add	r7, sp, #8
 8006f22:	60f8      	str	r0, [r7, #12]
 8006f24:	607a      	str	r2, [r7, #4]
 8006f26:	603b      	str	r3, [r7, #0]
 8006f28:	460b      	mov	r3, r1
 8006f2a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f36:	b2db      	uxtb	r3, r3
 8006f38:	2b20      	cmp	r3, #32
 8006f3a:	f040 80d6 	bne.w	80070ea <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	699b      	ldr	r3, [r3, #24]
 8006f44:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006f48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f4c:	d101      	bne.n	8006f52 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8006f4e:	2302      	movs	r3, #2
 8006f50:	e0cc      	b.n	80070ec <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	d101      	bne.n	8006f60 <HAL_I2C_IsDeviceReady+0x44>
 8006f5c:	2302      	movs	r3, #2
 8006f5e:	e0c5      	b.n	80070ec <HAL_I2C_IsDeviceReady+0x1d0>
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	2201      	movs	r2, #1
 8006f64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	2224      	movs	r2, #36	@ 0x24
 8006f6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2200      	movs	r2, #0
 8006f74:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	68db      	ldr	r3, [r3, #12]
 8006f7a:	2b01      	cmp	r3, #1
 8006f7c:	d107      	bne.n	8006f8e <HAL_I2C_IsDeviceReady+0x72>
 8006f7e:	897b      	ldrh	r3, [r7, #10]
 8006f80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f84:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006f88:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8006f8c:	e006      	b.n	8006f9c <HAL_I2C_IsDeviceReady+0x80>
 8006f8e:	897b      	ldrh	r3, [r7, #10]
 8006f90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f94:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006f98:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8006f9c:	68fa      	ldr	r2, [r7, #12]
 8006f9e:	6812      	ldr	r2, [r2, #0]
 8006fa0:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8006fa2:	f7fb fc7d 	bl	80028a0 <HAL_GetTick>
 8006fa6:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	699b      	ldr	r3, [r3, #24]
 8006fae:	f003 0320 	and.w	r3, r3, #32
 8006fb2:	2b20      	cmp	r3, #32
 8006fb4:	bf0c      	ite	eq
 8006fb6:	2301      	moveq	r3, #1
 8006fb8:	2300      	movne	r3, #0
 8006fba:	b2db      	uxtb	r3, r3
 8006fbc:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	699b      	ldr	r3, [r3, #24]
 8006fc4:	f003 0310 	and.w	r3, r3, #16
 8006fc8:	2b10      	cmp	r3, #16
 8006fca:	bf0c      	ite	eq
 8006fcc:	2301      	moveq	r3, #1
 8006fce:	2300      	movne	r3, #0
 8006fd0:	b2db      	uxtb	r3, r3
 8006fd2:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8006fd4:	e034      	b.n	8007040 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fdc:	d01a      	beq.n	8007014 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006fde:	f7fb fc5f 	bl	80028a0 <HAL_GetTick>
 8006fe2:	4602      	mov	r2, r0
 8006fe4:	69bb      	ldr	r3, [r7, #24]
 8006fe6:	1ad3      	subs	r3, r2, r3
 8006fe8:	683a      	ldr	r2, [r7, #0]
 8006fea:	429a      	cmp	r2, r3
 8006fec:	d302      	bcc.n	8006ff4 <HAL_I2C_IsDeviceReady+0xd8>
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d10f      	bne.n	8007014 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2220      	movs	r2, #32
 8006ff8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007000:	f043 0220 	orr.w	r2, r3, #32
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2200      	movs	r2, #0
 800700c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8007010:	2301      	movs	r3, #1
 8007012:	e06b      	b.n	80070ec <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	699b      	ldr	r3, [r3, #24]
 800701a:	f003 0320 	and.w	r3, r3, #32
 800701e:	2b20      	cmp	r3, #32
 8007020:	bf0c      	ite	eq
 8007022:	2301      	moveq	r3, #1
 8007024:	2300      	movne	r3, #0
 8007026:	b2db      	uxtb	r3, r3
 8007028:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	699b      	ldr	r3, [r3, #24]
 8007030:	f003 0310 	and.w	r3, r3, #16
 8007034:	2b10      	cmp	r3, #16
 8007036:	bf0c      	ite	eq
 8007038:	2301      	moveq	r3, #1
 800703a:	2300      	movne	r3, #0
 800703c:	b2db      	uxtb	r3, r3
 800703e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8007040:	7ffb      	ldrb	r3, [r7, #31]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d102      	bne.n	800704c <HAL_I2C_IsDeviceReady+0x130>
 8007046:	7fbb      	ldrb	r3, [r7, #30]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d0c4      	beq.n	8006fd6 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	699b      	ldr	r3, [r3, #24]
 8007052:	f003 0310 	and.w	r3, r3, #16
 8007056:	2b10      	cmp	r3, #16
 8007058:	d01a      	beq.n	8007090 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800705a:	69bb      	ldr	r3, [r7, #24]
 800705c:	9300      	str	r3, [sp, #0]
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	2200      	movs	r2, #0
 8007062:	2120      	movs	r1, #32
 8007064:	68f8      	ldr	r0, [r7, #12]
 8007066:	f000 f911 	bl	800728c <I2C_WaitOnFlagUntilTimeout>
 800706a:	4603      	mov	r3, r0
 800706c:	2b00      	cmp	r3, #0
 800706e:	d001      	beq.n	8007074 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8007070:	2301      	movs	r3, #1
 8007072:	e03b      	b.n	80070ec <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	2220      	movs	r2, #32
 800707a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2220      	movs	r2, #32
 8007080:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2200      	movs	r2, #0
 8007088:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 800708c:	2300      	movs	r3, #0
 800708e:	e02d      	b.n	80070ec <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8007090:	69bb      	ldr	r3, [r7, #24]
 8007092:	9300      	str	r3, [sp, #0]
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	2200      	movs	r2, #0
 8007098:	2120      	movs	r1, #32
 800709a:	68f8      	ldr	r0, [r7, #12]
 800709c:	f000 f8f6 	bl	800728c <I2C_WaitOnFlagUntilTimeout>
 80070a0:	4603      	mov	r3, r0
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d001      	beq.n	80070aa <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 80070a6:	2301      	movs	r3, #1
 80070a8:	e020      	b.n	80070ec <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	2210      	movs	r2, #16
 80070b0:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	2220      	movs	r2, #32
 80070b8:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	3301      	adds	r3, #1
 80070be:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	687a      	ldr	r2, [r7, #4]
 80070c4:	429a      	cmp	r2, r3
 80070c6:	f63f af56 	bhi.w	8006f76 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2220      	movs	r2, #32
 80070ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070d6:	f043 0220 	orr.w	r2, r3, #32
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	2200      	movs	r2, #0
 80070e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 80070e6:	2301      	movs	r3, #1
 80070e8:	e000      	b.n	80070ec <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 80070ea:	2302      	movs	r3, #2
  }
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	3720      	adds	r7, #32
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}

080070f4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b086      	sub	sp, #24
 80070f8:	af02      	add	r7, sp, #8
 80070fa:	60f8      	str	r0, [r7, #12]
 80070fc:	4608      	mov	r0, r1
 80070fe:	4611      	mov	r1, r2
 8007100:	461a      	mov	r2, r3
 8007102:	4603      	mov	r3, r0
 8007104:	817b      	strh	r3, [r7, #10]
 8007106:	460b      	mov	r3, r1
 8007108:	813b      	strh	r3, [r7, #8]
 800710a:	4613      	mov	r3, r2
 800710c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800710e:	88fb      	ldrh	r3, [r7, #6]
 8007110:	b2da      	uxtb	r2, r3
 8007112:	8979      	ldrh	r1, [r7, #10]
 8007114:	4b20      	ldr	r3, [pc, #128]	@ (8007198 <I2C_RequestMemoryWrite+0xa4>)
 8007116:	9300      	str	r3, [sp, #0]
 8007118:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800711c:	68f8      	ldr	r0, [r7, #12]
 800711e:	f000 fa79 	bl	8007614 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007122:	69fa      	ldr	r2, [r7, #28]
 8007124:	69b9      	ldr	r1, [r7, #24]
 8007126:	68f8      	ldr	r0, [r7, #12]
 8007128:	f000 f909 	bl	800733e <I2C_WaitOnTXISFlagUntilTimeout>
 800712c:	4603      	mov	r3, r0
 800712e:	2b00      	cmp	r3, #0
 8007130:	d001      	beq.n	8007136 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8007132:	2301      	movs	r3, #1
 8007134:	e02c      	b.n	8007190 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007136:	88fb      	ldrh	r3, [r7, #6]
 8007138:	2b01      	cmp	r3, #1
 800713a:	d105      	bne.n	8007148 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800713c:	893b      	ldrh	r3, [r7, #8]
 800713e:	b2da      	uxtb	r2, r3
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	629a      	str	r2, [r3, #40]	@ 0x28
 8007146:	e015      	b.n	8007174 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007148:	893b      	ldrh	r3, [r7, #8]
 800714a:	0a1b      	lsrs	r3, r3, #8
 800714c:	b29b      	uxth	r3, r3
 800714e:	b2da      	uxtb	r2, r3
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007156:	69fa      	ldr	r2, [r7, #28]
 8007158:	69b9      	ldr	r1, [r7, #24]
 800715a:	68f8      	ldr	r0, [r7, #12]
 800715c:	f000 f8ef 	bl	800733e <I2C_WaitOnTXISFlagUntilTimeout>
 8007160:	4603      	mov	r3, r0
 8007162:	2b00      	cmp	r3, #0
 8007164:	d001      	beq.n	800716a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8007166:	2301      	movs	r3, #1
 8007168:	e012      	b.n	8007190 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800716a:	893b      	ldrh	r3, [r7, #8]
 800716c:	b2da      	uxtb	r2, r3
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007174:	69fb      	ldr	r3, [r7, #28]
 8007176:	9300      	str	r3, [sp, #0]
 8007178:	69bb      	ldr	r3, [r7, #24]
 800717a:	2200      	movs	r2, #0
 800717c:	2180      	movs	r1, #128	@ 0x80
 800717e:	68f8      	ldr	r0, [r7, #12]
 8007180:	f000 f884 	bl	800728c <I2C_WaitOnFlagUntilTimeout>
 8007184:	4603      	mov	r3, r0
 8007186:	2b00      	cmp	r3, #0
 8007188:	d001      	beq.n	800718e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800718a:	2301      	movs	r3, #1
 800718c:	e000      	b.n	8007190 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800718e:	2300      	movs	r3, #0
}
 8007190:	4618      	mov	r0, r3
 8007192:	3710      	adds	r7, #16
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}
 8007198:	80002000 	.word	0x80002000

0800719c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b086      	sub	sp, #24
 80071a0:	af02      	add	r7, sp, #8
 80071a2:	60f8      	str	r0, [r7, #12]
 80071a4:	4608      	mov	r0, r1
 80071a6:	4611      	mov	r1, r2
 80071a8:	461a      	mov	r2, r3
 80071aa:	4603      	mov	r3, r0
 80071ac:	817b      	strh	r3, [r7, #10]
 80071ae:	460b      	mov	r3, r1
 80071b0:	813b      	strh	r3, [r7, #8]
 80071b2:	4613      	mov	r3, r2
 80071b4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80071b6:	88fb      	ldrh	r3, [r7, #6]
 80071b8:	b2da      	uxtb	r2, r3
 80071ba:	8979      	ldrh	r1, [r7, #10]
 80071bc:	4b20      	ldr	r3, [pc, #128]	@ (8007240 <I2C_RequestMemoryRead+0xa4>)
 80071be:	9300      	str	r3, [sp, #0]
 80071c0:	2300      	movs	r3, #0
 80071c2:	68f8      	ldr	r0, [r7, #12]
 80071c4:	f000 fa26 	bl	8007614 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80071c8:	69fa      	ldr	r2, [r7, #28]
 80071ca:	69b9      	ldr	r1, [r7, #24]
 80071cc:	68f8      	ldr	r0, [r7, #12]
 80071ce:	f000 f8b6 	bl	800733e <I2C_WaitOnTXISFlagUntilTimeout>
 80071d2:	4603      	mov	r3, r0
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d001      	beq.n	80071dc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80071d8:	2301      	movs	r3, #1
 80071da:	e02c      	b.n	8007236 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80071dc:	88fb      	ldrh	r3, [r7, #6]
 80071de:	2b01      	cmp	r3, #1
 80071e0:	d105      	bne.n	80071ee <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80071e2:	893b      	ldrh	r3, [r7, #8]
 80071e4:	b2da      	uxtb	r2, r3
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	629a      	str	r2, [r3, #40]	@ 0x28
 80071ec:	e015      	b.n	800721a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80071ee:	893b      	ldrh	r3, [r7, #8]
 80071f0:	0a1b      	lsrs	r3, r3, #8
 80071f2:	b29b      	uxth	r3, r3
 80071f4:	b2da      	uxtb	r2, r3
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80071fc:	69fa      	ldr	r2, [r7, #28]
 80071fe:	69b9      	ldr	r1, [r7, #24]
 8007200:	68f8      	ldr	r0, [r7, #12]
 8007202:	f000 f89c 	bl	800733e <I2C_WaitOnTXISFlagUntilTimeout>
 8007206:	4603      	mov	r3, r0
 8007208:	2b00      	cmp	r3, #0
 800720a:	d001      	beq.n	8007210 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800720c:	2301      	movs	r3, #1
 800720e:	e012      	b.n	8007236 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007210:	893b      	ldrh	r3, [r7, #8]
 8007212:	b2da      	uxtb	r2, r3
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800721a:	69fb      	ldr	r3, [r7, #28]
 800721c:	9300      	str	r3, [sp, #0]
 800721e:	69bb      	ldr	r3, [r7, #24]
 8007220:	2200      	movs	r2, #0
 8007222:	2140      	movs	r1, #64	@ 0x40
 8007224:	68f8      	ldr	r0, [r7, #12]
 8007226:	f000 f831 	bl	800728c <I2C_WaitOnFlagUntilTimeout>
 800722a:	4603      	mov	r3, r0
 800722c:	2b00      	cmp	r3, #0
 800722e:	d001      	beq.n	8007234 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007230:	2301      	movs	r3, #1
 8007232:	e000      	b.n	8007236 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007234:	2300      	movs	r3, #0
}
 8007236:	4618      	mov	r0, r3
 8007238:	3710      	adds	r7, #16
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}
 800723e:	bf00      	nop
 8007240:	80002000 	.word	0x80002000

08007244 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007244:	b480      	push	{r7}
 8007246:	b083      	sub	sp, #12
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	699b      	ldr	r3, [r3, #24]
 8007252:	f003 0302 	and.w	r3, r3, #2
 8007256:	2b02      	cmp	r3, #2
 8007258:	d103      	bne.n	8007262 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	2200      	movs	r2, #0
 8007260:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	699b      	ldr	r3, [r3, #24]
 8007268:	f003 0301 	and.w	r3, r3, #1
 800726c:	2b01      	cmp	r3, #1
 800726e:	d007      	beq.n	8007280 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	699a      	ldr	r2, [r3, #24]
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f042 0201 	orr.w	r2, r2, #1
 800727e:	619a      	str	r2, [r3, #24]
  }
}
 8007280:	bf00      	nop
 8007282:	370c      	adds	r7, #12
 8007284:	46bd      	mov	sp, r7
 8007286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728a:	4770      	bx	lr

0800728c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b084      	sub	sp, #16
 8007290:	af00      	add	r7, sp, #0
 8007292:	60f8      	str	r0, [r7, #12]
 8007294:	60b9      	str	r1, [r7, #8]
 8007296:	603b      	str	r3, [r7, #0]
 8007298:	4613      	mov	r3, r2
 800729a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800729c:	e03b      	b.n	8007316 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800729e:	69ba      	ldr	r2, [r7, #24]
 80072a0:	6839      	ldr	r1, [r7, #0]
 80072a2:	68f8      	ldr	r0, [r7, #12]
 80072a4:	f000 f8d6 	bl	8007454 <I2C_IsErrorOccurred>
 80072a8:	4603      	mov	r3, r0
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d001      	beq.n	80072b2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80072ae:	2301      	movs	r3, #1
 80072b0:	e041      	b.n	8007336 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072b8:	d02d      	beq.n	8007316 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072ba:	f7fb faf1 	bl	80028a0 <HAL_GetTick>
 80072be:	4602      	mov	r2, r0
 80072c0:	69bb      	ldr	r3, [r7, #24]
 80072c2:	1ad3      	subs	r3, r2, r3
 80072c4:	683a      	ldr	r2, [r7, #0]
 80072c6:	429a      	cmp	r2, r3
 80072c8:	d302      	bcc.n	80072d0 <I2C_WaitOnFlagUntilTimeout+0x44>
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d122      	bne.n	8007316 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	699a      	ldr	r2, [r3, #24]
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	4013      	ands	r3, r2
 80072da:	68ba      	ldr	r2, [r7, #8]
 80072dc:	429a      	cmp	r2, r3
 80072de:	bf0c      	ite	eq
 80072e0:	2301      	moveq	r3, #1
 80072e2:	2300      	movne	r3, #0
 80072e4:	b2db      	uxtb	r3, r3
 80072e6:	461a      	mov	r2, r3
 80072e8:	79fb      	ldrb	r3, [r7, #7]
 80072ea:	429a      	cmp	r2, r3
 80072ec:	d113      	bne.n	8007316 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072f2:	f043 0220 	orr.w	r2, r3, #32
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2220      	movs	r2, #32
 80072fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2200      	movs	r2, #0
 8007306:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	2200      	movs	r2, #0
 800730e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8007312:	2301      	movs	r3, #1
 8007314:	e00f      	b.n	8007336 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	699a      	ldr	r2, [r3, #24]
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	4013      	ands	r3, r2
 8007320:	68ba      	ldr	r2, [r7, #8]
 8007322:	429a      	cmp	r2, r3
 8007324:	bf0c      	ite	eq
 8007326:	2301      	moveq	r3, #1
 8007328:	2300      	movne	r3, #0
 800732a:	b2db      	uxtb	r3, r3
 800732c:	461a      	mov	r2, r3
 800732e:	79fb      	ldrb	r3, [r7, #7]
 8007330:	429a      	cmp	r2, r3
 8007332:	d0b4      	beq.n	800729e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007334:	2300      	movs	r3, #0
}
 8007336:	4618      	mov	r0, r3
 8007338:	3710      	adds	r7, #16
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}

0800733e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800733e:	b580      	push	{r7, lr}
 8007340:	b084      	sub	sp, #16
 8007342:	af00      	add	r7, sp, #0
 8007344:	60f8      	str	r0, [r7, #12]
 8007346:	60b9      	str	r1, [r7, #8]
 8007348:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800734a:	e033      	b.n	80073b4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800734c:	687a      	ldr	r2, [r7, #4]
 800734e:	68b9      	ldr	r1, [r7, #8]
 8007350:	68f8      	ldr	r0, [r7, #12]
 8007352:	f000 f87f 	bl	8007454 <I2C_IsErrorOccurred>
 8007356:	4603      	mov	r3, r0
 8007358:	2b00      	cmp	r3, #0
 800735a:	d001      	beq.n	8007360 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800735c:	2301      	movs	r3, #1
 800735e:	e031      	b.n	80073c4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007366:	d025      	beq.n	80073b4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007368:	f7fb fa9a 	bl	80028a0 <HAL_GetTick>
 800736c:	4602      	mov	r2, r0
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	1ad3      	subs	r3, r2, r3
 8007372:	68ba      	ldr	r2, [r7, #8]
 8007374:	429a      	cmp	r2, r3
 8007376:	d302      	bcc.n	800737e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d11a      	bne.n	80073b4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	699b      	ldr	r3, [r3, #24]
 8007384:	f003 0302 	and.w	r3, r3, #2
 8007388:	2b02      	cmp	r3, #2
 800738a:	d013      	beq.n	80073b4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007390:	f043 0220 	orr.w	r2, r3, #32
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2220      	movs	r2, #32
 800739c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2200      	movs	r2, #0
 80073a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	2200      	movs	r2, #0
 80073ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80073b0:	2301      	movs	r3, #1
 80073b2:	e007      	b.n	80073c4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	699b      	ldr	r3, [r3, #24]
 80073ba:	f003 0302 	and.w	r3, r3, #2
 80073be:	2b02      	cmp	r3, #2
 80073c0:	d1c4      	bne.n	800734c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80073c2:	2300      	movs	r3, #0
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	3710      	adds	r7, #16
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}

080073cc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b084      	sub	sp, #16
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	60f8      	str	r0, [r7, #12]
 80073d4:	60b9      	str	r1, [r7, #8]
 80073d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80073d8:	e02f      	b.n	800743a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80073da:	687a      	ldr	r2, [r7, #4]
 80073dc:	68b9      	ldr	r1, [r7, #8]
 80073de:	68f8      	ldr	r0, [r7, #12]
 80073e0:	f000 f838 	bl	8007454 <I2C_IsErrorOccurred>
 80073e4:	4603      	mov	r3, r0
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d001      	beq.n	80073ee <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80073ea:	2301      	movs	r3, #1
 80073ec:	e02d      	b.n	800744a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073ee:	f7fb fa57 	bl	80028a0 <HAL_GetTick>
 80073f2:	4602      	mov	r2, r0
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	1ad3      	subs	r3, r2, r3
 80073f8:	68ba      	ldr	r2, [r7, #8]
 80073fa:	429a      	cmp	r2, r3
 80073fc:	d302      	bcc.n	8007404 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d11a      	bne.n	800743a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	699b      	ldr	r3, [r3, #24]
 800740a:	f003 0320 	and.w	r3, r3, #32
 800740e:	2b20      	cmp	r3, #32
 8007410:	d013      	beq.n	800743a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007416:	f043 0220 	orr.w	r2, r3, #32
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	2220      	movs	r2, #32
 8007422:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2200      	movs	r2, #0
 800742a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	2200      	movs	r2, #0
 8007432:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8007436:	2301      	movs	r3, #1
 8007438:	e007      	b.n	800744a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	699b      	ldr	r3, [r3, #24]
 8007440:	f003 0320 	and.w	r3, r3, #32
 8007444:	2b20      	cmp	r3, #32
 8007446:	d1c8      	bne.n	80073da <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007448:	2300      	movs	r3, #0
}
 800744a:	4618      	mov	r0, r3
 800744c:	3710      	adds	r7, #16
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}
	...

08007454 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b08a      	sub	sp, #40	@ 0x28
 8007458:	af00      	add	r7, sp, #0
 800745a:	60f8      	str	r0, [r7, #12]
 800745c:	60b9      	str	r1, [r7, #8]
 800745e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007460:	2300      	movs	r3, #0
 8007462:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	699b      	ldr	r3, [r3, #24]
 800746c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800746e:	2300      	movs	r3, #0
 8007470:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007476:	69bb      	ldr	r3, [r7, #24]
 8007478:	f003 0310 	and.w	r3, r3, #16
 800747c:	2b00      	cmp	r3, #0
 800747e:	d068      	beq.n	8007552 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	2210      	movs	r2, #16
 8007486:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007488:	e049      	b.n	800751e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007490:	d045      	beq.n	800751e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007492:	f7fb fa05 	bl	80028a0 <HAL_GetTick>
 8007496:	4602      	mov	r2, r0
 8007498:	69fb      	ldr	r3, [r7, #28]
 800749a:	1ad3      	subs	r3, r2, r3
 800749c:	68ba      	ldr	r2, [r7, #8]
 800749e:	429a      	cmp	r2, r3
 80074a0:	d302      	bcc.n	80074a8 <I2C_IsErrorOccurred+0x54>
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d13a      	bne.n	800751e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80074b2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80074ba:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	699b      	ldr	r3, [r3, #24]
 80074c2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80074c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80074ca:	d121      	bne.n	8007510 <I2C_IsErrorOccurred+0xbc>
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80074d2:	d01d      	beq.n	8007510 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80074d4:	7cfb      	ldrb	r3, [r7, #19]
 80074d6:	2b20      	cmp	r3, #32
 80074d8:	d01a      	beq.n	8007510 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	685a      	ldr	r2, [r3, #4]
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80074e8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80074ea:	f7fb f9d9 	bl	80028a0 <HAL_GetTick>
 80074ee:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80074f0:	e00e      	b.n	8007510 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80074f2:	f7fb f9d5 	bl	80028a0 <HAL_GetTick>
 80074f6:	4602      	mov	r2, r0
 80074f8:	69fb      	ldr	r3, [r7, #28]
 80074fa:	1ad3      	subs	r3, r2, r3
 80074fc:	2b19      	cmp	r3, #25
 80074fe:	d907      	bls.n	8007510 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8007500:	6a3b      	ldr	r3, [r7, #32]
 8007502:	f043 0320 	orr.w	r3, r3, #32
 8007506:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007508:	2301      	movs	r3, #1
 800750a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800750e:	e006      	b.n	800751e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	699b      	ldr	r3, [r3, #24]
 8007516:	f003 0320 	and.w	r3, r3, #32
 800751a:	2b20      	cmp	r3, #32
 800751c:	d1e9      	bne.n	80074f2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	699b      	ldr	r3, [r3, #24]
 8007524:	f003 0320 	and.w	r3, r3, #32
 8007528:	2b20      	cmp	r3, #32
 800752a:	d003      	beq.n	8007534 <I2C_IsErrorOccurred+0xe0>
 800752c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007530:	2b00      	cmp	r3, #0
 8007532:	d0aa      	beq.n	800748a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007534:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007538:	2b00      	cmp	r3, #0
 800753a:	d103      	bne.n	8007544 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	2220      	movs	r2, #32
 8007542:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007544:	6a3b      	ldr	r3, [r7, #32]
 8007546:	f043 0304 	orr.w	r3, r3, #4
 800754a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800754c:	2301      	movs	r3, #1
 800754e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	699b      	ldr	r3, [r3, #24]
 8007558:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800755a:	69bb      	ldr	r3, [r7, #24]
 800755c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007560:	2b00      	cmp	r3, #0
 8007562:	d00b      	beq.n	800757c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007564:	6a3b      	ldr	r3, [r7, #32]
 8007566:	f043 0301 	orr.w	r3, r3, #1
 800756a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007574:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007576:	2301      	movs	r3, #1
 8007578:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800757c:	69bb      	ldr	r3, [r7, #24]
 800757e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007582:	2b00      	cmp	r3, #0
 8007584:	d00b      	beq.n	800759e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007586:	6a3b      	ldr	r3, [r7, #32]
 8007588:	f043 0308 	orr.w	r3, r3, #8
 800758c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007596:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007598:	2301      	movs	r3, #1
 800759a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800759e:	69bb      	ldr	r3, [r7, #24]
 80075a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d00b      	beq.n	80075c0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80075a8:	6a3b      	ldr	r3, [r7, #32]
 80075aa:	f043 0302 	orr.w	r3, r3, #2
 80075ae:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80075b8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80075ba:	2301      	movs	r3, #1
 80075bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80075c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d01c      	beq.n	8007602 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80075c8:	68f8      	ldr	r0, [r7, #12]
 80075ca:	f7ff fe3b 	bl	8007244 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	6859      	ldr	r1, [r3, #4]
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681a      	ldr	r2, [r3, #0]
 80075d8:	4b0d      	ldr	r3, [pc, #52]	@ (8007610 <I2C_IsErrorOccurred+0x1bc>)
 80075da:	400b      	ands	r3, r1
 80075dc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80075e2:	6a3b      	ldr	r3, [r7, #32]
 80075e4:	431a      	orrs	r2, r3
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2220      	movs	r2, #32
 80075ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	2200      	movs	r2, #0
 80075f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2200      	movs	r2, #0
 80075fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8007602:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8007606:	4618      	mov	r0, r3
 8007608:	3728      	adds	r7, #40	@ 0x28
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}
 800760e:	bf00      	nop
 8007610:	fe00e800 	.word	0xfe00e800

08007614 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007614:	b480      	push	{r7}
 8007616:	b087      	sub	sp, #28
 8007618:	af00      	add	r7, sp, #0
 800761a:	60f8      	str	r0, [r7, #12]
 800761c:	607b      	str	r3, [r7, #4]
 800761e:	460b      	mov	r3, r1
 8007620:	817b      	strh	r3, [r7, #10]
 8007622:	4613      	mov	r3, r2
 8007624:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007626:	897b      	ldrh	r3, [r7, #10]
 8007628:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800762c:	7a7b      	ldrb	r3, [r7, #9]
 800762e:	041b      	lsls	r3, r3, #16
 8007630:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007634:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800763a:	6a3b      	ldr	r3, [r7, #32]
 800763c:	4313      	orrs	r3, r2
 800763e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007642:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	685a      	ldr	r2, [r3, #4]
 800764a:	6a3b      	ldr	r3, [r7, #32]
 800764c:	0d5b      	lsrs	r3, r3, #21
 800764e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8007652:	4b08      	ldr	r3, [pc, #32]	@ (8007674 <I2C_TransferConfig+0x60>)
 8007654:	430b      	orrs	r3, r1
 8007656:	43db      	mvns	r3, r3
 8007658:	ea02 0103 	and.w	r1, r2, r3
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	697a      	ldr	r2, [r7, #20]
 8007662:	430a      	orrs	r2, r1
 8007664:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007666:	bf00      	nop
 8007668:	371c      	adds	r7, #28
 800766a:	46bd      	mov	sp, r7
 800766c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007670:	4770      	bx	lr
 8007672:	bf00      	nop
 8007674:	03ff63ff 	.word	0x03ff63ff

08007678 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007678:	b480      	push	{r7}
 800767a:	b083      	sub	sp, #12
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
 8007680:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007688:	b2db      	uxtb	r3, r3
 800768a:	2b20      	cmp	r3, #32
 800768c:	d138      	bne.n	8007700 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007694:	2b01      	cmp	r3, #1
 8007696:	d101      	bne.n	800769c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007698:	2302      	movs	r3, #2
 800769a:	e032      	b.n	8007702 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2201      	movs	r2, #1
 80076a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2224      	movs	r2, #36	@ 0x24
 80076a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	681a      	ldr	r2, [r3, #0]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f022 0201 	bic.w	r2, r2, #1
 80076ba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	681a      	ldr	r2, [r3, #0]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80076ca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	6819      	ldr	r1, [r3, #0]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	683a      	ldr	r2, [r7, #0]
 80076d8:	430a      	orrs	r2, r1
 80076da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	681a      	ldr	r2, [r3, #0]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f042 0201 	orr.w	r2, r2, #1
 80076ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2220      	movs	r2, #32
 80076f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2200      	movs	r2, #0
 80076f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80076fc:	2300      	movs	r3, #0
 80076fe:	e000      	b.n	8007702 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007700:	2302      	movs	r3, #2
  }
}
 8007702:	4618      	mov	r0, r3
 8007704:	370c      	adds	r7, #12
 8007706:	46bd      	mov	sp, r7
 8007708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770c:	4770      	bx	lr

0800770e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800770e:	b480      	push	{r7}
 8007710:	b085      	sub	sp, #20
 8007712:	af00      	add	r7, sp, #0
 8007714:	6078      	str	r0, [r7, #4]
 8007716:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800771e:	b2db      	uxtb	r3, r3
 8007720:	2b20      	cmp	r3, #32
 8007722:	d139      	bne.n	8007798 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800772a:	2b01      	cmp	r3, #1
 800772c:	d101      	bne.n	8007732 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800772e:	2302      	movs	r3, #2
 8007730:	e033      	b.n	800779a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2201      	movs	r2, #1
 8007736:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2224      	movs	r2, #36	@ 0x24
 800773e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	681a      	ldr	r2, [r3, #0]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f022 0201 	bic.w	r2, r2, #1
 8007750:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007760:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	021b      	lsls	r3, r3, #8
 8007766:	68fa      	ldr	r2, [r7, #12]
 8007768:	4313      	orrs	r3, r2
 800776a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	68fa      	ldr	r2, [r7, #12]
 8007772:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	681a      	ldr	r2, [r3, #0]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f042 0201 	orr.w	r2, r2, #1
 8007782:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2220      	movs	r2, #32
 8007788:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2200      	movs	r2, #0
 8007790:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007794:	2300      	movs	r3, #0
 8007796:	e000      	b.n	800779a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007798:	2302      	movs	r3, #2
  }
}
 800779a:	4618      	mov	r0, r3
 800779c:	3714      	adds	r7, #20
 800779e:	46bd      	mov	sp, r7
 80077a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a4:	4770      	bx	lr
	...

080077a8 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b084      	sub	sp, #16
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80077b0:	2300      	movs	r3, #0
 80077b2:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d101      	bne.n	80077be <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 80077ba:	2301      	movs	r3, #1
 80077bc:	e0bb      	b.n	8007936 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80077c4:	b2db      	uxtb	r3, r3
 80077c6:	2b05      	cmp	r3, #5
 80077c8:	d101      	bne.n	80077ce <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 80077ca:	2301      	movs	r3, #1
 80077cc:	e0b3      	b.n	8007936 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80077d4:	b2db      	uxtb	r3, r3
 80077d6:	2b02      	cmp	r3, #2
 80077d8:	d101      	bne.n	80077de <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 80077da:	2301      	movs	r3, #1
 80077dc:	e0ab      	b.n	8007936 <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80077de:	4b58      	ldr	r3, [pc, #352]	@ (8007940 <HAL_OPAMP_Init+0x198>)
 80077e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80077e2:	4a57      	ldr	r2, [pc, #348]	@ (8007940 <HAL_OPAMP_Init+0x198>)
 80077e4:	f043 0301 	orr.w	r3, r3, #1
 80077e8:	6613      	str	r3, [r2, #96]	@ 0x60
 80077ea:	4b55      	ldr	r3, [pc, #340]	@ (8007940 <HAL_OPAMP_Init+0x198>)
 80077ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80077ee:	f003 0301 	and.w	r3, r3, #1
 80077f2:	60bb      	str	r3, [r7, #8]
 80077f4:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80077fc:	b2db      	uxtb	r3, r3
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d103      	bne.n	800780a <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2200      	movs	r2, #0
 8007806:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f7fa fa3a 	bl	8001c84 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	689b      	ldr	r3, [r3, #8]
 8007814:	2b40      	cmp	r3, #64	@ 0x40
 8007816:	d003      	beq.n	8007820 <HAL_OPAMP_Init+0x78>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	689b      	ldr	r3, [r3, #8]
 800781c:	2b60      	cmp	r3, #96	@ 0x60
 800781e:	d133      	bne.n	8007888 <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f023 0110 	bic.w	r1, r3, #16
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	430a      	orrs	r2, r1
 8007834:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	681a      	ldr	r2, [r3, #0]
 800783c:	4b41      	ldr	r3, [pc, #260]	@ (8007944 <HAL_OPAMP_Init+0x19c>)
 800783e:	4013      	ands	r3, r2
 8007840:	687a      	ldr	r2, [r7, #4]
 8007842:	6851      	ldr	r1, [r2, #4]
 8007844:	687a      	ldr	r2, [r7, #4]
 8007846:	6892      	ldr	r2, [r2, #8]
 8007848:	4311      	orrs	r1, r2
 800784a:	687a      	ldr	r2, [r7, #4]
 800784c:	6912      	ldr	r2, [r2, #16]
 800784e:	430a      	orrs	r2, r1
 8007850:	6879      	ldr	r1, [r7, #4]
 8007852:	7d09      	ldrb	r1, [r1, #20]
 8007854:	2901      	cmp	r1, #1
 8007856:	d102      	bne.n	800785e <HAL_OPAMP_Init+0xb6>
 8007858:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800785c:	e000      	b.n	8007860 <HAL_OPAMP_Init+0xb8>
 800785e:	2100      	movs	r1, #0
 8007860:	4311      	orrs	r1, r2
 8007862:	687a      	ldr	r2, [r7, #4]
 8007864:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007866:	4311      	orrs	r1, r2
 8007868:	687a      	ldr	r2, [r7, #4]
 800786a:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800786c:	4311      	orrs	r1, r2
 800786e:	687a      	ldr	r2, [r7, #4]
 8007870:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007872:	04d2      	lsls	r2, r2, #19
 8007874:	4311      	orrs	r1, r2
 8007876:	687a      	ldr	r2, [r7, #4]
 8007878:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800787a:	0612      	lsls	r2, r2, #24
 800787c:	4311      	orrs	r1, r2
 800787e:	687a      	ldr	r2, [r7, #4]
 8007880:	6812      	ldr	r2, [r2, #0]
 8007882:	430b      	orrs	r3, r1
 8007884:	6013      	str	r3, [r2, #0]
 8007886:	e035      	b.n	80078f4 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f023 0110 	bic.w	r1, r3, #16
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	430a      	orrs	r2, r1
 800789c:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	681a      	ldr	r2, [r3, #0]
 80078a4:	4b27      	ldr	r3, [pc, #156]	@ (8007944 <HAL_OPAMP_Init+0x19c>)
 80078a6:	4013      	ands	r3, r2
 80078a8:	687a      	ldr	r2, [r7, #4]
 80078aa:	6851      	ldr	r1, [r2, #4]
 80078ac:	687a      	ldr	r2, [r7, #4]
 80078ae:	6892      	ldr	r2, [r2, #8]
 80078b0:	4311      	orrs	r1, r2
 80078b2:	687a      	ldr	r2, [r7, #4]
 80078b4:	68d2      	ldr	r2, [r2, #12]
 80078b6:	4311      	orrs	r1, r2
 80078b8:	687a      	ldr	r2, [r7, #4]
 80078ba:	6912      	ldr	r2, [r2, #16]
 80078bc:	430a      	orrs	r2, r1
 80078be:	6879      	ldr	r1, [r7, #4]
 80078c0:	7d09      	ldrb	r1, [r1, #20]
 80078c2:	2901      	cmp	r1, #1
 80078c4:	d102      	bne.n	80078cc <HAL_OPAMP_Init+0x124>
 80078c6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80078ca:	e000      	b.n	80078ce <HAL_OPAMP_Init+0x126>
 80078cc:	2100      	movs	r1, #0
 80078ce:	4311      	orrs	r1, r2
 80078d0:	687a      	ldr	r2, [r7, #4]
 80078d2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80078d4:	4311      	orrs	r1, r2
 80078d6:	687a      	ldr	r2, [r7, #4]
 80078d8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80078da:	4311      	orrs	r1, r2
 80078dc:	687a      	ldr	r2, [r7, #4]
 80078de:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80078e0:	04d2      	lsls	r2, r2, #19
 80078e2:	4311      	orrs	r1, r2
 80078e4:	687a      	ldr	r2, [r7, #4]
 80078e6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80078e8:	0612      	lsls	r2, r2, #24
 80078ea:	4311      	orrs	r1, r2
 80078ec:	687a      	ldr	r2, [r7, #4]
 80078ee:	6812      	ldr	r2, [r2, #0]
 80078f0:	430b      	orrs	r3, r1
 80078f2:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	699b      	ldr	r3, [r3, #24]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	db10      	blt.n	8007920 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	699b      	ldr	r3, [r3, #24]
 8007904:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	699a      	ldr	r2, [r3, #24]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	69db      	ldr	r3, [r3, #28]
 8007910:	431a      	orrs	r2, r3
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6a1b      	ldr	r3, [r3, #32]
 8007916:	431a      	orrs	r2, r3
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	430a      	orrs	r2, r1
 800791e:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8007926:	b2db      	uxtb	r3, r3
 8007928:	2b00      	cmp	r3, #0
 800792a:	d103      	bne.n	8007934 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2201      	movs	r2, #1
 8007930:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8007934:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8007936:	4618      	mov	r0, r3
 8007938:	3710      	adds	r7, #16
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}
 800793e:	bf00      	nop
 8007940:	40021000 	.word	0x40021000
 8007944:	e0003e11 	.word	0xe0003e11

08007948 <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 8007948:	b480      	push	{r7}
 800794a:	b085      	sub	sp, #20
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007950:	2300      	movs	r3, #0
 8007952:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d102      	bne.n	8007960 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 800795a:	2301      	movs	r3, #1
 800795c:	73fb      	strb	r3, [r7, #15]
 800795e:	e01d      	b.n	800799c <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8007966:	b2db      	uxtb	r3, r3
 8007968:	2b05      	cmp	r3, #5
 800796a:	d102      	bne.n	8007972 <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 800796c:	2301      	movs	r3, #1
 800796e:	73fb      	strb	r3, [r7, #15]
 8007970:	e014      	b.n	800799c <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8007978:	b2db      	uxtb	r3, r3
 800797a:	2b01      	cmp	r3, #1
 800797c:	d10c      	bne.n	8007998 <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	681a      	ldr	r2, [r3, #0]
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f042 0201 	orr.w	r2, r2, #1
 800798c:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2204      	movs	r2, #4
 8007992:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8007996:	e001      	b.n	800799c <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 8007998:	2301      	movs	r3, #1
 800799a:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 800799c:	7bfb      	ldrb	r3, [r7, #15]
}
 800799e:	4618      	mov	r0, r3
 80079a0:	3714      	adds	r7, #20
 80079a2:	46bd      	mov	sp, r7
 80079a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a8:	4770      	bx	lr
	...

080079ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80079ac:	b480      	push	{r7}
 80079ae:	b085      	sub	sp, #20
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d141      	bne.n	8007a3e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80079ba:	4b4b      	ldr	r3, [pc, #300]	@ (8007ae8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80079c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80079c6:	d131      	bne.n	8007a2c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80079c8:	4b47      	ldr	r3, [pc, #284]	@ (8007ae8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80079ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80079ce:	4a46      	ldr	r2, [pc, #280]	@ (8007ae8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80079d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80079d4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80079d8:	4b43      	ldr	r3, [pc, #268]	@ (8007ae8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80079e0:	4a41      	ldr	r2, [pc, #260]	@ (8007ae8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80079e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80079e6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80079e8:	4b40      	ldr	r3, [pc, #256]	@ (8007aec <HAL_PWREx_ControlVoltageScaling+0x140>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	2232      	movs	r2, #50	@ 0x32
 80079ee:	fb02 f303 	mul.w	r3, r2, r3
 80079f2:	4a3f      	ldr	r2, [pc, #252]	@ (8007af0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80079f4:	fba2 2303 	umull	r2, r3, r2, r3
 80079f8:	0c9b      	lsrs	r3, r3, #18
 80079fa:	3301      	adds	r3, #1
 80079fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80079fe:	e002      	b.n	8007a06 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	3b01      	subs	r3, #1
 8007a04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007a06:	4b38      	ldr	r3, [pc, #224]	@ (8007ae8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007a08:	695b      	ldr	r3, [r3, #20]
 8007a0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a12:	d102      	bne.n	8007a1a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d1f2      	bne.n	8007a00 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007a1a:	4b33      	ldr	r3, [pc, #204]	@ (8007ae8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007a1c:	695b      	ldr	r3, [r3, #20]
 8007a1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a26:	d158      	bne.n	8007ada <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007a28:	2303      	movs	r3, #3
 8007a2a:	e057      	b.n	8007adc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007a2c:	4b2e      	ldr	r3, [pc, #184]	@ (8007ae8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007a2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a32:	4a2d      	ldr	r2, [pc, #180]	@ (8007ae8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007a34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007a38:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007a3c:	e04d      	b.n	8007ada <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a44:	d141      	bne.n	8007aca <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007a46:	4b28      	ldr	r3, [pc, #160]	@ (8007ae8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007a4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a52:	d131      	bne.n	8007ab8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007a54:	4b24      	ldr	r3, [pc, #144]	@ (8007ae8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007a56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a5a:	4a23      	ldr	r2, [pc, #140]	@ (8007ae8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007a5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007a60:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007a64:	4b20      	ldr	r3, [pc, #128]	@ (8007ae8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007a6c:	4a1e      	ldr	r2, [pc, #120]	@ (8007ae8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007a6e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007a72:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007a74:	4b1d      	ldr	r3, [pc, #116]	@ (8007aec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	2232      	movs	r2, #50	@ 0x32
 8007a7a:	fb02 f303 	mul.w	r3, r2, r3
 8007a7e:	4a1c      	ldr	r2, [pc, #112]	@ (8007af0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007a80:	fba2 2303 	umull	r2, r3, r2, r3
 8007a84:	0c9b      	lsrs	r3, r3, #18
 8007a86:	3301      	adds	r3, #1
 8007a88:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007a8a:	e002      	b.n	8007a92 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	3b01      	subs	r3, #1
 8007a90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007a92:	4b15      	ldr	r3, [pc, #84]	@ (8007ae8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007a94:	695b      	ldr	r3, [r3, #20]
 8007a96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a9e:	d102      	bne.n	8007aa6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d1f2      	bne.n	8007a8c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007aa6:	4b10      	ldr	r3, [pc, #64]	@ (8007ae8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007aa8:	695b      	ldr	r3, [r3, #20]
 8007aaa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007aae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ab2:	d112      	bne.n	8007ada <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007ab4:	2303      	movs	r3, #3
 8007ab6:	e011      	b.n	8007adc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007ab8:	4b0b      	ldr	r3, [pc, #44]	@ (8007ae8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007aba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007abe:	4a0a      	ldr	r2, [pc, #40]	@ (8007ae8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ac0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007ac4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007ac8:	e007      	b.n	8007ada <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007aca:	4b07      	ldr	r3, [pc, #28]	@ (8007ae8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007ad2:	4a05      	ldr	r2, [pc, #20]	@ (8007ae8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ad4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007ad8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8007ada:	2300      	movs	r3, #0
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	3714      	adds	r7, #20
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae6:	4770      	bx	lr
 8007ae8:	40007000 	.word	0x40007000
 8007aec:	20000000 	.word	0x20000000
 8007af0:	431bde83 	.word	0x431bde83

08007af4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8007af4:	b480      	push	{r7}
 8007af6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8007af8:	4b05      	ldr	r3, [pc, #20]	@ (8007b10 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007afa:	689b      	ldr	r3, [r3, #8]
 8007afc:	4a04      	ldr	r2, [pc, #16]	@ (8007b10 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007afe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007b02:	6093      	str	r3, [r2, #8]
}
 8007b04:	bf00      	nop
 8007b06:	46bd      	mov	sp, r7
 8007b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0c:	4770      	bx	lr
 8007b0e:	bf00      	nop
 8007b10:	40007000 	.word	0x40007000

08007b14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b088      	sub	sp, #32
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d101      	bne.n	8007b26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007b22:	2301      	movs	r3, #1
 8007b24:	e2fe      	b.n	8008124 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f003 0301 	and.w	r3, r3, #1
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d075      	beq.n	8007c1e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007b32:	4b97      	ldr	r3, [pc, #604]	@ (8007d90 <HAL_RCC_OscConfig+0x27c>)
 8007b34:	689b      	ldr	r3, [r3, #8]
 8007b36:	f003 030c 	and.w	r3, r3, #12
 8007b3a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007b3c:	4b94      	ldr	r3, [pc, #592]	@ (8007d90 <HAL_RCC_OscConfig+0x27c>)
 8007b3e:	68db      	ldr	r3, [r3, #12]
 8007b40:	f003 0303 	and.w	r3, r3, #3
 8007b44:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8007b46:	69bb      	ldr	r3, [r7, #24]
 8007b48:	2b0c      	cmp	r3, #12
 8007b4a:	d102      	bne.n	8007b52 <HAL_RCC_OscConfig+0x3e>
 8007b4c:	697b      	ldr	r3, [r7, #20]
 8007b4e:	2b03      	cmp	r3, #3
 8007b50:	d002      	beq.n	8007b58 <HAL_RCC_OscConfig+0x44>
 8007b52:	69bb      	ldr	r3, [r7, #24]
 8007b54:	2b08      	cmp	r3, #8
 8007b56:	d10b      	bne.n	8007b70 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b58:	4b8d      	ldr	r3, [pc, #564]	@ (8007d90 <HAL_RCC_OscConfig+0x27c>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d05b      	beq.n	8007c1c <HAL_RCC_OscConfig+0x108>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d157      	bne.n	8007c1c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	e2d9      	b.n	8008124 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	685b      	ldr	r3, [r3, #4]
 8007b74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b78:	d106      	bne.n	8007b88 <HAL_RCC_OscConfig+0x74>
 8007b7a:	4b85      	ldr	r3, [pc, #532]	@ (8007d90 <HAL_RCC_OscConfig+0x27c>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	4a84      	ldr	r2, [pc, #528]	@ (8007d90 <HAL_RCC_OscConfig+0x27c>)
 8007b80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007b84:	6013      	str	r3, [r2, #0]
 8007b86:	e01d      	b.n	8007bc4 <HAL_RCC_OscConfig+0xb0>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007b90:	d10c      	bne.n	8007bac <HAL_RCC_OscConfig+0x98>
 8007b92:	4b7f      	ldr	r3, [pc, #508]	@ (8007d90 <HAL_RCC_OscConfig+0x27c>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	4a7e      	ldr	r2, [pc, #504]	@ (8007d90 <HAL_RCC_OscConfig+0x27c>)
 8007b98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007b9c:	6013      	str	r3, [r2, #0]
 8007b9e:	4b7c      	ldr	r3, [pc, #496]	@ (8007d90 <HAL_RCC_OscConfig+0x27c>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4a7b      	ldr	r2, [pc, #492]	@ (8007d90 <HAL_RCC_OscConfig+0x27c>)
 8007ba4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007ba8:	6013      	str	r3, [r2, #0]
 8007baa:	e00b      	b.n	8007bc4 <HAL_RCC_OscConfig+0xb0>
 8007bac:	4b78      	ldr	r3, [pc, #480]	@ (8007d90 <HAL_RCC_OscConfig+0x27c>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4a77      	ldr	r2, [pc, #476]	@ (8007d90 <HAL_RCC_OscConfig+0x27c>)
 8007bb2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007bb6:	6013      	str	r3, [r2, #0]
 8007bb8:	4b75      	ldr	r3, [pc, #468]	@ (8007d90 <HAL_RCC_OscConfig+0x27c>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4a74      	ldr	r2, [pc, #464]	@ (8007d90 <HAL_RCC_OscConfig+0x27c>)
 8007bbe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007bc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	685b      	ldr	r3, [r3, #4]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d013      	beq.n	8007bf4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bcc:	f7fa fe68 	bl	80028a0 <HAL_GetTick>
 8007bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007bd2:	e008      	b.n	8007be6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007bd4:	f7fa fe64 	bl	80028a0 <HAL_GetTick>
 8007bd8:	4602      	mov	r2, r0
 8007bda:	693b      	ldr	r3, [r7, #16]
 8007bdc:	1ad3      	subs	r3, r2, r3
 8007bde:	2b64      	cmp	r3, #100	@ 0x64
 8007be0:	d901      	bls.n	8007be6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007be2:	2303      	movs	r3, #3
 8007be4:	e29e      	b.n	8008124 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007be6:	4b6a      	ldr	r3, [pc, #424]	@ (8007d90 <HAL_RCC_OscConfig+0x27c>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d0f0      	beq.n	8007bd4 <HAL_RCC_OscConfig+0xc0>
 8007bf2:	e014      	b.n	8007c1e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bf4:	f7fa fe54 	bl	80028a0 <HAL_GetTick>
 8007bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007bfa:	e008      	b.n	8007c0e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007bfc:	f7fa fe50 	bl	80028a0 <HAL_GetTick>
 8007c00:	4602      	mov	r2, r0
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	1ad3      	subs	r3, r2, r3
 8007c06:	2b64      	cmp	r3, #100	@ 0x64
 8007c08:	d901      	bls.n	8007c0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007c0a:	2303      	movs	r3, #3
 8007c0c:	e28a      	b.n	8008124 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007c0e:	4b60      	ldr	r3, [pc, #384]	@ (8007d90 <HAL_RCC_OscConfig+0x27c>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d1f0      	bne.n	8007bfc <HAL_RCC_OscConfig+0xe8>
 8007c1a:	e000      	b.n	8007c1e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f003 0302 	and.w	r3, r3, #2
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d075      	beq.n	8007d16 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007c2a:	4b59      	ldr	r3, [pc, #356]	@ (8007d90 <HAL_RCC_OscConfig+0x27c>)
 8007c2c:	689b      	ldr	r3, [r3, #8]
 8007c2e:	f003 030c 	and.w	r3, r3, #12
 8007c32:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007c34:	4b56      	ldr	r3, [pc, #344]	@ (8007d90 <HAL_RCC_OscConfig+0x27c>)
 8007c36:	68db      	ldr	r3, [r3, #12]
 8007c38:	f003 0303 	and.w	r3, r3, #3
 8007c3c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007c3e:	69bb      	ldr	r3, [r7, #24]
 8007c40:	2b0c      	cmp	r3, #12
 8007c42:	d102      	bne.n	8007c4a <HAL_RCC_OscConfig+0x136>
 8007c44:	697b      	ldr	r3, [r7, #20]
 8007c46:	2b02      	cmp	r3, #2
 8007c48:	d002      	beq.n	8007c50 <HAL_RCC_OscConfig+0x13c>
 8007c4a:	69bb      	ldr	r3, [r7, #24]
 8007c4c:	2b04      	cmp	r3, #4
 8007c4e:	d11f      	bne.n	8007c90 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007c50:	4b4f      	ldr	r3, [pc, #316]	@ (8007d90 <HAL_RCC_OscConfig+0x27c>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d005      	beq.n	8007c68 <HAL_RCC_OscConfig+0x154>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	68db      	ldr	r3, [r3, #12]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d101      	bne.n	8007c68 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8007c64:	2301      	movs	r3, #1
 8007c66:	e25d      	b.n	8008124 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c68:	4b49      	ldr	r3, [pc, #292]	@ (8007d90 <HAL_RCC_OscConfig+0x27c>)
 8007c6a:	685b      	ldr	r3, [r3, #4]
 8007c6c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	691b      	ldr	r3, [r3, #16]
 8007c74:	061b      	lsls	r3, r3, #24
 8007c76:	4946      	ldr	r1, [pc, #280]	@ (8007d90 <HAL_RCC_OscConfig+0x27c>)
 8007c78:	4313      	orrs	r3, r2
 8007c7a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007c7c:	4b45      	ldr	r3, [pc, #276]	@ (8007d94 <HAL_RCC_OscConfig+0x280>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4618      	mov	r0, r3
 8007c82:	f7fa fdc1 	bl	8002808 <HAL_InitTick>
 8007c86:	4603      	mov	r3, r0
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d043      	beq.n	8007d14 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	e249      	b.n	8008124 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	68db      	ldr	r3, [r3, #12]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d023      	beq.n	8007ce0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007c98:	4b3d      	ldr	r3, [pc, #244]	@ (8007d90 <HAL_RCC_OscConfig+0x27c>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	4a3c      	ldr	r2, [pc, #240]	@ (8007d90 <HAL_RCC_OscConfig+0x27c>)
 8007c9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007ca2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ca4:	f7fa fdfc 	bl	80028a0 <HAL_GetTick>
 8007ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007caa:	e008      	b.n	8007cbe <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007cac:	f7fa fdf8 	bl	80028a0 <HAL_GetTick>
 8007cb0:	4602      	mov	r2, r0
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	1ad3      	subs	r3, r2, r3
 8007cb6:	2b02      	cmp	r3, #2
 8007cb8:	d901      	bls.n	8007cbe <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007cba:	2303      	movs	r3, #3
 8007cbc:	e232      	b.n	8008124 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007cbe:	4b34      	ldr	r3, [pc, #208]	@ (8007d90 <HAL_RCC_OscConfig+0x27c>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d0f0      	beq.n	8007cac <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007cca:	4b31      	ldr	r3, [pc, #196]	@ (8007d90 <HAL_RCC_OscConfig+0x27c>)
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	691b      	ldr	r3, [r3, #16]
 8007cd6:	061b      	lsls	r3, r3, #24
 8007cd8:	492d      	ldr	r1, [pc, #180]	@ (8007d90 <HAL_RCC_OscConfig+0x27c>)
 8007cda:	4313      	orrs	r3, r2
 8007cdc:	604b      	str	r3, [r1, #4]
 8007cde:	e01a      	b.n	8007d16 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007ce0:	4b2b      	ldr	r3, [pc, #172]	@ (8007d90 <HAL_RCC_OscConfig+0x27c>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4a2a      	ldr	r2, [pc, #168]	@ (8007d90 <HAL_RCC_OscConfig+0x27c>)
 8007ce6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007cea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cec:	f7fa fdd8 	bl	80028a0 <HAL_GetTick>
 8007cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007cf2:	e008      	b.n	8007d06 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007cf4:	f7fa fdd4 	bl	80028a0 <HAL_GetTick>
 8007cf8:	4602      	mov	r2, r0
 8007cfa:	693b      	ldr	r3, [r7, #16]
 8007cfc:	1ad3      	subs	r3, r2, r3
 8007cfe:	2b02      	cmp	r3, #2
 8007d00:	d901      	bls.n	8007d06 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8007d02:	2303      	movs	r3, #3
 8007d04:	e20e      	b.n	8008124 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007d06:	4b22      	ldr	r3, [pc, #136]	@ (8007d90 <HAL_RCC_OscConfig+0x27c>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d1f0      	bne.n	8007cf4 <HAL_RCC_OscConfig+0x1e0>
 8007d12:	e000      	b.n	8007d16 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007d14:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f003 0308 	and.w	r3, r3, #8
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d041      	beq.n	8007da6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	695b      	ldr	r3, [r3, #20]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d01c      	beq.n	8007d64 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007d2a:	4b19      	ldr	r3, [pc, #100]	@ (8007d90 <HAL_RCC_OscConfig+0x27c>)
 8007d2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007d30:	4a17      	ldr	r2, [pc, #92]	@ (8007d90 <HAL_RCC_OscConfig+0x27c>)
 8007d32:	f043 0301 	orr.w	r3, r3, #1
 8007d36:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d3a:	f7fa fdb1 	bl	80028a0 <HAL_GetTick>
 8007d3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007d40:	e008      	b.n	8007d54 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007d42:	f7fa fdad 	bl	80028a0 <HAL_GetTick>
 8007d46:	4602      	mov	r2, r0
 8007d48:	693b      	ldr	r3, [r7, #16]
 8007d4a:	1ad3      	subs	r3, r2, r3
 8007d4c:	2b02      	cmp	r3, #2
 8007d4e:	d901      	bls.n	8007d54 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007d50:	2303      	movs	r3, #3
 8007d52:	e1e7      	b.n	8008124 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007d54:	4b0e      	ldr	r3, [pc, #56]	@ (8007d90 <HAL_RCC_OscConfig+0x27c>)
 8007d56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007d5a:	f003 0302 	and.w	r3, r3, #2
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d0ef      	beq.n	8007d42 <HAL_RCC_OscConfig+0x22e>
 8007d62:	e020      	b.n	8007da6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007d64:	4b0a      	ldr	r3, [pc, #40]	@ (8007d90 <HAL_RCC_OscConfig+0x27c>)
 8007d66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007d6a:	4a09      	ldr	r2, [pc, #36]	@ (8007d90 <HAL_RCC_OscConfig+0x27c>)
 8007d6c:	f023 0301 	bic.w	r3, r3, #1
 8007d70:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d74:	f7fa fd94 	bl	80028a0 <HAL_GetTick>
 8007d78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007d7a:	e00d      	b.n	8007d98 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007d7c:	f7fa fd90 	bl	80028a0 <HAL_GetTick>
 8007d80:	4602      	mov	r2, r0
 8007d82:	693b      	ldr	r3, [r7, #16]
 8007d84:	1ad3      	subs	r3, r2, r3
 8007d86:	2b02      	cmp	r3, #2
 8007d88:	d906      	bls.n	8007d98 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007d8a:	2303      	movs	r3, #3
 8007d8c:	e1ca      	b.n	8008124 <HAL_RCC_OscConfig+0x610>
 8007d8e:	bf00      	nop
 8007d90:	40021000 	.word	0x40021000
 8007d94:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007d98:	4b8c      	ldr	r3, [pc, #560]	@ (8007fcc <HAL_RCC_OscConfig+0x4b8>)
 8007d9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007d9e:	f003 0302 	and.w	r3, r3, #2
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d1ea      	bne.n	8007d7c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f003 0304 	and.w	r3, r3, #4
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	f000 80a6 	beq.w	8007f00 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007db4:	2300      	movs	r3, #0
 8007db6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007db8:	4b84      	ldr	r3, [pc, #528]	@ (8007fcc <HAL_RCC_OscConfig+0x4b8>)
 8007dba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007dbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d101      	bne.n	8007dc8 <HAL_RCC_OscConfig+0x2b4>
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	e000      	b.n	8007dca <HAL_RCC_OscConfig+0x2b6>
 8007dc8:	2300      	movs	r3, #0
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d00d      	beq.n	8007dea <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007dce:	4b7f      	ldr	r3, [pc, #508]	@ (8007fcc <HAL_RCC_OscConfig+0x4b8>)
 8007dd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007dd2:	4a7e      	ldr	r2, [pc, #504]	@ (8007fcc <HAL_RCC_OscConfig+0x4b8>)
 8007dd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007dd8:	6593      	str	r3, [r2, #88]	@ 0x58
 8007dda:	4b7c      	ldr	r3, [pc, #496]	@ (8007fcc <HAL_RCC_OscConfig+0x4b8>)
 8007ddc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007dde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007de2:	60fb      	str	r3, [r7, #12]
 8007de4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007de6:	2301      	movs	r3, #1
 8007de8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007dea:	4b79      	ldr	r3, [pc, #484]	@ (8007fd0 <HAL_RCC_OscConfig+0x4bc>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d118      	bne.n	8007e28 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007df6:	4b76      	ldr	r3, [pc, #472]	@ (8007fd0 <HAL_RCC_OscConfig+0x4bc>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4a75      	ldr	r2, [pc, #468]	@ (8007fd0 <HAL_RCC_OscConfig+0x4bc>)
 8007dfc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007e00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007e02:	f7fa fd4d 	bl	80028a0 <HAL_GetTick>
 8007e06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007e08:	e008      	b.n	8007e1c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e0a:	f7fa fd49 	bl	80028a0 <HAL_GetTick>
 8007e0e:	4602      	mov	r2, r0
 8007e10:	693b      	ldr	r3, [r7, #16]
 8007e12:	1ad3      	subs	r3, r2, r3
 8007e14:	2b02      	cmp	r3, #2
 8007e16:	d901      	bls.n	8007e1c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8007e18:	2303      	movs	r3, #3
 8007e1a:	e183      	b.n	8008124 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007e1c:	4b6c      	ldr	r3, [pc, #432]	@ (8007fd0 <HAL_RCC_OscConfig+0x4bc>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d0f0      	beq.n	8007e0a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	689b      	ldr	r3, [r3, #8]
 8007e2c:	2b01      	cmp	r3, #1
 8007e2e:	d108      	bne.n	8007e42 <HAL_RCC_OscConfig+0x32e>
 8007e30:	4b66      	ldr	r3, [pc, #408]	@ (8007fcc <HAL_RCC_OscConfig+0x4b8>)
 8007e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e36:	4a65      	ldr	r2, [pc, #404]	@ (8007fcc <HAL_RCC_OscConfig+0x4b8>)
 8007e38:	f043 0301 	orr.w	r3, r3, #1
 8007e3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007e40:	e024      	b.n	8007e8c <HAL_RCC_OscConfig+0x378>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	689b      	ldr	r3, [r3, #8]
 8007e46:	2b05      	cmp	r3, #5
 8007e48:	d110      	bne.n	8007e6c <HAL_RCC_OscConfig+0x358>
 8007e4a:	4b60      	ldr	r3, [pc, #384]	@ (8007fcc <HAL_RCC_OscConfig+0x4b8>)
 8007e4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e50:	4a5e      	ldr	r2, [pc, #376]	@ (8007fcc <HAL_RCC_OscConfig+0x4b8>)
 8007e52:	f043 0304 	orr.w	r3, r3, #4
 8007e56:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007e5a:	4b5c      	ldr	r3, [pc, #368]	@ (8007fcc <HAL_RCC_OscConfig+0x4b8>)
 8007e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e60:	4a5a      	ldr	r2, [pc, #360]	@ (8007fcc <HAL_RCC_OscConfig+0x4b8>)
 8007e62:	f043 0301 	orr.w	r3, r3, #1
 8007e66:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007e6a:	e00f      	b.n	8007e8c <HAL_RCC_OscConfig+0x378>
 8007e6c:	4b57      	ldr	r3, [pc, #348]	@ (8007fcc <HAL_RCC_OscConfig+0x4b8>)
 8007e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e72:	4a56      	ldr	r2, [pc, #344]	@ (8007fcc <HAL_RCC_OscConfig+0x4b8>)
 8007e74:	f023 0301 	bic.w	r3, r3, #1
 8007e78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007e7c:	4b53      	ldr	r3, [pc, #332]	@ (8007fcc <HAL_RCC_OscConfig+0x4b8>)
 8007e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e82:	4a52      	ldr	r2, [pc, #328]	@ (8007fcc <HAL_RCC_OscConfig+0x4b8>)
 8007e84:	f023 0304 	bic.w	r3, r3, #4
 8007e88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	689b      	ldr	r3, [r3, #8]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d016      	beq.n	8007ec2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e94:	f7fa fd04 	bl	80028a0 <HAL_GetTick>
 8007e98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007e9a:	e00a      	b.n	8007eb2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e9c:	f7fa fd00 	bl	80028a0 <HAL_GetTick>
 8007ea0:	4602      	mov	r2, r0
 8007ea2:	693b      	ldr	r3, [r7, #16]
 8007ea4:	1ad3      	subs	r3, r2, r3
 8007ea6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d901      	bls.n	8007eb2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007eae:	2303      	movs	r3, #3
 8007eb0:	e138      	b.n	8008124 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007eb2:	4b46      	ldr	r3, [pc, #280]	@ (8007fcc <HAL_RCC_OscConfig+0x4b8>)
 8007eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007eb8:	f003 0302 	and.w	r3, r3, #2
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d0ed      	beq.n	8007e9c <HAL_RCC_OscConfig+0x388>
 8007ec0:	e015      	b.n	8007eee <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ec2:	f7fa fced 	bl	80028a0 <HAL_GetTick>
 8007ec6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007ec8:	e00a      	b.n	8007ee0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007eca:	f7fa fce9 	bl	80028a0 <HAL_GetTick>
 8007ece:	4602      	mov	r2, r0
 8007ed0:	693b      	ldr	r3, [r7, #16]
 8007ed2:	1ad3      	subs	r3, r2, r3
 8007ed4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d901      	bls.n	8007ee0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007edc:	2303      	movs	r3, #3
 8007ede:	e121      	b.n	8008124 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007ee0:	4b3a      	ldr	r3, [pc, #232]	@ (8007fcc <HAL_RCC_OscConfig+0x4b8>)
 8007ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ee6:	f003 0302 	and.w	r3, r3, #2
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d1ed      	bne.n	8007eca <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007eee:	7ffb      	ldrb	r3, [r7, #31]
 8007ef0:	2b01      	cmp	r3, #1
 8007ef2:	d105      	bne.n	8007f00 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007ef4:	4b35      	ldr	r3, [pc, #212]	@ (8007fcc <HAL_RCC_OscConfig+0x4b8>)
 8007ef6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ef8:	4a34      	ldr	r2, [pc, #208]	@ (8007fcc <HAL_RCC_OscConfig+0x4b8>)
 8007efa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007efe:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f003 0320 	and.w	r3, r3, #32
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d03c      	beq.n	8007f86 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	699b      	ldr	r3, [r3, #24]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d01c      	beq.n	8007f4e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007f14:	4b2d      	ldr	r3, [pc, #180]	@ (8007fcc <HAL_RCC_OscConfig+0x4b8>)
 8007f16:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007f1a:	4a2c      	ldr	r2, [pc, #176]	@ (8007fcc <HAL_RCC_OscConfig+0x4b8>)
 8007f1c:	f043 0301 	orr.w	r3, r3, #1
 8007f20:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f24:	f7fa fcbc 	bl	80028a0 <HAL_GetTick>
 8007f28:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007f2a:	e008      	b.n	8007f3e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007f2c:	f7fa fcb8 	bl	80028a0 <HAL_GetTick>
 8007f30:	4602      	mov	r2, r0
 8007f32:	693b      	ldr	r3, [r7, #16]
 8007f34:	1ad3      	subs	r3, r2, r3
 8007f36:	2b02      	cmp	r3, #2
 8007f38:	d901      	bls.n	8007f3e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8007f3a:	2303      	movs	r3, #3
 8007f3c:	e0f2      	b.n	8008124 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007f3e:	4b23      	ldr	r3, [pc, #140]	@ (8007fcc <HAL_RCC_OscConfig+0x4b8>)
 8007f40:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007f44:	f003 0302 	and.w	r3, r3, #2
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d0ef      	beq.n	8007f2c <HAL_RCC_OscConfig+0x418>
 8007f4c:	e01b      	b.n	8007f86 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007f4e:	4b1f      	ldr	r3, [pc, #124]	@ (8007fcc <HAL_RCC_OscConfig+0x4b8>)
 8007f50:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007f54:	4a1d      	ldr	r2, [pc, #116]	@ (8007fcc <HAL_RCC_OscConfig+0x4b8>)
 8007f56:	f023 0301 	bic.w	r3, r3, #1
 8007f5a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f5e:	f7fa fc9f 	bl	80028a0 <HAL_GetTick>
 8007f62:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007f64:	e008      	b.n	8007f78 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007f66:	f7fa fc9b 	bl	80028a0 <HAL_GetTick>
 8007f6a:	4602      	mov	r2, r0
 8007f6c:	693b      	ldr	r3, [r7, #16]
 8007f6e:	1ad3      	subs	r3, r2, r3
 8007f70:	2b02      	cmp	r3, #2
 8007f72:	d901      	bls.n	8007f78 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8007f74:	2303      	movs	r3, #3
 8007f76:	e0d5      	b.n	8008124 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007f78:	4b14      	ldr	r3, [pc, #80]	@ (8007fcc <HAL_RCC_OscConfig+0x4b8>)
 8007f7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007f7e:	f003 0302 	and.w	r3, r3, #2
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d1ef      	bne.n	8007f66 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	69db      	ldr	r3, [r3, #28]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	f000 80c9 	beq.w	8008122 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007f90:	4b0e      	ldr	r3, [pc, #56]	@ (8007fcc <HAL_RCC_OscConfig+0x4b8>)
 8007f92:	689b      	ldr	r3, [r3, #8]
 8007f94:	f003 030c 	and.w	r3, r3, #12
 8007f98:	2b0c      	cmp	r3, #12
 8007f9a:	f000 8083 	beq.w	80080a4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	69db      	ldr	r3, [r3, #28]
 8007fa2:	2b02      	cmp	r3, #2
 8007fa4:	d15e      	bne.n	8008064 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007fa6:	4b09      	ldr	r3, [pc, #36]	@ (8007fcc <HAL_RCC_OscConfig+0x4b8>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4a08      	ldr	r2, [pc, #32]	@ (8007fcc <HAL_RCC_OscConfig+0x4b8>)
 8007fac:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007fb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fb2:	f7fa fc75 	bl	80028a0 <HAL_GetTick>
 8007fb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007fb8:	e00c      	b.n	8007fd4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007fba:	f7fa fc71 	bl	80028a0 <HAL_GetTick>
 8007fbe:	4602      	mov	r2, r0
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	1ad3      	subs	r3, r2, r3
 8007fc4:	2b02      	cmp	r3, #2
 8007fc6:	d905      	bls.n	8007fd4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8007fc8:	2303      	movs	r3, #3
 8007fca:	e0ab      	b.n	8008124 <HAL_RCC_OscConfig+0x610>
 8007fcc:	40021000 	.word	0x40021000
 8007fd0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007fd4:	4b55      	ldr	r3, [pc, #340]	@ (800812c <HAL_RCC_OscConfig+0x618>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d1ec      	bne.n	8007fba <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007fe0:	4b52      	ldr	r3, [pc, #328]	@ (800812c <HAL_RCC_OscConfig+0x618>)
 8007fe2:	68da      	ldr	r2, [r3, #12]
 8007fe4:	4b52      	ldr	r3, [pc, #328]	@ (8008130 <HAL_RCC_OscConfig+0x61c>)
 8007fe6:	4013      	ands	r3, r2
 8007fe8:	687a      	ldr	r2, [r7, #4]
 8007fea:	6a11      	ldr	r1, [r2, #32]
 8007fec:	687a      	ldr	r2, [r7, #4]
 8007fee:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007ff0:	3a01      	subs	r2, #1
 8007ff2:	0112      	lsls	r2, r2, #4
 8007ff4:	4311      	orrs	r1, r2
 8007ff6:	687a      	ldr	r2, [r7, #4]
 8007ff8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8007ffa:	0212      	lsls	r2, r2, #8
 8007ffc:	4311      	orrs	r1, r2
 8007ffe:	687a      	ldr	r2, [r7, #4]
 8008000:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008002:	0852      	lsrs	r2, r2, #1
 8008004:	3a01      	subs	r2, #1
 8008006:	0552      	lsls	r2, r2, #21
 8008008:	4311      	orrs	r1, r2
 800800a:	687a      	ldr	r2, [r7, #4]
 800800c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800800e:	0852      	lsrs	r2, r2, #1
 8008010:	3a01      	subs	r2, #1
 8008012:	0652      	lsls	r2, r2, #25
 8008014:	4311      	orrs	r1, r2
 8008016:	687a      	ldr	r2, [r7, #4]
 8008018:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800801a:	06d2      	lsls	r2, r2, #27
 800801c:	430a      	orrs	r2, r1
 800801e:	4943      	ldr	r1, [pc, #268]	@ (800812c <HAL_RCC_OscConfig+0x618>)
 8008020:	4313      	orrs	r3, r2
 8008022:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008024:	4b41      	ldr	r3, [pc, #260]	@ (800812c <HAL_RCC_OscConfig+0x618>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4a40      	ldr	r2, [pc, #256]	@ (800812c <HAL_RCC_OscConfig+0x618>)
 800802a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800802e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008030:	4b3e      	ldr	r3, [pc, #248]	@ (800812c <HAL_RCC_OscConfig+0x618>)
 8008032:	68db      	ldr	r3, [r3, #12]
 8008034:	4a3d      	ldr	r2, [pc, #244]	@ (800812c <HAL_RCC_OscConfig+0x618>)
 8008036:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800803a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800803c:	f7fa fc30 	bl	80028a0 <HAL_GetTick>
 8008040:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008042:	e008      	b.n	8008056 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008044:	f7fa fc2c 	bl	80028a0 <HAL_GetTick>
 8008048:	4602      	mov	r2, r0
 800804a:	693b      	ldr	r3, [r7, #16]
 800804c:	1ad3      	subs	r3, r2, r3
 800804e:	2b02      	cmp	r3, #2
 8008050:	d901      	bls.n	8008056 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8008052:	2303      	movs	r3, #3
 8008054:	e066      	b.n	8008124 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008056:	4b35      	ldr	r3, [pc, #212]	@ (800812c <HAL_RCC_OscConfig+0x618>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800805e:	2b00      	cmp	r3, #0
 8008060:	d0f0      	beq.n	8008044 <HAL_RCC_OscConfig+0x530>
 8008062:	e05e      	b.n	8008122 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008064:	4b31      	ldr	r3, [pc, #196]	@ (800812c <HAL_RCC_OscConfig+0x618>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	4a30      	ldr	r2, [pc, #192]	@ (800812c <HAL_RCC_OscConfig+0x618>)
 800806a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800806e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008070:	f7fa fc16 	bl	80028a0 <HAL_GetTick>
 8008074:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008076:	e008      	b.n	800808a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008078:	f7fa fc12 	bl	80028a0 <HAL_GetTick>
 800807c:	4602      	mov	r2, r0
 800807e:	693b      	ldr	r3, [r7, #16]
 8008080:	1ad3      	subs	r3, r2, r3
 8008082:	2b02      	cmp	r3, #2
 8008084:	d901      	bls.n	800808a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8008086:	2303      	movs	r3, #3
 8008088:	e04c      	b.n	8008124 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800808a:	4b28      	ldr	r3, [pc, #160]	@ (800812c <HAL_RCC_OscConfig+0x618>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008092:	2b00      	cmp	r3, #0
 8008094:	d1f0      	bne.n	8008078 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8008096:	4b25      	ldr	r3, [pc, #148]	@ (800812c <HAL_RCC_OscConfig+0x618>)
 8008098:	68da      	ldr	r2, [r3, #12]
 800809a:	4924      	ldr	r1, [pc, #144]	@ (800812c <HAL_RCC_OscConfig+0x618>)
 800809c:	4b25      	ldr	r3, [pc, #148]	@ (8008134 <HAL_RCC_OscConfig+0x620>)
 800809e:	4013      	ands	r3, r2
 80080a0:	60cb      	str	r3, [r1, #12]
 80080a2:	e03e      	b.n	8008122 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	69db      	ldr	r3, [r3, #28]
 80080a8:	2b01      	cmp	r3, #1
 80080aa:	d101      	bne.n	80080b0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80080ac:	2301      	movs	r3, #1
 80080ae:	e039      	b.n	8008124 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80080b0:	4b1e      	ldr	r3, [pc, #120]	@ (800812c <HAL_RCC_OscConfig+0x618>)
 80080b2:	68db      	ldr	r3, [r3, #12]
 80080b4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	f003 0203 	and.w	r2, r3, #3
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6a1b      	ldr	r3, [r3, #32]
 80080c0:	429a      	cmp	r2, r3
 80080c2:	d12c      	bne.n	800811e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80080c4:	697b      	ldr	r3, [r7, #20]
 80080c6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080ce:	3b01      	subs	r3, #1
 80080d0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80080d2:	429a      	cmp	r2, r3
 80080d4:	d123      	bne.n	800811e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80080d6:	697b      	ldr	r3, [r7, #20]
 80080d8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080e0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80080e2:	429a      	cmp	r2, r3
 80080e4:	d11b      	bne.n	800811e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80080e6:	697b      	ldr	r3, [r7, #20]
 80080e8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080f0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80080f2:	429a      	cmp	r2, r3
 80080f4:	d113      	bne.n	800811e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80080f6:	697b      	ldr	r3, [r7, #20]
 80080f8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008100:	085b      	lsrs	r3, r3, #1
 8008102:	3b01      	subs	r3, #1
 8008104:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008106:	429a      	cmp	r2, r3
 8008108:	d109      	bne.n	800811e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800810a:	697b      	ldr	r3, [r7, #20]
 800810c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008114:	085b      	lsrs	r3, r3, #1
 8008116:	3b01      	subs	r3, #1
 8008118:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800811a:	429a      	cmp	r2, r3
 800811c:	d001      	beq.n	8008122 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800811e:	2301      	movs	r3, #1
 8008120:	e000      	b.n	8008124 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8008122:	2300      	movs	r3, #0
}
 8008124:	4618      	mov	r0, r3
 8008126:	3720      	adds	r7, #32
 8008128:	46bd      	mov	sp, r7
 800812a:	bd80      	pop	{r7, pc}
 800812c:	40021000 	.word	0x40021000
 8008130:	019f800c 	.word	0x019f800c
 8008134:	feeefffc 	.word	0xfeeefffc

08008138 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b086      	sub	sp, #24
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
 8008140:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8008142:	2300      	movs	r3, #0
 8008144:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d101      	bne.n	8008150 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800814c:	2301      	movs	r3, #1
 800814e:	e11e      	b.n	800838e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008150:	4b91      	ldr	r3, [pc, #580]	@ (8008398 <HAL_RCC_ClockConfig+0x260>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f003 030f 	and.w	r3, r3, #15
 8008158:	683a      	ldr	r2, [r7, #0]
 800815a:	429a      	cmp	r2, r3
 800815c:	d910      	bls.n	8008180 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800815e:	4b8e      	ldr	r3, [pc, #568]	@ (8008398 <HAL_RCC_ClockConfig+0x260>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f023 020f 	bic.w	r2, r3, #15
 8008166:	498c      	ldr	r1, [pc, #560]	@ (8008398 <HAL_RCC_ClockConfig+0x260>)
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	4313      	orrs	r3, r2
 800816c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800816e:	4b8a      	ldr	r3, [pc, #552]	@ (8008398 <HAL_RCC_ClockConfig+0x260>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f003 030f 	and.w	r3, r3, #15
 8008176:	683a      	ldr	r2, [r7, #0]
 8008178:	429a      	cmp	r2, r3
 800817a:	d001      	beq.n	8008180 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800817c:	2301      	movs	r3, #1
 800817e:	e106      	b.n	800838e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f003 0301 	and.w	r3, r3, #1
 8008188:	2b00      	cmp	r3, #0
 800818a:	d073      	beq.n	8008274 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	2b03      	cmp	r3, #3
 8008192:	d129      	bne.n	80081e8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008194:	4b81      	ldr	r3, [pc, #516]	@ (800839c <HAL_RCC_ClockConfig+0x264>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800819c:	2b00      	cmp	r3, #0
 800819e:	d101      	bne.n	80081a4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80081a0:	2301      	movs	r3, #1
 80081a2:	e0f4      	b.n	800838e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80081a4:	f000 f99e 	bl	80084e4 <RCC_GetSysClockFreqFromPLLSource>
 80081a8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	4a7c      	ldr	r2, [pc, #496]	@ (80083a0 <HAL_RCC_ClockConfig+0x268>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d93f      	bls.n	8008232 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80081b2:	4b7a      	ldr	r3, [pc, #488]	@ (800839c <HAL_RCC_ClockConfig+0x264>)
 80081b4:	689b      	ldr	r3, [r3, #8]
 80081b6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d009      	beq.n	80081d2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d033      	beq.n	8008232 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d12f      	bne.n	8008232 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80081d2:	4b72      	ldr	r3, [pc, #456]	@ (800839c <HAL_RCC_ClockConfig+0x264>)
 80081d4:	689b      	ldr	r3, [r3, #8]
 80081d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80081da:	4a70      	ldr	r2, [pc, #448]	@ (800839c <HAL_RCC_ClockConfig+0x264>)
 80081dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081e0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80081e2:	2380      	movs	r3, #128	@ 0x80
 80081e4:	617b      	str	r3, [r7, #20]
 80081e6:	e024      	b.n	8008232 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	685b      	ldr	r3, [r3, #4]
 80081ec:	2b02      	cmp	r3, #2
 80081ee:	d107      	bne.n	8008200 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80081f0:	4b6a      	ldr	r3, [pc, #424]	@ (800839c <HAL_RCC_ClockConfig+0x264>)
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d109      	bne.n	8008210 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80081fc:	2301      	movs	r3, #1
 80081fe:	e0c6      	b.n	800838e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008200:	4b66      	ldr	r3, [pc, #408]	@ (800839c <HAL_RCC_ClockConfig+0x264>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008208:	2b00      	cmp	r3, #0
 800820a:	d101      	bne.n	8008210 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800820c:	2301      	movs	r3, #1
 800820e:	e0be      	b.n	800838e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8008210:	f000 f8ce 	bl	80083b0 <HAL_RCC_GetSysClockFreq>
 8008214:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8008216:	693b      	ldr	r3, [r7, #16]
 8008218:	4a61      	ldr	r2, [pc, #388]	@ (80083a0 <HAL_RCC_ClockConfig+0x268>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d909      	bls.n	8008232 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800821e:	4b5f      	ldr	r3, [pc, #380]	@ (800839c <HAL_RCC_ClockConfig+0x264>)
 8008220:	689b      	ldr	r3, [r3, #8]
 8008222:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008226:	4a5d      	ldr	r2, [pc, #372]	@ (800839c <HAL_RCC_ClockConfig+0x264>)
 8008228:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800822c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800822e:	2380      	movs	r3, #128	@ 0x80
 8008230:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008232:	4b5a      	ldr	r3, [pc, #360]	@ (800839c <HAL_RCC_ClockConfig+0x264>)
 8008234:	689b      	ldr	r3, [r3, #8]
 8008236:	f023 0203 	bic.w	r2, r3, #3
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	685b      	ldr	r3, [r3, #4]
 800823e:	4957      	ldr	r1, [pc, #348]	@ (800839c <HAL_RCC_ClockConfig+0x264>)
 8008240:	4313      	orrs	r3, r2
 8008242:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008244:	f7fa fb2c 	bl	80028a0 <HAL_GetTick>
 8008248:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800824a:	e00a      	b.n	8008262 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800824c:	f7fa fb28 	bl	80028a0 <HAL_GetTick>
 8008250:	4602      	mov	r2, r0
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	1ad3      	subs	r3, r2, r3
 8008256:	f241 3288 	movw	r2, #5000	@ 0x1388
 800825a:	4293      	cmp	r3, r2
 800825c:	d901      	bls.n	8008262 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800825e:	2303      	movs	r3, #3
 8008260:	e095      	b.n	800838e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008262:	4b4e      	ldr	r3, [pc, #312]	@ (800839c <HAL_RCC_ClockConfig+0x264>)
 8008264:	689b      	ldr	r3, [r3, #8]
 8008266:	f003 020c 	and.w	r2, r3, #12
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	685b      	ldr	r3, [r3, #4]
 800826e:	009b      	lsls	r3, r3, #2
 8008270:	429a      	cmp	r2, r3
 8008272:	d1eb      	bne.n	800824c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f003 0302 	and.w	r3, r3, #2
 800827c:	2b00      	cmp	r3, #0
 800827e:	d023      	beq.n	80082c8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f003 0304 	and.w	r3, r3, #4
 8008288:	2b00      	cmp	r3, #0
 800828a:	d005      	beq.n	8008298 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800828c:	4b43      	ldr	r3, [pc, #268]	@ (800839c <HAL_RCC_ClockConfig+0x264>)
 800828e:	689b      	ldr	r3, [r3, #8]
 8008290:	4a42      	ldr	r2, [pc, #264]	@ (800839c <HAL_RCC_ClockConfig+0x264>)
 8008292:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8008296:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f003 0308 	and.w	r3, r3, #8
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d007      	beq.n	80082b4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80082a4:	4b3d      	ldr	r3, [pc, #244]	@ (800839c <HAL_RCC_ClockConfig+0x264>)
 80082a6:	689b      	ldr	r3, [r3, #8]
 80082a8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80082ac:	4a3b      	ldr	r2, [pc, #236]	@ (800839c <HAL_RCC_ClockConfig+0x264>)
 80082ae:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80082b2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80082b4:	4b39      	ldr	r3, [pc, #228]	@ (800839c <HAL_RCC_ClockConfig+0x264>)
 80082b6:	689b      	ldr	r3, [r3, #8]
 80082b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	689b      	ldr	r3, [r3, #8]
 80082c0:	4936      	ldr	r1, [pc, #216]	@ (800839c <HAL_RCC_ClockConfig+0x264>)
 80082c2:	4313      	orrs	r3, r2
 80082c4:	608b      	str	r3, [r1, #8]
 80082c6:	e008      	b.n	80082da <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80082c8:	697b      	ldr	r3, [r7, #20]
 80082ca:	2b80      	cmp	r3, #128	@ 0x80
 80082cc:	d105      	bne.n	80082da <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80082ce:	4b33      	ldr	r3, [pc, #204]	@ (800839c <HAL_RCC_ClockConfig+0x264>)
 80082d0:	689b      	ldr	r3, [r3, #8]
 80082d2:	4a32      	ldr	r2, [pc, #200]	@ (800839c <HAL_RCC_ClockConfig+0x264>)
 80082d4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80082d8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80082da:	4b2f      	ldr	r3, [pc, #188]	@ (8008398 <HAL_RCC_ClockConfig+0x260>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f003 030f 	and.w	r3, r3, #15
 80082e2:	683a      	ldr	r2, [r7, #0]
 80082e4:	429a      	cmp	r2, r3
 80082e6:	d21d      	bcs.n	8008324 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80082e8:	4b2b      	ldr	r3, [pc, #172]	@ (8008398 <HAL_RCC_ClockConfig+0x260>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f023 020f 	bic.w	r2, r3, #15
 80082f0:	4929      	ldr	r1, [pc, #164]	@ (8008398 <HAL_RCC_ClockConfig+0x260>)
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	4313      	orrs	r3, r2
 80082f6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80082f8:	f7fa fad2 	bl	80028a0 <HAL_GetTick>
 80082fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80082fe:	e00a      	b.n	8008316 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008300:	f7fa face 	bl	80028a0 <HAL_GetTick>
 8008304:	4602      	mov	r2, r0
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	1ad3      	subs	r3, r2, r3
 800830a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800830e:	4293      	cmp	r3, r2
 8008310:	d901      	bls.n	8008316 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8008312:	2303      	movs	r3, #3
 8008314:	e03b      	b.n	800838e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008316:	4b20      	ldr	r3, [pc, #128]	@ (8008398 <HAL_RCC_ClockConfig+0x260>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f003 030f 	and.w	r3, r3, #15
 800831e:	683a      	ldr	r2, [r7, #0]
 8008320:	429a      	cmp	r2, r3
 8008322:	d1ed      	bne.n	8008300 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f003 0304 	and.w	r3, r3, #4
 800832c:	2b00      	cmp	r3, #0
 800832e:	d008      	beq.n	8008342 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008330:	4b1a      	ldr	r3, [pc, #104]	@ (800839c <HAL_RCC_ClockConfig+0x264>)
 8008332:	689b      	ldr	r3, [r3, #8]
 8008334:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	68db      	ldr	r3, [r3, #12]
 800833c:	4917      	ldr	r1, [pc, #92]	@ (800839c <HAL_RCC_ClockConfig+0x264>)
 800833e:	4313      	orrs	r3, r2
 8008340:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f003 0308 	and.w	r3, r3, #8
 800834a:	2b00      	cmp	r3, #0
 800834c:	d009      	beq.n	8008362 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800834e:	4b13      	ldr	r3, [pc, #76]	@ (800839c <HAL_RCC_ClockConfig+0x264>)
 8008350:	689b      	ldr	r3, [r3, #8]
 8008352:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	691b      	ldr	r3, [r3, #16]
 800835a:	00db      	lsls	r3, r3, #3
 800835c:	490f      	ldr	r1, [pc, #60]	@ (800839c <HAL_RCC_ClockConfig+0x264>)
 800835e:	4313      	orrs	r3, r2
 8008360:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008362:	f000 f825 	bl	80083b0 <HAL_RCC_GetSysClockFreq>
 8008366:	4602      	mov	r2, r0
 8008368:	4b0c      	ldr	r3, [pc, #48]	@ (800839c <HAL_RCC_ClockConfig+0x264>)
 800836a:	689b      	ldr	r3, [r3, #8]
 800836c:	091b      	lsrs	r3, r3, #4
 800836e:	f003 030f 	and.w	r3, r3, #15
 8008372:	490c      	ldr	r1, [pc, #48]	@ (80083a4 <HAL_RCC_ClockConfig+0x26c>)
 8008374:	5ccb      	ldrb	r3, [r1, r3]
 8008376:	f003 031f 	and.w	r3, r3, #31
 800837a:	fa22 f303 	lsr.w	r3, r2, r3
 800837e:	4a0a      	ldr	r2, [pc, #40]	@ (80083a8 <HAL_RCC_ClockConfig+0x270>)
 8008380:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8008382:	4b0a      	ldr	r3, [pc, #40]	@ (80083ac <HAL_RCC_ClockConfig+0x274>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	4618      	mov	r0, r3
 8008388:	f7fa fa3e 	bl	8002808 <HAL_InitTick>
 800838c:	4603      	mov	r3, r0
}
<<<<<<< HEAD
 800740a:	4618      	mov	r0, r3
 800740c:	3718      	adds	r7, #24
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}
 8007412:	bf00      	nop
 8007414:	40022000 	.word	0x40022000
 8007418:	40021000 	.word	0x40021000
 800741c:	04c4b400 	.word	0x04c4b400
 8007420:	08012800 	.word	0x08012800
 8007424:	20000000 	.word	0x20000000
 8007428:	20000004 	.word	0x20000004
=======
 800838e:	4618      	mov	r0, r3
 8008390:	3718      	adds	r7, #24
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}
 8008396:	bf00      	nop
 8008398:	40022000 	.word	0x40022000
 800839c:	40021000 	.word	0x40021000
 80083a0:	04c4b400 	.word	0x04c4b400
 80083a4:	08013adc 	.word	0x08013adc
 80083a8:	20000000 	.word	0x20000000
 80083ac:	20000004 	.word	0x20000004
>>>>>>> f88694781bd54d0bca96bec7ac145bdac62fa329

080083b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b087      	sub	sp, #28
 80083b4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80083b6:	4b2c      	ldr	r3, [pc, #176]	@ (8008468 <HAL_RCC_GetSysClockFreq+0xb8>)
 80083b8:	689b      	ldr	r3, [r3, #8]
 80083ba:	f003 030c 	and.w	r3, r3, #12
 80083be:	2b04      	cmp	r3, #4
 80083c0:	d102      	bne.n	80083c8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80083c2:	4b2a      	ldr	r3, [pc, #168]	@ (800846c <HAL_RCC_GetSysClockFreq+0xbc>)
 80083c4:	613b      	str	r3, [r7, #16]
 80083c6:	e047      	b.n	8008458 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80083c8:	4b27      	ldr	r3, [pc, #156]	@ (8008468 <HAL_RCC_GetSysClockFreq+0xb8>)
 80083ca:	689b      	ldr	r3, [r3, #8]
 80083cc:	f003 030c 	and.w	r3, r3, #12
 80083d0:	2b08      	cmp	r3, #8
 80083d2:	d102      	bne.n	80083da <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80083d4:	4b26      	ldr	r3, [pc, #152]	@ (8008470 <HAL_RCC_GetSysClockFreq+0xc0>)
 80083d6:	613b      	str	r3, [r7, #16]
 80083d8:	e03e      	b.n	8008458 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80083da:	4b23      	ldr	r3, [pc, #140]	@ (8008468 <HAL_RCC_GetSysClockFreq+0xb8>)
 80083dc:	689b      	ldr	r3, [r3, #8]
 80083de:	f003 030c 	and.w	r3, r3, #12
 80083e2:	2b0c      	cmp	r3, #12
 80083e4:	d136      	bne.n	8008454 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80083e6:	4b20      	ldr	r3, [pc, #128]	@ (8008468 <HAL_RCC_GetSysClockFreq+0xb8>)
 80083e8:	68db      	ldr	r3, [r3, #12]
 80083ea:	f003 0303 	and.w	r3, r3, #3
 80083ee:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80083f0:	4b1d      	ldr	r3, [pc, #116]	@ (8008468 <HAL_RCC_GetSysClockFreq+0xb8>)
 80083f2:	68db      	ldr	r3, [r3, #12]
 80083f4:	091b      	lsrs	r3, r3, #4
 80083f6:	f003 030f 	and.w	r3, r3, #15
 80083fa:	3301      	adds	r3, #1
 80083fc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	2b03      	cmp	r3, #3
 8008402:	d10c      	bne.n	800841e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008404:	4a1a      	ldr	r2, [pc, #104]	@ (8008470 <HAL_RCC_GetSysClockFreq+0xc0>)
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	fbb2 f3f3 	udiv	r3, r2, r3
 800840c:	4a16      	ldr	r2, [pc, #88]	@ (8008468 <HAL_RCC_GetSysClockFreq+0xb8>)
 800840e:	68d2      	ldr	r2, [r2, #12]
 8008410:	0a12      	lsrs	r2, r2, #8
 8008412:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008416:	fb02 f303 	mul.w	r3, r2, r3
 800841a:	617b      	str	r3, [r7, #20]
      break;
 800841c:	e00c      	b.n	8008438 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800841e:	4a13      	ldr	r2, [pc, #76]	@ (800846c <HAL_RCC_GetSysClockFreq+0xbc>)
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	fbb2 f3f3 	udiv	r3, r2, r3
 8008426:	4a10      	ldr	r2, [pc, #64]	@ (8008468 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008428:	68d2      	ldr	r2, [r2, #12]
 800842a:	0a12      	lsrs	r2, r2, #8
 800842c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008430:	fb02 f303 	mul.w	r3, r2, r3
 8008434:	617b      	str	r3, [r7, #20]
      break;
 8008436:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008438:	4b0b      	ldr	r3, [pc, #44]	@ (8008468 <HAL_RCC_GetSysClockFreq+0xb8>)
 800843a:	68db      	ldr	r3, [r3, #12]
 800843c:	0e5b      	lsrs	r3, r3, #25
 800843e:	f003 0303 	and.w	r3, r3, #3
 8008442:	3301      	adds	r3, #1
 8008444:	005b      	lsls	r3, r3, #1
 8008446:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8008448:	697a      	ldr	r2, [r7, #20]
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008450:	613b      	str	r3, [r7, #16]
 8008452:	e001      	b.n	8008458 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8008454:	2300      	movs	r3, #0
 8008456:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8008458:	693b      	ldr	r3, [r7, #16]
}
 800845a:	4618      	mov	r0, r3
 800845c:	371c      	adds	r7, #28
 800845e:	46bd      	mov	sp, r7
 8008460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008464:	4770      	bx	lr
 8008466:	bf00      	nop
 8008468:	40021000 	.word	0x40021000
 800846c:	00f42400 	.word	0x00f42400
 8008470:	016e3600 	.word	0x016e3600

08008474 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008474:	b480      	push	{r7}
 8008476:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008478:	4b03      	ldr	r3, [pc, #12]	@ (8008488 <HAL_RCC_GetHCLKFreq+0x14>)
 800847a:	681b      	ldr	r3, [r3, #0]
}
 800847c:	4618      	mov	r0, r3
 800847e:	46bd      	mov	sp, r7
 8008480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008484:	4770      	bx	lr
 8008486:	bf00      	nop
 8008488:	20000000 	.word	0x20000000

0800848c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008490:	f7ff fff0 	bl	8008474 <HAL_RCC_GetHCLKFreq>
 8008494:	4602      	mov	r2, r0
 8008496:	4b06      	ldr	r3, [pc, #24]	@ (80084b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008498:	689b      	ldr	r3, [r3, #8]
 800849a:	0a1b      	lsrs	r3, r3, #8
 800849c:	f003 0307 	and.w	r3, r3, #7
 80084a0:	4904      	ldr	r1, [pc, #16]	@ (80084b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80084a2:	5ccb      	ldrb	r3, [r1, r3]
 80084a4:	f003 031f 	and.w	r3, r3, #31
 80084a8:	fa22 f303 	lsr.w	r3, r2, r3
}
<<<<<<< HEAD
 8007528:	4618      	mov	r0, r3
 800752a:	bd80      	pop	{r7, pc}
 800752c:	40021000 	.word	0x40021000
 8007530:	08012810 	.word	0x08012810
=======
 80084ac:	4618      	mov	r0, r3
 80084ae:	bd80      	pop	{r7, pc}
 80084b0:	40021000 	.word	0x40021000
 80084b4:	08013aec 	.word	0x08013aec
>>>>>>> f88694781bd54d0bca96bec7ac145bdac62fa329

080084b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80084bc:	f7ff ffda 	bl	8008474 <HAL_RCC_GetHCLKFreq>
 80084c0:	4602      	mov	r2, r0
 80084c2:	4b06      	ldr	r3, [pc, #24]	@ (80084dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80084c4:	689b      	ldr	r3, [r3, #8]
 80084c6:	0adb      	lsrs	r3, r3, #11
 80084c8:	f003 0307 	and.w	r3, r3, #7
 80084cc:	4904      	ldr	r1, [pc, #16]	@ (80084e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80084ce:	5ccb      	ldrb	r3, [r1, r3]
 80084d0:	f003 031f 	and.w	r3, r3, #31
 80084d4:	fa22 f303 	lsr.w	r3, r2, r3
}
<<<<<<< HEAD
 8007554:	4618      	mov	r0, r3
 8007556:	bd80      	pop	{r7, pc}
 8007558:	40021000 	.word	0x40021000
 800755c:	08012810 	.word	0x08012810
=======
 80084d8:	4618      	mov	r0, r3
 80084da:	bd80      	pop	{r7, pc}
 80084dc:	40021000 	.word	0x40021000
 80084e0:	08013aec 	.word	0x08013aec
>>>>>>> f88694781bd54d0bca96bec7ac145bdac62fa329

080084e4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80084e4:	b480      	push	{r7}
 80084e6:	b087      	sub	sp, #28
 80084e8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80084ea:	4b1e      	ldr	r3, [pc, #120]	@ (8008564 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80084ec:	68db      	ldr	r3, [r3, #12]
 80084ee:	f003 0303 	and.w	r3, r3, #3
 80084f2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80084f4:	4b1b      	ldr	r3, [pc, #108]	@ (8008564 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80084f6:	68db      	ldr	r3, [r3, #12]
 80084f8:	091b      	lsrs	r3, r3, #4
 80084fa:	f003 030f 	and.w	r3, r3, #15
 80084fe:	3301      	adds	r3, #1
 8008500:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8008502:	693b      	ldr	r3, [r7, #16]
 8008504:	2b03      	cmp	r3, #3
 8008506:	d10c      	bne.n	8008522 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008508:	4a17      	ldr	r2, [pc, #92]	@ (8008568 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008510:	4a14      	ldr	r2, [pc, #80]	@ (8008564 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008512:	68d2      	ldr	r2, [r2, #12]
 8008514:	0a12      	lsrs	r2, r2, #8
 8008516:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800851a:	fb02 f303 	mul.w	r3, r2, r3
 800851e:	617b      	str	r3, [r7, #20]
    break;
 8008520:	e00c      	b.n	800853c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008522:	4a12      	ldr	r2, [pc, #72]	@ (800856c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	fbb2 f3f3 	udiv	r3, r2, r3
 800852a:	4a0e      	ldr	r2, [pc, #56]	@ (8008564 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800852c:	68d2      	ldr	r2, [r2, #12]
 800852e:	0a12      	lsrs	r2, r2, #8
 8008530:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008534:	fb02 f303 	mul.w	r3, r2, r3
 8008538:	617b      	str	r3, [r7, #20]
    break;
 800853a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800853c:	4b09      	ldr	r3, [pc, #36]	@ (8008564 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800853e:	68db      	ldr	r3, [r3, #12]
 8008540:	0e5b      	lsrs	r3, r3, #25
 8008542:	f003 0303 	and.w	r3, r3, #3
 8008546:	3301      	adds	r3, #1
 8008548:	005b      	lsls	r3, r3, #1
 800854a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800854c:	697a      	ldr	r2, [r7, #20]
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	fbb2 f3f3 	udiv	r3, r2, r3
 8008554:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8008556:	687b      	ldr	r3, [r7, #4]
}
 8008558:	4618      	mov	r0, r3
 800855a:	371c      	adds	r7, #28
 800855c:	46bd      	mov	sp, r7
 800855e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008562:	4770      	bx	lr
 8008564:	40021000 	.word	0x40021000
 8008568:	016e3600 	.word	0x016e3600
 800856c:	00f42400 	.word	0x00f42400

08008570 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b086      	sub	sp, #24
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008578:	2300      	movs	r3, #0
 800857a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800857c:	2300      	movs	r3, #0
 800857e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008588:	2b00      	cmp	r3, #0
 800858a:	f000 8098 	beq.w	80086be <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800858e:	2300      	movs	r3, #0
 8008590:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008592:	4b43      	ldr	r3, [pc, #268]	@ (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008594:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008596:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800859a:	2b00      	cmp	r3, #0
 800859c:	d10d      	bne.n	80085ba <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800859e:	4b40      	ldr	r3, [pc, #256]	@ (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80085a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80085a2:	4a3f      	ldr	r2, [pc, #252]	@ (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80085a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80085a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80085aa:	4b3d      	ldr	r3, [pc, #244]	@ (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80085ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80085ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80085b2:	60bb      	str	r3, [r7, #8]
 80085b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80085b6:	2301      	movs	r3, #1
 80085b8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80085ba:	4b3a      	ldr	r3, [pc, #232]	@ (80086a4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	4a39      	ldr	r2, [pc, #228]	@ (80086a4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80085c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80085c4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80085c6:	f7fa f96b 	bl	80028a0 <HAL_GetTick>
 80085ca:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80085cc:	e009      	b.n	80085e2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80085ce:	f7fa f967 	bl	80028a0 <HAL_GetTick>
 80085d2:	4602      	mov	r2, r0
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	1ad3      	subs	r3, r2, r3
 80085d8:	2b02      	cmp	r3, #2
 80085da:	d902      	bls.n	80085e2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80085dc:	2303      	movs	r3, #3
 80085de:	74fb      	strb	r3, [r7, #19]
        break;
 80085e0:	e005      	b.n	80085ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80085e2:	4b30      	ldr	r3, [pc, #192]	@ (80086a4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d0ef      	beq.n	80085ce <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80085ee:	7cfb      	ldrb	r3, [r7, #19]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d159      	bne.n	80086a8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80085f4:	4b2a      	ldr	r3, [pc, #168]	@ (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80085f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80085fe:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008600:	697b      	ldr	r3, [r7, #20]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d01e      	beq.n	8008644 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800860a:	697a      	ldr	r2, [r7, #20]
 800860c:	429a      	cmp	r2, r3
 800860e:	d019      	beq.n	8008644 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008610:	4b23      	ldr	r3, [pc, #140]	@ (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008612:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008616:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800861a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800861c:	4b20      	ldr	r3, [pc, #128]	@ (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800861e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008622:	4a1f      	ldr	r2, [pc, #124]	@ (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008624:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008628:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800862c:	4b1c      	ldr	r3, [pc, #112]	@ (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800862e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008632:	4a1b      	ldr	r2, [pc, #108]	@ (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008634:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008638:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800863c:	4a18      	ldr	r2, [pc, #96]	@ (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	f003 0301 	and.w	r3, r3, #1
 800864a:	2b00      	cmp	r3, #0
 800864c:	d016      	beq.n	800867c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800864e:	f7fa f927 	bl	80028a0 <HAL_GetTick>
 8008652:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008654:	e00b      	b.n	800866e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008656:	f7fa f923 	bl	80028a0 <HAL_GetTick>
 800865a:	4602      	mov	r2, r0
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	1ad3      	subs	r3, r2, r3
 8008660:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008664:	4293      	cmp	r3, r2
 8008666:	d902      	bls.n	800866e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8008668:	2303      	movs	r3, #3
 800866a:	74fb      	strb	r3, [r7, #19]
            break;
 800866c:	e006      	b.n	800867c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800866e:	4b0c      	ldr	r3, [pc, #48]	@ (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008670:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008674:	f003 0302 	and.w	r3, r3, #2
 8008678:	2b00      	cmp	r3, #0
 800867a:	d0ec      	beq.n	8008656 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800867c:	7cfb      	ldrb	r3, [r7, #19]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d10b      	bne.n	800869a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008682:	4b07      	ldr	r3, [pc, #28]	@ (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008684:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008688:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008690:	4903      	ldr	r1, [pc, #12]	@ (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008692:	4313      	orrs	r3, r2
 8008694:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8008698:	e008      	b.n	80086ac <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800869a:	7cfb      	ldrb	r3, [r7, #19]
 800869c:	74bb      	strb	r3, [r7, #18]
 800869e:	e005      	b.n	80086ac <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80086a0:	40021000 	.word	0x40021000
 80086a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086a8:	7cfb      	ldrb	r3, [r7, #19]
 80086aa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80086ac:	7c7b      	ldrb	r3, [r7, #17]
 80086ae:	2b01      	cmp	r3, #1
 80086b0:	d105      	bne.n	80086be <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80086b2:	4ba6      	ldr	r3, [pc, #664]	@ (800894c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80086b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80086b6:	4aa5      	ldr	r2, [pc, #660]	@ (800894c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80086b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80086bc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f003 0301 	and.w	r3, r3, #1
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d00a      	beq.n	80086e0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80086ca:	4ba0      	ldr	r3, [pc, #640]	@ (800894c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80086cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086d0:	f023 0203 	bic.w	r2, r3, #3
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	685b      	ldr	r3, [r3, #4]
 80086d8:	499c      	ldr	r1, [pc, #624]	@ (800894c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80086da:	4313      	orrs	r3, r2
 80086dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f003 0302 	and.w	r3, r3, #2
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d00a      	beq.n	8008702 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80086ec:	4b97      	ldr	r3, [pc, #604]	@ (800894c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80086ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086f2:	f023 020c 	bic.w	r2, r3, #12
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	689b      	ldr	r3, [r3, #8]
 80086fa:	4994      	ldr	r1, [pc, #592]	@ (800894c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80086fc:	4313      	orrs	r3, r2
 80086fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f003 0304 	and.w	r3, r3, #4
 800870a:	2b00      	cmp	r3, #0
 800870c:	d00a      	beq.n	8008724 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800870e:	4b8f      	ldr	r3, [pc, #572]	@ (800894c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008710:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008714:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	68db      	ldr	r3, [r3, #12]
 800871c:	498b      	ldr	r1, [pc, #556]	@ (800894c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800871e:	4313      	orrs	r3, r2
 8008720:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f003 0308 	and.w	r3, r3, #8
 800872c:	2b00      	cmp	r3, #0
 800872e:	d00a      	beq.n	8008746 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008730:	4b86      	ldr	r3, [pc, #536]	@ (800894c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008732:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008736:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	691b      	ldr	r3, [r3, #16]
 800873e:	4983      	ldr	r1, [pc, #524]	@ (800894c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008740:	4313      	orrs	r3, r2
 8008742:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f003 0320 	and.w	r3, r3, #32
 800874e:	2b00      	cmp	r3, #0
 8008750:	d00a      	beq.n	8008768 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008752:	4b7e      	ldr	r3, [pc, #504]	@ (800894c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008754:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008758:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	695b      	ldr	r3, [r3, #20]
 8008760:	497a      	ldr	r1, [pc, #488]	@ (800894c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008762:	4313      	orrs	r3, r2
 8008764:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008770:	2b00      	cmp	r3, #0
 8008772:	d00a      	beq.n	800878a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008774:	4b75      	ldr	r3, [pc, #468]	@ (800894c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008776:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800877a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	699b      	ldr	r3, [r3, #24]
 8008782:	4972      	ldr	r1, [pc, #456]	@ (800894c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008784:	4313      	orrs	r3, r2
 8008786:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008792:	2b00      	cmp	r3, #0
 8008794:	d00a      	beq.n	80087ac <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008796:	4b6d      	ldr	r3, [pc, #436]	@ (800894c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008798:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800879c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	69db      	ldr	r3, [r3, #28]
 80087a4:	4969      	ldr	r1, [pc, #420]	@ (800894c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80087a6:	4313      	orrs	r3, r2
 80087a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d00a      	beq.n	80087ce <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80087b8:	4b64      	ldr	r3, [pc, #400]	@ (800894c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80087ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087be:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6a1b      	ldr	r3, [r3, #32]
 80087c6:	4961      	ldr	r1, [pc, #388]	@ (800894c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80087c8:	4313      	orrs	r3, r2
 80087ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d00a      	beq.n	80087f0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80087da:	4b5c      	ldr	r3, [pc, #368]	@ (800894c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80087dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087e0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087e8:	4958      	ldr	r1, [pc, #352]	@ (800894c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80087ea:	4313      	orrs	r3, r2
 80087ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d015      	beq.n	8008828 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80087fc:	4b53      	ldr	r3, [pc, #332]	@ (800894c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80087fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008802:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800880a:	4950      	ldr	r1, [pc, #320]	@ (800894c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800880c:	4313      	orrs	r3, r2
 800880e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008816:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800881a:	d105      	bne.n	8008828 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800881c:	4b4b      	ldr	r3, [pc, #300]	@ (800894c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800881e:	68db      	ldr	r3, [r3, #12]
 8008820:	4a4a      	ldr	r2, [pc, #296]	@ (800894c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008822:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008826:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008830:	2b00      	cmp	r3, #0
 8008832:	d015      	beq.n	8008860 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008834:	4b45      	ldr	r3, [pc, #276]	@ (800894c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008836:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800883a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008842:	4942      	ldr	r1, [pc, #264]	@ (800894c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008844:	4313      	orrs	r3, r2
 8008846:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800884e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008852:	d105      	bne.n	8008860 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008854:	4b3d      	ldr	r3, [pc, #244]	@ (800894c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008856:	68db      	ldr	r3, [r3, #12]
 8008858:	4a3c      	ldr	r2, [pc, #240]	@ (800894c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800885a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800885e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008868:	2b00      	cmp	r3, #0
 800886a:	d015      	beq.n	8008898 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800886c:	4b37      	ldr	r3, [pc, #220]	@ (800894c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800886e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008872:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800887a:	4934      	ldr	r1, [pc, #208]	@ (800894c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800887c:	4313      	orrs	r3, r2
 800887e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008886:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800888a:	d105      	bne.n	8008898 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800888c:	4b2f      	ldr	r3, [pc, #188]	@ (800894c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800888e:	68db      	ldr	r3, [r3, #12]
 8008890:	4a2e      	ldr	r2, [pc, #184]	@ (800894c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008892:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008896:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d015      	beq.n	80088d0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80088a4:	4b29      	ldr	r3, [pc, #164]	@ (800894c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80088a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088aa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088b2:	4926      	ldr	r1, [pc, #152]	@ (800894c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80088b4:	4313      	orrs	r3, r2
 80088b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80088c2:	d105      	bne.n	80088d0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80088c4:	4b21      	ldr	r3, [pc, #132]	@ (800894c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80088c6:	68db      	ldr	r3, [r3, #12]
 80088c8:	4a20      	ldr	r2, [pc, #128]	@ (800894c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80088ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80088ce:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d015      	beq.n	8008908 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80088dc:	4b1b      	ldr	r3, [pc, #108]	@ (800894c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80088de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088e2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088ea:	4918      	ldr	r1, [pc, #96]	@ (800894c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80088ec:	4313      	orrs	r3, r2
 80088ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80088fa:	d105      	bne.n	8008908 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80088fc:	4b13      	ldr	r3, [pc, #76]	@ (800894c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80088fe:	68db      	ldr	r3, [r3, #12]
 8008900:	4a12      	ldr	r2, [pc, #72]	@ (800894c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008902:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008906:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008910:	2b00      	cmp	r3, #0
 8008912:	d015      	beq.n	8008940 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008914:	4b0d      	ldr	r3, [pc, #52]	@ (800894c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008916:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800891a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008922:	490a      	ldr	r1, [pc, #40]	@ (800894c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008924:	4313      	orrs	r3, r2
 8008926:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800892e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008932:	d105      	bne.n	8008940 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008934:	4b05      	ldr	r3, [pc, #20]	@ (800894c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008936:	68db      	ldr	r3, [r3, #12]
 8008938:	4a04      	ldr	r2, [pc, #16]	@ (800894c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800893a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800893e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8008940:	7cbb      	ldrb	r3, [r7, #18]
}
 8008942:	4618      	mov	r0, r3
 8008944:	3718      	adds	r7, #24
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}
 800894a:	bf00      	nop
 800894c:	40021000 	.word	0x40021000

08008950 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b084      	sub	sp, #16
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d101      	bne.n	8008962 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800895e:	2301      	movs	r3, #1
 8008960:	e09d      	b.n	8008a9e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008966:	2b00      	cmp	r3, #0
 8008968:	d108      	bne.n	800897c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	685b      	ldr	r3, [r3, #4]
 800896e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008972:	d009      	beq.n	8008988 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2200      	movs	r2, #0
 8008978:	61da      	str	r2, [r3, #28]
 800897a:	e005      	b.n	8008988 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2200      	movs	r2, #0
 8008980:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2200      	movs	r2, #0
 8008986:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2200      	movs	r2, #0
 800898c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008994:	b2db      	uxtb	r3, r3
 8008996:	2b00      	cmp	r3, #0
 8008998:	d106      	bne.n	80089a8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2200      	movs	r2, #0
 800899e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	f7f9 fa22 	bl	8001dec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2202      	movs	r2, #2
 80089ac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	681a      	ldr	r2, [r3, #0]
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80089be:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	68db      	ldr	r3, [r3, #12]
 80089c4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80089c8:	d902      	bls.n	80089d0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80089ca:	2300      	movs	r3, #0
 80089cc:	60fb      	str	r3, [r7, #12]
 80089ce:	e002      	b.n	80089d6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80089d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80089d4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	68db      	ldr	r3, [r3, #12]
 80089da:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80089de:	d007      	beq.n	80089f0 <HAL_SPI_Init+0xa0>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	68db      	ldr	r3, [r3, #12]
 80089e4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80089e8:	d002      	beq.n	80089f0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2200      	movs	r2, #0
 80089ee:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	685b      	ldr	r3, [r3, #4]
 80089f4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	689b      	ldr	r3, [r3, #8]
 80089fc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008a00:	431a      	orrs	r2, r3
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	691b      	ldr	r3, [r3, #16]
 8008a06:	f003 0302 	and.w	r3, r3, #2
 8008a0a:	431a      	orrs	r2, r3
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	695b      	ldr	r3, [r3, #20]
 8008a10:	f003 0301 	and.w	r3, r3, #1
 8008a14:	431a      	orrs	r2, r3
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	699b      	ldr	r3, [r3, #24]
 8008a1a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008a1e:	431a      	orrs	r2, r3
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	69db      	ldr	r3, [r3, #28]
 8008a24:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008a28:	431a      	orrs	r2, r3
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6a1b      	ldr	r3, [r3, #32]
 8008a2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a32:	ea42 0103 	orr.w	r1, r2, r3
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a3a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	430a      	orrs	r2, r1
 8008a44:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	699b      	ldr	r3, [r3, #24]
 8008a4a:	0c1b      	lsrs	r3, r3, #16
 8008a4c:	f003 0204 	and.w	r2, r3, #4
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a54:	f003 0310 	and.w	r3, r3, #16
 8008a58:	431a      	orrs	r2, r3
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a5e:	f003 0308 	and.w	r3, r3, #8
 8008a62:	431a      	orrs	r2, r3
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	68db      	ldr	r3, [r3, #12]
 8008a68:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8008a6c:	ea42 0103 	orr.w	r1, r2, r3
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	430a      	orrs	r2, r1
 8008a7c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	69da      	ldr	r2, [r3, #28]
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008a8c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2200      	movs	r2, #0
 8008a92:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2201      	movs	r2, #1
 8008a98:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8008a9c:	2300      	movs	r3, #0
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	3710      	adds	r7, #16
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}

08008aa6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008aa6:	b580      	push	{r7, lr}
 8008aa8:	b08a      	sub	sp, #40	@ 0x28
 8008aaa:	af00      	add	r7, sp, #0
 8008aac:	60f8      	str	r0, [r7, #12]
 8008aae:	60b9      	str	r1, [r7, #8]
 8008ab0:	607a      	str	r2, [r7, #4]
 8008ab2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008ab8:	2300      	movs	r3, #0
 8008aba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008ac4:	2b01      	cmp	r3, #1
 8008ac6:	d101      	bne.n	8008acc <HAL_SPI_TransmitReceive+0x26>
 8008ac8:	2302      	movs	r3, #2
 8008aca:	e20a      	b.n	8008ee2 <HAL_SPI_TransmitReceive+0x43c>
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	2201      	movs	r2, #1
 8008ad0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008ad4:	f7f9 fee4 	bl	80028a0 <HAL_GetTick>
 8008ad8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008ae0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	685b      	ldr	r3, [r3, #4]
 8008ae6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8008ae8:	887b      	ldrh	r3, [r7, #2]
 8008aea:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8008aec:	887b      	ldrh	r3, [r7, #2]
 8008aee:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008af0:	7efb      	ldrb	r3, [r7, #27]
 8008af2:	2b01      	cmp	r3, #1
 8008af4:	d00e      	beq.n	8008b14 <HAL_SPI_TransmitReceive+0x6e>
 8008af6:	697b      	ldr	r3, [r7, #20]
 8008af8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008afc:	d106      	bne.n	8008b0c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	689b      	ldr	r3, [r3, #8]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d102      	bne.n	8008b0c <HAL_SPI_TransmitReceive+0x66>
 8008b06:	7efb      	ldrb	r3, [r7, #27]
 8008b08:	2b04      	cmp	r3, #4
 8008b0a:	d003      	beq.n	8008b14 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8008b0c:	2302      	movs	r3, #2
 8008b0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8008b12:	e1e0      	b.n	8008ed6 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d005      	beq.n	8008b26 <HAL_SPI_TransmitReceive+0x80>
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d002      	beq.n	8008b26 <HAL_SPI_TransmitReceive+0x80>
 8008b20:	887b      	ldrh	r3, [r7, #2]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d103      	bne.n	8008b2e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8008b26:	2301      	movs	r3, #1
 8008b28:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8008b2c:	e1d3      	b.n	8008ed6 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008b34:	b2db      	uxtb	r3, r3
 8008b36:	2b04      	cmp	r3, #4
 8008b38:	d003      	beq.n	8008b42 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	2205      	movs	r2, #5
 8008b3e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	2200      	movs	r2, #0
 8008b46:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	687a      	ldr	r2, [r7, #4]
 8008b4c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	887a      	ldrh	r2, [r7, #2]
 8008b52:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	887a      	ldrh	r2, [r7, #2]
 8008b5a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	68ba      	ldr	r2, [r7, #8]
 8008b62:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	887a      	ldrh	r2, [r7, #2]
 8008b68:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	887a      	ldrh	r2, [r7, #2]
 8008b6e:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	2200      	movs	r2, #0
 8008b74:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	68db      	ldr	r3, [r3, #12]
 8008b80:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008b84:	d802      	bhi.n	8008b8c <HAL_SPI_TransmitReceive+0xe6>
 8008b86:	8a3b      	ldrh	r3, [r7, #16]
 8008b88:	2b01      	cmp	r3, #1
 8008b8a:	d908      	bls.n	8008b9e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	685a      	ldr	r2, [r3, #4]
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008b9a:	605a      	str	r2, [r3, #4]
 8008b9c:	e007      	b.n	8008bae <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	685a      	ldr	r2, [r3, #4]
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008bac:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bb8:	2b40      	cmp	r3, #64	@ 0x40
 8008bba:	d007      	beq.n	8008bcc <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	681a      	ldr	r2, [r3, #0]
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008bca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	68db      	ldr	r3, [r3, #12]
 8008bd0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008bd4:	f240 8081 	bls.w	8008cda <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	685b      	ldr	r3, [r3, #4]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d002      	beq.n	8008be6 <HAL_SPI_TransmitReceive+0x140>
 8008be0:	8a7b      	ldrh	r3, [r7, #18]
 8008be2:	2b01      	cmp	r3, #1
 8008be4:	d16d      	bne.n	8008cc2 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bea:	881a      	ldrh	r2, [r3, #0]
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bf6:	1c9a      	adds	r2, r3, #2
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008c00:	b29b      	uxth	r3, r3
 8008c02:	3b01      	subs	r3, #1
 8008c04:	b29a      	uxth	r2, r3
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008c0a:	e05a      	b.n	8008cc2 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	689b      	ldr	r3, [r3, #8]
 8008c12:	f003 0302 	and.w	r3, r3, #2
 8008c16:	2b02      	cmp	r3, #2
 8008c18:	d11b      	bne.n	8008c52 <HAL_SPI_TransmitReceive+0x1ac>
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008c1e:	b29b      	uxth	r3, r3
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d016      	beq.n	8008c52 <HAL_SPI_TransmitReceive+0x1ac>
 8008c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c26:	2b01      	cmp	r3, #1
 8008c28:	d113      	bne.n	8008c52 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c2e:	881a      	ldrh	r2, [r3, #0]
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c3a:	1c9a      	adds	r2, r3, #2
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008c44:	b29b      	uxth	r3, r3
 8008c46:	3b01      	subs	r3, #1
 8008c48:	b29a      	uxth	r2, r3
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008c4e:	2300      	movs	r3, #0
 8008c50:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	689b      	ldr	r3, [r3, #8]
 8008c58:	f003 0301 	and.w	r3, r3, #1
 8008c5c:	2b01      	cmp	r3, #1
 8008c5e:	d11c      	bne.n	8008c9a <HAL_SPI_TransmitReceive+0x1f4>
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008c66:	b29b      	uxth	r3, r3
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d016      	beq.n	8008c9a <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	68da      	ldr	r2, [r3, #12]
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c76:	b292      	uxth	r2, r2
 8008c78:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c7e:	1c9a      	adds	r2, r3, #2
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008c8a:	b29b      	uxth	r3, r3
 8008c8c:	3b01      	subs	r3, #1
 8008c8e:	b29a      	uxth	r2, r3
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008c96:	2301      	movs	r3, #1
 8008c98:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008c9a:	f7f9 fe01 	bl	80028a0 <HAL_GetTick>
 8008c9e:	4602      	mov	r2, r0
 8008ca0:	69fb      	ldr	r3, [r7, #28]
 8008ca2:	1ad3      	subs	r3, r2, r3
 8008ca4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ca6:	429a      	cmp	r2, r3
 8008ca8:	d80b      	bhi.n	8008cc2 <HAL_SPI_TransmitReceive+0x21c>
 8008caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cb0:	d007      	beq.n	8008cc2 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8008cb2:	2303      	movs	r3, #3
 8008cb4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	2201      	movs	r2, #1
 8008cbc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8008cc0:	e109      	b.n	8008ed6 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008cc6:	b29b      	uxth	r3, r3
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d19f      	bne.n	8008c0c <HAL_SPI_TransmitReceive+0x166>
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008cd2:	b29b      	uxth	r3, r3
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d199      	bne.n	8008c0c <HAL_SPI_TransmitReceive+0x166>
 8008cd8:	e0e3      	b.n	8008ea2 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	685b      	ldr	r3, [r3, #4]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d003      	beq.n	8008cea <HAL_SPI_TransmitReceive+0x244>
 8008ce2:	8a7b      	ldrh	r3, [r7, #18]
 8008ce4:	2b01      	cmp	r3, #1
 8008ce6:	f040 80cf 	bne.w	8008e88 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008cee:	b29b      	uxth	r3, r3
 8008cf0:	2b01      	cmp	r3, #1
 8008cf2:	d912      	bls.n	8008d1a <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cf8:	881a      	ldrh	r2, [r3, #0]
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d04:	1c9a      	adds	r2, r3, #2
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008d0e:	b29b      	uxth	r3, r3
 8008d10:	3b02      	subs	r3, #2
 8008d12:	b29a      	uxth	r2, r3
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008d18:	e0b6      	b.n	8008e88 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	330c      	adds	r3, #12
 8008d24:	7812      	ldrb	r2, [r2, #0]
 8008d26:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d2c:	1c5a      	adds	r2, r3, #1
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008d36:	b29b      	uxth	r3, r3
 8008d38:	3b01      	subs	r3, #1
 8008d3a:	b29a      	uxth	r2, r3
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008d40:	e0a2      	b.n	8008e88 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	689b      	ldr	r3, [r3, #8]
 8008d48:	f003 0302 	and.w	r3, r3, #2
 8008d4c:	2b02      	cmp	r3, #2
 8008d4e:	d134      	bne.n	8008dba <HAL_SPI_TransmitReceive+0x314>
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008d54:	b29b      	uxth	r3, r3
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d02f      	beq.n	8008dba <HAL_SPI_TransmitReceive+0x314>
 8008d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d5c:	2b01      	cmp	r3, #1
 8008d5e:	d12c      	bne.n	8008dba <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008d64:	b29b      	uxth	r3, r3
 8008d66:	2b01      	cmp	r3, #1
 8008d68:	d912      	bls.n	8008d90 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d6e:	881a      	ldrh	r2, [r3, #0]
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d7a:	1c9a      	adds	r2, r3, #2
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008d84:	b29b      	uxth	r3, r3
 8008d86:	3b02      	subs	r3, #2
 8008d88:	b29a      	uxth	r2, r3
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008d8e:	e012      	b.n	8008db6 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	330c      	adds	r3, #12
 8008d9a:	7812      	ldrb	r2, [r2, #0]
 8008d9c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008da2:	1c5a      	adds	r2, r3, #1
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008dac:	b29b      	uxth	r3, r3
 8008dae:	3b01      	subs	r3, #1
 8008db0:	b29a      	uxth	r2, r3
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008db6:	2300      	movs	r3, #0
 8008db8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	689b      	ldr	r3, [r3, #8]
 8008dc0:	f003 0301 	and.w	r3, r3, #1
 8008dc4:	2b01      	cmp	r3, #1
 8008dc6:	d148      	bne.n	8008e5a <HAL_SPI_TransmitReceive+0x3b4>
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008dce:	b29b      	uxth	r3, r3
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d042      	beq.n	8008e5a <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008dda:	b29b      	uxth	r3, r3
 8008ddc:	2b01      	cmp	r3, #1
 8008dde:	d923      	bls.n	8008e28 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	68da      	ldr	r2, [r3, #12]
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dea:	b292      	uxth	r2, r2
 8008dec:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008df2:	1c9a      	adds	r2, r3, #2
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008dfe:	b29b      	uxth	r3, r3
 8008e00:	3b02      	subs	r3, #2
 8008e02:	b29a      	uxth	r2, r3
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008e10:	b29b      	uxth	r3, r3
 8008e12:	2b01      	cmp	r3, #1
 8008e14:	d81f      	bhi.n	8008e56 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	685a      	ldr	r2, [r3, #4]
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008e24:	605a      	str	r2, [r3, #4]
 8008e26:	e016      	b.n	8008e56 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f103 020c 	add.w	r2, r3, #12
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e34:	7812      	ldrb	r2, [r2, #0]
 8008e36:	b2d2      	uxtb	r2, r2
 8008e38:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e3e:	1c5a      	adds	r2, r3, #1
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008e4a:	b29b      	uxth	r3, r3
 8008e4c:	3b01      	subs	r3, #1
 8008e4e:	b29a      	uxth	r2, r3
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008e56:	2301      	movs	r3, #1
 8008e58:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008e5a:	f7f9 fd21 	bl	80028a0 <HAL_GetTick>
 8008e5e:	4602      	mov	r2, r0
 8008e60:	69fb      	ldr	r3, [r7, #28]
 8008e62:	1ad3      	subs	r3, r2, r3
 8008e64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e66:	429a      	cmp	r2, r3
 8008e68:	d803      	bhi.n	8008e72 <HAL_SPI_TransmitReceive+0x3cc>
 8008e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e70:	d102      	bne.n	8008e78 <HAL_SPI_TransmitReceive+0x3d2>
 8008e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d107      	bne.n	8008e88 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8008e78:	2303      	movs	r3, #3
 8008e7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	2201      	movs	r2, #1
 8008e82:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8008e86:	e026      	b.n	8008ed6 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008e8c:	b29b      	uxth	r3, r3
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	f47f af57 	bne.w	8008d42 <HAL_SPI_TransmitReceive+0x29c>
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008e9a:	b29b      	uxth	r3, r3
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	f47f af50 	bne.w	8008d42 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008ea2:	69fa      	ldr	r2, [r7, #28]
 8008ea4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008ea6:	68f8      	ldr	r0, [r7, #12]
 8008ea8:	f000 f94c 	bl	8009144 <SPI_EndRxTxTransaction>
 8008eac:	4603      	mov	r3, r0
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d005      	beq.n	8008ebe <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	2220      	movs	r2, #32
 8008ebc:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d003      	beq.n	8008ece <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008ecc:	e003      	b.n	8008ed6 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	2201      	movs	r2, #1
 8008ed2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	2200      	movs	r2, #0
 8008eda:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8008ede:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	3728      	adds	r7, #40	@ 0x28
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd80      	pop	{r7, pc}

08008eea <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8008eea:	b480      	push	{r7}
 8008eec:	b083      	sub	sp, #12
 8008eee:	af00      	add	r7, sp, #0
 8008ef0:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008ef8:	b2db      	uxtb	r3, r3
}
 8008efa:	4618      	mov	r0, r3
 8008efc:	370c      	adds	r7, #12
 8008efe:	46bd      	mov	sp, r7
 8008f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f04:	4770      	bx	lr
	...

08008f08 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b088      	sub	sp, #32
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	60f8      	str	r0, [r7, #12]
 8008f10:	60b9      	str	r1, [r7, #8]
 8008f12:	603b      	str	r3, [r7, #0]
 8008f14:	4613      	mov	r3, r2
 8008f16:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008f18:	f7f9 fcc2 	bl	80028a0 <HAL_GetTick>
 8008f1c:	4602      	mov	r2, r0
 8008f1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f20:	1a9b      	subs	r3, r3, r2
 8008f22:	683a      	ldr	r2, [r7, #0]
 8008f24:	4413      	add	r3, r2
 8008f26:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008f28:	f7f9 fcba 	bl	80028a0 <HAL_GetTick>
 8008f2c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008f2e:	4b39      	ldr	r3, [pc, #228]	@ (8009014 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	015b      	lsls	r3, r3, #5
 8008f34:	0d1b      	lsrs	r3, r3, #20
 8008f36:	69fa      	ldr	r2, [r7, #28]
 8008f38:	fb02 f303 	mul.w	r3, r2, r3
 8008f3c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008f3e:	e054      	b.n	8008fea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f46:	d050      	beq.n	8008fea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008f48:	f7f9 fcaa 	bl	80028a0 <HAL_GetTick>
 8008f4c:	4602      	mov	r2, r0
 8008f4e:	69bb      	ldr	r3, [r7, #24]
 8008f50:	1ad3      	subs	r3, r2, r3
 8008f52:	69fa      	ldr	r2, [r7, #28]
 8008f54:	429a      	cmp	r2, r3
 8008f56:	d902      	bls.n	8008f5e <SPI_WaitFlagStateUntilTimeout+0x56>
 8008f58:	69fb      	ldr	r3, [r7, #28]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d13d      	bne.n	8008fda <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	685a      	ldr	r2, [r3, #4]
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008f6c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	685b      	ldr	r3, [r3, #4]
 8008f72:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008f76:	d111      	bne.n	8008f9c <SPI_WaitFlagStateUntilTimeout+0x94>
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	689b      	ldr	r3, [r3, #8]
 8008f7c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008f80:	d004      	beq.n	8008f8c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	689b      	ldr	r3, [r3, #8]
 8008f86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f8a:	d107      	bne.n	8008f9c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	681a      	ldr	r2, [r3, #0]
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008f9a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fa0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008fa4:	d10f      	bne.n	8008fc6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	681a      	ldr	r2, [r3, #0]
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008fb4:	601a      	str	r2, [r3, #0]
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	681a      	ldr	r2, [r3, #0]
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008fc4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	2201      	movs	r2, #1
 8008fca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8008fd6:	2303      	movs	r3, #3
 8008fd8:	e017      	b.n	800900a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008fda:	697b      	ldr	r3, [r7, #20]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d101      	bne.n	8008fe4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008fe4:	697b      	ldr	r3, [r7, #20]
 8008fe6:	3b01      	subs	r3, #1
 8008fe8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	689a      	ldr	r2, [r3, #8]
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	4013      	ands	r3, r2
 8008ff4:	68ba      	ldr	r2, [r7, #8]
 8008ff6:	429a      	cmp	r2, r3
 8008ff8:	bf0c      	ite	eq
 8008ffa:	2301      	moveq	r3, #1
 8008ffc:	2300      	movne	r3, #0
 8008ffe:	b2db      	uxtb	r3, r3
 8009000:	461a      	mov	r2, r3
 8009002:	79fb      	ldrb	r3, [r7, #7]
 8009004:	429a      	cmp	r2, r3
 8009006:	d19b      	bne.n	8008f40 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009008:	2300      	movs	r3, #0
}
 800900a:	4618      	mov	r0, r3
 800900c:	3720      	adds	r7, #32
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}
 8009012:	bf00      	nop
 8009014:	20000000 	.word	0x20000000

08009018 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b08a      	sub	sp, #40	@ 0x28
 800901c:	af00      	add	r7, sp, #0
 800901e:	60f8      	str	r0, [r7, #12]
 8009020:	60b9      	str	r1, [r7, #8]
 8009022:	607a      	str	r2, [r7, #4]
 8009024:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009026:	2300      	movs	r3, #0
 8009028:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800902a:	f7f9 fc39 	bl	80028a0 <HAL_GetTick>
 800902e:	4602      	mov	r2, r0
 8009030:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009032:	1a9b      	subs	r3, r3, r2
 8009034:	683a      	ldr	r2, [r7, #0]
 8009036:	4413      	add	r3, r2
 8009038:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800903a:	f7f9 fc31 	bl	80028a0 <HAL_GetTick>
 800903e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	330c      	adds	r3, #12
 8009046:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009048:	4b3d      	ldr	r3, [pc, #244]	@ (8009140 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800904a:	681a      	ldr	r2, [r3, #0]
 800904c:	4613      	mov	r3, r2
 800904e:	009b      	lsls	r3, r3, #2
 8009050:	4413      	add	r3, r2
 8009052:	00da      	lsls	r2, r3, #3
 8009054:	1ad3      	subs	r3, r2, r3
 8009056:	0d1b      	lsrs	r3, r3, #20
 8009058:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800905a:	fb02 f303 	mul.w	r3, r2, r3
 800905e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009060:	e060      	b.n	8009124 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009062:	68bb      	ldr	r3, [r7, #8]
 8009064:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009068:	d107      	bne.n	800907a <SPI_WaitFifoStateUntilTimeout+0x62>
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d104      	bne.n	800907a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009070:	69fb      	ldr	r3, [r7, #28]
 8009072:	781b      	ldrb	r3, [r3, #0]
 8009074:	b2db      	uxtb	r3, r3
 8009076:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009078:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009080:	d050      	beq.n	8009124 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009082:	f7f9 fc0d 	bl	80028a0 <HAL_GetTick>
 8009086:	4602      	mov	r2, r0
 8009088:	6a3b      	ldr	r3, [r7, #32]
 800908a:	1ad3      	subs	r3, r2, r3
 800908c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800908e:	429a      	cmp	r2, r3
 8009090:	d902      	bls.n	8009098 <SPI_WaitFifoStateUntilTimeout+0x80>
 8009092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009094:	2b00      	cmp	r3, #0
 8009096:	d13d      	bne.n	8009114 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	685a      	ldr	r2, [r3, #4]
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80090a6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	685b      	ldr	r3, [r3, #4]
 80090ac:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80090b0:	d111      	bne.n	80090d6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	689b      	ldr	r3, [r3, #8]
 80090b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80090ba:	d004      	beq.n	80090c6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	689b      	ldr	r3, [r3, #8]
 80090c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80090c4:	d107      	bne.n	80090d6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	681a      	ldr	r2, [r3, #0]
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80090d4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80090de:	d10f      	bne.n	8009100 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	681a      	ldr	r2, [r3, #0]
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80090ee:	601a      	str	r2, [r3, #0]
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	681a      	ldr	r2, [r3, #0]
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80090fe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	2201      	movs	r2, #1
 8009104:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	2200      	movs	r2, #0
 800910c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009110:	2303      	movs	r3, #3
 8009112:	e010      	b.n	8009136 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009114:	69bb      	ldr	r3, [r7, #24]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d101      	bne.n	800911e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800911a:	2300      	movs	r3, #0
 800911c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800911e:	69bb      	ldr	r3, [r7, #24]
 8009120:	3b01      	subs	r3, #1
 8009122:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	689a      	ldr	r2, [r3, #8]
 800912a:	68bb      	ldr	r3, [r7, #8]
 800912c:	4013      	ands	r3, r2
 800912e:	687a      	ldr	r2, [r7, #4]
 8009130:	429a      	cmp	r2, r3
 8009132:	d196      	bne.n	8009062 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009134:	2300      	movs	r3, #0
}
 8009136:	4618      	mov	r0, r3
 8009138:	3728      	adds	r7, #40	@ 0x28
 800913a:	46bd      	mov	sp, r7
 800913c:	bd80      	pop	{r7, pc}
 800913e:	bf00      	nop
 8009140:	20000000 	.word	0x20000000

08009144 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b086      	sub	sp, #24
 8009148:	af02      	add	r7, sp, #8
 800914a:	60f8      	str	r0, [r7, #12]
 800914c:	60b9      	str	r1, [r7, #8]
 800914e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	9300      	str	r3, [sp, #0]
 8009154:	68bb      	ldr	r3, [r7, #8]
 8009156:	2200      	movs	r2, #0
 8009158:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800915c:	68f8      	ldr	r0, [r7, #12]
 800915e:	f7ff ff5b 	bl	8009018 <SPI_WaitFifoStateUntilTimeout>
 8009162:	4603      	mov	r3, r0
 8009164:	2b00      	cmp	r3, #0
 8009166:	d007      	beq.n	8009178 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800916c:	f043 0220 	orr.w	r2, r3, #32
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009174:	2303      	movs	r3, #3
 8009176:	e027      	b.n	80091c8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	9300      	str	r3, [sp, #0]
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	2200      	movs	r2, #0
 8009180:	2180      	movs	r1, #128	@ 0x80
 8009182:	68f8      	ldr	r0, [r7, #12]
 8009184:	f7ff fec0 	bl	8008f08 <SPI_WaitFlagStateUntilTimeout>
 8009188:	4603      	mov	r3, r0
 800918a:	2b00      	cmp	r3, #0
 800918c:	d007      	beq.n	800919e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009192:	f043 0220 	orr.w	r2, r3, #32
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800919a:	2303      	movs	r3, #3
 800919c:	e014      	b.n	80091c8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	9300      	str	r3, [sp, #0]
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	2200      	movs	r2, #0
 80091a6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80091aa:	68f8      	ldr	r0, [r7, #12]
 80091ac:	f7ff ff34 	bl	8009018 <SPI_WaitFifoStateUntilTimeout>
 80091b0:	4603      	mov	r3, r0
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d007      	beq.n	80091c6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80091ba:	f043 0220 	orr.w	r2, r3, #32
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80091c2:	2303      	movs	r3, #3
 80091c4:	e000      	b.n	80091c8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80091c6:	2300      	movs	r3, #0
}
 80091c8:	4618      	mov	r0, r3
 80091ca:	3710      	adds	r7, #16
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}

080091d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b082      	sub	sp, #8
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d101      	bne.n	80091e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80091de:	2301      	movs	r3, #1
 80091e0:	e049      	b.n	8009276 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80091e8:	b2db      	uxtb	r3, r3
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d106      	bne.n	80091fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2200      	movs	r2, #0
 80091f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f7f9 f8fa 	bl	80023f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2202      	movs	r2, #2
 8009200:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681a      	ldr	r2, [r3, #0]
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	3304      	adds	r3, #4
 800920c:	4619      	mov	r1, r3
 800920e:	4610      	mov	r0, r2
 8009210:	f000 fc9e 	bl	8009b50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2201      	movs	r2, #1
 8009218:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2201      	movs	r2, #1
 8009220:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2201      	movs	r2, #1
 8009228:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2201      	movs	r2, #1
 8009230:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2201      	movs	r2, #1
 8009238:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2201      	movs	r2, #1
 8009240:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2201      	movs	r2, #1
 8009248:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2201      	movs	r2, #1
 8009250:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2201      	movs	r2, #1
 8009258:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2201      	movs	r2, #1
 8009260:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2201      	movs	r2, #1
 8009268:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2201      	movs	r2, #1
 8009270:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009274:	2300      	movs	r3, #0
}
 8009276:	4618      	mov	r0, r3
 8009278:	3708      	adds	r7, #8
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}
	...

08009280 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009280:	b480      	push	{r7}
 8009282:	b085      	sub	sp, #20
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800928e:	b2db      	uxtb	r3, r3
 8009290:	2b01      	cmp	r3, #1
 8009292:	d001      	beq.n	8009298 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009294:	2301      	movs	r3, #1
 8009296:	e042      	b.n	800931e <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2202      	movs	r2, #2
 800929c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	4a21      	ldr	r2, [pc, #132]	@ (800932c <HAL_TIM_Base_Start+0xac>)
 80092a6:	4293      	cmp	r3, r2
 80092a8:	d018      	beq.n	80092dc <HAL_TIM_Base_Start+0x5c>
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80092b2:	d013      	beq.n	80092dc <HAL_TIM_Base_Start+0x5c>
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	4a1d      	ldr	r2, [pc, #116]	@ (8009330 <HAL_TIM_Base_Start+0xb0>)
 80092ba:	4293      	cmp	r3, r2
 80092bc:	d00e      	beq.n	80092dc <HAL_TIM_Base_Start+0x5c>
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	4a1c      	ldr	r2, [pc, #112]	@ (8009334 <HAL_TIM_Base_Start+0xb4>)
 80092c4:	4293      	cmp	r3, r2
 80092c6:	d009      	beq.n	80092dc <HAL_TIM_Base_Start+0x5c>
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	4a1a      	ldr	r2, [pc, #104]	@ (8009338 <HAL_TIM_Base_Start+0xb8>)
 80092ce:	4293      	cmp	r3, r2
 80092d0:	d004      	beq.n	80092dc <HAL_TIM_Base_Start+0x5c>
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	4a19      	ldr	r2, [pc, #100]	@ (800933c <HAL_TIM_Base_Start+0xbc>)
 80092d8:	4293      	cmp	r3, r2
 80092da:	d115      	bne.n	8009308 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	689a      	ldr	r2, [r3, #8]
 80092e2:	4b17      	ldr	r3, [pc, #92]	@ (8009340 <HAL_TIM_Base_Start+0xc0>)
 80092e4:	4013      	ands	r3, r2
 80092e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	2b06      	cmp	r3, #6
 80092ec:	d015      	beq.n	800931a <HAL_TIM_Base_Start+0x9a>
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80092f4:	d011      	beq.n	800931a <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	681a      	ldr	r2, [r3, #0]
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f042 0201 	orr.w	r2, r2, #1
 8009304:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009306:	e008      	b.n	800931a <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	681a      	ldr	r2, [r3, #0]
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	f042 0201 	orr.w	r2, r2, #1
 8009316:	601a      	str	r2, [r3, #0]
 8009318:	e000      	b.n	800931c <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800931a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800931c:	2300      	movs	r3, #0
}
 800931e:	4618      	mov	r0, r3
 8009320:	3714      	adds	r7, #20
 8009322:	46bd      	mov	sp, r7
 8009324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009328:	4770      	bx	lr
 800932a:	bf00      	nop
 800932c:	40012c00 	.word	0x40012c00
 8009330:	40000400 	.word	0x40000400
 8009334:	40000800 	.word	0x40000800
 8009338:	40013400 	.word	0x40013400
 800933c:	40014000 	.word	0x40014000
 8009340:	00010007 	.word	0x00010007

08009344 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b082      	sub	sp, #8
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d101      	bne.n	8009356 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009352:	2301      	movs	r3, #1
 8009354:	e049      	b.n	80093ea <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800935c:	b2db      	uxtb	r3, r3
 800935e:	2b00      	cmp	r3, #0
 8009360:	d106      	bne.n	8009370 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2200      	movs	r2, #0
 8009366:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f000 f841 	bl	80093f2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2202      	movs	r2, #2
 8009374:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681a      	ldr	r2, [r3, #0]
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	3304      	adds	r3, #4
 8009380:	4619      	mov	r1, r3
 8009382:	4610      	mov	r0, r2
 8009384:	f000 fbe4 	bl	8009b50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2201      	movs	r2, #1
 800938c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2201      	movs	r2, #1
 8009394:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2201      	movs	r2, #1
 800939c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2201      	movs	r2, #1
 80093a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2201      	movs	r2, #1
 80093ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2201      	movs	r2, #1
 80093b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2201      	movs	r2, #1
 80093bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2201      	movs	r2, #1
 80093c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2201      	movs	r2, #1
 80093cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2201      	movs	r2, #1
 80093d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2201      	movs	r2, #1
 80093dc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2201      	movs	r2, #1
 80093e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80093e8:	2300      	movs	r3, #0
}
 80093ea:	4618      	mov	r0, r3
 80093ec:	3708      	adds	r7, #8
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}

080093f2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80093f2:	b480      	push	{r7}
 80093f4:	b083      	sub	sp, #12
 80093f6:	af00      	add	r7, sp, #0
 80093f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80093fa:	bf00      	nop
 80093fc:	370c      	adds	r7, #12
 80093fe:	46bd      	mov	sp, r7
 8009400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009404:	4770      	bx	lr
	...

08009408 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b084      	sub	sp, #16
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
 8009410:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d109      	bne.n	800942c <HAL_TIM_PWM_Start+0x24>
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800941e:	b2db      	uxtb	r3, r3
 8009420:	2b01      	cmp	r3, #1
 8009422:	bf14      	ite	ne
 8009424:	2301      	movne	r3, #1
 8009426:	2300      	moveq	r3, #0
 8009428:	b2db      	uxtb	r3, r3
 800942a:	e03c      	b.n	80094a6 <HAL_TIM_PWM_Start+0x9e>
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	2b04      	cmp	r3, #4
 8009430:	d109      	bne.n	8009446 <HAL_TIM_PWM_Start+0x3e>
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009438:	b2db      	uxtb	r3, r3
 800943a:	2b01      	cmp	r3, #1
 800943c:	bf14      	ite	ne
 800943e:	2301      	movne	r3, #1
 8009440:	2300      	moveq	r3, #0
 8009442:	b2db      	uxtb	r3, r3
 8009444:	e02f      	b.n	80094a6 <HAL_TIM_PWM_Start+0x9e>
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	2b08      	cmp	r3, #8
 800944a:	d109      	bne.n	8009460 <HAL_TIM_PWM_Start+0x58>
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009452:	b2db      	uxtb	r3, r3
 8009454:	2b01      	cmp	r3, #1
 8009456:	bf14      	ite	ne
 8009458:	2301      	movne	r3, #1
 800945a:	2300      	moveq	r3, #0
 800945c:	b2db      	uxtb	r3, r3
 800945e:	e022      	b.n	80094a6 <HAL_TIM_PWM_Start+0x9e>
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	2b0c      	cmp	r3, #12
 8009464:	d109      	bne.n	800947a <HAL_TIM_PWM_Start+0x72>
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800946c:	b2db      	uxtb	r3, r3
 800946e:	2b01      	cmp	r3, #1
 8009470:	bf14      	ite	ne
 8009472:	2301      	movne	r3, #1
 8009474:	2300      	moveq	r3, #0
 8009476:	b2db      	uxtb	r3, r3
 8009478:	e015      	b.n	80094a6 <HAL_TIM_PWM_Start+0x9e>
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	2b10      	cmp	r3, #16
 800947e:	d109      	bne.n	8009494 <HAL_TIM_PWM_Start+0x8c>
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009486:	b2db      	uxtb	r3, r3
 8009488:	2b01      	cmp	r3, #1
 800948a:	bf14      	ite	ne
 800948c:	2301      	movne	r3, #1
 800948e:	2300      	moveq	r3, #0
 8009490:	b2db      	uxtb	r3, r3
 8009492:	e008      	b.n	80094a6 <HAL_TIM_PWM_Start+0x9e>
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800949a:	b2db      	uxtb	r3, r3
 800949c:	2b01      	cmp	r3, #1
 800949e:	bf14      	ite	ne
 80094a0:	2301      	movne	r3, #1
 80094a2:	2300      	moveq	r3, #0
 80094a4:	b2db      	uxtb	r3, r3
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d001      	beq.n	80094ae <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80094aa:	2301      	movs	r3, #1
 80094ac:	e097      	b.n	80095de <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d104      	bne.n	80094be <HAL_TIM_PWM_Start+0xb6>
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2202      	movs	r2, #2
 80094b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80094bc:	e023      	b.n	8009506 <HAL_TIM_PWM_Start+0xfe>
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	2b04      	cmp	r3, #4
 80094c2:	d104      	bne.n	80094ce <HAL_TIM_PWM_Start+0xc6>
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2202      	movs	r2, #2
 80094c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80094cc:	e01b      	b.n	8009506 <HAL_TIM_PWM_Start+0xfe>
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	2b08      	cmp	r3, #8
 80094d2:	d104      	bne.n	80094de <HAL_TIM_PWM_Start+0xd6>
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2202      	movs	r2, #2
 80094d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80094dc:	e013      	b.n	8009506 <HAL_TIM_PWM_Start+0xfe>
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	2b0c      	cmp	r3, #12
 80094e2:	d104      	bne.n	80094ee <HAL_TIM_PWM_Start+0xe6>
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2202      	movs	r2, #2
 80094e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80094ec:	e00b      	b.n	8009506 <HAL_TIM_PWM_Start+0xfe>
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	2b10      	cmp	r3, #16
 80094f2:	d104      	bne.n	80094fe <HAL_TIM_PWM_Start+0xf6>
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2202      	movs	r2, #2
 80094f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80094fc:	e003      	b.n	8009506 <HAL_TIM_PWM_Start+0xfe>
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2202      	movs	r2, #2
 8009502:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	2201      	movs	r2, #1
 800950c:	6839      	ldr	r1, [r7, #0]
 800950e:	4618      	mov	r0, r3
 8009510:	f000 ffb4 	bl	800a47c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	4a33      	ldr	r2, [pc, #204]	@ (80095e8 <HAL_TIM_PWM_Start+0x1e0>)
 800951a:	4293      	cmp	r3, r2
 800951c:	d013      	beq.n	8009546 <HAL_TIM_PWM_Start+0x13e>
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	4a32      	ldr	r2, [pc, #200]	@ (80095ec <HAL_TIM_PWM_Start+0x1e4>)
 8009524:	4293      	cmp	r3, r2
 8009526:	d00e      	beq.n	8009546 <HAL_TIM_PWM_Start+0x13e>
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	4a30      	ldr	r2, [pc, #192]	@ (80095f0 <HAL_TIM_PWM_Start+0x1e8>)
 800952e:	4293      	cmp	r3, r2
 8009530:	d009      	beq.n	8009546 <HAL_TIM_PWM_Start+0x13e>
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	4a2f      	ldr	r2, [pc, #188]	@ (80095f4 <HAL_TIM_PWM_Start+0x1ec>)
 8009538:	4293      	cmp	r3, r2
 800953a:	d004      	beq.n	8009546 <HAL_TIM_PWM_Start+0x13e>
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	4a2d      	ldr	r2, [pc, #180]	@ (80095f8 <HAL_TIM_PWM_Start+0x1f0>)
 8009542:	4293      	cmp	r3, r2
 8009544:	d101      	bne.n	800954a <HAL_TIM_PWM_Start+0x142>
 8009546:	2301      	movs	r3, #1
 8009548:	e000      	b.n	800954c <HAL_TIM_PWM_Start+0x144>
 800954a:	2300      	movs	r3, #0
 800954c:	2b00      	cmp	r3, #0
 800954e:	d007      	beq.n	8009560 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800955e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	4a20      	ldr	r2, [pc, #128]	@ (80095e8 <HAL_TIM_PWM_Start+0x1e0>)
 8009566:	4293      	cmp	r3, r2
 8009568:	d018      	beq.n	800959c <HAL_TIM_PWM_Start+0x194>
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009572:	d013      	beq.n	800959c <HAL_TIM_PWM_Start+0x194>
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	4a20      	ldr	r2, [pc, #128]	@ (80095fc <HAL_TIM_PWM_Start+0x1f4>)
 800957a:	4293      	cmp	r3, r2
 800957c:	d00e      	beq.n	800959c <HAL_TIM_PWM_Start+0x194>
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	4a1f      	ldr	r2, [pc, #124]	@ (8009600 <HAL_TIM_PWM_Start+0x1f8>)
 8009584:	4293      	cmp	r3, r2
 8009586:	d009      	beq.n	800959c <HAL_TIM_PWM_Start+0x194>
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	4a17      	ldr	r2, [pc, #92]	@ (80095ec <HAL_TIM_PWM_Start+0x1e4>)
 800958e:	4293      	cmp	r3, r2
 8009590:	d004      	beq.n	800959c <HAL_TIM_PWM_Start+0x194>
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	4a16      	ldr	r2, [pc, #88]	@ (80095f0 <HAL_TIM_PWM_Start+0x1e8>)
 8009598:	4293      	cmp	r3, r2
 800959a:	d115      	bne.n	80095c8 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	689a      	ldr	r2, [r3, #8]
 80095a2:	4b18      	ldr	r3, [pc, #96]	@ (8009604 <HAL_TIM_PWM_Start+0x1fc>)
 80095a4:	4013      	ands	r3, r2
 80095a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	2b06      	cmp	r3, #6
 80095ac:	d015      	beq.n	80095da <HAL_TIM_PWM_Start+0x1d2>
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80095b4:	d011      	beq.n	80095da <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	681a      	ldr	r2, [r3, #0]
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	f042 0201 	orr.w	r2, r2, #1
 80095c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095c6:	e008      	b.n	80095da <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	681a      	ldr	r2, [r3, #0]
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f042 0201 	orr.w	r2, r2, #1
 80095d6:	601a      	str	r2, [r3, #0]
 80095d8:	e000      	b.n	80095dc <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095da:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80095dc:	2300      	movs	r3, #0
}
 80095de:	4618      	mov	r0, r3
 80095e0:	3710      	adds	r7, #16
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bd80      	pop	{r7, pc}
 80095e6:	bf00      	nop
 80095e8:	40012c00 	.word	0x40012c00
 80095ec:	40013400 	.word	0x40013400
 80095f0:	40014000 	.word	0x40014000
 80095f4:	40014400 	.word	0x40014400
 80095f8:	40014800 	.word	0x40014800
 80095fc:	40000400 	.word	0x40000400
 8009600:	40000800 	.word	0x40000800
 8009604:	00010007 	.word	0x00010007

08009608 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b082      	sub	sp, #8
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
 8009610:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	2200      	movs	r2, #0
 8009618:	6839      	ldr	r1, [r7, #0]
 800961a:	4618      	mov	r0, r3
 800961c:	f000 ff2e 	bl	800a47c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	4a3e      	ldr	r2, [pc, #248]	@ (8009720 <HAL_TIM_PWM_Stop+0x118>)
 8009626:	4293      	cmp	r3, r2
 8009628:	d013      	beq.n	8009652 <HAL_TIM_PWM_Stop+0x4a>
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	4a3d      	ldr	r2, [pc, #244]	@ (8009724 <HAL_TIM_PWM_Stop+0x11c>)
 8009630:	4293      	cmp	r3, r2
 8009632:	d00e      	beq.n	8009652 <HAL_TIM_PWM_Stop+0x4a>
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	4a3b      	ldr	r2, [pc, #236]	@ (8009728 <HAL_TIM_PWM_Stop+0x120>)
 800963a:	4293      	cmp	r3, r2
 800963c:	d009      	beq.n	8009652 <HAL_TIM_PWM_Stop+0x4a>
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	4a3a      	ldr	r2, [pc, #232]	@ (800972c <HAL_TIM_PWM_Stop+0x124>)
 8009644:	4293      	cmp	r3, r2
 8009646:	d004      	beq.n	8009652 <HAL_TIM_PWM_Stop+0x4a>
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	4a38      	ldr	r2, [pc, #224]	@ (8009730 <HAL_TIM_PWM_Stop+0x128>)
 800964e:	4293      	cmp	r3, r2
 8009650:	d101      	bne.n	8009656 <HAL_TIM_PWM_Stop+0x4e>
 8009652:	2301      	movs	r3, #1
 8009654:	e000      	b.n	8009658 <HAL_TIM_PWM_Stop+0x50>
 8009656:	2300      	movs	r3, #0
 8009658:	2b00      	cmp	r3, #0
 800965a:	d017      	beq.n	800968c <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	6a1a      	ldr	r2, [r3, #32]
 8009662:	f241 1311 	movw	r3, #4369	@ 0x1111
 8009666:	4013      	ands	r3, r2
 8009668:	2b00      	cmp	r3, #0
 800966a:	d10f      	bne.n	800968c <HAL_TIM_PWM_Stop+0x84>
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	6a1a      	ldr	r2, [r3, #32]
 8009672:	f244 4344 	movw	r3, #17476	@ 0x4444
 8009676:	4013      	ands	r3, r2
 8009678:	2b00      	cmp	r3, #0
 800967a:	d107      	bne.n	800968c <HAL_TIM_PWM_Stop+0x84>
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800968a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	6a1a      	ldr	r2, [r3, #32]
 8009692:	f241 1311 	movw	r3, #4369	@ 0x1111
 8009696:	4013      	ands	r3, r2
 8009698:	2b00      	cmp	r3, #0
 800969a:	d10f      	bne.n	80096bc <HAL_TIM_PWM_Stop+0xb4>
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	6a1a      	ldr	r2, [r3, #32]
 80096a2:	f244 4344 	movw	r3, #17476	@ 0x4444
 80096a6:	4013      	ands	r3, r2
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d107      	bne.n	80096bc <HAL_TIM_PWM_Stop+0xb4>
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	681a      	ldr	r2, [r3, #0]
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	f022 0201 	bic.w	r2, r2, #1
 80096ba:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d104      	bne.n	80096cc <HAL_TIM_PWM_Stop+0xc4>
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	2201      	movs	r2, #1
 80096c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80096ca:	e023      	b.n	8009714 <HAL_TIM_PWM_Stop+0x10c>
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	2b04      	cmp	r3, #4
 80096d0:	d104      	bne.n	80096dc <HAL_TIM_PWM_Stop+0xd4>
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2201      	movs	r2, #1
 80096d6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80096da:	e01b      	b.n	8009714 <HAL_TIM_PWM_Stop+0x10c>
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	2b08      	cmp	r3, #8
 80096e0:	d104      	bne.n	80096ec <HAL_TIM_PWM_Stop+0xe4>
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2201      	movs	r2, #1
 80096e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80096ea:	e013      	b.n	8009714 <HAL_TIM_PWM_Stop+0x10c>
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	2b0c      	cmp	r3, #12
 80096f0:	d104      	bne.n	80096fc <HAL_TIM_PWM_Stop+0xf4>
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2201      	movs	r2, #1
 80096f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80096fa:	e00b      	b.n	8009714 <HAL_TIM_PWM_Stop+0x10c>
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	2b10      	cmp	r3, #16
 8009700:	d104      	bne.n	800970c <HAL_TIM_PWM_Stop+0x104>
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2201      	movs	r2, #1
 8009706:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800970a:	e003      	b.n	8009714 <HAL_TIM_PWM_Stop+0x10c>
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2201      	movs	r2, #1
 8009710:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8009714:	2300      	movs	r3, #0
}
 8009716:	4618      	mov	r0, r3
 8009718:	3708      	adds	r7, #8
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}
 800971e:	bf00      	nop
 8009720:	40012c00 	.word	0x40012c00
 8009724:	40013400 	.word	0x40013400
 8009728:	40014000 	.word	0x40014000
 800972c:	40014400 	.word	0x40014400
 8009730:	40014800 	.word	0x40014800

08009734 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b086      	sub	sp, #24
 8009738:	af00      	add	r7, sp, #0
 800973a:	60f8      	str	r0, [r7, #12]
 800973c:	60b9      	str	r1, [r7, #8]
 800973e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009740:	2300      	movs	r3, #0
 8009742:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800974a:	2b01      	cmp	r3, #1
 800974c:	d101      	bne.n	8009752 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800974e:	2302      	movs	r3, #2
 8009750:	e0ff      	b.n	8009952 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	2201      	movs	r2, #1
 8009756:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2b14      	cmp	r3, #20
 800975e:	f200 80f0 	bhi.w	8009942 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009762:	a201      	add	r2, pc, #4	@ (adr r2, 8009768 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009768:	080097bd 	.word	0x080097bd
 800976c:	08009943 	.word	0x08009943
 8009770:	08009943 	.word	0x08009943
 8009774:	08009943 	.word	0x08009943
 8009778:	080097fd 	.word	0x080097fd
 800977c:	08009943 	.word	0x08009943
 8009780:	08009943 	.word	0x08009943
 8009784:	08009943 	.word	0x08009943
 8009788:	0800983f 	.word	0x0800983f
 800978c:	08009943 	.word	0x08009943
 8009790:	08009943 	.word	0x08009943
 8009794:	08009943 	.word	0x08009943
 8009798:	0800987f 	.word	0x0800987f
 800979c:	08009943 	.word	0x08009943
 80097a0:	08009943 	.word	0x08009943
 80097a4:	08009943 	.word	0x08009943
 80097a8:	080098c1 	.word	0x080098c1
 80097ac:	08009943 	.word	0x08009943
 80097b0:	08009943 	.word	0x08009943
 80097b4:	08009943 	.word	0x08009943
 80097b8:	08009901 	.word	0x08009901
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	68b9      	ldr	r1, [r7, #8]
 80097c2:	4618      	mov	r0, r3
 80097c4:	f000 fa60 	bl	8009c88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	699a      	ldr	r2, [r3, #24]
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	f042 0208 	orr.w	r2, r2, #8
 80097d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	699a      	ldr	r2, [r3, #24]
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f022 0204 	bic.w	r2, r2, #4
 80097e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	6999      	ldr	r1, [r3, #24]
 80097ee:	68bb      	ldr	r3, [r7, #8]
 80097f0:	691a      	ldr	r2, [r3, #16]
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	430a      	orrs	r2, r1
 80097f8:	619a      	str	r2, [r3, #24]
      break;
 80097fa:	e0a5      	b.n	8009948 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	68b9      	ldr	r1, [r7, #8]
 8009802:	4618      	mov	r0, r3
 8009804:	f000 fad0 	bl	8009da8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	699a      	ldr	r2, [r3, #24]
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009816:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	699a      	ldr	r2, [r3, #24]
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009826:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	6999      	ldr	r1, [r3, #24]
 800982e:	68bb      	ldr	r3, [r7, #8]
 8009830:	691b      	ldr	r3, [r3, #16]
 8009832:	021a      	lsls	r2, r3, #8
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	430a      	orrs	r2, r1
 800983a:	619a      	str	r2, [r3, #24]
      break;
 800983c:	e084      	b.n	8009948 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	68b9      	ldr	r1, [r7, #8]
 8009844:	4618      	mov	r0, r3
 8009846:	f000 fb39 	bl	8009ebc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	69da      	ldr	r2, [r3, #28]
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f042 0208 	orr.w	r2, r2, #8
 8009858:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	69da      	ldr	r2, [r3, #28]
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	f022 0204 	bic.w	r2, r2, #4
 8009868:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	69d9      	ldr	r1, [r3, #28]
 8009870:	68bb      	ldr	r3, [r7, #8]
 8009872:	691a      	ldr	r2, [r3, #16]
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	430a      	orrs	r2, r1
 800987a:	61da      	str	r2, [r3, #28]
      break;
 800987c:	e064      	b.n	8009948 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	68b9      	ldr	r1, [r7, #8]
 8009884:	4618      	mov	r0, r3
 8009886:	f000 fba1 	bl	8009fcc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	69da      	ldr	r2, [r3, #28]
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009898:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	69da      	ldr	r2, [r3, #28]
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80098a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	69d9      	ldr	r1, [r3, #28]
 80098b0:	68bb      	ldr	r3, [r7, #8]
 80098b2:	691b      	ldr	r3, [r3, #16]
 80098b4:	021a      	lsls	r2, r3, #8
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	430a      	orrs	r2, r1
 80098bc:	61da      	str	r2, [r3, #28]
      break;
 80098be:	e043      	b.n	8009948 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	68b9      	ldr	r1, [r7, #8]
 80098c6:	4618      	mov	r0, r3
 80098c8:	f000 fc0a 	bl	800a0e0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	f042 0208 	orr.w	r2, r2, #8
 80098da:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	f022 0204 	bic.w	r2, r2, #4
 80098ea:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80098f2:	68bb      	ldr	r3, [r7, #8]
 80098f4:	691a      	ldr	r2, [r3, #16]
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	430a      	orrs	r2, r1
 80098fc:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80098fe:	e023      	b.n	8009948 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	68b9      	ldr	r1, [r7, #8]
 8009906:	4618      	mov	r0, r3
 8009908:	f000 fc4e 	bl	800a1a8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800991a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800992a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8009932:	68bb      	ldr	r3, [r7, #8]
 8009934:	691b      	ldr	r3, [r3, #16]
 8009936:	021a      	lsls	r2, r3, #8
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	430a      	orrs	r2, r1
 800993e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8009940:	e002      	b.n	8009948 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009942:	2301      	movs	r3, #1
 8009944:	75fb      	strb	r3, [r7, #23]
      break;
 8009946:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	2200      	movs	r2, #0
 800994c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009950:	7dfb      	ldrb	r3, [r7, #23]
}
 8009952:	4618      	mov	r0, r3
 8009954:	3718      	adds	r7, #24
 8009956:	46bd      	mov	sp, r7
 8009958:	bd80      	pop	{r7, pc}
 800995a:	bf00      	nop

0800995c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b084      	sub	sp, #16
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
 8009964:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009966:	2300      	movs	r3, #0
 8009968:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009970:	2b01      	cmp	r3, #1
 8009972:	d101      	bne.n	8009978 <HAL_TIM_ConfigClockSource+0x1c>
 8009974:	2302      	movs	r3, #2
 8009976:	e0de      	b.n	8009b36 <HAL_TIM_ConfigClockSource+0x1da>
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2201      	movs	r2, #1
 800997c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2202      	movs	r2, #2
 8009984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	689b      	ldr	r3, [r3, #8]
 800998e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009990:	68bb      	ldr	r3, [r7, #8]
 8009992:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8009996:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800999a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80099a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	68ba      	ldr	r2, [r7, #8]
 80099aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	4a63      	ldr	r2, [pc, #396]	@ (8009b40 <HAL_TIM_ConfigClockSource+0x1e4>)
 80099b2:	4293      	cmp	r3, r2
 80099b4:	f000 80a9 	beq.w	8009b0a <HAL_TIM_ConfigClockSource+0x1ae>
 80099b8:	4a61      	ldr	r2, [pc, #388]	@ (8009b40 <HAL_TIM_ConfigClockSource+0x1e4>)
 80099ba:	4293      	cmp	r3, r2
 80099bc:	f200 80ae 	bhi.w	8009b1c <HAL_TIM_ConfigClockSource+0x1c0>
 80099c0:	4a60      	ldr	r2, [pc, #384]	@ (8009b44 <HAL_TIM_ConfigClockSource+0x1e8>)
 80099c2:	4293      	cmp	r3, r2
 80099c4:	f000 80a1 	beq.w	8009b0a <HAL_TIM_ConfigClockSource+0x1ae>
 80099c8:	4a5e      	ldr	r2, [pc, #376]	@ (8009b44 <HAL_TIM_ConfigClockSource+0x1e8>)
 80099ca:	4293      	cmp	r3, r2
 80099cc:	f200 80a6 	bhi.w	8009b1c <HAL_TIM_ConfigClockSource+0x1c0>
 80099d0:	4a5d      	ldr	r2, [pc, #372]	@ (8009b48 <HAL_TIM_ConfigClockSource+0x1ec>)
 80099d2:	4293      	cmp	r3, r2
 80099d4:	f000 8099 	beq.w	8009b0a <HAL_TIM_ConfigClockSource+0x1ae>
 80099d8:	4a5b      	ldr	r2, [pc, #364]	@ (8009b48 <HAL_TIM_ConfigClockSource+0x1ec>)
 80099da:	4293      	cmp	r3, r2
 80099dc:	f200 809e 	bhi.w	8009b1c <HAL_TIM_ConfigClockSource+0x1c0>
 80099e0:	4a5a      	ldr	r2, [pc, #360]	@ (8009b4c <HAL_TIM_ConfigClockSource+0x1f0>)
 80099e2:	4293      	cmp	r3, r2
 80099e4:	f000 8091 	beq.w	8009b0a <HAL_TIM_ConfigClockSource+0x1ae>
 80099e8:	4a58      	ldr	r2, [pc, #352]	@ (8009b4c <HAL_TIM_ConfigClockSource+0x1f0>)
 80099ea:	4293      	cmp	r3, r2
 80099ec:	f200 8096 	bhi.w	8009b1c <HAL_TIM_ConfigClockSource+0x1c0>
 80099f0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80099f4:	f000 8089 	beq.w	8009b0a <HAL_TIM_ConfigClockSource+0x1ae>
 80099f8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80099fc:	f200 808e 	bhi.w	8009b1c <HAL_TIM_ConfigClockSource+0x1c0>
 8009a00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009a04:	d03e      	beq.n	8009a84 <HAL_TIM_ConfigClockSource+0x128>
 8009a06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009a0a:	f200 8087 	bhi.w	8009b1c <HAL_TIM_ConfigClockSource+0x1c0>
 8009a0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a12:	f000 8086 	beq.w	8009b22 <HAL_TIM_ConfigClockSource+0x1c6>
 8009a16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a1a:	d87f      	bhi.n	8009b1c <HAL_TIM_ConfigClockSource+0x1c0>
 8009a1c:	2b70      	cmp	r3, #112	@ 0x70
 8009a1e:	d01a      	beq.n	8009a56 <HAL_TIM_ConfigClockSource+0xfa>
 8009a20:	2b70      	cmp	r3, #112	@ 0x70
 8009a22:	d87b      	bhi.n	8009b1c <HAL_TIM_ConfigClockSource+0x1c0>
 8009a24:	2b60      	cmp	r3, #96	@ 0x60
 8009a26:	d050      	beq.n	8009aca <HAL_TIM_ConfigClockSource+0x16e>
 8009a28:	2b60      	cmp	r3, #96	@ 0x60
 8009a2a:	d877      	bhi.n	8009b1c <HAL_TIM_ConfigClockSource+0x1c0>
 8009a2c:	2b50      	cmp	r3, #80	@ 0x50
 8009a2e:	d03c      	beq.n	8009aaa <HAL_TIM_ConfigClockSource+0x14e>
 8009a30:	2b50      	cmp	r3, #80	@ 0x50
 8009a32:	d873      	bhi.n	8009b1c <HAL_TIM_ConfigClockSource+0x1c0>
 8009a34:	2b40      	cmp	r3, #64	@ 0x40
 8009a36:	d058      	beq.n	8009aea <HAL_TIM_ConfigClockSource+0x18e>
 8009a38:	2b40      	cmp	r3, #64	@ 0x40
 8009a3a:	d86f      	bhi.n	8009b1c <HAL_TIM_ConfigClockSource+0x1c0>
 8009a3c:	2b30      	cmp	r3, #48	@ 0x30
 8009a3e:	d064      	beq.n	8009b0a <HAL_TIM_ConfigClockSource+0x1ae>
 8009a40:	2b30      	cmp	r3, #48	@ 0x30
 8009a42:	d86b      	bhi.n	8009b1c <HAL_TIM_ConfigClockSource+0x1c0>
 8009a44:	2b20      	cmp	r3, #32
 8009a46:	d060      	beq.n	8009b0a <HAL_TIM_ConfigClockSource+0x1ae>
 8009a48:	2b20      	cmp	r3, #32
 8009a4a:	d867      	bhi.n	8009b1c <HAL_TIM_ConfigClockSource+0x1c0>
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d05c      	beq.n	8009b0a <HAL_TIM_ConfigClockSource+0x1ae>
 8009a50:	2b10      	cmp	r3, #16
 8009a52:	d05a      	beq.n	8009b0a <HAL_TIM_ConfigClockSource+0x1ae>
 8009a54:	e062      	b.n	8009b1c <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009a66:	f000 fce9 	bl	800a43c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	689b      	ldr	r3, [r3, #8]
 8009a70:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009a72:	68bb      	ldr	r3, [r7, #8]
 8009a74:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009a78:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	68ba      	ldr	r2, [r7, #8]
 8009a80:	609a      	str	r2, [r3, #8]
      break;
 8009a82:	e04f      	b.n	8009b24 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009a94:	f000 fcd2 	bl	800a43c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	689a      	ldr	r2, [r3, #8]
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009aa6:	609a      	str	r2, [r3, #8]
      break;
 8009aa8:	e03c      	b.n	8009b24 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009ab6:	461a      	mov	r2, r3
 8009ab8:	f000 fc44 	bl	800a344 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	2150      	movs	r1, #80	@ 0x50
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	f000 fc9d 	bl	800a402 <TIM_ITRx_SetConfig>
      break;
 8009ac8:	e02c      	b.n	8009b24 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009ad6:	461a      	mov	r2, r3
 8009ad8:	f000 fc63 	bl	800a3a2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	2160      	movs	r1, #96	@ 0x60
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	f000 fc8d 	bl	800a402 <TIM_ITRx_SetConfig>
      break;
 8009ae8:	e01c      	b.n	8009b24 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009af6:	461a      	mov	r2, r3
 8009af8:	f000 fc24 	bl	800a344 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	2140      	movs	r1, #64	@ 0x40
 8009b02:	4618      	mov	r0, r3
 8009b04:	f000 fc7d 	bl	800a402 <TIM_ITRx_SetConfig>
      break;
 8009b08:	e00c      	b.n	8009b24 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681a      	ldr	r2, [r3, #0]
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	4619      	mov	r1, r3
 8009b14:	4610      	mov	r0, r2
 8009b16:	f000 fc74 	bl	800a402 <TIM_ITRx_SetConfig>
      break;
 8009b1a:	e003      	b.n	8009b24 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8009b1c:	2301      	movs	r3, #1
 8009b1e:	73fb      	strb	r3, [r7, #15]
      break;
 8009b20:	e000      	b.n	8009b24 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8009b22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2201      	movs	r2, #1
 8009b28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2200      	movs	r2, #0
 8009b30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b36:	4618      	mov	r0, r3
 8009b38:	3710      	adds	r7, #16
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}
 8009b3e:	bf00      	nop
 8009b40:	00100070 	.word	0x00100070
 8009b44:	00100040 	.word	0x00100040
 8009b48:	00100030 	.word	0x00100030
 8009b4c:	00100020 	.word	0x00100020

08009b50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009b50:	b480      	push	{r7}
 8009b52:	b085      	sub	sp, #20
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
 8009b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	4a42      	ldr	r2, [pc, #264]	@ (8009c6c <TIM_Base_SetConfig+0x11c>)
 8009b64:	4293      	cmp	r3, r2
 8009b66:	d00f      	beq.n	8009b88 <TIM_Base_SetConfig+0x38>
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b6e:	d00b      	beq.n	8009b88 <TIM_Base_SetConfig+0x38>
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	4a3f      	ldr	r2, [pc, #252]	@ (8009c70 <TIM_Base_SetConfig+0x120>)
 8009b74:	4293      	cmp	r3, r2
 8009b76:	d007      	beq.n	8009b88 <TIM_Base_SetConfig+0x38>
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	4a3e      	ldr	r2, [pc, #248]	@ (8009c74 <TIM_Base_SetConfig+0x124>)
 8009b7c:	4293      	cmp	r3, r2
 8009b7e:	d003      	beq.n	8009b88 <TIM_Base_SetConfig+0x38>
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	4a3d      	ldr	r2, [pc, #244]	@ (8009c78 <TIM_Base_SetConfig+0x128>)
 8009b84:	4293      	cmp	r3, r2
 8009b86:	d108      	bne.n	8009b9a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	685b      	ldr	r3, [r3, #4]
 8009b94:	68fa      	ldr	r2, [r7, #12]
 8009b96:	4313      	orrs	r3, r2
 8009b98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	4a33      	ldr	r2, [pc, #204]	@ (8009c6c <TIM_Base_SetConfig+0x11c>)
 8009b9e:	4293      	cmp	r3, r2
 8009ba0:	d01b      	beq.n	8009bda <TIM_Base_SetConfig+0x8a>
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ba8:	d017      	beq.n	8009bda <TIM_Base_SetConfig+0x8a>
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	4a30      	ldr	r2, [pc, #192]	@ (8009c70 <TIM_Base_SetConfig+0x120>)
 8009bae:	4293      	cmp	r3, r2
 8009bb0:	d013      	beq.n	8009bda <TIM_Base_SetConfig+0x8a>
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	4a2f      	ldr	r2, [pc, #188]	@ (8009c74 <TIM_Base_SetConfig+0x124>)
 8009bb6:	4293      	cmp	r3, r2
 8009bb8:	d00f      	beq.n	8009bda <TIM_Base_SetConfig+0x8a>
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	4a2e      	ldr	r2, [pc, #184]	@ (8009c78 <TIM_Base_SetConfig+0x128>)
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	d00b      	beq.n	8009bda <TIM_Base_SetConfig+0x8a>
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	4a2d      	ldr	r2, [pc, #180]	@ (8009c7c <TIM_Base_SetConfig+0x12c>)
 8009bc6:	4293      	cmp	r3, r2
 8009bc8:	d007      	beq.n	8009bda <TIM_Base_SetConfig+0x8a>
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	4a2c      	ldr	r2, [pc, #176]	@ (8009c80 <TIM_Base_SetConfig+0x130>)
 8009bce:	4293      	cmp	r3, r2
 8009bd0:	d003      	beq.n	8009bda <TIM_Base_SetConfig+0x8a>
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	4a2b      	ldr	r2, [pc, #172]	@ (8009c84 <TIM_Base_SetConfig+0x134>)
 8009bd6:	4293      	cmp	r3, r2
 8009bd8:	d108      	bne.n	8009bec <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009be0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	68db      	ldr	r3, [r3, #12]
 8009be6:	68fa      	ldr	r2, [r7, #12]
 8009be8:	4313      	orrs	r3, r2
 8009bea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	695b      	ldr	r3, [r3, #20]
 8009bf6:	4313      	orrs	r3, r2
 8009bf8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	68fa      	ldr	r2, [r7, #12]
 8009bfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	689a      	ldr	r2, [r3, #8]
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	681a      	ldr	r2, [r3, #0]
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	4a16      	ldr	r2, [pc, #88]	@ (8009c6c <TIM_Base_SetConfig+0x11c>)
 8009c14:	4293      	cmp	r3, r2
 8009c16:	d00f      	beq.n	8009c38 <TIM_Base_SetConfig+0xe8>
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	4a17      	ldr	r2, [pc, #92]	@ (8009c78 <TIM_Base_SetConfig+0x128>)
 8009c1c:	4293      	cmp	r3, r2
 8009c1e:	d00b      	beq.n	8009c38 <TIM_Base_SetConfig+0xe8>
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	4a16      	ldr	r2, [pc, #88]	@ (8009c7c <TIM_Base_SetConfig+0x12c>)
 8009c24:	4293      	cmp	r3, r2
 8009c26:	d007      	beq.n	8009c38 <TIM_Base_SetConfig+0xe8>
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	4a15      	ldr	r2, [pc, #84]	@ (8009c80 <TIM_Base_SetConfig+0x130>)
 8009c2c:	4293      	cmp	r3, r2
 8009c2e:	d003      	beq.n	8009c38 <TIM_Base_SetConfig+0xe8>
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	4a14      	ldr	r2, [pc, #80]	@ (8009c84 <TIM_Base_SetConfig+0x134>)
 8009c34:	4293      	cmp	r3, r2
 8009c36:	d103      	bne.n	8009c40 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	691a      	ldr	r2, [r3, #16]
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2201      	movs	r2, #1
 8009c44:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	691b      	ldr	r3, [r3, #16]
 8009c4a:	f003 0301 	and.w	r3, r3, #1
 8009c4e:	2b01      	cmp	r3, #1
 8009c50:	d105      	bne.n	8009c5e <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	691b      	ldr	r3, [r3, #16]
 8009c56:	f023 0201 	bic.w	r2, r3, #1
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	611a      	str	r2, [r3, #16]
  }
}
 8009c5e:	bf00      	nop
 8009c60:	3714      	adds	r7, #20
 8009c62:	46bd      	mov	sp, r7
 8009c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c68:	4770      	bx	lr
 8009c6a:	bf00      	nop
 8009c6c:	40012c00 	.word	0x40012c00
 8009c70:	40000400 	.word	0x40000400
 8009c74:	40000800 	.word	0x40000800
 8009c78:	40013400 	.word	0x40013400
 8009c7c:	40014000 	.word	0x40014000
 8009c80:	40014400 	.word	0x40014400
 8009c84:	40014800 	.word	0x40014800

08009c88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009c88:	b480      	push	{r7}
 8009c8a:	b087      	sub	sp, #28
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
 8009c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	6a1b      	ldr	r3, [r3, #32]
 8009c96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	6a1b      	ldr	r3, [r3, #32]
 8009c9c:	f023 0201 	bic.w	r2, r3, #1
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	685b      	ldr	r3, [r3, #4]
 8009ca8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	699b      	ldr	r3, [r3, #24]
 8009cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009cb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009cba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	f023 0303 	bic.w	r3, r3, #3
 8009cc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	68fa      	ldr	r2, [r7, #12]
 8009cca:	4313      	orrs	r3, r2
 8009ccc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009cce:	697b      	ldr	r3, [r7, #20]
 8009cd0:	f023 0302 	bic.w	r3, r3, #2
 8009cd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	689b      	ldr	r3, [r3, #8]
 8009cda:	697a      	ldr	r2, [r7, #20]
 8009cdc:	4313      	orrs	r3, r2
 8009cde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	4a2c      	ldr	r2, [pc, #176]	@ (8009d94 <TIM_OC1_SetConfig+0x10c>)
 8009ce4:	4293      	cmp	r3, r2
 8009ce6:	d00f      	beq.n	8009d08 <TIM_OC1_SetConfig+0x80>
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	4a2b      	ldr	r2, [pc, #172]	@ (8009d98 <TIM_OC1_SetConfig+0x110>)
 8009cec:	4293      	cmp	r3, r2
 8009cee:	d00b      	beq.n	8009d08 <TIM_OC1_SetConfig+0x80>
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	4a2a      	ldr	r2, [pc, #168]	@ (8009d9c <TIM_OC1_SetConfig+0x114>)
 8009cf4:	4293      	cmp	r3, r2
 8009cf6:	d007      	beq.n	8009d08 <TIM_OC1_SetConfig+0x80>
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	4a29      	ldr	r2, [pc, #164]	@ (8009da0 <TIM_OC1_SetConfig+0x118>)
 8009cfc:	4293      	cmp	r3, r2
 8009cfe:	d003      	beq.n	8009d08 <TIM_OC1_SetConfig+0x80>
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	4a28      	ldr	r2, [pc, #160]	@ (8009da4 <TIM_OC1_SetConfig+0x11c>)
 8009d04:	4293      	cmp	r3, r2
 8009d06:	d10c      	bne.n	8009d22 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009d08:	697b      	ldr	r3, [r7, #20]
 8009d0a:	f023 0308 	bic.w	r3, r3, #8
 8009d0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	68db      	ldr	r3, [r3, #12]
 8009d14:	697a      	ldr	r2, [r7, #20]
 8009d16:	4313      	orrs	r3, r2
 8009d18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009d1a:	697b      	ldr	r3, [r7, #20]
 8009d1c:	f023 0304 	bic.w	r3, r3, #4
 8009d20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	4a1b      	ldr	r2, [pc, #108]	@ (8009d94 <TIM_OC1_SetConfig+0x10c>)
 8009d26:	4293      	cmp	r3, r2
 8009d28:	d00f      	beq.n	8009d4a <TIM_OC1_SetConfig+0xc2>
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	4a1a      	ldr	r2, [pc, #104]	@ (8009d98 <TIM_OC1_SetConfig+0x110>)
 8009d2e:	4293      	cmp	r3, r2
 8009d30:	d00b      	beq.n	8009d4a <TIM_OC1_SetConfig+0xc2>
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	4a19      	ldr	r2, [pc, #100]	@ (8009d9c <TIM_OC1_SetConfig+0x114>)
 8009d36:	4293      	cmp	r3, r2
 8009d38:	d007      	beq.n	8009d4a <TIM_OC1_SetConfig+0xc2>
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	4a18      	ldr	r2, [pc, #96]	@ (8009da0 <TIM_OC1_SetConfig+0x118>)
 8009d3e:	4293      	cmp	r3, r2
 8009d40:	d003      	beq.n	8009d4a <TIM_OC1_SetConfig+0xc2>
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	4a17      	ldr	r2, [pc, #92]	@ (8009da4 <TIM_OC1_SetConfig+0x11c>)
 8009d46:	4293      	cmp	r3, r2
 8009d48:	d111      	bne.n	8009d6e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009d4a:	693b      	ldr	r3, [r7, #16]
 8009d4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009d50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009d52:	693b      	ldr	r3, [r7, #16]
 8009d54:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009d58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	695b      	ldr	r3, [r3, #20]
 8009d5e:	693a      	ldr	r2, [r7, #16]
 8009d60:	4313      	orrs	r3, r2
 8009d62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	699b      	ldr	r3, [r3, #24]
 8009d68:	693a      	ldr	r2, [r7, #16]
 8009d6a:	4313      	orrs	r3, r2
 8009d6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	693a      	ldr	r2, [r7, #16]
 8009d72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	68fa      	ldr	r2, [r7, #12]
 8009d78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	685a      	ldr	r2, [r3, #4]
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	697a      	ldr	r2, [r7, #20]
 8009d86:	621a      	str	r2, [r3, #32]
}
 8009d88:	bf00      	nop
 8009d8a:	371c      	adds	r7, #28
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d92:	4770      	bx	lr
 8009d94:	40012c00 	.word	0x40012c00
 8009d98:	40013400 	.word	0x40013400
 8009d9c:	40014000 	.word	0x40014000
 8009da0:	40014400 	.word	0x40014400
 8009da4:	40014800 	.word	0x40014800

08009da8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009da8:	b480      	push	{r7}
 8009daa:	b087      	sub	sp, #28
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
 8009db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6a1b      	ldr	r3, [r3, #32]
 8009db6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	6a1b      	ldr	r3, [r3, #32]
 8009dbc:	f023 0210 	bic.w	r2, r3, #16
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	685b      	ldr	r3, [r3, #4]
 8009dc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	699b      	ldr	r3, [r3, #24]
 8009dce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009dd6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009dda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009de2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	021b      	lsls	r3, r3, #8
 8009dea:	68fa      	ldr	r2, [r7, #12]
 8009dec:	4313      	orrs	r3, r2
 8009dee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009df0:	697b      	ldr	r3, [r7, #20]
 8009df2:	f023 0320 	bic.w	r3, r3, #32
 8009df6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	689b      	ldr	r3, [r3, #8]
 8009dfc:	011b      	lsls	r3, r3, #4
 8009dfe:	697a      	ldr	r2, [r7, #20]
 8009e00:	4313      	orrs	r3, r2
 8009e02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	4a28      	ldr	r2, [pc, #160]	@ (8009ea8 <TIM_OC2_SetConfig+0x100>)
 8009e08:	4293      	cmp	r3, r2
 8009e0a:	d003      	beq.n	8009e14 <TIM_OC2_SetConfig+0x6c>
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	4a27      	ldr	r2, [pc, #156]	@ (8009eac <TIM_OC2_SetConfig+0x104>)
 8009e10:	4293      	cmp	r3, r2
 8009e12:	d10d      	bne.n	8009e30 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009e14:	697b      	ldr	r3, [r7, #20]
 8009e16:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009e1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	68db      	ldr	r3, [r3, #12]
 8009e20:	011b      	lsls	r3, r3, #4
 8009e22:	697a      	ldr	r2, [r7, #20]
 8009e24:	4313      	orrs	r3, r2
 8009e26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009e28:	697b      	ldr	r3, [r7, #20]
 8009e2a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009e2e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	4a1d      	ldr	r2, [pc, #116]	@ (8009ea8 <TIM_OC2_SetConfig+0x100>)
 8009e34:	4293      	cmp	r3, r2
 8009e36:	d00f      	beq.n	8009e58 <TIM_OC2_SetConfig+0xb0>
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	4a1c      	ldr	r2, [pc, #112]	@ (8009eac <TIM_OC2_SetConfig+0x104>)
 8009e3c:	4293      	cmp	r3, r2
 8009e3e:	d00b      	beq.n	8009e58 <TIM_OC2_SetConfig+0xb0>
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	4a1b      	ldr	r2, [pc, #108]	@ (8009eb0 <TIM_OC2_SetConfig+0x108>)
 8009e44:	4293      	cmp	r3, r2
 8009e46:	d007      	beq.n	8009e58 <TIM_OC2_SetConfig+0xb0>
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	4a1a      	ldr	r2, [pc, #104]	@ (8009eb4 <TIM_OC2_SetConfig+0x10c>)
 8009e4c:	4293      	cmp	r3, r2
 8009e4e:	d003      	beq.n	8009e58 <TIM_OC2_SetConfig+0xb0>
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	4a19      	ldr	r2, [pc, #100]	@ (8009eb8 <TIM_OC2_SetConfig+0x110>)
 8009e54:	4293      	cmp	r3, r2
 8009e56:	d113      	bne.n	8009e80 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009e58:	693b      	ldr	r3, [r7, #16]
 8009e5a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009e5e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009e60:	693b      	ldr	r3, [r7, #16]
 8009e62:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009e66:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	695b      	ldr	r3, [r3, #20]
 8009e6c:	009b      	lsls	r3, r3, #2
 8009e6e:	693a      	ldr	r2, [r7, #16]
 8009e70:	4313      	orrs	r3, r2
 8009e72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	699b      	ldr	r3, [r3, #24]
 8009e78:	009b      	lsls	r3, r3, #2
 8009e7a:	693a      	ldr	r2, [r7, #16]
 8009e7c:	4313      	orrs	r3, r2
 8009e7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	693a      	ldr	r2, [r7, #16]
 8009e84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	68fa      	ldr	r2, [r7, #12]
 8009e8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	685a      	ldr	r2, [r3, #4]
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	697a      	ldr	r2, [r7, #20]
 8009e98:	621a      	str	r2, [r3, #32]
}
 8009e9a:	bf00      	nop
 8009e9c:	371c      	adds	r7, #28
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea4:	4770      	bx	lr
 8009ea6:	bf00      	nop
 8009ea8:	40012c00 	.word	0x40012c00
 8009eac:	40013400 	.word	0x40013400
 8009eb0:	40014000 	.word	0x40014000
 8009eb4:	40014400 	.word	0x40014400
 8009eb8:	40014800 	.word	0x40014800

08009ebc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009ebc:	b480      	push	{r7}
 8009ebe:	b087      	sub	sp, #28
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
 8009ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	6a1b      	ldr	r3, [r3, #32]
 8009eca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	6a1b      	ldr	r3, [r3, #32]
 8009ed0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	685b      	ldr	r3, [r3, #4]
 8009edc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	69db      	ldr	r3, [r3, #28]
 8009ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009eea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009eee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	f023 0303 	bic.w	r3, r3, #3
 8009ef6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	68fa      	ldr	r2, [r7, #12]
 8009efe:	4313      	orrs	r3, r2
 8009f00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009f02:	697b      	ldr	r3, [r7, #20]
 8009f04:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009f08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009f0a:	683b      	ldr	r3, [r7, #0]
 8009f0c:	689b      	ldr	r3, [r3, #8]
 8009f0e:	021b      	lsls	r3, r3, #8
 8009f10:	697a      	ldr	r2, [r7, #20]
 8009f12:	4313      	orrs	r3, r2
 8009f14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	4a27      	ldr	r2, [pc, #156]	@ (8009fb8 <TIM_OC3_SetConfig+0xfc>)
 8009f1a:	4293      	cmp	r3, r2
 8009f1c:	d003      	beq.n	8009f26 <TIM_OC3_SetConfig+0x6a>
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	4a26      	ldr	r2, [pc, #152]	@ (8009fbc <TIM_OC3_SetConfig+0x100>)
 8009f22:	4293      	cmp	r3, r2
 8009f24:	d10d      	bne.n	8009f42 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009f26:	697b      	ldr	r3, [r7, #20]
 8009f28:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009f2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	68db      	ldr	r3, [r3, #12]
 8009f32:	021b      	lsls	r3, r3, #8
 8009f34:	697a      	ldr	r2, [r7, #20]
 8009f36:	4313      	orrs	r3, r2
 8009f38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009f3a:	697b      	ldr	r3, [r7, #20]
 8009f3c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009f40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	4a1c      	ldr	r2, [pc, #112]	@ (8009fb8 <TIM_OC3_SetConfig+0xfc>)
 8009f46:	4293      	cmp	r3, r2
 8009f48:	d00f      	beq.n	8009f6a <TIM_OC3_SetConfig+0xae>
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	4a1b      	ldr	r2, [pc, #108]	@ (8009fbc <TIM_OC3_SetConfig+0x100>)
 8009f4e:	4293      	cmp	r3, r2
 8009f50:	d00b      	beq.n	8009f6a <TIM_OC3_SetConfig+0xae>
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	4a1a      	ldr	r2, [pc, #104]	@ (8009fc0 <TIM_OC3_SetConfig+0x104>)
 8009f56:	4293      	cmp	r3, r2
 8009f58:	d007      	beq.n	8009f6a <TIM_OC3_SetConfig+0xae>
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	4a19      	ldr	r2, [pc, #100]	@ (8009fc4 <TIM_OC3_SetConfig+0x108>)
 8009f5e:	4293      	cmp	r3, r2
 8009f60:	d003      	beq.n	8009f6a <TIM_OC3_SetConfig+0xae>
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	4a18      	ldr	r2, [pc, #96]	@ (8009fc8 <TIM_OC3_SetConfig+0x10c>)
 8009f66:	4293      	cmp	r3, r2
 8009f68:	d113      	bne.n	8009f92 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009f6a:	693b      	ldr	r3, [r7, #16]
 8009f6c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009f70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009f72:	693b      	ldr	r3, [r7, #16]
 8009f74:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009f78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	695b      	ldr	r3, [r3, #20]
 8009f7e:	011b      	lsls	r3, r3, #4
 8009f80:	693a      	ldr	r2, [r7, #16]
 8009f82:	4313      	orrs	r3, r2
 8009f84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009f86:	683b      	ldr	r3, [r7, #0]
 8009f88:	699b      	ldr	r3, [r3, #24]
 8009f8a:	011b      	lsls	r3, r3, #4
 8009f8c:	693a      	ldr	r2, [r7, #16]
 8009f8e:	4313      	orrs	r3, r2
 8009f90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	693a      	ldr	r2, [r7, #16]
 8009f96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	68fa      	ldr	r2, [r7, #12]
 8009f9c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	685a      	ldr	r2, [r3, #4]
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	697a      	ldr	r2, [r7, #20]
 8009faa:	621a      	str	r2, [r3, #32]
}
 8009fac:	bf00      	nop
 8009fae:	371c      	adds	r7, #28
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb6:	4770      	bx	lr
 8009fb8:	40012c00 	.word	0x40012c00
 8009fbc:	40013400 	.word	0x40013400
 8009fc0:	40014000 	.word	0x40014000
 8009fc4:	40014400 	.word	0x40014400
 8009fc8:	40014800 	.word	0x40014800

08009fcc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009fcc:	b480      	push	{r7}
 8009fce:	b087      	sub	sp, #28
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
 8009fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	6a1b      	ldr	r3, [r3, #32]
 8009fda:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	6a1b      	ldr	r3, [r3, #32]
 8009fe0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	685b      	ldr	r3, [r3, #4]
 8009fec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	69db      	ldr	r3, [r3, #28]
 8009ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009ffa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009ffe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a006:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	021b      	lsls	r3, r3, #8
 800a00e:	68fa      	ldr	r2, [r7, #12]
 800a010:	4313      	orrs	r3, r2
 800a012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a014:	697b      	ldr	r3, [r7, #20]
 800a016:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a01a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	689b      	ldr	r3, [r3, #8]
 800a020:	031b      	lsls	r3, r3, #12
 800a022:	697a      	ldr	r2, [r7, #20]
 800a024:	4313      	orrs	r3, r2
 800a026:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	4a28      	ldr	r2, [pc, #160]	@ (800a0cc <TIM_OC4_SetConfig+0x100>)
 800a02c:	4293      	cmp	r3, r2
 800a02e:	d003      	beq.n	800a038 <TIM_OC4_SetConfig+0x6c>
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	4a27      	ldr	r2, [pc, #156]	@ (800a0d0 <TIM_OC4_SetConfig+0x104>)
 800a034:	4293      	cmp	r3, r2
 800a036:	d10d      	bne.n	800a054 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800a038:	697b      	ldr	r3, [r7, #20]
 800a03a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a03e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	68db      	ldr	r3, [r3, #12]
 800a044:	031b      	lsls	r3, r3, #12
 800a046:	697a      	ldr	r2, [r7, #20]
 800a048:	4313      	orrs	r3, r2
 800a04a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800a04c:	697b      	ldr	r3, [r7, #20]
 800a04e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a052:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	4a1d      	ldr	r2, [pc, #116]	@ (800a0cc <TIM_OC4_SetConfig+0x100>)
 800a058:	4293      	cmp	r3, r2
 800a05a:	d00f      	beq.n	800a07c <TIM_OC4_SetConfig+0xb0>
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	4a1c      	ldr	r2, [pc, #112]	@ (800a0d0 <TIM_OC4_SetConfig+0x104>)
 800a060:	4293      	cmp	r3, r2
 800a062:	d00b      	beq.n	800a07c <TIM_OC4_SetConfig+0xb0>
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	4a1b      	ldr	r2, [pc, #108]	@ (800a0d4 <TIM_OC4_SetConfig+0x108>)
 800a068:	4293      	cmp	r3, r2
 800a06a:	d007      	beq.n	800a07c <TIM_OC4_SetConfig+0xb0>
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	4a1a      	ldr	r2, [pc, #104]	@ (800a0d8 <TIM_OC4_SetConfig+0x10c>)
 800a070:	4293      	cmp	r3, r2
 800a072:	d003      	beq.n	800a07c <TIM_OC4_SetConfig+0xb0>
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	4a19      	ldr	r2, [pc, #100]	@ (800a0dc <TIM_OC4_SetConfig+0x110>)
 800a078:	4293      	cmp	r3, r2
 800a07a:	d113      	bne.n	800a0a4 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a07c:	693b      	ldr	r3, [r7, #16]
 800a07e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a082:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800a084:	693b      	ldr	r3, [r7, #16]
 800a086:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a08a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	695b      	ldr	r3, [r3, #20]
 800a090:	019b      	lsls	r3, r3, #6
 800a092:	693a      	ldr	r2, [r7, #16]
 800a094:	4313      	orrs	r3, r2
 800a096:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	699b      	ldr	r3, [r3, #24]
 800a09c:	019b      	lsls	r3, r3, #6
 800a09e:	693a      	ldr	r2, [r7, #16]
 800a0a0:	4313      	orrs	r3, r2
 800a0a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	693a      	ldr	r2, [r7, #16]
 800a0a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	68fa      	ldr	r2, [r7, #12]
 800a0ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	685a      	ldr	r2, [r3, #4]
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	697a      	ldr	r2, [r7, #20]
 800a0bc:	621a      	str	r2, [r3, #32]
}
 800a0be:	bf00      	nop
 800a0c0:	371c      	adds	r7, #28
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c8:	4770      	bx	lr
 800a0ca:	bf00      	nop
 800a0cc:	40012c00 	.word	0x40012c00
 800a0d0:	40013400 	.word	0x40013400
 800a0d4:	40014000 	.word	0x40014000
 800a0d8:	40014400 	.word	0x40014400
 800a0dc:	40014800 	.word	0x40014800

0800a0e0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a0e0:	b480      	push	{r7}
 800a0e2:	b087      	sub	sp, #28
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
 800a0e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	6a1b      	ldr	r3, [r3, #32]
 800a0ee:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	6a1b      	ldr	r3, [r3, #32]
 800a0f4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	685b      	ldr	r3, [r3, #4]
 800a100:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a10e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a112:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	68fa      	ldr	r2, [r7, #12]
 800a11a:	4313      	orrs	r3, r2
 800a11c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a11e:	693b      	ldr	r3, [r7, #16]
 800a120:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800a124:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a126:	683b      	ldr	r3, [r7, #0]
 800a128:	689b      	ldr	r3, [r3, #8]
 800a12a:	041b      	lsls	r3, r3, #16
 800a12c:	693a      	ldr	r2, [r7, #16]
 800a12e:	4313      	orrs	r3, r2
 800a130:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	4a17      	ldr	r2, [pc, #92]	@ (800a194 <TIM_OC5_SetConfig+0xb4>)
 800a136:	4293      	cmp	r3, r2
 800a138:	d00f      	beq.n	800a15a <TIM_OC5_SetConfig+0x7a>
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	4a16      	ldr	r2, [pc, #88]	@ (800a198 <TIM_OC5_SetConfig+0xb8>)
 800a13e:	4293      	cmp	r3, r2
 800a140:	d00b      	beq.n	800a15a <TIM_OC5_SetConfig+0x7a>
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	4a15      	ldr	r2, [pc, #84]	@ (800a19c <TIM_OC5_SetConfig+0xbc>)
 800a146:	4293      	cmp	r3, r2
 800a148:	d007      	beq.n	800a15a <TIM_OC5_SetConfig+0x7a>
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	4a14      	ldr	r2, [pc, #80]	@ (800a1a0 <TIM_OC5_SetConfig+0xc0>)
 800a14e:	4293      	cmp	r3, r2
 800a150:	d003      	beq.n	800a15a <TIM_OC5_SetConfig+0x7a>
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	4a13      	ldr	r2, [pc, #76]	@ (800a1a4 <TIM_OC5_SetConfig+0xc4>)
 800a156:	4293      	cmp	r3, r2
 800a158:	d109      	bne.n	800a16e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a15a:	697b      	ldr	r3, [r7, #20]
 800a15c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a160:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a162:	683b      	ldr	r3, [r7, #0]
 800a164:	695b      	ldr	r3, [r3, #20]
 800a166:	021b      	lsls	r3, r3, #8
 800a168:	697a      	ldr	r2, [r7, #20]
 800a16a:	4313      	orrs	r3, r2
 800a16c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	697a      	ldr	r2, [r7, #20]
 800a172:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	68fa      	ldr	r2, [r7, #12]
 800a178:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	685a      	ldr	r2, [r3, #4]
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	693a      	ldr	r2, [r7, #16]
 800a186:	621a      	str	r2, [r3, #32]
}
 800a188:	bf00      	nop
 800a18a:	371c      	adds	r7, #28
 800a18c:	46bd      	mov	sp, r7
 800a18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a192:	4770      	bx	lr
 800a194:	40012c00 	.word	0x40012c00
 800a198:	40013400 	.word	0x40013400
 800a19c:	40014000 	.word	0x40014000
 800a1a0:	40014400 	.word	0x40014400
 800a1a4:	40014800 	.word	0x40014800

0800a1a8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a1a8:	b480      	push	{r7}
 800a1aa:	b087      	sub	sp, #28
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
 800a1b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	6a1b      	ldr	r3, [r3, #32]
 800a1b6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	6a1b      	ldr	r3, [r3, #32]
 800a1bc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	685b      	ldr	r3, [r3, #4]
 800a1c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a1ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a1d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a1da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	021b      	lsls	r3, r3, #8
 800a1e2:	68fa      	ldr	r2, [r7, #12]
 800a1e4:	4313      	orrs	r3, r2
 800a1e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a1e8:	693b      	ldr	r3, [r7, #16]
 800a1ea:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a1ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a1f0:	683b      	ldr	r3, [r7, #0]
 800a1f2:	689b      	ldr	r3, [r3, #8]
 800a1f4:	051b      	lsls	r3, r3, #20
 800a1f6:	693a      	ldr	r2, [r7, #16]
 800a1f8:	4313      	orrs	r3, r2
 800a1fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	4a18      	ldr	r2, [pc, #96]	@ (800a260 <TIM_OC6_SetConfig+0xb8>)
 800a200:	4293      	cmp	r3, r2
 800a202:	d00f      	beq.n	800a224 <TIM_OC6_SetConfig+0x7c>
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	4a17      	ldr	r2, [pc, #92]	@ (800a264 <TIM_OC6_SetConfig+0xbc>)
 800a208:	4293      	cmp	r3, r2
 800a20a:	d00b      	beq.n	800a224 <TIM_OC6_SetConfig+0x7c>
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	4a16      	ldr	r2, [pc, #88]	@ (800a268 <TIM_OC6_SetConfig+0xc0>)
 800a210:	4293      	cmp	r3, r2
 800a212:	d007      	beq.n	800a224 <TIM_OC6_SetConfig+0x7c>
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	4a15      	ldr	r2, [pc, #84]	@ (800a26c <TIM_OC6_SetConfig+0xc4>)
 800a218:	4293      	cmp	r3, r2
 800a21a:	d003      	beq.n	800a224 <TIM_OC6_SetConfig+0x7c>
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	4a14      	ldr	r2, [pc, #80]	@ (800a270 <TIM_OC6_SetConfig+0xc8>)
 800a220:	4293      	cmp	r3, r2
 800a222:	d109      	bne.n	800a238 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a224:	697b      	ldr	r3, [r7, #20]
 800a226:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a22a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a22c:	683b      	ldr	r3, [r7, #0]
 800a22e:	695b      	ldr	r3, [r3, #20]
 800a230:	029b      	lsls	r3, r3, #10
 800a232:	697a      	ldr	r2, [r7, #20]
 800a234:	4313      	orrs	r3, r2
 800a236:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	697a      	ldr	r2, [r7, #20]
 800a23c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	68fa      	ldr	r2, [r7, #12]
 800a242:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	685a      	ldr	r2, [r3, #4]
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	693a      	ldr	r2, [r7, #16]
 800a250:	621a      	str	r2, [r3, #32]
}
 800a252:	bf00      	nop
 800a254:	371c      	adds	r7, #28
 800a256:	46bd      	mov	sp, r7
 800a258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25c:	4770      	bx	lr
 800a25e:	bf00      	nop
 800a260:	40012c00 	.word	0x40012c00
 800a264:	40013400 	.word	0x40013400
 800a268:	40014000 	.word	0x40014000
 800a26c:	40014400 	.word	0x40014400
 800a270:	40014800 	.word	0x40014800

0800a274 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800a274:	b480      	push	{r7}
 800a276:	b087      	sub	sp, #28
 800a278:	af00      	add	r7, sp, #0
 800a27a:	60f8      	str	r0, [r7, #12]
 800a27c:	60b9      	str	r1, [r7, #8]
 800a27e:	607a      	str	r2, [r7, #4]
 800a280:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	6a1b      	ldr	r3, [r3, #32]
 800a286:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	6a1b      	ldr	r3, [r3, #32]
 800a28c:	f023 0201 	bic.w	r2, r3, #1
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	699b      	ldr	r3, [r3, #24]
 800a298:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	4a24      	ldr	r2, [pc, #144]	@ (800a330 <TIM_TI1_SetConfig+0xbc>)
 800a29e:	4293      	cmp	r3, r2
 800a2a0:	d013      	beq.n	800a2ca <TIM_TI1_SetConfig+0x56>
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a2a8:	d00f      	beq.n	800a2ca <TIM_TI1_SetConfig+0x56>
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	4a21      	ldr	r2, [pc, #132]	@ (800a334 <TIM_TI1_SetConfig+0xc0>)
 800a2ae:	4293      	cmp	r3, r2
 800a2b0:	d00b      	beq.n	800a2ca <TIM_TI1_SetConfig+0x56>
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	4a20      	ldr	r2, [pc, #128]	@ (800a338 <TIM_TI1_SetConfig+0xc4>)
 800a2b6:	4293      	cmp	r3, r2
 800a2b8:	d007      	beq.n	800a2ca <TIM_TI1_SetConfig+0x56>
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	4a1f      	ldr	r2, [pc, #124]	@ (800a33c <TIM_TI1_SetConfig+0xc8>)
 800a2be:	4293      	cmp	r3, r2
 800a2c0:	d003      	beq.n	800a2ca <TIM_TI1_SetConfig+0x56>
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	4a1e      	ldr	r2, [pc, #120]	@ (800a340 <TIM_TI1_SetConfig+0xcc>)
 800a2c6:	4293      	cmp	r3, r2
 800a2c8:	d101      	bne.n	800a2ce <TIM_TI1_SetConfig+0x5a>
 800a2ca:	2301      	movs	r3, #1
 800a2cc:	e000      	b.n	800a2d0 <TIM_TI1_SetConfig+0x5c>
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d008      	beq.n	800a2e6 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800a2d4:	697b      	ldr	r3, [r7, #20]
 800a2d6:	f023 0303 	bic.w	r3, r3, #3
 800a2da:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800a2dc:	697a      	ldr	r2, [r7, #20]
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	4313      	orrs	r3, r2
 800a2e2:	617b      	str	r3, [r7, #20]
 800a2e4:	e003      	b.n	800a2ee <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800a2e6:	697b      	ldr	r3, [r7, #20]
 800a2e8:	f043 0301 	orr.w	r3, r3, #1
 800a2ec:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a2ee:	697b      	ldr	r3, [r7, #20]
 800a2f0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a2f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a2f6:	683b      	ldr	r3, [r7, #0]
 800a2f8:	011b      	lsls	r3, r3, #4
 800a2fa:	b2db      	uxtb	r3, r3
 800a2fc:	697a      	ldr	r2, [r7, #20]
 800a2fe:	4313      	orrs	r3, r2
 800a300:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a302:	693b      	ldr	r3, [r7, #16]
 800a304:	f023 030a 	bic.w	r3, r3, #10
 800a308:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800a30a:	68bb      	ldr	r3, [r7, #8]
 800a30c:	f003 030a 	and.w	r3, r3, #10
 800a310:	693a      	ldr	r2, [r7, #16]
 800a312:	4313      	orrs	r3, r2
 800a314:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	697a      	ldr	r2, [r7, #20]
 800a31a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	693a      	ldr	r2, [r7, #16]
 800a320:	621a      	str	r2, [r3, #32]
}
 800a322:	bf00      	nop
 800a324:	371c      	adds	r7, #28
 800a326:	46bd      	mov	sp, r7
 800a328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32c:	4770      	bx	lr
 800a32e:	bf00      	nop
 800a330:	40012c00 	.word	0x40012c00
 800a334:	40000400 	.word	0x40000400
 800a338:	40000800 	.word	0x40000800
 800a33c:	40013400 	.word	0x40013400
 800a340:	40014000 	.word	0x40014000

0800a344 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a344:	b480      	push	{r7}
 800a346:	b087      	sub	sp, #28
 800a348:	af00      	add	r7, sp, #0
 800a34a:	60f8      	str	r0, [r7, #12]
 800a34c:	60b9      	str	r1, [r7, #8]
 800a34e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	6a1b      	ldr	r3, [r3, #32]
 800a354:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	6a1b      	ldr	r3, [r3, #32]
 800a35a:	f023 0201 	bic.w	r2, r3, #1
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	699b      	ldr	r3, [r3, #24]
 800a366:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a368:	693b      	ldr	r3, [r7, #16]
 800a36a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a36e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	011b      	lsls	r3, r3, #4
 800a374:	693a      	ldr	r2, [r7, #16]
 800a376:	4313      	orrs	r3, r2
 800a378:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a37a:	697b      	ldr	r3, [r7, #20]
 800a37c:	f023 030a 	bic.w	r3, r3, #10
 800a380:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a382:	697a      	ldr	r2, [r7, #20]
 800a384:	68bb      	ldr	r3, [r7, #8]
 800a386:	4313      	orrs	r3, r2
 800a388:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	693a      	ldr	r2, [r7, #16]
 800a38e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	697a      	ldr	r2, [r7, #20]
 800a394:	621a      	str	r2, [r3, #32]
}
 800a396:	bf00      	nop
 800a398:	371c      	adds	r7, #28
 800a39a:	46bd      	mov	sp, r7
 800a39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a0:	4770      	bx	lr

0800a3a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a3a2:	b480      	push	{r7}
 800a3a4:	b087      	sub	sp, #28
 800a3a6:	af00      	add	r7, sp, #0
 800a3a8:	60f8      	str	r0, [r7, #12]
 800a3aa:	60b9      	str	r1, [r7, #8]
 800a3ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	6a1b      	ldr	r3, [r3, #32]
 800a3b2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	6a1b      	ldr	r3, [r3, #32]
 800a3b8:	f023 0210 	bic.w	r2, r3, #16
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	699b      	ldr	r3, [r3, #24]
 800a3c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a3c6:	693b      	ldr	r3, [r7, #16]
 800a3c8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a3cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	031b      	lsls	r3, r3, #12
 800a3d2:	693a      	ldr	r2, [r7, #16]
 800a3d4:	4313      	orrs	r3, r2
 800a3d6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a3d8:	697b      	ldr	r3, [r7, #20]
 800a3da:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a3de:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a3e0:	68bb      	ldr	r3, [r7, #8]
 800a3e2:	011b      	lsls	r3, r3, #4
 800a3e4:	697a      	ldr	r2, [r7, #20]
 800a3e6:	4313      	orrs	r3, r2
 800a3e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	693a      	ldr	r2, [r7, #16]
 800a3ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	697a      	ldr	r2, [r7, #20]
 800a3f4:	621a      	str	r2, [r3, #32]
}
 800a3f6:	bf00      	nop
 800a3f8:	371c      	adds	r7, #28
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a400:	4770      	bx	lr

0800a402 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a402:	b480      	push	{r7}
 800a404:	b085      	sub	sp, #20
 800a406:	af00      	add	r7, sp, #0
 800a408:	6078      	str	r0, [r7, #4]
 800a40a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	689b      	ldr	r3, [r3, #8]
 800a410:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800a418:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a41c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a41e:	683a      	ldr	r2, [r7, #0]
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	4313      	orrs	r3, r2
 800a424:	f043 0307 	orr.w	r3, r3, #7
 800a428:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	68fa      	ldr	r2, [r7, #12]
 800a42e:	609a      	str	r2, [r3, #8]
}
 800a430:	bf00      	nop
 800a432:	3714      	adds	r7, #20
 800a434:	46bd      	mov	sp, r7
 800a436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43a:	4770      	bx	lr

0800a43c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a43c:	b480      	push	{r7}
 800a43e:	b087      	sub	sp, #28
 800a440:	af00      	add	r7, sp, #0
 800a442:	60f8      	str	r0, [r7, #12]
 800a444:	60b9      	str	r1, [r7, #8]
 800a446:	607a      	str	r2, [r7, #4]
 800a448:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	689b      	ldr	r3, [r3, #8]
 800a44e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a450:	697b      	ldr	r3, [r7, #20]
 800a452:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a456:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	021a      	lsls	r2, r3, #8
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	431a      	orrs	r2, r3
 800a460:	68bb      	ldr	r3, [r7, #8]
 800a462:	4313      	orrs	r3, r2
 800a464:	697a      	ldr	r2, [r7, #20]
 800a466:	4313      	orrs	r3, r2
 800a468:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	697a      	ldr	r2, [r7, #20]
 800a46e:	609a      	str	r2, [r3, #8]
}
 800a470:	bf00      	nop
 800a472:	371c      	adds	r7, #28
 800a474:	46bd      	mov	sp, r7
 800a476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47a:	4770      	bx	lr

0800a47c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a47c:	b480      	push	{r7}
 800a47e:	b087      	sub	sp, #28
 800a480:	af00      	add	r7, sp, #0
 800a482:	60f8      	str	r0, [r7, #12]
 800a484:	60b9      	str	r1, [r7, #8]
 800a486:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a488:	68bb      	ldr	r3, [r7, #8]
 800a48a:	f003 031f 	and.w	r3, r3, #31
 800a48e:	2201      	movs	r2, #1
 800a490:	fa02 f303 	lsl.w	r3, r2, r3
 800a494:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	6a1a      	ldr	r2, [r3, #32]
 800a49a:	697b      	ldr	r3, [r7, #20]
 800a49c:	43db      	mvns	r3, r3
 800a49e:	401a      	ands	r2, r3
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	6a1a      	ldr	r2, [r3, #32]
 800a4a8:	68bb      	ldr	r3, [r7, #8]
 800a4aa:	f003 031f 	and.w	r3, r3, #31
 800a4ae:	6879      	ldr	r1, [r7, #4]
 800a4b0:	fa01 f303 	lsl.w	r3, r1, r3
 800a4b4:	431a      	orrs	r2, r3
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	621a      	str	r2, [r3, #32]
}
 800a4ba:	bf00      	nop
 800a4bc:	371c      	adds	r7, #28
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c4:	4770      	bx	lr

0800a4c6 <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, const TIM_HallSensor_InitTypeDef *sConfig)
{
 800a4c6:	b580      	push	{r7, lr}
 800a4c8:	b08a      	sub	sp, #40	@ 0x28
 800a4ca:	af00      	add	r7, sp, #0
 800a4cc:	6078      	str	r0, [r7, #4]
 800a4ce:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d101      	bne.n	800a4da <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 800a4d6:	2301      	movs	r3, #1
 800a4d8:	e0a0      	b.n	800a61c <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a4e0:	b2db      	uxtb	r3, r3
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d106      	bne.n	800a4f4 <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	f000 f898 	bl	800a624 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2202      	movs	r2, #2
 800a4f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681a      	ldr	r2, [r3, #0]
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	3304      	adds	r3, #4
 800a504:	4619      	mov	r1, r3
 800a506:	4610      	mov	r0, r2
 800a508:	f7ff fb22 	bl	8009b50 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	6818      	ldr	r0, [r3, #0]
 800a510:	683b      	ldr	r3, [r7, #0]
 800a512:	6819      	ldr	r1, [r3, #0]
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	689b      	ldr	r3, [r3, #8]
 800a518:	2203      	movs	r2, #3
 800a51a:	f7ff feab 	bl	800a274 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	699a      	ldr	r2, [r3, #24]
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	f022 020c 	bic.w	r2, r2, #12
 800a52c:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	6999      	ldr	r1, [r3, #24]
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	685a      	ldr	r2, [r3, #4]
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	430a      	orrs	r2, r1
 800a53e:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	685a      	ldr	r2, [r3, #4]
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800a54e:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	689b      	ldr	r3, [r3, #8]
 800a556:	687a      	ldr	r2, [r7, #4]
 800a558:	6812      	ldr	r2, [r2, #0]
 800a55a:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800a55e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a562:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	689a      	ldr	r2, [r3, #8]
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a572:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	689b      	ldr	r3, [r3, #8]
 800a57a:	687a      	ldr	r2, [r7, #4]
 800a57c:	6812      	ldr	r2, [r2, #0]
 800a57e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a582:	f023 0307 	bic.w	r3, r3, #7
 800a586:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	689a      	ldr	r2, [r3, #8]
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	f042 0204 	orr.w	r2, r2, #4
 800a596:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 800a598:	2300      	movs	r3, #0
 800a59a:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 800a59c:	2300      	movs	r3, #0
 800a59e:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 800a5a0:	2370      	movs	r3, #112	@ 0x70
 800a5a2:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	627b      	str	r3, [r7, #36]	@ 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	68db      	ldr	r3, [r3, #12]
 800a5b4:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	f107 020c 	add.w	r2, r7, #12
 800a5be:	4611      	mov	r1, r2
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	f7ff fbf1 	bl	8009da8 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	685b      	ldr	r3, [r3, #4]
 800a5cc:	687a      	ldr	r2, [r7, #4]
 800a5ce:	6812      	ldr	r2, [r2, #0]
 800a5d0:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800a5d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a5d8:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	685a      	ldr	r2, [r3, #4]
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 800a5e8:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	2201      	movs	r2, #1
 800a5ee:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	2201      	movs	r2, #1
 800a5f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	2201      	movs	r2, #1
 800a5fe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	2201      	movs	r2, #1
 800a606:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	2201      	movs	r2, #1
 800a60e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	2201      	movs	r2, #1
 800a616:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a61a:	2300      	movs	r3, #0
}
 800a61c:	4618      	mov	r0, r3
 800a61e:	3728      	adds	r7, #40	@ 0x28
 800a620:	46bd      	mov	sp, r7
 800a622:	bd80      	pop	{r7, pc}

0800a624 <HAL_TIMEx_HallSensor_MspInit>:
  * @brief  Initializes the TIM Hall Sensor MSP.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval None
  */
__weak void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef *htim)
{
 800a624:	b480      	push	{r7}
 800a626:	b083      	sub	sp, #12
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
   */
}
 800a62c:	bf00      	nop
 800a62e:	370c      	adds	r7, #12
 800a630:	46bd      	mov	sp, r7
 800a632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a636:	4770      	bx	lr

0800a638 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b084      	sub	sp, #16
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
 800a640:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a642:	683b      	ldr	r3, [r7, #0]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d109      	bne.n	800a65c <HAL_TIMEx_PWMN_Start+0x24>
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a64e:	b2db      	uxtb	r3, r3
 800a650:	2b01      	cmp	r3, #1
 800a652:	bf14      	ite	ne
 800a654:	2301      	movne	r3, #1
 800a656:	2300      	moveq	r3, #0
 800a658:	b2db      	uxtb	r3, r3
 800a65a:	e022      	b.n	800a6a2 <HAL_TIMEx_PWMN_Start+0x6a>
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	2b04      	cmp	r3, #4
 800a660:	d109      	bne.n	800a676 <HAL_TIMEx_PWMN_Start+0x3e>
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a668:	b2db      	uxtb	r3, r3
 800a66a:	2b01      	cmp	r3, #1
 800a66c:	bf14      	ite	ne
 800a66e:	2301      	movne	r3, #1
 800a670:	2300      	moveq	r3, #0
 800a672:	b2db      	uxtb	r3, r3
 800a674:	e015      	b.n	800a6a2 <HAL_TIMEx_PWMN_Start+0x6a>
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	2b08      	cmp	r3, #8
 800a67a:	d109      	bne.n	800a690 <HAL_TIMEx_PWMN_Start+0x58>
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800a682:	b2db      	uxtb	r3, r3
 800a684:	2b01      	cmp	r3, #1
 800a686:	bf14      	ite	ne
 800a688:	2301      	movne	r3, #1
 800a68a:	2300      	moveq	r3, #0
 800a68c:	b2db      	uxtb	r3, r3
 800a68e:	e008      	b.n	800a6a2 <HAL_TIMEx_PWMN_Start+0x6a>
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800a696:	b2db      	uxtb	r3, r3
 800a698:	2b01      	cmp	r3, #1
 800a69a:	bf14      	ite	ne
 800a69c:	2301      	movne	r3, #1
 800a69e:	2300      	moveq	r3, #0
 800a6a0:	b2db      	uxtb	r3, r3
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d001      	beq.n	800a6aa <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	e069      	b.n	800a77e <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d104      	bne.n	800a6ba <HAL_TIMEx_PWMN_Start+0x82>
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	2202      	movs	r2, #2
 800a6b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a6b8:	e013      	b.n	800a6e2 <HAL_TIMEx_PWMN_Start+0xaa>
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	2b04      	cmp	r3, #4
 800a6be:	d104      	bne.n	800a6ca <HAL_TIMEx_PWMN_Start+0x92>
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2202      	movs	r2, #2
 800a6c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a6c8:	e00b      	b.n	800a6e2 <HAL_TIMEx_PWMN_Start+0xaa>
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	2b08      	cmp	r3, #8
 800a6ce:	d104      	bne.n	800a6da <HAL_TIMEx_PWMN_Start+0xa2>
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2202      	movs	r2, #2
 800a6d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a6d8:	e003      	b.n	800a6e2 <HAL_TIMEx_PWMN_Start+0xaa>
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2202      	movs	r2, #2
 800a6de:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	2204      	movs	r2, #4
 800a6e8:	6839      	ldr	r1, [r7, #0]
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	f000 fa9c 	bl	800ac28 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a6fe:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	4a20      	ldr	r2, [pc, #128]	@ (800a788 <HAL_TIMEx_PWMN_Start+0x150>)
 800a706:	4293      	cmp	r3, r2
 800a708:	d018      	beq.n	800a73c <HAL_TIMEx_PWMN_Start+0x104>
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a712:	d013      	beq.n	800a73c <HAL_TIMEx_PWMN_Start+0x104>
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	4a1c      	ldr	r2, [pc, #112]	@ (800a78c <HAL_TIMEx_PWMN_Start+0x154>)
 800a71a:	4293      	cmp	r3, r2
 800a71c:	d00e      	beq.n	800a73c <HAL_TIMEx_PWMN_Start+0x104>
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	4a1b      	ldr	r2, [pc, #108]	@ (800a790 <HAL_TIMEx_PWMN_Start+0x158>)
 800a724:	4293      	cmp	r3, r2
 800a726:	d009      	beq.n	800a73c <HAL_TIMEx_PWMN_Start+0x104>
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	4a19      	ldr	r2, [pc, #100]	@ (800a794 <HAL_TIMEx_PWMN_Start+0x15c>)
 800a72e:	4293      	cmp	r3, r2
 800a730:	d004      	beq.n	800a73c <HAL_TIMEx_PWMN_Start+0x104>
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	4a18      	ldr	r2, [pc, #96]	@ (800a798 <HAL_TIMEx_PWMN_Start+0x160>)
 800a738:	4293      	cmp	r3, r2
 800a73a:	d115      	bne.n	800a768 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	689a      	ldr	r2, [r3, #8]
 800a742:	4b16      	ldr	r3, [pc, #88]	@ (800a79c <HAL_TIMEx_PWMN_Start+0x164>)
 800a744:	4013      	ands	r3, r2
 800a746:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	2b06      	cmp	r3, #6
 800a74c:	d015      	beq.n	800a77a <HAL_TIMEx_PWMN_Start+0x142>
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a754:	d011      	beq.n	800a77a <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	681a      	ldr	r2, [r3, #0]
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	f042 0201 	orr.w	r2, r2, #1
 800a764:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a766:	e008      	b.n	800a77a <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	681a      	ldr	r2, [r3, #0]
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	f042 0201 	orr.w	r2, r2, #1
 800a776:	601a      	str	r2, [r3, #0]
 800a778:	e000      	b.n	800a77c <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a77a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a77c:	2300      	movs	r3, #0
}
 800a77e:	4618      	mov	r0, r3
 800a780:	3710      	adds	r7, #16
 800a782:	46bd      	mov	sp, r7
 800a784:	bd80      	pop	{r7, pc}
 800a786:	bf00      	nop
 800a788:	40012c00 	.word	0x40012c00
 800a78c:	40000400 	.word	0x40000400
 800a790:	40000800 	.word	0x40000800
 800a794:	40013400 	.word	0x40013400
 800a798:	40014000 	.word	0x40014000
 800a79c:	00010007 	.word	0x00010007

0800a7a0 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b082      	sub	sp, #8
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
 800a7a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	6839      	ldr	r1, [r7, #0]
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	f000 fa38 	bl	800ac28 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	6a1a      	ldr	r2, [r3, #32]
 800a7be:	f241 1311 	movw	r3, #4369	@ 0x1111
 800a7c2:	4013      	ands	r3, r2
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d10f      	bne.n	800a7e8 <HAL_TIMEx_PWMN_Stop+0x48>
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	6a1a      	ldr	r2, [r3, #32]
 800a7ce:	f244 4344 	movw	r3, #17476	@ 0x4444
 800a7d2:	4013      	ands	r3, r2
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d107      	bne.n	800a7e8 <HAL_TIMEx_PWMN_Stop+0x48>
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a7e6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	6a1a      	ldr	r2, [r3, #32]
 800a7ee:	f241 1311 	movw	r3, #4369	@ 0x1111
 800a7f2:	4013      	ands	r3, r2
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d10f      	bne.n	800a818 <HAL_TIMEx_PWMN_Stop+0x78>
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	6a1a      	ldr	r2, [r3, #32]
 800a7fe:	f244 4344 	movw	r3, #17476	@ 0x4444
 800a802:	4013      	ands	r3, r2
 800a804:	2b00      	cmp	r3, #0
 800a806:	d107      	bne.n	800a818 <HAL_TIMEx_PWMN_Stop+0x78>
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	681a      	ldr	r2, [r3, #0]
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	f022 0201 	bic.w	r2, r2, #1
 800a816:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d104      	bne.n	800a828 <HAL_TIMEx_PWMN_Stop+0x88>
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	2201      	movs	r2, #1
 800a822:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a826:	e013      	b.n	800a850 <HAL_TIMEx_PWMN_Stop+0xb0>
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	2b04      	cmp	r3, #4
 800a82c:	d104      	bne.n	800a838 <HAL_TIMEx_PWMN_Stop+0x98>
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	2201      	movs	r2, #1
 800a832:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a836:	e00b      	b.n	800a850 <HAL_TIMEx_PWMN_Stop+0xb0>
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	2b08      	cmp	r3, #8
 800a83c:	d104      	bne.n	800a848 <HAL_TIMEx_PWMN_Stop+0xa8>
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	2201      	movs	r2, #1
 800a842:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a846:	e003      	b.n	800a850 <HAL_TIMEx_PWMN_Stop+0xb0>
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2201      	movs	r2, #1
 800a84c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 800a850:	2300      	movs	r3, #0
}
 800a852:	4618      	mov	r0, r3
 800a854:	3708      	adds	r7, #8
 800a856:	46bd      	mov	sp, r7
 800a858:	bd80      	pop	{r7, pc}
	...

0800a85c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a85c:	b480      	push	{r7}
 800a85e:	b085      	sub	sp, #20
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
 800a864:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a86c:	2b01      	cmp	r3, #1
 800a86e:	d101      	bne.n	800a874 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a870:	2302      	movs	r3, #2
 800a872:	e065      	b.n	800a940 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2201      	movs	r2, #1
 800a878:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2202      	movs	r2, #2
 800a880:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	685b      	ldr	r3, [r3, #4]
 800a88a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	689b      	ldr	r3, [r3, #8]
 800a892:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	4a2c      	ldr	r2, [pc, #176]	@ (800a94c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a89a:	4293      	cmp	r3, r2
 800a89c:	d004      	beq.n	800a8a8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	4a2b      	ldr	r2, [pc, #172]	@ (800a950 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a8a4:	4293      	cmp	r3, r2
 800a8a6:	d108      	bne.n	800a8ba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a8ae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a8b0:	683b      	ldr	r3, [r7, #0]
 800a8b2:	685b      	ldr	r3, [r3, #4]
 800a8b4:	68fa      	ldr	r2, [r7, #12]
 800a8b6:	4313      	orrs	r3, r2
 800a8b8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800a8c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a8c4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a8c6:	683b      	ldr	r3, [r7, #0]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	68fa      	ldr	r2, [r7, #12]
 800a8cc:	4313      	orrs	r3, r2
 800a8ce:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	68fa      	ldr	r2, [r7, #12]
 800a8d6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	4a1b      	ldr	r2, [pc, #108]	@ (800a94c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a8de:	4293      	cmp	r3, r2
 800a8e0:	d018      	beq.n	800a914 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a8ea:	d013      	beq.n	800a914 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	4a18      	ldr	r2, [pc, #96]	@ (800a954 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a8f2:	4293      	cmp	r3, r2
 800a8f4:	d00e      	beq.n	800a914 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	4a17      	ldr	r2, [pc, #92]	@ (800a958 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a8fc:	4293      	cmp	r3, r2
 800a8fe:	d009      	beq.n	800a914 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	4a12      	ldr	r2, [pc, #72]	@ (800a950 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a906:	4293      	cmp	r3, r2
 800a908:	d004      	beq.n	800a914 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	4a13      	ldr	r2, [pc, #76]	@ (800a95c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a910:	4293      	cmp	r3, r2
 800a912:	d10c      	bne.n	800a92e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a914:	68bb      	ldr	r3, [r7, #8]
 800a916:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a91a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	689b      	ldr	r3, [r3, #8]
 800a920:	68ba      	ldr	r2, [r7, #8]
 800a922:	4313      	orrs	r3, r2
 800a924:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	68ba      	ldr	r2, [r7, #8]
 800a92c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	2201      	movs	r2, #1
 800a932:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	2200      	movs	r2, #0
 800a93a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a93e:	2300      	movs	r3, #0
}
 800a940:	4618      	mov	r0, r3
 800a942:	3714      	adds	r7, #20
 800a944:	46bd      	mov	sp, r7
 800a946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94a:	4770      	bx	lr
 800a94c:	40012c00 	.word	0x40012c00
 800a950:	40013400 	.word	0x40013400
 800a954:	40000400 	.word	0x40000400
 800a958:	40000800 	.word	0x40000800
 800a95c:	40014000 	.word	0x40014000

0800a960 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a960:	b480      	push	{r7}
 800a962:	b085      	sub	sp, #20
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
 800a968:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a96a:	2300      	movs	r3, #0
 800a96c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a974:	2b01      	cmp	r3, #1
 800a976:	d101      	bne.n	800a97c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a978:	2302      	movs	r3, #2
 800a97a:	e073      	b.n	800aa64 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2201      	movs	r2, #1
 800a980:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	68db      	ldr	r3, [r3, #12]
 800a98e:	4313      	orrs	r3, r2
 800a990:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a998:	683b      	ldr	r3, [r7, #0]
 800a99a:	689b      	ldr	r3, [r3, #8]
 800a99c:	4313      	orrs	r3, r2
 800a99e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800a9a6:	683b      	ldr	r3, [r7, #0]
 800a9a8:	685b      	ldr	r3, [r3, #4]
 800a9aa:	4313      	orrs	r3, r2
 800a9ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800a9b4:	683b      	ldr	r3, [r7, #0]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	4313      	orrs	r3, r2
 800a9ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a9c2:	683b      	ldr	r3, [r7, #0]
 800a9c4:	691b      	ldr	r3, [r3, #16]
 800a9c6:	4313      	orrs	r3, r2
 800a9c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	695b      	ldr	r3, [r3, #20]
 800a9d4:	4313      	orrs	r3, r2
 800a9d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a9e2:	4313      	orrs	r3, r2
 800a9e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800a9ec:	683b      	ldr	r3, [r7, #0]
 800a9ee:	699b      	ldr	r3, [r3, #24]
 800a9f0:	041b      	lsls	r3, r3, #16
 800a9f2:	4313      	orrs	r3, r2
 800a9f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	69db      	ldr	r3, [r3, #28]
 800aa00:	4313      	orrs	r3, r2
 800aa02:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	4a19      	ldr	r2, [pc, #100]	@ (800aa70 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800aa0a:	4293      	cmp	r3, r2
 800aa0c:	d004      	beq.n	800aa18 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	4a18      	ldr	r2, [pc, #96]	@ (800aa74 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800aa14:	4293      	cmp	r3, r2
 800aa16:	d11c      	bne.n	800aa52 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800aa1e:	683b      	ldr	r3, [r7, #0]
 800aa20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa22:	051b      	lsls	r3, r3, #20
 800aa24:	4313      	orrs	r3, r2
 800aa26:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	6a1b      	ldr	r3, [r3, #32]
 800aa32:	4313      	orrs	r3, r2
 800aa34:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa40:	4313      	orrs	r3, r2
 800aa42:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800aa4a:	683b      	ldr	r3, [r7, #0]
 800aa4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa4e:	4313      	orrs	r3, r2
 800aa50:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	68fa      	ldr	r2, [r7, #12]
 800aa58:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800aa62:	2300      	movs	r3, #0
}
 800aa64:	4618      	mov	r0, r3
 800aa66:	3714      	adds	r7, #20
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6e:	4770      	bx	lr
 800aa70:	40012c00 	.word	0x40012c00
 800aa74:	40013400 	.word	0x40013400

0800aa78 <HAL_TIMEx_ConfigBreakInput>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             const TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)
{
 800aa78:	b480      	push	{r7}
 800aa7a:	b08b      	sub	sp, #44	@ 0x2c
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	60f8      	str	r0, [r7, #12]
 800aa80:	60b9      	str	r1, [r7, #8]
 800aa82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aa84:	2300      	movs	r3, #0
 800aa86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800aa90:	2b01      	cmp	r3, #1
 800aa92:	d101      	bne.n	800aa98 <HAL_TIMEx_ConfigBreakInput+0x20>
 800aa94:	2302      	movs	r3, #2
 800aa96:	e0c1      	b.n	800ac1c <HAL_TIMEx_ConfigBreakInput+0x1a4>
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	2201      	movs	r2, #1
 800aa9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (sBreakInputConfig->Source)
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	3b01      	subs	r3, #1
 800aaa6:	2b0f      	cmp	r3, #15
 800aaa8:	d854      	bhi.n	800ab54 <HAL_TIMEx_ConfigBreakInput+0xdc>
 800aaaa:	a201      	add	r2, pc, #4	@ (adr r2, 800aab0 <HAL_TIMEx_ConfigBreakInput+0x38>)
 800aaac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aab0:	0800aaf1 	.word	0x0800aaf1
 800aab4:	0800ab05 	.word	0x0800ab05
 800aab8:	0800ab55 	.word	0x0800ab55
 800aabc:	0800ab19 	.word	0x0800ab19
 800aac0:	0800ab55 	.word	0x0800ab55
 800aac4:	0800ab55 	.word	0x0800ab55
 800aac8:	0800ab55 	.word	0x0800ab55
 800aacc:	0800ab2d 	.word	0x0800ab2d
 800aad0:	0800ab55 	.word	0x0800ab55
 800aad4:	0800ab55 	.word	0x0800ab55
 800aad8:	0800ab55 	.word	0x0800ab55
 800aadc:	0800ab55 	.word	0x0800ab55
 800aae0:	0800ab55 	.word	0x0800ab55
 800aae4:	0800ab55 	.word	0x0800ab55
 800aae8:	0800ab55 	.word	0x0800ab55
 800aaec:	0800ab41 	.word	0x0800ab41
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_AF1_BKINE;
 800aaf0:	2301      	movs	r3, #1
 800aaf2:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKINP;
 800aaf8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800aafc:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 800aafe:	2309      	movs	r3, #9
 800ab00:	617b      	str	r3, [r7, #20]
      break;
 800ab02:	e030      	b.n	800ab66 <HAL_TIMEx_ConfigBreakInput+0xee>
    }
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP1E;
 800ab04:	2302      	movs	r3, #2
 800ab06:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP1E_Pos;
 800ab08:	2301      	movs	r3, #1
 800ab0a:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP1P;
 800ab0c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ab10:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP1P_Pos;
 800ab12:	230a      	movs	r3, #10
 800ab14:	617b      	str	r3, [r7, #20]
      break;
 800ab16:	e026      	b.n	800ab66 <HAL_TIMEx_ConfigBreakInput+0xee>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP2E;
 800ab18:	2304      	movs	r3, #4
 800ab1a:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 800ab1c:	2302      	movs	r3, #2
 800ab1e:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 800ab20:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ab24:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 800ab26:	230b      	movs	r3, #11
 800ab28:	617b      	str	r3, [r7, #20]
      break;
 800ab2a:	e01c      	b.n	800ab66 <HAL_TIMEx_ConfigBreakInput+0xee>
    }
    case TIM_BREAKINPUTSOURCE_COMP3:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP3E;
 800ab2c:	2308      	movs	r3, #8
 800ab2e:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP3E_Pos;
 800ab30:	2303      	movs	r3, #3
 800ab32:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP3P;
 800ab34:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ab38:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP3P_Pos;
 800ab3a:	230c      	movs	r3, #12
 800ab3c:	617b      	str	r3, [r7, #20]
      break;
 800ab3e:	e012      	b.n	800ab66 <HAL_TIMEx_ConfigBreakInput+0xee>
    }
    case TIM_BREAKINPUTSOURCE_COMP4:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP4E;
 800ab40:	2310      	movs	r3, #16
 800ab42:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP4E_Pos;
 800ab44:	2304      	movs	r3, #4
 800ab46:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP4P;
 800ab48:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ab4c:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP4P_Pos;
 800ab4e:	230d      	movs	r3, #13
 800ab50:	617b      	str	r3, [r7, #20]
      break;
 800ab52:	e008      	b.n	800ab66 <HAL_TIMEx_ConfigBreakInput+0xee>
    }
#endif /* COMP7 */

    default:
    {
      bkin_enable_mask = 0U;
 800ab54:	2300      	movs	r3, #0
 800ab56:	623b      	str	r3, [r7, #32]
      bkin_polarity_mask = 0U;
 800ab58:	2300      	movs	r3, #0
 800ab5a:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = 0U;
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = 0U;
 800ab60:	2300      	movs	r3, #0
 800ab62:	617b      	str	r3, [r7, #20]
      break;
 800ab64:	bf00      	nop
    }
  }

  switch (BreakInput)
 800ab66:	68bb      	ldr	r3, [r7, #8]
 800ab68:	2b01      	cmp	r3, #1
 800ab6a:	d003      	beq.n	800ab74 <HAL_TIMEx_ConfigBreakInput+0xfc>
 800ab6c:	68bb      	ldr	r3, [r7, #8]
 800ab6e:	2b02      	cmp	r3, #2
 800ab70:	d025      	beq.n	800abbe <HAL_TIMEx_ConfigBreakInput+0x146>
 800ab72:	e049      	b.n	800ac08 <HAL_TIMEx_ConfigBreakInput+0x190>
  {
    case TIM_BREAKINPUT_BRK:
    {
      /* Get the TIMx_AF1 register value */
      tmporx = htim->Instance->AF1;
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ab7a:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800ab7c:	6a3b      	ldr	r3, [r7, #32]
 800ab7e:	43db      	mvns	r3, r3
 800ab80:	693a      	ldr	r2, [r7, #16]
 800ab82:	4013      	ands	r3, r2
 800ab84:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	685a      	ldr	r2, [r3, #4]
 800ab8a:	69bb      	ldr	r3, [r7, #24]
 800ab8c:	409a      	lsls	r2, r3
 800ab8e:	6a3b      	ldr	r3, [r7, #32]
 800ab90:	4013      	ands	r3, r2
 800ab92:	693a      	ldr	r2, [r7, #16]
 800ab94:	4313      	orrs	r3, r2
 800ab96:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 800ab98:	69fb      	ldr	r3, [r7, #28]
 800ab9a:	43db      	mvns	r3, r3
 800ab9c:	693a      	ldr	r2, [r7, #16]
 800ab9e:	4013      	ands	r3, r2
 800aba0:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	689a      	ldr	r2, [r3, #8]
 800aba6:	697b      	ldr	r3, [r7, #20]
 800aba8:	409a      	lsls	r2, r3
 800abaa:	69fb      	ldr	r3, [r7, #28]
 800abac:	4013      	ands	r3, r2
 800abae:	693a      	ldr	r2, [r7, #16]
 800abb0:	4313      	orrs	r3, r2
 800abb2:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF1 */
      htim->Instance->AF1 = tmporx;
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	693a      	ldr	r2, [r7, #16]
 800abba:	661a      	str	r2, [r3, #96]	@ 0x60
      break;
 800abbc:	e028      	b.n	800ac10 <HAL_TIMEx_ConfigBreakInput+0x198>
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_AF2 register value */
      tmporx = htim->Instance->AF2;
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800abc4:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800abc6:	6a3b      	ldr	r3, [r7, #32]
 800abc8:	43db      	mvns	r3, r3
 800abca:	693a      	ldr	r2, [r7, #16]
 800abcc:	4013      	ands	r3, r2
 800abce:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	685a      	ldr	r2, [r3, #4]
 800abd4:	69bb      	ldr	r3, [r7, #24]
 800abd6:	409a      	lsls	r2, r3
 800abd8:	6a3b      	ldr	r3, [r7, #32]
 800abda:	4013      	ands	r3, r2
 800abdc:	693a      	ldr	r2, [r7, #16]
 800abde:	4313      	orrs	r3, r2
 800abe0:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 800abe2:	69fb      	ldr	r3, [r7, #28]
 800abe4:	43db      	mvns	r3, r3
 800abe6:	693a      	ldr	r2, [r7, #16]
 800abe8:	4013      	ands	r3, r2
 800abea:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	689a      	ldr	r2, [r3, #8]
 800abf0:	697b      	ldr	r3, [r7, #20]
 800abf2:	409a      	lsls	r2, r3
 800abf4:	69fb      	ldr	r3, [r7, #28]
 800abf6:	4013      	ands	r3, r2
 800abf8:	693a      	ldr	r2, [r7, #16]
 800abfa:	4313      	orrs	r3, r2
 800abfc:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	693a      	ldr	r2, [r7, #16]
 800ac04:	665a      	str	r2, [r3, #100]	@ 0x64
      break;
 800ac06:	e003      	b.n	800ac10 <HAL_TIMEx_ConfigBreakInput+0x198>
    }
    default:
      status = HAL_ERROR;
 800ac08:	2301      	movs	r3, #1
 800ac0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800ac0e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	2200      	movs	r2, #0
 800ac14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ac18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	372c      	adds	r7, #44	@ 0x2c
 800ac20:	46bd      	mov	sp, r7
 800ac22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac26:	4770      	bx	lr

0800ac28 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800ac28:	b480      	push	{r7}
 800ac2a:	b087      	sub	sp, #28
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	60f8      	str	r0, [r7, #12]
 800ac30:	60b9      	str	r1, [r7, #8]
 800ac32:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 800ac34:	68bb      	ldr	r3, [r7, #8]
 800ac36:	f003 030f 	and.w	r3, r3, #15
 800ac3a:	2204      	movs	r2, #4
 800ac3c:	fa02 f303 	lsl.w	r3, r2, r3
 800ac40:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	6a1a      	ldr	r2, [r3, #32]
 800ac46:	697b      	ldr	r3, [r7, #20]
 800ac48:	43db      	mvns	r3, r3
 800ac4a:	401a      	ands	r2, r3
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	6a1a      	ldr	r2, [r3, #32]
 800ac54:	68bb      	ldr	r3, [r7, #8]
 800ac56:	f003 030f 	and.w	r3, r3, #15
 800ac5a:	6879      	ldr	r1, [r7, #4]
 800ac5c:	fa01 f303 	lsl.w	r3, r1, r3
 800ac60:	431a      	orrs	r2, r3
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	621a      	str	r2, [r3, #32]
}
 800ac66:	bf00      	nop
 800ac68:	371c      	adds	r7, #28
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac70:	4770      	bx	lr

0800ac72 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ac72:	b580      	push	{r7, lr}
 800ac74:	b082      	sub	sp, #8
 800ac76:	af00      	add	r7, sp, #0
 800ac78:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d101      	bne.n	800ac84 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ac80:	2301      	movs	r3, #1
 800ac82:	e042      	b.n	800ad0a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d106      	bne.n	800ac9c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	2200      	movs	r2, #0
 800ac92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ac96:	6878      	ldr	r0, [r7, #4]
 800ac98:	f7f7 fcb6 	bl	8002608 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	2224      	movs	r2, #36	@ 0x24
 800aca0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	681a      	ldr	r2, [r3, #0]
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	f022 0201 	bic.w	r2, r2, #1
 800acb2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d002      	beq.n	800acc2 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800acbc:	6878      	ldr	r0, [r7, #4]
 800acbe:	f000 ff6f 	bl	800bba0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800acc2:	6878      	ldr	r0, [r7, #4]
 800acc4:	f000 fca0 	bl	800b608 <UART_SetConfig>
 800acc8:	4603      	mov	r3, r0
 800acca:	2b01      	cmp	r3, #1
 800accc:	d101      	bne.n	800acd2 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800acce:	2301      	movs	r3, #1
 800acd0:	e01b      	b.n	800ad0a <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	685a      	ldr	r2, [r3, #4]
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ace0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	689a      	ldr	r2, [r3, #8]
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800acf0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	681a      	ldr	r2, [r3, #0]
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	f042 0201 	orr.w	r2, r2, #1
 800ad00:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ad02:	6878      	ldr	r0, [r7, #4]
 800ad04:	f000 ffee 	bl	800bce4 <UART_CheckIdleState>
 800ad08:	4603      	mov	r3, r0
}
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	3708      	adds	r7, #8
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	bd80      	pop	{r7, pc}

0800ad12 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ad12:	b580      	push	{r7, lr}
 800ad14:	b08a      	sub	sp, #40	@ 0x28
 800ad16:	af02      	add	r7, sp, #8
 800ad18:	60f8      	str	r0, [r7, #12]
 800ad1a:	60b9      	str	r1, [r7, #8]
 800ad1c:	603b      	str	r3, [r7, #0]
 800ad1e:	4613      	mov	r3, r2
 800ad20:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ad28:	2b20      	cmp	r3, #32
 800ad2a:	d17b      	bne.n	800ae24 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800ad2c:	68bb      	ldr	r3, [r7, #8]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d002      	beq.n	800ad38 <HAL_UART_Transmit+0x26>
 800ad32:	88fb      	ldrh	r3, [r7, #6]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d101      	bne.n	800ad3c <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800ad38:	2301      	movs	r3, #1
 800ad3a:	e074      	b.n	800ae26 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	2200      	movs	r2, #0
 800ad40:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	2221      	movs	r2, #33	@ 0x21
 800ad48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ad4c:	f7f7 fda8 	bl	80028a0 <HAL_GetTick>
 800ad50:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	88fa      	ldrh	r2, [r7, #6]
 800ad56:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	88fa      	ldrh	r2, [r7, #6]
 800ad5e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	689b      	ldr	r3, [r3, #8]
 800ad66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ad6a:	d108      	bne.n	800ad7e <HAL_UART_Transmit+0x6c>
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	691b      	ldr	r3, [r3, #16]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d104      	bne.n	800ad7e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800ad74:	2300      	movs	r3, #0
 800ad76:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ad78:	68bb      	ldr	r3, [r7, #8]
 800ad7a:	61bb      	str	r3, [r7, #24]
 800ad7c:	e003      	b.n	800ad86 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800ad7e:	68bb      	ldr	r3, [r7, #8]
 800ad80:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ad82:	2300      	movs	r3, #0
 800ad84:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ad86:	e030      	b.n	800adea <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	9300      	str	r3, [sp, #0]
 800ad8c:	697b      	ldr	r3, [r7, #20]
 800ad8e:	2200      	movs	r2, #0
 800ad90:	2180      	movs	r1, #128	@ 0x80
 800ad92:	68f8      	ldr	r0, [r7, #12]
 800ad94:	f001 f850 	bl	800be38 <UART_WaitOnFlagUntilTimeout>
 800ad98:	4603      	mov	r3, r0
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d005      	beq.n	800adaa <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	2220      	movs	r2, #32
 800ada2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800ada6:	2303      	movs	r3, #3
 800ada8:	e03d      	b.n	800ae26 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800adaa:	69fb      	ldr	r3, [r7, #28]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d10b      	bne.n	800adc8 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800adb0:	69bb      	ldr	r3, [r7, #24]
 800adb2:	881b      	ldrh	r3, [r3, #0]
 800adb4:	461a      	mov	r2, r3
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800adbe:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800adc0:	69bb      	ldr	r3, [r7, #24]
 800adc2:	3302      	adds	r3, #2
 800adc4:	61bb      	str	r3, [r7, #24]
 800adc6:	e007      	b.n	800add8 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800adc8:	69fb      	ldr	r3, [r7, #28]
 800adca:	781a      	ldrb	r2, [r3, #0]
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800add2:	69fb      	ldr	r3, [r7, #28]
 800add4:	3301      	adds	r3, #1
 800add6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800adde:	b29b      	uxth	r3, r3
 800ade0:	3b01      	subs	r3, #1
 800ade2:	b29a      	uxth	r2, r3
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800adf0:	b29b      	uxth	r3, r3
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d1c8      	bne.n	800ad88 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800adf6:	683b      	ldr	r3, [r7, #0]
 800adf8:	9300      	str	r3, [sp, #0]
 800adfa:	697b      	ldr	r3, [r7, #20]
 800adfc:	2200      	movs	r2, #0
 800adfe:	2140      	movs	r1, #64	@ 0x40
 800ae00:	68f8      	ldr	r0, [r7, #12]
 800ae02:	f001 f819 	bl	800be38 <UART_WaitOnFlagUntilTimeout>
 800ae06:	4603      	mov	r3, r0
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d005      	beq.n	800ae18 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	2220      	movs	r2, #32
 800ae10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800ae14:	2303      	movs	r3, #3
 800ae16:	e006      	b.n	800ae26 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	2220      	movs	r2, #32
 800ae1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800ae20:	2300      	movs	r3, #0
 800ae22:	e000      	b.n	800ae26 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800ae24:	2302      	movs	r3, #2
  }
}
 800ae26:	4618      	mov	r0, r3
 800ae28:	3720      	adds	r7, #32
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	bd80      	pop	{r7, pc}
	...

0800ae30 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b08a      	sub	sp, #40	@ 0x28
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	60f8      	str	r0, [r7, #12]
 800ae38:	60b9      	str	r1, [r7, #8]
 800ae3a:	4613      	mov	r3, r2
 800ae3c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ae44:	2b20      	cmp	r3, #32
 800ae46:	d167      	bne.n	800af18 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800ae48:	68bb      	ldr	r3, [r7, #8]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d002      	beq.n	800ae54 <HAL_UART_Transmit_DMA+0x24>
 800ae4e:	88fb      	ldrh	r3, [r7, #6]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d101      	bne.n	800ae58 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800ae54:	2301      	movs	r3, #1
 800ae56:	e060      	b.n	800af1a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	68ba      	ldr	r2, [r7, #8]
 800ae5c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	88fa      	ldrh	r2, [r7, #6]
 800ae62:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	88fa      	ldrh	r2, [r7, #6]
 800ae6a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	2200      	movs	r2, #0
 800ae72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	2221      	movs	r2, #33	@ 0x21
 800ae7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d028      	beq.n	800aed8 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ae8a:	4a26      	ldr	r2, [pc, #152]	@ (800af24 <HAL_UART_Transmit_DMA+0xf4>)
 800ae8c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ae92:	4a25      	ldr	r2, [pc, #148]	@ (800af28 <HAL_UART_Transmit_DMA+0xf8>)
 800ae94:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ae9a:	4a24      	ldr	r2, [pc, #144]	@ (800af2c <HAL_UART_Transmit_DMA+0xfc>)
 800ae9c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800aea2:	2200      	movs	r2, #0
 800aea4:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aeae:	4619      	mov	r1, r3
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	3328      	adds	r3, #40	@ 0x28
 800aeb6:	461a      	mov	r2, r3
 800aeb8:	88fb      	ldrh	r3, [r7, #6]
 800aeba:	f7fa ff79 	bl	8005db0 <HAL_DMA_Start_IT>
 800aebe:	4603      	mov	r3, r0
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d009      	beq.n	800aed8 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	2210      	movs	r2, #16
 800aec8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	2220      	movs	r2, #32
 800aed0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800aed4:	2301      	movs	r3, #1
 800aed6:	e020      	b.n	800af1a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	2240      	movs	r2, #64	@ 0x40
 800aede:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	3308      	adds	r3, #8
 800aee6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aee8:	697b      	ldr	r3, [r7, #20]
 800aeea:	e853 3f00 	ldrex	r3, [r3]
 800aeee:	613b      	str	r3, [r7, #16]
   return(result);
 800aef0:	693b      	ldr	r3, [r7, #16]
 800aef2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aef6:	627b      	str	r3, [r7, #36]	@ 0x24
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	3308      	adds	r3, #8
 800aefe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800af00:	623a      	str	r2, [r7, #32]
 800af02:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af04:	69f9      	ldr	r1, [r7, #28]
 800af06:	6a3a      	ldr	r2, [r7, #32]
 800af08:	e841 2300 	strex	r3, r2, [r1]
 800af0c:	61bb      	str	r3, [r7, #24]
   return(result);
 800af0e:	69bb      	ldr	r3, [r7, #24]
 800af10:	2b00      	cmp	r3, #0
 800af12:	d1e5      	bne.n	800aee0 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800af14:	2300      	movs	r3, #0
 800af16:	e000      	b.n	800af1a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800af18:	2302      	movs	r3, #2
  }
}
 800af1a:	4618      	mov	r0, r3
 800af1c:	3728      	adds	r7, #40	@ 0x28
 800af1e:	46bd      	mov	sp, r7
 800af20:	bd80      	pop	{r7, pc}
 800af22:	bf00      	nop
 800af24:	0800c1af 	.word	0x0800c1af
 800af28:	0800c249 	.word	0x0800c249
 800af2c:	0800c3cf 	.word	0x0800c3cf

0800af30 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800af30:	b580      	push	{r7, lr}
 800af32:	b0ba      	sub	sp, #232	@ 0xe8
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	69db      	ldr	r3, [r3, #28]
 800af3e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	689b      	ldr	r3, [r3, #8]
 800af52:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800af56:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800af5a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800af5e:	4013      	ands	r3, r2
 800af60:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800af64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d11b      	bne.n	800afa4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800af6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800af70:	f003 0320 	and.w	r3, r3, #32
 800af74:	2b00      	cmp	r3, #0
 800af76:	d015      	beq.n	800afa4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800af78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800af7c:	f003 0320 	and.w	r3, r3, #32
 800af80:	2b00      	cmp	r3, #0
 800af82:	d105      	bne.n	800af90 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800af84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800af88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d009      	beq.n	800afa4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800af94:	2b00      	cmp	r3, #0
 800af96:	f000 82e3 	beq.w	800b560 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800af9e:	6878      	ldr	r0, [r7, #4]
 800afa0:	4798      	blx	r3
      }
      return;
 800afa2:	e2dd      	b.n	800b560 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800afa4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	f000 8123 	beq.w	800b1f4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800afae:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800afb2:	4b8d      	ldr	r3, [pc, #564]	@ (800b1e8 <HAL_UART_IRQHandler+0x2b8>)
 800afb4:	4013      	ands	r3, r2
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d106      	bne.n	800afc8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800afba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800afbe:	4b8b      	ldr	r3, [pc, #556]	@ (800b1ec <HAL_UART_IRQHandler+0x2bc>)
 800afc0:	4013      	ands	r3, r2
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	f000 8116 	beq.w	800b1f4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800afc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800afcc:	f003 0301 	and.w	r3, r3, #1
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d011      	beq.n	800aff8 <HAL_UART_IRQHandler+0xc8>
 800afd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800afd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d00b      	beq.n	800aff8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	2201      	movs	r2, #1
 800afe6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800afee:	f043 0201 	orr.w	r2, r3, #1
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aff8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800affc:	f003 0302 	and.w	r3, r3, #2
 800b000:	2b00      	cmp	r3, #0
 800b002:	d011      	beq.n	800b028 <HAL_UART_IRQHandler+0xf8>
 800b004:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b008:	f003 0301 	and.w	r3, r3, #1
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d00b      	beq.n	800b028 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	2202      	movs	r2, #2
 800b016:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b01e:	f043 0204 	orr.w	r2, r3, #4
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b028:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b02c:	f003 0304 	and.w	r3, r3, #4
 800b030:	2b00      	cmp	r3, #0
 800b032:	d011      	beq.n	800b058 <HAL_UART_IRQHandler+0x128>
 800b034:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b038:	f003 0301 	and.w	r3, r3, #1
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d00b      	beq.n	800b058 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	2204      	movs	r2, #4
 800b046:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b04e:	f043 0202 	orr.w	r2, r3, #2
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b058:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b05c:	f003 0308 	and.w	r3, r3, #8
 800b060:	2b00      	cmp	r3, #0
 800b062:	d017      	beq.n	800b094 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b064:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b068:	f003 0320 	and.w	r3, r3, #32
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d105      	bne.n	800b07c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b070:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b074:	4b5c      	ldr	r3, [pc, #368]	@ (800b1e8 <HAL_UART_IRQHandler+0x2b8>)
 800b076:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d00b      	beq.n	800b094 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	2208      	movs	r2, #8
 800b082:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b08a:	f043 0208 	orr.w	r2, r3, #8
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b094:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b098:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d012      	beq.n	800b0c6 <HAL_UART_IRQHandler+0x196>
 800b0a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b0a4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d00c      	beq.n	800b0c6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b0b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b0bc:	f043 0220 	orr.w	r2, r3, #32
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	f000 8249 	beq.w	800b564 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b0d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b0d6:	f003 0320 	and.w	r3, r3, #32
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d013      	beq.n	800b106 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b0de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b0e2:	f003 0320 	and.w	r3, r3, #32
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d105      	bne.n	800b0f6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b0ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b0ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d007      	beq.n	800b106 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d003      	beq.n	800b106 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b102:	6878      	ldr	r0, [r7, #4]
 800b104:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b10c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	689b      	ldr	r3, [r3, #8]
 800b116:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b11a:	2b40      	cmp	r3, #64	@ 0x40
 800b11c:	d005      	beq.n	800b12a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b11e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b122:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b126:	2b00      	cmp	r3, #0
 800b128:	d054      	beq.n	800b1d4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b12a:	6878      	ldr	r0, [r7, #4]
 800b12c:	f000 ffd9 	bl	800c0e2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	689b      	ldr	r3, [r3, #8]
 800b136:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b13a:	2b40      	cmp	r3, #64	@ 0x40
 800b13c:	d146      	bne.n	800b1cc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	3308      	adds	r3, #8
 800b144:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b148:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b14c:	e853 3f00 	ldrex	r3, [r3]
 800b150:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800b154:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b158:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b15c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	3308      	adds	r3, #8
 800b166:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800b16a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800b16e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b172:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b176:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b17a:	e841 2300 	strex	r3, r2, [r1]
 800b17e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800b182:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b186:	2b00      	cmp	r3, #0
 800b188:	d1d9      	bne.n	800b13e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b190:	2b00      	cmp	r3, #0
 800b192:	d017      	beq.n	800b1c4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b19a:	4a15      	ldr	r2, [pc, #84]	@ (800b1f0 <HAL_UART_IRQHandler+0x2c0>)
 800b19c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	f7fa fed7 	bl	8005f58 <HAL_DMA_Abort_IT>
 800b1aa:	4603      	mov	r3, r0
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d019      	beq.n	800b1e4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b1b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1b8:	687a      	ldr	r2, [r7, #4]
 800b1ba:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800b1be:	4610      	mov	r0, r2
 800b1c0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b1c2:	e00f      	b.n	800b1e4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b1c4:	6878      	ldr	r0, [r7, #4]
 800b1c6:	f000 f9ff 	bl	800b5c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b1ca:	e00b      	b.n	800b1e4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b1cc:	6878      	ldr	r0, [r7, #4]
 800b1ce:	f000 f9fb 	bl	800b5c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b1d2:	e007      	b.n	800b1e4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b1d4:	6878      	ldr	r0, [r7, #4]
 800b1d6:	f000 f9f7 	bl	800b5c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	2200      	movs	r2, #0
 800b1de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800b1e2:	e1bf      	b.n	800b564 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b1e4:	bf00      	nop
    return;
 800b1e6:	e1bd      	b.n	800b564 <HAL_UART_IRQHandler+0x634>
 800b1e8:	10000001 	.word	0x10000001
 800b1ec:	04000120 	.word	0x04000120
 800b1f0:	0800c44f 	.word	0x0800c44f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b1f8:	2b01      	cmp	r3, #1
 800b1fa:	f040 8153 	bne.w	800b4a4 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b1fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b202:	f003 0310 	and.w	r3, r3, #16
 800b206:	2b00      	cmp	r3, #0
 800b208:	f000 814c 	beq.w	800b4a4 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b20c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b210:	f003 0310 	and.w	r3, r3, #16
 800b214:	2b00      	cmp	r3, #0
 800b216:	f000 8145 	beq.w	800b4a4 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	2210      	movs	r2, #16
 800b220:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	689b      	ldr	r3, [r3, #8]
 800b228:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b22c:	2b40      	cmp	r3, #64	@ 0x40
 800b22e:	f040 80bb 	bne.w	800b3a8 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	685b      	ldr	r3, [r3, #4]
 800b23c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b240:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b244:	2b00      	cmp	r3, #0
 800b246:	f000 818f 	beq.w	800b568 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b250:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b254:	429a      	cmp	r2, r3
 800b256:	f080 8187 	bcs.w	800b568 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b260:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	f003 0320 	and.w	r3, r3, #32
 800b272:	2b00      	cmp	r3, #0
 800b274:	f040 8087 	bne.w	800b386 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b280:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b284:	e853 3f00 	ldrex	r3, [r3]
 800b288:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b28c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b290:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b294:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	461a      	mov	r2, r3
 800b29e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b2a2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b2a6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b2ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b2b2:	e841 2300 	strex	r3, r2, [r1]
 800b2b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b2ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d1da      	bne.n	800b278 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	3308      	adds	r3, #8
 800b2c8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b2cc:	e853 3f00 	ldrex	r3, [r3]
 800b2d0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b2d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b2d4:	f023 0301 	bic.w	r3, r3, #1
 800b2d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	3308      	adds	r3, #8
 800b2e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b2e6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b2ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2ec:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b2ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b2f2:	e841 2300 	strex	r3, r2, [r1]
 800b2f6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b2f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d1e1      	bne.n	800b2c2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	3308      	adds	r3, #8
 800b304:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b306:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b308:	e853 3f00 	ldrex	r3, [r3]
 800b30c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b30e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b310:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b314:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	3308      	adds	r3, #8
 800b31e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b322:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b324:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b326:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b328:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b32a:	e841 2300 	strex	r3, r2, [r1]
 800b32e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b330:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b332:	2b00      	cmp	r3, #0
 800b334:	d1e3      	bne.n	800b2fe <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	2220      	movs	r2, #32
 800b33a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	2200      	movs	r2, #0
 800b342:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b34a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b34c:	e853 3f00 	ldrex	r3, [r3]
 800b350:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b352:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b354:	f023 0310 	bic.w	r3, r3, #16
 800b358:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	461a      	mov	r2, r3
 800b362:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b366:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b368:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b36a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b36c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b36e:	e841 2300 	strex	r3, r2, [r1]
 800b372:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b374:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b376:	2b00      	cmp	r3, #0
 800b378:	d1e4      	bne.n	800b344 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b380:	4618      	mov	r0, r3
 800b382:	f7fa fd90 	bl	8005ea6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	2202      	movs	r2, #2
 800b38a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
<<<<<<< HEAD
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a414:	b29b      	uxth	r3, r3
 800a416:	1ad3      	subs	r3, r2, r3
 800a418:	b29b      	uxth	r3, r3
 800a41a:	4619      	mov	r1, r3
 800a41c:	6878      	ldr	r0, [r7, #4]
 800a41e:	f002 ff2f 	bl	800d280 <HAL_UARTEx_RxEventCallback>
=======
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b398:	b29b      	uxth	r3, r3
 800b39a:	1ad3      	subs	r3, r2, r3
 800b39c:	b29b      	uxth	r3, r3
 800b39e:	4619      	mov	r1, r3
 800b3a0:	6878      	ldr	r0, [r7, #4]
 800b3a2:	f002 ff3f 	bl	800e224 <HAL_UARTEx_RxEventCallback>
>>>>>>> f88694781bd54d0bca96bec7ac145bdac62fa329
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b3a6:	e0df      	b.n	800b568 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b3b4:	b29b      	uxth	r3, r3
 800b3b6:	1ad3      	subs	r3, r2, r3
 800b3b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b3c2:	b29b      	uxth	r3, r3
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	f000 80d1 	beq.w	800b56c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800b3ca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	f000 80cc 	beq.w	800b56c <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3dc:	e853 3f00 	ldrex	r3, [r3]
 800b3e0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b3e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b3e8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	461a      	mov	r2, r3
 800b3f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b3f6:	647b      	str	r3, [r7, #68]	@ 0x44
 800b3f8:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3fa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b3fc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b3fe:	e841 2300 	strex	r3, r2, [r1]
 800b402:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b404:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b406:	2b00      	cmp	r3, #0
 800b408:	d1e4      	bne.n	800b3d4 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	3308      	adds	r3, #8
 800b410:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b414:	e853 3f00 	ldrex	r3, [r3]
 800b418:	623b      	str	r3, [r7, #32]
   return(result);
 800b41a:	6a3b      	ldr	r3, [r7, #32]
 800b41c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b420:	f023 0301 	bic.w	r3, r3, #1
 800b424:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	3308      	adds	r3, #8
 800b42e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b432:	633a      	str	r2, [r7, #48]	@ 0x30
 800b434:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b436:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b438:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b43a:	e841 2300 	strex	r3, r2, [r1]
 800b43e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b442:	2b00      	cmp	r3, #0
 800b444:	d1e1      	bne.n	800b40a <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	2220      	movs	r2, #32
 800b44a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	2200      	movs	r2, #0
 800b452:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	2200      	movs	r2, #0
 800b458:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b460:	693b      	ldr	r3, [r7, #16]
 800b462:	e853 3f00 	ldrex	r3, [r3]
 800b466:	60fb      	str	r3, [r7, #12]
   return(result);
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	f023 0310 	bic.w	r3, r3, #16
 800b46e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	461a      	mov	r2, r3
 800b478:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b47c:	61fb      	str	r3, [r7, #28]
 800b47e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b480:	69b9      	ldr	r1, [r7, #24]
 800b482:	69fa      	ldr	r2, [r7, #28]
 800b484:	e841 2300 	strex	r3, r2, [r1]
 800b488:	617b      	str	r3, [r7, #20]
   return(result);
 800b48a:	697b      	ldr	r3, [r7, #20]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d1e4      	bne.n	800b45a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	2202      	movs	r2, #2
 800b494:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
<<<<<<< HEAD
 800a512:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a516:	4619      	mov	r1, r3
 800a518:	6878      	ldr	r0, [r7, #4]
 800a51a:	f002 feb1 	bl	800d280 <HAL_UARTEx_RxEventCallback>
=======
 800b496:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b49a:	4619      	mov	r1, r3
 800b49c:	6878      	ldr	r0, [r7, #4]
 800b49e:	f002 fec1 	bl	800e224 <HAL_UARTEx_RxEventCallback>
>>>>>>> f88694781bd54d0bca96bec7ac145bdac62fa329
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b4a2:	e063      	b.n	800b56c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b4a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b4a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d00e      	beq.n	800b4ce <HAL_UART_IRQHandler+0x59e>
 800b4b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b4b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d008      	beq.n	800b4ce <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800b4c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b4c6:	6878      	ldr	r0, [r7, #4]
 800b4c8:	f001 f802 	bl	800c4d0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b4cc:	e051      	b.n	800b572 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b4ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b4d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d014      	beq.n	800b504 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b4da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b4de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d105      	bne.n	800b4f2 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b4e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b4ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d008      	beq.n	800b504 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d03a      	beq.n	800b570 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b4fe:	6878      	ldr	r0, [r7, #4]
 800b500:	4798      	blx	r3
    }
    return;
 800b502:	e035      	b.n	800b570 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b504:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b508:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d009      	beq.n	800b524 <HAL_UART_IRQHandler+0x5f4>
 800b510:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b514:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d003      	beq.n	800b524 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800b51c:	6878      	ldr	r0, [r7, #4]
 800b51e:	f000 ffac 	bl	800c47a <UART_EndTransmit_IT>
    return;
 800b522:	e026      	b.n	800b572 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b524:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b528:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d009      	beq.n	800b544 <HAL_UART_IRQHandler+0x614>
 800b530:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b534:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d003      	beq.n	800b544 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b53c:	6878      	ldr	r0, [r7, #4]
 800b53e:	f000 ffdb 	bl	800c4f8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b542:	e016      	b.n	800b572 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b544:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b548:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d010      	beq.n	800b572 <HAL_UART_IRQHandler+0x642>
 800b550:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b554:	2b00      	cmp	r3, #0
 800b556:	da0c      	bge.n	800b572 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b558:	6878      	ldr	r0, [r7, #4]
 800b55a:	f000 ffc3 	bl	800c4e4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b55e:	e008      	b.n	800b572 <HAL_UART_IRQHandler+0x642>
      return;
 800b560:	bf00      	nop
 800b562:	e006      	b.n	800b572 <HAL_UART_IRQHandler+0x642>
    return;
 800b564:	bf00      	nop
 800b566:	e004      	b.n	800b572 <HAL_UART_IRQHandler+0x642>
      return;
 800b568:	bf00      	nop
 800b56a:	e002      	b.n	800b572 <HAL_UART_IRQHandler+0x642>
      return;
 800b56c:	bf00      	nop
 800b56e:	e000      	b.n	800b572 <HAL_UART_IRQHandler+0x642>
    return;
 800b570:	bf00      	nop
  }
}
 800b572:	37e8      	adds	r7, #232	@ 0xe8
 800b574:	46bd      	mov	sp, r7
 800b576:	bd80      	pop	{r7, pc}

0800b578 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b578:	b480      	push	{r7}
 800b57a:	b083      	sub	sp, #12
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b580:	bf00      	nop
 800b582:	370c      	adds	r7, #12
 800b584:	46bd      	mov	sp, r7
 800b586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58a:	4770      	bx	lr

0800b58c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b58c:	b480      	push	{r7}
 800b58e:	b083      	sub	sp, #12
 800b590:	af00      	add	r7, sp, #0
 800b592:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800b594:	bf00      	nop
 800b596:	370c      	adds	r7, #12
 800b598:	46bd      	mov	sp, r7
 800b59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59e:	4770      	bx	lr

0800b5a0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b5a0:	b480      	push	{r7}
 800b5a2:	b083      	sub	sp, #12
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800b5a8:	bf00      	nop
 800b5aa:	370c      	adds	r7, #12
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b2:	4770      	bx	lr

0800b5b4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b5b4:	b480      	push	{r7}
 800b5b6:	b083      	sub	sp, #12
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800b5bc:	bf00      	nop
 800b5be:	370c      	adds	r7, #12
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c6:	4770      	bx	lr

0800b5c8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b5c8:	b480      	push	{r7}
 800b5ca:	b083      	sub	sp, #12
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b5d0:	bf00      	nop
 800b5d2:	370c      	adds	r7, #12
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5da:	4770      	bx	lr

0800b5dc <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 800b5dc:	b480      	push	{r7}
 800b5de:	b085      	sub	sp, #20
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b5ea:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b5f2:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 800b5f4:	68fa      	ldr	r2, [r7, #12]
 800b5f6:	68bb      	ldr	r3, [r7, #8]
 800b5f8:	4313      	orrs	r3, r2
}
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	3714      	adds	r7, #20
 800b5fe:	46bd      	mov	sp, r7
 800b600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b604:	4770      	bx	lr
	...

0800b608 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b608:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b60c:	b08c      	sub	sp, #48	@ 0x30
 800b60e:	af00      	add	r7, sp, #0
 800b610:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b612:	2300      	movs	r3, #0
 800b614:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b618:	697b      	ldr	r3, [r7, #20]
 800b61a:	689a      	ldr	r2, [r3, #8]
 800b61c:	697b      	ldr	r3, [r7, #20]
 800b61e:	691b      	ldr	r3, [r3, #16]
 800b620:	431a      	orrs	r2, r3
 800b622:	697b      	ldr	r3, [r7, #20]
 800b624:	695b      	ldr	r3, [r3, #20]
 800b626:	431a      	orrs	r2, r3
 800b628:	697b      	ldr	r3, [r7, #20]
 800b62a:	69db      	ldr	r3, [r3, #28]
 800b62c:	4313      	orrs	r3, r2
 800b62e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b630:	697b      	ldr	r3, [r7, #20]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	681a      	ldr	r2, [r3, #0]
 800b636:	4bab      	ldr	r3, [pc, #684]	@ (800b8e4 <UART_SetConfig+0x2dc>)
 800b638:	4013      	ands	r3, r2
 800b63a:	697a      	ldr	r2, [r7, #20]
 800b63c:	6812      	ldr	r2, [r2, #0]
 800b63e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b640:	430b      	orrs	r3, r1
 800b642:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b644:	697b      	ldr	r3, [r7, #20]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	685b      	ldr	r3, [r3, #4]
 800b64a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b64e:	697b      	ldr	r3, [r7, #20]
 800b650:	68da      	ldr	r2, [r3, #12]
 800b652:	697b      	ldr	r3, [r7, #20]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	430a      	orrs	r2, r1
 800b658:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b65a:	697b      	ldr	r3, [r7, #20]
 800b65c:	699b      	ldr	r3, [r3, #24]
 800b65e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b660:	697b      	ldr	r3, [r7, #20]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	4aa0      	ldr	r2, [pc, #640]	@ (800b8e8 <UART_SetConfig+0x2e0>)
 800b666:	4293      	cmp	r3, r2
 800b668:	d004      	beq.n	800b674 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b66a:	697b      	ldr	r3, [r7, #20]
 800b66c:	6a1b      	ldr	r3, [r3, #32]
 800b66e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b670:	4313      	orrs	r3, r2
 800b672:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b674:	697b      	ldr	r3, [r7, #20]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	689b      	ldr	r3, [r3, #8]
 800b67a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800b67e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800b682:	697a      	ldr	r2, [r7, #20]
 800b684:	6812      	ldr	r2, [r2, #0]
 800b686:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b688:	430b      	orrs	r3, r1
 800b68a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b68c:	697b      	ldr	r3, [r7, #20]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b692:	f023 010f 	bic.w	r1, r3, #15
 800b696:	697b      	ldr	r3, [r7, #20]
 800b698:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b69a:	697b      	ldr	r3, [r7, #20]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	430a      	orrs	r2, r1
 800b6a0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b6a2:	697b      	ldr	r3, [r7, #20]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	4a91      	ldr	r2, [pc, #580]	@ (800b8ec <UART_SetConfig+0x2e4>)
 800b6a8:	4293      	cmp	r3, r2
 800b6aa:	d125      	bne.n	800b6f8 <UART_SetConfig+0xf0>
 800b6ac:	4b90      	ldr	r3, [pc, #576]	@ (800b8f0 <UART_SetConfig+0x2e8>)
 800b6ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b6b2:	f003 0303 	and.w	r3, r3, #3
 800b6b6:	2b03      	cmp	r3, #3
 800b6b8:	d81a      	bhi.n	800b6f0 <UART_SetConfig+0xe8>
 800b6ba:	a201      	add	r2, pc, #4	@ (adr r2, 800b6c0 <UART_SetConfig+0xb8>)
 800b6bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6c0:	0800b6d1 	.word	0x0800b6d1
 800b6c4:	0800b6e1 	.word	0x0800b6e1
 800b6c8:	0800b6d9 	.word	0x0800b6d9
 800b6cc:	0800b6e9 	.word	0x0800b6e9
 800b6d0:	2301      	movs	r3, #1
 800b6d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b6d6:	e0d6      	b.n	800b886 <UART_SetConfig+0x27e>
 800b6d8:	2302      	movs	r3, #2
 800b6da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b6de:	e0d2      	b.n	800b886 <UART_SetConfig+0x27e>
 800b6e0:	2304      	movs	r3, #4
 800b6e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b6e6:	e0ce      	b.n	800b886 <UART_SetConfig+0x27e>
 800b6e8:	2308      	movs	r3, #8
 800b6ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b6ee:	e0ca      	b.n	800b886 <UART_SetConfig+0x27e>
 800b6f0:	2310      	movs	r3, #16
 800b6f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b6f6:	e0c6      	b.n	800b886 <UART_SetConfig+0x27e>
 800b6f8:	697b      	ldr	r3, [r7, #20]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	4a7d      	ldr	r2, [pc, #500]	@ (800b8f4 <UART_SetConfig+0x2ec>)
 800b6fe:	4293      	cmp	r3, r2
 800b700:	d138      	bne.n	800b774 <UART_SetConfig+0x16c>
 800b702:	4b7b      	ldr	r3, [pc, #492]	@ (800b8f0 <UART_SetConfig+0x2e8>)
 800b704:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b708:	f003 030c 	and.w	r3, r3, #12
 800b70c:	2b0c      	cmp	r3, #12
 800b70e:	d82d      	bhi.n	800b76c <UART_SetConfig+0x164>
 800b710:	a201      	add	r2, pc, #4	@ (adr r2, 800b718 <UART_SetConfig+0x110>)
 800b712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b716:	bf00      	nop
 800b718:	0800b74d 	.word	0x0800b74d
 800b71c:	0800b76d 	.word	0x0800b76d
 800b720:	0800b76d 	.word	0x0800b76d
 800b724:	0800b76d 	.word	0x0800b76d
 800b728:	0800b75d 	.word	0x0800b75d
 800b72c:	0800b76d 	.word	0x0800b76d
 800b730:	0800b76d 	.word	0x0800b76d
 800b734:	0800b76d 	.word	0x0800b76d
 800b738:	0800b755 	.word	0x0800b755
 800b73c:	0800b76d 	.word	0x0800b76d
 800b740:	0800b76d 	.word	0x0800b76d
 800b744:	0800b76d 	.word	0x0800b76d
 800b748:	0800b765 	.word	0x0800b765
 800b74c:	2300      	movs	r3, #0
 800b74e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b752:	e098      	b.n	800b886 <UART_SetConfig+0x27e>
 800b754:	2302      	movs	r3, #2
 800b756:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b75a:	e094      	b.n	800b886 <UART_SetConfig+0x27e>
 800b75c:	2304      	movs	r3, #4
 800b75e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b762:	e090      	b.n	800b886 <UART_SetConfig+0x27e>
 800b764:	2308      	movs	r3, #8
 800b766:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b76a:	e08c      	b.n	800b886 <UART_SetConfig+0x27e>
 800b76c:	2310      	movs	r3, #16
 800b76e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b772:	e088      	b.n	800b886 <UART_SetConfig+0x27e>
 800b774:	697b      	ldr	r3, [r7, #20]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	4a5f      	ldr	r2, [pc, #380]	@ (800b8f8 <UART_SetConfig+0x2f0>)
 800b77a:	4293      	cmp	r3, r2
 800b77c:	d125      	bne.n	800b7ca <UART_SetConfig+0x1c2>
 800b77e:	4b5c      	ldr	r3, [pc, #368]	@ (800b8f0 <UART_SetConfig+0x2e8>)
 800b780:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b784:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800b788:	2b30      	cmp	r3, #48	@ 0x30
 800b78a:	d016      	beq.n	800b7ba <UART_SetConfig+0x1b2>
 800b78c:	2b30      	cmp	r3, #48	@ 0x30
 800b78e:	d818      	bhi.n	800b7c2 <UART_SetConfig+0x1ba>
 800b790:	2b20      	cmp	r3, #32
 800b792:	d00a      	beq.n	800b7aa <UART_SetConfig+0x1a2>
 800b794:	2b20      	cmp	r3, #32
 800b796:	d814      	bhi.n	800b7c2 <UART_SetConfig+0x1ba>
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d002      	beq.n	800b7a2 <UART_SetConfig+0x19a>
 800b79c:	2b10      	cmp	r3, #16
 800b79e:	d008      	beq.n	800b7b2 <UART_SetConfig+0x1aa>
 800b7a0:	e00f      	b.n	800b7c2 <UART_SetConfig+0x1ba>
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b7a8:	e06d      	b.n	800b886 <UART_SetConfig+0x27e>
 800b7aa:	2302      	movs	r3, #2
 800b7ac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b7b0:	e069      	b.n	800b886 <UART_SetConfig+0x27e>
 800b7b2:	2304      	movs	r3, #4
 800b7b4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b7b8:	e065      	b.n	800b886 <UART_SetConfig+0x27e>
 800b7ba:	2308      	movs	r3, #8
 800b7bc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b7c0:	e061      	b.n	800b886 <UART_SetConfig+0x27e>
 800b7c2:	2310      	movs	r3, #16
 800b7c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b7c8:	e05d      	b.n	800b886 <UART_SetConfig+0x27e>
 800b7ca:	697b      	ldr	r3, [r7, #20]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	4a4b      	ldr	r2, [pc, #300]	@ (800b8fc <UART_SetConfig+0x2f4>)
 800b7d0:	4293      	cmp	r3, r2
 800b7d2:	d125      	bne.n	800b820 <UART_SetConfig+0x218>
 800b7d4:	4b46      	ldr	r3, [pc, #280]	@ (800b8f0 <UART_SetConfig+0x2e8>)
 800b7d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b7da:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800b7de:	2bc0      	cmp	r3, #192	@ 0xc0
 800b7e0:	d016      	beq.n	800b810 <UART_SetConfig+0x208>
 800b7e2:	2bc0      	cmp	r3, #192	@ 0xc0
 800b7e4:	d818      	bhi.n	800b818 <UART_SetConfig+0x210>
 800b7e6:	2b80      	cmp	r3, #128	@ 0x80
 800b7e8:	d00a      	beq.n	800b800 <UART_SetConfig+0x1f8>
 800b7ea:	2b80      	cmp	r3, #128	@ 0x80
 800b7ec:	d814      	bhi.n	800b818 <UART_SetConfig+0x210>
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d002      	beq.n	800b7f8 <UART_SetConfig+0x1f0>
 800b7f2:	2b40      	cmp	r3, #64	@ 0x40
 800b7f4:	d008      	beq.n	800b808 <UART_SetConfig+0x200>
 800b7f6:	e00f      	b.n	800b818 <UART_SetConfig+0x210>
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b7fe:	e042      	b.n	800b886 <UART_SetConfig+0x27e>
 800b800:	2302      	movs	r3, #2
 800b802:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b806:	e03e      	b.n	800b886 <UART_SetConfig+0x27e>
 800b808:	2304      	movs	r3, #4
 800b80a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b80e:	e03a      	b.n	800b886 <UART_SetConfig+0x27e>
 800b810:	2308      	movs	r3, #8
 800b812:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b816:	e036      	b.n	800b886 <UART_SetConfig+0x27e>
 800b818:	2310      	movs	r3, #16
 800b81a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b81e:	e032      	b.n	800b886 <UART_SetConfig+0x27e>
 800b820:	697b      	ldr	r3, [r7, #20]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	4a30      	ldr	r2, [pc, #192]	@ (800b8e8 <UART_SetConfig+0x2e0>)
 800b826:	4293      	cmp	r3, r2
 800b828:	d12a      	bne.n	800b880 <UART_SetConfig+0x278>
 800b82a:	4b31      	ldr	r3, [pc, #196]	@ (800b8f0 <UART_SetConfig+0x2e8>)
 800b82c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b830:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b834:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b838:	d01a      	beq.n	800b870 <UART_SetConfig+0x268>
 800b83a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b83e:	d81b      	bhi.n	800b878 <UART_SetConfig+0x270>
 800b840:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b844:	d00c      	beq.n	800b860 <UART_SetConfig+0x258>
 800b846:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b84a:	d815      	bhi.n	800b878 <UART_SetConfig+0x270>
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d003      	beq.n	800b858 <UART_SetConfig+0x250>
 800b850:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b854:	d008      	beq.n	800b868 <UART_SetConfig+0x260>
 800b856:	e00f      	b.n	800b878 <UART_SetConfig+0x270>
 800b858:	2300      	movs	r3, #0
 800b85a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b85e:	e012      	b.n	800b886 <UART_SetConfig+0x27e>
 800b860:	2302      	movs	r3, #2
 800b862:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b866:	e00e      	b.n	800b886 <UART_SetConfig+0x27e>
 800b868:	2304      	movs	r3, #4
 800b86a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b86e:	e00a      	b.n	800b886 <UART_SetConfig+0x27e>
 800b870:	2308      	movs	r3, #8
 800b872:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b876:	e006      	b.n	800b886 <UART_SetConfig+0x27e>
 800b878:	2310      	movs	r3, #16
 800b87a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b87e:	e002      	b.n	800b886 <UART_SetConfig+0x27e>
 800b880:	2310      	movs	r3, #16
 800b882:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b886:	697b      	ldr	r3, [r7, #20]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	4a17      	ldr	r2, [pc, #92]	@ (800b8e8 <UART_SetConfig+0x2e0>)
 800b88c:	4293      	cmp	r3, r2
 800b88e:	f040 80a8 	bne.w	800b9e2 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b892:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b896:	2b08      	cmp	r3, #8
 800b898:	d834      	bhi.n	800b904 <UART_SetConfig+0x2fc>
 800b89a:	a201      	add	r2, pc, #4	@ (adr r2, 800b8a0 <UART_SetConfig+0x298>)
 800b89c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8a0:	0800b8c5 	.word	0x0800b8c5
 800b8a4:	0800b905 	.word	0x0800b905
 800b8a8:	0800b8cd 	.word	0x0800b8cd
 800b8ac:	0800b905 	.word	0x0800b905
 800b8b0:	0800b8d3 	.word	0x0800b8d3
 800b8b4:	0800b905 	.word	0x0800b905
 800b8b8:	0800b905 	.word	0x0800b905
 800b8bc:	0800b905 	.word	0x0800b905
 800b8c0:	0800b8db 	.word	0x0800b8db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b8c4:	f7fc fde2 	bl	800848c <HAL_RCC_GetPCLK1Freq>
 800b8c8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b8ca:	e021      	b.n	800b910 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b8cc:	4b0c      	ldr	r3, [pc, #48]	@ (800b900 <UART_SetConfig+0x2f8>)
 800b8ce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b8d0:	e01e      	b.n	800b910 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b8d2:	f7fc fd6d 	bl	80083b0 <HAL_RCC_GetSysClockFreq>
 800b8d6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b8d8:	e01a      	b.n	800b910 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b8da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b8de:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b8e0:	e016      	b.n	800b910 <UART_SetConfig+0x308>
 800b8e2:	bf00      	nop
 800b8e4:	cfff69f3 	.word	0xcfff69f3
 800b8e8:	40008000 	.word	0x40008000
 800b8ec:	40013800 	.word	0x40013800
 800b8f0:	40021000 	.word	0x40021000
 800b8f4:	40004400 	.word	0x40004400
 800b8f8:	40004800 	.word	0x40004800
 800b8fc:	40004c00 	.word	0x40004c00
 800b900:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800b904:	2300      	movs	r3, #0
 800b906:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b908:	2301      	movs	r3, #1
 800b90a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b90e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b912:	2b00      	cmp	r3, #0
 800b914:	f000 812a 	beq.w	800bb6c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b918:	697b      	ldr	r3, [r7, #20]
 800b91a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b91c:	4a9e      	ldr	r2, [pc, #632]	@ (800bb98 <UART_SetConfig+0x590>)
 800b91e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b922:	461a      	mov	r2, r3
 800b924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b926:	fbb3 f3f2 	udiv	r3, r3, r2
 800b92a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b92c:	697b      	ldr	r3, [r7, #20]
 800b92e:	685a      	ldr	r2, [r3, #4]
 800b930:	4613      	mov	r3, r2
 800b932:	005b      	lsls	r3, r3, #1
 800b934:	4413      	add	r3, r2
 800b936:	69ba      	ldr	r2, [r7, #24]
 800b938:	429a      	cmp	r2, r3
 800b93a:	d305      	bcc.n	800b948 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b93c:	697b      	ldr	r3, [r7, #20]
 800b93e:	685b      	ldr	r3, [r3, #4]
 800b940:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b942:	69ba      	ldr	r2, [r7, #24]
 800b944:	429a      	cmp	r2, r3
 800b946:	d903      	bls.n	800b950 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800b948:	2301      	movs	r3, #1
 800b94a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b94e:	e10d      	b.n	800bb6c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b952:	2200      	movs	r2, #0
 800b954:	60bb      	str	r3, [r7, #8]
 800b956:	60fa      	str	r2, [r7, #12]
 800b958:	697b      	ldr	r3, [r7, #20]
 800b95a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b95c:	4a8e      	ldr	r2, [pc, #568]	@ (800bb98 <UART_SetConfig+0x590>)
 800b95e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b962:	b29b      	uxth	r3, r3
 800b964:	2200      	movs	r2, #0
 800b966:	603b      	str	r3, [r7, #0]
 800b968:	607a      	str	r2, [r7, #4]
 800b96a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b96e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b972:	f7f5 f9b1 	bl	8000cd8 <__aeabi_uldivmod>
 800b976:	4602      	mov	r2, r0
 800b978:	460b      	mov	r3, r1
 800b97a:	4610      	mov	r0, r2
 800b97c:	4619      	mov	r1, r3
 800b97e:	f04f 0200 	mov.w	r2, #0
 800b982:	f04f 0300 	mov.w	r3, #0
 800b986:	020b      	lsls	r3, r1, #8
 800b988:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b98c:	0202      	lsls	r2, r0, #8
 800b98e:	6979      	ldr	r1, [r7, #20]
 800b990:	6849      	ldr	r1, [r1, #4]
 800b992:	0849      	lsrs	r1, r1, #1
 800b994:	2000      	movs	r0, #0
 800b996:	460c      	mov	r4, r1
 800b998:	4605      	mov	r5, r0
 800b99a:	eb12 0804 	adds.w	r8, r2, r4
 800b99e:	eb43 0905 	adc.w	r9, r3, r5
 800b9a2:	697b      	ldr	r3, [r7, #20]
 800b9a4:	685b      	ldr	r3, [r3, #4]
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	469a      	mov	sl, r3
 800b9aa:	4693      	mov	fp, r2
 800b9ac:	4652      	mov	r2, sl
 800b9ae:	465b      	mov	r3, fp
 800b9b0:	4640      	mov	r0, r8
 800b9b2:	4649      	mov	r1, r9
 800b9b4:	f7f5 f990 	bl	8000cd8 <__aeabi_uldivmod>
 800b9b8:	4602      	mov	r2, r0
 800b9ba:	460b      	mov	r3, r1
 800b9bc:	4613      	mov	r3, r2
 800b9be:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b9c0:	6a3b      	ldr	r3, [r7, #32]
 800b9c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b9c6:	d308      	bcc.n	800b9da <UART_SetConfig+0x3d2>
 800b9c8:	6a3b      	ldr	r3, [r7, #32]
 800b9ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b9ce:	d204      	bcs.n	800b9da <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800b9d0:	697b      	ldr	r3, [r7, #20]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	6a3a      	ldr	r2, [r7, #32]
 800b9d6:	60da      	str	r2, [r3, #12]
 800b9d8:	e0c8      	b.n	800bb6c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800b9da:	2301      	movs	r3, #1
 800b9dc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b9e0:	e0c4      	b.n	800bb6c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b9e2:	697b      	ldr	r3, [r7, #20]
 800b9e4:	69db      	ldr	r3, [r3, #28]
 800b9e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b9ea:	d167      	bne.n	800babc <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800b9ec:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b9f0:	2b08      	cmp	r3, #8
 800b9f2:	d828      	bhi.n	800ba46 <UART_SetConfig+0x43e>
 800b9f4:	a201      	add	r2, pc, #4	@ (adr r2, 800b9fc <UART_SetConfig+0x3f4>)
 800b9f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9fa:	bf00      	nop
 800b9fc:	0800ba21 	.word	0x0800ba21
 800ba00:	0800ba29 	.word	0x0800ba29
 800ba04:	0800ba31 	.word	0x0800ba31
 800ba08:	0800ba47 	.word	0x0800ba47
 800ba0c:	0800ba37 	.word	0x0800ba37
 800ba10:	0800ba47 	.word	0x0800ba47
 800ba14:	0800ba47 	.word	0x0800ba47
 800ba18:	0800ba47 	.word	0x0800ba47
 800ba1c:	0800ba3f 	.word	0x0800ba3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ba20:	f7fc fd34 	bl	800848c <HAL_RCC_GetPCLK1Freq>
 800ba24:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ba26:	e014      	b.n	800ba52 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ba28:	f7fc fd46 	bl	80084b8 <HAL_RCC_GetPCLK2Freq>
 800ba2c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ba2e:	e010      	b.n	800ba52 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ba30:	4b5a      	ldr	r3, [pc, #360]	@ (800bb9c <UART_SetConfig+0x594>)
 800ba32:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ba34:	e00d      	b.n	800ba52 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ba36:	f7fc fcbb 	bl	80083b0 <HAL_RCC_GetSysClockFreq>
 800ba3a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ba3c:	e009      	b.n	800ba52 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ba3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ba42:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ba44:	e005      	b.n	800ba52 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800ba46:	2300      	movs	r3, #0
 800ba48:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800ba4a:	2301      	movs	r3, #1
 800ba4c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800ba50:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ba52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	f000 8089 	beq.w	800bb6c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ba5a:	697b      	ldr	r3, [r7, #20]
 800ba5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba5e:	4a4e      	ldr	r2, [pc, #312]	@ (800bb98 <UART_SetConfig+0x590>)
 800ba60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ba64:	461a      	mov	r2, r3
 800ba66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba68:	fbb3 f3f2 	udiv	r3, r3, r2
 800ba6c:	005a      	lsls	r2, r3, #1
 800ba6e:	697b      	ldr	r3, [r7, #20]
 800ba70:	685b      	ldr	r3, [r3, #4]
 800ba72:	085b      	lsrs	r3, r3, #1
 800ba74:	441a      	add	r2, r3
 800ba76:	697b      	ldr	r3, [r7, #20]
 800ba78:	685b      	ldr	r3, [r3, #4]
 800ba7a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba7e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ba80:	6a3b      	ldr	r3, [r7, #32]
 800ba82:	2b0f      	cmp	r3, #15
 800ba84:	d916      	bls.n	800bab4 <UART_SetConfig+0x4ac>
 800ba86:	6a3b      	ldr	r3, [r7, #32]
 800ba88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ba8c:	d212      	bcs.n	800bab4 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ba8e:	6a3b      	ldr	r3, [r7, #32]
 800ba90:	b29b      	uxth	r3, r3
 800ba92:	f023 030f 	bic.w	r3, r3, #15
 800ba96:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ba98:	6a3b      	ldr	r3, [r7, #32]
 800ba9a:	085b      	lsrs	r3, r3, #1
 800ba9c:	b29b      	uxth	r3, r3
 800ba9e:	f003 0307 	and.w	r3, r3, #7
 800baa2:	b29a      	uxth	r2, r3
 800baa4:	8bfb      	ldrh	r3, [r7, #30]
 800baa6:	4313      	orrs	r3, r2
 800baa8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800baaa:	697b      	ldr	r3, [r7, #20]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	8bfa      	ldrh	r2, [r7, #30]
 800bab0:	60da      	str	r2, [r3, #12]
 800bab2:	e05b      	b.n	800bb6c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800bab4:	2301      	movs	r3, #1
 800bab6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800baba:	e057      	b.n	800bb6c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800babc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bac0:	2b08      	cmp	r3, #8
 800bac2:	d828      	bhi.n	800bb16 <UART_SetConfig+0x50e>
 800bac4:	a201      	add	r2, pc, #4	@ (adr r2, 800bacc <UART_SetConfig+0x4c4>)
 800bac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baca:	bf00      	nop
 800bacc:	0800baf1 	.word	0x0800baf1
 800bad0:	0800baf9 	.word	0x0800baf9
 800bad4:	0800bb01 	.word	0x0800bb01
 800bad8:	0800bb17 	.word	0x0800bb17
 800badc:	0800bb07 	.word	0x0800bb07
 800bae0:	0800bb17 	.word	0x0800bb17
 800bae4:	0800bb17 	.word	0x0800bb17
 800bae8:	0800bb17 	.word	0x0800bb17
 800baec:	0800bb0f 	.word	0x0800bb0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800baf0:	f7fc fccc 	bl	800848c <HAL_RCC_GetPCLK1Freq>
 800baf4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800baf6:	e014      	b.n	800bb22 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800baf8:	f7fc fcde 	bl	80084b8 <HAL_RCC_GetPCLK2Freq>
 800bafc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bafe:	e010      	b.n	800bb22 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bb00:	4b26      	ldr	r3, [pc, #152]	@ (800bb9c <UART_SetConfig+0x594>)
 800bb02:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bb04:	e00d      	b.n	800bb22 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bb06:	f7fc fc53 	bl	80083b0 <HAL_RCC_GetSysClockFreq>
 800bb0a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bb0c:	e009      	b.n	800bb22 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bb0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bb12:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bb14:	e005      	b.n	800bb22 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800bb16:	2300      	movs	r3, #0
 800bb18:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800bb1a:	2301      	movs	r3, #1
 800bb1c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800bb20:	bf00      	nop
    }

    if (pclk != 0U)
 800bb22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d021      	beq.n	800bb6c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bb28:	697b      	ldr	r3, [r7, #20]
 800bb2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb2c:	4a1a      	ldr	r2, [pc, #104]	@ (800bb98 <UART_SetConfig+0x590>)
 800bb2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bb32:	461a      	mov	r2, r3
 800bb34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb36:	fbb3 f2f2 	udiv	r2, r3, r2
 800bb3a:	697b      	ldr	r3, [r7, #20]
 800bb3c:	685b      	ldr	r3, [r3, #4]
 800bb3e:	085b      	lsrs	r3, r3, #1
 800bb40:	441a      	add	r2, r3
 800bb42:	697b      	ldr	r3, [r7, #20]
 800bb44:	685b      	ldr	r3, [r3, #4]
 800bb46:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb4a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bb4c:	6a3b      	ldr	r3, [r7, #32]
 800bb4e:	2b0f      	cmp	r3, #15
 800bb50:	d909      	bls.n	800bb66 <UART_SetConfig+0x55e>
 800bb52:	6a3b      	ldr	r3, [r7, #32]
 800bb54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bb58:	d205      	bcs.n	800bb66 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bb5a:	6a3b      	ldr	r3, [r7, #32]
 800bb5c:	b29a      	uxth	r2, r3
 800bb5e:	697b      	ldr	r3, [r7, #20]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	60da      	str	r2, [r3, #12]
 800bb64:	e002      	b.n	800bb6c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800bb66:	2301      	movs	r3, #1
 800bb68:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bb6c:	697b      	ldr	r3, [r7, #20]
 800bb6e:	2201      	movs	r2, #1
 800bb70:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800bb74:	697b      	ldr	r3, [r7, #20]
 800bb76:	2201      	movs	r2, #1
 800bb78:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bb7c:	697b      	ldr	r3, [r7, #20]
 800bb7e:	2200      	movs	r2, #0
 800bb80:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800bb82:	697b      	ldr	r3, [r7, #20]
 800bb84:	2200      	movs	r2, #0
 800bb86:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800bb88:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
<<<<<<< HEAD
 800ac08:	4618      	mov	r0, r3
 800ac0a:	3730      	adds	r7, #48	@ 0x30
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ac12:	bf00      	nop
 800ac14:	08012818 	.word	0x08012818
 800ac18:	00f42400 	.word	0x00f42400
=======
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	3730      	adds	r7, #48	@ 0x30
 800bb90:	46bd      	mov	sp, r7
 800bb92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bb96:	bf00      	nop
 800bb98:	08013af4 	.word	0x08013af4
 800bb9c:	00f42400 	.word	0x00f42400
>>>>>>> f88694781bd54d0bca96bec7ac145bdac62fa329

0800bba0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bba0:	b480      	push	{r7}
 800bba2:	b083      	sub	sp, #12
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bbac:	f003 0308 	and.w	r3, r3, #8
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d00a      	beq.n	800bbca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	685b      	ldr	r3, [r3, #4]
 800bbba:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	430a      	orrs	r2, r1
 800bbc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bbce:	f003 0301 	and.w	r3, r3, #1
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d00a      	beq.n	800bbec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	685b      	ldr	r3, [r3, #4]
 800bbdc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	430a      	orrs	r2, r1
 800bbea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bbf0:	f003 0302 	and.w	r3, r3, #2
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d00a      	beq.n	800bc0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	685b      	ldr	r3, [r3, #4]
 800bbfe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	430a      	orrs	r2, r1
 800bc0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc12:	f003 0304 	and.w	r3, r3, #4
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d00a      	beq.n	800bc30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	685b      	ldr	r3, [r3, #4]
 800bc20:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	430a      	orrs	r2, r1
 800bc2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc34:	f003 0310 	and.w	r3, r3, #16
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d00a      	beq.n	800bc52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	689b      	ldr	r3, [r3, #8]
 800bc42:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	430a      	orrs	r2, r1
 800bc50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc56:	f003 0320 	and.w	r3, r3, #32
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d00a      	beq.n	800bc74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	689b      	ldr	r3, [r3, #8]
 800bc64:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	430a      	orrs	r2, r1
 800bc72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d01a      	beq.n	800bcb6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	685b      	ldr	r3, [r3, #4]
 800bc86:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	430a      	orrs	r2, r1
 800bc94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bc9a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bc9e:	d10a      	bne.n	800bcb6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	685b      	ldr	r3, [r3, #4]
 800bca6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	430a      	orrs	r2, r1
 800bcb4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d00a      	beq.n	800bcd8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	685b      	ldr	r3, [r3, #4]
 800bcc8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	430a      	orrs	r2, r1
 800bcd6:	605a      	str	r2, [r3, #4]
  }
}
 800bcd8:	bf00      	nop
 800bcda:	370c      	adds	r7, #12
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce2:	4770      	bx	lr

0800bce4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bce4:	b580      	push	{r7, lr}
 800bce6:	b098      	sub	sp, #96	@ 0x60
 800bce8:	af02      	add	r7, sp, #8
 800bcea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	2200      	movs	r2, #0
 800bcf0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bcf4:	f7f6 fdd4 	bl	80028a0 <HAL_GetTick>
 800bcf8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	f003 0308 	and.w	r3, r3, #8
 800bd04:	2b08      	cmp	r3, #8
 800bd06:	d12f      	bne.n	800bd68 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bd08:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bd0c:	9300      	str	r3, [sp, #0]
 800bd0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bd10:	2200      	movs	r2, #0
 800bd12:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800bd16:	6878      	ldr	r0, [r7, #4]
 800bd18:	f000 f88e 	bl	800be38 <UART_WaitOnFlagUntilTimeout>
 800bd1c:	4603      	mov	r3, r0
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d022      	beq.n	800bd68 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd2a:	e853 3f00 	ldrex	r3, [r3]
 800bd2e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bd30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bd36:	653b      	str	r3, [r7, #80]	@ 0x50
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	461a      	mov	r2, r3
 800bd3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bd40:	647b      	str	r3, [r7, #68]	@ 0x44
 800bd42:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd44:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bd46:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bd48:	e841 2300 	strex	r3, r2, [r1]
 800bd4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bd4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d1e6      	bne.n	800bd22 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	2220      	movs	r2, #32
 800bd58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	2200      	movs	r2, #0
 800bd60:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bd64:	2303      	movs	r3, #3
 800bd66:	e063      	b.n	800be30 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	f003 0304 	and.w	r3, r3, #4
 800bd72:	2b04      	cmp	r3, #4
 800bd74:	d149      	bne.n	800be0a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bd76:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bd7a:	9300      	str	r3, [sp, #0]
 800bd7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bd7e:	2200      	movs	r2, #0
 800bd80:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800bd84:	6878      	ldr	r0, [r7, #4]
 800bd86:	f000 f857 	bl	800be38 <UART_WaitOnFlagUntilTimeout>
 800bd8a:	4603      	mov	r3, r0
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d03c      	beq.n	800be0a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd98:	e853 3f00 	ldrex	r3, [r3]
 800bd9c:	623b      	str	r3, [r7, #32]
   return(result);
 800bd9e:	6a3b      	ldr	r3, [r7, #32]
 800bda0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bda4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	461a      	mov	r2, r3
 800bdac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bdae:	633b      	str	r3, [r7, #48]	@ 0x30
 800bdb0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdb2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bdb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bdb6:	e841 2300 	strex	r3, r2, [r1]
 800bdba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bdbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d1e6      	bne.n	800bd90 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	3308      	adds	r3, #8
 800bdc8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdca:	693b      	ldr	r3, [r7, #16]
 800bdcc:	e853 3f00 	ldrex	r3, [r3]
 800bdd0:	60fb      	str	r3, [r7, #12]
   return(result);
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	f023 0301 	bic.w	r3, r3, #1
 800bdd8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	3308      	adds	r3, #8
 800bde0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bde2:	61fa      	str	r2, [r7, #28]
 800bde4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bde6:	69b9      	ldr	r1, [r7, #24]
 800bde8:	69fa      	ldr	r2, [r7, #28]
 800bdea:	e841 2300 	strex	r3, r2, [r1]
 800bdee:	617b      	str	r3, [r7, #20]
   return(result);
 800bdf0:	697b      	ldr	r3, [r7, #20]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d1e5      	bne.n	800bdc2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	2220      	movs	r2, #32
 800bdfa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	2200      	movs	r2, #0
 800be02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800be06:	2303      	movs	r3, #3
 800be08:	e012      	b.n	800be30 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	2220      	movs	r2, #32
 800be0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	2220      	movs	r2, #32
 800be16:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	2200      	movs	r2, #0
 800be1e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	2200      	movs	r2, #0
 800be24:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	2200      	movs	r2, #0
 800be2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800be2e:	2300      	movs	r3, #0
}
 800be30:	4618      	mov	r0, r3
 800be32:	3758      	adds	r7, #88	@ 0x58
 800be34:	46bd      	mov	sp, r7
 800be36:	bd80      	pop	{r7, pc}

0800be38 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800be38:	b580      	push	{r7, lr}
 800be3a:	b084      	sub	sp, #16
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	60f8      	str	r0, [r7, #12]
 800be40:	60b9      	str	r1, [r7, #8]
 800be42:	603b      	str	r3, [r7, #0]
 800be44:	4613      	mov	r3, r2
 800be46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800be48:	e04f      	b.n	800beea <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800be4a:	69bb      	ldr	r3, [r7, #24]
 800be4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be50:	d04b      	beq.n	800beea <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800be52:	f7f6 fd25 	bl	80028a0 <HAL_GetTick>
 800be56:	4602      	mov	r2, r0
 800be58:	683b      	ldr	r3, [r7, #0]
 800be5a:	1ad3      	subs	r3, r2, r3
 800be5c:	69ba      	ldr	r2, [r7, #24]
 800be5e:	429a      	cmp	r2, r3
 800be60:	d302      	bcc.n	800be68 <UART_WaitOnFlagUntilTimeout+0x30>
 800be62:	69bb      	ldr	r3, [r7, #24]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d101      	bne.n	800be6c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800be68:	2303      	movs	r3, #3
 800be6a:	e04e      	b.n	800bf0a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	f003 0304 	and.w	r3, r3, #4
 800be76:	2b00      	cmp	r3, #0
 800be78:	d037      	beq.n	800beea <UART_WaitOnFlagUntilTimeout+0xb2>
 800be7a:	68bb      	ldr	r3, [r7, #8]
 800be7c:	2b80      	cmp	r3, #128	@ 0x80
 800be7e:	d034      	beq.n	800beea <UART_WaitOnFlagUntilTimeout+0xb2>
 800be80:	68bb      	ldr	r3, [r7, #8]
 800be82:	2b40      	cmp	r3, #64	@ 0x40
 800be84:	d031      	beq.n	800beea <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	69db      	ldr	r3, [r3, #28]
 800be8c:	f003 0308 	and.w	r3, r3, #8
 800be90:	2b08      	cmp	r3, #8
 800be92:	d110      	bne.n	800beb6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	2208      	movs	r2, #8
 800be9a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800be9c:	68f8      	ldr	r0, [r7, #12]
 800be9e:	f000 f920 	bl	800c0e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	2208      	movs	r2, #8
 800bea6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	2200      	movs	r2, #0
 800beae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800beb2:	2301      	movs	r3, #1
 800beb4:	e029      	b.n	800bf0a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	69db      	ldr	r3, [r3, #28]
 800bebc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bec0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bec4:	d111      	bne.n	800beea <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bece:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bed0:	68f8      	ldr	r0, [r7, #12]
 800bed2:	f000 f906 	bl	800c0e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	2220      	movs	r2, #32
 800beda:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	2200      	movs	r2, #0
 800bee2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800bee6:	2303      	movs	r3, #3
 800bee8:	e00f      	b.n	800bf0a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	69da      	ldr	r2, [r3, #28]
 800bef0:	68bb      	ldr	r3, [r7, #8]
 800bef2:	4013      	ands	r3, r2
 800bef4:	68ba      	ldr	r2, [r7, #8]
 800bef6:	429a      	cmp	r2, r3
 800bef8:	bf0c      	ite	eq
 800befa:	2301      	moveq	r3, #1
 800befc:	2300      	movne	r3, #0
 800befe:	b2db      	uxtb	r3, r3
 800bf00:	461a      	mov	r2, r3
 800bf02:	79fb      	ldrb	r3, [r7, #7]
 800bf04:	429a      	cmp	r2, r3
 800bf06:	d0a0      	beq.n	800be4a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bf08:	2300      	movs	r3, #0
}
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	3710      	adds	r7, #16
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	bd80      	pop	{r7, pc}
	...

0800bf14 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b096      	sub	sp, #88	@ 0x58
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	60f8      	str	r0, [r7, #12]
 800bf1c:	60b9      	str	r1, [r7, #8]
 800bf1e:	4613      	mov	r3, r2
 800bf20:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	68ba      	ldr	r2, [r7, #8]
 800bf26:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	88fa      	ldrh	r2, [r7, #6]
 800bf2c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	2200      	movs	r2, #0
 800bf34:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	2222      	movs	r2, #34	@ 0x22
 800bf3c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d02d      	beq.n	800bfa6 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bf50:	4a40      	ldr	r2, [pc, #256]	@ (800c054 <UART_Start_Receive_DMA+0x140>)
 800bf52:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bf5a:	4a3f      	ldr	r2, [pc, #252]	@ (800c058 <UART_Start_Receive_DMA+0x144>)
 800bf5c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bf64:	4a3d      	ldr	r2, [pc, #244]	@ (800c05c <UART_Start_Receive_DMA+0x148>)
 800bf66:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bf6e:	2200      	movs	r2, #0
 800bf70:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	3324      	adds	r3, #36	@ 0x24
 800bf7e:	4619      	mov	r1, r3
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bf84:	461a      	mov	r2, r3
 800bf86:	88fb      	ldrh	r3, [r7, #6]
 800bf88:	f7f9 ff12 	bl	8005db0 <HAL_DMA_Start_IT>
 800bf8c:	4603      	mov	r3, r0
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d009      	beq.n	800bfa6 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	2210      	movs	r2, #16
 800bf96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	2220      	movs	r2, #32
 800bf9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800bfa2:	2301      	movs	r3, #1
 800bfa4:	e051      	b.n	800c04a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	691b      	ldr	r3, [r3, #16]
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d018      	beq.n	800bfe0 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bfb6:	e853 3f00 	ldrex	r3, [r3]
 800bfba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bfbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfbe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bfc2:	657b      	str	r3, [r7, #84]	@ 0x54
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	461a      	mov	r2, r3
 800bfca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bfcc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bfce:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfd0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800bfd2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bfd4:	e841 2300 	strex	r3, r2, [r1]
 800bfd8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800bfda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d1e6      	bne.n	800bfae <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	3308      	adds	r3, #8
 800bfe6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfea:	e853 3f00 	ldrex	r3, [r3]
 800bfee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bff2:	f043 0301 	orr.w	r3, r3, #1
 800bff6:	653b      	str	r3, [r7, #80]	@ 0x50
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	3308      	adds	r3, #8
 800bffe:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c000:	637a      	str	r2, [r7, #52]	@ 0x34
 800c002:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c004:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c006:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c008:	e841 2300 	strex	r3, r2, [r1]
 800c00c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800c00e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c010:	2b00      	cmp	r3, #0
 800c012:	d1e5      	bne.n	800bfe0 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	3308      	adds	r3, #8
 800c01a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c01c:	697b      	ldr	r3, [r7, #20]
 800c01e:	e853 3f00 	ldrex	r3, [r3]
 800c022:	613b      	str	r3, [r7, #16]
   return(result);
 800c024:	693b      	ldr	r3, [r7, #16]
 800c026:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c02a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	3308      	adds	r3, #8
 800c032:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c034:	623a      	str	r2, [r7, #32]
 800c036:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c038:	69f9      	ldr	r1, [r7, #28]
 800c03a:	6a3a      	ldr	r2, [r7, #32]
 800c03c:	e841 2300 	strex	r3, r2, [r1]
 800c040:	61bb      	str	r3, [r7, #24]
   return(result);
 800c042:	69bb      	ldr	r3, [r7, #24]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d1e5      	bne.n	800c014 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800c048:	2300      	movs	r3, #0
}
 800c04a:	4618      	mov	r0, r3
 800c04c:	3758      	adds	r7, #88	@ 0x58
 800c04e:	46bd      	mov	sp, r7
 800c050:	bd80      	pop	{r7, pc}
 800c052:	bf00      	nop
 800c054:	0800c265 	.word	0x0800c265
 800c058:	0800c391 	.word	0x0800c391
 800c05c:	0800c3cf 	.word	0x0800c3cf

0800c060 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c060:	b480      	push	{r7}
 800c062:	b08f      	sub	sp, #60	@ 0x3c
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c06e:	6a3b      	ldr	r3, [r7, #32]
 800c070:	e853 3f00 	ldrex	r3, [r3]
 800c074:	61fb      	str	r3, [r7, #28]
   return(result);
 800c076:	69fb      	ldr	r3, [r7, #28]
 800c078:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800c07c:	637b      	str	r3, [r7, #52]	@ 0x34
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	461a      	mov	r2, r3
 800c084:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c086:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c088:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c08a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c08c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c08e:	e841 2300 	strex	r3, r2, [r1]
 800c092:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c096:	2b00      	cmp	r3, #0
 800c098:	d1e6      	bne.n	800c068 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	3308      	adds	r3, #8
 800c0a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	e853 3f00 	ldrex	r3, [r3]
 800c0a8:	60bb      	str	r3, [r7, #8]
   return(result);
 800c0aa:	68bb      	ldr	r3, [r7, #8]
 800c0ac:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800c0b0:	633b      	str	r3, [r7, #48]	@ 0x30
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	3308      	adds	r3, #8
 800c0b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c0ba:	61ba      	str	r2, [r7, #24]
 800c0bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0be:	6979      	ldr	r1, [r7, #20]
 800c0c0:	69ba      	ldr	r2, [r7, #24]
 800c0c2:	e841 2300 	strex	r3, r2, [r1]
 800c0c6:	613b      	str	r3, [r7, #16]
   return(result);
 800c0c8:	693b      	ldr	r3, [r7, #16]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d1e5      	bne.n	800c09a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	2220      	movs	r2, #32
 800c0d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800c0d6:	bf00      	nop
 800c0d8:	373c      	adds	r7, #60	@ 0x3c
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e0:	4770      	bx	lr

0800c0e2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c0e2:	b480      	push	{r7}
 800c0e4:	b095      	sub	sp, #84	@ 0x54
 800c0e6:	af00      	add	r7, sp, #0
 800c0e8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c0f2:	e853 3f00 	ldrex	r3, [r3]
 800c0f6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c0f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0fa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c0fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	461a      	mov	r2, r3
 800c106:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c108:	643b      	str	r3, [r7, #64]	@ 0x40
 800c10a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c10c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c10e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c110:	e841 2300 	strex	r3, r2, [r1]
 800c114:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d1e6      	bne.n	800c0ea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	3308      	adds	r3, #8
 800c122:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c124:	6a3b      	ldr	r3, [r7, #32]
 800c126:	e853 3f00 	ldrex	r3, [r3]
 800c12a:	61fb      	str	r3, [r7, #28]
   return(result);
 800c12c:	69fb      	ldr	r3, [r7, #28]
 800c12e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c132:	f023 0301 	bic.w	r3, r3, #1
 800c136:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	3308      	adds	r3, #8
 800c13e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c140:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c142:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c144:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c146:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c148:	e841 2300 	strex	r3, r2, [r1]
 800c14c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c14e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c150:	2b00      	cmp	r3, #0
 800c152:	d1e3      	bne.n	800c11c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c158:	2b01      	cmp	r3, #1
 800c15a:	d118      	bne.n	800c18e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	e853 3f00 	ldrex	r3, [r3]
 800c168:	60bb      	str	r3, [r7, #8]
   return(result);
 800c16a:	68bb      	ldr	r3, [r7, #8]
 800c16c:	f023 0310 	bic.w	r3, r3, #16
 800c170:	647b      	str	r3, [r7, #68]	@ 0x44
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	461a      	mov	r2, r3
 800c178:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c17a:	61bb      	str	r3, [r7, #24]
 800c17c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c17e:	6979      	ldr	r1, [r7, #20]
 800c180:	69ba      	ldr	r2, [r7, #24]
 800c182:	e841 2300 	strex	r3, r2, [r1]
 800c186:	613b      	str	r3, [r7, #16]
   return(result);
 800c188:	693b      	ldr	r3, [r7, #16]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d1e6      	bne.n	800c15c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	2220      	movs	r2, #32
 800c192:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	2200      	movs	r2, #0
 800c19a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	2200      	movs	r2, #0
 800c1a0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c1a2:	bf00      	nop
 800c1a4:	3754      	adds	r7, #84	@ 0x54
 800c1a6:	46bd      	mov	sp, r7
 800c1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ac:	4770      	bx	lr

0800c1ae <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c1ae:	b580      	push	{r7, lr}
 800c1b0:	b090      	sub	sp, #64	@ 0x40
 800c1b2:	af00      	add	r7, sp, #0
 800c1b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c1ba:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	f003 0320 	and.w	r3, r3, #32
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d137      	bne.n	800c23a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800c1ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c1cc:	2200      	movs	r2, #0
 800c1ce:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c1d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	3308      	adds	r3, #8
 800c1d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1dc:	e853 3f00 	ldrex	r3, [r3]
 800c1e0:	623b      	str	r3, [r7, #32]
   return(result);
 800c1e2:	6a3b      	ldr	r3, [r7, #32]
 800c1e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c1e8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c1ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	3308      	adds	r3, #8
 800c1f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c1f2:	633a      	str	r2, [r7, #48]	@ 0x30
 800c1f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c1f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c1fa:	e841 2300 	strex	r3, r2, [r1]
 800c1fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c202:	2b00      	cmp	r3, #0
 800c204:	d1e5      	bne.n	800c1d2 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c206:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c20c:	693b      	ldr	r3, [r7, #16]
 800c20e:	e853 3f00 	ldrex	r3, [r3]
 800c212:	60fb      	str	r3, [r7, #12]
   return(result);
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c21a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c21c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	461a      	mov	r2, r3
 800c222:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c224:	61fb      	str	r3, [r7, #28]
 800c226:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c228:	69b9      	ldr	r1, [r7, #24]
 800c22a:	69fa      	ldr	r2, [r7, #28]
 800c22c:	e841 2300 	strex	r3, r2, [r1]
 800c230:	617b      	str	r3, [r7, #20]
   return(result);
 800c232:	697b      	ldr	r3, [r7, #20]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d1e6      	bne.n	800c206 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c238:	e002      	b.n	800c240 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800c23a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c23c:	f7ff f99c 	bl	800b578 <HAL_UART_TxCpltCallback>
}
 800c240:	bf00      	nop
 800c242:	3740      	adds	r7, #64	@ 0x40
 800c244:	46bd      	mov	sp, r7
 800c246:	bd80      	pop	{r7, pc}

0800c248 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b084      	sub	sp, #16
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c254:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800c256:	68f8      	ldr	r0, [r7, #12]
 800c258:	f7ff f998 	bl	800b58c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c25c:	bf00      	nop
 800c25e:	3710      	adds	r7, #16
 800c260:	46bd      	mov	sp, r7
 800c262:	bd80      	pop	{r7, pc}

0800c264 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c264:	b580      	push	{r7, lr}
 800c266:	b09c      	sub	sp, #112	@ 0x70
 800c268:	af00      	add	r7, sp, #0
 800c26a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c270:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	f003 0320 	and.w	r3, r3, #32
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d171      	bne.n	800c364 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800c280:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c282:	2200      	movs	r2, #0
 800c284:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c288:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c28e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c290:	e853 3f00 	ldrex	r3, [r3]
 800c294:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c296:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c298:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c29c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c29e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	461a      	mov	r2, r3
 800c2a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c2a6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c2a8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2aa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c2ac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c2ae:	e841 2300 	strex	r3, r2, [r1]
 800c2b2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c2b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d1e6      	bne.n	800c288 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c2ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	3308      	adds	r3, #8
 800c2c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2c4:	e853 3f00 	ldrex	r3, [r3]
 800c2c8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c2ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c2cc:	f023 0301 	bic.w	r3, r3, #1
 800c2d0:	667b      	str	r3, [r7, #100]	@ 0x64
 800c2d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	3308      	adds	r3, #8
 800c2d8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c2da:	647a      	str	r2, [r7, #68]	@ 0x44
 800c2dc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2de:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c2e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c2e2:	e841 2300 	strex	r3, r2, [r1]
 800c2e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c2e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d1e5      	bne.n	800c2ba <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c2ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	3308      	adds	r3, #8
 800c2f4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2f8:	e853 3f00 	ldrex	r3, [r3]
 800c2fc:	623b      	str	r3, [r7, #32]
   return(result);
 800c2fe:	6a3b      	ldr	r3, [r7, #32]
 800c300:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c304:	663b      	str	r3, [r7, #96]	@ 0x60
 800c306:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	3308      	adds	r3, #8
 800c30c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c30e:	633a      	str	r2, [r7, #48]	@ 0x30
 800c310:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c312:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c314:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c316:	e841 2300 	strex	r3, r2, [r1]
 800c31a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c31c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d1e5      	bne.n	800c2ee <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c322:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c324:	2220      	movs	r2, #32
 800c326:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c32a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c32c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c32e:	2b01      	cmp	r3, #1
 800c330:	d118      	bne.n	800c364 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c332:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c338:	693b      	ldr	r3, [r7, #16]
 800c33a:	e853 3f00 	ldrex	r3, [r3]
 800c33e:	60fb      	str	r3, [r7, #12]
   return(result);
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	f023 0310 	bic.w	r3, r3, #16
 800c346:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c348:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	461a      	mov	r2, r3
 800c34e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c350:	61fb      	str	r3, [r7, #28]
 800c352:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c354:	69b9      	ldr	r1, [r7, #24]
 800c356:	69fa      	ldr	r2, [r7, #28]
 800c358:	e841 2300 	strex	r3, r2, [r1]
 800c35c:	617b      	str	r3, [r7, #20]
   return(result);
 800c35e:	697b      	ldr	r3, [r7, #20]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d1e6      	bne.n	800c332 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c364:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c366:	2200      	movs	r2, #0
 800c368:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c36a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c36c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c36e:	2b01      	cmp	r3, #1
 800c370:	d107      	bne.n	800c382 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
<<<<<<< HEAD
 800b3ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b3f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b3f4:	4619      	mov	r1, r3
 800b3f6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b3f8:	f001 ff42 	bl	800d280 <HAL_UARTEx_RxEventCallback>
=======
 800c372:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c374:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c378:	4619      	mov	r1, r3
 800c37a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c37c:	f001 ff52 	bl	800e224 <HAL_UARTEx_RxEventCallback>
>>>>>>> f88694781bd54d0bca96bec7ac145bdac62fa329
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c380:	e002      	b.n	800c388 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800c382:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c384:	f7ff f90c 	bl	800b5a0 <HAL_UART_RxCpltCallback>
}
 800c388:	bf00      	nop
 800c38a:	3770      	adds	r7, #112	@ 0x70
 800c38c:	46bd      	mov	sp, r7
 800c38e:	bd80      	pop	{r7, pc}

0800c390 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c390:	b580      	push	{r7, lr}
 800c392:	b084      	sub	sp, #16
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c39c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	2201      	movs	r2, #1
 800c3a2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c3a8:	2b01      	cmp	r3, #1
 800c3aa:	d109      	bne.n	800c3c0 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
<<<<<<< HEAD
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b42e:	085b      	lsrs	r3, r3, #1
 800b430:	b29b      	uxth	r3, r3
 800b432:	4619      	mov	r1, r3
 800b434:	68f8      	ldr	r0, [r7, #12]
 800b436:	f001 ff23 	bl	800d280 <HAL_UARTEx_RxEventCallback>
=======
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c3b2:	085b      	lsrs	r3, r3, #1
 800c3b4:	b29b      	uxth	r3, r3
 800c3b6:	4619      	mov	r1, r3
 800c3b8:	68f8      	ldr	r0, [r7, #12]
 800c3ba:	f001 ff33 	bl	800e224 <HAL_UARTEx_RxEventCallback>
>>>>>>> f88694781bd54d0bca96bec7ac145bdac62fa329
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c3be:	e002      	b.n	800c3c6 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800c3c0:	68f8      	ldr	r0, [r7, #12]
 800c3c2:	f7ff f8f7 	bl	800b5b4 <HAL_UART_RxHalfCpltCallback>
}
 800c3c6:	bf00      	nop
 800c3c8:	3710      	adds	r7, #16
 800c3ca:	46bd      	mov	sp, r7
 800c3cc:	bd80      	pop	{r7, pc}

0800c3ce <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c3ce:	b580      	push	{r7, lr}
 800c3d0:	b086      	sub	sp, #24
 800c3d2:	af00      	add	r7, sp, #0
 800c3d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c3da:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c3dc:	697b      	ldr	r3, [r7, #20]
 800c3de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c3e2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c3e4:	697b      	ldr	r3, [r7, #20]
 800c3e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c3ea:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c3ec:	697b      	ldr	r3, [r7, #20]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	689b      	ldr	r3, [r3, #8]
 800c3f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c3f6:	2b80      	cmp	r3, #128	@ 0x80
 800c3f8:	d109      	bne.n	800c40e <UART_DMAError+0x40>
 800c3fa:	693b      	ldr	r3, [r7, #16]
 800c3fc:	2b21      	cmp	r3, #33	@ 0x21
 800c3fe:	d106      	bne.n	800c40e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c400:	697b      	ldr	r3, [r7, #20]
 800c402:	2200      	movs	r2, #0
 800c404:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800c408:	6978      	ldr	r0, [r7, #20]
 800c40a:	f7ff fe29 	bl	800c060 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c40e:	697b      	ldr	r3, [r7, #20]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	689b      	ldr	r3, [r3, #8]
 800c414:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c418:	2b40      	cmp	r3, #64	@ 0x40
 800c41a:	d109      	bne.n	800c430 <UART_DMAError+0x62>
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	2b22      	cmp	r3, #34	@ 0x22
 800c420:	d106      	bne.n	800c430 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c422:	697b      	ldr	r3, [r7, #20]
 800c424:	2200      	movs	r2, #0
 800c426:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800c42a:	6978      	ldr	r0, [r7, #20]
 800c42c:	f7ff fe59 	bl	800c0e2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c430:	697b      	ldr	r3, [r7, #20]
 800c432:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c436:	f043 0210 	orr.w	r2, r3, #16
 800c43a:	697b      	ldr	r3, [r7, #20]
 800c43c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c440:	6978      	ldr	r0, [r7, #20]
 800c442:	f7ff f8c1 	bl	800b5c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c446:	bf00      	nop
 800c448:	3718      	adds	r7, #24
 800c44a:	46bd      	mov	sp, r7
 800c44c:	bd80      	pop	{r7, pc}

0800c44e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c44e:	b580      	push	{r7, lr}
 800c450:	b084      	sub	sp, #16
 800c452:	af00      	add	r7, sp, #0
 800c454:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c45a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	2200      	movs	r2, #0
 800c460:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	2200      	movs	r2, #0
 800c468:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c46c:	68f8      	ldr	r0, [r7, #12]
 800c46e:	f7ff f8ab 	bl	800b5c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c472:	bf00      	nop
 800c474:	3710      	adds	r7, #16
 800c476:	46bd      	mov	sp, r7
 800c478:	bd80      	pop	{r7, pc}

0800c47a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c47a:	b580      	push	{r7, lr}
 800c47c:	b088      	sub	sp, #32
 800c47e:	af00      	add	r7, sp, #0
 800c480:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	e853 3f00 	ldrex	r3, [r3]
 800c48e:	60bb      	str	r3, [r7, #8]
   return(result);
 800c490:	68bb      	ldr	r3, [r7, #8]
 800c492:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c496:	61fb      	str	r3, [r7, #28]
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	461a      	mov	r2, r3
 800c49e:	69fb      	ldr	r3, [r7, #28]
 800c4a0:	61bb      	str	r3, [r7, #24]
 800c4a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4a4:	6979      	ldr	r1, [r7, #20]
 800c4a6:	69ba      	ldr	r2, [r7, #24]
 800c4a8:	e841 2300 	strex	r3, r2, [r1]
 800c4ac:	613b      	str	r3, [r7, #16]
   return(result);
 800c4ae:	693b      	ldr	r3, [r7, #16]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d1e6      	bne.n	800c482 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	2220      	movs	r2, #32
 800c4b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	2200      	movs	r2, #0
 800c4c0:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c4c2:	6878      	ldr	r0, [r7, #4]
 800c4c4:	f7ff f858 	bl	800b578 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c4c8:	bf00      	nop
 800c4ca:	3720      	adds	r7, #32
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	bd80      	pop	{r7, pc}

0800c4d0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c4d0:	b480      	push	{r7}
 800c4d2:	b083      	sub	sp, #12
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c4d8:	bf00      	nop
 800c4da:	370c      	adds	r7, #12
 800c4dc:	46bd      	mov	sp, r7
 800c4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e2:	4770      	bx	lr

0800c4e4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c4e4:	b480      	push	{r7}
 800c4e6:	b083      	sub	sp, #12
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c4ec:	bf00      	nop
 800c4ee:	370c      	adds	r7, #12
 800c4f0:	46bd      	mov	sp, r7
 800c4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f6:	4770      	bx	lr

0800c4f8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c4f8:	b480      	push	{r7}
 800c4fa:	b083      	sub	sp, #12
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c500:	bf00      	nop
 800c502:	370c      	adds	r7, #12
 800c504:	46bd      	mov	sp, r7
 800c506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50a:	4770      	bx	lr

0800c50c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c50c:	b480      	push	{r7}
 800c50e:	b085      	sub	sp, #20
 800c510:	af00      	add	r7, sp, #0
 800c512:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c51a:	2b01      	cmp	r3, #1
 800c51c:	d101      	bne.n	800c522 <HAL_UARTEx_DisableFifoMode+0x16>
 800c51e:	2302      	movs	r3, #2
 800c520:	e027      	b.n	800c572 <HAL_UARTEx_DisableFifoMode+0x66>
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	2201      	movs	r2, #1
 800c526:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	2224      	movs	r2, #36	@ 0x24
 800c52e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	681a      	ldr	r2, [r3, #0]
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	f022 0201 	bic.w	r2, r2, #1
 800c548:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c550:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	2200      	movs	r2, #0
 800c556:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	68fa      	ldr	r2, [r7, #12]
 800c55e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	2220      	movs	r2, #32
 800c564:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	2200      	movs	r2, #0
 800c56c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c570:	2300      	movs	r3, #0
}
 800c572:	4618      	mov	r0, r3
 800c574:	3714      	adds	r7, #20
 800c576:	46bd      	mov	sp, r7
 800c578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c57c:	4770      	bx	lr

0800c57e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c57e:	b580      	push	{r7, lr}
 800c580:	b084      	sub	sp, #16
 800c582:	af00      	add	r7, sp, #0
 800c584:	6078      	str	r0, [r7, #4]
 800c586:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c58e:	2b01      	cmp	r3, #1
 800c590:	d101      	bne.n	800c596 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c592:	2302      	movs	r3, #2
 800c594:	e02d      	b.n	800c5f2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	2201      	movs	r2, #1
 800c59a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	2224      	movs	r2, #36	@ 0x24
 800c5a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	681a      	ldr	r2, [r3, #0]
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	f022 0201 	bic.w	r2, r2, #1
 800c5bc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	689b      	ldr	r3, [r3, #8]
 800c5c4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	683a      	ldr	r2, [r7, #0]
 800c5ce:	430a      	orrs	r2, r1
 800c5d0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c5d2:	6878      	ldr	r0, [r7, #4]
 800c5d4:	f000 f8a4 	bl	800c720 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	68fa      	ldr	r2, [r7, #12]
 800c5de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	2220      	movs	r2, #32
 800c5e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	2200      	movs	r2, #0
 800c5ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c5f0:	2300      	movs	r3, #0
}
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	3710      	adds	r7, #16
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	bd80      	pop	{r7, pc}

0800c5fa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c5fa:	b580      	push	{r7, lr}
 800c5fc:	b084      	sub	sp, #16
 800c5fe:	af00      	add	r7, sp, #0
 800c600:	6078      	str	r0, [r7, #4]
 800c602:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c60a:	2b01      	cmp	r3, #1
 800c60c:	d101      	bne.n	800c612 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c60e:	2302      	movs	r3, #2
 800c610:	e02d      	b.n	800c66e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	2201      	movs	r2, #1
 800c616:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	2224      	movs	r2, #36	@ 0x24
 800c61e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	681a      	ldr	r2, [r3, #0]
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	f022 0201 	bic.w	r2, r2, #1
 800c638:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	689b      	ldr	r3, [r3, #8]
 800c640:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	683a      	ldr	r2, [r7, #0]
 800c64a:	430a      	orrs	r2, r1
 800c64c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c64e:	6878      	ldr	r0, [r7, #4]
 800c650:	f000 f866 	bl	800c720 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	68fa      	ldr	r2, [r7, #12]
 800c65a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	2220      	movs	r2, #32
 800c660:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	2200      	movs	r2, #0
 800c668:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c66c:	2300      	movs	r3, #0
}
 800c66e:	4618      	mov	r0, r3
 800c670:	3710      	adds	r7, #16
 800c672:	46bd      	mov	sp, r7
 800c674:	bd80      	pop	{r7, pc}

0800c676 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c676:	b580      	push	{r7, lr}
 800c678:	b08c      	sub	sp, #48	@ 0x30
 800c67a:	af00      	add	r7, sp, #0
 800c67c:	60f8      	str	r0, [r7, #12]
 800c67e:	60b9      	str	r1, [r7, #8]
 800c680:	4613      	mov	r3, r2
 800c682:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c68a:	2b20      	cmp	r3, #32
 800c68c:	d142      	bne.n	800c714 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c68e:	68bb      	ldr	r3, [r7, #8]
 800c690:	2b00      	cmp	r3, #0
 800c692:	d002      	beq.n	800c69a <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800c694:	88fb      	ldrh	r3, [r7, #6]
 800c696:	2b00      	cmp	r3, #0
 800c698:	d101      	bne.n	800c69e <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800c69a:	2301      	movs	r3, #1
 800c69c:	e03b      	b.n	800c716 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	2201      	movs	r2, #1
 800c6a2:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	2200      	movs	r2, #0
 800c6a8:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800c6aa:	88fb      	ldrh	r3, [r7, #6]
 800c6ac:	461a      	mov	r2, r3
 800c6ae:	68b9      	ldr	r1, [r7, #8]
 800c6b0:	68f8      	ldr	r0, [r7, #12]
 800c6b2:	f7ff fc2f 	bl	800bf14 <UART_Start_Receive_DMA>
 800c6b6:	4603      	mov	r3, r0
 800c6b8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800c6bc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d124      	bne.n	800c70e <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c6c8:	2b01      	cmp	r3, #1
 800c6ca:	d11d      	bne.n	800c708 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	2210      	movs	r2, #16
 800c6d2:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6da:	69bb      	ldr	r3, [r7, #24]
 800c6dc:	e853 3f00 	ldrex	r3, [r3]
 800c6e0:	617b      	str	r3, [r7, #20]
   return(result);
 800c6e2:	697b      	ldr	r3, [r7, #20]
 800c6e4:	f043 0310 	orr.w	r3, r3, #16
 800c6e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	461a      	mov	r2, r3
 800c6f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6f2:	627b      	str	r3, [r7, #36]	@ 0x24
 800c6f4:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6f6:	6a39      	ldr	r1, [r7, #32]
 800c6f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c6fa:	e841 2300 	strex	r3, r2, [r1]
 800c6fe:	61fb      	str	r3, [r7, #28]
   return(result);
 800c700:	69fb      	ldr	r3, [r7, #28]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d1e6      	bne.n	800c6d4 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800c706:	e002      	b.n	800c70e <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800c708:	2301      	movs	r3, #1
 800c70a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800c70e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c712:	e000      	b.n	800c716 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800c714:	2302      	movs	r3, #2
  }
}
 800c716:	4618      	mov	r0, r3
 800c718:	3730      	adds	r7, #48	@ 0x30
 800c71a:	46bd      	mov	sp, r7
 800c71c:	bd80      	pop	{r7, pc}
	...

0800c720 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c720:	b480      	push	{r7}
 800c722:	b085      	sub	sp, #20
 800c724:	af00      	add	r7, sp, #0
 800c726:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d108      	bne.n	800c742 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	2201      	movs	r2, #1
 800c734:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	2201      	movs	r2, #1
 800c73c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c740:	e031      	b.n	800c7a6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c742:	2308      	movs	r3, #8
 800c744:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c746:	2308      	movs	r3, #8
 800c748:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	689b      	ldr	r3, [r3, #8]
 800c750:	0e5b      	lsrs	r3, r3, #25
 800c752:	b2db      	uxtb	r3, r3
 800c754:	f003 0307 	and.w	r3, r3, #7
 800c758:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	689b      	ldr	r3, [r3, #8]
 800c760:	0f5b      	lsrs	r3, r3, #29
 800c762:	b2db      	uxtb	r3, r3
 800c764:	f003 0307 	and.w	r3, r3, #7
 800c768:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c76a:	7bbb      	ldrb	r3, [r7, #14]
 800c76c:	7b3a      	ldrb	r2, [r7, #12]
 800c76e:	4911      	ldr	r1, [pc, #68]	@ (800c7b4 <UARTEx_SetNbDataToProcess+0x94>)
 800c770:	5c8a      	ldrb	r2, [r1, r2]
 800c772:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c776:	7b3a      	ldrb	r2, [r7, #12]
 800c778:	490f      	ldr	r1, [pc, #60]	@ (800c7b8 <UARTEx_SetNbDataToProcess+0x98>)
 800c77a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c77c:	fb93 f3f2 	sdiv	r3, r3, r2
 800c780:	b29a      	uxth	r2, r3
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c788:	7bfb      	ldrb	r3, [r7, #15]
 800c78a:	7b7a      	ldrb	r2, [r7, #13]
 800c78c:	4909      	ldr	r1, [pc, #36]	@ (800c7b4 <UARTEx_SetNbDataToProcess+0x94>)
 800c78e:	5c8a      	ldrb	r2, [r1, r2]
 800c790:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c794:	7b7a      	ldrb	r2, [r7, #13]
 800c796:	4908      	ldr	r1, [pc, #32]	@ (800c7b8 <UARTEx_SetNbDataToProcess+0x98>)
 800c798:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c79a:	fb93 f3f2 	sdiv	r3, r3, r2
 800c79e:	b29a      	uxth	r2, r3
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
<<<<<<< HEAD
 800b822:	bf00      	nop
 800b824:	3714      	adds	r7, #20
 800b826:	46bd      	mov	sp, r7
 800b828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82c:	4770      	bx	lr
 800b82e:	bf00      	nop
 800b830:	08012830 	.word	0x08012830
 800b834:	08012838 	.word	0x08012838
=======
 800c7a6:	bf00      	nop
 800c7a8:	3714      	adds	r7, #20
 800c7aa:	46bd      	mov	sp, r7
 800c7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b0:	4770      	bx	lr
 800c7b2:	bf00      	nop
 800c7b4:	08013b0c 	.word	0x08013b0c
 800c7b8:	08013b14 	.word	0x08013b14
>>>>>>> f88694781bd54d0bca96bec7ac145bdac62fa329

0800c7bc <goToZeroElecAngle>:
#include "pid.h"
#include "lowpass_filter.h"
#include "app.h"

void goToZeroElecAngle(BldcMotor *motor)
{
 800c7bc:	b580      	push	{r7, lr}
 800c7be:	b082      	sub	sp, #8
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	6078      	str	r0, [r7, #4]
    setTorque(motor, 0, OPEN_LOOP_TORQUE, 0);
 800c7c4:	ed9f 1a08 	vldr	s2, [pc, #32]	@ 800c7e8 <goToZeroElecAngle+0x2c>
 800c7c8:	eddf 0a08 	vldr	s1, [pc, #32]	@ 800c7ec <goToZeroElecAngle+0x30>
 800c7cc:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 800c7e8 <goToZeroElecAngle+0x2c>
 800c7d0:	6878      	ldr	r0, [r7, #4]
 800c7d2:	f001 f829 	bl	800d828 <setTorque>
    delay(700);
<<<<<<< HEAD
 800b852:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 800b856:	f002 f88b 	bl	800d970 <delay>
=======
 800c7d6:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 800c7da:	f002 fa3b 	bl	800ec54 <delay>
>>>>>>> f88694781bd54d0bca96bec7ac145bdac62fa329
}
 800c7de:	bf00      	nop
 800c7e0:	3708      	adds	r7, #8
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	bd80      	pop	{r7, pc}
 800c7e6:	bf00      	nop
 800c7e8:	00000000 	.word	0x00000000
 800c7ec:	405db3d7 	.word	0x405db3d7

0800c7f0 <alignSensor>:
void alignSensor(BldcMotor *motor)
{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b08a      	sub	sp, #40	@ 0x28
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
    for (int i = 0; i <= 500; i++)
 800c7f8:	2300      	movs	r3, #0
 800c7fa:	627b      	str	r3, [r7, #36]	@ 0x24
 800c7fc:	e025      	b.n	800c84a <alignSensor+0x5a>
    {
        float angle = _3PI_2 + _2PI * i / 500.0f;
 800c7fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c800:	ee07 3a90 	vmov	s15, r3
 800c804:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c808:	ed9f 7a79 	vldr	s14, [pc, #484]	@ 800c9f0 <alignSensor+0x200>
 800c80c:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c810:	eddf 6a78 	vldr	s13, [pc, #480]	@ 800c9f4 <alignSensor+0x204>
 800c814:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c818:	ed9f 7a77 	vldr	s14, [pc, #476]	@ 800c9f8 <alignSensor+0x208>
 800c81c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c820:	edc7 7a02 	vstr	s15, [r7, #8]
        setTorque(motor, OPEN_LOOP_TORQUE, 0, angle);
 800c824:	ed97 1a02 	vldr	s2, [r7, #8]
 800c828:	eddf 0a74 	vldr	s1, [pc, #464]	@ 800c9fc <alignSensor+0x20c>
 800c82c:	ed9f 0a74 	vldr	s0, [pc, #464]	@ 800ca00 <alignSensor+0x210>
 800c830:	6878      	ldr	r0, [r7, #4]
 800c832:	f000 fff9 	bl	800d828 <setTorque>
        encoderUpdate(&motor->magEncoder);
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	4618      	mov	r0, r3
 800c83a:	f000 fccd 	bl	800d1d8 <encoderUpdate>
        delay(2);
<<<<<<< HEAD
 800b8ba:	2002      	movs	r0, #2
 800b8bc:	f002 f858 	bl	800d970 <delay>
=======
 800c83e:	2002      	movs	r0, #2
 800c840:	f002 fa08 	bl	800ec54 <delay>
>>>>>>> f88694781bd54d0bca96bec7ac145bdac62fa329
    for (int i = 0; i <= 500; i++)
 800c844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c846:	3301      	adds	r3, #1
 800c848:	627b      	str	r3, [r7, #36]	@ 0x24
 800c84a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c84c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800c850:	ddd5      	ble.n	800c7fe <alignSensor+0xe>
    }
    encoderUpdate(&motor->magEncoder);
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	4618      	mov	r0, r3
 800c856:	f000 fcbf 	bl	800d1d8 <encoderUpdate>
    float mid_angle = motor->magEncoder.fullAngle;
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	695b      	ldr	r3, [r3, #20]
 800c85e:	61fb      	str	r3, [r7, #28]
    // move one electrical revolution backwards
    for (int i = 500; i >= 0; i--)
 800c860:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800c864:	623b      	str	r3, [r7, #32]
 800c866:	e025      	b.n	800c8b4 <alignSensor+0xc4>
    {
        float angle = _3PI_2 + _2PI * i / 500.0f;
 800c868:	6a3b      	ldr	r3, [r7, #32]
 800c86a:	ee07 3a90 	vmov	s15, r3
 800c86e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c872:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 800c9f0 <alignSensor+0x200>
 800c876:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c87a:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800c9f4 <alignSensor+0x204>
 800c87e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c882:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 800c9f8 <alignSensor+0x208>
 800c886:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c88a:	edc7 7a03 	vstr	s15, [r7, #12]
        setTorque(motor, OPEN_LOOP_TORQUE, 0, angle);
 800c88e:	ed97 1a03 	vldr	s2, [r7, #12]
 800c892:	eddf 0a5a 	vldr	s1, [pc, #360]	@ 800c9fc <alignSensor+0x20c>
 800c896:	ed9f 0a5a 	vldr	s0, [pc, #360]	@ 800ca00 <alignSensor+0x210>
 800c89a:	6878      	ldr	r0, [r7, #4]
 800c89c:	f000 ffc4 	bl	800d828 <setTorque>
        encoderUpdate(&motor->magEncoder);
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	f000 fc98 	bl	800d1d8 <encoderUpdate>
        delay(2);
<<<<<<< HEAD
 800b924:	2002      	movs	r0, #2
 800b926:	f002 f823 	bl	800d970 <delay>
=======
 800c8a8:	2002      	movs	r0, #2
 800c8aa:	f002 f9d3 	bl	800ec54 <delay>
>>>>>>> f88694781bd54d0bca96bec7ac145bdac62fa329
    for (int i = 500; i >= 0; i--)
 800c8ae:	6a3b      	ldr	r3, [r7, #32]
 800c8b0:	3b01      	subs	r3, #1
 800c8b2:	623b      	str	r3, [r7, #32]
 800c8b4:	6a3b      	ldr	r3, [r7, #32]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	dad6      	bge.n	800c868 <alignSensor+0x78>
    }
    encoderUpdate(&motor->magEncoder);
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	4618      	mov	r0, r3
 800c8be:	f000 fc8b 	bl	800d1d8 <encoderUpdate>
    float end_angle = motor->magEncoder.fullAngle;
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	695b      	ldr	r3, [r3, #20]
 800c8c6:	61bb      	str	r3, [r7, #24]
    // setPhaseVoltage(0, 0, 0);
    delay(200);
<<<<<<< HEAD
 800b944:	20c8      	movs	r0, #200	@ 0xc8
 800b946:	f002 f813 	bl	800d970 <delay>
=======
 800c8c8:	20c8      	movs	r0, #200	@ 0xc8
 800c8ca:	f002 f9c3 	bl	800ec54 <delay>
>>>>>>> f88694781bd54d0bca96bec7ac145bdac62fa329

    // determine the direction the sensor moved
    float moved = fabs(mid_angle - end_angle);
 800c8ce:	ed97 7a07 	vldr	s14, [r7, #28]
 800c8d2:	edd7 7a06 	vldr	s15, [r7, #24]
 800c8d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c8da:	eef0 7ae7 	vabs.f32	s15, s15
 800c8de:	edc7 7a05 	vstr	s15, [r7, #20]
    if (moved < MIN_ANGLE_DETECT_MOVEMENT)
 800c8e2:	edd7 7a05 	vldr	s15, [r7, #20]
 800c8e6:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 800ca04 <alignSensor+0x214>
 800c8ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c8ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8f2:	d503      	bpl.n	800c8fc <alignSensor+0x10c>
    { // minimum angle to detect movement
        FOC_log("Failed to notice movement\n");
<<<<<<< HEAD
 800b970:	4844      	ldr	r0, [pc, #272]	@ (800ba84 <alignSensor+0x218>)
 800b972:	f001 fca1 	bl	800d2b8 <FOC_log>
=======
 800c8f4:	4844      	ldr	r0, [pc, #272]	@ (800ca08 <alignSensor+0x218>)
 800c8f6:	f001 fcb1 	bl	800e25c <FOC_log>
>>>>>>> f88694781bd54d0bca96bec7ac145bdac62fa329
        return 0; // failed calibration
 800c8fa:	e075      	b.n	800c9e8 <alignSensor+0x1f8>
    }
    else if (mid_angle < end_angle)
 800c8fc:	ed97 7a07 	vldr	s14, [r7, #28]
 800c900:	edd7 7a06 	vldr	s15, [r7, #24]
 800c904:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c90c:	d507      	bpl.n	800c91e <alignSensor+0x12e>
    {
        FOC_log("sensor_direction==CCW\n");
<<<<<<< HEAD
 800b98a:	483f      	ldr	r0, [pc, #252]	@ (800ba88 <alignSensor+0x21c>)
 800b98c:	f001 fc94 	bl	800d2b8 <FOC_log>
=======
 800c90e:	483f      	ldr	r0, [pc, #252]	@ (800ca0c <alignSensor+0x21c>)
 800c910:	f001 fca4 	bl	800e25c <FOC_log>
>>>>>>> f88694781bd54d0bca96bec7ac145bdac62fa329
        motor->magEncoder.direction = CCW;
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	22ff      	movs	r2, #255	@ 0xff
 800c918:	f883 2020 	strb.w	r2, [r3, #32]
 800c91c:	e006      	b.n	800c92c <alignSensor+0x13c>
    }
    else
    {
        FOC_log("sensor_direction==CW\n");
<<<<<<< HEAD
 800b99a:	483c      	ldr	r0, [pc, #240]	@ (800ba8c <alignSensor+0x220>)
 800b99c:	f001 fc8c 	bl	800d2b8 <FOC_log>
=======
 800c91e:	483c      	ldr	r0, [pc, #240]	@ (800ca10 <alignSensor+0x220>)
 800c920:	f001 fc9c 	bl	800e25c <FOC_log>
>>>>>>> f88694781bd54d0bca96bec7ac145bdac62fa329
        motor->magEncoder.direction = CW;
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	2201      	movs	r2, #1
 800c928:	f883 2020 	strb.w	r2, [r3, #32]
    }
    // check pole pair number
    bool pp_check_result = !(fabs(moved * motor->pole_pairs - _2PI) > 0.5f); // 0.5f is arbitrary number it can be lower or higher!
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800c932:	ee07 3a90 	vmov	s15, r3
 800c936:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c93a:	edd7 7a05 	vldr	s15, [r7, #20]
 800c93e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c942:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 800c9f0 <alignSensor+0x200>
 800c946:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c94a:	eef0 7ae7 	vabs.f32	s15, s15
 800c94e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800c952:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c95a:	bfcc      	ite	gt
 800c95c:	2301      	movgt	r3, #1
 800c95e:	2300      	movle	r3, #0
 800c960:	b2db      	uxtb	r3, r3
 800c962:	f083 0301 	eor.w	r3, r3, #1
 800c966:	b2db      	uxtb	r3, r3
 800c968:	74fb      	strb	r3, [r7, #19]
    if (pp_check_result == false)
 800c96a:	7cfb      	ldrb	r3, [r7, #19]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d10f      	bne.n	800c990 <alignSensor+0x1a0>
    {
        FOC_log("PP check: fail - estimated pp: \n", _2PI / moved);
<<<<<<< HEAD
 800b9ec:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 800ba6c <alignSensor+0x200>
 800b9f0:	edd7 7a05 	vldr	s15, [r7, #20]
 800b9f4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800b9f8:	ee16 0a90 	vmov	r0, s13
 800b9fc:	f7f4 fdcc 	bl	8000598 <__aeabi_f2d>
 800ba00:	4602      	mov	r2, r0
 800ba02:	460b      	mov	r3, r1
 800ba04:	4822      	ldr	r0, [pc, #136]	@ (800ba90 <alignSensor+0x224>)
 800ba06:	f001 fc57 	bl	800d2b8 <FOC_log>
 800ba0a:	e002      	b.n	800ba12 <alignSensor+0x1a6>
=======
 800c970:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 800c9f0 <alignSensor+0x200>
 800c974:	edd7 7a05 	vldr	s15, [r7, #20]
 800c978:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800c97c:	ee16 0a90 	vmov	r0, s13
 800c980:	f7f3 fe0a 	bl	8000598 <__aeabi_f2d>
 800c984:	4602      	mov	r2, r0
 800c986:	460b      	mov	r3, r1
 800c988:	4822      	ldr	r0, [pc, #136]	@ (800ca14 <alignSensor+0x224>)
 800c98a:	f001 fc67 	bl	800e25c <FOC_log>
 800c98e:	e002      	b.n	800c996 <alignSensor+0x1a6>
>>>>>>> f88694781bd54d0bca96bec7ac145bdac62fa329
    }
    else
    {
        FOC_log("PP check: OK!\n");
<<<<<<< HEAD
 800ba0c:	4821      	ldr	r0, [pc, #132]	@ (800ba94 <alignSensor+0x228>)
 800ba0e:	f001 fc53 	bl	800d2b8 <FOC_log>
=======
 800c990:	4821      	ldr	r0, [pc, #132]	@ (800ca18 <alignSensor+0x228>)
 800c992:	f001 fc63 	bl	800e25c <FOC_log>
>>>>>>> f88694781bd54d0bca96bec7ac145bdac62fa329
    }

    // align the electrical phases of the motor and sensor
    // set angle -90(270 = 3PI/2) degrees
    goToZeroElecAngle(motor);
 800c996:	6878      	ldr	r0, [r7, #4]
 800c998:	f7ff ff10 	bl	800c7bc <goToZeroElecAngle>
    // read the sensor
    encoderUpdate(&motor->magEncoder);
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	4618      	mov	r0, r3
 800c9a0:	f000 fc1a 	bl	800d1d8 <encoderUpdate>
    // get the current zero electric angle
    motor->zeroElectricAngleOffSet = 0;
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	f04f 0200 	mov.w	r2, #0
 800c9aa:	635a      	str	r2, [r3, #52]	@ 0x34
    getElecAngle(motor);
 800c9ac:	6878      	ldr	r0, [r7, #4]
 800c9ae:	f000 f839 	bl	800ca24 <getElecAngle>
    motor->zeroElectricAngleOffSet = motor->angle_el;
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	635a      	str	r2, [r3, #52]	@ 0x34
    // zero_electric_angle =  _normalizeAngle(_electricalAngle(sensor_direction*sensor->getAngle(), pole_pairs));
    // delay(20);
    // encoderUpdate(&motor->magEncoder);
    getElecAngle(motor);
 800c9ba:	6878      	ldr	r0, [r7, #4]
 800c9bc:	f000 f832 	bl	800ca24 <getElecAngle>
    // motor->zeroElectricAngleOffSet = 0;
    // FOC_log("[zeroAngleOffset]:%f  [zeroAngle]:%f\r\n", motor->zeroElectricAngleOffSet, motor->angle_el);
    FOC_log("[zeroAngleOffset]:%f\n", motor->zeroElectricAngleOffSet);
<<<<<<< HEAD
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba40:	4618      	mov	r0, r3
 800ba42:	f7f4 fda9 	bl	8000598 <__aeabi_f2d>
 800ba46:	4602      	mov	r2, r0
 800ba48:	460b      	mov	r3, r1
 800ba4a:	4813      	ldr	r0, [pc, #76]	@ (800ba98 <alignSensor+0x22c>)
 800ba4c:	f001 fc34 	bl	800d2b8 <FOC_log>
    FOC_log("[zeroAngle]:%f\n", motor->angle_el);
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba54:	4618      	mov	r0, r3
 800ba56:	f7f4 fd9f 	bl	8000598 <__aeabi_f2d>
 800ba5a:	4602      	mov	r2, r0
 800ba5c:	460b      	mov	r3, r1
 800ba5e:	480f      	ldr	r0, [pc, #60]	@ (800ba9c <alignSensor+0x230>)
 800ba60:	f001 fc2a 	bl	800d2b8 <FOC_log>
=======
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	f7f3 fde7 	bl	8000598 <__aeabi_f2d>
 800c9ca:	4602      	mov	r2, r0
 800c9cc:	460b      	mov	r3, r1
 800c9ce:	4813      	ldr	r0, [pc, #76]	@ (800ca1c <alignSensor+0x22c>)
 800c9d0:	f001 fc44 	bl	800e25c <FOC_log>
    FOC_log("[zeroAngle]:%f\n", motor->angle_el);
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c9d8:	4618      	mov	r0, r3
 800c9da:	f7f3 fddd 	bl	8000598 <__aeabi_f2d>
 800c9de:	4602      	mov	r2, r0
 800c9e0:	460b      	mov	r3, r1
 800c9e2:	480f      	ldr	r0, [pc, #60]	@ (800ca20 <alignSensor+0x230>)
 800c9e4:	f001 fc3a 	bl	800e25c <FOC_log>
>>>>>>> f88694781bd54d0bca96bec7ac145bdac62fa329
    // // make sure the angle_el is about zero

    // delay(200);
}
<<<<<<< HEAD
 800ba64:	3728      	adds	r7, #40	@ 0x28
 800ba66:	46bd      	mov	sp, r7
 800ba68:	bd80      	pop	{r7, pc}
 800ba6a:	bf00      	nop
 800ba6c:	40c90fdb 	.word	0x40c90fdb
 800ba70:	43fa0000 	.word	0x43fa0000
 800ba74:	4096cbe4 	.word	0x4096cbe4
 800ba78:	00000000 	.word	0x00000000
 800ba7c:	405db3d7 	.word	0x405db3d7
 800ba80:	3d7ecfa9 	.word	0x3d7ecfa9
 800ba84:	080126d8 	.word	0x080126d8
 800ba88:	080126f4 	.word	0x080126f4
 800ba8c:	0801270c 	.word	0x0801270c
 800ba90:	08012724 	.word	0x08012724
 800ba94:	08012748 	.word	0x08012748
 800ba98:	08012758 	.word	0x08012758
 800ba9c:	08012770 	.word	0x08012770
=======
 800c9e8:	3728      	adds	r7, #40	@ 0x28
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	bd80      	pop	{r7, pc}
 800c9ee:	bf00      	nop
 800c9f0:	40c90fdb 	.word	0x40c90fdb
 800c9f4:	43fa0000 	.word	0x43fa0000
 800c9f8:	4096cbe4 	.word	0x4096cbe4
 800c9fc:	00000000 	.word	0x00000000
 800ca00:	405db3d7 	.word	0x405db3d7
 800ca04:	3d7ecfa9 	.word	0x3d7ecfa9
 800ca08:	080139b8 	.word	0x080139b8
 800ca0c:	080139d4 	.word	0x080139d4
 800ca10:	080139ec 	.word	0x080139ec
 800ca14:	08013a04 	.word	0x08013a04
 800ca18:	08013a28 	.word	0x08013a28
 800ca1c:	08013a38 	.word	0x08013a38
 800ca20:	08013a50 	.word	0x08013a50
>>>>>>> f88694781bd54d0bca96bec7ac145bdac62fa329

0800ca24 <getElecAngle>:

void getElecAngle(BldcMotor *motor)
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b082      	sub	sp, #8
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	6078      	str	r0, [r7, #4]
    motor->angle_el = _normalizeAngle(motor->magEncoder.direction * motor->pole_pairs * motor->magEncoder.shaftAngle - motor->zeroElectricAngleOffSet);
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	f993 3020 	ldrsb.w	r3, [r3, #32]
 800ca32:	461a      	mov	r2, r3
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800ca3a:	fb02 f303 	mul.w	r3, r2, r3
 800ca3e:	ee07 3a90 	vmov	s15, r3
 800ca42:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	edd3 7a04 	vldr	s15, [r3, #16]
 800ca4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800ca56:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ca5a:	eeb0 0a67 	vmov.f32	s0, s15
 800ca5e:	f000 fd5b 	bl	800d518 <_normalizeAngle>
 800ca62:	eef0 7a40 	vmov.f32	s15, s0
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
}
 800ca6c:	bf00      	nop
 800ca6e:	3708      	adds	r7, #8
 800ca70:	46bd      	mov	sp, r7
 800ca72:	bd80      	pop	{r7, pc}

0800ca74 <foc>:

void foc(BldcMotor *motor, uint32_t adc_a, uint32_t adc_b)
{
 800ca74:	b580      	push	{r7, lr}
 800ca76:	b088      	sub	sp, #32
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	60f8      	str	r0, [r7, #12]
 800ca7c:	60b9      	str	r1, [r7, #8]
 800ca7e:	607a      	str	r2, [r7, #4]

    if (motor->state == MOTOR_CALIBRATE)
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d111      	bne.n	800caae <foc+0x3a>
    {
        getCurrentOffsets(motor, adc_a, adc_b, 100);
 800ca8a:	2364      	movs	r3, #100	@ 0x64
 800ca8c:	687a      	ldr	r2, [r7, #4]
 800ca8e:	68b9      	ldr	r1, [r7, #8]
 800ca90:	68f8      	ldr	r0, [r7, #12]
 800ca92:	f000 f9a9 	bl	800cde8 <getCurrentOffsets>
        alignSensor(motor);
 800ca96:	68f8      	ldr	r0, [r7, #12]
 800ca98:	f7ff feaa 	bl	800c7f0 <alignSensor>
        motor->state = MOTOR_READY;
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	2201      	movs	r2, #1
 800caa0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        motor->stopPwm();
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800caaa:	4798      	blx	r3
                break;
            }
            setTorque(motor, motor->Uq, motor->Ud, motor->angle_el);
        }
    }
}
 800caac:	e191      	b.n	800cdd2 <foc+0x35e>
        getPhaseCurrents(motor, adc_a, adc_b);
 800caae:	687a      	ldr	r2, [r7, #4]
 800cab0:	68b9      	ldr	r1, [r7, #8]
 800cab2:	68f8      	ldr	r0, [r7, #12]
 800cab4:	f000 fa6c 	bl	800cf90 <getPhaseCurrents>
        getABCurrents(motor);
 800cab8:	68f8      	ldr	r0, [r7, #12]
 800caba:	f000 fafb 	bl	800d0b4 <getABCurrents>
        getDQCurrents(motor);
 800cabe:	68f8      	ldr	r0, [r7, #12]
 800cac0:	f000 fb1e 	bl	800d100 <getDQCurrents>
        motor->Iq = lpfOperator(&motor->IqFilter, motor->Iq);
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	f103 02f0 	add.w	r2, r3, #240	@ 0xf0
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800cad0:	eeb0 0a67 	vmov.f32	s0, s15
 800cad4:	4610      	mov	r0, r2
 800cad6:	f000 fc17 	bl	800d308 <lpfOperator>
 800cada:	eef0 7a40 	vmov.f32	s15, s0
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c
        motor->Id = lpfOperator(&motor->IdFilter, motor->Id);
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	f103 02fc 	add.w	r2, r3, #252	@ 0xfc
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 800caf0:	eeb0 0a67 	vmov.f32	s0, s15
 800caf4:	4610      	mov	r0, r2
 800caf6:	f000 fc07 	bl	800d308 <lpfOperator>
 800cafa:	eef0 7a40 	vmov.f32	s15, s0
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58
        encoderUpdate(&motor->magEncoder);
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	4618      	mov	r0, r3
 800cb08:	f000 fb66 	bl	800d1d8 <encoderUpdate>
        motor->magEncoder.velocity = lpfOperator(&motor->velocityFilter, motor->magEncoder.velocity);
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	f503 7284 	add.w	r2, r3, #264	@ 0x108
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	edd3 7a06 	vldr	s15, [r3, #24]
 800cb18:	eeb0 0a67 	vmov.f32	s0, s15
 800cb1c:	4610      	mov	r0, r2
 800cb1e:	f000 fbf3 	bl	800d308 <lpfOperator>
 800cb22:	eef0 7a40 	vmov.f32	s15, s0
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	edc3 7a06 	vstr	s15, [r3, #24]
        getElecAngle(motor);
 800cb2c:	68f8      	ldr	r0, [r7, #12]
 800cb2e:	f7ff ff79 	bl	800ca24 <getElecAngle>
        if (motor->state == MOTOR_READY)
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cb38:	2b01      	cmp	r3, #1
 800cb3a:	f000 814a 	beq.w	800cdd2 <foc+0x35e>
        else if (motor->state == MOTOR_START)
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cb44:	2b02      	cmp	r3, #2
 800cb46:	f040 8144 	bne.w	800cdd2 <foc+0x35e>
            switch (motor->controlType)
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800cb50:	2b03      	cmp	r3, #3
 800cb52:	f200 812c 	bhi.w	800cdae <foc+0x33a>
 800cb56:	a201      	add	r2, pc, #4	@ (adr r2, 800cb5c <foc+0xe8>)
 800cb58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb5c:	0800cb6d 	.word	0x0800cb6d
 800cb60:	0800cbd7 	.word	0x0800cbd7
 800cb64:	0800cc2d 	.word	0x0800cc2d
 800cb68:	0800ccdd 	.word	0x0800ccdd
                if (motor->torqueType == VOLTAGE)
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d105      	bne.n	800cb82 <foc+0x10e>
                    motor->Uq = motor->target;
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
                break;
 800cb80:	e115      	b.n	800cdae <foc+0x33a>
                    motor->Ud = pidOperator(&motor->pidId, 0 - motor->Id);
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	f103 0260 	add.w	r2, r3, #96	@ 0x60
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 800cb8e:	ed9f 7a93 	vldr	s14, [pc, #588]	@ 800cddc <foc+0x368>
 800cb92:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cb96:	eeb0 0a67 	vmov.f32	s0, s15
 800cb9a:	4610      	mov	r0, r2
 800cb9c:	f000 fd3c 	bl	800d618 <pidOperator>
 800cba0:	eef0 7a40 	vmov.f32	s15, s0
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	edc3 7a45 	vstr	s15, [r3, #276]	@ 0x114
                    motor->Uq = pidOperator(&motor->pidIq, motor->target - motor->Iq);
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	f103 0284 	add.w	r2, r3, #132	@ 0x84
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800cbbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cbc0:	eeb0 0a67 	vmov.f32	s0, s15
 800cbc4:	4610      	mov	r0, r2
 800cbc6:	f000 fd27 	bl	800d618 <pidOperator>
 800cbca:	eef0 7a40 	vmov.f32	s15, s0
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	edc3 7a46 	vstr	s15, [r3, #280]	@ 0x118
                break;
 800cbd4:	e0eb      	b.n	800cdae <foc+0x33a>
                shaftAngle = _normalizeAngle(shaftAngle + motor->target * motor->Ts);
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800cbe2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cbe6:	4b7e      	ldr	r3, [pc, #504]	@ (800cde0 <foc+0x36c>)
 800cbe8:	edd3 7a00 	vldr	s15, [r3]
 800cbec:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cbf0:	eeb0 0a67 	vmov.f32	s0, s15
 800cbf4:	f000 fc90 	bl	800d518 <_normalizeAngle>
 800cbf8:	eef0 7a40 	vmov.f32	s15, s0
 800cbfc:	4b78      	ldr	r3, [pc, #480]	@ (800cde0 <foc+0x36c>)
 800cbfe:	edc3 7a00 	vstr	s15, [r3]
                motor->angle_el = _electricalAngle(shaftAngle, motor->pole_pairs);
 800cc02:	4b77      	ldr	r3, [pc, #476]	@ (800cde0 <foc+0x36c>)
 800cc04:	edd3 7a00 	vldr	s15, [r3]
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800cc0e:	4618      	mov	r0, r3
 800cc10:	eeb0 0a67 	vmov.f32	s0, s15
 800cc14:	f000 fcb6 	bl	800d584 <_electricalAngle>
 800cc18:	eef0 7a40 	vmov.f32	s15, s0
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
                motor->Uq = OPEN_LOOP_TORQUE;
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	4a6f      	ldr	r2, [pc, #444]	@ (800cde4 <foc+0x370>)
 800cc26:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
                break;
 800cc2a:	e0c0      	b.n	800cdae <foc+0x33a>
                if (motor->torqueType == VOLTAGE)
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d116      	bne.n	800cc64 <foc+0x1f0>
                    velocityErr = motor->target - motor->magEncoder.velocity;
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	edd3 7a06 	vldr	s15, [r3, #24]
 800cc42:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cc46:	edc7 7a04 	vstr	s15, [r7, #16]
                    motor->Uq = pidOperator(&motor->velocityPID, velocityErr);
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	33a8      	adds	r3, #168	@ 0xa8
 800cc4e:	ed97 0a04 	vldr	s0, [r7, #16]
 800cc52:	4618      	mov	r0, r3
 800cc54:	f000 fce0 	bl	800d618 <pidOperator>
 800cc58:	eef0 7a40 	vmov.f32	s15, s0
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	edc3 7a46 	vstr	s15, [r3, #280]	@ 0x118
                break;
 800cc62:	e0a4      	b.n	800cdae <foc+0x33a>
                    velocityErr = motor->target - motor->magEncoder.velocity;
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	edd3 7a06 	vldr	s15, [r3, #24]
 800cc70:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cc74:	edc7 7a04 	vstr	s15, [r7, #16]
                    IqRef = pidOperator(&motor->velocityPID, velocityErr);
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	33a8      	adds	r3, #168	@ 0xa8
 800cc7c:	ed97 0a04 	vldr	s0, [r7, #16]
 800cc80:	4618      	mov	r0, r3
 800cc82:	f000 fcc9 	bl	800d618 <pidOperator>
 800cc86:	ed87 0a05 	vstr	s0, [r7, #20]
                    motor->Ud = pidOperator(&motor->pidId, 0 - motor->Id);
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	f103 0260 	add.w	r2, r3, #96	@ 0x60
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 800cc96:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 800cddc <foc+0x368>
 800cc9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cc9e:	eeb0 0a67 	vmov.f32	s0, s15
 800cca2:	4610      	mov	r0, r2
 800cca4:	f000 fcb8 	bl	800d618 <pidOperator>
 800cca8:	eef0 7a40 	vmov.f32	s15, s0
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	edc3 7a45 	vstr	s15, [r3, #276]	@ 0x114
                    motor->Uq = pidOperator(&motor->pidIq, IqRef - motor->Iq);
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	f103 0284 	add.w	r2, r3, #132	@ 0x84
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800ccbe:	ed97 7a05 	vldr	s14, [r7, #20]
 800ccc2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ccc6:	eeb0 0a67 	vmov.f32	s0, s15
 800ccca:	4610      	mov	r0, r2
 800cccc:	f000 fca4 	bl	800d618 <pidOperator>
 800ccd0:	eef0 7a40 	vmov.f32	s15, s0
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	edc3 7a46 	vstr	s15, [r3, #280]	@ 0x118
                break;
 800ccda:	e068      	b.n	800cdae <foc+0x33a>
                if (motor->torqueType == VOLTAGE)
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d116      	bne.n	800cd14 <foc+0x2a0>
                    angleErr = motor->target - motor->magEncoder.fullAngle;
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	edd3 7a05 	vldr	s15, [r3, #20]
 800ccf2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ccf6:	edc7 7a07 	vstr	s15, [r7, #28]
                    motor->Uq = pidOperator(&motor->anglePID, angleErr);
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	33cc      	adds	r3, #204	@ 0xcc
 800ccfe:	ed97 0a07 	vldr	s0, [r7, #28]
 800cd02:	4618      	mov	r0, r3
 800cd04:	f000 fc88 	bl	800d618 <pidOperator>
 800cd08:	eef0 7a40 	vmov.f32	s15, s0
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	edc3 7a46 	vstr	s15, [r3, #280]	@ 0x118
                break;
 800cd12:	e04b      	b.n	800cdac <foc+0x338>
                    angleErr = motor->target - motor->magEncoder.fullAngle;
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	edd3 7a05 	vldr	s15, [r3, #20]
 800cd20:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cd24:	edc7 7a07 	vstr	s15, [r7, #28]
                    velocityRef = pidOperator(&motor->anglePID, angleErr);
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	33cc      	adds	r3, #204	@ 0xcc
 800cd2c:	ed97 0a07 	vldr	s0, [r7, #28]
 800cd30:	4618      	mov	r0, r3
 800cd32:	f000 fc71 	bl	800d618 <pidOperator>
 800cd36:	ed87 0a06 	vstr	s0, [r7, #24]
                    IqRef = pidOperator(&motor->velocityPID, velocityRef - motor->magEncoder.velocity);
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	f103 02a8 	add.w	r2, r3, #168	@ 0xa8
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	edd3 7a06 	vldr	s15, [r3, #24]
 800cd46:	ed97 7a06 	vldr	s14, [r7, #24]
 800cd4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cd4e:	eeb0 0a67 	vmov.f32	s0, s15
 800cd52:	4610      	mov	r0, r2
 800cd54:	f000 fc60 	bl	800d618 <pidOperator>
 800cd58:	ed87 0a05 	vstr	s0, [r7, #20]
                    motor->Ud = pidOperator(&motor->pidId, 0 - motor->Id);
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	f103 0260 	add.w	r2, r3, #96	@ 0x60
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 800cd68:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 800cddc <foc+0x368>
 800cd6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cd70:	eeb0 0a67 	vmov.f32	s0, s15
 800cd74:	4610      	mov	r0, r2
 800cd76:	f000 fc4f 	bl	800d618 <pidOperator>
 800cd7a:	eef0 7a40 	vmov.f32	s15, s0
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	edc3 7a45 	vstr	s15, [r3, #276]	@ 0x114
                    motor->Uq = pidOperator(&motor->pidIq, IqRef - motor->Iq);
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	f103 0284 	add.w	r2, r3, #132	@ 0x84
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800cd90:	ed97 7a05 	vldr	s14, [r7, #20]
 800cd94:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cd98:	eeb0 0a67 	vmov.f32	s0, s15
 800cd9c:	4610      	mov	r0, r2
 800cd9e:	f000 fc3b 	bl	800d618 <pidOperator>
 800cda2:	eef0 7a40 	vmov.f32	s15, s0
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	edc3 7a46 	vstr	s15, [r3, #280]	@ 0x118
                break;
 800cdac:	bf00      	nop
            setTorque(motor, motor->Uq, motor->Ud, motor->angle_el);
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	edd3 7a46 	vldr	s15, [r3, #280]	@ 0x118
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	ed93 7a45 	vldr	s14, [r3, #276]	@ 0x114
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 800cdc0:	eeb0 1a66 	vmov.f32	s2, s13
 800cdc4:	eef0 0a47 	vmov.f32	s1, s14
 800cdc8:	eeb0 0a67 	vmov.f32	s0, s15
 800cdcc:	68f8      	ldr	r0, [r7, #12]
 800cdce:	f000 fd2b 	bl	800d828 <setTorque>
}
 800cdd2:	bf00      	nop
 800cdd4:	3720      	adds	r7, #32
 800cdd6:	46bd      	mov	sp, r7
 800cdd8:	bd80      	pop	{r7, pc}
 800cdda:	bf00      	nop
 800cddc:	00000000 	.word	0x00000000
 800cde0:	2000074c 	.word	0x2000074c
 800cde4:	405db3d7 	.word	0x405db3d7

0800cde8 <getCurrentOffsets>:
#include "math_utils.h"
#include "comm.h"

// Function finding zero offsets of the ADC
void getCurrentOffsets(BldcMotor *motor, uint32_t adc_a, uint32_t adc_b, uint32_t rounds)
{
 800cde8:	b5b0      	push	{r4, r5, r7, lr}
 800cdea:	b086      	sub	sp, #24
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	60f8      	str	r0, [r7, #12]
 800cdf0:	60b9      	str	r1, [r7, #8]
 800cdf2:	607a      	str	r2, [r7, #4]
 800cdf4:	603b      	str	r3, [r7, #0]
    // find adc offset = zero current voltage
    motor->offset_ia = 0;
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	f04f 0200 	mov.w	r2, #0
 800cdfc:	641a      	str	r2, [r3, #64]	@ 0x40
    motor->offset_ib = 0;
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	f04f 0200 	mov.w	r2, #0
 800ce04:	645a      	str	r2, [r3, #68]	@ 0x44
    // read the adc voltage  times ( arbitrary number )
    for (int i = 0; i < rounds; i++)
 800ce06:	2300      	movs	r3, #0
 800ce08:	617b      	str	r3, [r7, #20]
 800ce0a:	e076      	b.n	800cefa <getCurrentOffsets+0x112>
    {
        motor->offset_ia += ADC_2_CURRENT(adc_a);
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce10:	4618      	mov	r0, r3
 800ce12:	f7f3 fbc1 	bl	8000598 <__aeabi_f2d>
 800ce16:	4604      	mov	r4, r0
 800ce18:	460d      	mov	r5, r1
 800ce1a:	68bb      	ldr	r3, [r7, #8]
 800ce1c:	ee07 3a90 	vmov	s15, r3
 800ce20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce24:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 800cf80 <getCurrentOffsets+0x198>
 800ce28:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ce2c:	ee17 0a90 	vmov	r0, s15
 800ce30:	f7f3 fbb2 	bl	8000598 <__aeabi_f2d>
 800ce34:	a34c      	add	r3, pc, #304	@ (adr r3, 800cf68 <getCurrentOffsets+0x180>)
 800ce36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce3a:	f7f3 fd2f 	bl	800089c <__aeabi_ddiv>
 800ce3e:	4602      	mov	r2, r0
 800ce40:	460b      	mov	r3, r1
 800ce42:	4610      	mov	r0, r2
 800ce44:	4619      	mov	r1, r3
 800ce46:	a34a      	add	r3, pc, #296	@ (adr r3, 800cf70 <getCurrentOffsets+0x188>)
 800ce48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce4c:	f7f3 fd26 	bl	800089c <__aeabi_ddiv>
 800ce50:	4602      	mov	r2, r0
 800ce52:	460b      	mov	r3, r1
 800ce54:	4610      	mov	r0, r2
 800ce56:	4619      	mov	r1, r3
 800ce58:	a347      	add	r3, pc, #284	@ (adr r3, 800cf78 <getCurrentOffsets+0x190>)
 800ce5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce5e:	f7f3 fd1d 	bl	800089c <__aeabi_ddiv>
 800ce62:	4602      	mov	r2, r0
 800ce64:	460b      	mov	r3, r1
 800ce66:	4620      	mov	r0, r4
 800ce68:	4629      	mov	r1, r5
 800ce6a:	f7f3 fa37 	bl	80002dc <__adddf3>
 800ce6e:	4602      	mov	r2, r0
 800ce70:	460b      	mov	r3, r1
 800ce72:	4610      	mov	r0, r2
 800ce74:	4619      	mov	r1, r3
 800ce76:	f7f3 fedf 	bl	8000c38 <__aeabi_d2f>
 800ce7a:	4602      	mov	r2, r0
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	641a      	str	r2, [r3, #64]	@ 0x40
        motor->offset_ib += ADC_2_CURRENT(adc_b);
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ce84:	4618      	mov	r0, r3
 800ce86:	f7f3 fb87 	bl	8000598 <__aeabi_f2d>
 800ce8a:	4604      	mov	r4, r0
 800ce8c:	460d      	mov	r5, r1
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	ee07 3a90 	vmov	s15, r3
 800ce94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce98:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 800cf80 <getCurrentOffsets+0x198>
 800ce9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cea0:	ee17 0a90 	vmov	r0, s15
 800cea4:	f7f3 fb78 	bl	8000598 <__aeabi_f2d>
 800cea8:	a32f      	add	r3, pc, #188	@ (adr r3, 800cf68 <getCurrentOffsets+0x180>)
 800ceaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceae:	f7f3 fcf5 	bl	800089c <__aeabi_ddiv>
 800ceb2:	4602      	mov	r2, r0
 800ceb4:	460b      	mov	r3, r1
 800ceb6:	4610      	mov	r0, r2
 800ceb8:	4619      	mov	r1, r3
 800ceba:	a32d      	add	r3, pc, #180	@ (adr r3, 800cf70 <getCurrentOffsets+0x188>)
 800cebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cec0:	f7f3 fcec 	bl	800089c <__aeabi_ddiv>
 800cec4:	4602      	mov	r2, r0
 800cec6:	460b      	mov	r3, r1
 800cec8:	4610      	mov	r0, r2
 800ceca:	4619      	mov	r1, r3
 800cecc:	a32a      	add	r3, pc, #168	@ (adr r3, 800cf78 <getCurrentOffsets+0x190>)
 800cece:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ced2:	f7f3 fce3 	bl	800089c <__aeabi_ddiv>
 800ced6:	4602      	mov	r2, r0
 800ced8:	460b      	mov	r3, r1
 800ceda:	4620      	mov	r0, r4
 800cedc:	4629      	mov	r1, r5
 800cede:	f7f3 f9fd 	bl	80002dc <__adddf3>
 800cee2:	4602      	mov	r2, r0
 800cee4:	460b      	mov	r3, r1
 800cee6:	4610      	mov	r0, r2
 800cee8:	4619      	mov	r1, r3
 800ceea:	f7f3 fea5 	bl	8000c38 <__aeabi_d2f>
 800ceee:	4602      	mov	r2, r0
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	645a      	str	r2, [r3, #68]	@ 0x44
    for (int i = 0; i < rounds; i++)
 800cef4:	697b      	ldr	r3, [r7, #20]
 800cef6:	3301      	adds	r3, #1
 800cef8:	617b      	str	r3, [r7, #20]
 800cefa:	697b      	ldr	r3, [r7, #20]
 800cefc:	683a      	ldr	r2, [r7, #0]
 800cefe:	429a      	cmp	r2, r3
 800cf00:	d884      	bhi.n	800ce0c <getCurrentOffsets+0x24>
    }
    // calculate the mean offsets
    motor->offset_ia = motor->offset_ia / rounds;
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	edd3 6a10 	vldr	s13, [r3, #64]	@ 0x40
 800cf08:	683b      	ldr	r3, [r7, #0]
 800cf0a:	ee07 3a90 	vmov	s15, r3
 800cf0e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800cf12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
    motor->offset_ib = motor->offset_ib / rounds;
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	edd3 6a11 	vldr	s13, [r3, #68]	@ 0x44
 800cf22:	683b      	ldr	r3, [r7, #0]
 800cf24:	ee07 3a90 	vmov	s15, r3
 800cf28:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800cf2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44

    // FOC_log("[offset_ia]:%f  [offset_ib]:%f\r\n", motor->offset_ia, motor->offset_ib);
    // printf("[offset_ia]:%f  [offset_ib]:%f\r\n", motor->offset_ia, motor->offset_ib);
    FOC_log("[offset_ia]:%f\r\n", motor->offset_ia);
<<<<<<< HEAD
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bfba:	4618      	mov	r0, r3
 800bfbc:	f7f4 faec 	bl	8000598 <__aeabi_f2d>
 800bfc0:	4602      	mov	r2, r0
 800bfc2:	460b      	mov	r3, r1
 800bfc4:	480f      	ldr	r0, [pc, #60]	@ (800c004 <getCurrentOffsets+0x19c>)
 800bfc6:	f001 f977 	bl	800d2b8 <FOC_log>
    FOC_log("[offset_ib]:%f\r\n", motor->offset_ib);
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bfce:	4618      	mov	r0, r3
 800bfd0:	f7f4 fae2 	bl	8000598 <__aeabi_f2d>
 800bfd4:	4602      	mov	r2, r0
 800bfd6:	460b      	mov	r3, r1
 800bfd8:	480b      	ldr	r0, [pc, #44]	@ (800c008 <getCurrentOffsets+0x1a0>)
 800bfda:	f001 f96d 	bl	800d2b8 <FOC_log>
    // _dbg_printf("[offset_ia]:%f  [offset_ib]:%f\r\n", motor->offset_ia, motor->offset_ib);
}
 800bfde:	bf00      	nop
 800bfe0:	3718      	adds	r7, #24
 800bfe2:	46bd      	mov	sp, r7
 800bfe4:	bdb0      	pop	{r4, r5, r7, pc}
 800bfe6:	bf00      	nop
 800bfe8:	00000000 	.word	0x00000000
 800bfec:	40affe00 	.word	0x40affe00
 800bff0:	40000000 	.word	0x40000000
 800bff4:	3f747ae1 	.word	0x3f747ae1
 800bff8:	a0000000 	.word	0xa0000000
 800bffc:	401d554c 	.word	0x401d554c
 800c000:	40533333 	.word	0x40533333
 800c004:	08012780 	.word	0x08012780
 800c008:	08012794 	.word	0x08012794
 800c00c:	00000000 	.word	0x00000000
=======
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	f7f3 fb2c 	bl	8000598 <__aeabi_f2d>
 800cf40:	4602      	mov	r2, r0
 800cf42:	460b      	mov	r3, r1
 800cf44:	480f      	ldr	r0, [pc, #60]	@ (800cf84 <getCurrentOffsets+0x19c>)
 800cf46:	f001 f989 	bl	800e25c <FOC_log>
    FOC_log("[offset_ib]:%f\r\n", motor->offset_ib);
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cf4e:	4618      	mov	r0, r3
 800cf50:	f7f3 fb22 	bl	8000598 <__aeabi_f2d>
 800cf54:	4602      	mov	r2, r0
 800cf56:	460b      	mov	r3, r1
 800cf58:	480b      	ldr	r0, [pc, #44]	@ (800cf88 <getCurrentOffsets+0x1a0>)
 800cf5a:	f001 f97f 	bl	800e25c <FOC_log>
    // _dbg_printf("[offset_ia]:%f  [offset_ib]:%f\r\n", motor->offset_ia, motor->offset_ib);
}
 800cf5e:	bf00      	nop
 800cf60:	3718      	adds	r7, #24
 800cf62:	46bd      	mov	sp, r7
 800cf64:	bdb0      	pop	{r4, r5, r7, pc}
 800cf66:	bf00      	nop
 800cf68:	00000000 	.word	0x00000000
 800cf6c:	40affe00 	.word	0x40affe00
 800cf70:	40000000 	.word	0x40000000
 800cf74:	3f747ae1 	.word	0x3f747ae1
 800cf78:	a0000000 	.word	0xa0000000
 800cf7c:	401d554c 	.word	0x401d554c
 800cf80:	40533333 	.word	0x40533333
 800cf84:	08013a60 	.word	0x08013a60
 800cf88:	08013a74 	.word	0x08013a74
 800cf8c:	00000000 	.word	0x00000000
>>>>>>> f88694781bd54d0bca96bec7ac145bdac62fa329

0800cf90 <getPhaseCurrents>:

// read all three phase currents (if possible 2 or 3)
void getPhaseCurrents(BldcMotor *motor, uint32_t adc_a, uint32_t adc_b)
{
 800cf90:	b5b0      	push	{r4, r5, r7, lr}
 800cf92:	b084      	sub	sp, #16
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	60f8      	str	r0, [r7, #12]
 800cf98:	60b9      	str	r1, [r7, #8]
 800cf9a:	607a      	str	r2, [r7, #4]
    motor->Ia = ADC_2_CURRENT(adc_a) - motor->offset_ia; // amps
 800cf9c:	68bb      	ldr	r3, [r7, #8]
 800cf9e:	ee07 3a90 	vmov	s15, r3
 800cfa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfa6:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 800d0b0 <getPhaseCurrents+0x120>
 800cfaa:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cfae:	ee17 0a90 	vmov	r0, s15
 800cfb2:	f7f3 faf1 	bl	8000598 <__aeabi_f2d>
 800cfb6:	a338      	add	r3, pc, #224	@ (adr r3, 800d098 <getPhaseCurrents+0x108>)
 800cfb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfbc:	f7f3 fc6e 	bl	800089c <__aeabi_ddiv>
 800cfc0:	4602      	mov	r2, r0
 800cfc2:	460b      	mov	r3, r1
 800cfc4:	4610      	mov	r0, r2
 800cfc6:	4619      	mov	r1, r3
 800cfc8:	a335      	add	r3, pc, #212	@ (adr r3, 800d0a0 <getPhaseCurrents+0x110>)
 800cfca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfce:	f7f3 fc65 	bl	800089c <__aeabi_ddiv>
 800cfd2:	4602      	mov	r2, r0
 800cfd4:	460b      	mov	r3, r1
 800cfd6:	4610      	mov	r0, r2
 800cfd8:	4619      	mov	r1, r3
 800cfda:	a333      	add	r3, pc, #204	@ (adr r3, 800d0a8 <getPhaseCurrents+0x118>)
 800cfdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfe0:	f7f3 fc5c 	bl	800089c <__aeabi_ddiv>
 800cfe4:	4602      	mov	r2, r0
 800cfe6:	460b      	mov	r3, r1
 800cfe8:	4614      	mov	r4, r2
 800cfea:	461d      	mov	r5, r3
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cff0:	4618      	mov	r0, r3
 800cff2:	f7f3 fad1 	bl	8000598 <__aeabi_f2d>
 800cff6:	4602      	mov	r2, r0
 800cff8:	460b      	mov	r3, r1
 800cffa:	4620      	mov	r0, r4
 800cffc:	4629      	mov	r1, r5
 800cffe:	f7f3 f96b 	bl	80002d8 <__aeabi_dsub>
 800d002:	4602      	mov	r2, r0
 800d004:	460b      	mov	r3, r1
 800d006:	4610      	mov	r0, r2
 800d008:	4619      	mov	r1, r3
 800d00a:	f7f3 fe15 	bl	8000c38 <__aeabi_d2f>
 800d00e:	4602      	mov	r2, r0
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	649a      	str	r2, [r3, #72]	@ 0x48
    motor->Ib = ADC_2_CURRENT(adc_b) - motor->offset_ib;
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	ee07 3a90 	vmov	s15, r3
 800d01a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d01e:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 800d0b0 <getPhaseCurrents+0x120>
 800d022:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d026:	ee17 0a90 	vmov	r0, s15
 800d02a:	f7f3 fab5 	bl	8000598 <__aeabi_f2d>
 800d02e:	a31a      	add	r3, pc, #104	@ (adr r3, 800d098 <getPhaseCurrents+0x108>)
 800d030:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d034:	f7f3 fc32 	bl	800089c <__aeabi_ddiv>
 800d038:	4602      	mov	r2, r0
 800d03a:	460b      	mov	r3, r1
 800d03c:	4610      	mov	r0, r2
 800d03e:	4619      	mov	r1, r3
 800d040:	a317      	add	r3, pc, #92	@ (adr r3, 800d0a0 <getPhaseCurrents+0x110>)
 800d042:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d046:	f7f3 fc29 	bl	800089c <__aeabi_ddiv>
 800d04a:	4602      	mov	r2, r0
 800d04c:	460b      	mov	r3, r1
 800d04e:	4610      	mov	r0, r2
 800d050:	4619      	mov	r1, r3
 800d052:	a315      	add	r3, pc, #84	@ (adr r3, 800d0a8 <getPhaseCurrents+0x118>)
 800d054:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d058:	f7f3 fc20 	bl	800089c <__aeabi_ddiv>
 800d05c:	4602      	mov	r2, r0
 800d05e:	460b      	mov	r3, r1
 800d060:	4614      	mov	r4, r2
 800d062:	461d      	mov	r5, r3
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d068:	4618      	mov	r0, r3
 800d06a:	f7f3 fa95 	bl	8000598 <__aeabi_f2d>
 800d06e:	4602      	mov	r2, r0
 800d070:	460b      	mov	r3, r1
 800d072:	4620      	mov	r0, r4
 800d074:	4629      	mov	r1, r5
 800d076:	f7f3 f92f 	bl	80002d8 <__aeabi_dsub>
 800d07a:	4602      	mov	r2, r0
 800d07c:	460b      	mov	r3, r1
 800d07e:	4610      	mov	r0, r2
 800d080:	4619      	mov	r1, r3
 800d082:	f7f3 fdd9 	bl	8000c38 <__aeabi_d2f>
 800d086:	4602      	mov	r2, r0
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 800d08c:	bf00      	nop
 800d08e:	3710      	adds	r7, #16
 800d090:	46bd      	mov	sp, r7
 800d092:	bdb0      	pop	{r4, r5, r7, pc}
 800d094:	f3af 8000 	nop.w
 800d098:	00000000 	.word	0x00000000
 800d09c:	40affe00 	.word	0x40affe00
 800d0a0:	40000000 	.word	0x40000000
 800d0a4:	3f747ae1 	.word	0x3f747ae1
 800d0a8:	a0000000 	.word	0xa0000000
 800d0ac:	401d554c 	.word	0x401d554c
 800d0b0:	40533333 	.word	0x40533333

0800d0b4 <getABCurrents>:
// Ibeta = 1/sqrt(3) * Ia + 1/sqrt(3) * 2Ib
/*============================================================================*/
//   calculating Alpha Beta currents from phase currents
//   - function calculating Clarke transform of the phase currents
void getABCurrents(BldcMotor *motor)
{
 800d0b4:	b480      	push	{r7}
 800d0b6:	b083      	sub	sp, #12
 800d0b8:	af00      	add	r7, sp, #0
 800d0ba:	6078      	str	r0, [r7, #4]
    motor->Ialpha = motor->Ia;
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	651a      	str	r2, [r3, #80]	@ 0x50
    motor->Ibeta = _1_SQRT3 * motor->Ia + _2_SQRT3 * motor->Ib;
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800d0ca:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 800d0f8 <getABCurrents+0x44>
 800d0ce:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800d0d8:	eddf 6a08 	vldr	s13, [pc, #32]	@ 800d0fc <getABCurrents+0x48>
 800d0dc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d0e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54
}
 800d0ea:	bf00      	nop
 800d0ec:	370c      	adds	r7, #12
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f4:	4770      	bx	lr
 800d0f6:	bf00      	nop
 800d0f8:	3f13cd3a 	.word	0x3f13cd3a
 800d0fc:	3f93cd3a 	.word	0x3f93cd3a

0800d100 <getDQCurrents>:
/*============================================================================*/
// function used with the foc algorihtm
//   calculating D and Q currents from Alpha Beta currents and electrical angle
//   - function calculating Clarke transform of the phase currents
void getDQCurrents(BldcMotor *motor)
{
 800d100:	b580      	push	{r7, lr}
 800d102:	b084      	sub	sp, #16
 800d104:	af00      	add	r7, sp, #0
 800d106:	6078      	str	r0, [r7, #4]
    float ct;
    float st;
    _sincos(motor->angle_el, &st, &ct);
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800d10e:	f107 020c 	add.w	r2, r7, #12
 800d112:	f107 0308 	add.w	r3, r7, #8
 800d116:	4611      	mov	r1, r2
 800d118:	4618      	mov	r0, r3
 800d11a:	eeb0 0a67 	vmov.f32	s0, s15
 800d11e:	f000 f9db 	bl	800d4d8 <_sincos>
    motor->Id = motor->Ialpha * ct + motor->Ibeta * st;
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 800d128:	edd7 7a03 	vldr	s15, [r7, #12]
 800d12c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	edd3 6a15 	vldr	s13, [r3, #84]	@ 0x54
 800d136:	edd7 7a02 	vldr	s15, [r7, #8]
 800d13a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d13e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58
    motor->Iq = motor->Ibeta * ct - motor->Ialpha * st;
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	ed93 7a15 	vldr	s14, [r3, #84]	@ 0x54
 800d14e:	edd7 7a03 	vldr	s15, [r7, #12]
 800d152:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	edd3 6a14 	vldr	s13, [r3, #80]	@ 0x50
 800d15c:	edd7 7a02 	vldr	s15, [r7, #8]
 800d160:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d164:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c
 800d16e:	bf00      	nop
 800d170:	3710      	adds	r7, #16
 800d172:	46bd      	mov	sp, r7
 800d174:	bd80      	pop	{r7, pc}

0800d176 <encoderInit>:

#include "encoder.h"
#include "math_utils.h"
void encoderInit(MagEncoder *encoder, float _Ts, float (*_getRawAngle)(void))
{
 800d176:	b480      	push	{r7}
 800d178:	b085      	sub	sp, #20
 800d17a:	af00      	add	r7, sp, #0
 800d17c:	60f8      	str	r0, [r7, #12]
 800d17e:	ed87 0a02 	vstr	s0, [r7, #8]
 800d182:	6079      	str	r1, [r7, #4]
    encoder->angle_prev = 0;
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	f04f 0200 	mov.w	r2, #0
 800d18a:	601a      	str	r2, [r3, #0]
    encoder->vel_angle_prev = 0;
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	f04f 0200 	mov.w	r2, #0
 800d192:	605a      	str	r2, [r3, #4]
    encoder->full_rotations = 0;
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	2200      	movs	r2, #0
 800d198:	609a      	str	r2, [r3, #8]
    encoder->vel_full_rotations = 0;
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	2200      	movs	r2, #0
 800d19e:	60da      	str	r2, [r3, #12]
    encoder->shaftAngle = 0;
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	f04f 0200 	mov.w	r2, #0
 800d1a6:	611a      	str	r2, [r3, #16]
    encoder->fullAngle = 0;
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	f04f 0200 	mov.w	r2, #0
 800d1ae:	615a      	str	r2, [r3, #20]
    encoder->velocity = 0;
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	f04f 0200 	mov.w	r2, #0
 800d1b6:	619a      	str	r2, [r3, #24]
    encoder->Ts = _Ts;
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	68ba      	ldr	r2, [r7, #8]
 800d1bc:	61da      	str	r2, [r3, #28]
    encoder->getRawAngle = _getRawAngle;
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	687a      	ldr	r2, [r7, #4]
 800d1c2:	625a      	str	r2, [r3, #36]	@ 0x24
    encoder->direction = UNKNOWN;
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	2200      	movs	r2, #0
 800d1c8:	f883 2020 	strb.w	r2, [r3, #32]
}
 800d1cc:	bf00      	nop
 800d1ce:	3714      	adds	r7, #20
 800d1d0:	46bd      	mov	sp, r7
 800d1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d6:	4770      	bx	lr

0800d1d8 <encoderUpdate>:

void encoderUpdate(MagEncoder *encoder)
{
 800d1d8:	b580      	push	{r7, lr}
 800d1da:	b084      	sub	sp, #16
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	6078      	str	r0, [r7, #4]
    float val = encoder->getRawAngle();
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d1e4:	4798      	blx	r3
 800d1e6:	ed87 0a03 	vstr	s0, [r7, #12]

    float d_angle = val - encoder->angle_prev;
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	edd3 7a00 	vldr	s15, [r3]
 800d1f0:	ed97 7a03 	vldr	s14, [r7, #12]
 800d1f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d1f8:	edc7 7a02 	vstr	s15, [r7, #8]
    // 圈数检测
    if (abs(d_angle) > (0.8f * _2PI))
 800d1fc:	edd7 7a02 	vldr	s15, [r7, #8]
 800d200:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d204:	ee17 3a90 	vmov	r3, s15
 800d208:	2b00      	cmp	r3, #0
 800d20a:	bfb8      	it	lt
 800d20c:	425b      	neglt	r3, r3
 800d20e:	ee07 3a90 	vmov	s15, r3
 800d212:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d216:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 800d2d0 <encoderUpdate+0xf8>
 800d21a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d21e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d222:	dd0f      	ble.n	800d244 <encoderUpdate+0x6c>
        encoder->full_rotations += (d_angle > 0) ? -1 : 1;
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	689b      	ldr	r3, [r3, #8]
 800d228:	edd7 7a02 	vldr	s15, [r7, #8]
 800d22c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d234:	dd02      	ble.n	800d23c <encoderUpdate+0x64>
 800d236:	f04f 32ff 	mov.w	r2, #4294967295
 800d23a:	e000      	b.n	800d23e <encoderUpdate+0x66>
 800d23c:	2201      	movs	r2, #1
 800d23e:	441a      	add	r2, r3
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	609a      	str	r2, [r3, #8]

    // angle
    encoder->angle_prev = val;
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	68fa      	ldr	r2, [r7, #12]
 800d248:	601a      	str	r2, [r3, #0]
    encoder->shaftAngle = val;
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	68fa      	ldr	r2, [r7, #12]
 800d24e:	611a      	str	r2, [r3, #16]
    encoder->fullAngle = (float)encoder->full_rotations * _2PI + encoder->angle_prev;
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	689b      	ldr	r3, [r3, #8]
 800d254:	ee07 3a90 	vmov	s15, r3
 800d258:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d25c:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800d2d4 <encoderUpdate+0xfc>
 800d260:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	edd3 7a00 	vldr	s15, [r3]
 800d26a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	edc3 7a05 	vstr	s15, [r3, #20]

    // 速度计算
    val = ((float)(encoder->full_rotations - encoder->vel_full_rotations) * _2PI + (encoder->angle_prev - encoder->vel_angle_prev)) / encoder->Ts;
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	689a      	ldr	r2, [r3, #8]
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	68db      	ldr	r3, [r3, #12]
 800d27c:	1ad3      	subs	r3, r2, r3
 800d27e:	ee07 3a90 	vmov	s15, r3
 800d282:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d286:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 800d2d4 <encoderUpdate+0xfc>
 800d28a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	edd3 6a00 	vldr	s13, [r3]
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	edd3 7a01 	vldr	s15, [r3, #4]
 800d29a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800d29e:	ee77 6a27 	vadd.f32	s13, s14, s15
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	ed93 7a07 	vldr	s14, [r3, #28]
 800d2a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d2ac:	edc7 7a03 	vstr	s15, [r7, #12]
    // 保存变量以待将来使用
    encoder->vel_angle_prev = encoder->angle_prev;
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	681a      	ldr	r2, [r3, #0]
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	605a      	str	r2, [r3, #4]
    encoder->vel_full_rotations = encoder->full_rotations;
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	689a      	ldr	r2, [r3, #8]
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	60da      	str	r2, [r3, #12]
    encoder->velocity = val;
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	68fa      	ldr	r2, [r7, #12]
 800d2c4:	619a      	str	r2, [r3, #24]
}
 800d2c6:	bf00      	nop
 800d2c8:	3710      	adds	r7, #16
 800d2ca:	46bd      	mov	sp, r7
 800d2cc:	bd80      	pop	{r7, pc}
 800d2ce:	bf00      	nop
 800d2d0:	40a0d97c 	.word	0x40a0d97c
 800d2d4:	40c90fdb 	.word	0x40c90fdb

0800d2d8 <lpfInit>:
#include "lowpass_filter.h"

void lpfInit(LowPassFilter *filter, const float _Tf, const float _dt)
{
 800d2d8:	b480      	push	{r7}
 800d2da:	b085      	sub	sp, #20
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	60f8      	str	r0, [r7, #12]
 800d2e0:	ed87 0a02 	vstr	s0, [r7, #8]
 800d2e4:	edc7 0a01 	vstr	s1, [r7, #4]
    filter->Tf = _Tf;
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	68ba      	ldr	r2, [r7, #8]
 800d2ec:	601a      	str	r2, [r3, #0]
    filter->dt = _dt;
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	687a      	ldr	r2, [r7, #4]
 800d2f2:	605a      	str	r2, [r3, #4]
    filter->y_prev = 0;
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	f04f 0200 	mov.w	r2, #0
 800d2fa:	609a      	str	r2, [r3, #8]
}
 800d2fc:	bf00      	nop
 800d2fe:	3714      	adds	r7, #20
 800d300:	46bd      	mov	sp, r7
 800d302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d306:	4770      	bx	lr

0800d308 <lpfOperator>:

float lpfOperator(LowPassFilter *filter, float x)
{
 800d308:	b480      	push	{r7}
 800d30a:	b085      	sub	sp, #20
 800d30c:	af00      	add	r7, sp, #0
 800d30e:	6078      	str	r0, [r7, #4]
 800d310:	ed87 0a00 	vstr	s0, [r7]

    float alpha = filter->Tf / (filter->Tf + filter->dt);
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	edd3 6a00 	vldr	s13, [r3]
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	ed93 7a00 	vldr	s14, [r3]
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	edd3 7a01 	vldr	s15, [r3, #4]
 800d326:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d32a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d32e:	edc7 7a03 	vstr	s15, [r7, #12]
    float y = alpha * filter->y_prev + (1.0f - alpha) * x;
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	ed93 7a02 	vldr	s14, [r3, #8]
 800d338:	edd7 7a03 	vldr	s15, [r7, #12]
 800d33c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d340:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d344:	edd7 7a03 	vldr	s15, [r7, #12]
 800d348:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800d34c:	edd7 7a00 	vldr	s15, [r7]
 800d350:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d354:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d358:	edc7 7a02 	vstr	s15, [r7, #8]
    filter->y_prev = y;
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	68ba      	ldr	r2, [r7, #8]
 800d360:	609a      	str	r2, [r3, #8]

    return y;
 800d362:	68bb      	ldr	r3, [r7, #8]
 800d364:	ee07 3a90 	vmov	s15, r3
}
 800d368:	eeb0 0a67 	vmov.f32	s0, s15
 800d36c:	3714      	adds	r7, #20
 800d36e:	46bd      	mov	sp, r7
 800d370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d374:	4770      	bx	lr
	...

0800d378 <_sin>:

// function approximating the sine calculation by using fixed size array
// uses a 65 element lookup table and interpolation
// thanks to @dekutree for his work on optimizing this
__attribute__((weak)) float _sin(float a)
{
 800d378:	b580      	push	{r7, lr}
 800d37a:	b086      	sub	sp, #24
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	ed87 0a01 	vstr	s0, [r7, #4]
  // 16bit integer array for sine lookup. interpolation is used for better precision
  // 16 bit precision on sine value, 8 bit fractional value for interpolation, 6bit LUT size
  // resulting precision compared to stdlib sine is 0.00006480 (RMS difference in range -PI,PI for 3217 steps)
  static uint16_t sine_array[65] = {0, 804, 1608, 2411, 3212, 4011, 4808, 5602, 6393, 7180, 7962, 8740, 9512, 10279, 11039, 11793, 12540, 13279, 14010, 14733, 15447, 16151, 16846, 17531, 18205, 18868, 19520, 20160, 20788, 21403, 22006, 22595, 23170, 23732, 24279, 24812, 25330, 25833, 26320, 26791, 27246, 27684, 28106, 28511, 28899, 29269, 29622, 29957, 30274, 30572, 30853, 31114, 31357, 31581, 31786, 31972, 32138, 32286, 32413, 32522, 32610, 32679, 32729, 32758, 32768};
  unsigned int i = (unsigned int)(a * (64 * 4 * 256.0 / _2PI));
 800d382:	6878      	ldr	r0, [r7, #4]
 800d384:	f7f3 f908 	bl	8000598 <__aeabi_f2d>
 800d388:	a339      	add	r3, pc, #228	@ (adr r3, 800d470 <_sin+0xf8>)
 800d38a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d38e:	f7f3 f95b 	bl	8000648 <__aeabi_dmul>
 800d392:	4602      	mov	r2, r0
 800d394:	460b      	mov	r3, r1
 800d396:	4610      	mov	r0, r2
 800d398:	4619      	mov	r1, r3
 800d39a:	f7f3 fc2d 	bl	8000bf8 <__aeabi_d2uiz>
 800d39e:	4603      	mov	r3, r0
 800d3a0:	60fb      	str	r3, [r7, #12]
  int t1, t2, frac = i & 0xff;
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	b2db      	uxtb	r3, r3
 800d3a6:	60bb      	str	r3, [r7, #8]
  i = (i >> 8) & 0xff;
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	0a1b      	lsrs	r3, r3, #8
 800d3ac:	b2db      	uxtb	r3, r3
 800d3ae:	60fb      	str	r3, [r7, #12]
  if (i < 64)
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	2b3f      	cmp	r3, #63	@ 0x3f
 800d3b4:	d80b      	bhi.n	800d3ce <_sin+0x56>
  {
    t1 = sine_array[i];
 800d3b6:	4a2c      	ldr	r2, [pc, #176]	@ (800d468 <_sin+0xf0>)
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d3be:	617b      	str	r3, [r7, #20]
    t2 = sine_array[i + 1];
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	3301      	adds	r3, #1
 800d3c4:	4a28      	ldr	r2, [pc, #160]	@ (800d468 <_sin+0xf0>)
 800d3c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d3ca:	613b      	str	r3, [r7, #16]
 800d3cc:	e033      	b.n	800d436 <_sin+0xbe>
  }
  else if (i < 128)
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	2b7f      	cmp	r3, #127	@ 0x7f
 800d3d2:	d80e      	bhi.n	800d3f2 <_sin+0x7a>
  {
    t1 = sine_array[128 - i];
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 800d3da:	4a23      	ldr	r2, [pc, #140]	@ (800d468 <_sin+0xf0>)
 800d3dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d3e0:	617b      	str	r3, [r7, #20]
    t2 = sine_array[127 - i];
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 800d3e8:	4a1f      	ldr	r2, [pc, #124]	@ (800d468 <_sin+0xf0>)
 800d3ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d3ee:	613b      	str	r3, [r7, #16]
 800d3f0:	e021      	b.n	800d436 <_sin+0xbe>
  }
  else if (i < 192)
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	2bbf      	cmp	r3, #191	@ 0xbf
 800d3f6:	d80e      	bhi.n	800d416 <_sin+0x9e>
  {
    t1 = -sine_array[-128 + i];
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	3b80      	subs	r3, #128	@ 0x80
 800d3fc:	4a1a      	ldr	r2, [pc, #104]	@ (800d468 <_sin+0xf0>)
 800d3fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d402:	425b      	negs	r3, r3
 800d404:	617b      	str	r3, [r7, #20]
    t2 = -sine_array[-127 + i];
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	3b7f      	subs	r3, #127	@ 0x7f
 800d40a:	4a17      	ldr	r2, [pc, #92]	@ (800d468 <_sin+0xf0>)
 800d40c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d410:	425b      	negs	r3, r3
 800d412:	613b      	str	r3, [r7, #16]
 800d414:	e00f      	b.n	800d436 <_sin+0xbe>
  }
  else
  {
    t1 = -sine_array[256 - i];
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 800d41c:	4a12      	ldr	r2, [pc, #72]	@ (800d468 <_sin+0xf0>)
 800d41e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d422:	425b      	negs	r3, r3
 800d424:	617b      	str	r3, [r7, #20]
    t2 = -sine_array[255 - i];
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 800d42c:	4a0e      	ldr	r2, [pc, #56]	@ (800d468 <_sin+0xf0>)
 800d42e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d432:	425b      	negs	r3, r3
 800d434:	613b      	str	r3, [r7, #16]
  }
  return (1.0f / 32768.0f) * (t1 + (((t2 - t1) * frac) >> 8));
 800d436:	693a      	ldr	r2, [r7, #16]
 800d438:	697b      	ldr	r3, [r7, #20]
 800d43a:	1ad3      	subs	r3, r2, r3
 800d43c:	68ba      	ldr	r2, [r7, #8]
 800d43e:	fb02 f303 	mul.w	r3, r2, r3
 800d442:	121a      	asrs	r2, r3, #8
 800d444:	697b      	ldr	r3, [r7, #20]
 800d446:	4413      	add	r3, r2
 800d448:	ee07 3a90 	vmov	s15, r3
 800d44c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d450:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 800d46c <_sin+0xf4>
 800d454:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800d458:	eeb0 0a67 	vmov.f32	s0, s15
 800d45c:	3718      	adds	r7, #24
 800d45e:	46bd      	mov	sp, r7
 800d460:	bd80      	pop	{r7, pc}
 800d462:	bf00      	nop
 800d464:	f3af 8000 	nop.w
 800d468:	2000000c 	.word	0x2000000c
 800d46c:	38000000 	.word	0x38000000
 800d470:	6446f9b4 	.word	0x6446f9b4
 800d474:	40c45f30 	.word	0x40c45f30

0800d478 <_cos>:
// ~55us (float array)
// ~56us (int array)
// precision +-0.005
// it has to receive an angle in between 0 and 2PI
__attribute__((weak)) float _cos(float a)
{
 800d478:	b580      	push	{r7, lr}
 800d47a:	b084      	sub	sp, #16
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	ed87 0a01 	vstr	s0, [r7, #4]
  float a_sin = a + _PI_2;
 800d482:	edd7 7a01 	vldr	s15, [r7, #4]
 800d486:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 800d4d0 <_cos+0x58>
 800d48a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d48e:	edc7 7a03 	vstr	s15, [r7, #12]
  a_sin = a_sin > _2PI ? a_sin - _2PI : a_sin;
 800d492:	edd7 7a03 	vldr	s15, [r7, #12]
 800d496:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800d4d4 <_cos+0x5c>
 800d49a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d49e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4a2:	dd06      	ble.n	800d4b2 <_cos+0x3a>
 800d4a4:	edd7 7a03 	vldr	s15, [r7, #12]
 800d4a8:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 800d4d4 <_cos+0x5c>
 800d4ac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d4b0:	e001      	b.n	800d4b6 <_cos+0x3e>
 800d4b2:	edd7 7a03 	vldr	s15, [r7, #12]
 800d4b6:	edc7 7a03 	vstr	s15, [r7, #12]
  return _sin(a_sin);
 800d4ba:	ed97 0a03 	vldr	s0, [r7, #12]
 800d4be:	f7ff ff5b 	bl	800d378 <_sin>
 800d4c2:	eef0 7a40 	vmov.f32	s15, s0
}
 800d4c6:	eeb0 0a67 	vmov.f32	s0, s15
 800d4ca:	3710      	adds	r7, #16
 800d4cc:	46bd      	mov	sp, r7
 800d4ce:	bd80      	pop	{r7, pc}
 800d4d0:	3fc90fdb 	.word	0x3fc90fdb
 800d4d4:	40c90fdb 	.word	0x40c90fdb

0800d4d8 <_sincos>:

__attribute__((weak)) void _sincos(float a, float *s, float *c)
{
 800d4d8:	b580      	push	{r7, lr}
 800d4da:	b084      	sub	sp, #16
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	ed87 0a03 	vstr	s0, [r7, #12]
 800d4e2:	60b8      	str	r0, [r7, #8]
 800d4e4:	6079      	str	r1, [r7, #4]
  *s = _sin(a);
 800d4e6:	ed97 0a03 	vldr	s0, [r7, #12]
 800d4ea:	f7ff ff45 	bl	800d378 <_sin>
 800d4ee:	eef0 7a40 	vmov.f32	s15, s0
 800d4f2:	68bb      	ldr	r3, [r7, #8]
 800d4f4:	edc3 7a00 	vstr	s15, [r3]
  *c = _cos(a);
 800d4f8:	ed97 0a03 	vldr	s0, [r7, #12]
 800d4fc:	f7ff ffbc 	bl	800d478 <_cos>
 800d500:	eef0 7a40 	vmov.f32	s15, s0
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	edc3 7a00 	vstr	s15, [r3]
}
 800d50a:	bf00      	nop
 800d50c:	3710      	adds	r7, #16
 800d50e:	46bd      	mov	sp, r7
 800d510:	bd80      	pop	{r7, pc}
 800d512:	0000      	movs	r0, r0
 800d514:	0000      	movs	r0, r0
	...

0800d518 <_normalizeAngle>:
  return r;
}

// normalizing radian angle to [0,2PI]
__attribute__((weak)) float _normalizeAngle(float angle)
{
 800d518:	b580      	push	{r7, lr}
 800d51a:	b084      	sub	sp, #16
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	ed87 0a01 	vstr	s0, [r7, #4]
  float a = fmod(angle, _2PI);
<<<<<<< HEAD
 800c5a2:	6878      	ldr	r0, [r7, #4]
 800c5a4:	f7f3 fff8 	bl	8000598 <__aeabi_f2d>
 800c5a8:	4602      	mov	r2, r0
 800c5aa:	460b      	mov	r3, r1
 800c5ac:	ed9f 1b12 	vldr	d1, [pc, #72]	@ 800c5f8 <_normalizeAngle+0x60>
 800c5b0:	ec43 2b10 	vmov	d0, r2, r3
 800c5b4:	f005 ff4a 	bl	801244c <fmod>
 800c5b8:	ec53 2b10 	vmov	r2, r3, d0
 800c5bc:	4610      	mov	r0, r2
 800c5be:	4619      	mov	r1, r3
 800c5c0:	f7f4 fb3a 	bl	8000c38 <__aeabi_d2f>
 800c5c4:	4603      	mov	r3, r0
 800c5c6:	60fb      	str	r3, [r7, #12]
=======
 800d522:	6878      	ldr	r0, [r7, #4]
 800d524:	f7f3 f838 	bl	8000598 <__aeabi_f2d>
 800d528:	4602      	mov	r2, r0
 800d52a:	460b      	mov	r3, r1
 800d52c:	ed9f 1b12 	vldr	d1, [pc, #72]	@ 800d578 <_normalizeAngle+0x60>
 800d530:	ec43 2b10 	vmov	d0, r2, r3
 800d534:	f006 f8fa 	bl	801372c <fmod>
 800d538:	ec53 2b10 	vmov	r2, r3, d0
 800d53c:	4610      	mov	r0, r2
 800d53e:	4619      	mov	r1, r3
 800d540:	f7f3 fb7a 	bl	8000c38 <__aeabi_d2f>
 800d544:	4603      	mov	r3, r0
 800d546:	60fb      	str	r3, [r7, #12]
>>>>>>> f88694781bd54d0bca96bec7ac145bdac62fa329
  return a >= 0 ? a : (a + _2PI);
 800d548:	edd7 7a03 	vldr	s15, [r7, #12]
 800d54c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d554:	db02      	blt.n	800d55c <_normalizeAngle+0x44>
 800d556:	edd7 7a03 	vldr	s15, [r7, #12]
 800d55a:	e005      	b.n	800d568 <_normalizeAngle+0x50>
 800d55c:	edd7 7a03 	vldr	s15, [r7, #12]
 800d560:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800d580 <_normalizeAngle+0x68>
 800d564:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 800d568:	eeb0 0a67 	vmov.f32	s0, s15
 800d56c:	3710      	adds	r7, #16
 800d56e:	46bd      	mov	sp, r7
 800d570:	bd80      	pop	{r7, pc}
 800d572:	bf00      	nop
 800d574:	f3af 8000 	nop.w
 800d578:	60000000 	.word	0x60000000
 800d57c:	401921fb 	.word	0x401921fb
 800d580:	40c90fdb 	.word	0x40c90fdb

0800d584 <_electricalAngle>:

// Electrical angle calculation
float _electricalAngle(float shaft_angle, int pole_pairs)
{
 800d584:	b480      	push	{r7}
 800d586:	b083      	sub	sp, #12
 800d588:	af00      	add	r7, sp, #0
 800d58a:	ed87 0a01 	vstr	s0, [r7, #4]
 800d58e:	6038      	str	r0, [r7, #0]
  return (shaft_angle * pole_pairs);
 800d590:	683b      	ldr	r3, [r7, #0]
 800d592:	ee07 3a90 	vmov	s15, r3
 800d596:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d59a:	edd7 7a01 	vldr	s15, [r7, #4]
 800d59e:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 800d5a2:	eeb0 0a67 	vmov.f32	s0, s15
 800d5a6:	370c      	adds	r7, #12
 800d5a8:	46bd      	mov	sp, r7
 800d5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ae:	4770      	bx	lr

0800d5b0 <pidInit>:
#include "pid.h"
#include "math_utils.h"

void pidInit(PidController *pidController, float _P, float _I, float _D, float _ramp, float _limit, float _Ts)
{
 800d5b0:	b480      	push	{r7}
 800d5b2:	b089      	sub	sp, #36	@ 0x24
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	61f8      	str	r0, [r7, #28]
 800d5b8:	ed87 0a06 	vstr	s0, [r7, #24]
 800d5bc:	edc7 0a05 	vstr	s1, [r7, #20]
 800d5c0:	ed87 1a04 	vstr	s2, [r7, #16]
 800d5c4:	edc7 1a03 	vstr	s3, [r7, #12]
 800d5c8:	ed87 2a02 	vstr	s4, [r7, #8]
 800d5cc:	edc7 2a01 	vstr	s5, [r7, #4]
    pidController->P = _P;
 800d5d0:	69fb      	ldr	r3, [r7, #28]
 800d5d2:	69ba      	ldr	r2, [r7, #24]
 800d5d4:	601a      	str	r2, [r3, #0]
    pidController->I = _I;
 800d5d6:	69fb      	ldr	r3, [r7, #28]
 800d5d8:	697a      	ldr	r2, [r7, #20]
 800d5da:	605a      	str	r2, [r3, #4]
    pidController->D = _D;
 800d5dc:	69fb      	ldr	r3, [r7, #28]
 800d5de:	693a      	ldr	r2, [r7, #16]
 800d5e0:	609a      	str	r2, [r3, #8]
    pidController->output_ramp = _ramp;
 800d5e2:	69fb      	ldr	r3, [r7, #28]
 800d5e4:	68fa      	ldr	r2, [r7, #12]
 800d5e6:	60da      	str	r2, [r3, #12]
    pidController->limit = _limit;
 800d5e8:	69fb      	ldr	r3, [r7, #28]
 800d5ea:	68ba      	ldr	r2, [r7, #8]
 800d5ec:	611a      	str	r2, [r3, #16]
    pidController->Ts = _Ts;
 800d5ee:	69fb      	ldr	r3, [r7, #28]
 800d5f0:	687a      	ldr	r2, [r7, #4]
 800d5f2:	621a      	str	r2, [r3, #32]
    pidController->error_prev = 0;
 800d5f4:	69fb      	ldr	r3, [r7, #28]
 800d5f6:	f04f 0200 	mov.w	r2, #0
 800d5fa:	615a      	str	r2, [r3, #20]
    pidController->output_prev = 0;
 800d5fc:	69fb      	ldr	r3, [r7, #28]
 800d5fe:	f04f 0200 	mov.w	r2, #0
 800d602:	619a      	str	r2, [r3, #24]
    pidController->integral_prev = 0;
 800d604:	69fb      	ldr	r3, [r7, #28]
 800d606:	f04f 0200 	mov.w	r2, #0
 800d60a:	61da      	str	r2, [r3, #28]
}
 800d60c:	bf00      	nop
 800d60e:	3724      	adds	r7, #36	@ 0x24
 800d610:	46bd      	mov	sp, r7
 800d612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d616:	4770      	bx	lr

0800d618 <pidOperator>:

// PID controller function
float pidOperator(PidController *pidController, float error)
{
 800d618:	b480      	push	{r7}
 800d61a:	b08b      	sub	sp, #44	@ 0x2c
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	6078      	str	r0, [r7, #4]
 800d620:	ed87 0a00 	vstr	s0, [r7]
    // u(s) = (P + I/s + Ds)e(s)
    // Discrete implementations
    // proportional part
    // u_p  = P *e(k)
    float proportional = pidController->P * error;
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	edd3 7a00 	vldr	s15, [r3]
 800d62a:	ed97 7a00 	vldr	s14, [r7]
 800d62e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d632:	edc7 7a08 	vstr	s15, [r7, #32]
    // Tustin transform of the integral part
    // u_ik = u_ik_1  + I*Ts/2*(ek + ek_1)
    float a = 0.5f * (error + pidController->error_prev);
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	ed93 7a05 	vldr	s14, [r3, #20]
 800d63c:	edd7 7a00 	vldr	s15, [r7]
 800d640:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d644:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800d648:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d64c:	edc7 7a07 	vstr	s15, [r7, #28]
    float b = pidController->I * pidController->Ts;
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	ed93 7a01 	vldr	s14, [r3, #4]
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	edd3 7a08 	vldr	s15, [r3, #32]
 800d65c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d660:	edc7 7a06 	vstr	s15, [r7, #24]
    float integral = pidController->integral_prev + pidController->I * pidController->Ts * 0.5f * (error + pidController->error_prev);
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	ed93 7a07 	vldr	s14, [r3, #28]
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	edd3 6a01 	vldr	s13, [r3, #4]
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	edd3 7a08 	vldr	s15, [r3, #32]
 800d676:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d67a:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 800d67e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	ed93 6a05 	vldr	s12, [r3, #20]
 800d688:	edd7 7a00 	vldr	s15, [r7]
 800d68c:	ee76 7a27 	vadd.f32	s15, s12, s15
 800d690:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d694:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d698:	edc7 7a05 	vstr	s15, [r7, #20]
    // antiwindup - limit the output
    integral = _constrain(integral, -pidController->limit, pidController->limit);
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	edd3 7a04 	vldr	s15, [r3, #16]
 800d6a2:	eef1 7a67 	vneg.f32	s15, s15
 800d6a6:	ed97 7a05 	vldr	s14, [r7, #20]
 800d6aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d6ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6b2:	d505      	bpl.n	800d6c0 <pidOperator+0xa8>
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	edd3 7a04 	vldr	s15, [r3, #16]
 800d6ba:	eef1 7a67 	vneg.f32	s15, s15
 800d6be:	e00f      	b.n	800d6e0 <pidOperator+0xc8>
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	edd3 7a04 	vldr	s15, [r3, #16]
 800d6c6:	ed97 7a05 	vldr	s14, [r7, #20]
 800d6ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d6ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6d2:	dd03      	ble.n	800d6dc <pidOperator+0xc4>
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	edd3 7a04 	vldr	s15, [r3, #16]
 800d6da:	e001      	b.n	800d6e0 <pidOperator+0xc8>
 800d6dc:	edd7 7a05 	vldr	s15, [r7, #20]
 800d6e0:	edc7 7a05 	vstr	s15, [r7, #20]
    // Discrete derivation
    // u_dk = D(ek - ek_1)/Ts
    float derivative = pidController->D * (error - pidController->error_prev) / pidController->Ts;
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	ed93 7a02 	vldr	s14, [r3, #8]
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	edd3 7a05 	vldr	s15, [r3, #20]
 800d6f0:	edd7 6a00 	vldr	s13, [r7]
 800d6f4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800d6f8:	ee67 6a27 	vmul.f32	s13, s14, s15
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	ed93 7a08 	vldr	s14, [r3, #32]
 800d702:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d706:	edc7 7a04 	vstr	s15, [r7, #16]

    // sum all the components
    float output = proportional + integral + derivative;
 800d70a:	ed97 7a08 	vldr	s14, [r7, #32]
 800d70e:	edd7 7a05 	vldr	s15, [r7, #20]
 800d712:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d716:	ed97 7a04 	vldr	s14, [r7, #16]
 800d71a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d71e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    // antiwindup - limit the output variable
    output = _constrain(output, -pidController->limit, pidController->limit);
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	edd3 7a04 	vldr	s15, [r3, #16]
 800d728:	eef1 7a67 	vneg.f32	s15, s15
 800d72c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800d730:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d738:	d505      	bpl.n	800d746 <pidOperator+0x12e>
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	edd3 7a04 	vldr	s15, [r3, #16]
 800d740:	eef1 7a67 	vneg.f32	s15, s15
 800d744:	e00f      	b.n	800d766 <pidOperator+0x14e>
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	edd3 7a04 	vldr	s15, [r3, #16]
 800d74c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800d750:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d758:	dd03      	ble.n	800d762 <pidOperator+0x14a>
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	edd3 7a04 	vldr	s15, [r3, #16]
 800d760:	e001      	b.n	800d766 <pidOperator+0x14e>
 800d762:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800d766:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // if output ramp defined
    if (pidController->output_ramp > 0)
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	edd3 7a03 	vldr	s15, [r3, #12]
 800d770:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d778:	dd42      	ble.n	800d800 <pidOperator+0x1e8>
    {
        // limit the acceleration by ramping the output
        float output_rate = (output - pidController->output_prev) / pidController->Ts;
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	edd3 7a06 	vldr	s15, [r3, #24]
 800d780:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800d784:	ee77 6a67 	vsub.f32	s13, s14, s15
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	ed93 7a08 	vldr	s14, [r3, #32]
 800d78e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d792:	edc7 7a03 	vstr	s15, [r7, #12]
        if (output_rate > pidController->output_ramp)
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	edd3 7a03 	vldr	s15, [r3, #12]
 800d79c:	ed97 7a03 	vldr	s14, [r7, #12]
 800d7a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d7a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7a8:	dd0f      	ble.n	800d7ca <pidOperator+0x1b2>
            output = pidController->output_prev + pidController->output_ramp * pidController->Ts;
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	ed93 7a06 	vldr	s14, [r3, #24]
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	edd3 6a03 	vldr	s13, [r3, #12]
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	edd3 7a08 	vldr	s15, [r3, #32]
 800d7bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d7c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d7c4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
 800d7c8:	e01a      	b.n	800d800 <pidOperator+0x1e8>
        else if (output_rate < -pidController->output_ramp)
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	edd3 7a03 	vldr	s15, [r3, #12]
 800d7d0:	eef1 7a67 	vneg.f32	s15, s15
 800d7d4:	ed97 7a03 	vldr	s14, [r7, #12]
 800d7d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d7dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7e0:	d50e      	bpl.n	800d800 <pidOperator+0x1e8>
            output = pidController->output_prev - pidController->output_ramp * pidController->Ts;
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	ed93 7a06 	vldr	s14, [r3, #24]
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	edd3 6a03 	vldr	s13, [r3, #12]
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	edd3 7a08 	vldr	s15, [r3, #32]
 800d7f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d7f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d7fc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    }
    // saving for the next pass
    pidController->integral_prev = integral;
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	697a      	ldr	r2, [r7, #20]
 800d804:	61da      	str	r2, [r3, #28]
    pidController->output_prev = output;
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d80a:	619a      	str	r2, [r3, #24]
    pidController->error_prev = error;
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	683a      	ldr	r2, [r7, #0]
 800d810:	615a      	str	r2, [r3, #20]
    return output;
 800d812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d814:	ee07 3a90 	vmov	s15, r3
}
 800d818:	eeb0 0a67 	vmov.f32	s0, s15
 800d81c:	372c      	adds	r7, #44	@ 0x2c
 800d81e:	46bd      	mov	sp, r7
 800d820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d824:	4770      	bx	lr
	...

0800d828 <setTorque>:
    motor->updatePwm(HALP_PWM_PERIOD * motor->Ta, HALP_PWM_PERIOD * motor->Tb, HALP_PWM_PERIOD * motor->Tc);
}
#elif 1

void setTorque(BldcMotor *motor, float Uq, float Ud, float angle_el)
{
 800d828:	b580      	push	{r7, lr}
 800d82a:	b08e      	sub	sp, #56	@ 0x38
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	60f8      	str	r0, [r7, #12]
 800d830:	ed87 0a02 	vstr	s0, [r7, #8]
 800d834:	edc7 0a01 	vstr	s1, [r7, #4]
 800d838:	ed87 1a00 	vstr	s2, [r7]
    float Ualpha, Ubeta;
    float Ua, Ub, Uc;

    // Sinusoidal PWM modulation
    // Inverse Park + Clarke transformation
    _sincos(angle_el, &_sa, &_ca);
 800d83c:	f107 0214 	add.w	r2, r7, #20
 800d840:	f107 0310 	add.w	r3, r7, #16
 800d844:	4611      	mov	r1, r2
 800d846:	4618      	mov	r0, r3
 800d848:	ed97 0a00 	vldr	s0, [r7]
 800d84c:	f7ff fe44 	bl	800d4d8 <_sincos>

    // Inverse park transform
    Ualpha = _ca * Ud - _sa * Uq; // -sin(angle) * Uq;
 800d850:	ed97 7a05 	vldr	s14, [r7, #20]
 800d854:	edd7 7a01 	vldr	s15, [r7, #4]
 800d858:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d85c:	edd7 6a04 	vldr	s13, [r7, #16]
 800d860:	edd7 7a02 	vldr	s15, [r7, #8]
 800d864:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d868:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d86c:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    Ubeta = _sa * Ud + _ca * Uq;  //  cos(angle) * Uq;
 800d870:	ed97 7a04 	vldr	s14, [r7, #16]
 800d874:	edd7 7a01 	vldr	s15, [r7, #4]
 800d878:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d87c:	edd7 6a05 	vldr	s13, [r7, #20]
 800d880:	edd7 7a02 	vldr	s15, [r7, #8]
 800d884:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d888:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d88c:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

    // Clarke transform
    Ua = Ualpha;
 800d890:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d892:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Ub = -0.5f * Ualpha + _SQRT3_2 * Ubeta;
 800d894:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800d898:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 800d89c:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d8a0:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800d8a4:	eddf 6a95 	vldr	s13, [pc, #596]	@ 800dafc <setTorque+0x2d4>
 800d8a8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d8ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d8b0:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    Uc = -0.5f * Ualpha - _SQRT3_2 * Ubeta;
 800d8b4:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800d8b8:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 800d8bc:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d8c0:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800d8c4:	eddf 6a8d 	vldr	s13, [pc, #564]	@ 800dafc <setTorque+0x2d4>
 800d8c8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d8cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d8d0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    center = UqMAX / 2;
 800d8d4:	4b8a      	ldr	r3, [pc, #552]	@ (800db00 <setTorque+0x2d8>)
 800d8d6:	623b      	str	r3, [r7, #32]

    // discussed here: https://community.simplefoc.com/t/embedded-world-2023-stm32-cordic-co-processor/3107/165?u=candas1
    // a bit more info here: https://microchipdeveloper.com/mct5001:which-zsm-is-best
    // Midpoint Clamp
    float Umin = min(Ua, min(Ub, Uc));
 800d8d8:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800d8dc:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800d8e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d8e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8e8:	d502      	bpl.n	800d8f0 <setTorque+0xc8>
 800d8ea:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800d8ee:	e001      	b.n	800d8f4 <setTorque+0xcc>
 800d8f0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800d8f4:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800d8f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d8fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d900:	dd01      	ble.n	800d906 <setTorque+0xde>
 800d902:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d904:	e00b      	b.n	800d91e <setTorque+0xf6>
 800d906:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800d90a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800d90e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d916:	d501      	bpl.n	800d91c <setTorque+0xf4>
 800d918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d91a:	e000      	b.n	800d91e <setTorque+0xf6>
 800d91c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d91e:	61fb      	str	r3, [r7, #28]
    float Umax = max(Ua, max(Ub, Uc));
 800d920:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800d924:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800d928:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d92c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d930:	dd02      	ble.n	800d938 <setTorque+0x110>
 800d932:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800d936:	e001      	b.n	800d93c <setTorque+0x114>
 800d938:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800d93c:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800d940:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d948:	d501      	bpl.n	800d94e <setTorque+0x126>
 800d94a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d94c:	e00b      	b.n	800d966 <setTorque+0x13e>
 800d94e:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800d952:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800d956:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d95a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d95e:	dd01      	ble.n	800d964 <setTorque+0x13c>
 800d960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d962:	e000      	b.n	800d966 <setTorque+0x13e>
 800d964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d966:	61bb      	str	r3, [r7, #24]
    center -= (Umax + Umin) / 2;
 800d968:	ed97 7a06 	vldr	s14, [r7, #24]
 800d96c:	edd7 7a07 	vldr	s15, [r7, #28]
 800d970:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d974:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800d978:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d97c:	ed97 7a08 	vldr	s14, [r7, #32]
 800d980:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d984:	edc7 7a08 	vstr	s15, [r7, #32]

    Ua += center;
 800d988:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800d98c:	edd7 7a08 	vldr	s15, [r7, #32]
 800d990:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d994:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    Ub += center;
 800d998:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800d99c:	edd7 7a08 	vldr	s15, [r7, #32]
 800d9a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d9a4:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    Uc += center;
 800d9a8:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800d9ac:	edd7 7a08 	vldr	s15, [r7, #32]
 800d9b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d9b4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    motor->Ta = _constrain(Ua / U_DC, 0.0f, 1.0f);
 800d9b8:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800d9bc:	eef2 6a08 	vmov.f32	s13, #40	@ 0x41400000  12.0
 800d9c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d9c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d9c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9cc:	d502      	bpl.n	800d9d4 <setTorque+0x1ac>
 800d9ce:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800db04 <setTorque+0x2dc>
 800d9d2:	e015      	b.n	800da00 <setTorque+0x1d8>
 800d9d4:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800d9d8:	eef2 6a08 	vmov.f32	s13, #40	@ 0x41400000  12.0
 800d9dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d9e0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d9e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d9e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9ec:	dd02      	ble.n	800d9f4 <setTorque+0x1cc>
 800d9ee:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800d9f2:	e005      	b.n	800da00 <setTorque+0x1d8>
 800d9f4:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800d9f8:	eef2 6a08 	vmov.f32	s13, #40	@ 0x41400000  12.0
 800d9fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	edc3 7a49 	vstr	s15, [r3, #292]	@ 0x124
    motor->Tb = _constrain(Ub / U_DC, 0.0f, 1.0f);
 800da06:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800da0a:	eef2 6a08 	vmov.f32	s13, #40	@ 0x41400000  12.0
 800da0e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800da12:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800da16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da1a:	d502      	bpl.n	800da22 <setTorque+0x1fa>
 800da1c:	eddf 7a39 	vldr	s15, [pc, #228]	@ 800db04 <setTorque+0x2dc>
 800da20:	e015      	b.n	800da4e <setTorque+0x226>
 800da22:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800da26:	eef2 6a08 	vmov.f32	s13, #40	@ 0x41400000  12.0
 800da2a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800da2e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800da32:	eef4 7ac7 	vcmpe.f32	s15, s14
 800da36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da3a:	dd02      	ble.n	800da42 <setTorque+0x21a>
 800da3c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800da40:	e005      	b.n	800da4e <setTorque+0x226>
 800da42:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800da46:	eef2 6a08 	vmov.f32	s13, #40	@ 0x41400000  12.0
 800da4a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	edc3 7a4a 	vstr	s15, [r3, #296]	@ 0x128
    motor->Tc = _constrain(Uc / U_DC, 0.0f, 1.0f);
 800da54:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800da58:	eef2 6a08 	vmov.f32	s13, #40	@ 0x41400000  12.0
 800da5c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800da60:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800da64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da68:	d502      	bpl.n	800da70 <setTorque+0x248>
 800da6a:	eddf 7a26 	vldr	s15, [pc, #152]	@ 800db04 <setTorque+0x2dc>
 800da6e:	e015      	b.n	800da9c <setTorque+0x274>
 800da70:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800da74:	eef2 6a08 	vmov.f32	s13, #40	@ 0x41400000  12.0
 800da78:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800da7c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800da80:	eef4 7ac7 	vcmpe.f32	s15, s14
 800da84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da88:	dd02      	ble.n	800da90 <setTorque+0x268>
 800da8a:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800da8e:	e005      	b.n	800da9c <setTorque+0x274>
 800da90:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800da94:	eef2 6a08 	vmov.f32	s13, #40	@ 0x41400000  12.0
 800da98:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	edc3 7a4b 	vstr	s15, [r3, #300]	@ 0x12c

    motor->updatePwm(HALP_PWM_PERIOD * motor->Ta, HALP_PWM_PERIOD * motor->Tb, HALP_PWM_PERIOD * motor->Tc);
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 800daa8:	68fa      	ldr	r2, [r7, #12]
 800daaa:	edd2 7a49 	vldr	s15, [r2, #292]	@ 0x124
 800daae:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 800db08 <setTorque+0x2e0>
 800dab2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dab6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800daba:	ee17 2a90 	vmov	r2, s15
 800dabe:	b290      	uxth	r0, r2
 800dac0:	68fa      	ldr	r2, [r7, #12]
 800dac2:	edd2 7a4a 	vldr	s15, [r2, #296]	@ 0x128
 800dac6:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 800db08 <setTorque+0x2e0>
 800daca:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dace:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dad2:	ee17 2a90 	vmov	r2, s15
 800dad6:	b291      	uxth	r1, r2
 800dad8:	68fa      	ldr	r2, [r7, #12]
 800dada:	edd2 7a4b 	vldr	s15, [r2, #300]	@ 0x12c
 800dade:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 800db08 <setTorque+0x2e0>
 800dae2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dae6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800daea:	ee17 2a90 	vmov	r2, s15
 800daee:	b292      	uxth	r2, r2
 800daf0:	4798      	blx	r3
    // set the voltages in driver
    // driver->setPwm(Ua, Ub, Uc);
}
 800daf2:	bf00      	nop
 800daf4:	3738      	adds	r7, #56	@ 0x38
 800daf6:	46bd      	mov	sp, r7
 800daf8:	bd80      	pop	{r7, pc}
 800dafa:	bf00      	nop
 800dafc:	3f5db3d7 	.word	0x3f5db3d7
 800db00:	405db3d7 	.word	0x405db3d7
 800db04:	00000000 	.word	0x00000000
 800db08:	45fa0000 	.word	0x45fa0000

0800db0c <startPwm1>:

static void standingBy();
static void working(void);
static void updatePwm1(unsigned short int a, unsigned short int b, unsigned short int c);
static void startPwm1()
{
 800db0c:	b580      	push	{r7, lr}
 800db0e:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800db10:	2100      	movs	r1, #0
 800db12:	480c      	ldr	r0, [pc, #48]	@ (800db44 <startPwm1+0x38>)
 800db14:	f7fb fc78 	bl	8009408 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800db18:	2104      	movs	r1, #4
 800db1a:	480a      	ldr	r0, [pc, #40]	@ (800db44 <startPwm1+0x38>)
 800db1c:	f7fb fc74 	bl	8009408 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800db20:	2108      	movs	r1, #8
 800db22:	4808      	ldr	r0, [pc, #32]	@ (800db44 <startPwm1+0x38>)
 800db24:	f7fb fc70 	bl	8009408 <HAL_TIM_PWM_Start>
    HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 800db28:	2100      	movs	r1, #0
 800db2a:	4806      	ldr	r0, [pc, #24]	@ (800db44 <startPwm1+0x38>)
 800db2c:	f7fc fd84 	bl	800a638 <HAL_TIMEx_PWMN_Start>
    HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 800db30:	2104      	movs	r1, #4
 800db32:	4804      	ldr	r0, [pc, #16]	@ (800db44 <startPwm1+0x38>)
 800db34:	f7fc fd80 	bl	800a638 <HAL_TIMEx_PWMN_Start>
    HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 800db38:	2108      	movs	r1, #8
 800db3a:	4802      	ldr	r0, [pc, #8]	@ (800db44 <startPwm1+0x38>)
 800db3c:	f7fc fd7c 	bl	800a638 <HAL_TIMEx_PWMN_Start>
}
 800db40:	bf00      	nop
 800db42:	bd80      	pop	{r7, pc}
 800db44:	2000055c 	.word	0x2000055c

0800db48 <stopPwm1>:
static void stopPwm1()
{
 800db48:	b580      	push	{r7, lr}
 800db4a:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800db4c:	2100      	movs	r1, #0
 800db4e:	480c      	ldr	r0, [pc, #48]	@ (800db80 <stopPwm1+0x38>)
 800db50:	f7fb fd5a 	bl	8009608 <HAL_TIM_PWM_Stop>
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 800db54:	2104      	movs	r1, #4
 800db56:	480a      	ldr	r0, [pc, #40]	@ (800db80 <stopPwm1+0x38>)
 800db58:	f7fb fd56 	bl	8009608 <HAL_TIM_PWM_Stop>
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 800db5c:	2108      	movs	r1, #8
 800db5e:	4808      	ldr	r0, [pc, #32]	@ (800db80 <stopPwm1+0x38>)
 800db60:	f7fb fd52 	bl	8009608 <HAL_TIM_PWM_Stop>
    HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 800db64:	2100      	movs	r1, #0
 800db66:	4806      	ldr	r0, [pc, #24]	@ (800db80 <stopPwm1+0x38>)
 800db68:	f7fc fe1a 	bl	800a7a0 <HAL_TIMEx_PWMN_Stop>
    HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 800db6c:	2104      	movs	r1, #4
 800db6e:	4804      	ldr	r0, [pc, #16]	@ (800db80 <stopPwm1+0x38>)
 800db70:	f7fc fe16 	bl	800a7a0 <HAL_TIMEx_PWMN_Stop>
    HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3);
 800db74:	2108      	movs	r1, #8
 800db76:	4802      	ldr	r0, [pc, #8]	@ (800db80 <stopPwm1+0x38>)
 800db78:	f7fc fe12 	bl	800a7a0 <HAL_TIMEx_PWMN_Stop>
}
 800db7c:	bf00      	nop
 800db7e:	bd80      	pop	{r7, pc}
 800db80:	2000055c 	.word	0x2000055c

0800db84 <updatePwm1>:
static void updatePwm1(unsigned short int a, unsigned short int b, unsigned short int c)
{
 800db84:	b480      	push	{r7}
 800db86:	b083      	sub	sp, #12
 800db88:	af00      	add	r7, sp, #0
 800db8a:	4603      	mov	r3, r0
 800db8c:	80fb      	strh	r3, [r7, #6]
 800db8e:	460b      	mov	r3, r1
 800db90:	80bb      	strh	r3, [r7, #4]
 800db92:	4613      	mov	r3, r2
 800db94:	807b      	strh	r3, [r7, #2]
    TIM1->CCR1 = a;
 800db96:	4a07      	ldr	r2, [pc, #28]	@ (800dbb4 <updatePwm1+0x30>)
 800db98:	88fb      	ldrh	r3, [r7, #6]
 800db9a:	6353      	str	r3, [r2, #52]	@ 0x34
    TIM1->CCR2 = b;
 800db9c:	4a05      	ldr	r2, [pc, #20]	@ (800dbb4 <updatePwm1+0x30>)
 800db9e:	88bb      	ldrh	r3, [r7, #4]
 800dba0:	6393      	str	r3, [r2, #56]	@ 0x38
    TIM1->CCR3 = c;
 800dba2:	4a04      	ldr	r2, [pc, #16]	@ (800dbb4 <updatePwm1+0x30>)
 800dba4:	887b      	ldrh	r3, [r7, #2]
 800dba6:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800dba8:	bf00      	nop
 800dbaa:	370c      	adds	r7, #12
 800dbac:	46bd      	mov	sp, r7
 800dbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbb2:	4770      	bx	lr
 800dbb4:	40012c00 	.word	0x40012c00

0800dbb8 <motorInit>:
// should be called before interruption enabled

static void motorInit()
{
 800dbb8:	b580      	push	{r7, lr}
 800dbba:	b086      	sub	sp, #24
 800dbbc:	af00      	add	r7, sp, #0
    motor1.pole_pairs = 7;
 800dbbe:	4ba1      	ldr	r3, [pc, #644]	@ (800de44 <motorInit+0x28c>)
 800dbc0:	2207      	movs	r2, #7
 800dbc2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    motor1.updatePwm = updatePwm1;
 800dbc6:	4b9f      	ldr	r3, [pc, #636]	@ (800de44 <motorInit+0x28c>)
 800dbc8:	4a9f      	ldr	r2, [pc, #636]	@ (800de48 <motorInit+0x290>)
 800dbca:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
    motor1.startPwm = startPwm1;
 800dbce:	4b9d      	ldr	r3, [pc, #628]	@ (800de44 <motorInit+0x28c>)
 800dbd0:	4a9e      	ldr	r2, [pc, #632]	@ (800de4c <motorInit+0x294>)
 800dbd2:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
    motor1.stopPwm = stopPwm1;
 800dbd6:	4b9b      	ldr	r3, [pc, #620]	@ (800de44 <motorInit+0x28c>)
 800dbd8:	4a9d      	ldr	r2, [pc, #628]	@ (800de50 <motorInit+0x298>)
 800dbda:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
    motor1.zeroElectricAngleOffSet = 0;
 800dbde:	4b99      	ldr	r3, [pc, #612]	@ (800de44 <motorInit+0x28c>)
 800dbe0:	f04f 0200 	mov.w	r2, #0
 800dbe4:	635a      	str	r2, [r3, #52]	@ 0x34
    motor1.Ts = 100 * 1e-6f;
 800dbe6:	4b97      	ldr	r3, [pc, #604]	@ (800de44 <motorInit+0x28c>)
 800dbe8:	4a9a      	ldr	r2, [pc, #616]	@ (800de54 <motorInit+0x29c>)
 800dbea:	62da      	str	r2, [r3, #44]	@ 0x2c
    motor1.torqueType = VOLTAGE;
<<<<<<< HEAD
 800cc6c:	4b95      	ldr	r3, [pc, #596]	@ (800cec4 <motorInit+0x28c>)
 800cc6e:	2200      	movs	r2, #0
 800cc70:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
    motor1.controlType = VELOCITY_OPEN_LOOP;
 800cc74:	4b93      	ldr	r3, [pc, #588]	@ (800cec4 <motorInit+0x28c>)
 800cc76:	2201      	movs	r2, #1
 800cc78:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
=======
 800dbec:	4b95      	ldr	r3, [pc, #596]	@ (800de44 <motorInit+0x28c>)
 800dbee:	2200      	movs	r2, #0
 800dbf0:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
    motor1.controlType = ANGLE;
 800dbf4:	4b93      	ldr	r3, [pc, #588]	@ (800de44 <motorInit+0x28c>)
 800dbf6:	2203      	movs	r2, #3
 800dbf8:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
>>>>>>> f88694781bd54d0bca96bec7ac145bdac62fa329
    motor1.state = MOTOR_CALIBRATE;
 800dbfc:	4b91      	ldr	r3, [pc, #580]	@ (800de44 <motorInit+0x28c>)
 800dbfe:	2200      	movs	r2, #0
 800dc00:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    encoderInit(&motor1.magEncoder, motor1.Ts, MT6701_GetRawAngle);
 800dc04:	4b8f      	ldr	r3, [pc, #572]	@ (800de44 <motorInit+0x28c>)
 800dc06:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800dc0a:	4993      	ldr	r1, [pc, #588]	@ (800de58 <motorInit+0x2a0>)
 800dc0c:	eeb0 0a67 	vmov.f32	s0, s15
 800dc10:	488c      	ldr	r0, [pc, #560]	@ (800de44 <motorInit+0x28c>)
 800dc12:	f7ff fab0 	bl	800d176 <encoderInit>

    if (motor1.controlType == TORQUE && motor1.torqueType == CURRENT)
 800dc16:	4b8b      	ldr	r3, [pc, #556]	@ (800de44 <motorInit+0x28c>)
 800dc18:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d12d      	bne.n	800dc7c <motorInit+0xc4>
 800dc20:	4b88      	ldr	r3, [pc, #544]	@ (800de44 <motorInit+0x28c>)
 800dc22:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800dc26:	2b01      	cmp	r3, #1
 800dc28:	d128      	bne.n	800dc7c <motorInit+0xc4>
    {
        float kp, ki;
        kp = -200;
 800dc2a:	4b8c      	ldr	r3, [pc, #560]	@ (800de5c <motorInit+0x2a4>)
 800dc2c:	617b      	str	r3, [r7, #20]
        ki = -20;
 800dc2e:	4b8c      	ldr	r3, [pc, #560]	@ (800de60 <motorInit+0x2a8>)
 800dc30:	613b      	str	r3, [r7, #16]
        pidInit(&motor1.pidId, kp, ki, 0, 0, UqMAX, motor1.Ts);
 800dc32:	4b84      	ldr	r3, [pc, #528]	@ (800de44 <motorInit+0x28c>)
 800dc34:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800dc38:	eef0 2a67 	vmov.f32	s5, s15
 800dc3c:	ed9f 2a89 	vldr	s4, [pc, #548]	@ 800de64 <motorInit+0x2ac>
 800dc40:	eddf 1a89 	vldr	s3, [pc, #548]	@ 800de68 <motorInit+0x2b0>
 800dc44:	ed9f 1a88 	vldr	s2, [pc, #544]	@ 800de68 <motorInit+0x2b0>
 800dc48:	edd7 0a04 	vldr	s1, [r7, #16]
 800dc4c:	ed97 0a05 	vldr	s0, [r7, #20]
 800dc50:	4886      	ldr	r0, [pc, #536]	@ (800de6c <motorInit+0x2b4>)
 800dc52:	f7ff fcad 	bl	800d5b0 <pidInit>
        pidInit(&motor1.pidIq, kp, ki, 0, 0, UqMAX, motor1.Ts);
 800dc56:	4b7b      	ldr	r3, [pc, #492]	@ (800de44 <motorInit+0x28c>)
 800dc58:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800dc5c:	eef0 2a67 	vmov.f32	s5, s15
 800dc60:	ed9f 2a80 	vldr	s4, [pc, #512]	@ 800de64 <motorInit+0x2ac>
 800dc64:	eddf 1a80 	vldr	s3, [pc, #512]	@ 800de68 <motorInit+0x2b0>
 800dc68:	ed9f 1a7f 	vldr	s2, [pc, #508]	@ 800de68 <motorInit+0x2b0>
 800dc6c:	edd7 0a04 	vldr	s1, [r7, #16]
 800dc70:	ed97 0a05 	vldr	s0, [r7, #20]
 800dc74:	487e      	ldr	r0, [pc, #504]	@ (800de70 <motorInit+0x2b8>)
 800dc76:	f7ff fc9b 	bl	800d5b0 <pidInit>
    {
 800dc7a:	e0c0      	b.n	800ddfe <motorInit+0x246>
    }
    else if (motor1.controlType == VELOCITY)
 800dc7c:	4b71      	ldr	r3, [pc, #452]	@ (800de44 <motorInit+0x28c>)
 800dc7e:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800dc82:	2b02      	cmp	r3, #2
 800dc84:	d152      	bne.n	800dd2c <motorInit+0x174>
    {
        if (motor1.torqueType == CURRENT)
 800dc86:	4b6f      	ldr	r3, [pc, #444]	@ (800de44 <motorInit+0x28c>)
 800dc88:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800dc8c:	2b01      	cmp	r3, #1
 800dc8e:	d13a      	bne.n	800dd06 <motorInit+0x14e>
        {
            pidInit(&motor1.velocityPID, -0.02, -0.01, 0, 0, CURRENT_MAX, motor1.Ts);
 800dc90:	4b6c      	ldr	r3, [pc, #432]	@ (800de44 <motorInit+0x28c>)
 800dc92:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800dc96:	eef0 2a67 	vmov.f32	s5, s15
 800dc9a:	ed9f 2a76 	vldr	s4, [pc, #472]	@ 800de74 <motorInit+0x2bc>
 800dc9e:	eddf 1a72 	vldr	s3, [pc, #456]	@ 800de68 <motorInit+0x2b0>
 800dca2:	ed9f 1a71 	vldr	s2, [pc, #452]	@ 800de68 <motorInit+0x2b0>
 800dca6:	eddf 0a74 	vldr	s1, [pc, #464]	@ 800de78 <motorInit+0x2c0>
 800dcaa:	ed9f 0a74 	vldr	s0, [pc, #464]	@ 800de7c <motorInit+0x2c4>
 800dcae:	4874      	ldr	r0, [pc, #464]	@ (800de80 <motorInit+0x2c8>)
 800dcb0:	f7ff fc7e 	bl	800d5b0 <pidInit>

            float kp, ki;
            kp = -200;
 800dcb4:	4b69      	ldr	r3, [pc, #420]	@ (800de5c <motorInit+0x2a4>)
 800dcb6:	607b      	str	r3, [r7, #4]
            ki = -20;
 800dcb8:	4b69      	ldr	r3, [pc, #420]	@ (800de60 <motorInit+0x2a8>)
 800dcba:	603b      	str	r3, [r7, #0]
            pidInit(&motor1.pidId, kp, ki, 0, 0, UqMAX, motor1.Ts);
 800dcbc:	4b61      	ldr	r3, [pc, #388]	@ (800de44 <motorInit+0x28c>)
 800dcbe:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800dcc2:	eef0 2a67 	vmov.f32	s5, s15
 800dcc6:	ed9f 2a67 	vldr	s4, [pc, #412]	@ 800de64 <motorInit+0x2ac>
 800dcca:	eddf 1a67 	vldr	s3, [pc, #412]	@ 800de68 <motorInit+0x2b0>
 800dcce:	ed9f 1a66 	vldr	s2, [pc, #408]	@ 800de68 <motorInit+0x2b0>
 800dcd2:	edd7 0a00 	vldr	s1, [r7]
 800dcd6:	ed97 0a01 	vldr	s0, [r7, #4]
 800dcda:	4864      	ldr	r0, [pc, #400]	@ (800de6c <motorInit+0x2b4>)
 800dcdc:	f7ff fc68 	bl	800d5b0 <pidInit>
            pidInit(&motor1.pidIq, kp, ki, 0, 0, UqMAX, motor1.Ts);
 800dce0:	4b58      	ldr	r3, [pc, #352]	@ (800de44 <motorInit+0x28c>)
 800dce2:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800dce6:	eef0 2a67 	vmov.f32	s5, s15
 800dcea:	ed9f 2a5e 	vldr	s4, [pc, #376]	@ 800de64 <motorInit+0x2ac>
 800dcee:	eddf 1a5e 	vldr	s3, [pc, #376]	@ 800de68 <motorInit+0x2b0>
 800dcf2:	ed9f 1a5d 	vldr	s2, [pc, #372]	@ 800de68 <motorInit+0x2b0>
 800dcf6:	edd7 0a00 	vldr	s1, [r7]
 800dcfa:	ed97 0a01 	vldr	s0, [r7, #4]
 800dcfe:	485c      	ldr	r0, [pc, #368]	@ (800de70 <motorInit+0x2b8>)
 800dd00:	f7ff fc56 	bl	800d5b0 <pidInit>
 800dd04:	e07b      	b.n	800ddfe <motorInit+0x246>
        }
        else
        {
            pidInit(&motor1.velocityPID, 0.15, 0.05, 0, 0, UqMAX, motor1.Ts);
 800dd06:	4b4f      	ldr	r3, [pc, #316]	@ (800de44 <motorInit+0x28c>)
 800dd08:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800dd0c:	eef0 2a67 	vmov.f32	s5, s15
 800dd10:	ed9f 2a54 	vldr	s4, [pc, #336]	@ 800de64 <motorInit+0x2ac>
 800dd14:	eddf 1a54 	vldr	s3, [pc, #336]	@ 800de68 <motorInit+0x2b0>
 800dd18:	ed9f 1a53 	vldr	s2, [pc, #332]	@ 800de68 <motorInit+0x2b0>
 800dd1c:	eddf 0a59 	vldr	s1, [pc, #356]	@ 800de84 <motorInit+0x2cc>
 800dd20:	ed9f 0a59 	vldr	s0, [pc, #356]	@ 800de88 <motorInit+0x2d0>
 800dd24:	4856      	ldr	r0, [pc, #344]	@ (800de80 <motorInit+0x2c8>)
 800dd26:	f7ff fc43 	bl	800d5b0 <pidInit>
 800dd2a:	e068      	b.n	800ddfe <motorInit+0x246>
        }
    }
    else if (motor1.controlType == ANGLE)
 800dd2c:	4b45      	ldr	r3, [pc, #276]	@ (800de44 <motorInit+0x28c>)
 800dd2e:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800dd32:	2b03      	cmp	r3, #3
 800dd34:	d163      	bne.n	800ddfe <motorInit+0x246>
    {
        if (motor1.torqueType == CURRENT)
 800dd36:	4b43      	ldr	r3, [pc, #268]	@ (800de44 <motorInit+0x28c>)
 800dd38:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800dd3c:	2b01      	cmp	r3, #1
 800dd3e:	d14c      	bne.n	800ddda <motorInit+0x222>
        {
            pidInit(&motor1.anglePID, 2, 0, 0, 0, MAX_VELOCITY, motor1.Ts);
 800dd40:	4b40      	ldr	r3, [pc, #256]	@ (800de44 <motorInit+0x28c>)
 800dd42:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800dd46:	eef0 2a67 	vmov.f32	s5, s15
 800dd4a:	ed9f 2a50 	vldr	s4, [pc, #320]	@ 800de8c <motorInit+0x2d4>
 800dd4e:	eddf 1a46 	vldr	s3, [pc, #280]	@ 800de68 <motorInit+0x2b0>
 800dd52:	ed9f 1a45 	vldr	s2, [pc, #276]	@ 800de68 <motorInit+0x2b0>
 800dd56:	eddf 0a44 	vldr	s1, [pc, #272]	@ 800de68 <motorInit+0x2b0>
 800dd5a:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 800dd5e:	484c      	ldr	r0, [pc, #304]	@ (800de90 <motorInit+0x2d8>)
 800dd60:	f7ff fc26 	bl	800d5b0 <pidInit>

            pidInit(&motor1.velocityPID, -0.02, -0.01, 0, 0, CURRENT_MAX, motor1.Ts);
 800dd64:	4b37      	ldr	r3, [pc, #220]	@ (800de44 <motorInit+0x28c>)
 800dd66:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800dd6a:	eef0 2a67 	vmov.f32	s5, s15
 800dd6e:	ed9f 2a41 	vldr	s4, [pc, #260]	@ 800de74 <motorInit+0x2bc>
 800dd72:	eddf 1a3d 	vldr	s3, [pc, #244]	@ 800de68 <motorInit+0x2b0>
 800dd76:	ed9f 1a3c 	vldr	s2, [pc, #240]	@ 800de68 <motorInit+0x2b0>
 800dd7a:	eddf 0a3f 	vldr	s1, [pc, #252]	@ 800de78 <motorInit+0x2c0>
 800dd7e:	ed9f 0a3f 	vldr	s0, [pc, #252]	@ 800de7c <motorInit+0x2c4>
 800dd82:	483f      	ldr	r0, [pc, #252]	@ (800de80 <motorInit+0x2c8>)
 800dd84:	f7ff fc14 	bl	800d5b0 <pidInit>

            // pidInit(&motor1.anglePID, -0.001, -0.0001, 0, 0, CURRENT_MAX / 2, motor1.Ts);

            float kp, ki;
            kp = -200;
 800dd88:	4b34      	ldr	r3, [pc, #208]	@ (800de5c <motorInit+0x2a4>)
 800dd8a:	60fb      	str	r3, [r7, #12]
            ki = -20;
 800dd8c:	4b34      	ldr	r3, [pc, #208]	@ (800de60 <motorInit+0x2a8>)
 800dd8e:	60bb      	str	r3, [r7, #8]
            pidInit(&motor1.pidId, kp, ki, 0, 0, UqMAX, motor1.Ts);
 800dd90:	4b2c      	ldr	r3, [pc, #176]	@ (800de44 <motorInit+0x28c>)
 800dd92:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800dd96:	eef0 2a67 	vmov.f32	s5, s15
 800dd9a:	ed9f 2a32 	vldr	s4, [pc, #200]	@ 800de64 <motorInit+0x2ac>
 800dd9e:	eddf 1a32 	vldr	s3, [pc, #200]	@ 800de68 <motorInit+0x2b0>
 800dda2:	ed9f 1a31 	vldr	s2, [pc, #196]	@ 800de68 <motorInit+0x2b0>
 800dda6:	edd7 0a02 	vldr	s1, [r7, #8]
 800ddaa:	ed97 0a03 	vldr	s0, [r7, #12]
 800ddae:	482f      	ldr	r0, [pc, #188]	@ (800de6c <motorInit+0x2b4>)
 800ddb0:	f7ff fbfe 	bl	800d5b0 <pidInit>
            pidInit(&motor1.pidIq, kp, ki, 0, 0, UqMAX, motor1.Ts);
 800ddb4:	4b23      	ldr	r3, [pc, #140]	@ (800de44 <motorInit+0x28c>)
 800ddb6:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800ddba:	eef0 2a67 	vmov.f32	s5, s15
 800ddbe:	ed9f 2a29 	vldr	s4, [pc, #164]	@ 800de64 <motorInit+0x2ac>
 800ddc2:	eddf 1a29 	vldr	s3, [pc, #164]	@ 800de68 <motorInit+0x2b0>
 800ddc6:	ed9f 1a28 	vldr	s2, [pc, #160]	@ 800de68 <motorInit+0x2b0>
 800ddca:	edd7 0a02 	vldr	s1, [r7, #8]
 800ddce:	ed97 0a03 	vldr	s0, [r7, #12]
 800ddd2:	4827      	ldr	r0, [pc, #156]	@ (800de70 <motorInit+0x2b8>)
 800ddd4:	f7ff fbec 	bl	800d5b0 <pidInit>
 800ddd8:	e011      	b.n	800ddfe <motorInit+0x246>
        }
        else
        {
            pidInit(&motor1.anglePID, 0.3, 0.001, 0, 0, UqMAX / 2, motor1.Ts);
 800ddda:	4b1a      	ldr	r3, [pc, #104]	@ (800de44 <motorInit+0x28c>)
 800dddc:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800dde0:	eef0 2a67 	vmov.f32	s5, s15
 800dde4:	ed9f 2a2b 	vldr	s4, [pc, #172]	@ 800de94 <motorInit+0x2dc>
 800dde8:	eddf 1a1f 	vldr	s3, [pc, #124]	@ 800de68 <motorInit+0x2b0>
 800ddec:	ed9f 1a1e 	vldr	s2, [pc, #120]	@ 800de68 <motorInit+0x2b0>
 800ddf0:	eddf 0a29 	vldr	s1, [pc, #164]	@ 800de98 <motorInit+0x2e0>
 800ddf4:	ed9f 0a29 	vldr	s0, [pc, #164]	@ 800de9c <motorInit+0x2e4>
 800ddf8:	4825      	ldr	r0, [pc, #148]	@ (800de90 <motorInit+0x2d8>)
 800ddfa:	f7ff fbd9 	bl	800d5b0 <pidInit>
        }
    }

    lpfInit(&motor1.IqFilter, 0.05, motor1.Ts);
 800ddfe:	4b11      	ldr	r3, [pc, #68]	@ (800de44 <motorInit+0x28c>)
 800de00:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800de04:	eef0 0a67 	vmov.f32	s1, s15
 800de08:	ed9f 0a1e 	vldr	s0, [pc, #120]	@ 800de84 <motorInit+0x2cc>
 800de0c:	4824      	ldr	r0, [pc, #144]	@ (800dea0 <motorInit+0x2e8>)
 800de0e:	f7ff fa63 	bl	800d2d8 <lpfInit>
    lpfInit(&motor1.IdFilter, 0.05, motor1.Ts);
 800de12:	4b0c      	ldr	r3, [pc, #48]	@ (800de44 <motorInit+0x28c>)
 800de14:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800de18:	eef0 0a67 	vmov.f32	s1, s15
 800de1c:	ed9f 0a19 	vldr	s0, [pc, #100]	@ 800de84 <motorInit+0x2cc>
 800de20:	4820      	ldr	r0, [pc, #128]	@ (800dea4 <motorInit+0x2ec>)
 800de22:	f7ff fa59 	bl	800d2d8 <lpfInit>
    lpfInit(&motor1.velocityFilter, 0.01, motor1.Ts);
 800de26:	4b07      	ldr	r3, [pc, #28]	@ (800de44 <motorInit+0x28c>)
 800de28:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800de2c:	eef0 0a67 	vmov.f32	s1, s15
 800de30:	ed9f 0a1d 	vldr	s0, [pc, #116]	@ 800dea8 <motorInit+0x2f0>
 800de34:	481d      	ldr	r0, [pc, #116]	@ (800deac <motorInit+0x2f4>)
 800de36:	f7ff fa4f 	bl	800d2d8 <lpfInit>
}
<<<<<<< HEAD
 800ceba:	bf00      	nop
 800cebc:	3718      	adds	r7, #24
 800cebe:	46bd      	mov	sp, r7
 800cec0:	bd80      	pop	{r7, pc}
 800cec2:	bf00      	nop
 800cec4:	20000700 	.word	0x20000700
 800cec8:	0800cc05 	.word	0x0800cc05
 800cecc:	0800cb8d 	.word	0x0800cb8d
 800ced0:	0800cbc9 	.word	0x0800cbc9
 800ced4:	38d1b717 	.word	0x38d1b717
 800ced8:	0800d935 	.word	0x0800d935
 800cedc:	c3480000 	.word	0xc3480000
 800cee0:	c1a00000 	.word	0xc1a00000
 800cee4:	40ddb3d7 	.word	0x40ddb3d7
 800cee8:	00000000 	.word	0x00000000
 800ceec:	20000760 	.word	0x20000760
 800cef0:	20000784 	.word	0x20000784
 800cef4:	3f4ccccd 	.word	0x3f4ccccd
 800cef8:	bc23d70a 	.word	0xbc23d70a
 800cefc:	bca3d70a 	.word	0xbca3d70a
 800cf00:	200007a8 	.word	0x200007a8
 800cf04:	3d4ccccd 	.word	0x3d4ccccd
 800cf08:	3e19999a 	.word	0x3e19999a
 800cf0c:	43960000 	.word	0x43960000
 800cf10:	200007cc 	.word	0x200007cc
 800cf14:	405db3d7 	.word	0x405db3d7
 800cf18:	3a83126f 	.word	0x3a83126f
 800cf1c:	3e99999a 	.word	0x3e99999a
 800cf20:	200007f0 	.word	0x200007f0
 800cf24:	200007fc 	.word	0x200007fc
 800cf28:	3c23d70a 	.word	0x3c23d70a
 800cf2c:	20000808 	.word	0x20000808
=======
 800de3a:	bf00      	nop
 800de3c:	3718      	adds	r7, #24
 800de3e:	46bd      	mov	sp, r7
 800de40:	bd80      	pop	{r7, pc}
 800de42:	bf00      	nop
 800de44:	20000754 	.word	0x20000754
 800de48:	0800db85 	.word	0x0800db85
 800de4c:	0800db0d 	.word	0x0800db0d
 800de50:	0800db49 	.word	0x0800db49
 800de54:	38d1b717 	.word	0x38d1b717
 800de58:	0800ec19 	.word	0x0800ec19
 800de5c:	c3480000 	.word	0xc3480000
 800de60:	c1a00000 	.word	0xc1a00000
 800de64:	40ddb3d7 	.word	0x40ddb3d7
 800de68:	00000000 	.word	0x00000000
 800de6c:	200007b4 	.word	0x200007b4
 800de70:	200007d8 	.word	0x200007d8
 800de74:	3f4ccccd 	.word	0x3f4ccccd
 800de78:	bc23d70a 	.word	0xbc23d70a
 800de7c:	bca3d70a 	.word	0xbca3d70a
 800de80:	200007fc 	.word	0x200007fc
 800de84:	3d4ccccd 	.word	0x3d4ccccd
 800de88:	3e19999a 	.word	0x3e19999a
 800de8c:	43960000 	.word	0x43960000
 800de90:	20000820 	.word	0x20000820
 800de94:	405db3d7 	.word	0x405db3d7
 800de98:	3a83126f 	.word	0x3a83126f
 800de9c:	3e99999a 	.word	0x3e99999a
 800dea0:	20000844 	.word	0x20000844
 800dea4:	20000850 	.word	0x20000850
 800dea8:	3c23d70a 	.word	0x3c23d70a
 800deac:	2000085c 	.word	0x2000085c
>>>>>>> f88694781bd54d0bca96bec7ac145bdac62fa329

0800deb0 <appInit>:
void appInit()
{
 800deb0:	b580      	push	{r7, lr}
 800deb2:	af00      	add	r7, sp, #0
    motorInit();
 800deb4:	f7ff fe80 	bl	800dbb8 <motorInit>
    // MPU6050_Init();
    MPU6050_Init(Sensor_I2C2_Serch());
 800deb8:	f000 fd16 	bl	800e8e8 <Sensor_I2C2_Serch>
 800debc:	4603      	mov	r3, r0
 800debe:	4618      	mov	r0, r3
 800dec0:	f000 fd3a 	bl	800e938 <MPU6050_Init>
}
 800dec4:	bf00      	nop
 800dec6:	bd80      	pop	{r7, pc}

0800dec8 <appRunning>:
static bool zeroReset;
void appRunning()
{
 800dec8:	b580      	push	{r7, lr}
 800deca:	b086      	sub	sp, #24
 800decc:	af00      	add	r7, sp, #0

    getKeyState(&keyState);
<<<<<<< HEAD
 800cf42:	485a      	ldr	r0, [pc, #360]	@ (800d0ac <appRunning+0x170>)
 800cf44:	f000 fc54 	bl	800d7f0 <getKeyState>
    commander_run(&motor1);
 800cf48:	4859      	ldr	r0, [pc, #356]	@ (800d0b0 <appRunning+0x174>)
 800cf4a:	f000 f9f3 	bl	800d334 <commander_run>
=======
 800dece:	485a      	ldr	r0, [pc, #360]	@ (800e038 <appRunning+0x170>)
 800ded0:	f000 fc60 	bl	800e794 <getKeyState>
    commander_run(&motor1);
 800ded4:	4859      	ldr	r0, [pc, #356]	@ (800e03c <appRunning+0x174>)
 800ded6:	f000 f9ff 	bl	800e2d8 <commander_run>
>>>>>>> f88694781bd54d0bca96bec7ac145bdac62fa329
    if (++flashCnt >= 10)
 800deda:	4b59      	ldr	r3, [pc, #356]	@ (800e040 <appRunning+0x178>)
 800dedc:	781b      	ldrb	r3, [r3, #0]
 800dede:	3301      	adds	r3, #1
 800dee0:	b2da      	uxtb	r2, r3
 800dee2:	4b57      	ldr	r3, [pc, #348]	@ (800e040 <appRunning+0x178>)
 800dee4:	701a      	strb	r2, [r3, #0]
 800dee6:	4b56      	ldr	r3, [pc, #344]	@ (800e040 <appRunning+0x178>)
 800dee8:	781b      	ldrb	r3, [r3, #0]
 800deea:	2b09      	cmp	r3, #9
 800deec:	d902      	bls.n	800def4 <appRunning+0x2c>
        flashCnt = 0;
 800deee:	4b54      	ldr	r3, [pc, #336]	@ (800e040 <appRunning+0x178>)
 800def0:	2200      	movs	r2, #0
 800def2:	701a      	strb	r2, [r3, #0]

    led1On = 0;
 800def4:	4b53      	ldr	r3, [pc, #332]	@ (800e044 <appRunning+0x17c>)
 800def6:	2200      	movs	r2, #0
 800def8:	701a      	strb	r2, [r3, #0]
    led2On = 0;
<<<<<<< HEAD
 800cf6e:	4b53      	ldr	r3, [pc, #332]	@ (800d0bc <appRunning+0x180>)
 800cf70:	2200      	movs	r2, #0
 800cf72:	701a      	strb	r2, [r3, #0]
#if USE_COMM_TARGET == 0
=======
 800defa:	4b53      	ldr	r3, [pc, #332]	@ (800e048 <appRunning+0x180>)
 800defc:	2200      	movs	r2, #0
 800defe:	701a      	strb	r2, [r3, #0]

>>>>>>> f88694781bd54d0bca96bec7ac145bdac62fa329
    uint32_t Vpoten, adc_vbus;
    float Vbus, goalVelocity;
    HAL_ADC_Start(&hadc1);
 800df00:	4852      	ldr	r0, [pc, #328]	@ (800e04c <appRunning+0x184>)
 800df02:	f7f5 f8c3 	bl	800308c <HAL_ADC_Start>
    HAL_ADC_Start(&hadc2);
 800df06:	4852      	ldr	r0, [pc, #328]	@ (800e050 <appRunning+0x188>)
 800df08:	f7f5 f8c0 	bl	800308c <HAL_ADC_Start>
    Vpoten = HAL_ADC_GetValue(&hadc1);
 800df0c:	484f      	ldr	r0, [pc, #316]	@ (800e04c <appRunning+0x184>)
 800df0e:	f7f5 f979 	bl	8003204 <HAL_ADC_GetValue>
 800df12:	6178      	str	r0, [r7, #20]

    goalVelocity = map(Vpoten, 0, 4095, -MAX_VELOCITY, MAX_VELOCITY);
<<<<<<< HEAD
 800cf88:	697b      	ldr	r3, [r7, #20]
 800cf8a:	ee07 3a90 	vmov	s15, r3
 800cf8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf92:	ed9f 2a4d 	vldr	s4, [pc, #308]	@ 800d0c8 <appRunning+0x18c>
 800cf96:	eddf 1a4d 	vldr	s3, [pc, #308]	@ 800d0cc <appRunning+0x190>
 800cf9a:	ed9f 1a4d 	vldr	s2, [pc, #308]	@ 800d0d0 <appRunning+0x194>
 800cf9e:	eddf 0a4d 	vldr	s1, [pc, #308]	@ 800d0d4 <appRunning+0x198>
 800cfa2:	eeb0 0a67 	vmov.f32	s0, s15
 800cfa6:	f000 fd86 	bl	800dab6 <map>
 800cfaa:	ed87 0a04 	vstr	s0, [r7, #16]

    // goalVelocity = Vpoten / 4095.0f * MAX_VELOCITY;
    float goalTorqueV = map(Vpoten, 0, 4095, -UqMAX, UqMAX);
 800cfae:	697b      	ldr	r3, [r7, #20]
 800cfb0:	ee07 3a90 	vmov	s15, r3
 800cfb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfb8:	ed9f 2a47 	vldr	s4, [pc, #284]	@ 800d0d8 <appRunning+0x19c>
 800cfbc:	eddf 1a47 	vldr	s3, [pc, #284]	@ 800d0dc <appRunning+0x1a0>
 800cfc0:	ed9f 1a43 	vldr	s2, [pc, #268]	@ 800d0d0 <appRunning+0x194>
 800cfc4:	eddf 0a43 	vldr	s1, [pc, #268]	@ 800d0d4 <appRunning+0x198>
 800cfc8:	eeb0 0a67 	vmov.f32	s0, s15
 800cfcc:	f000 fd73 	bl	800dab6 <map>
 800cfd0:	ed87 0a03 	vstr	s0, [r7, #12]
    float goalTorqueC = map(Vpoten, 0, 4095, -CURRENT_MAX, CURRENT_MAX);
 800cfd4:	697b      	ldr	r3, [r7, #20]
 800cfd6:	ee07 3a90 	vmov	s15, r3
 800cfda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfde:	ed9f 2a40 	vldr	s4, [pc, #256]	@ 800d0e0 <appRunning+0x1a4>
 800cfe2:	eddf 1a40 	vldr	s3, [pc, #256]	@ 800d0e4 <appRunning+0x1a8>
 800cfe6:	ed9f 1a3a 	vldr	s2, [pc, #232]	@ 800d0d0 <appRunning+0x194>
 800cfea:	eddf 0a3a 	vldr	s1, [pc, #232]	@ 800d0d4 <appRunning+0x198>
 800cfee:	eeb0 0a67 	vmov.f32	s0, s15
 800cff2:	f000 fd60 	bl	800dab6 <map>
 800cff6:	ed87 0a02 	vstr	s0, [r7, #8]
=======
 800df14:	697b      	ldr	r3, [r7, #20]
 800df16:	ee07 3a90 	vmov	s15, r3
 800df1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800df1e:	ed9f 2a4d 	vldr	s4, [pc, #308]	@ 800e054 <appRunning+0x18c>
 800df22:	eddf 1a4d 	vldr	s3, [pc, #308]	@ 800e058 <appRunning+0x190>
 800df26:	ed9f 1a4d 	vldr	s2, [pc, #308]	@ 800e05c <appRunning+0x194>
 800df2a:	eddf 0a4d 	vldr	s1, [pc, #308]	@ 800e060 <appRunning+0x198>
 800df2e:	eeb0 0a67 	vmov.f32	s0, s15
 800df32:	f000 ff32 	bl	800ed9a <map>
 800df36:	ed87 0a04 	vstr	s0, [r7, #16]

    // goalVelocity = Vpoten / 4095.0f * MAX_VELOCITY;
    float goalTorqueV = map(Vpoten, 0, 4095, -UqMAX, UqMAX);
 800df3a:	697b      	ldr	r3, [r7, #20]
 800df3c:	ee07 3a90 	vmov	s15, r3
 800df40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800df44:	ed9f 2a47 	vldr	s4, [pc, #284]	@ 800e064 <appRunning+0x19c>
 800df48:	eddf 1a47 	vldr	s3, [pc, #284]	@ 800e068 <appRunning+0x1a0>
 800df4c:	ed9f 1a43 	vldr	s2, [pc, #268]	@ 800e05c <appRunning+0x194>
 800df50:	eddf 0a43 	vldr	s1, [pc, #268]	@ 800e060 <appRunning+0x198>
 800df54:	eeb0 0a67 	vmov.f32	s0, s15
 800df58:	f000 ff1f 	bl	800ed9a <map>
 800df5c:	ed87 0a03 	vstr	s0, [r7, #12]
    float goalTorqueC = map(Vpoten, 0, 4095, -CURRENT_MAX, CURRENT_MAX);
 800df60:	697b      	ldr	r3, [r7, #20]
 800df62:	ee07 3a90 	vmov	s15, r3
 800df66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800df6a:	ed9f 2a40 	vldr	s4, [pc, #256]	@ 800e06c <appRunning+0x1a4>
 800df6e:	eddf 1a40 	vldr	s3, [pc, #256]	@ 800e070 <appRunning+0x1a8>
 800df72:	ed9f 1a3a 	vldr	s2, [pc, #232]	@ 800e05c <appRunning+0x194>
 800df76:	eddf 0a3a 	vldr	s1, [pc, #232]	@ 800e060 <appRunning+0x198>
 800df7a:	eeb0 0a67 	vmov.f32	s0, s15
 800df7e:	f000 ff0c 	bl	800ed9a <map>
 800df82:	ed87 0a02 	vstr	s0, [r7, #8]
>>>>>>> f88694781bd54d0bca96bec7ac145bdac62fa329

    adc_vbus = HAL_ADC_GetValue(&hadc2);
 800df86:	4832      	ldr	r0, [pc, #200]	@ (800e050 <appRunning+0x188>)
 800df88:	f7f5 f93c 	bl	8003204 <HAL_ADC_GetValue>
 800df8c:	6078      	str	r0, [r7, #4]

    Vbus = adc_vbus * 3.3f / 4096 * 26;
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	ee07 3a90 	vmov	s15, r3
 800df94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800df98:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800e074 <appRunning+0x1ac>
 800df9c:	ee27 7a87 	vmul.f32	s14, s15, s14
 800dfa0:	eddf 6a35 	vldr	s13, [pc, #212]	@ 800e078 <appRunning+0x1b0>
 800dfa4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800dfa8:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 800dfac:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dfb0:	edc7 7a00 	vstr	s15, [r7]

    if (motor1.controlType == VELOCITY || motor1.controlType == VELOCITY_OPEN_LOOP)
 800dfb4:	4b21      	ldr	r3, [pc, #132]	@ (800e03c <appRunning+0x174>)
 800dfb6:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800dfba:	2b02      	cmp	r3, #2
 800dfbc:	d004      	beq.n	800dfc8 <appRunning+0x100>
 800dfbe:	4b1f      	ldr	r3, [pc, #124]	@ (800e03c <appRunning+0x174>)
 800dfc0:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800dfc4:	2b01      	cmp	r3, #1
 800dfc6:	d103      	bne.n	800dfd0 <appRunning+0x108>
    {
        motor1.target = goalVelocity;
 800dfc8:	4a1c      	ldr	r2, [pc, #112]	@ (800e03c <appRunning+0x174>)
 800dfca:	693b      	ldr	r3, [r7, #16]
 800dfcc:	6313      	str	r3, [r2, #48]	@ 0x30
 800dfce:	e01f      	b.n	800e010 <appRunning+0x148>
    }

    else if (motor1.controlType == ANGLE)
 800dfd0:	4b1a      	ldr	r3, [pc, #104]	@ (800e03c <appRunning+0x174>)
 800dfd2:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800dfd6:	2b03      	cmp	r3, #3
 800dfd8:	d109      	bne.n	800dfee <appRunning+0x126>
    {
        motor1.target = goalVelocity / 3;
 800dfda:	ed97 7a04 	vldr	s14, [r7, #16]
 800dfde:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 800dfe2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800dfe6:	4b15      	ldr	r3, [pc, #84]	@ (800e03c <appRunning+0x174>)
 800dfe8:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
 800dfec:	e010      	b.n	800e010 <appRunning+0x148>
    }
    else if (motor1.controlType == TORQUE)
 800dfee:	4b13      	ldr	r3, [pc, #76]	@ (800e03c <appRunning+0x174>)
 800dff0:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d10b      	bne.n	800e010 <appRunning+0x148>
    {
        if (motor1.torqueType == VOLTAGE)
 800dff8:	4b10      	ldr	r3, [pc, #64]	@ (800e03c <appRunning+0x174>)
 800dffa:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d103      	bne.n	800e00a <appRunning+0x142>
            motor1.target = goalTorqueV;
 800e002:	4a0e      	ldr	r2, [pc, #56]	@ (800e03c <appRunning+0x174>)
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	6313      	str	r3, [r2, #48]	@ 0x30
 800e008:	e002      	b.n	800e010 <appRunning+0x148>
        else
            motor1.target = goalTorqueC;
 800e00a:	4a0c      	ldr	r2, [pc, #48]	@ (800e03c <appRunning+0x174>)
 800e00c:	68bb      	ldr	r3, [r7, #8]
 800e00e:	6313      	str	r3, [r2, #48]	@ 0x30
    }
#endif
    switch (devState)
 800e010:	4b1a      	ldr	r3, [pc, #104]	@ (800e07c <appRunning+0x1b4>)
 800e012:	781b      	ldrb	r3, [r3, #0]
 800e014:	2b00      	cmp	r3, #0
 800e016:	d002      	beq.n	800e01e <appRunning+0x156>
 800e018:	2b01      	cmp	r3, #1
 800e01a:	d003      	beq.n	800e024 <appRunning+0x15c>
 800e01c:	e005      	b.n	800e02a <appRunning+0x162>
    {
    case STANDBY:
        standingBy();
 800e01e:	f000 f82f 	bl	800e080 <standingBy>
        break;
 800e022:	e002      	b.n	800e02a <appRunning+0x162>

    case WORK:
        working();
 800e024:	f000 f860 	bl	800e0e8 <working>
        break;
 800e028:	bf00      	nop
    }

    LED_drive();
<<<<<<< HEAD
 800d09e:	f000 fbe5 	bl	800d86c <LED_drive>
=======
 800e02a:	f000 fbf1 	bl	800e810 <LED_drive>
>>>>>>> f88694781bd54d0bca96bec7ac145bdac62fa329
}
 800e02e:	bf00      	nop
 800e030:	3718      	adds	r7, #24
 800e032:	46bd      	mov	sp, r7
 800e034:	bd80      	pop	{r7, pc}
 800e036:	bf00      	nop
 800e038:	20000751 	.word	0x20000751
 800e03c:	20000754 	.word	0x20000754
 800e040:	20000752 	.word	0x20000752
 800e044:	2000099c 	.word	0x2000099c
 800e048:	2000099d 	.word	0x2000099d
 800e04c:	20000274 	.word	0x20000274
 800e050:	200002e0 	.word	0x200002e0
 800e054:	43960000 	.word	0x43960000
 800e058:	c3960000 	.word	0xc3960000
 800e05c:	457ff000 	.word	0x457ff000
 800e060:	00000000 	.word	0x00000000
 800e064:	40ddb3d7 	.word	0x40ddb3d7
 800e068:	c0ddb3d7 	.word	0xc0ddb3d7
 800e06c:	3f4ccccd 	.word	0x3f4ccccd
 800e070:	bf4ccccd 	.word	0xbf4ccccd
 800e074:	40533333 	.word	0x40533333
 800e078:	45800000 	.word	0x45800000
 800e07c:	20000750 	.word	0x20000750

0800e080 <standingBy>:
static void standingBy()
{
 800e080:	b580      	push	{r7, lr}
 800e082:	af00      	add	r7, sp, #0
    led1On = 1;
 800e084:	4b12      	ldr	r3, [pc, #72]	@ (800e0d0 <standingBy+0x50>)
 800e086:	2201      	movs	r2, #1
 800e088:	701a      	strb	r2, [r3, #0]
    // setTorque(&motor1, 0, OPEN_LOOP_TORQUE, 0);
    if (zeroReset == 0)
 800e08a:	4b12      	ldr	r3, [pc, #72]	@ (800e0d4 <standingBy+0x54>)
 800e08c:	781b      	ldrb	r3, [r3, #0]
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d106      	bne.n	800e0a0 <standingBy+0x20>
    {
        goToZeroElecAngle(&motor1);
 800e092:	4811      	ldr	r0, [pc, #68]	@ (800e0d8 <standingBy+0x58>)
 800e094:	f7fe fb92 	bl	800c7bc <goToZeroElecAngle>
        zeroReset = 1;
 800e098:	4b0e      	ldr	r3, [pc, #56]	@ (800e0d4 <standingBy+0x54>)
 800e09a:	2201      	movs	r2, #1
 800e09c:	701a      	strb	r2, [r3, #0]
 800e09e:	e003      	b.n	800e0a8 <standingBy+0x28>
    }
    else
        motor1.stopPwm();
 800e0a0:	4b0d      	ldr	r3, [pc, #52]	@ (800e0d8 <standingBy+0x58>)
 800e0a2:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800e0a6:	4798      	blx	r3

    if (keyState == USER3_SHORT)
 800e0a8:	4b0c      	ldr	r3, [pc, #48]	@ (800e0dc <standingBy+0x5c>)
 800e0aa:	781b      	ldrb	r3, [r3, #0]
 800e0ac:	2b03      	cmp	r3, #3
 800e0ae:	d10d      	bne.n	800e0cc <standingBy+0x4c>
    {
        WORK_INIT;
 800e0b0:	4b0b      	ldr	r3, [pc, #44]	@ (800e0e0 <standingBy+0x60>)
 800e0b2:	2201      	movs	r2, #1
 800e0b4:	701a      	strb	r2, [r3, #0]
 800e0b6:	4b0b      	ldr	r3, [pc, #44]	@ (800e0e4 <standingBy+0x64>)
 800e0b8:	2200      	movs	r2, #0
 800e0ba:	701a      	strb	r2, [r3, #0]
 800e0bc:	4b06      	ldr	r3, [pc, #24]	@ (800e0d8 <standingBy+0x58>)
 800e0be:	2202      	movs	r2, #2
 800e0c0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 800e0c4:	4b04      	ldr	r3, [pc, #16]	@ (800e0d8 <standingBy+0x58>)
 800e0c6:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800e0ca:	4798      	blx	r3
    }
}
 800e0cc:	bf00      	nop
 800e0ce:	bd80      	pop	{r7, pc}
 800e0d0:	2000099c 	.word	0x2000099c
 800e0d4:	20000890 	.word	0x20000890
 800e0d8:	20000754 	.word	0x20000754
 800e0dc:	20000751 	.word	0x20000751
 800e0e0:	20000750 	.word	0x20000750
 800e0e4:	20000752 	.word	0x20000752

0800e0e8 <working>:

static void working(void)
{
 800e0e8:	b480      	push	{r7}
 800e0ea:	af00      	add	r7, sp, #0
    zeroReset = 0;
 800e0ec:	4b0e      	ldr	r3, [pc, #56]	@ (800e128 <working+0x40>)
 800e0ee:	2200      	movs	r2, #0
 800e0f0:	701a      	strb	r2, [r3, #0]
    if (flashCnt < 5)
 800e0f2:	4b0e      	ldr	r3, [pc, #56]	@ (800e12c <working+0x44>)
 800e0f4:	781b      	ldrb	r3, [r3, #0]
 800e0f6:	2b04      	cmp	r3, #4
 800e0f8:	d802      	bhi.n	800e100 <working+0x18>
        led2On = 1;
 800e0fa:	4b0d      	ldr	r3, [pc, #52]	@ (800e130 <working+0x48>)
 800e0fc:	2201      	movs	r2, #1
 800e0fe:	701a      	strb	r2, [r3, #0]

    if (keyState == USER3_SHORT)
 800e100:	4b0c      	ldr	r3, [pc, #48]	@ (800e134 <working+0x4c>)
 800e102:	781b      	ldrb	r3, [r3, #0]
 800e104:	2b03      	cmp	r3, #3
 800e106:	d109      	bne.n	800e11c <working+0x34>
    {
        STANDBY_INIT;
 800e108:	4b0b      	ldr	r3, [pc, #44]	@ (800e138 <working+0x50>)
 800e10a:	2200      	movs	r2, #0
 800e10c:	701a      	strb	r2, [r3, #0]
 800e10e:	4b07      	ldr	r3, [pc, #28]	@ (800e12c <working+0x44>)
 800e110:	2200      	movs	r2, #0
 800e112:	701a      	strb	r2, [r3, #0]
 800e114:	4b09      	ldr	r3, [pc, #36]	@ (800e13c <working+0x54>)
 800e116:	2201      	movs	r2, #1
 800e118:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        //     {
        //         bldcMotor.focTarget = 23;
        //     }
        // }
    }
}
 800e11c:	bf00      	nop
 800e11e:	46bd      	mov	sp, r7
 800e120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e124:	4770      	bx	lr
 800e126:	bf00      	nop
 800e128:	20000890 	.word	0x20000890
 800e12c:	20000752 	.word	0x20000752
 800e130:	2000099d 	.word	0x2000099d
 800e134:	20000751 	.word	0x20000751
 800e138:	20000750 	.word	0x20000750
 800e13c:	20000754 	.word	0x20000754

0800e140 <txDataProcess>:

void txDataProcess()
{
<<<<<<< HEAD
 800d1b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d1b8:	b086      	sub	sp, #24
 800d1ba:	af06      	add	r7, sp, #24

    sprintf(txBuffer, "target:%.2f  velocity:%.2f Uq:%.2f  elec_angle:%.2f\n", motor1.target, motor1.magEncoder.velocity, motor1.Uq, motor1.angle_el);
 800d1bc:	4b16      	ldr	r3, [pc, #88]	@ (800d218 <txDataProcess+0x64>)
 800d1be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	f7f3 f9e9 	bl	8000598 <__aeabi_f2d>
 800d1c6:	4682      	mov	sl, r0
 800d1c8:	468b      	mov	fp, r1
 800d1ca:	4b13      	ldr	r3, [pc, #76]	@ (800d218 <txDataProcess+0x64>)
 800d1cc:	699b      	ldr	r3, [r3, #24]
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	f7f3 f9e2 	bl	8000598 <__aeabi_f2d>
 800d1d4:	4604      	mov	r4, r0
 800d1d6:	460d      	mov	r5, r1
 800d1d8:	4b0f      	ldr	r3, [pc, #60]	@ (800d218 <txDataProcess+0x64>)
 800d1da:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800d1de:	4618      	mov	r0, r3
 800d1e0:	f7f3 f9da 	bl	8000598 <__aeabi_f2d>
 800d1e4:	4680      	mov	r8, r0
 800d1e6:	4689      	mov	r9, r1
 800d1e8:	4b0b      	ldr	r3, [pc, #44]	@ (800d218 <txDataProcess+0x64>)
 800d1ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	f7f3 f9d3 	bl	8000598 <__aeabi_f2d>
 800d1f2:	4602      	mov	r2, r0
 800d1f4:	460b      	mov	r3, r1
 800d1f6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d1fa:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800d1fe:	e9cd 4500 	strd	r4, r5, [sp]
 800d202:	4652      	mov	r2, sl
 800d204:	465b      	mov	r3, fp
 800d206:	4905      	ldr	r1, [pc, #20]	@ (800d21c <txDataProcess+0x68>)
 800d208:	4805      	ldr	r0, [pc, #20]	@ (800d220 <txDataProcess+0x6c>)
 800d20a:	f002 facd 	bl	800f7a8 <siprintf>
    // sprintf(txBuffer, "target:%.2f Uq:%.2f velocity:%.2f\n", motor1.target, motor1.Uq, motor1.magEncoder.velocity);
    //  sprintf(txBuffer, "offset_ia:%f offset_ib:%f, Ia:%f, Ib:%f\n", motor1.offset_ia, motor1.offset_ib, motor1.Ia, motor1.Ib);
}
 800d20e:	bf00      	nop
 800d210:	46bd      	mov	sp, r7
 800d212:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d216:	bf00      	nop
 800d218:	20000700 	.word	0x20000700
 800d21c:	080127a8 	.word	0x080127a8
 800d220:	20000840 	.word	0x20000840

0800d224 <HAL_ADCEx_InjectedConvCpltCallback>:

void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800d224:	b580      	push	{r7, lr}
 800d226:	b082      	sub	sp, #8
 800d228:	af00      	add	r7, sp, #0
 800d22a:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(TEST_GPIO_Port, TEST_Pin, GPIO_PIN_SET);
 800d22c:	2201      	movs	r2, #1
 800d22e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800d232:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800d236:	f7f9 fadd 	bl	80067f4 <HAL_GPIO_WritePin>
    if (hadc == &hadc1)
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	4a0d      	ldr	r2, [pc, #52]	@ (800d274 <HAL_ADCEx_InjectedConvCpltCallback+0x50>)
 800d23e:	4293      	cmp	r3, r2
 800d240:	d10d      	bne.n	800d25e <HAL_ADCEx_InjectedConvCpltCallback+0x3a>
    {

        foc(&motor1, hadc1.Instance->JDR1, hadc2.Instance->JDR1);
 800d242:	4b0c      	ldr	r3, [pc, #48]	@ (800d274 <HAL_ADCEx_InjectedConvCpltCallback+0x50>)
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	f8d3 1080 	ldr.w	r1, [r3, #128]	@ 0x80
 800d24a:	4b0b      	ldr	r3, [pc, #44]	@ (800d278 <HAL_ADCEx_InjectedConvCpltCallback+0x54>)
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d252:	461a      	mov	r2, r3
 800d254:	4809      	ldr	r0, [pc, #36]	@ (800d27c <HAL_ADCEx_InjectedConvCpltCallback+0x58>)
 800d256:	f7fe fc4b 	bl	800baf0 <foc>
        // svpwm_test(&motor1, UqMAX, 0.035f);
        dealPer100us();
 800d25a:	f000 fc5b 	bl	800db14 <dealPer100us>

=======
 800e140:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e144:	b08e      	sub	sp, #56	@ 0x38
 800e146:	af0a      	add	r7, sp, #40	@ 0x28
    MPU6050_Read_Accel();
 800e148:	f000 fc3a 	bl	800e9c0 <MPU6050_Read_Accel>
    MPU6050_Read_Gyro();
 800e14c:	f000 fc96 	bl	800ea7c <MPU6050_Read_Gyro>
    MPU6050_Read_Temp();
 800e150:	f000 fcf2 	bl	800eb38 <MPU6050_Read_Temp>
    sprintf(txBuffer, "AX:%.2f AY:%.2f AZ:%.2f GX:%.2f GY:%.2f GZ:%.2f\n", Mpu6050_Data.Accel_X, Mpu6050_Data.Accel_Y, Mpu6050_Data.Accel_Z, Mpu6050_Data.Gyro_X, Mpu6050_Data.Gyro_Y, Mpu6050_Data.Gyro_Z);
 800e154:	4b20      	ldr	r3, [pc, #128]	@ (800e1d8 <txDataProcess+0x98>)
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	4618      	mov	r0, r3
 800e15a:	f7f2 fa1d 	bl	8000598 <__aeabi_f2d>
 800e15e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800e162:	4b1d      	ldr	r3, [pc, #116]	@ (800e1d8 <txDataProcess+0x98>)
 800e164:	685b      	ldr	r3, [r3, #4]
 800e166:	4618      	mov	r0, r3
 800e168:	f7f2 fa16 	bl	8000598 <__aeabi_f2d>
 800e16c:	4604      	mov	r4, r0
 800e16e:	460d      	mov	r5, r1
 800e170:	4b19      	ldr	r3, [pc, #100]	@ (800e1d8 <txDataProcess+0x98>)
 800e172:	689b      	ldr	r3, [r3, #8]
 800e174:	4618      	mov	r0, r3
 800e176:	f7f2 fa0f 	bl	8000598 <__aeabi_f2d>
 800e17a:	4680      	mov	r8, r0
 800e17c:	4689      	mov	r9, r1
 800e17e:	4b16      	ldr	r3, [pc, #88]	@ (800e1d8 <txDataProcess+0x98>)
 800e180:	68db      	ldr	r3, [r3, #12]
 800e182:	4618      	mov	r0, r3
 800e184:	f7f2 fa08 	bl	8000598 <__aeabi_f2d>
 800e188:	4682      	mov	sl, r0
 800e18a:	468b      	mov	fp, r1
 800e18c:	4b12      	ldr	r3, [pc, #72]	@ (800e1d8 <txDataProcess+0x98>)
 800e18e:	691b      	ldr	r3, [r3, #16]
 800e190:	4618      	mov	r0, r3
 800e192:	f7f2 fa01 	bl	8000598 <__aeabi_f2d>
 800e196:	e9c7 0100 	strd	r0, r1, [r7]
 800e19a:	4b0f      	ldr	r3, [pc, #60]	@ (800e1d8 <txDataProcess+0x98>)
 800e19c:	695b      	ldr	r3, [r3, #20]
 800e19e:	4618      	mov	r0, r3
 800e1a0:	f7f2 f9fa 	bl	8000598 <__aeabi_f2d>
 800e1a4:	4602      	mov	r2, r0
 800e1a6:	460b      	mov	r3, r1
 800e1a8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800e1ac:	ed97 7b00 	vldr	d7, [r7]
 800e1b0:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e1b4:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800e1b8:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800e1bc:	e9cd 4500 	strd	r4, r5, [sp]
 800e1c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e1c4:	4905      	ldr	r1, [pc, #20]	@ (800e1dc <txDataProcess+0x9c>)
 800e1c6:	4806      	ldr	r0, [pc, #24]	@ (800e1e0 <txDataProcess+0xa0>)
 800e1c8:	f002 fc5e 	bl	8010a88 <siprintf>
    // MPU6050_GetData(&AX, &AY, &AZ, &GX, &GY, &GZ); // 获取MPU6050的数据
    // sprintf(txBuffer, "AX:%df AY:%d AZ:%d GX:%d GY:%d GZ:%d\n", AX, AY, AZ, GX, GY, GZ);
    // sprintf(txBuffer, "target:%.2f fullAngle:%.2f velocity:%.2f Uq:%.2f Ud:%.2f Iq:%.2f Id:%.2f elec_angle:%.2f\n", motor1.target, motor1.magEncoder.fullAngle, motor1.magEncoder.velocity, motor1.Uq, motor1.Ud, motor1.Iq, motor1.Id, motor1.angle_el);
    // sprintf(txBuffer, "target:%f Uq:%f\n", motor1.target, motor1.Uq);
    // sprintf(txBuffer, "offset_ia:%f offset_ib:%f, Ia:%f, Ib:%f\n", motor1.offset_ia, motor1.offset_ib, motor1.Ia, motor1.Ib);
}
 800e1cc:	bf00      	nop
 800e1ce:	3710      	adds	r7, #16
 800e1d0:	46bd      	mov	sp, r7
 800e1d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e1d6:	bf00      	nop
 800e1d8:	200009a0 	.word	0x200009a0
 800e1dc:	08013a88 	.word	0x08013a88
 800e1e0:	20000894 	.word	0x20000894

0800e1e4 <HAL_ADCEx_InjectedConvCpltCallback>:

void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800e1e4:	b580      	push	{r7, lr}
 800e1e6:	b082      	sub	sp, #8
 800e1e8:	af00      	add	r7, sp, #0
 800e1ea:	6078      	str	r0, [r7, #4]
    // HAL_GPIO_WritePin(TEST_GPIO_Port, TEST_Pin, GPIO_PIN_SET);
    if (hadc == &hadc1)
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	4a0a      	ldr	r2, [pc, #40]	@ (800e218 <HAL_ADCEx_InjectedConvCpltCallback+0x34>)
 800e1f0:	4293      	cmp	r3, r2
 800e1f2:	d10d      	bne.n	800e210 <HAL_ADCEx_InjectedConvCpltCallback+0x2c>
    {

        foc(&motor1, hadc1.Instance->JDR1, hadc2.Instance->JDR1);
 800e1f4:	4b08      	ldr	r3, [pc, #32]	@ (800e218 <HAL_ADCEx_InjectedConvCpltCallback+0x34>)
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	f8d3 1080 	ldr.w	r1, [r3, #128]	@ 0x80
 800e1fc:	4b07      	ldr	r3, [pc, #28]	@ (800e21c <HAL_ADCEx_InjectedConvCpltCallback+0x38>)
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e204:	461a      	mov	r2, r3
 800e206:	4806      	ldr	r0, [pc, #24]	@ (800e220 <HAL_ADCEx_InjectedConvCpltCallback+0x3c>)
 800e208:	f7fe fc34 	bl	800ca74 <foc>
        // svpwm_test(&motor1, 4.0f, 0.07f);
        dealPer100us();
 800e20c:	f000 fdf4 	bl	800edf8 <dealPer100us>
>>>>>>> f88694781bd54d0bca96bec7ac145bdac62fa329
        memcpy(tempData, (uint8_t *)&load_data, sizeof(load_data));
        HAL_UART_Transmit_DMA(&huart3, (uint8_t *)tempData, sizeof(tempData));
#endif
    }
<<<<<<< HEAD
    HAL_GPIO_WritePin(TEST_GPIO_Port, TEST_Pin, GPIO_PIN_RESET);
 800d25e:	2200      	movs	r2, #0
 800d260:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800d264:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800d268:	f7f9 fac4 	bl	80067f4 <HAL_GPIO_WritePin>
}
 800d26c:	bf00      	nop
 800d26e:	3708      	adds	r7, #8
 800d270:	46bd      	mov	sp, r7
 800d272:	bd80      	pop	{r7, pc}
 800d274:	20000274 	.word	0x20000274
 800d278:	200002e0 	.word	0x200002e0
 800d27c:	20000700 	.word	0x20000700

0800d280 <HAL_UARTEx_RxEventCallback>:
=======
    // HAL_GPIO_WritePin(TEST_GPIO_Port, TEST_Pin, GPIO_PIN_RESET);
}
 800e210:	bf00      	nop
 800e212:	3708      	adds	r7, #8
 800e214:	46bd      	mov	sp, r7
 800e216:	bd80      	pop	{r7, pc}
 800e218:	20000274 	.word	0x20000274
 800e21c:	200002e0 	.word	0x200002e0
 800e220:	20000754 	.word	0x20000754

0800e224 <HAL_UARTEx_RxEventCallback>:
>>>>>>> f88694781bd54d0bca96bec7ac145bdac62fa329
bool toProcessData;
uint8_t aRxBuffer;
float comm1, comm2, comm3, comm4, comm5, comm6, comm7, comm8, comm9, comm10, comm11;

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
<<<<<<< HEAD
 800d280:	b580      	push	{r7, lr}
 800d282:	b082      	sub	sp, #8
 800d284:	af00      	add	r7, sp, #0
 800d286:	6078      	str	r0, [r7, #4]
 800d288:	460b      	mov	r3, r1
 800d28a:	807b      	strh	r3, [r7, #2]
  if (huart == &huart3)
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	4a07      	ldr	r2, [pc, #28]	@ (800d2ac <HAL_UARTEx_RxEventCallback+0x2c>)
 800d290:	4293      	cmp	r3, r2
 800d292:	d107      	bne.n	800d2a4 <HAL_UARTEx_RxEventCallback+0x24>
  {
    // HAL_UART_Transmit_DMA(&huart3, rxBuffer, Size);
    HAL_UARTEx_ReceiveToIdle_DMA(&huart3, rxBuffer, sizeof(rxBuffer));
 800d294:	2264      	movs	r2, #100	@ 0x64
 800d296:	4906      	ldr	r1, [pc, #24]	@ (800d2b0 <HAL_UARTEx_RxEventCallback+0x30>)
 800d298:	4804      	ldr	r0, [pc, #16]	@ (800d2ac <HAL_UARTEx_RxEventCallback+0x2c>)
 800d29a:	f7fe fa2a 	bl	800b6f2 <HAL_UARTEx_ReceiveToIdle_DMA>
    toProcessData = 1;
 800d29e:	4b05      	ldr	r3, [pc, #20]	@ (800d2b4 <HAL_UARTEx_RxEventCallback+0x34>)
 800d2a0:	2201      	movs	r2, #1
 800d2a2:	701a      	strb	r2, [r3, #0]
  }
}
 800d2a4:	bf00      	nop
 800d2a6:	3708      	adds	r7, #8
 800d2a8:	46bd      	mov	sp, r7
 800d2aa:	bd80      	pop	{r7, pc}
 800d2ac:	200005a0 	.word	0x200005a0
 800d2b0:	200008a4 	.word	0x200008a4
 800d2b4:	20000908 	.word	0x20000908

0800d2b8 <FOC_log>:
=======
 800e224:	b580      	push	{r7, lr}
 800e226:	b082      	sub	sp, #8
 800e228:	af00      	add	r7, sp, #0
 800e22a:	6078      	str	r0, [r7, #4]
 800e22c:	460b      	mov	r3, r1
 800e22e:	807b      	strh	r3, [r7, #2]
  if (huart == &huart3)
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	4a07      	ldr	r2, [pc, #28]	@ (800e250 <HAL_UARTEx_RxEventCallback+0x2c>)
 800e234:	4293      	cmp	r3, r2
 800e236:	d107      	bne.n	800e248 <HAL_UARTEx_RxEventCallback+0x24>
  {
    // HAL_UART_Transmit_DMA(&huart3, rxBuffer, Size);
    HAL_UARTEx_ReceiveToIdle_DMA(&huart3, rxBuffer, sizeof(rxBuffer));
 800e238:	2264      	movs	r2, #100	@ 0x64
 800e23a:	4906      	ldr	r1, [pc, #24]	@ (800e254 <HAL_UARTEx_RxEventCallback+0x30>)
 800e23c:	4804      	ldr	r0, [pc, #16]	@ (800e250 <HAL_UARTEx_RxEventCallback+0x2c>)
 800e23e:	f7fe fa1a 	bl	800c676 <HAL_UARTEx_ReceiveToIdle_DMA>
    toProcessData = 1;
 800e242:	4b05      	ldr	r3, [pc, #20]	@ (800e258 <HAL_UARTEx_RxEventCallback+0x34>)
 800e244:	2201      	movs	r2, #1
 800e246:	701a      	strb	r2, [r3, #0]
  }
}
 800e248:	bf00      	nop
 800e24a:	3708      	adds	r7, #8
 800e24c:	46bd      	mov	sp, r7
 800e24e:	bd80      	pop	{r7, pc}
 800e250:	200005f4 	.word	0x200005f4
 800e254:	200008f8 	.word	0x200008f8
 800e258:	2000095c 	.word	0x2000095c

0800e25c <FOC_log>:
>>>>>>> f88694781bd54d0bca96bec7ac145bdac62fa329

// DMA模式
void FOC_log(const char *format, ...)
{
<<<<<<< HEAD
 800d2b8:	b40f      	push	{r0, r1, r2, r3}
 800d2ba:	b580      	push	{r7, lr}
 800d2bc:	b0c2      	sub	sp, #264	@ 0x108
 800d2be:	af00      	add	r7, sp, #0
=======
 800e25c:	b40f      	push	{r0, r1, r2, r3}
 800e25e:	b580      	push	{r7, lr}
 800e260:	b0c2      	sub	sp, #264	@ 0x108
 800e262:	af00      	add	r7, sp, #0
>>>>>>> f88694781bd54d0bca96bec7ac145bdac62fa329
  // length = vsnprintf((char *)txBuffer, sizeof(txBuffer), (char *)format, args);
  // va_end(args);
  // HAL_UART_Transmit_DMA(&huart3, (const char *)txBuffer, length);

  va_list args;           // 定义参数列表变量
  va_start(args, format); // 从format位置开始接收参数表，放在arg里面
<<<<<<< HEAD
 800d2c0:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 800d2c4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

  char strBuf[256];               // 定义输出的字符串
  vsprintf(strBuf, format, args); // 使用vsprintf将格式化的数据写入缓冲区
 800d2c8:	1d3b      	adds	r3, r7, #4
 800d2ca:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 800d2ce:	f8d7 1110 	ldr.w	r1, [r7, #272]	@ 0x110
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	f002 fae2 	bl	800f89c <vsiprintf>
=======
 800e264:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 800e268:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

  char strBuf[256];               // 定义输出的字符串
  vsprintf(strBuf, format, args); // 使用vsprintf将格式化的数据写入缓冲区
 800e26c:	1d3b      	adds	r3, r7, #4
 800e26e:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 800e272:	f8d7 1110 	ldr.w	r1, [r7, #272]	@ 0x110
 800e276:	4618      	mov	r0, r3
 800e278:	f002 fc80 	bl	8010b7c <vsiprintf>
>>>>>>> f88694781bd54d0bca96bec7ac145bdac62fa329
  va_end(args);                   // 结束可变参数的使用

  // 等待上次的数据发送完成，避免新的数据覆盖正在传输的数据，导致混乱
  while (HAL_UART_GetState(&huart3) == HAL_UART_STATE_BUSY_TX)
<<<<<<< HEAD
 800d2d8:	bf00      	nop
 800d2da:	480d      	ldr	r0, [pc, #52]	@ (800d310 <FOC_log+0x58>)
 800d2dc:	f7fd f9bc 	bl	800a658 <HAL_UART_GetState>
 800d2e0:	4603      	mov	r3, r0
 800d2e2:	2b21      	cmp	r3, #33	@ 0x21
 800d2e4:	d0f9      	beq.n	800d2da <FOC_log+0x22>
=======
 800e27c:	bf00      	nop
 800e27e:	480d      	ldr	r0, [pc, #52]	@ (800e2b4 <FOC_log+0x58>)
 800e280:	f7fd f9ac 	bl	800b5dc <HAL_UART_GetState>
 800e284:	4603      	mov	r3, r0
 800e286:	2b21      	cmp	r3, #33	@ 0x21
 800e288:	d0f9      	beq.n	800e27e <FOC_log+0x22>
>>>>>>> f88694781bd54d0bca96bec7ac145bdac62fa329
  {
    // Wait for DMA transfer to complete
  }
  HAL_UART_Transmit(&huart3, (uint8_t *)strBuf, strlen(strBuf), 1000);
<<<<<<< HEAD
 800d2e6:	1d3b      	adds	r3, r7, #4
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	f7f2 ffe9 	bl	80002c0 <strlen>
 800d2ee:	4603      	mov	r3, r0
 800d2f0:	b29a      	uxth	r2, r3
 800d2f2:	1d39      	adds	r1, r7, #4
 800d2f4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800d2f8:	4805      	ldr	r0, [pc, #20]	@ (800d310 <FOC_log+0x58>)
 800d2fa:	f7fc fd48 	bl	8009d8e <HAL_UART_Transmit>
}
 800d2fe:	bf00      	nop
 800d300:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800d304:	46bd      	mov	sp, r7
 800d306:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d30a:	b004      	add	sp, #16
 800d30c:	4770      	bx	lr
 800d30e:	bf00      	nop
 800d310:	200005a0 	.word	0x200005a0

0800d314 <printLog>:
=======
 800e28a:	1d3b      	adds	r3, r7, #4
 800e28c:	4618      	mov	r0, r3
 800e28e:	f7f2 f817 	bl	80002c0 <strlen>
 800e292:	4603      	mov	r3, r0
 800e294:	b29a      	uxth	r2, r3
 800e296:	1d39      	adds	r1, r7, #4
 800e298:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800e29c:	4805      	ldr	r0, [pc, #20]	@ (800e2b4 <FOC_log+0x58>)
 800e29e:	f7fc fd38 	bl	800ad12 <HAL_UART_Transmit>
}
 800e2a2:	bf00      	nop
 800e2a4:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800e2a8:	46bd      	mov	sp, r7
 800e2aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e2ae:	b004      	add	sp, #16
 800e2b0:	4770      	bx	lr
 800e2b2:	bf00      	nop
 800e2b4:	200005f4 	.word	0x200005f4

0800e2b8 <printLog>:
>>>>>>> f88694781bd54d0bca96bec7ac145bdac62fa329
//   va_end(args);
//   HAL_UART_Transmit_DMA(&huart3, (const char *)txBuffer, length);
// }

void printLog()
{
<<<<<<< HEAD
 800d314:	b580      	push	{r7, lr}
 800d316:	af00      	add	r7, sp, #0

#if SHOW_WAVE == 0
  txDataProcess();
 800d318:	f7ff ff4c 	bl	800d1b4 <txDataProcess>
  HAL_UART_Transmit_DMA(&huart3, (uint8_t *)txBuffer, sizeof(txBuffer));
 800d31c:	2264      	movs	r2, #100	@ 0x64
 800d31e:	4903      	ldr	r1, [pc, #12]	@ (800d32c <printLog+0x18>)
 800d320:	4803      	ldr	r0, [pc, #12]	@ (800d330 <printLog+0x1c>)
 800d322:	f7fc fdc3 	bl	8009eac <HAL_UART_Transmit_DMA>
#endif
}
 800d326:	bf00      	nop
 800d328:	bd80      	pop	{r7, pc}
 800d32a:	bf00      	nop
 800d32c:	20000840 	.word	0x20000840
 800d330:	200005a0 	.word	0x200005a0

0800d334 <commander_run>:

void commander_run(BldcMotor *motor)
{
 800d334:	b580      	push	{r7, lr}
 800d336:	b082      	sub	sp, #8
 800d338:	af00      	add	r7, sp, #0
 800d33a:	6078      	str	r0, [r7, #4]
  if (toProcessData == 1)
 800d33c:	4b1c      	ldr	r3, [pc, #112]	@ (800d3b0 <commander_run+0x7c>)
 800d33e:	781b      	ldrb	r3, [r3, #0]
 800d340:	2b01      	cmp	r3, #1
 800d342:	d131      	bne.n	800d3a8 <commander_run+0x74>
=======
 800e2b8:	b580      	push	{r7, lr}
 800e2ba:	af00      	add	r7, sp, #0

#if SHOW_WAVE == 0
  txDataProcess();
 800e2bc:	f7ff ff40 	bl	800e140 <txDataProcess>
  HAL_UART_Transmit_DMA(&huart3, (uint8_t *)txBuffer, sizeof(txBuffer));
 800e2c0:	2264      	movs	r2, #100	@ 0x64
 800e2c2:	4903      	ldr	r1, [pc, #12]	@ (800e2d0 <printLog+0x18>)
 800e2c4:	4803      	ldr	r0, [pc, #12]	@ (800e2d4 <printLog+0x1c>)
 800e2c6:	f7fc fdb3 	bl	800ae30 <HAL_UART_Transmit_DMA>
#endif
}
 800e2ca:	bf00      	nop
 800e2cc:	bd80      	pop	{r7, pc}
 800e2ce:	bf00      	nop
 800e2d0:	20000894 	.word	0x20000894
 800e2d4:	200005f4 	.word	0x200005f4

0800e2d8 <commander_run>:

void commander_run(BldcMotor *motor)
{
 800e2d8:	b580      	push	{r7, lr}
 800e2da:	b082      	sub	sp, #8
 800e2dc:	af00      	add	r7, sp, #0
 800e2de:	6078      	str	r0, [r7, #4]
  if (toProcessData == 1)
 800e2e0:	4b1c      	ldr	r3, [pc, #112]	@ (800e354 <commander_run+0x7c>)
 800e2e2:	781b      	ldrb	r3, [r3, #0]
 800e2e4:	2b01      	cmp	r3, #1
 800e2e6:	d131      	bne.n	800e34c <commander_run+0x74>
>>>>>>> f88694781bd54d0bca96bec7ac145bdac62fa329
  {
    // memset(txBuffer, '\0', sizeof(txBuffer));

    switch (rxBuffer[0])
<<<<<<< HEAD
 800d344:	4b1b      	ldr	r3, [pc, #108]	@ (800d3b4 <commander_run+0x80>)
 800d346:	781b      	ldrb	r3, [r3, #0]
 800d348:	2b48      	cmp	r3, #72	@ 0x48
 800d34a:	d002      	beq.n	800d352 <commander_run+0x1e>
 800d34c:	2b54      	cmp	r3, #84	@ 0x54
 800d34e:	d00a      	beq.n	800d366 <commander_run+0x32>
 800d350:	e027      	b.n	800d3a2 <commander_run+0x6e>
=======
 800e2e8:	4b1b      	ldr	r3, [pc, #108]	@ (800e358 <commander_run+0x80>)
 800e2ea:	781b      	ldrb	r3, [r3, #0]
 800e2ec:	2b48      	cmp	r3, #72	@ 0x48
 800e2ee:	d002      	beq.n	800e2f6 <commander_run+0x1e>
 800e2f0:	2b54      	cmp	r3, #84	@ 0x54
 800e2f2:	d00a      	beq.n	800e30a <commander_run+0x32>
 800e2f4:	e027      	b.n	800e346 <commander_run+0x6e>
>>>>>>> f88694781bd54d0bca96bec7ac145bdac62fa329
    {
    case 'H':
      // sprintf(sndBuff, "Hello World!\r\n");
      // HAL_UART_Transmit_DMA(&huart3, (uint8_t *)sndBuff, sizeof(sndBuff));
      sprintf(txBuffer, "Hello World!\r\n");
<<<<<<< HEAD
 800d352:	4919      	ldr	r1, [pc, #100]	@ (800d3b8 <commander_run+0x84>)
 800d354:	4819      	ldr	r0, [pc, #100]	@ (800d3bc <commander_run+0x88>)
 800d356:	f002 fa27 	bl	800f7a8 <siprintf>
      HAL_UART_Transmit_DMA(&huart3, (uint8_t *)txBuffer, sizeof(txBuffer));
 800d35a:	2264      	movs	r2, #100	@ 0x64
 800d35c:	4917      	ldr	r1, [pc, #92]	@ (800d3bc <commander_run+0x88>)
 800d35e:	4818      	ldr	r0, [pc, #96]	@ (800d3c0 <commander_run+0x8c>)
 800d360:	f7fc fda4 	bl	8009eac <HAL_UART_Transmit_DMA>
      break;
 800d364:	e01d      	b.n	800d3a2 <commander_run+0x6e>
    case 'T': // T6.28

      motor->target = atof((const char *)(rxBuffer + 1));
 800d366:	4b17      	ldr	r3, [pc, #92]	@ (800d3c4 <commander_run+0x90>)
 800d368:	4618      	mov	r0, r3
 800d36a:	f000 fcd5 	bl	800dd18 <atof>
 800d36e:	ec53 2b10 	vmov	r2, r3, d0
 800d372:	4610      	mov	r0, r2
 800d374:	4619      	mov	r1, r3
 800d376:	f7f3 fc5f 	bl	8000c38 <__aeabi_d2f>
 800d37a:	4602      	mov	r2, r0
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	631a      	str	r2, [r3, #48]	@ 0x30
      sprintf(txBuffer, "Target=%.2f\r\n", motor->target);
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d384:	4618      	mov	r0, r3
 800d386:	f7f3 f907 	bl	8000598 <__aeabi_f2d>
 800d38a:	4602      	mov	r2, r0
 800d38c:	460b      	mov	r3, r1
 800d38e:	490e      	ldr	r1, [pc, #56]	@ (800d3c8 <commander_run+0x94>)
 800d390:	480a      	ldr	r0, [pc, #40]	@ (800d3bc <commander_run+0x88>)
 800d392:	f002 fa09 	bl	800f7a8 <siprintf>
      HAL_UART_Transmit_DMA(&huart3, (uint8_t *)txBuffer, sizeof(txBuffer));
 800d396:	2264      	movs	r2, #100	@ 0x64
 800d398:	4908      	ldr	r1, [pc, #32]	@ (800d3bc <commander_run+0x88>)
 800d39a:	4809      	ldr	r0, [pc, #36]	@ (800d3c0 <commander_run+0x8c>)
 800d39c:	f7fc fd86 	bl	8009eac <HAL_UART_Transmit_DMA>
      // printf("%s", sndBuff);
      // HAL_UART_Transmit_DMA(&huart3, (uint8_t *)sndBuff, sizeof(sndBuff));
      break;
 800d3a0:	bf00      	nop
=======
 800e2f6:	4919      	ldr	r1, [pc, #100]	@ (800e35c <commander_run+0x84>)
 800e2f8:	4819      	ldr	r0, [pc, #100]	@ (800e360 <commander_run+0x88>)
 800e2fa:	f002 fbc5 	bl	8010a88 <siprintf>
      HAL_UART_Transmit_DMA(&huart3, (uint8_t *)txBuffer, sizeof(txBuffer));
 800e2fe:	2264      	movs	r2, #100	@ 0x64
 800e300:	4917      	ldr	r1, [pc, #92]	@ (800e360 <commander_run+0x88>)
 800e302:	4818      	ldr	r0, [pc, #96]	@ (800e364 <commander_run+0x8c>)
 800e304:	f7fc fd94 	bl	800ae30 <HAL_UART_Transmit_DMA>
      break;
 800e308:	e01d      	b.n	800e346 <commander_run+0x6e>
    case 'T': // T6.28

      motor->target = atof((const char *)(rxBuffer + 1));
 800e30a:	4b17      	ldr	r3, [pc, #92]	@ (800e368 <commander_run+0x90>)
 800e30c:	4618      	mov	r0, r3
 800e30e:	f000 fe75 	bl	800effc <atof>
 800e312:	ec53 2b10 	vmov	r2, r3, d0
 800e316:	4610      	mov	r0, r2
 800e318:	4619      	mov	r1, r3
 800e31a:	f7f2 fc8d 	bl	8000c38 <__aeabi_d2f>
 800e31e:	4602      	mov	r2, r0
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	631a      	str	r2, [r3, #48]	@ 0x30
      sprintf(txBuffer, "Target=%.2f\r\n", motor->target);
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e328:	4618      	mov	r0, r3
 800e32a:	f7f2 f935 	bl	8000598 <__aeabi_f2d>
 800e32e:	4602      	mov	r2, r0
 800e330:	460b      	mov	r3, r1
 800e332:	490e      	ldr	r1, [pc, #56]	@ (800e36c <commander_run+0x94>)
 800e334:	480a      	ldr	r0, [pc, #40]	@ (800e360 <commander_run+0x88>)
 800e336:	f002 fba7 	bl	8010a88 <siprintf>
      HAL_UART_Transmit_DMA(&huart3, (uint8_t *)txBuffer, sizeof(txBuffer));
 800e33a:	2264      	movs	r2, #100	@ 0x64
 800e33c:	4908      	ldr	r1, [pc, #32]	@ (800e360 <commander_run+0x88>)
 800e33e:	4809      	ldr	r0, [pc, #36]	@ (800e364 <commander_run+0x8c>)
 800e340:	f7fc fd76 	bl	800ae30 <HAL_UART_Transmit_DMA>
      // printf("%s", sndBuff);
      // HAL_UART_Transmit_DMA(&huart3, (uint8_t *)sndBuff, sizeof(sndBuff));
      break;
 800e344:	bf00      	nop
>>>>>>> f88694781bd54d0bca96bec7ac145bdac62fa329
      // case 'A': // A
      //   sprintf(sndBuff, "Ang=%.2f\r\n", shaftAngle);
      //   printf("%s", sndBuff);
      //   break;
    }
    toProcessData = 0;
<<<<<<< HEAD
 800d3a2:	4b03      	ldr	r3, [pc, #12]	@ (800d3b0 <commander_run+0x7c>)
 800d3a4:	2200      	movs	r2, #0
 800d3a6:	701a      	strb	r2, [r3, #0]
  }
}
 800d3a8:	bf00      	nop
 800d3aa:	3708      	adds	r7, #8
 800d3ac:	46bd      	mov	sp, r7
 800d3ae:	bd80      	pop	{r7, pc}
 800d3b0:	20000908 	.word	0x20000908
 800d3b4:	200008a4 	.word	0x200008a4
 800d3b8:	080127e0 	.word	0x080127e0
 800d3bc:	20000840 	.word	0x20000840
 800d3c0:	200005a0 	.word	0x200005a0
 800d3c4:	200008a5 	.word	0x200008a5
 800d3c8:	080127f0 	.word	0x080127f0

0800d3cc <getKeyFlags>:
=======
 800e346:	4b03      	ldr	r3, [pc, #12]	@ (800e354 <commander_run+0x7c>)
 800e348:	2200      	movs	r2, #0
 800e34a:	701a      	strb	r2, [r3, #0]
  }
}
 800e34c:	bf00      	nop
 800e34e:	3708      	adds	r7, #8
 800e350:	46bd      	mov	sp, r7
 800e352:	bd80      	pop	{r7, pc}
 800e354:	2000095c 	.word	0x2000095c
 800e358:	200008f8 	.word	0x200008f8
 800e35c:	08013abc 	.word	0x08013abc
 800e360:	20000894 	.word	0x20000894
 800e364:	200005f4 	.word	0x200005f4
 800e368:	200008f9 	.word	0x200008f9
 800e36c:	08013acc 	.word	0x08013acc

0800e370 <getKeyFlags>:
>>>>>>> f88694781bd54d0bca96bec7ac145bdac62fa329
#include "key.h"

static KeyStruct keyStruct[KEY_NUM];

uint getKeyFlags()
{
<<<<<<< HEAD
 800d3cc:	b580      	push	{r7, lr}
 800d3ce:	af00      	add	r7, sp, #0
=======
 800e370:	b580      	push	{r7, lr}
 800e372:	af00      	add	r7, sp, #0
>>>>>>> f88694781bd54d0bca96bec7ac145bdac62fa329
    static uint keyFlagsBak; // back up keyflags for filtering
    static uchar filterCnt;
    static Byte flags;       // real time key flags with bits operation
    static uint keyFlagsBuf; // return key flags after filtering

    flags.byte = 0;
<<<<<<< HEAD
 800d3d0:	4b3b      	ldr	r3, [pc, #236]	@ (800d4c0 <getKeyFlags+0xf4>)
 800d3d2:	2200      	movs	r2, #0
 800d3d4:	701a      	strb	r2, [r3, #0]

    // when IO been multiplexed
    if (HAL_GPIO_ReadPin(SW_PORT, SW1_PIN) == 1)
 800d3d6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800d3da:	483a      	ldr	r0, [pc, #232]	@ (800d4c4 <getKeyFlags+0xf8>)
 800d3dc:	f7f9 f9f2 	bl	80067c4 <HAL_GPIO_ReadPin>
 800d3e0:	4603      	mov	r3, r0
 800d3e2:	2b01      	cmp	r3, #1
 800d3e4:	d104      	bne.n	800d3f0 <getKeyFlags+0x24>
    {
        flags.bits.b0 = 1; // SW1
 800d3e6:	4a36      	ldr	r2, [pc, #216]	@ (800d4c0 <getKeyFlags+0xf4>)
 800d3e8:	7813      	ldrb	r3, [r2, #0]
 800d3ea:	f043 0301 	orr.w	r3, r3, #1
 800d3ee:	7013      	strb	r3, [r2, #0]
    }

    if (HAL_GPIO_ReadPin(SW_PORT, SW2_PIN) == 1)
 800d3f0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800d3f4:	4833      	ldr	r0, [pc, #204]	@ (800d4c4 <getKeyFlags+0xf8>)
 800d3f6:	f7f9 f9e5 	bl	80067c4 <HAL_GPIO_ReadPin>
 800d3fa:	4603      	mov	r3, r0
 800d3fc:	2b01      	cmp	r3, #1
 800d3fe:	d104      	bne.n	800d40a <getKeyFlags+0x3e>
    {
        flags.bits.b1 = 1; // SW2
 800d400:	4a2f      	ldr	r2, [pc, #188]	@ (800d4c0 <getKeyFlags+0xf4>)
 800d402:	7813      	ldrb	r3, [r2, #0]
 800d404:	f043 0302 	orr.w	r3, r3, #2
 800d408:	7013      	strb	r3, [r2, #0]
    }

    if (HAL_GPIO_ReadPin(SW_PORT, SW3_PIN) == 1)
 800d40a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800d40e:	482d      	ldr	r0, [pc, #180]	@ (800d4c4 <getKeyFlags+0xf8>)
 800d410:	f7f9 f9d8 	bl	80067c4 <HAL_GPIO_ReadPin>
 800d414:	4603      	mov	r3, r0
 800d416:	2b01      	cmp	r3, #1
 800d418:	d104      	bne.n	800d424 <getKeyFlags+0x58>
    {
        flags.bits.b2 = 1; // SW3
 800d41a:	4a29      	ldr	r2, [pc, #164]	@ (800d4c0 <getKeyFlags+0xf4>)
 800d41c:	7813      	ldrb	r3, [r2, #0]
 800d41e:	f043 0304 	orr.w	r3, r3, #4
 800d422:	7013      	strb	r3, [r2, #0]
    }

    if (flags.byte == keyFlagsBak)
 800d424:	4b26      	ldr	r3, [pc, #152]	@ (800d4c0 <getKeyFlags+0xf4>)
 800d426:	781b      	ldrb	r3, [r3, #0]
 800d428:	461a      	mov	r2, r3
 800d42a:	4b27      	ldr	r3, [pc, #156]	@ (800d4c8 <getKeyFlags+0xfc>)
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	429a      	cmp	r2, r3
 800d430:	d13c      	bne.n	800d4ac <getKeyFlags+0xe0>
    {
        if (flags.bits.b0)
 800d432:	4b23      	ldr	r3, [pc, #140]	@ (800d4c0 <getKeyFlags+0xf4>)
 800d434:	781b      	ldrb	r3, [r3, #0]
 800d436:	f003 0301 	and.w	r3, r3, #1
 800d43a:	b2db      	uxtb	r3, r3
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d006      	beq.n	800d44e <getKeyFlags+0x82>
            keyFlagsBuf |= 1;
 800d440:	4b22      	ldr	r3, [pc, #136]	@ (800d4cc <getKeyFlags+0x100>)
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	f043 0301 	orr.w	r3, r3, #1
 800d448:	4a20      	ldr	r2, [pc, #128]	@ (800d4cc <getKeyFlags+0x100>)
 800d44a:	6013      	str	r3, [r2, #0]
 800d44c:	e005      	b.n	800d45a <getKeyFlags+0x8e>
        else
            keyFlagsBuf &= ~1;
 800d44e:	4b1f      	ldr	r3, [pc, #124]	@ (800d4cc <getKeyFlags+0x100>)
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	f023 0301 	bic.w	r3, r3, #1
 800d456:	4a1d      	ldr	r2, [pc, #116]	@ (800d4cc <getKeyFlags+0x100>)
 800d458:	6013      	str	r3, [r2, #0]

        if (flags.bits.b1)
 800d45a:	4b19      	ldr	r3, [pc, #100]	@ (800d4c0 <getKeyFlags+0xf4>)
 800d45c:	781b      	ldrb	r3, [r3, #0]
 800d45e:	f003 0302 	and.w	r3, r3, #2
 800d462:	b2db      	uxtb	r3, r3
 800d464:	2b00      	cmp	r3, #0
 800d466:	d006      	beq.n	800d476 <getKeyFlags+0xaa>
            keyFlagsBuf |= 1 << 1;
 800d468:	4b18      	ldr	r3, [pc, #96]	@ (800d4cc <getKeyFlags+0x100>)
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	f043 0302 	orr.w	r3, r3, #2
 800d470:	4a16      	ldr	r2, [pc, #88]	@ (800d4cc <getKeyFlags+0x100>)
 800d472:	6013      	str	r3, [r2, #0]
 800d474:	e005      	b.n	800d482 <getKeyFlags+0xb6>
        else
            keyFlagsBuf &= ~(1 << 1);
 800d476:	4b15      	ldr	r3, [pc, #84]	@ (800d4cc <getKeyFlags+0x100>)
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	f023 0302 	bic.w	r3, r3, #2
 800d47e:	4a13      	ldr	r2, [pc, #76]	@ (800d4cc <getKeyFlags+0x100>)
 800d480:	6013      	str	r3, [r2, #0]

        if (flags.bits.b2)
 800d482:	4b0f      	ldr	r3, [pc, #60]	@ (800d4c0 <getKeyFlags+0xf4>)
 800d484:	781b      	ldrb	r3, [r3, #0]
 800d486:	f003 0304 	and.w	r3, r3, #4
 800d48a:	b2db      	uxtb	r3, r3
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d006      	beq.n	800d49e <getKeyFlags+0xd2>
            keyFlagsBuf |= 1 << 2;
 800d490:	4b0e      	ldr	r3, [pc, #56]	@ (800d4cc <getKeyFlags+0x100>)
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	f043 0304 	orr.w	r3, r3, #4
 800d498:	4a0c      	ldr	r2, [pc, #48]	@ (800d4cc <getKeyFlags+0x100>)
 800d49a:	6013      	str	r3, [r2, #0]
 800d49c:	e00b      	b.n	800d4b6 <getKeyFlags+0xea>
        else
            keyFlagsBuf &= ~(1 << 2);
 800d49e:	4b0b      	ldr	r3, [pc, #44]	@ (800d4cc <getKeyFlags+0x100>)
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	f023 0304 	bic.w	r3, r3, #4
 800d4a6:	4a09      	ldr	r2, [pc, #36]	@ (800d4cc <getKeyFlags+0x100>)
 800d4a8:	6013      	str	r3, [r2, #0]
 800d4aa:	e004      	b.n	800d4b6 <getKeyFlags+0xea>
=======
 800e374:	4b3b      	ldr	r3, [pc, #236]	@ (800e464 <getKeyFlags+0xf4>)
 800e376:	2200      	movs	r2, #0
 800e378:	701a      	strb	r2, [r3, #0]

    // when IO been multiplexed
    if (HAL_GPIO_ReadPin(SW_PORT, SW1_PIN) == 1)
 800e37a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800e37e:	483a      	ldr	r0, [pc, #232]	@ (800e468 <getKeyFlags+0xf8>)
 800e380:	f7f8 fad2 	bl	8006928 <HAL_GPIO_ReadPin>
 800e384:	4603      	mov	r3, r0
 800e386:	2b01      	cmp	r3, #1
 800e388:	d104      	bne.n	800e394 <getKeyFlags+0x24>
    {
        flags.bits.b0 = 1; // SW1
 800e38a:	4a36      	ldr	r2, [pc, #216]	@ (800e464 <getKeyFlags+0xf4>)
 800e38c:	7813      	ldrb	r3, [r2, #0]
 800e38e:	f043 0301 	orr.w	r3, r3, #1
 800e392:	7013      	strb	r3, [r2, #0]
    }

    if (HAL_GPIO_ReadPin(SW_PORT, SW2_PIN) == 1)
 800e394:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800e398:	4833      	ldr	r0, [pc, #204]	@ (800e468 <getKeyFlags+0xf8>)
 800e39a:	f7f8 fac5 	bl	8006928 <HAL_GPIO_ReadPin>
 800e39e:	4603      	mov	r3, r0
 800e3a0:	2b01      	cmp	r3, #1
 800e3a2:	d104      	bne.n	800e3ae <getKeyFlags+0x3e>
    {
        flags.bits.b1 = 1; // SW2
 800e3a4:	4a2f      	ldr	r2, [pc, #188]	@ (800e464 <getKeyFlags+0xf4>)
 800e3a6:	7813      	ldrb	r3, [r2, #0]
 800e3a8:	f043 0302 	orr.w	r3, r3, #2
 800e3ac:	7013      	strb	r3, [r2, #0]
    }

    if (HAL_GPIO_ReadPin(SW_PORT, SW3_PIN) == 1)
 800e3ae:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800e3b2:	482d      	ldr	r0, [pc, #180]	@ (800e468 <getKeyFlags+0xf8>)
 800e3b4:	f7f8 fab8 	bl	8006928 <HAL_GPIO_ReadPin>
 800e3b8:	4603      	mov	r3, r0
 800e3ba:	2b01      	cmp	r3, #1
 800e3bc:	d104      	bne.n	800e3c8 <getKeyFlags+0x58>
    {
        flags.bits.b2 = 1; // SW3
 800e3be:	4a29      	ldr	r2, [pc, #164]	@ (800e464 <getKeyFlags+0xf4>)
 800e3c0:	7813      	ldrb	r3, [r2, #0]
 800e3c2:	f043 0304 	orr.w	r3, r3, #4
 800e3c6:	7013      	strb	r3, [r2, #0]
    }

    if (flags.byte == keyFlagsBak)
 800e3c8:	4b26      	ldr	r3, [pc, #152]	@ (800e464 <getKeyFlags+0xf4>)
 800e3ca:	781b      	ldrb	r3, [r3, #0]
 800e3cc:	461a      	mov	r2, r3
 800e3ce:	4b27      	ldr	r3, [pc, #156]	@ (800e46c <getKeyFlags+0xfc>)
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	429a      	cmp	r2, r3
 800e3d4:	d13c      	bne.n	800e450 <getKeyFlags+0xe0>
    {
        if (flags.bits.b0)
 800e3d6:	4b23      	ldr	r3, [pc, #140]	@ (800e464 <getKeyFlags+0xf4>)
 800e3d8:	781b      	ldrb	r3, [r3, #0]
 800e3da:	f003 0301 	and.w	r3, r3, #1
 800e3de:	b2db      	uxtb	r3, r3
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d006      	beq.n	800e3f2 <getKeyFlags+0x82>
            keyFlagsBuf |= 1;
 800e3e4:	4b22      	ldr	r3, [pc, #136]	@ (800e470 <getKeyFlags+0x100>)
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	f043 0301 	orr.w	r3, r3, #1
 800e3ec:	4a20      	ldr	r2, [pc, #128]	@ (800e470 <getKeyFlags+0x100>)
 800e3ee:	6013      	str	r3, [r2, #0]
 800e3f0:	e005      	b.n	800e3fe <getKeyFlags+0x8e>
        else
            keyFlagsBuf &= ~1;
 800e3f2:	4b1f      	ldr	r3, [pc, #124]	@ (800e470 <getKeyFlags+0x100>)
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	f023 0301 	bic.w	r3, r3, #1
 800e3fa:	4a1d      	ldr	r2, [pc, #116]	@ (800e470 <getKeyFlags+0x100>)
 800e3fc:	6013      	str	r3, [r2, #0]

        if (flags.bits.b1)
 800e3fe:	4b19      	ldr	r3, [pc, #100]	@ (800e464 <getKeyFlags+0xf4>)
 800e400:	781b      	ldrb	r3, [r3, #0]
 800e402:	f003 0302 	and.w	r3, r3, #2
 800e406:	b2db      	uxtb	r3, r3
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d006      	beq.n	800e41a <getKeyFlags+0xaa>
            keyFlagsBuf |= 1 << 1;
 800e40c:	4b18      	ldr	r3, [pc, #96]	@ (800e470 <getKeyFlags+0x100>)
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	f043 0302 	orr.w	r3, r3, #2
 800e414:	4a16      	ldr	r2, [pc, #88]	@ (800e470 <getKeyFlags+0x100>)
 800e416:	6013      	str	r3, [r2, #0]
 800e418:	e005      	b.n	800e426 <getKeyFlags+0xb6>
        else
            keyFlagsBuf &= ~(1 << 1);
 800e41a:	4b15      	ldr	r3, [pc, #84]	@ (800e470 <getKeyFlags+0x100>)
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	f023 0302 	bic.w	r3, r3, #2
 800e422:	4a13      	ldr	r2, [pc, #76]	@ (800e470 <getKeyFlags+0x100>)
 800e424:	6013      	str	r3, [r2, #0]

        if (flags.bits.b2)
 800e426:	4b0f      	ldr	r3, [pc, #60]	@ (800e464 <getKeyFlags+0xf4>)
 800e428:	781b      	ldrb	r3, [r3, #0]
 800e42a:	f003 0304 	and.w	r3, r3, #4
 800e42e:	b2db      	uxtb	r3, r3
 800e430:	2b00      	cmp	r3, #0
 800e432:	d006      	beq.n	800e442 <getKeyFlags+0xd2>
            keyFlagsBuf |= 1 << 2;
 800e434:	4b0e      	ldr	r3, [pc, #56]	@ (800e470 <getKeyFlags+0x100>)
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	f043 0304 	orr.w	r3, r3, #4
 800e43c:	4a0c      	ldr	r2, [pc, #48]	@ (800e470 <getKeyFlags+0x100>)
 800e43e:	6013      	str	r3, [r2, #0]
 800e440:	e00b      	b.n	800e45a <getKeyFlags+0xea>
        else
            keyFlagsBuf &= ~(1 << 2);
 800e442:	4b0b      	ldr	r3, [pc, #44]	@ (800e470 <getKeyFlags+0x100>)
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	f023 0304 	bic.w	r3, r3, #4
 800e44a:	4a09      	ldr	r2, [pc, #36]	@ (800e470 <getKeyFlags+0x100>)
 800e44c:	6013      	str	r3, [r2, #0]
 800e44e:	e004      	b.n	800e45a <getKeyFlags+0xea>
>>>>>>> f88694781bd54d0bca96bec7ac145bdac62fa329
    }
    else
    {
        keyFlagsBak = flags.byte;
<<<<<<< HEAD
 800d4ac:	4b04      	ldr	r3, [pc, #16]	@ (800d4c0 <getKeyFlags+0xf4>)
 800d4ae:	781b      	ldrb	r3, [r3, #0]
 800d4b0:	461a      	mov	r2, r3
 800d4b2:	4b05      	ldr	r3, [pc, #20]	@ (800d4c8 <getKeyFlags+0xfc>)
 800d4b4:	601a      	str	r2, [r3, #0]
=======
 800e450:	4b04      	ldr	r3, [pc, #16]	@ (800e464 <getKeyFlags+0xf4>)
 800e452:	781b      	ldrb	r3, [r3, #0]
 800e454:	461a      	mov	r2, r3
 800e456:	4b05      	ldr	r3, [pc, #20]	@ (800e46c <getKeyFlags+0xfc>)
 800e458:	601a      	str	r2, [r3, #0]
>>>>>>> f88694781bd54d0bca96bec7ac145bdac62fa329
    }
#if DEBUG_KEY
    // displayStuff = keyFlagsBuf;
#endif

    return keyFlagsBuf;
<<<<<<< HEAD
 800d4b6:	4b05      	ldr	r3, [pc, #20]	@ (800d4cc <getKeyFlags+0x100>)
 800d4b8:	681b      	ldr	r3, [r3, #0]
}
 800d4ba:	4618      	mov	r0, r3
 800d4bc:	bd80      	pop	{r7, pc}
 800d4be:	bf00      	nop
 800d4c0:	2000093c 	.word	0x2000093c
 800d4c4:	48000800 	.word	0x48000800
 800d4c8:	20000940 	.word	0x20000940
 800d4cc:	20000944 	.word	0x20000944

0800d4d0 <keyScan>:

void keyScan()
{
 800d4d0:	b580      	push	{r7, lr}
 800d4d2:	b082      	sub	sp, #8
 800d4d4:	af00      	add	r7, sp, #0
=======
 800e45a:	4b05      	ldr	r3, [pc, #20]	@ (800e470 <getKeyFlags+0x100>)
 800e45c:	681b      	ldr	r3, [r3, #0]
}
 800e45e:	4618      	mov	r0, r3
 800e460:	bd80      	pop	{r7, pc}
 800e462:	bf00      	nop
 800e464:	20000990 	.word	0x20000990
 800e468:	48000800 	.word	0x48000800
 800e46c:	20000994 	.word	0x20000994
 800e470:	20000998 	.word	0x20000998

0800e474 <keyScan>:

void keyScan()
{
 800e474:	b580      	push	{r7, lr}
 800e476:	b082      	sub	sp, #8
 800e478:	af00      	add	r7, sp, #0
>>>>>>> f88694781bd54d0bca96bec7ac145bdac62fa329

    uint keyFlags;

    keyFlags = getKeyFlags();
<<<<<<< HEAD
 800d4d6:	f7ff ff79 	bl	800d3cc <getKeyFlags>
 800d4da:	6038      	str	r0, [r7, #0]

    if (keyFlags == 0)
 800d4dc:	683b      	ldr	r3, [r7, #0]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d13b      	bne.n	800d55a <keyScan+0x8a>
    {
        uchar i;
        for (i = 0; i < KEY_NUM; i++)
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	71fb      	strb	r3, [r7, #7]
 800d4e6:	e035      	b.n	800d554 <keyScan+0x84>
        {
            if (keyStruct[i].keyType == LONG_WITH_SHORT && keyStruct[i].trigCnt > 0)
 800d4e8:	79fa      	ldrb	r2, [r7, #7]
 800d4ea:	4992      	ldr	r1, [pc, #584]	@ (800d734 <keyScan+0x264>)
 800d4ec:	4613      	mov	r3, r2
 800d4ee:	005b      	lsls	r3, r3, #1
 800d4f0:	4413      	add	r3, r2
 800d4f2:	009b      	lsls	r3, r3, #2
 800d4f4:	440b      	add	r3, r1
 800d4f6:	781b      	ldrb	r3, [r3, #0]
 800d4f8:	2b01      	cmp	r3, #1
 800d4fa:	d114      	bne.n	800d526 <keyScan+0x56>
 800d4fc:	79fa      	ldrb	r2, [r7, #7]
 800d4fe:	498d      	ldr	r1, [pc, #564]	@ (800d734 <keyScan+0x264>)
 800d500:	4613      	mov	r3, r2
 800d502:	005b      	lsls	r3, r3, #1
 800d504:	4413      	add	r3, r2
 800d506:	009b      	lsls	r3, r3, #2
 800d508:	440b      	add	r3, r1
 800d50a:	3304      	adds	r3, #4
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d009      	beq.n	800d526 <keyScan+0x56>
            {
                keyStruct[i].trigType = TRIG_SHORT;
 800d512:	79fa      	ldrb	r2, [r7, #7]
 800d514:	4987      	ldr	r1, [pc, #540]	@ (800d734 <keyScan+0x264>)
 800d516:	4613      	mov	r3, r2
 800d518:	005b      	lsls	r3, r3, #1
 800d51a:	4413      	add	r3, r2
 800d51c:	009b      	lsls	r3, r3, #2
 800d51e:	440b      	add	r3, r1
 800d520:	3308      	adds	r3, #8
 800d522:	2201      	movs	r2, #1
 800d524:	701a      	strb	r2, [r3, #0]
            }
            keyStruct[i].trigCnt = 0;
 800d526:	79fa      	ldrb	r2, [r7, #7]
 800d528:	4982      	ldr	r1, [pc, #520]	@ (800d734 <keyScan+0x264>)
 800d52a:	4613      	mov	r3, r2
 800d52c:	005b      	lsls	r3, r3, #1
 800d52e:	4413      	add	r3, r2
 800d530:	009b      	lsls	r3, r3, #2
 800d532:	440b      	add	r3, r1
 800d534:	3304      	adds	r3, #4
 800d536:	2200      	movs	r2, #0
 800d538:	601a      	str	r2, [r3, #0]
            keyStruct[i].preKeyValue = NO_TRIG;
 800d53a:	79fa      	ldrb	r2, [r7, #7]
 800d53c:	497d      	ldr	r1, [pc, #500]	@ (800d734 <keyScan+0x264>)
 800d53e:	4613      	mov	r3, r2
 800d540:	005b      	lsls	r3, r3, #1
 800d542:	4413      	add	r3, r2
 800d544:	009b      	lsls	r3, r3, #2
 800d546:	440b      	add	r3, r1
 800d548:	3309      	adds	r3, #9
 800d54a:	2200      	movs	r2, #0
 800d54c:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < KEY_NUM; i++)
 800d54e:	79fb      	ldrb	r3, [r7, #7]
 800d550:	3301      	adds	r3, #1
 800d552:	71fb      	strb	r3, [r7, #7]
 800d554:	79fb      	ldrb	r3, [r7, #7]
 800d556:	2b03      	cmp	r3, #3
 800d558:	d9c6      	bls.n	800d4e8 <keyScan+0x18>
=======
 800e47a:	f7ff ff79 	bl	800e370 <getKeyFlags>
 800e47e:	6038      	str	r0, [r7, #0]

    if (keyFlags == 0)
 800e480:	683b      	ldr	r3, [r7, #0]
 800e482:	2b00      	cmp	r3, #0
 800e484:	d13b      	bne.n	800e4fe <keyScan+0x8a>
    {
        uchar i;
        for (i = 0; i < KEY_NUM; i++)
 800e486:	2300      	movs	r3, #0
 800e488:	71fb      	strb	r3, [r7, #7]
 800e48a:	e035      	b.n	800e4f8 <keyScan+0x84>
        {
            if (keyStruct[i].keyType == LONG_WITH_SHORT && keyStruct[i].trigCnt > 0)
 800e48c:	79fa      	ldrb	r2, [r7, #7]
 800e48e:	4992      	ldr	r1, [pc, #584]	@ (800e6d8 <keyScan+0x264>)
 800e490:	4613      	mov	r3, r2
 800e492:	005b      	lsls	r3, r3, #1
 800e494:	4413      	add	r3, r2
 800e496:	009b      	lsls	r3, r3, #2
 800e498:	440b      	add	r3, r1
 800e49a:	781b      	ldrb	r3, [r3, #0]
 800e49c:	2b01      	cmp	r3, #1
 800e49e:	d114      	bne.n	800e4ca <keyScan+0x56>
 800e4a0:	79fa      	ldrb	r2, [r7, #7]
 800e4a2:	498d      	ldr	r1, [pc, #564]	@ (800e6d8 <keyScan+0x264>)
 800e4a4:	4613      	mov	r3, r2
 800e4a6:	005b      	lsls	r3, r3, #1
 800e4a8:	4413      	add	r3, r2
 800e4aa:	009b      	lsls	r3, r3, #2
 800e4ac:	440b      	add	r3, r1
 800e4ae:	3304      	adds	r3, #4
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d009      	beq.n	800e4ca <keyScan+0x56>
            {
                keyStruct[i].trigType = TRIG_SHORT;
 800e4b6:	79fa      	ldrb	r2, [r7, #7]
 800e4b8:	4987      	ldr	r1, [pc, #540]	@ (800e6d8 <keyScan+0x264>)
 800e4ba:	4613      	mov	r3, r2
 800e4bc:	005b      	lsls	r3, r3, #1
 800e4be:	4413      	add	r3, r2
 800e4c0:	009b      	lsls	r3, r3, #2
 800e4c2:	440b      	add	r3, r1
 800e4c4:	3308      	adds	r3, #8
 800e4c6:	2201      	movs	r2, #1
 800e4c8:	701a      	strb	r2, [r3, #0]
            }
            keyStruct[i].trigCnt = 0;
 800e4ca:	79fa      	ldrb	r2, [r7, #7]
 800e4cc:	4982      	ldr	r1, [pc, #520]	@ (800e6d8 <keyScan+0x264>)
 800e4ce:	4613      	mov	r3, r2
 800e4d0:	005b      	lsls	r3, r3, #1
 800e4d2:	4413      	add	r3, r2
 800e4d4:	009b      	lsls	r3, r3, #2
 800e4d6:	440b      	add	r3, r1
 800e4d8:	3304      	adds	r3, #4
 800e4da:	2200      	movs	r2, #0
 800e4dc:	601a      	str	r2, [r3, #0]
            keyStruct[i].preKeyValue = NO_TRIG;
 800e4de:	79fa      	ldrb	r2, [r7, #7]
 800e4e0:	497d      	ldr	r1, [pc, #500]	@ (800e6d8 <keyScan+0x264>)
 800e4e2:	4613      	mov	r3, r2
 800e4e4:	005b      	lsls	r3, r3, #1
 800e4e6:	4413      	add	r3, r2
 800e4e8:	009b      	lsls	r3, r3, #2
 800e4ea:	440b      	add	r3, r1
 800e4ec:	3309      	adds	r3, #9
 800e4ee:	2200      	movs	r2, #0
 800e4f0:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < KEY_NUM; i++)
 800e4f2:	79fb      	ldrb	r3, [r7, #7]
 800e4f4:	3301      	adds	r3, #1
 800e4f6:	71fb      	strb	r3, [r7, #7]
 800e4f8:	79fb      	ldrb	r3, [r7, #7]
 800e4fa:	2b03      	cmp	r3, #3
 800e4fc:	d9c6      	bls.n	800e48c <keyScan+0x18>
>>>>>>> f88694781bd54d0bca96bec7ac145bdac62fa329
    //                keyStruct[0].trigType = keyStruct[1].preKeyValue;
    //            }
    //        }
    //    }

    if (keyStruct[1].preKeyValue == NO_TRIG)
<<<<<<< HEAD
 800d55a:	4b76      	ldr	r3, [pc, #472]	@ (800d734 <keyScan+0x264>)
 800d55c:	7d5b      	ldrb	r3, [r3, #21]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d131      	bne.n	800d5c6 <keyScan+0xf6>
    {
        if (keyFlags == K(1))
 800d562:	683b      	ldr	r3, [r7, #0]
 800d564:	2b01      	cmp	r3, #1
 800d566:	d15d      	bne.n	800d624 <keyScan+0x154>
        {
            if (keyStruct[1].preKeyValue == NO_TRIG)
 800d568:	4b72      	ldr	r3, [pc, #456]	@ (800d734 <keyScan+0x264>)
 800d56a:	7d5b      	ldrb	r3, [r3, #21]
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d159      	bne.n	800d624 <keyScan+0x154>
            {
                if (keyStruct[1].keyType == SHORT || keyStruct[1].keyType == CONTINUOUS)
 800d570:	4b70      	ldr	r3, [pc, #448]	@ (800d734 <keyScan+0x264>)
 800d572:	7b1b      	ldrb	r3, [r3, #12]
 800d574:	2b00      	cmp	r3, #0
 800d576:	d003      	beq.n	800d580 <keyScan+0xb0>
 800d578:	4b6e      	ldr	r3, [pc, #440]	@ (800d734 <keyScan+0x264>)
 800d57a:	7b1b      	ldrb	r3, [r3, #12]
 800d57c:	2b02      	cmp	r3, #2
 800d57e:	d106      	bne.n	800d58e <keyScan+0xbe>
                {
                    keyStruct[1].trigType = TRIG_SHORT;
 800d580:	4b6c      	ldr	r3, [pc, #432]	@ (800d734 <keyScan+0x264>)
 800d582:	2201      	movs	r2, #1
 800d584:	751a      	strb	r2, [r3, #20]
                    keyStruct[1].preKeyValue = TRIG_SHORT;
 800d586:	4b6b      	ldr	r3, [pc, #428]	@ (800d734 <keyScan+0x264>)
 800d588:	2201      	movs	r2, #1
 800d58a:	755a      	strb	r2, [r3, #21]
 800d58c:	e04a      	b.n	800d624 <keyScan+0x154>
                }
                else if (keyStruct[1].keyType == LONG_WITH_SHORT || keyStruct[1].keyType == LONG)
 800d58e:	4b69      	ldr	r3, [pc, #420]	@ (800d734 <keyScan+0x264>)
 800d590:	7b1b      	ldrb	r3, [r3, #12]
 800d592:	2b01      	cmp	r3, #1
 800d594:	d003      	beq.n	800d59e <keyScan+0xce>
 800d596:	4b67      	ldr	r3, [pc, #412]	@ (800d734 <keyScan+0x264>)
 800d598:	7b1b      	ldrb	r3, [r3, #12]
 800d59a:	2b03      	cmp	r3, #3
 800d59c:	d142      	bne.n	800d624 <keyScan+0x154>
                {
                    if (++keyStruct[1].trigCnt >= KEY1_LONG_CNT)
 800d59e:	4b65      	ldr	r3, [pc, #404]	@ (800d734 <keyScan+0x264>)
 800d5a0:	691b      	ldr	r3, [r3, #16]
 800d5a2:	3301      	adds	r3, #1
 800d5a4:	4a63      	ldr	r2, [pc, #396]	@ (800d734 <keyScan+0x264>)
 800d5a6:	6113      	str	r3, [r2, #16]
 800d5a8:	4b62      	ldr	r3, [pc, #392]	@ (800d734 <keyScan+0x264>)
 800d5aa:	691b      	ldr	r3, [r3, #16]
 800d5ac:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800d5b0:	d338      	bcc.n	800d624 <keyScan+0x154>
                    {
                        keyStruct[1].trigCnt = 0;
 800d5b2:	4b60      	ldr	r3, [pc, #384]	@ (800d734 <keyScan+0x264>)
 800d5b4:	2200      	movs	r2, #0
 800d5b6:	611a      	str	r2, [r3, #16]
                        keyStruct[1].trigType = TRIG_LONG;
 800d5b8:	4b5e      	ldr	r3, [pc, #376]	@ (800d734 <keyScan+0x264>)
 800d5ba:	2202      	movs	r2, #2
 800d5bc:	751a      	strb	r2, [r3, #20]
                        keyStruct[1].preKeyValue = TRIG_LONG;
 800d5be:	4b5d      	ldr	r3, [pc, #372]	@ (800d734 <keyScan+0x264>)
 800d5c0:	2202      	movs	r2, #2
 800d5c2:	755a      	strb	r2, [r3, #21]
 800d5c4:	e02e      	b.n	800d624 <keyScan+0x154>
=======
 800e4fe:	4b76      	ldr	r3, [pc, #472]	@ (800e6d8 <keyScan+0x264>)
 800e500:	7d5b      	ldrb	r3, [r3, #21]
 800e502:	2b00      	cmp	r3, #0
 800e504:	d131      	bne.n	800e56a <keyScan+0xf6>
    {
        if (keyFlags == K(1))
 800e506:	683b      	ldr	r3, [r7, #0]
 800e508:	2b01      	cmp	r3, #1
 800e50a:	d15d      	bne.n	800e5c8 <keyScan+0x154>
        {
            if (keyStruct[1].preKeyValue == NO_TRIG)
 800e50c:	4b72      	ldr	r3, [pc, #456]	@ (800e6d8 <keyScan+0x264>)
 800e50e:	7d5b      	ldrb	r3, [r3, #21]
 800e510:	2b00      	cmp	r3, #0
 800e512:	d159      	bne.n	800e5c8 <keyScan+0x154>
            {
                if (keyStruct[1].keyType == SHORT || keyStruct[1].keyType == CONTINUOUS)
 800e514:	4b70      	ldr	r3, [pc, #448]	@ (800e6d8 <keyScan+0x264>)
 800e516:	7b1b      	ldrb	r3, [r3, #12]
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d003      	beq.n	800e524 <keyScan+0xb0>
 800e51c:	4b6e      	ldr	r3, [pc, #440]	@ (800e6d8 <keyScan+0x264>)
 800e51e:	7b1b      	ldrb	r3, [r3, #12]
 800e520:	2b02      	cmp	r3, #2
 800e522:	d106      	bne.n	800e532 <keyScan+0xbe>
                {
                    keyStruct[1].trigType = TRIG_SHORT;
 800e524:	4b6c      	ldr	r3, [pc, #432]	@ (800e6d8 <keyScan+0x264>)
 800e526:	2201      	movs	r2, #1
 800e528:	751a      	strb	r2, [r3, #20]
                    keyStruct[1].preKeyValue = TRIG_SHORT;
 800e52a:	4b6b      	ldr	r3, [pc, #428]	@ (800e6d8 <keyScan+0x264>)
 800e52c:	2201      	movs	r2, #1
 800e52e:	755a      	strb	r2, [r3, #21]
 800e530:	e04a      	b.n	800e5c8 <keyScan+0x154>
                }
                else if (keyStruct[1].keyType == LONG_WITH_SHORT || keyStruct[1].keyType == LONG)
 800e532:	4b69      	ldr	r3, [pc, #420]	@ (800e6d8 <keyScan+0x264>)
 800e534:	7b1b      	ldrb	r3, [r3, #12]
 800e536:	2b01      	cmp	r3, #1
 800e538:	d003      	beq.n	800e542 <keyScan+0xce>
 800e53a:	4b67      	ldr	r3, [pc, #412]	@ (800e6d8 <keyScan+0x264>)
 800e53c:	7b1b      	ldrb	r3, [r3, #12]
 800e53e:	2b03      	cmp	r3, #3
 800e540:	d142      	bne.n	800e5c8 <keyScan+0x154>
                {
                    if (++keyStruct[1].trigCnt >= KEY1_LONG_CNT)
 800e542:	4b65      	ldr	r3, [pc, #404]	@ (800e6d8 <keyScan+0x264>)
 800e544:	691b      	ldr	r3, [r3, #16]
 800e546:	3301      	adds	r3, #1
 800e548:	4a63      	ldr	r2, [pc, #396]	@ (800e6d8 <keyScan+0x264>)
 800e54a:	6113      	str	r3, [r2, #16]
 800e54c:	4b62      	ldr	r3, [pc, #392]	@ (800e6d8 <keyScan+0x264>)
 800e54e:	691b      	ldr	r3, [r3, #16]
 800e550:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800e554:	d338      	bcc.n	800e5c8 <keyScan+0x154>
                    {
                        keyStruct[1].trigCnt = 0;
 800e556:	4b60      	ldr	r3, [pc, #384]	@ (800e6d8 <keyScan+0x264>)
 800e558:	2200      	movs	r2, #0
 800e55a:	611a      	str	r2, [r3, #16]
                        keyStruct[1].trigType = TRIG_LONG;
 800e55c:	4b5e      	ldr	r3, [pc, #376]	@ (800e6d8 <keyScan+0x264>)
 800e55e:	2202      	movs	r2, #2
 800e560:	751a      	strb	r2, [r3, #20]
                        keyStruct[1].preKeyValue = TRIG_LONG;
 800e562:	4b5d      	ldr	r3, [pc, #372]	@ (800e6d8 <keyScan+0x264>)
 800e564:	2202      	movs	r2, #2
 800e566:	755a      	strb	r2, [r3, #21]
 800e568:	e02e      	b.n	800e5c8 <keyScan+0x154>
>>>>>>> f88694781bd54d0bca96bec7ac145bdac62fa329
                    }
                }
            }
        }
    }
    else if (keyStruct[1].keyType == CONTINUOUS)
<<<<<<< HEAD
 800d5c6:	4b5b      	ldr	r3, [pc, #364]	@ (800d734 <keyScan+0x264>)
 800d5c8:	7b1b      	ldrb	r3, [r3, #12]
 800d5ca:	2b02      	cmp	r3, #2
 800d5cc:	d12a      	bne.n	800d624 <keyScan+0x154>
    {
        if (keyStruct[1].preKeyValue == TRIG_SHORT) // short key
 800d5ce:	4b59      	ldr	r3, [pc, #356]	@ (800d734 <keyScan+0x264>)
 800d5d0:	7d5b      	ldrb	r3, [r3, #21]
 800d5d2:	2b01      	cmp	r3, #1
 800d5d4:	d112      	bne.n	800d5fc <keyScan+0x12c>
        {
            if (++keyStruct[1].trigCnt >= CONTINUOUS_TRIG_CNT)
 800d5d6:	4b57      	ldr	r3, [pc, #348]	@ (800d734 <keyScan+0x264>)
 800d5d8:	691b      	ldr	r3, [r3, #16]
 800d5da:	3301      	adds	r3, #1
 800d5dc:	4a55      	ldr	r2, [pc, #340]	@ (800d734 <keyScan+0x264>)
 800d5de:	6113      	str	r3, [r2, #16]
 800d5e0:	4b54      	ldr	r3, [pc, #336]	@ (800d734 <keyScan+0x264>)
 800d5e2:	691b      	ldr	r3, [r3, #16]
 800d5e4:	2b63      	cmp	r3, #99	@ 0x63
 800d5e6:	d91d      	bls.n	800d624 <keyScan+0x154>
            {
                keyStruct[1].trigCnt = 0;
 800d5e8:	4b52      	ldr	r3, [pc, #328]	@ (800d734 <keyScan+0x264>)
 800d5ea:	2200      	movs	r2, #0
 800d5ec:	611a      	str	r2, [r3, #16]
                keyStruct[1].trigType = TRIG_LONG; // long
 800d5ee:	4b51      	ldr	r3, [pc, #324]	@ (800d734 <keyScan+0x264>)
 800d5f0:	2202      	movs	r2, #2
 800d5f2:	751a      	strb	r2, [r3, #20]
                keyStruct[1].preKeyValue = TRIG_LONG;
 800d5f4:	4b4f      	ldr	r3, [pc, #316]	@ (800d734 <keyScan+0x264>)
 800d5f6:	2202      	movs	r2, #2
 800d5f8:	755a      	strb	r2, [r3, #21]
 800d5fa:	e013      	b.n	800d624 <keyScan+0x154>
            }
        }
        else if (keyStruct[1].preKeyValue == TRIG_LONG) // long key
 800d5fc:	4b4d      	ldr	r3, [pc, #308]	@ (800d734 <keyScan+0x264>)
 800d5fe:	7d5b      	ldrb	r3, [r3, #21]
 800d600:	2b02      	cmp	r3, #2
 800d602:	d10f      	bne.n	800d624 <keyScan+0x154>
        {
            if (++keyStruct[1].trigCnt >= CONTINUOUS_INTEVAL)
 800d604:	4b4b      	ldr	r3, [pc, #300]	@ (800d734 <keyScan+0x264>)
 800d606:	691b      	ldr	r3, [r3, #16]
 800d608:	3301      	adds	r3, #1
 800d60a:	4a4a      	ldr	r2, [pc, #296]	@ (800d734 <keyScan+0x264>)
 800d60c:	6113      	str	r3, [r2, #16]
 800d60e:	4b49      	ldr	r3, [pc, #292]	@ (800d734 <keyScan+0x264>)
 800d610:	691b      	ldr	r3, [r3, #16]
 800d612:	2b27      	cmp	r3, #39	@ 0x27
 800d614:	d906      	bls.n	800d624 <keyScan+0x154>
            {
                keyStruct[1].trigCnt = 0;
 800d616:	4b47      	ldr	r3, [pc, #284]	@ (800d734 <keyScan+0x264>)
 800d618:	2200      	movs	r2, #0
 800d61a:	611a      	str	r2, [r3, #16]
                keyStruct[1].trigType = keyStruct[1].preKeyValue;
 800d61c:	4b45      	ldr	r3, [pc, #276]	@ (800d734 <keyScan+0x264>)
 800d61e:	7d5a      	ldrb	r2, [r3, #21]
 800d620:	4b44      	ldr	r3, [pc, #272]	@ (800d734 <keyScan+0x264>)
 800d622:	751a      	strb	r2, [r3, #20]
=======
 800e56a:	4b5b      	ldr	r3, [pc, #364]	@ (800e6d8 <keyScan+0x264>)
 800e56c:	7b1b      	ldrb	r3, [r3, #12]
 800e56e:	2b02      	cmp	r3, #2
 800e570:	d12a      	bne.n	800e5c8 <keyScan+0x154>
    {
        if (keyStruct[1].preKeyValue == TRIG_SHORT) // short key
 800e572:	4b59      	ldr	r3, [pc, #356]	@ (800e6d8 <keyScan+0x264>)
 800e574:	7d5b      	ldrb	r3, [r3, #21]
 800e576:	2b01      	cmp	r3, #1
 800e578:	d112      	bne.n	800e5a0 <keyScan+0x12c>
        {
            if (++keyStruct[1].trigCnt >= CONTINUOUS_TRIG_CNT)
 800e57a:	4b57      	ldr	r3, [pc, #348]	@ (800e6d8 <keyScan+0x264>)
 800e57c:	691b      	ldr	r3, [r3, #16]
 800e57e:	3301      	adds	r3, #1
 800e580:	4a55      	ldr	r2, [pc, #340]	@ (800e6d8 <keyScan+0x264>)
 800e582:	6113      	str	r3, [r2, #16]
 800e584:	4b54      	ldr	r3, [pc, #336]	@ (800e6d8 <keyScan+0x264>)
 800e586:	691b      	ldr	r3, [r3, #16]
 800e588:	2b63      	cmp	r3, #99	@ 0x63
 800e58a:	d91d      	bls.n	800e5c8 <keyScan+0x154>
            {
                keyStruct[1].trigCnt = 0;
 800e58c:	4b52      	ldr	r3, [pc, #328]	@ (800e6d8 <keyScan+0x264>)
 800e58e:	2200      	movs	r2, #0
 800e590:	611a      	str	r2, [r3, #16]
                keyStruct[1].trigType = TRIG_LONG; // long
 800e592:	4b51      	ldr	r3, [pc, #324]	@ (800e6d8 <keyScan+0x264>)
 800e594:	2202      	movs	r2, #2
 800e596:	751a      	strb	r2, [r3, #20]
                keyStruct[1].preKeyValue = TRIG_LONG;
 800e598:	4b4f      	ldr	r3, [pc, #316]	@ (800e6d8 <keyScan+0x264>)
 800e59a:	2202      	movs	r2, #2
 800e59c:	755a      	strb	r2, [r3, #21]
 800e59e:	e013      	b.n	800e5c8 <keyScan+0x154>
            }
        }
        else if (keyStruct[1].preKeyValue == TRIG_LONG) // long key
 800e5a0:	4b4d      	ldr	r3, [pc, #308]	@ (800e6d8 <keyScan+0x264>)
 800e5a2:	7d5b      	ldrb	r3, [r3, #21]
 800e5a4:	2b02      	cmp	r3, #2
 800e5a6:	d10f      	bne.n	800e5c8 <keyScan+0x154>
        {
            if (++keyStruct[1].trigCnt >= CONTINUOUS_INTEVAL)
 800e5a8:	4b4b      	ldr	r3, [pc, #300]	@ (800e6d8 <keyScan+0x264>)
 800e5aa:	691b      	ldr	r3, [r3, #16]
 800e5ac:	3301      	adds	r3, #1
 800e5ae:	4a4a      	ldr	r2, [pc, #296]	@ (800e6d8 <keyScan+0x264>)
 800e5b0:	6113      	str	r3, [r2, #16]
 800e5b2:	4b49      	ldr	r3, [pc, #292]	@ (800e6d8 <keyScan+0x264>)
 800e5b4:	691b      	ldr	r3, [r3, #16]
 800e5b6:	2b27      	cmp	r3, #39	@ 0x27
 800e5b8:	d906      	bls.n	800e5c8 <keyScan+0x154>
            {
                keyStruct[1].trigCnt = 0;
 800e5ba:	4b47      	ldr	r3, [pc, #284]	@ (800e6d8 <keyScan+0x264>)
 800e5bc:	2200      	movs	r2, #0
 800e5be:	611a      	str	r2, [r3, #16]
                keyStruct[1].trigType = keyStruct[1].preKeyValue;
 800e5c0:	4b45      	ldr	r3, [pc, #276]	@ (800e6d8 <keyScan+0x264>)
 800e5c2:	7d5a      	ldrb	r2, [r3, #21]
 800e5c4:	4b44      	ldr	r3, [pc, #272]	@ (800e6d8 <keyScan+0x264>)
 800e5c6:	751a      	strb	r2, [r3, #20]
>>>>>>> f88694781bd54d0bca96bec7ac145bdac62fa329
            }
        }
    }

    if (keyStruct[2].preKeyValue == NO_TRIG)
<<<<<<< HEAD
 800d624:	4b43      	ldr	r3, [pc, #268]	@ (800d734 <keyScan+0x264>)
 800d626:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d131      	bne.n	800d692 <keyScan+0x1c2>
    {
        if (keyFlags == K(2))
 800d62e:	683b      	ldr	r3, [r7, #0]
 800d630:	2b02      	cmp	r3, #2
 800d632:	d163      	bne.n	800d6fc <keyScan+0x22c>
        {

            if (keyStruct[2].keyType == SHORT || keyStruct[2].keyType == CONTINUOUS)
 800d634:	4b3f      	ldr	r3, [pc, #252]	@ (800d734 <keyScan+0x264>)
 800d636:	7e1b      	ldrb	r3, [r3, #24]
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d003      	beq.n	800d644 <keyScan+0x174>
 800d63c:	4b3d      	ldr	r3, [pc, #244]	@ (800d734 <keyScan+0x264>)
 800d63e:	7e1b      	ldrb	r3, [r3, #24]
 800d640:	2b02      	cmp	r3, #2
 800d642:	d108      	bne.n	800d656 <keyScan+0x186>
            {
                keyStruct[2].trigType = TRIG_SHORT;
 800d644:	4b3b      	ldr	r3, [pc, #236]	@ (800d734 <keyScan+0x264>)
 800d646:	2201      	movs	r2, #1
 800d648:	f883 2020 	strb.w	r2, [r3, #32]
                keyStruct[2].preKeyValue = TRIG_SHORT;
 800d64c:	4b39      	ldr	r3, [pc, #228]	@ (800d734 <keyScan+0x264>)
 800d64e:	2201      	movs	r2, #1
 800d650:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 800d654:	e052      	b.n	800d6fc <keyScan+0x22c>
            }
            else if (keyStruct[2].keyType == LONG_WITH_SHORT || keyStruct[2].keyType == LONG)
 800d656:	4b37      	ldr	r3, [pc, #220]	@ (800d734 <keyScan+0x264>)
 800d658:	7e1b      	ldrb	r3, [r3, #24]
 800d65a:	2b01      	cmp	r3, #1
 800d65c:	d003      	beq.n	800d666 <keyScan+0x196>
 800d65e:	4b35      	ldr	r3, [pc, #212]	@ (800d734 <keyScan+0x264>)
 800d660:	7e1b      	ldrb	r3, [r3, #24]
 800d662:	2b03      	cmp	r3, #3
 800d664:	d14a      	bne.n	800d6fc <keyScan+0x22c>
            {
                if (++keyStruct[2].trigCnt >= KEY2_LONG_CNT)
 800d666:	4b33      	ldr	r3, [pc, #204]	@ (800d734 <keyScan+0x264>)
 800d668:	69db      	ldr	r3, [r3, #28]
 800d66a:	3301      	adds	r3, #1
 800d66c:	4a31      	ldr	r2, [pc, #196]	@ (800d734 <keyScan+0x264>)
 800d66e:	61d3      	str	r3, [r2, #28]
 800d670:	4b30      	ldr	r3, [pc, #192]	@ (800d734 <keyScan+0x264>)
 800d672:	69db      	ldr	r3, [r3, #28]
 800d674:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800d678:	d340      	bcc.n	800d6fc <keyScan+0x22c>
                {
                    keyStruct[2].trigCnt = 0;
 800d67a:	4b2e      	ldr	r3, [pc, #184]	@ (800d734 <keyScan+0x264>)
 800d67c:	2200      	movs	r2, #0
 800d67e:	61da      	str	r2, [r3, #28]
                    keyStruct[2].trigType = TRIG_LONG;
 800d680:	4b2c      	ldr	r3, [pc, #176]	@ (800d734 <keyScan+0x264>)
 800d682:	2202      	movs	r2, #2
 800d684:	f883 2020 	strb.w	r2, [r3, #32]
                    keyStruct[2].preKeyValue = TRIG_LONG;
 800d688:	4b2a      	ldr	r3, [pc, #168]	@ (800d734 <keyScan+0x264>)
 800d68a:	2202      	movs	r2, #2
 800d68c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 800d690:	e034      	b.n	800d6fc <keyScan+0x22c>
=======
 800e5c8:	4b43      	ldr	r3, [pc, #268]	@ (800e6d8 <keyScan+0x264>)
 800e5ca:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d131      	bne.n	800e636 <keyScan+0x1c2>
    {
        if (keyFlags == K(2))
 800e5d2:	683b      	ldr	r3, [r7, #0]
 800e5d4:	2b02      	cmp	r3, #2
 800e5d6:	d163      	bne.n	800e6a0 <keyScan+0x22c>
        {

            if (keyStruct[2].keyType == SHORT || keyStruct[2].keyType == CONTINUOUS)
 800e5d8:	4b3f      	ldr	r3, [pc, #252]	@ (800e6d8 <keyScan+0x264>)
 800e5da:	7e1b      	ldrb	r3, [r3, #24]
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d003      	beq.n	800e5e8 <keyScan+0x174>
 800e5e0:	4b3d      	ldr	r3, [pc, #244]	@ (800e6d8 <keyScan+0x264>)
 800e5e2:	7e1b      	ldrb	r3, [r3, #24]
 800e5e4:	2b02      	cmp	r3, #2
 800e5e6:	d108      	bne.n	800e5fa <keyScan+0x186>
            {
                keyStruct[2].trigType = TRIG_SHORT;
 800e5e8:	4b3b      	ldr	r3, [pc, #236]	@ (800e6d8 <keyScan+0x264>)
 800e5ea:	2201      	movs	r2, #1
 800e5ec:	f883 2020 	strb.w	r2, [r3, #32]
                keyStruct[2].preKeyValue = TRIG_SHORT;
 800e5f0:	4b39      	ldr	r3, [pc, #228]	@ (800e6d8 <keyScan+0x264>)
 800e5f2:	2201      	movs	r2, #1
 800e5f4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 800e5f8:	e052      	b.n	800e6a0 <keyScan+0x22c>
            }
            else if (keyStruct[2].keyType == LONG_WITH_SHORT || keyStruct[2].keyType == LONG)
 800e5fa:	4b37      	ldr	r3, [pc, #220]	@ (800e6d8 <keyScan+0x264>)
 800e5fc:	7e1b      	ldrb	r3, [r3, #24]
 800e5fe:	2b01      	cmp	r3, #1
 800e600:	d003      	beq.n	800e60a <keyScan+0x196>
 800e602:	4b35      	ldr	r3, [pc, #212]	@ (800e6d8 <keyScan+0x264>)
 800e604:	7e1b      	ldrb	r3, [r3, #24]
 800e606:	2b03      	cmp	r3, #3
 800e608:	d14a      	bne.n	800e6a0 <keyScan+0x22c>
            {
                if (++keyStruct[2].trigCnt >= KEY2_LONG_CNT)
 800e60a:	4b33      	ldr	r3, [pc, #204]	@ (800e6d8 <keyScan+0x264>)
 800e60c:	69db      	ldr	r3, [r3, #28]
 800e60e:	3301      	adds	r3, #1
 800e610:	4a31      	ldr	r2, [pc, #196]	@ (800e6d8 <keyScan+0x264>)
 800e612:	61d3      	str	r3, [r2, #28]
 800e614:	4b30      	ldr	r3, [pc, #192]	@ (800e6d8 <keyScan+0x264>)
 800e616:	69db      	ldr	r3, [r3, #28]
 800e618:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800e61c:	d340      	bcc.n	800e6a0 <keyScan+0x22c>
                {
                    keyStruct[2].trigCnt = 0;
 800e61e:	4b2e      	ldr	r3, [pc, #184]	@ (800e6d8 <keyScan+0x264>)
 800e620:	2200      	movs	r2, #0
 800e622:	61da      	str	r2, [r3, #28]
                    keyStruct[2].trigType = TRIG_LONG;
 800e624:	4b2c      	ldr	r3, [pc, #176]	@ (800e6d8 <keyScan+0x264>)
 800e626:	2202      	movs	r2, #2
 800e628:	f883 2020 	strb.w	r2, [r3, #32]
                    keyStruct[2].preKeyValue = TRIG_LONG;
 800e62c:	4b2a      	ldr	r3, [pc, #168]	@ (800e6d8 <keyScan+0x264>)
 800e62e:	2202      	movs	r2, #2
 800e630:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 800e634:	e034      	b.n	800e6a0 <keyScan+0x22c>
>>>>>>> f88694781bd54d0bca96bec7ac145bdac62fa329
                }
            }
        }
    }
    else if (keyStruct[2].keyType == CONTINUOUS)
<<<<<<< HEAD
 800d692:	4b28      	ldr	r3, [pc, #160]	@ (800d734 <keyScan+0x264>)
 800d694:	7e1b      	ldrb	r3, [r3, #24]
 800d696:	2b02      	cmp	r3, #2
 800d698:	d130      	bne.n	800d6fc <keyScan+0x22c>
    {
        if (keyStruct[2].preKeyValue == TRIG_SHORT) // short key
 800d69a:	4b26      	ldr	r3, [pc, #152]	@ (800d734 <keyScan+0x264>)
 800d69c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800d6a0:	2b01      	cmp	r3, #1
 800d6a2:	d114      	bne.n	800d6ce <keyScan+0x1fe>
        {
            if (++keyStruct[2].trigCnt >= CONTINUOUS_TRIG_CNT)
 800d6a4:	4b23      	ldr	r3, [pc, #140]	@ (800d734 <keyScan+0x264>)
 800d6a6:	69db      	ldr	r3, [r3, #28]
 800d6a8:	3301      	adds	r3, #1
 800d6aa:	4a22      	ldr	r2, [pc, #136]	@ (800d734 <keyScan+0x264>)
 800d6ac:	61d3      	str	r3, [r2, #28]
 800d6ae:	4b21      	ldr	r3, [pc, #132]	@ (800d734 <keyScan+0x264>)
 800d6b0:	69db      	ldr	r3, [r3, #28]
 800d6b2:	2b63      	cmp	r3, #99	@ 0x63
 800d6b4:	d922      	bls.n	800d6fc <keyScan+0x22c>
            {
                keyStruct[2].trigCnt = 0;
 800d6b6:	4b1f      	ldr	r3, [pc, #124]	@ (800d734 <keyScan+0x264>)
 800d6b8:	2200      	movs	r2, #0
 800d6ba:	61da      	str	r2, [r3, #28]
                keyStruct[2].trigType = TRIG_LONG; // long
 800d6bc:	4b1d      	ldr	r3, [pc, #116]	@ (800d734 <keyScan+0x264>)
 800d6be:	2202      	movs	r2, #2
 800d6c0:	f883 2020 	strb.w	r2, [r3, #32]
                keyStruct[2].preKeyValue = TRIG_LONG;
 800d6c4:	4b1b      	ldr	r3, [pc, #108]	@ (800d734 <keyScan+0x264>)
 800d6c6:	2202      	movs	r2, #2
 800d6c8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 800d6cc:	e016      	b.n	800d6fc <keyScan+0x22c>
            }
        }
        else if (keyStruct[2].preKeyValue == TRIG_LONG) // long key
 800d6ce:	4b19      	ldr	r3, [pc, #100]	@ (800d734 <keyScan+0x264>)
 800d6d0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800d6d4:	2b02      	cmp	r3, #2
 800d6d6:	d111      	bne.n	800d6fc <keyScan+0x22c>
        {
            if (++keyStruct[2].trigCnt >= CONTINUOUS_INTEVAL)
 800d6d8:	4b16      	ldr	r3, [pc, #88]	@ (800d734 <keyScan+0x264>)
 800d6da:	69db      	ldr	r3, [r3, #28]
 800d6dc:	3301      	adds	r3, #1
 800d6de:	4a15      	ldr	r2, [pc, #84]	@ (800d734 <keyScan+0x264>)
 800d6e0:	61d3      	str	r3, [r2, #28]
 800d6e2:	4b14      	ldr	r3, [pc, #80]	@ (800d734 <keyScan+0x264>)
 800d6e4:	69db      	ldr	r3, [r3, #28]
 800d6e6:	2b27      	cmp	r3, #39	@ 0x27
 800d6e8:	d908      	bls.n	800d6fc <keyScan+0x22c>
            {
                keyStruct[2].trigCnt = 0;
 800d6ea:	4b12      	ldr	r3, [pc, #72]	@ (800d734 <keyScan+0x264>)
 800d6ec:	2200      	movs	r2, #0
 800d6ee:	61da      	str	r2, [r3, #28]
                keyStruct[2].trigType = keyStruct[2].preKeyValue;
 800d6f0:	4b10      	ldr	r3, [pc, #64]	@ (800d734 <keyScan+0x264>)
 800d6f2:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 800d6f6:	4b0f      	ldr	r3, [pc, #60]	@ (800d734 <keyScan+0x264>)
 800d6f8:	f883 2020 	strb.w	r2, [r3, #32]
=======
 800e636:	4b28      	ldr	r3, [pc, #160]	@ (800e6d8 <keyScan+0x264>)
 800e638:	7e1b      	ldrb	r3, [r3, #24]
 800e63a:	2b02      	cmp	r3, #2
 800e63c:	d130      	bne.n	800e6a0 <keyScan+0x22c>
    {
        if (keyStruct[2].preKeyValue == TRIG_SHORT) // short key
 800e63e:	4b26      	ldr	r3, [pc, #152]	@ (800e6d8 <keyScan+0x264>)
 800e640:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800e644:	2b01      	cmp	r3, #1
 800e646:	d114      	bne.n	800e672 <keyScan+0x1fe>
        {
            if (++keyStruct[2].trigCnt >= CONTINUOUS_TRIG_CNT)
 800e648:	4b23      	ldr	r3, [pc, #140]	@ (800e6d8 <keyScan+0x264>)
 800e64a:	69db      	ldr	r3, [r3, #28]
 800e64c:	3301      	adds	r3, #1
 800e64e:	4a22      	ldr	r2, [pc, #136]	@ (800e6d8 <keyScan+0x264>)
 800e650:	61d3      	str	r3, [r2, #28]
 800e652:	4b21      	ldr	r3, [pc, #132]	@ (800e6d8 <keyScan+0x264>)
 800e654:	69db      	ldr	r3, [r3, #28]
 800e656:	2b63      	cmp	r3, #99	@ 0x63
 800e658:	d922      	bls.n	800e6a0 <keyScan+0x22c>
            {
                keyStruct[2].trigCnt = 0;
 800e65a:	4b1f      	ldr	r3, [pc, #124]	@ (800e6d8 <keyScan+0x264>)
 800e65c:	2200      	movs	r2, #0
 800e65e:	61da      	str	r2, [r3, #28]
                keyStruct[2].trigType = TRIG_LONG; // long
 800e660:	4b1d      	ldr	r3, [pc, #116]	@ (800e6d8 <keyScan+0x264>)
 800e662:	2202      	movs	r2, #2
 800e664:	f883 2020 	strb.w	r2, [r3, #32]
                keyStruct[2].preKeyValue = TRIG_LONG;
 800e668:	4b1b      	ldr	r3, [pc, #108]	@ (800e6d8 <keyScan+0x264>)
 800e66a:	2202      	movs	r2, #2
 800e66c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 800e670:	e016      	b.n	800e6a0 <keyScan+0x22c>
            }
        }
        else if (keyStruct[2].preKeyValue == TRIG_LONG) // long key
 800e672:	4b19      	ldr	r3, [pc, #100]	@ (800e6d8 <keyScan+0x264>)
 800e674:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800e678:	2b02      	cmp	r3, #2
 800e67a:	d111      	bne.n	800e6a0 <keyScan+0x22c>
        {
            if (++keyStruct[2].trigCnt >= CONTINUOUS_INTEVAL)
 800e67c:	4b16      	ldr	r3, [pc, #88]	@ (800e6d8 <keyScan+0x264>)
 800e67e:	69db      	ldr	r3, [r3, #28]
 800e680:	3301      	adds	r3, #1
 800e682:	4a15      	ldr	r2, [pc, #84]	@ (800e6d8 <keyScan+0x264>)
 800e684:	61d3      	str	r3, [r2, #28]
 800e686:	4b14      	ldr	r3, [pc, #80]	@ (800e6d8 <keyScan+0x264>)
 800e688:	69db      	ldr	r3, [r3, #28]
 800e68a:	2b27      	cmp	r3, #39	@ 0x27
 800e68c:	d908      	bls.n	800e6a0 <keyScan+0x22c>
            {
                keyStruct[2].trigCnt = 0;
 800e68e:	4b12      	ldr	r3, [pc, #72]	@ (800e6d8 <keyScan+0x264>)
 800e690:	2200      	movs	r2, #0
 800e692:	61da      	str	r2, [r3, #28]
                keyStruct[2].trigType = keyStruct[2].preKeyValue;
 800e694:	4b10      	ldr	r3, [pc, #64]	@ (800e6d8 <keyScan+0x264>)
 800e696:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 800e69a:	4b0f      	ldr	r3, [pc, #60]	@ (800e6d8 <keyScan+0x264>)
 800e69c:	f883 2020 	strb.w	r2, [r3, #32]
>>>>>>> f88694781bd54d0bca96bec7ac145bdac62fa329
            }
        }
    }

    if (keyStruct[3].preKeyValue == NO_TRIG)
<<<<<<< HEAD
 800d6fc:	4b0d      	ldr	r3, [pc, #52]	@ (800d734 <keyScan+0x264>)
 800d6fe:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d702:	2b00      	cmp	r3, #0
 800d704:	d137      	bne.n	800d776 <keyScan+0x2a6>
    {
        if (keyFlags == K(3))
 800d706:	683b      	ldr	r3, [r7, #0]
 800d708:	2b04      	cmp	r3, #4
 800d70a:	d16a      	bne.n	800d7e2 <keyScan+0x312>
        {
            if (keyStruct[3].keyType == SHORT || keyStruct[3].keyType == CONTINUOUS)
 800d70c:	4b09      	ldr	r3, [pc, #36]	@ (800d734 <keyScan+0x264>)
 800d70e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800d712:	2b00      	cmp	r3, #0
 800d714:	d004      	beq.n	800d720 <keyScan+0x250>
 800d716:	4b07      	ldr	r3, [pc, #28]	@ (800d734 <keyScan+0x264>)
 800d718:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800d71c:	2b02      	cmp	r3, #2
 800d71e:	d10b      	bne.n	800d738 <keyScan+0x268>
            {
                keyStruct[3].trigType = TRIG_SHORT;
 800d720:	4b04      	ldr	r3, [pc, #16]	@ (800d734 <keyScan+0x264>)
 800d722:	2201      	movs	r2, #1
 800d724:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
                keyStruct[3].preKeyValue = TRIG_SHORT;
 800d728:	4b02      	ldr	r3, [pc, #8]	@ (800d734 <keyScan+0x264>)
 800d72a:	2201      	movs	r2, #1
 800d72c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
=======
 800e6a0:	4b0d      	ldr	r3, [pc, #52]	@ (800e6d8 <keyScan+0x264>)
 800e6a2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d137      	bne.n	800e71a <keyScan+0x2a6>
    {
        if (keyFlags == K(3))
 800e6aa:	683b      	ldr	r3, [r7, #0]
 800e6ac:	2b04      	cmp	r3, #4
 800e6ae:	d16a      	bne.n	800e786 <keyScan+0x312>
        {
            if (keyStruct[3].keyType == SHORT || keyStruct[3].keyType == CONTINUOUS)
 800e6b0:	4b09      	ldr	r3, [pc, #36]	@ (800e6d8 <keyScan+0x264>)
 800e6b2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d004      	beq.n	800e6c4 <keyScan+0x250>
 800e6ba:	4b07      	ldr	r3, [pc, #28]	@ (800e6d8 <keyScan+0x264>)
 800e6bc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800e6c0:	2b02      	cmp	r3, #2
 800e6c2:	d10b      	bne.n	800e6dc <keyScan+0x268>
            {
                keyStruct[3].trigType = TRIG_SHORT;
 800e6c4:	4b04      	ldr	r3, [pc, #16]	@ (800e6d8 <keyScan+0x264>)
 800e6c6:	2201      	movs	r2, #1
 800e6c8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
                keyStruct[3].preKeyValue = TRIG_SHORT;
 800e6cc:	4b02      	ldr	r3, [pc, #8]	@ (800e6d8 <keyScan+0x264>)
 800e6ce:	2201      	movs	r2, #1
 800e6d0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
>>>>>>> f88694781bd54d0bca96bec7ac145bdac62fa329
                keyStruct[3].trigCnt = 0;
                keyStruct[3].trigType = keyStruct[3].preKeyValue;
            }
        }
    }
}
<<<<<<< HEAD
 800d730:	e057      	b.n	800d7e2 <keyScan+0x312>
 800d732:	bf00      	nop
 800d734:	2000090c 	.word	0x2000090c
            else if (keyStruct[3].keyType == LONG_WITH_SHORT || keyStruct[3].keyType == LONG)
 800d738:	4b2c      	ldr	r3, [pc, #176]	@ (800d7ec <keyScan+0x31c>)
 800d73a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800d73e:	2b01      	cmp	r3, #1
 800d740:	d004      	beq.n	800d74c <keyScan+0x27c>
 800d742:	4b2a      	ldr	r3, [pc, #168]	@ (800d7ec <keyScan+0x31c>)
 800d744:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800d748:	2b03      	cmp	r3, #3
 800d74a:	d14a      	bne.n	800d7e2 <keyScan+0x312>
                if (++keyStruct[3].trigCnt >= KEY3_LONG_CNT)
 800d74c:	4b27      	ldr	r3, [pc, #156]	@ (800d7ec <keyScan+0x31c>)
 800d74e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d750:	3301      	adds	r3, #1
 800d752:	4a26      	ldr	r2, [pc, #152]	@ (800d7ec <keyScan+0x31c>)
 800d754:	6293      	str	r3, [r2, #40]	@ 0x28
 800d756:	4b25      	ldr	r3, [pc, #148]	@ (800d7ec <keyScan+0x31c>)
 800d758:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d041      	beq.n	800d7e2 <keyScan+0x312>
                    keyStruct[3].trigCnt = 0;
 800d75e:	4b23      	ldr	r3, [pc, #140]	@ (800d7ec <keyScan+0x31c>)
 800d760:	2200      	movs	r2, #0
 800d762:	629a      	str	r2, [r3, #40]	@ 0x28
                    keyStruct[3].trigType = TRIG_LONG;
 800d764:	4b21      	ldr	r3, [pc, #132]	@ (800d7ec <keyScan+0x31c>)
 800d766:	2202      	movs	r2, #2
 800d768:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
                    keyStruct[3].preKeyValue = TRIG_LONG;
 800d76c:	4b1f      	ldr	r3, [pc, #124]	@ (800d7ec <keyScan+0x31c>)
 800d76e:	2202      	movs	r2, #2
 800d770:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 800d774:	e035      	b.n	800d7e2 <keyScan+0x312>
    else if (keyStruct[3].keyType == CONTINUOUS)
 800d776:	4b1d      	ldr	r3, [pc, #116]	@ (800d7ec <keyScan+0x31c>)
 800d778:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800d77c:	2b02      	cmp	r3, #2
 800d77e:	d130      	bne.n	800d7e2 <keyScan+0x312>
        if (keyStruct[3].preKeyValue == TRIG_SHORT) // short key
 800d780:	4b1a      	ldr	r3, [pc, #104]	@ (800d7ec <keyScan+0x31c>)
 800d782:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d786:	2b01      	cmp	r3, #1
 800d788:	d114      	bne.n	800d7b4 <keyScan+0x2e4>
            if (++keyStruct[3].trigCnt >= CONTINUOUS_TRIG_CNT)
 800d78a:	4b18      	ldr	r3, [pc, #96]	@ (800d7ec <keyScan+0x31c>)
 800d78c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d78e:	3301      	adds	r3, #1
 800d790:	4a16      	ldr	r2, [pc, #88]	@ (800d7ec <keyScan+0x31c>)
 800d792:	6293      	str	r3, [r2, #40]	@ 0x28
 800d794:	4b15      	ldr	r3, [pc, #84]	@ (800d7ec <keyScan+0x31c>)
 800d796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d798:	2b63      	cmp	r3, #99	@ 0x63
 800d79a:	d922      	bls.n	800d7e2 <keyScan+0x312>
                keyStruct[3].trigCnt = 0;
 800d79c:	4b13      	ldr	r3, [pc, #76]	@ (800d7ec <keyScan+0x31c>)
 800d79e:	2200      	movs	r2, #0
 800d7a0:	629a      	str	r2, [r3, #40]	@ 0x28
                keyStruct[3].trigType = TRIG_LONG; // long
 800d7a2:	4b12      	ldr	r3, [pc, #72]	@ (800d7ec <keyScan+0x31c>)
 800d7a4:	2202      	movs	r2, #2
 800d7a6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
                keyStruct[3].preKeyValue = TRIG_LONG;
 800d7aa:	4b10      	ldr	r3, [pc, #64]	@ (800d7ec <keyScan+0x31c>)
 800d7ac:	2202      	movs	r2, #2
 800d7ae:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 800d7b2:	e016      	b.n	800d7e2 <keyScan+0x312>
        else if (keyStruct[3].preKeyValue == TRIG_LONG) // long key
 800d7b4:	4b0d      	ldr	r3, [pc, #52]	@ (800d7ec <keyScan+0x31c>)
 800d7b6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d7ba:	2b02      	cmp	r3, #2
 800d7bc:	d111      	bne.n	800d7e2 <keyScan+0x312>
            if (++keyStruct[3].trigCnt >= CONTINUOUS_INTEVAL)
 800d7be:	4b0b      	ldr	r3, [pc, #44]	@ (800d7ec <keyScan+0x31c>)
 800d7c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d7c2:	3301      	adds	r3, #1
 800d7c4:	4a09      	ldr	r2, [pc, #36]	@ (800d7ec <keyScan+0x31c>)
 800d7c6:	6293      	str	r3, [r2, #40]	@ 0x28
 800d7c8:	4b08      	ldr	r3, [pc, #32]	@ (800d7ec <keyScan+0x31c>)
 800d7ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d7cc:	2b27      	cmp	r3, #39	@ 0x27
 800d7ce:	d908      	bls.n	800d7e2 <keyScan+0x312>
                keyStruct[3].trigCnt = 0;
 800d7d0:	4b06      	ldr	r3, [pc, #24]	@ (800d7ec <keyScan+0x31c>)
 800d7d2:	2200      	movs	r2, #0
 800d7d4:	629a      	str	r2, [r3, #40]	@ 0x28
                keyStruct[3].trigType = keyStruct[3].preKeyValue;
 800d7d6:	4b05      	ldr	r3, [pc, #20]	@ (800d7ec <keyScan+0x31c>)
 800d7d8:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 800d7dc:	4b03      	ldr	r3, [pc, #12]	@ (800d7ec <keyScan+0x31c>)
 800d7de:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
}
 800d7e2:	bf00      	nop
 800d7e4:	3708      	adds	r7, #8
 800d7e6:	46bd      	mov	sp, r7
 800d7e8:	bd80      	pop	{r7, pc}
 800d7ea:	bf00      	nop
 800d7ec:	2000090c 	.word	0x2000090c

0800d7f0 <getKeyState>:
=======
 800e6d4:	e057      	b.n	800e786 <keyScan+0x312>
 800e6d6:	bf00      	nop
 800e6d8:	20000960 	.word	0x20000960
            else if (keyStruct[3].keyType == LONG_WITH_SHORT || keyStruct[3].keyType == LONG)
 800e6dc:	4b2c      	ldr	r3, [pc, #176]	@ (800e790 <keyScan+0x31c>)
 800e6de:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800e6e2:	2b01      	cmp	r3, #1
 800e6e4:	d004      	beq.n	800e6f0 <keyScan+0x27c>
 800e6e6:	4b2a      	ldr	r3, [pc, #168]	@ (800e790 <keyScan+0x31c>)
 800e6e8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800e6ec:	2b03      	cmp	r3, #3
 800e6ee:	d14a      	bne.n	800e786 <keyScan+0x312>
                if (++keyStruct[3].trigCnt >= KEY3_LONG_CNT)
 800e6f0:	4b27      	ldr	r3, [pc, #156]	@ (800e790 <keyScan+0x31c>)
 800e6f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e6f4:	3301      	adds	r3, #1
 800e6f6:	4a26      	ldr	r2, [pc, #152]	@ (800e790 <keyScan+0x31c>)
 800e6f8:	6293      	str	r3, [r2, #40]	@ 0x28
 800e6fa:	4b25      	ldr	r3, [pc, #148]	@ (800e790 <keyScan+0x31c>)
 800e6fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d041      	beq.n	800e786 <keyScan+0x312>
                    keyStruct[3].trigCnt = 0;
 800e702:	4b23      	ldr	r3, [pc, #140]	@ (800e790 <keyScan+0x31c>)
 800e704:	2200      	movs	r2, #0
 800e706:	629a      	str	r2, [r3, #40]	@ 0x28
                    keyStruct[3].trigType = TRIG_LONG;
 800e708:	4b21      	ldr	r3, [pc, #132]	@ (800e790 <keyScan+0x31c>)
 800e70a:	2202      	movs	r2, #2
 800e70c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
                    keyStruct[3].preKeyValue = TRIG_LONG;
 800e710:	4b1f      	ldr	r3, [pc, #124]	@ (800e790 <keyScan+0x31c>)
 800e712:	2202      	movs	r2, #2
 800e714:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 800e718:	e035      	b.n	800e786 <keyScan+0x312>
    else if (keyStruct[3].keyType == CONTINUOUS)
 800e71a:	4b1d      	ldr	r3, [pc, #116]	@ (800e790 <keyScan+0x31c>)
 800e71c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800e720:	2b02      	cmp	r3, #2
 800e722:	d130      	bne.n	800e786 <keyScan+0x312>
        if (keyStruct[3].preKeyValue == TRIG_SHORT) // short key
 800e724:	4b1a      	ldr	r3, [pc, #104]	@ (800e790 <keyScan+0x31c>)
 800e726:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e72a:	2b01      	cmp	r3, #1
 800e72c:	d114      	bne.n	800e758 <keyScan+0x2e4>
            if (++keyStruct[3].trigCnt >= CONTINUOUS_TRIG_CNT)
 800e72e:	4b18      	ldr	r3, [pc, #96]	@ (800e790 <keyScan+0x31c>)
 800e730:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e732:	3301      	adds	r3, #1
 800e734:	4a16      	ldr	r2, [pc, #88]	@ (800e790 <keyScan+0x31c>)
 800e736:	6293      	str	r3, [r2, #40]	@ 0x28
 800e738:	4b15      	ldr	r3, [pc, #84]	@ (800e790 <keyScan+0x31c>)
 800e73a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e73c:	2b63      	cmp	r3, #99	@ 0x63
 800e73e:	d922      	bls.n	800e786 <keyScan+0x312>
                keyStruct[3].trigCnt = 0;
 800e740:	4b13      	ldr	r3, [pc, #76]	@ (800e790 <keyScan+0x31c>)
 800e742:	2200      	movs	r2, #0
 800e744:	629a      	str	r2, [r3, #40]	@ 0x28
                keyStruct[3].trigType = TRIG_LONG; // long
 800e746:	4b12      	ldr	r3, [pc, #72]	@ (800e790 <keyScan+0x31c>)
 800e748:	2202      	movs	r2, #2
 800e74a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
                keyStruct[3].preKeyValue = TRIG_LONG;
 800e74e:	4b10      	ldr	r3, [pc, #64]	@ (800e790 <keyScan+0x31c>)
 800e750:	2202      	movs	r2, #2
 800e752:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 800e756:	e016      	b.n	800e786 <keyScan+0x312>
        else if (keyStruct[3].preKeyValue == TRIG_LONG) // long key
 800e758:	4b0d      	ldr	r3, [pc, #52]	@ (800e790 <keyScan+0x31c>)
 800e75a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e75e:	2b02      	cmp	r3, #2
 800e760:	d111      	bne.n	800e786 <keyScan+0x312>
            if (++keyStruct[3].trigCnt >= CONTINUOUS_INTEVAL)
 800e762:	4b0b      	ldr	r3, [pc, #44]	@ (800e790 <keyScan+0x31c>)
 800e764:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e766:	3301      	adds	r3, #1
 800e768:	4a09      	ldr	r2, [pc, #36]	@ (800e790 <keyScan+0x31c>)
 800e76a:	6293      	str	r3, [r2, #40]	@ 0x28
 800e76c:	4b08      	ldr	r3, [pc, #32]	@ (800e790 <keyScan+0x31c>)
 800e76e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e770:	2b27      	cmp	r3, #39	@ 0x27
 800e772:	d908      	bls.n	800e786 <keyScan+0x312>
                keyStruct[3].trigCnt = 0;
 800e774:	4b06      	ldr	r3, [pc, #24]	@ (800e790 <keyScan+0x31c>)
 800e776:	2200      	movs	r2, #0
 800e778:	629a      	str	r2, [r3, #40]	@ 0x28
                keyStruct[3].trigType = keyStruct[3].preKeyValue;
 800e77a:	4b05      	ldr	r3, [pc, #20]	@ (800e790 <keyScan+0x31c>)
 800e77c:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 800e780:	4b03      	ldr	r3, [pc, #12]	@ (800e790 <keyScan+0x31c>)
 800e782:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
}
 800e786:	bf00      	nop
 800e788:	3708      	adds	r7, #8
 800e78a:	46bd      	mov	sp, r7
 800e78c:	bd80      	pop	{r7, pc}
 800e78e:	bf00      	nop
 800e790:	20000960 	.word	0x20000960

0800e794 <getKeyState>:
>>>>>>> f88694781bd54d0bca96bec7ac145bdac62fa329

/*
将物理按键转化为逻辑按键
 */
void getKeyState(KeyState *keyState)
{
<<<<<<< HEAD
 800d7f0:	b480      	push	{r7}
 800d7f2:	b085      	sub	sp, #20
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	6078      	str	r0, [r7, #4]
    uchar i;

    if (keyStruct[1].trigType == TRIG_SHORT)
 800d7f8:	4b1b      	ldr	r3, [pc, #108]	@ (800d868 <getKeyState+0x78>)
 800d7fa:	7d1b      	ldrb	r3, [r3, #20]
 800d7fc:	2b01      	cmp	r3, #1
 800d7fe:	d103      	bne.n	800d808 <getKeyState+0x18>
        *keyState = USER1_SHORT;
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	2201      	movs	r2, #1
 800d804:	701a      	strb	r2, [r3, #0]
 800d806:	e014      	b.n	800d832 <getKeyState+0x42>
    else if (keyStruct[2].trigType == TRIG_SHORT)
 800d808:	4b17      	ldr	r3, [pc, #92]	@ (800d868 <getKeyState+0x78>)
 800d80a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d80e:	2b01      	cmp	r3, #1
 800d810:	d103      	bne.n	800d81a <getKeyState+0x2a>
        *keyState = USER2_SHORT;
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	2202      	movs	r2, #2
 800d816:	701a      	strb	r2, [r3, #0]
 800d818:	e00b      	b.n	800d832 <getKeyState+0x42>
    else if (keyStruct[3].trigType == TRIG_SHORT)
 800d81a:	4b13      	ldr	r3, [pc, #76]	@ (800d868 <getKeyState+0x78>)
 800d81c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800d820:	2b01      	cmp	r3, #1
 800d822:	d103      	bne.n	800d82c <getKeyState+0x3c>
        *keyState = USER3_SHORT;
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	2203      	movs	r2, #3
 800d828:	701a      	strb	r2, [r3, #0]
 800d82a:	e002      	b.n	800d832 <getKeyState+0x42>
    else
        *keyState = NONE_KEY;
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	2200      	movs	r2, #0
 800d830:	701a      	strb	r2, [r3, #0]

    for (i = 0; i < KEY_NUM; i++)
 800d832:	2300      	movs	r3, #0
 800d834:	73fb      	strb	r3, [r7, #15]
 800d836:	e00c      	b.n	800d852 <getKeyState+0x62>
    {
        keyStruct[i].trigType = NO_TRIG;
 800d838:	7bfa      	ldrb	r2, [r7, #15]
 800d83a:	490b      	ldr	r1, [pc, #44]	@ (800d868 <getKeyState+0x78>)
 800d83c:	4613      	mov	r3, r2
 800d83e:	005b      	lsls	r3, r3, #1
 800d840:	4413      	add	r3, r2
 800d842:	009b      	lsls	r3, r3, #2
 800d844:	440b      	add	r3, r1
 800d846:	3308      	adds	r3, #8
 800d848:	2200      	movs	r2, #0
 800d84a:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < KEY_NUM; i++)
 800d84c:	7bfb      	ldrb	r3, [r7, #15]
 800d84e:	3301      	adds	r3, #1
 800d850:	73fb      	strb	r3, [r7, #15]
 800d852:	7bfb      	ldrb	r3, [r7, #15]
 800d854:	2b03      	cmp	r3, #3
 800d856:	d9ef      	bls.n	800d838 <getKeyState+0x48>
    }
}
 800d858:	bf00      	nop
 800d85a:	bf00      	nop
 800d85c:	3714      	adds	r7, #20
 800d85e:	46bd      	mov	sp, r7
 800d860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d864:	4770      	bx	lr
 800d866:	bf00      	nop
 800d868:	2000090c 	.word	0x2000090c

0800d86c <LED_drive>:
=======
 800e794:	b480      	push	{r7}
 800e796:	b085      	sub	sp, #20
 800e798:	af00      	add	r7, sp, #0
 800e79a:	6078      	str	r0, [r7, #4]
    uchar i;

    if (keyStruct[1].trigType == TRIG_SHORT)
 800e79c:	4b1b      	ldr	r3, [pc, #108]	@ (800e80c <getKeyState+0x78>)
 800e79e:	7d1b      	ldrb	r3, [r3, #20]
 800e7a0:	2b01      	cmp	r3, #1
 800e7a2:	d103      	bne.n	800e7ac <getKeyState+0x18>
        *keyState = USER1_SHORT;
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	2201      	movs	r2, #1
 800e7a8:	701a      	strb	r2, [r3, #0]
 800e7aa:	e014      	b.n	800e7d6 <getKeyState+0x42>
    else if (keyStruct[2].trigType == TRIG_SHORT)
 800e7ac:	4b17      	ldr	r3, [pc, #92]	@ (800e80c <getKeyState+0x78>)
 800e7ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e7b2:	2b01      	cmp	r3, #1
 800e7b4:	d103      	bne.n	800e7be <getKeyState+0x2a>
        *keyState = USER2_SHORT;
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	2202      	movs	r2, #2
 800e7ba:	701a      	strb	r2, [r3, #0]
 800e7bc:	e00b      	b.n	800e7d6 <getKeyState+0x42>
    else if (keyStruct[3].trigType == TRIG_SHORT)
 800e7be:	4b13      	ldr	r3, [pc, #76]	@ (800e80c <getKeyState+0x78>)
 800e7c0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800e7c4:	2b01      	cmp	r3, #1
 800e7c6:	d103      	bne.n	800e7d0 <getKeyState+0x3c>
        *keyState = USER3_SHORT;
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	2203      	movs	r2, #3
 800e7cc:	701a      	strb	r2, [r3, #0]
 800e7ce:	e002      	b.n	800e7d6 <getKeyState+0x42>
    else
        *keyState = NONE_KEY;
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	2200      	movs	r2, #0
 800e7d4:	701a      	strb	r2, [r3, #0]

    for (i = 0; i < KEY_NUM; i++)
 800e7d6:	2300      	movs	r3, #0
 800e7d8:	73fb      	strb	r3, [r7, #15]
 800e7da:	e00c      	b.n	800e7f6 <getKeyState+0x62>
    {
        keyStruct[i].trigType = NO_TRIG;
 800e7dc:	7bfa      	ldrb	r2, [r7, #15]
 800e7de:	490b      	ldr	r1, [pc, #44]	@ (800e80c <getKeyState+0x78>)
 800e7e0:	4613      	mov	r3, r2
 800e7e2:	005b      	lsls	r3, r3, #1
 800e7e4:	4413      	add	r3, r2
 800e7e6:	009b      	lsls	r3, r3, #2
 800e7e8:	440b      	add	r3, r1
 800e7ea:	3308      	adds	r3, #8
 800e7ec:	2200      	movs	r2, #0
 800e7ee:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < KEY_NUM; i++)
 800e7f0:	7bfb      	ldrb	r3, [r7, #15]
 800e7f2:	3301      	adds	r3, #1
 800e7f4:	73fb      	strb	r3, [r7, #15]
 800e7f6:	7bfb      	ldrb	r3, [r7, #15]
 800e7f8:	2b03      	cmp	r3, #3
 800e7fa:	d9ef      	bls.n	800e7dc <getKeyState+0x48>
    }
}
 800e7fc:	bf00      	nop
 800e7fe:	bf00      	nop
 800e800:	3714      	adds	r7, #20
 800e802:	46bd      	mov	sp, r7
 800e804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e808:	4770      	bx	lr
 800e80a:	bf00      	nop
 800e80c:	20000960 	.word	0x20000960

0800e810 <LED_drive>:
>>>>>>> f88694781bd54d0bca96bec7ac145bdac62fa329
#include "led.h"

bool led1On, led2On;

void LED_drive()
{
<<<<<<< HEAD
 800d86c:	b580      	push	{r7, lr}
 800d86e:	af00      	add	r7, sp, #0
    if (led1On)
 800d870:	4b0f      	ldr	r3, [pc, #60]	@ (800d8b0 <LED_drive+0x44>)
 800d872:	781b      	ldrb	r3, [r3, #0]
 800d874:	2b00      	cmp	r3, #0
 800d876:	d005      	beq.n	800d884 <LED_drive+0x18>
        LED1_ON;
 800d878:	2200      	movs	r2, #0
 800d87a:	2140      	movs	r1, #64	@ 0x40
 800d87c:	480d      	ldr	r0, [pc, #52]	@ (800d8b4 <LED_drive+0x48>)
 800d87e:	f7f8 ffb9 	bl	80067f4 <HAL_GPIO_WritePin>
 800d882:	e004      	b.n	800d88e <LED_drive+0x22>
    else
        LED1_OFF;
 800d884:	2201      	movs	r2, #1
 800d886:	2140      	movs	r1, #64	@ 0x40
 800d888:	480a      	ldr	r0, [pc, #40]	@ (800d8b4 <LED_drive+0x48>)
 800d88a:	f7f8 ffb3 	bl	80067f4 <HAL_GPIO_WritePin>

    if (led2On)
 800d88e:	4b0a      	ldr	r3, [pc, #40]	@ (800d8b8 <LED_drive+0x4c>)
 800d890:	781b      	ldrb	r3, [r3, #0]
 800d892:	2b00      	cmp	r3, #0
 800d894:	d005      	beq.n	800d8a2 <LED_drive+0x36>
        LED2_ON;
 800d896:	2200      	movs	r2, #0
 800d898:	2110      	movs	r1, #16
 800d89a:	4806      	ldr	r0, [pc, #24]	@ (800d8b4 <LED_drive+0x48>)
 800d89c:	f7f8 ffaa 	bl	80067f4 <HAL_GPIO_WritePin>
    else
        LED2_OFF;
}
 800d8a0:	e004      	b.n	800d8ac <LED_drive+0x40>
        LED2_OFF;
 800d8a2:	2201      	movs	r2, #1
 800d8a4:	2110      	movs	r1, #16
 800d8a6:	4803      	ldr	r0, [pc, #12]	@ (800d8b4 <LED_drive+0x48>)
 800d8a8:	f7f8 ffa4 	bl	80067f4 <HAL_GPIO_WritePin>
}
 800d8ac:	bf00      	nop
 800d8ae:	bd80      	pop	{r7, pc}
 800d8b0:	20000948 	.word	0x20000948
 800d8b4:	48000800 	.word	0x48000800
 800d8b8:	20000949 	.word	0x20000949

0800d8bc <MT6701_GetRawData>:
=======
 800e810:	b580      	push	{r7, lr}
 800e812:	af00      	add	r7, sp, #0
    if (led1On)
 800e814:	4b0f      	ldr	r3, [pc, #60]	@ (800e854 <LED_drive+0x44>)
 800e816:	781b      	ldrb	r3, [r3, #0]
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d005      	beq.n	800e828 <LED_drive+0x18>
        LED1_ON;
 800e81c:	2200      	movs	r2, #0
 800e81e:	2140      	movs	r1, #64	@ 0x40
 800e820:	480d      	ldr	r0, [pc, #52]	@ (800e858 <LED_drive+0x48>)
 800e822:	f7f8 f899 	bl	8006958 <HAL_GPIO_WritePin>
 800e826:	e004      	b.n	800e832 <LED_drive+0x22>
    else
        LED1_OFF;
 800e828:	2201      	movs	r2, #1
 800e82a:	2140      	movs	r1, #64	@ 0x40
 800e82c:	480a      	ldr	r0, [pc, #40]	@ (800e858 <LED_drive+0x48>)
 800e82e:	f7f8 f893 	bl	8006958 <HAL_GPIO_WritePin>

    if (led2On)
 800e832:	4b0a      	ldr	r3, [pc, #40]	@ (800e85c <LED_drive+0x4c>)
 800e834:	781b      	ldrb	r3, [r3, #0]
 800e836:	2b00      	cmp	r3, #0
 800e838:	d005      	beq.n	800e846 <LED_drive+0x36>
        LED2_ON;
 800e83a:	2200      	movs	r2, #0
 800e83c:	2110      	movs	r1, #16
 800e83e:	4806      	ldr	r0, [pc, #24]	@ (800e858 <LED_drive+0x48>)
 800e840:	f7f8 f88a 	bl	8006958 <HAL_GPIO_WritePin>
    else
        LED2_OFF;
}
 800e844:	e004      	b.n	800e850 <LED_drive+0x40>
        LED2_OFF;
 800e846:	2201      	movs	r2, #1
 800e848:	2110      	movs	r1, #16
 800e84a:	4803      	ldr	r0, [pc, #12]	@ (800e858 <LED_drive+0x48>)
 800e84c:	f7f8 f884 	bl	8006958 <HAL_GPIO_WritePin>
}
 800e850:	bf00      	nop
 800e852:	bd80      	pop	{r7, pc}
 800e854:	2000099c 	.word	0x2000099c
 800e858:	48000800 	.word	0x48000800
 800e85c:	2000099d 	.word	0x2000099d

0800e860 <Sensor_I2C2_Read>:

static int16_t Mpu6050Addr = 0x68;
MPU6050DATATYPE Mpu6050_Data;

int8_t Sensor_I2C2_Read(uint16_t DevAddr, uint16_t MemAddr, uint8_t *oData, uint8_t DataLen)
{
 800e860:	b580      	push	{r7, lr}
 800e862:	b088      	sub	sp, #32
 800e864:	af04      	add	r7, sp, #16
 800e866:	60ba      	str	r2, [r7, #8]
 800e868:	461a      	mov	r2, r3
 800e86a:	4603      	mov	r3, r0
 800e86c:	81fb      	strh	r3, [r7, #14]
 800e86e:	460b      	mov	r3, r1
 800e870:	81bb      	strh	r3, [r7, #12]
 800e872:	4613      	mov	r3, r2
 800e874:	71fb      	strb	r3, [r7, #7]
	return HAL_I2C_Mem_Read(&hi2c1,DevAddr,MemAddr,1,oData,DataLen,1000);
 800e876:	79fb      	ldrb	r3, [r7, #7]
 800e878:	b29b      	uxth	r3, r3
 800e87a:	89ba      	ldrh	r2, [r7, #12]
 800e87c:	89f9      	ldrh	r1, [r7, #14]
 800e87e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800e882:	9002      	str	r0, [sp, #8]
 800e884:	9301      	str	r3, [sp, #4]
 800e886:	68bb      	ldr	r3, [r7, #8]
 800e888:	9300      	str	r3, [sp, #0]
 800e88a:	2301      	movs	r3, #1
 800e88c:	4804      	ldr	r0, [pc, #16]	@ (800e8a0 <Sensor_I2C2_Read+0x40>)
 800e88e:	f7f8 fa2b 	bl	8006ce8 <HAL_I2C_Mem_Read>
 800e892:	4603      	mov	r3, r0
 800e894:	b25b      	sxtb	r3, r3
}
 800e896:	4618      	mov	r0, r3
 800e898:	3710      	adds	r7, #16
 800e89a:	46bd      	mov	sp, r7
 800e89c:	bd80      	pop	{r7, pc}
 800e89e:	bf00      	nop
 800e8a0:	200003ec 	.word	0x200003ec

0800e8a4 <Sensor_I2C2_Write>:

int8_t Sensor_I2C2_Write(uint16_t DevAddr, uint16_t MemAddr, uint8_t *iData, uint8_t DataLen)
{
 800e8a4:	b580      	push	{r7, lr}
 800e8a6:	b088      	sub	sp, #32
 800e8a8:	af04      	add	r7, sp, #16
 800e8aa:	60ba      	str	r2, [r7, #8]
 800e8ac:	461a      	mov	r2, r3
 800e8ae:	4603      	mov	r3, r0
 800e8b0:	81fb      	strh	r3, [r7, #14]
 800e8b2:	460b      	mov	r3, r1
 800e8b4:	81bb      	strh	r3, [r7, #12]
 800e8b6:	4613      	mov	r3, r2
 800e8b8:	71fb      	strb	r3, [r7, #7]
	return HAL_I2C_Mem_Write(&hi2c1,DevAddr,MemAddr,1,iData,DataLen,1000);
 800e8ba:	79fb      	ldrb	r3, [r7, #7]
 800e8bc:	b29b      	uxth	r3, r3
 800e8be:	89ba      	ldrh	r2, [r7, #12]
 800e8c0:	89f9      	ldrh	r1, [r7, #14]
 800e8c2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800e8c6:	9002      	str	r0, [sp, #8]
 800e8c8:	9301      	str	r3, [sp, #4]
 800e8ca:	68bb      	ldr	r3, [r7, #8]
 800e8cc:	9300      	str	r3, [sp, #0]
 800e8ce:	2301      	movs	r3, #1
 800e8d0:	4804      	ldr	r0, [pc, #16]	@ (800e8e4 <Sensor_I2C2_Write+0x40>)
 800e8d2:	f7f8 f8f5 	bl	8006ac0 <HAL_I2C_Mem_Write>
 800e8d6:	4603      	mov	r3, r0
 800e8d8:	b25b      	sxtb	r3, r3
}
 800e8da:	4618      	mov	r0, r3
 800e8dc:	3710      	adds	r7, #16
 800e8de:	46bd      	mov	sp, r7
 800e8e0:	bd80      	pop	{r7, pc}
 800e8e2:	bf00      	nop
 800e8e4:	200003ec 	.word	0x200003ec

0800e8e8 <Sensor_I2C2_Serch>:

int16_t Sensor_I2C2_Serch(void)
{
 800e8e8:	b580      	push	{r7, lr}
 800e8ea:	b082      	sub	sp, #8
 800e8ec:	af00      	add	r7, sp, #0
	for(uint8_t i = 1; i < 255; i++)
 800e8ee:	2301      	movs	r3, #1
 800e8f0:	71fb      	strb	r3, [r7, #7]
 800e8f2:	e014      	b.n	800e91e <Sensor_I2C2_Serch+0x36>
	{
		if(HAL_I2C_IsDeviceReady(&hi2c1, i, 1, 1000) == HAL_OK)
 800e8f4:	79fb      	ldrb	r3, [r7, #7]
 800e8f6:	b299      	uxth	r1, r3
 800e8f8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800e8fc:	2201      	movs	r2, #1
 800e8fe:	480c      	ldr	r0, [pc, #48]	@ (800e930 <Sensor_I2C2_Serch+0x48>)
 800e900:	f7f8 fb0c 	bl	8006f1c <HAL_I2C_IsDeviceReady>
 800e904:	4603      	mov	r3, r0
 800e906:	2b00      	cmp	r3, #0
 800e908:	d106      	bne.n	800e918 <Sensor_I2C2_Serch+0x30>
		{
			Mpu6050Addr = i;
 800e90a:	79fb      	ldrb	r3, [r7, #7]
 800e90c:	b21a      	sxth	r2, r3
 800e90e:	4b09      	ldr	r3, [pc, #36]	@ (800e934 <Sensor_I2C2_Serch+0x4c>)
 800e910:	801a      	strh	r2, [r3, #0]
			return i;
 800e912:	79fb      	ldrb	r3, [r7, #7]
 800e914:	b21b      	sxth	r3, r3
 800e916:	e006      	b.n	800e926 <Sensor_I2C2_Serch+0x3e>
	for(uint8_t i = 1; i < 255; i++)
 800e918:	79fb      	ldrb	r3, [r7, #7]
 800e91a:	3301      	adds	r3, #1
 800e91c:	71fb      	strb	r3, [r7, #7]
 800e91e:	79fb      	ldrb	r3, [r7, #7]
 800e920:	2bff      	cmp	r3, #255	@ 0xff
 800e922:	d1e7      	bne.n	800e8f4 <Sensor_I2C2_Serch+0xc>
		}
	}
	return 0xD1;
 800e924:	23d1      	movs	r3, #209	@ 0xd1
}
 800e926:	4618      	mov	r0, r3
 800e928:	3708      	adds	r7, #8
 800e92a:	46bd      	mov	sp, r7
 800e92c:	bd80      	pop	{r7, pc}
 800e92e:	bf00      	nop
 800e930:	200003ec 	.word	0x200003ec
 800e934:	2000008e 	.word	0x2000008e

0800e938 <MPU6050_Init>:

int8_t MPU6050_Init(int16_t Addr)
{
 800e938:	b580      	push	{r7, lr}
 800e93a:	b088      	sub	sp, #32
 800e93c:	af04      	add	r7, sp, #16
 800e93e:	4603      	mov	r3, r0
 800e940:	80fb      	strh	r3, [r7, #6]
	uint8_t check;
	HAL_I2C_Mem_Read(&hi2c1,Addr,WHO_AM_I,1,&check,1,1000);
 800e942:	88f9      	ldrh	r1, [r7, #6]
 800e944:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800e948:	9302      	str	r3, [sp, #8]
 800e94a:	2301      	movs	r3, #1
 800e94c:	9301      	str	r3, [sp, #4]
 800e94e:	f107 030f 	add.w	r3, r7, #15
 800e952:	9300      	str	r3, [sp, #0]
 800e954:	2301      	movs	r3, #1
 800e956:	2275      	movs	r2, #117	@ 0x75
 800e958:	4818      	ldr	r0, [pc, #96]	@ (800e9bc <MPU6050_Init+0x84>)
 800e95a:	f7f8 f9c5 	bl	8006ce8 <HAL_I2C_Mem_Read>
	if(check == 0x68) // 确认设备用 地址寄存器
 800e95e:	7bfb      	ldrb	r3, [r7, #15]
 800e960:	2b68      	cmp	r3, #104	@ 0x68
 800e962:	d125      	bne.n	800e9b0 <MPU6050_Init+0x78>
	{	
		check = 0x00;
 800e964:	2300      	movs	r3, #0
 800e966:	73fb      	strb	r3, [r7, #15]
		Sensor_I2C2_Write(Addr,PWR_MGMT_1,&check, 1); 	    // 唤醒
 800e968:	88f8      	ldrh	r0, [r7, #6]
 800e96a:	f107 020f 	add.w	r2, r7, #15
 800e96e:	2301      	movs	r3, #1
 800e970:	216b      	movs	r1, #107	@ 0x6b
 800e972:	f7ff ff97 	bl	800e8a4 <Sensor_I2C2_Write>
		check = 0x07;	
 800e976:	2307      	movs	r3, #7
 800e978:	73fb      	strb	r3, [r7, #15]
		Sensor_I2C2_Write(Addr,SMPLRT_DIV,&check, 1);	    // 1Khz的速率
 800e97a:	88f8      	ldrh	r0, [r7, #6]
 800e97c:	f107 020f 	add.w	r2, r7, #15
 800e980:	2301      	movs	r3, #1
 800e982:	2119      	movs	r1, #25
 800e984:	f7ff ff8e 	bl	800e8a4 <Sensor_I2C2_Write>
		check = 0x00;
 800e988:	2300      	movs	r3, #0
 800e98a:	73fb      	strb	r3, [r7, #15]
		Sensor_I2C2_Write(Addr,ACCEL_CONFIG,&check, 1);	 	// 加速度配置
 800e98c:	88f8      	ldrh	r0, [r7, #6]
 800e98e:	f107 020f 	add.w	r2, r7, #15
 800e992:	2301      	movs	r3, #1
 800e994:	211c      	movs	r1, #28
 800e996:	f7ff ff85 	bl	800e8a4 <Sensor_I2C2_Write>
		check = 0x00;
 800e99a:	2300      	movs	r3, #0
 800e99c:	73fb      	strb	r3, [r7, #15]
		Sensor_I2C2_Write(Addr,GYRO_CONFIG,&check, 1);		// 陀螺配置
 800e99e:	88f8      	ldrh	r0, [r7, #6]
 800e9a0:	f107 020f 	add.w	r2, r7, #15
 800e9a4:	2301      	movs	r3, #1
 800e9a6:	211b      	movs	r1, #27
 800e9a8:	f7ff ff7c 	bl	800e8a4 <Sensor_I2C2_Write>
		return 0;
 800e9ac:	2300      	movs	r3, #0
 800e9ae:	e001      	b.n	800e9b4 <MPU6050_Init+0x7c>
	}
	return -1;
 800e9b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e9b4:	4618      	mov	r0, r3
 800e9b6:	3710      	adds	r7, #16
 800e9b8:	46bd      	mov	sp, r7
 800e9ba:	bd80      	pop	{r7, pc}
 800e9bc:	200003ec 	.word	0x200003ec

0800e9c0 <MPU6050_Read_Accel>:

void MPU6050_Read_Accel(void)
{
 800e9c0:	b580      	push	{r7, lr}
 800e9c2:	b082      	sub	sp, #8
 800e9c4:	af00      	add	r7, sp, #0
	uint8_t Read_Buf[6];
	
	// 寄存器依次是加速度X高 - 加速度X低 - 加速度Y高位 - 加速度Y低位 - 加速度Z高位 - 加速度度Z低位
	Sensor_I2C2_Read(Mpu6050Addr, ACCEL_XOUT_H, Read_Buf, 6); 
 800e9c6:	4b2a      	ldr	r3, [pc, #168]	@ (800ea70 <MPU6050_Read_Accel+0xb0>)
 800e9c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e9cc:	b298      	uxth	r0, r3
 800e9ce:	463a      	mov	r2, r7
 800e9d0:	2306      	movs	r3, #6
 800e9d2:	213b      	movs	r1, #59	@ 0x3b
 800e9d4:	f7ff ff44 	bl	800e860 <Sensor_I2C2_Read>
	
	Mpu6050_Data.Accel_X = (int16_t)(Read_Buf[0] << 8 | Read_Buf[1]);
 800e9d8:	783b      	ldrb	r3, [r7, #0]
 800e9da:	021b      	lsls	r3, r3, #8
 800e9dc:	b21a      	sxth	r2, r3
 800e9de:	787b      	ldrb	r3, [r7, #1]
 800e9e0:	b21b      	sxth	r3, r3
 800e9e2:	4313      	orrs	r3, r2
 800e9e4:	b21b      	sxth	r3, r3
 800e9e6:	ee07 3a90 	vmov	s15, r3
 800e9ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e9ee:	4b21      	ldr	r3, [pc, #132]	@ (800ea74 <MPU6050_Read_Accel+0xb4>)
 800e9f0:	edc3 7a00 	vstr	s15, [r3]
	Mpu6050_Data.Accel_Y = (int16_t)(Read_Buf[2] << 8 | Read_Buf[3]);
 800e9f4:	78bb      	ldrb	r3, [r7, #2]
 800e9f6:	021b      	lsls	r3, r3, #8
 800e9f8:	b21a      	sxth	r2, r3
 800e9fa:	78fb      	ldrb	r3, [r7, #3]
 800e9fc:	b21b      	sxth	r3, r3
 800e9fe:	4313      	orrs	r3, r2
 800ea00:	b21b      	sxth	r3, r3
 800ea02:	ee07 3a90 	vmov	s15, r3
 800ea06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ea0a:	4b1a      	ldr	r3, [pc, #104]	@ (800ea74 <MPU6050_Read_Accel+0xb4>)
 800ea0c:	edc3 7a01 	vstr	s15, [r3, #4]
	Mpu6050_Data.Accel_Z = (int16_t)(Read_Buf[4] << 8 | Read_Buf[5]);
 800ea10:	793b      	ldrb	r3, [r7, #4]
 800ea12:	021b      	lsls	r3, r3, #8
 800ea14:	b21a      	sxth	r2, r3
 800ea16:	797b      	ldrb	r3, [r7, #5]
 800ea18:	b21b      	sxth	r3, r3
 800ea1a:	4313      	orrs	r3, r2
 800ea1c:	b21b      	sxth	r3, r3
 800ea1e:	ee07 3a90 	vmov	s15, r3
 800ea22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ea26:	4b13      	ldr	r3, [pc, #76]	@ (800ea74 <MPU6050_Read_Accel+0xb4>)
 800ea28:	edc3 7a02 	vstr	s15, [r3, #8]
	
	Mpu6050_Data.Accel_X = Mpu6050_Data.Accel_X / 16384.0f;
 800ea2c:	4b11      	ldr	r3, [pc, #68]	@ (800ea74 <MPU6050_Read_Accel+0xb4>)
 800ea2e:	ed93 7a00 	vldr	s14, [r3]
 800ea32:	eddf 6a11 	vldr	s13, [pc, #68]	@ 800ea78 <MPU6050_Read_Accel+0xb8>
 800ea36:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ea3a:	4b0e      	ldr	r3, [pc, #56]	@ (800ea74 <MPU6050_Read_Accel+0xb4>)
 800ea3c:	edc3 7a00 	vstr	s15, [r3]
	Mpu6050_Data.Accel_Y = Mpu6050_Data.Accel_Y / 16384.0f;
 800ea40:	4b0c      	ldr	r3, [pc, #48]	@ (800ea74 <MPU6050_Read_Accel+0xb4>)
 800ea42:	ed93 7a01 	vldr	s14, [r3, #4]
 800ea46:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 800ea78 <MPU6050_Read_Accel+0xb8>
 800ea4a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ea4e:	4b09      	ldr	r3, [pc, #36]	@ (800ea74 <MPU6050_Read_Accel+0xb4>)
 800ea50:	edc3 7a01 	vstr	s15, [r3, #4]
	Mpu6050_Data.Accel_Z = Mpu6050_Data.Accel_Z / 16384.0f;
 800ea54:	4b07      	ldr	r3, [pc, #28]	@ (800ea74 <MPU6050_Read_Accel+0xb4>)
 800ea56:	ed93 7a02 	vldr	s14, [r3, #8]
 800ea5a:	eddf 6a07 	vldr	s13, [pc, #28]	@ 800ea78 <MPU6050_Read_Accel+0xb8>
 800ea5e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ea62:	4b04      	ldr	r3, [pc, #16]	@ (800ea74 <MPU6050_Read_Accel+0xb4>)
 800ea64:	edc3 7a02 	vstr	s15, [r3, #8]
	
}
 800ea68:	bf00      	nop
 800ea6a:	3708      	adds	r7, #8
 800ea6c:	46bd      	mov	sp, r7
 800ea6e:	bd80      	pop	{r7, pc}
 800ea70:	2000008e 	.word	0x2000008e
 800ea74:	200009a0 	.word	0x200009a0
 800ea78:	46800000 	.word	0x46800000

0800ea7c <MPU6050_Read_Gyro>:
void MPU6050_Read_Gyro(void)
{
 800ea7c:	b580      	push	{r7, lr}
 800ea7e:	b082      	sub	sp, #8
 800ea80:	af00      	add	r7, sp, #0
	uint8_t Read_Buf[6];
	
	// 寄存器依次是角度X高 - 角度X低 - 角度Y高位 - 角度Y低位 - 角度Z高位 - 角度Z低位
	Sensor_I2C2_Read(Mpu6050Addr, GYRO_XOUT_H, Read_Buf, 6); 
 800ea82:	4b2a      	ldr	r3, [pc, #168]	@ (800eb2c <MPU6050_Read_Gyro+0xb0>)
 800ea84:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ea88:	b298      	uxth	r0, r3
 800ea8a:	463a      	mov	r2, r7
 800ea8c:	2306      	movs	r3, #6
 800ea8e:	2143      	movs	r1, #67	@ 0x43
 800ea90:	f7ff fee6 	bl	800e860 <Sensor_I2C2_Read>
	
	Mpu6050_Data.Gyro_X = (int16_t)(Read_Buf[0] << 8 | Read_Buf[1]);
 800ea94:	783b      	ldrb	r3, [r7, #0]
 800ea96:	021b      	lsls	r3, r3, #8
 800ea98:	b21a      	sxth	r2, r3
 800ea9a:	787b      	ldrb	r3, [r7, #1]
 800ea9c:	b21b      	sxth	r3, r3
 800ea9e:	4313      	orrs	r3, r2
 800eaa0:	b21b      	sxth	r3, r3
 800eaa2:	ee07 3a90 	vmov	s15, r3
 800eaa6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800eaaa:	4b21      	ldr	r3, [pc, #132]	@ (800eb30 <MPU6050_Read_Gyro+0xb4>)
 800eaac:	edc3 7a03 	vstr	s15, [r3, #12]
	Mpu6050_Data.Gyro_Y = (int16_t)(Read_Buf[2] << 8 | Read_Buf[3]);
 800eab0:	78bb      	ldrb	r3, [r7, #2]
 800eab2:	021b      	lsls	r3, r3, #8
 800eab4:	b21a      	sxth	r2, r3
 800eab6:	78fb      	ldrb	r3, [r7, #3]
 800eab8:	b21b      	sxth	r3, r3
 800eaba:	4313      	orrs	r3, r2
 800eabc:	b21b      	sxth	r3, r3
 800eabe:	ee07 3a90 	vmov	s15, r3
 800eac2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800eac6:	4b1a      	ldr	r3, [pc, #104]	@ (800eb30 <MPU6050_Read_Gyro+0xb4>)
 800eac8:	edc3 7a04 	vstr	s15, [r3, #16]
	Mpu6050_Data.Gyro_Z = (int16_t)(Read_Buf[4] << 8 | Read_Buf[5]);
 800eacc:	793b      	ldrb	r3, [r7, #4]
 800eace:	021b      	lsls	r3, r3, #8
 800ead0:	b21a      	sxth	r2, r3
 800ead2:	797b      	ldrb	r3, [r7, #5]
 800ead4:	b21b      	sxth	r3, r3
 800ead6:	4313      	orrs	r3, r2
 800ead8:	b21b      	sxth	r3, r3
 800eada:	ee07 3a90 	vmov	s15, r3
 800eade:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800eae2:	4b13      	ldr	r3, [pc, #76]	@ (800eb30 <MPU6050_Read_Gyro+0xb4>)
 800eae4:	edc3 7a05 	vstr	s15, [r3, #20]
	
	Mpu6050_Data.Gyro_X = Mpu6050_Data.Gyro_X / 131.0f;
 800eae8:	4b11      	ldr	r3, [pc, #68]	@ (800eb30 <MPU6050_Read_Gyro+0xb4>)
 800eaea:	ed93 7a03 	vldr	s14, [r3, #12]
 800eaee:	eddf 6a11 	vldr	s13, [pc, #68]	@ 800eb34 <MPU6050_Read_Gyro+0xb8>
 800eaf2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800eaf6:	4b0e      	ldr	r3, [pc, #56]	@ (800eb30 <MPU6050_Read_Gyro+0xb4>)
 800eaf8:	edc3 7a03 	vstr	s15, [r3, #12]
	Mpu6050_Data.Gyro_Y = Mpu6050_Data.Gyro_Y / 131.0f;
 800eafc:	4b0c      	ldr	r3, [pc, #48]	@ (800eb30 <MPU6050_Read_Gyro+0xb4>)
 800eafe:	ed93 7a04 	vldr	s14, [r3, #16]
 800eb02:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 800eb34 <MPU6050_Read_Gyro+0xb8>
 800eb06:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800eb0a:	4b09      	ldr	r3, [pc, #36]	@ (800eb30 <MPU6050_Read_Gyro+0xb4>)
 800eb0c:	edc3 7a04 	vstr	s15, [r3, #16]
	Mpu6050_Data.Gyro_Z = Mpu6050_Data.Gyro_Z / 131.0f;
 800eb10:	4b07      	ldr	r3, [pc, #28]	@ (800eb30 <MPU6050_Read_Gyro+0xb4>)
 800eb12:	ed93 7a05 	vldr	s14, [r3, #20]
 800eb16:	eddf 6a07 	vldr	s13, [pc, #28]	@ 800eb34 <MPU6050_Read_Gyro+0xb8>
 800eb1a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800eb1e:	4b04      	ldr	r3, [pc, #16]	@ (800eb30 <MPU6050_Read_Gyro+0xb4>)
 800eb20:	edc3 7a05 	vstr	s15, [r3, #20]
	
}
 800eb24:	bf00      	nop
 800eb26:	3708      	adds	r7, #8
 800eb28:	46bd      	mov	sp, r7
 800eb2a:	bd80      	pop	{r7, pc}
 800eb2c:	2000008e 	.word	0x2000008e
 800eb30:	200009a0 	.word	0x200009a0
 800eb34:	43030000 	.word	0x43030000

0800eb38 <MPU6050_Read_Temp>:
void MPU6050_Read_Temp(void)
{
 800eb38:	b580      	push	{r7, lr}
 800eb3a:	b082      	sub	sp, #8
 800eb3c:	af00      	add	r7, sp, #0
    uint8_t Read_Buf[2];
	
	Sensor_I2C2_Read(Mpu6050Addr, TEMP_OUT_H, Read_Buf, 2); 
 800eb3e:	4b14      	ldr	r3, [pc, #80]	@ (800eb90 <MPU6050_Read_Temp+0x58>)
 800eb40:	f9b3 3000 	ldrsh.w	r3, [r3]
 800eb44:	b298      	uxth	r0, r3
 800eb46:	1d3a      	adds	r2, r7, #4
 800eb48:	2302      	movs	r3, #2
 800eb4a:	2141      	movs	r1, #65	@ 0x41
 800eb4c:	f7ff fe88 	bl	800e860 <Sensor_I2C2_Read>
	
	Mpu6050_Data.Temp = (int16_t)(Read_Buf[0] << 8 | Read_Buf[1]);
 800eb50:	793b      	ldrb	r3, [r7, #4]
 800eb52:	021b      	lsls	r3, r3, #8
 800eb54:	b21a      	sxth	r2, r3
 800eb56:	797b      	ldrb	r3, [r7, #5]
 800eb58:	b21b      	sxth	r3, r3
 800eb5a:	4313      	orrs	r3, r2
 800eb5c:	b21b      	sxth	r3, r3
 800eb5e:	ee07 3a90 	vmov	s15, r3
 800eb62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800eb66:	4b0b      	ldr	r3, [pc, #44]	@ (800eb94 <MPU6050_Read_Temp+0x5c>)
 800eb68:	edc3 7a06 	vstr	s15, [r3, #24]
	
	Mpu6050_Data.Temp = 36.53f + (Mpu6050_Data.Temp / 340.0f);
 800eb6c:	4b09      	ldr	r3, [pc, #36]	@ (800eb94 <MPU6050_Read_Temp+0x5c>)
 800eb6e:	ed93 7a06 	vldr	s14, [r3, #24]
 800eb72:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800eb98 <MPU6050_Read_Temp+0x60>
 800eb76:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800eb7a:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 800eb9c <MPU6050_Read_Temp+0x64>
 800eb7e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800eb82:	4b04      	ldr	r3, [pc, #16]	@ (800eb94 <MPU6050_Read_Temp+0x5c>)
 800eb84:	edc3 7a06 	vstr	s15, [r3, #24]
}
 800eb88:	bf00      	nop
 800eb8a:	3708      	adds	r7, #8
 800eb8c:	46bd      	mov	sp, r7
 800eb8e:	bd80      	pop	{r7, pc}
 800eb90:	2000008e 	.word	0x2000008e
 800eb94:	200009a0 	.word	0x200009a0
 800eb98:	43aa0000 	.word	0x43aa0000
 800eb9c:	42121eb8 	.word	0x42121eb8

0800eba0 <MT6701_GetRawData>:
>>>>>>> f88694781bd54d0bca96bec7ac145bdac62fa329
#include "math_utils.h"
#include "time_utils.h"
// static unsigned int rotationCount, rotationCount_Last;

uint16_t MT6701_GetRawData(void)
{
<<<<<<< HEAD
 800d8bc:	b580      	push	{r7, lr}
 800d8be:	b084      	sub	sp, #16
 800d8c0:	af02      	add	r7, sp, #8
    uint16_t rawData;
    uint16_t txData = 0xFFFF;
 800d8c2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d8c6:	803b      	strh	r3, [r7, #0]
    uint16_t timeOut = 200;
 800d8c8:	23c8      	movs	r3, #200	@ 0xc8
 800d8ca:	80fb      	strh	r3, [r7, #6]

    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY)
 800d8cc:	e006      	b.n	800d8dc <MT6701_GetRawData+0x20>
    {
        if (timeOut-- == 0)
 800d8ce:	88fb      	ldrh	r3, [r7, #6]
 800d8d0:	1e5a      	subs	r2, r3, #1
 800d8d2:	80fa      	strh	r2, [r7, #6]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d101      	bne.n	800d8dc <MT6701_GetRawData+0x20>
        {
            //   FOC_log("SPI state error!\r\n");
            return 0; // 在超时时直接返回，避免继续执行后续代码
 800d8d8:	2300      	movs	r3, #0
 800d8da:	e025      	b.n	800d928 <MT6701_GetRawData+0x6c>
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY)
 800d8dc:	4814      	ldr	r0, [pc, #80]	@ (800d930 <MT6701_GetRawData+0x74>)
 800d8de:	f7fa fb42 	bl	8007f66 <HAL_SPI_GetState>
 800d8e2:	4603      	mov	r3, r0
 800d8e4:	2b01      	cmp	r3, #1
 800d8e6:	d1f2      	bne.n	800d8ce <MT6701_GetRawData+0x12>
=======
 800eba0:	b580      	push	{r7, lr}
 800eba2:	b084      	sub	sp, #16
 800eba4:	af02      	add	r7, sp, #8
    uint16_t rawData;
    uint16_t txData = 0xFFFF;
 800eba6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ebaa:	803b      	strh	r3, [r7, #0]
    uint16_t timeOut = 200;
 800ebac:	23c8      	movs	r3, #200	@ 0xc8
 800ebae:	80fb      	strh	r3, [r7, #6]

    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY)
 800ebb0:	e006      	b.n	800ebc0 <MT6701_GetRawData+0x20>
    {
        if (timeOut-- == 0)
 800ebb2:	88fb      	ldrh	r3, [r7, #6]
 800ebb4:	1e5a      	subs	r2, r3, #1
 800ebb6:	80fa      	strh	r2, [r7, #6]
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d101      	bne.n	800ebc0 <MT6701_GetRawData+0x20>
        {
            //   FOC_log("SPI state error!\r\n");
            return 0; // 在超时时直接返回，避免继续执行后续代码
 800ebbc:	2300      	movs	r3, #0
 800ebbe:	e025      	b.n	800ec0c <MT6701_GetRawData+0x6c>
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY)
 800ebc0:	4814      	ldr	r0, [pc, #80]	@ (800ec14 <MT6701_GetRawData+0x74>)
 800ebc2:	f7fa f992 	bl	8008eea <HAL_SPI_GetState>
 800ebc6:	4603      	mov	r3, r0
 800ebc8:	2b01      	cmp	r3, #1
 800ebca:	d1f2      	bne.n	800ebb2 <MT6701_GetRawData+0x12>
>>>>>>> f88694781bd54d0bca96bec7ac145bdac62fa329
        }
    }

    MT6701_CS_Enable;
<<<<<<< HEAD
 800d8e8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800d8ec:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800d8f0:	619a      	str	r2, [r3, #24]

    HAL_StatusTypeDef spiStatus = HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)&txData, (uint8_t *)&rawData, 1, HAL_MAX_DELAY);
 800d8f2:	1cba      	adds	r2, r7, #2
 800d8f4:	4639      	mov	r1, r7
 800d8f6:	f04f 33ff 	mov.w	r3, #4294967295
 800d8fa:	9300      	str	r3, [sp, #0]
 800d8fc:	2301      	movs	r3, #1
 800d8fe:	480c      	ldr	r0, [pc, #48]	@ (800d930 <MT6701_GetRawData+0x74>)
 800d900:	f7fa f90f 	bl	8007b22 <HAL_SPI_TransmitReceive>
 800d904:	4603      	mov	r3, r0
 800d906:	717b      	strb	r3, [r7, #5]
    if (spiStatus != HAL_OK)
 800d908:	797b      	ldrb	r3, [r7, #5]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d005      	beq.n	800d91a <MT6701_GetRawData+0x5e>
    {
        MT6701_CS_Disable;
 800d90e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800d912:	2210      	movs	r2, #16
 800d914:	619a      	str	r2, [r3, #24]
        //  FOC_log("MT6701 read data error!\r\n");
        return 0; // 在SPI传输错误时直接返回，避免继续执行后续代码
 800d916:	2300      	movs	r3, #0
 800d918:	e006      	b.n	800d928 <MT6701_GetRawData+0x6c>
    }

    MT6701_CS_Disable;
 800d91a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800d91e:	2210      	movs	r2, #16
 800d920:	619a      	str	r2, [r3, #24]

    return rawData >> 2; // 取高14位的角度数据
 800d922:	887b      	ldrh	r3, [r7, #2]
 800d924:	089b      	lsrs	r3, r3, #2
 800d926:	b29b      	uxth	r3, r3
}
 800d928:	4618      	mov	r0, r3
 800d92a:	3708      	adds	r7, #8
 800d92c:	46bd      	mov	sp, r7
 800d92e:	bd80      	pop	{r7, pc}
 800d930:	200004a0 	.word	0x200004a0

0800d934 <MT6701_GetRawAngle>:
=======
 800ebcc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800ebd0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800ebd4:	619a      	str	r2, [r3, #24]

    HAL_StatusTypeDef spiStatus = HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)&txData, (uint8_t *)&rawData, 1, HAL_MAX_DELAY);
 800ebd6:	1cba      	adds	r2, r7, #2
 800ebd8:	4639      	mov	r1, r7
 800ebda:	f04f 33ff 	mov.w	r3, #4294967295
 800ebde:	9300      	str	r3, [sp, #0]
 800ebe0:	2301      	movs	r3, #1
 800ebe2:	480c      	ldr	r0, [pc, #48]	@ (800ec14 <MT6701_GetRawData+0x74>)
 800ebe4:	f7f9 ff5f 	bl	8008aa6 <HAL_SPI_TransmitReceive>
 800ebe8:	4603      	mov	r3, r0
 800ebea:	717b      	strb	r3, [r7, #5]
    if (spiStatus != HAL_OK)
 800ebec:	797b      	ldrb	r3, [r7, #5]
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d005      	beq.n	800ebfe <MT6701_GetRawData+0x5e>
    {
        MT6701_CS_Disable;
 800ebf2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800ebf6:	2210      	movs	r2, #16
 800ebf8:	619a      	str	r2, [r3, #24]
        //  FOC_log("MT6701 read data error!\r\n");
        return 0; // 在SPI传输错误时直接返回，避免继续执行后续代码
 800ebfa:	2300      	movs	r3, #0
 800ebfc:	e006      	b.n	800ec0c <MT6701_GetRawData+0x6c>
    }

    MT6701_CS_Disable;
 800ebfe:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800ec02:	2210      	movs	r2, #16
 800ec04:	619a      	str	r2, [r3, #24]

    return rawData >> 2; // 取高14位的角度数据
 800ec06:	887b      	ldrh	r3, [r7, #2]
 800ec08:	089b      	lsrs	r3, r3, #2
 800ec0a:	b29b      	uxth	r3, r3
}
 800ec0c:	4618      	mov	r0, r3
 800ec0e:	3708      	adds	r7, #8
 800ec10:	46bd      	mov	sp, r7
 800ec12:	bd80      	pop	{r7, pc}
 800ec14:	200004f4 	.word	0x200004f4

0800ec18 <MT6701_GetRawAngle>:
>>>>>>> f88694781bd54d0bca96bec7ac145bdac62fa329

// 将传感器原始数据转化为弧度
float MT6701_GetRawAngle(void)
{
<<<<<<< HEAD
 800d934:	b580      	push	{r7, lr}
 800d936:	b082      	sub	sp, #8
 800d938:	af00      	add	r7, sp, #0
    uint16_t rawData = MT6701_GetRawData();
 800d93a:	f7ff ffbf 	bl	800d8bc <MT6701_GetRawData>
 800d93e:	4603      	mov	r3, r0
 800d940:	80fb      	strh	r3, [r7, #6]
    return (float)rawData / 16384.0f * _2PI;
 800d942:	88fb      	ldrh	r3, [r7, #6]
 800d944:	ee07 3a90 	vmov	s15, r3
 800d948:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d94c:	eddf 6a06 	vldr	s13, [pc, #24]	@ 800d968 <MT6701_GetRawAngle+0x34>
 800d950:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d954:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800d96c <MT6701_GetRawAngle+0x38>
 800d958:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800d95c:	eeb0 0a67 	vmov.f32	s0, s15
 800d960:	3708      	adds	r7, #8
 800d962:	46bd      	mov	sp, r7
 800d964:	bd80      	pop	{r7, pc}
 800d966:	bf00      	nop
 800d968:	46800000 	.word	0x46800000
 800d96c:	40c90fdb 	.word	0x40c90fdb

0800d970 <delay>:
=======
 800ec18:	b580      	push	{r7, lr}
 800ec1a:	b082      	sub	sp, #8
 800ec1c:	af00      	add	r7, sp, #0
    uint16_t rawData = MT6701_GetRawData();
 800ec1e:	f7ff ffbf 	bl	800eba0 <MT6701_GetRawData>
 800ec22:	4603      	mov	r3, r0
 800ec24:	80fb      	strh	r3, [r7, #6]
    return (float)rawData / 16384.0f * _2PI;
 800ec26:	88fb      	ldrh	r3, [r7, #6]
 800ec28:	ee07 3a90 	vmov	s15, r3
 800ec2c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ec30:	eddf 6a06 	vldr	s13, [pc, #24]	@ 800ec4c <MT6701_GetRawAngle+0x34>
 800ec34:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ec38:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800ec50 <MT6701_GetRawAngle+0x38>
 800ec3c:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800ec40:	eeb0 0a67 	vmov.f32	s0, s15
 800ec44:	3708      	adds	r7, #8
 800ec46:	46bd      	mov	sp, r7
 800ec48:	bd80      	pop	{r7, pc}
 800ec4a:	bf00      	nop
 800ec4c:	46800000 	.word	0x46800000
 800ec50:	40c90fdb 	.word	0x40c90fdb

0800ec54 <delay>:
>>>>>>> f88694781bd54d0bca96bec7ac145bdac62fa329
#include "time_utils.h"

__IO uint32_t m, tms, u, t0;

void delay(uint32_t _ms)
{
<<<<<<< HEAD
 800d970:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d974:	b082      	sub	sp, #8
 800d976:	af00      	add	r7, sp, #0
 800d978:	6078      	str	r0, [r7, #4]
    t0 = micros();
 800d97a:	f000 f83b 	bl	800d9f4 <micros>
 800d97e:	4602      	mov	r2, r0
 800d980:	460b      	mov	r3, r1
 800d982:	4b11      	ldr	r3, [pc, #68]	@ (800d9c8 <delay+0x58>)
 800d984:	601a      	str	r2, [r3, #0]
    while (micros() - t0 < _ms * 1000)
 800d986:	e000      	b.n	800d98a <delay+0x1a>
        __NOP();
 800d988:	bf00      	nop
    while (micros() - t0 < _ms * 1000)
 800d98a:	f000 f833 	bl	800d9f4 <micros>
 800d98e:	4602      	mov	r2, r0
 800d990:	460b      	mov	r3, r1
 800d992:	490d      	ldr	r1, [pc, #52]	@ (800d9c8 <delay+0x58>)
 800d994:	6809      	ldr	r1, [r1, #0]
 800d996:	2000      	movs	r0, #0
 800d998:	468a      	mov	sl, r1
 800d99a:	4683      	mov	fp, r0
 800d99c:	ebb2 040a 	subs.w	r4, r2, sl
 800d9a0:	eb63 050b 	sbc.w	r5, r3, fp
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800d9aa:	fb02 f303 	mul.w	r3, r2, r3
 800d9ae:	2200      	movs	r2, #0
 800d9b0:	4698      	mov	r8, r3
 800d9b2:	4691      	mov	r9, r2
 800d9b4:	4544      	cmp	r4, r8
 800d9b6:	eb75 0309 	sbcs.w	r3, r5, r9
 800d9ba:	d3e5      	bcc.n	800d988 <delay+0x18>
}
 800d9bc:	bf00      	nop
 800d9be:	bf00      	nop
 800d9c0:	3708      	adds	r7, #8
 800d9c2:	46bd      	mov	sp, r7
 800d9c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d9c8:	20000958 	.word	0x20000958

0800d9cc <LL_SYSTICK_IsActiveCounterFlag>:
=======
 800ec54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ec58:	b082      	sub	sp, #8
 800ec5a:	af00      	add	r7, sp, #0
 800ec5c:	6078      	str	r0, [r7, #4]
    t0 = micros();
 800ec5e:	f000 f83b 	bl	800ecd8 <micros>
 800ec62:	4602      	mov	r2, r0
 800ec64:	460b      	mov	r3, r1
 800ec66:	4b11      	ldr	r3, [pc, #68]	@ (800ecac <delay+0x58>)
 800ec68:	601a      	str	r2, [r3, #0]
    while (micros() - t0 < _ms * 1000)
 800ec6a:	e000      	b.n	800ec6e <delay+0x1a>
        __NOP();
 800ec6c:	bf00      	nop
    while (micros() - t0 < _ms * 1000)
 800ec6e:	f000 f833 	bl	800ecd8 <micros>
 800ec72:	4602      	mov	r2, r0
 800ec74:	460b      	mov	r3, r1
 800ec76:	490d      	ldr	r1, [pc, #52]	@ (800ecac <delay+0x58>)
 800ec78:	6809      	ldr	r1, [r1, #0]
 800ec7a:	2000      	movs	r0, #0
 800ec7c:	468a      	mov	sl, r1
 800ec7e:	4683      	mov	fp, r0
 800ec80:	ebb2 040a 	subs.w	r4, r2, sl
 800ec84:	eb63 050b 	sbc.w	r5, r3, fp
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800ec8e:	fb02 f303 	mul.w	r3, r2, r3
 800ec92:	2200      	movs	r2, #0
 800ec94:	4698      	mov	r8, r3
 800ec96:	4691      	mov	r9, r2
 800ec98:	4544      	cmp	r4, r8
 800ec9a:	eb75 0309 	sbcs.w	r3, r5, r9
 800ec9e:	d3e5      	bcc.n	800ec6c <delay+0x18>
}
 800eca0:	bf00      	nop
 800eca2:	bf00      	nop
 800eca4:	3708      	adds	r7, #8
 800eca6:	46bd      	mov	sp, r7
 800eca8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ecac:	200009c8 	.word	0x200009c8

0800ecb0 <LL_SYSTICK_IsActiveCounterFlag>:
>>>>>>> f88694781bd54d0bca96bec7ac145bdac62fa329
    while (_us--)
        __NOP();
}

__STATIC_INLINE uint32_t LL_SYSTICK_IsActiveCounterFlag()
{
<<<<<<< HEAD
 800d9cc:	b480      	push	{r7}
 800d9ce:	af00      	add	r7, sp, #0
    return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 800d9d0:	4b07      	ldr	r3, [pc, #28]	@ (800d9f0 <LL_SYSTICK_IsActiveCounterFlag+0x24>)
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d9d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d9dc:	bf0c      	ite	eq
 800d9de:	2301      	moveq	r3, #1
 800d9e0:	2300      	movne	r3, #0
 800d9e2:	b2db      	uxtb	r3, r3
}
 800d9e4:	4618      	mov	r0, r3
 800d9e6:	46bd      	mov	sp, r7
 800d9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ec:	4770      	bx	lr
 800d9ee:	bf00      	nop
 800d9f0:	e000e010 	.word	0xe000e010

0800d9f4 <micros>:

uint64_t micros()
{
 800d9f4:	b5b0      	push	{r4, r5, r7, lr}
 800d9f6:	af00      	add	r7, sp, #0
    /* Ensure COUNTFLAG is reset by reading SysTick control and status register */
    LL_SYSTICK_IsActiveCounterFlag();
 800d9f8:	f7ff ffe8 	bl	800d9cc <LL_SYSTICK_IsActiveCounterFlag>
    m = HAL_GetTick();
 800d9fc:	f7f4 fe9e 	bl	800273c <HAL_GetTick>
 800da00:	4603      	mov	r3, r0
 800da02:	4a1c      	ldr	r2, [pc, #112]	@ (800da74 <micros+0x80>)
 800da04:	6013      	str	r3, [r2, #0]
    tms = SysTick->LOAD + 1;
 800da06:	4b1c      	ldr	r3, [pc, #112]	@ (800da78 <micros+0x84>)
 800da08:	685b      	ldr	r3, [r3, #4]
 800da0a:	3301      	adds	r3, #1
 800da0c:	4a1b      	ldr	r2, [pc, #108]	@ (800da7c <micros+0x88>)
 800da0e:	6013      	str	r3, [r2, #0]
    u = tms - SysTick->VAL;
 800da10:	4b1a      	ldr	r3, [pc, #104]	@ (800da7c <micros+0x88>)
 800da12:	681a      	ldr	r2, [r3, #0]
 800da14:	4b18      	ldr	r3, [pc, #96]	@ (800da78 <micros+0x84>)
 800da16:	689b      	ldr	r3, [r3, #8]
 800da18:	1ad3      	subs	r3, r2, r3
 800da1a:	4a19      	ldr	r2, [pc, #100]	@ (800da80 <micros+0x8c>)
 800da1c:	6013      	str	r3, [r2, #0]
    if (LL_SYSTICK_IsActiveCounterFlag())
 800da1e:	f7ff ffd5 	bl	800d9cc <LL_SYSTICK_IsActiveCounterFlag>
 800da22:	4603      	mov	r3, r0
 800da24:	2b00      	cmp	r3, #0
 800da26:	d00b      	beq.n	800da40 <micros+0x4c>
    {
        m = HAL_GetTick();
 800da28:	f7f4 fe88 	bl	800273c <HAL_GetTick>
 800da2c:	4603      	mov	r3, r0
 800da2e:	4a11      	ldr	r2, [pc, #68]	@ (800da74 <micros+0x80>)
 800da30:	6013      	str	r3, [r2, #0]
        u = tms - SysTick->VAL;
 800da32:	4b12      	ldr	r3, [pc, #72]	@ (800da7c <micros+0x88>)
 800da34:	681a      	ldr	r2, [r3, #0]
 800da36:	4b10      	ldr	r3, [pc, #64]	@ (800da78 <micros+0x84>)
 800da38:	689b      	ldr	r3, [r3, #8]
 800da3a:	1ad3      	subs	r3, r2, r3
 800da3c:	4a10      	ldr	r2, [pc, #64]	@ (800da80 <micros+0x8c>)
 800da3e:	6013      	str	r3, [r2, #0]
    }
    return (m * 1000 + (u * 1000) / tms);
 800da40:	4b0c      	ldr	r3, [pc, #48]	@ (800da74 <micros+0x80>)
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800da48:	fb03 f202 	mul.w	r2, r3, r2
 800da4c:	4b0c      	ldr	r3, [pc, #48]	@ (800da80 <micros+0x8c>)
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800da54:	fb03 f101 	mul.w	r1, r3, r1
 800da58:	4b08      	ldr	r3, [pc, #32]	@ (800da7c <micros+0x88>)
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	fbb1 f3f3 	udiv	r3, r1, r3
 800da60:	4413      	add	r3, r2
 800da62:	2200      	movs	r2, #0
 800da64:	461c      	mov	r4, r3
 800da66:	4615      	mov	r5, r2
 800da68:	4622      	mov	r2, r4
 800da6a:	462b      	mov	r3, r5
}
 800da6c:	4610      	mov	r0, r2
 800da6e:	4619      	mov	r1, r3
 800da70:	bdb0      	pop	{r4, r5, r7, pc}
 800da72:	bf00      	nop
 800da74:	2000094c 	.word	0x2000094c
 800da78:	e000e010 	.word	0xe000e010
 800da7c:	20000950 	.word	0x20000950
 800da80:	20000954 	.word	0x20000954

0800da84 <userMain>:
=======
 800ecb0:	b480      	push	{r7}
 800ecb2:	af00      	add	r7, sp, #0
    return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 800ecb4:	4b07      	ldr	r3, [pc, #28]	@ (800ecd4 <LL_SYSTICK_IsActiveCounterFlag+0x24>)
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ecbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ecc0:	bf0c      	ite	eq
 800ecc2:	2301      	moveq	r3, #1
 800ecc4:	2300      	movne	r3, #0
 800ecc6:	b2db      	uxtb	r3, r3
}
 800ecc8:	4618      	mov	r0, r3
 800ecca:	46bd      	mov	sp, r7
 800eccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd0:	4770      	bx	lr
 800ecd2:	bf00      	nop
 800ecd4:	e000e010 	.word	0xe000e010

0800ecd8 <micros>:

uint64_t micros()
{
 800ecd8:	b5b0      	push	{r4, r5, r7, lr}
 800ecda:	af00      	add	r7, sp, #0
    /* Ensure COUNTFLAG is reset by reading SysTick control and status register */
    LL_SYSTICK_IsActiveCounterFlag();
 800ecdc:	f7ff ffe8 	bl	800ecb0 <LL_SYSTICK_IsActiveCounterFlag>
    m = HAL_GetTick();
 800ece0:	f7f3 fdde 	bl	80028a0 <HAL_GetTick>
 800ece4:	4603      	mov	r3, r0
 800ece6:	4a1c      	ldr	r2, [pc, #112]	@ (800ed58 <micros+0x80>)
 800ece8:	6013      	str	r3, [r2, #0]
    tms = SysTick->LOAD + 1;
 800ecea:	4b1c      	ldr	r3, [pc, #112]	@ (800ed5c <micros+0x84>)
 800ecec:	685b      	ldr	r3, [r3, #4]
 800ecee:	3301      	adds	r3, #1
 800ecf0:	4a1b      	ldr	r2, [pc, #108]	@ (800ed60 <micros+0x88>)
 800ecf2:	6013      	str	r3, [r2, #0]
    u = tms - SysTick->VAL;
 800ecf4:	4b1a      	ldr	r3, [pc, #104]	@ (800ed60 <micros+0x88>)
 800ecf6:	681a      	ldr	r2, [r3, #0]
 800ecf8:	4b18      	ldr	r3, [pc, #96]	@ (800ed5c <micros+0x84>)
 800ecfa:	689b      	ldr	r3, [r3, #8]
 800ecfc:	1ad3      	subs	r3, r2, r3
 800ecfe:	4a19      	ldr	r2, [pc, #100]	@ (800ed64 <micros+0x8c>)
 800ed00:	6013      	str	r3, [r2, #0]
    if (LL_SYSTICK_IsActiveCounterFlag())
 800ed02:	f7ff ffd5 	bl	800ecb0 <LL_SYSTICK_IsActiveCounterFlag>
 800ed06:	4603      	mov	r3, r0
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d00b      	beq.n	800ed24 <micros+0x4c>
    {
        m = HAL_GetTick();
 800ed0c:	f7f3 fdc8 	bl	80028a0 <HAL_GetTick>
 800ed10:	4603      	mov	r3, r0
 800ed12:	4a11      	ldr	r2, [pc, #68]	@ (800ed58 <micros+0x80>)
 800ed14:	6013      	str	r3, [r2, #0]
        u = tms - SysTick->VAL;
 800ed16:	4b12      	ldr	r3, [pc, #72]	@ (800ed60 <micros+0x88>)
 800ed18:	681a      	ldr	r2, [r3, #0]
 800ed1a:	4b10      	ldr	r3, [pc, #64]	@ (800ed5c <micros+0x84>)
 800ed1c:	689b      	ldr	r3, [r3, #8]
 800ed1e:	1ad3      	subs	r3, r2, r3
 800ed20:	4a10      	ldr	r2, [pc, #64]	@ (800ed64 <micros+0x8c>)
 800ed22:	6013      	str	r3, [r2, #0]
    }
    return (m * 1000 + (u * 1000) / tms);
 800ed24:	4b0c      	ldr	r3, [pc, #48]	@ (800ed58 <micros+0x80>)
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800ed2c:	fb03 f202 	mul.w	r2, r3, r2
 800ed30:	4b0c      	ldr	r3, [pc, #48]	@ (800ed64 <micros+0x8c>)
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800ed38:	fb03 f101 	mul.w	r1, r3, r1
 800ed3c:	4b08      	ldr	r3, [pc, #32]	@ (800ed60 <micros+0x88>)
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	fbb1 f3f3 	udiv	r3, r1, r3
 800ed44:	4413      	add	r3, r2
 800ed46:	2200      	movs	r2, #0
 800ed48:	461c      	mov	r4, r3
 800ed4a:	4615      	mov	r5, r2
 800ed4c:	4622      	mov	r2, r4
 800ed4e:	462b      	mov	r3, r5
}
 800ed50:	4610      	mov	r0, r2
 800ed52:	4619      	mov	r1, r3
 800ed54:	bdb0      	pop	{r4, r5, r7, pc}
 800ed56:	bf00      	nop
 800ed58:	200009bc 	.word	0x200009bc
 800ed5c:	e000e010 	.word	0xe000e010
 800ed60:	200009c0 	.word	0x200009c0
 800ed64:	200009c4 	.word	0x200009c4

0800ed68 <userMain>:
>>>>>>> f88694781bd54d0bca96bec7ac145bdac62fa329
float HallTheta = 0;
float HallSpeed = 0;
uint8_t HallReadTemp = 0;
//static bool powerLost;
void userMain(void)
{
<<<<<<< HEAD
 800da84:	b580      	push	{r7, lr}
 800da86:	af00      	add	r7, sp, #0

	if (get5MsFlag())
 800da88:	f000 f91e 	bl	800dcc8 <get5MsFlag>
 800da8c:	4603      	mov	r3, r0
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d001      	beq.n	800da96 <userMain+0x12>
	{
		keyScan();
 800da92:	f7ff fd1d 	bl	800d4d0 <keyScan>
	}

	if (get100MsFlag())
 800da96:	f000 f92b 	bl	800dcf0 <get100MsFlag>
 800da9a:	4603      	mov	r3, r0
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d001      	beq.n	800daa4 <userMain+0x20>
	{
		appRunning();
 800daa0:	f7ff fa4c 	bl	800cf3c <appRunning>
=======
 800ed68:	b580      	push	{r7, lr}
 800ed6a:	af00      	add	r7, sp, #0

	if (get5MsFlag())
 800ed6c:	f000 f91e 	bl	800efac <get5MsFlag>
 800ed70:	4603      	mov	r3, r0
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d001      	beq.n	800ed7a <userMain+0x12>
	{
		keyScan();
 800ed76:	f7ff fb7d 	bl	800e474 <keyScan>
	}

	if (get100MsFlag())
 800ed7a:	f000 f92b 	bl	800efd4 <get100MsFlag>
 800ed7e:	4603      	mov	r3, r0
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d001      	beq.n	800ed88 <userMain+0x20>
	{
		appRunning();
 800ed84:	f7ff f8a0 	bl	800dec8 <appRunning>
>>>>>>> f88694781bd54d0bca96bec7ac145bdac62fa329
	}
#if SHOW_WAVE == 0 //&& COMMAMNDER == 0
	// if (get500MsFlag())
	if (getOneSecFlag())
<<<<<<< HEAD
 800daa4:	f000 f8fc 	bl	800dca0 <getOneSecFlag>
 800daa8:	4603      	mov	r3, r0
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d001      	beq.n	800dab2 <userMain+0x2e>
	{
		printLog();
 800daae:	f7ff fc31 	bl	800d314 <printLog>
	}
#endif
}
 800dab2:	bf00      	nop
 800dab4:	bd80      	pop	{r7, pc}

0800dab6 <map>:

float map(float x, float in_min, float in_max, float out_min, float out_max)
{
 800dab6:	b480      	push	{r7}
 800dab8:	b087      	sub	sp, #28
 800daba:	af00      	add	r7, sp, #0
 800dabc:	ed87 0a05 	vstr	s0, [r7, #20]
 800dac0:	edc7 0a04 	vstr	s1, [r7, #16]
 800dac4:	ed87 1a03 	vstr	s2, [r7, #12]
 800dac8:	edc7 1a02 	vstr	s3, [r7, #8]
 800dacc:	ed87 2a01 	vstr	s4, [r7, #4]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800dad0:	ed97 7a05 	vldr	s14, [r7, #20]
 800dad4:	edd7 7a04 	vldr	s15, [r7, #16]
 800dad8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800dadc:	edd7 6a01 	vldr	s13, [r7, #4]
 800dae0:	edd7 7a02 	vldr	s15, [r7, #8]
 800dae4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800dae8:	ee67 6a27 	vmul.f32	s13, s14, s15
 800daec:	ed97 7a03 	vldr	s14, [r7, #12]
 800daf0:	edd7 7a04 	vldr	s15, [r7, #16]
 800daf4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800daf8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dafc:	edd7 7a02 	vldr	s15, [r7, #8]
 800db00:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800db04:	eeb0 0a67 	vmov.f32	s0, s15
 800db08:	371c      	adds	r7, #28
 800db0a:	46bd      	mov	sp, r7
 800db0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db10:	4770      	bx	lr
	...

0800db14 <dealPer100us>:
=======
 800ed88:	f000 f8fc 	bl	800ef84 <getOneSecFlag>
 800ed8c:	4603      	mov	r3, r0
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d001      	beq.n	800ed96 <userMain+0x2e>
	{
		printLog();
 800ed92:	f7ff fa91 	bl	800e2b8 <printLog>
	}
#endif
}
 800ed96:	bf00      	nop
 800ed98:	bd80      	pop	{r7, pc}

0800ed9a <map>:

float map(float x, float in_min, float in_max, float out_min, float out_max)
{
 800ed9a:	b480      	push	{r7}
 800ed9c:	b087      	sub	sp, #28
 800ed9e:	af00      	add	r7, sp, #0
 800eda0:	ed87 0a05 	vstr	s0, [r7, #20]
 800eda4:	edc7 0a04 	vstr	s1, [r7, #16]
 800eda8:	ed87 1a03 	vstr	s2, [r7, #12]
 800edac:	edc7 1a02 	vstr	s3, [r7, #8]
 800edb0:	ed87 2a01 	vstr	s4, [r7, #4]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800edb4:	ed97 7a05 	vldr	s14, [r7, #20]
 800edb8:	edd7 7a04 	vldr	s15, [r7, #16]
 800edbc:	ee37 7a67 	vsub.f32	s14, s14, s15
 800edc0:	edd7 6a01 	vldr	s13, [r7, #4]
 800edc4:	edd7 7a02 	vldr	s15, [r7, #8]
 800edc8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800edcc:	ee67 6a27 	vmul.f32	s13, s14, s15
 800edd0:	ed97 7a03 	vldr	s14, [r7, #12]
 800edd4:	edd7 7a04 	vldr	s15, [r7, #16]
 800edd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800eddc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ede0:	edd7 7a02 	vldr	s15, [r7, #8]
 800ede4:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800ede8:	eeb0 0a67 	vmov.f32	s0, s15
 800edec:	371c      	adds	r7, #28
 800edee:	46bd      	mov	sp, r7
 800edf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf4:	4770      	bx	lr
	...

0800edf8 <dealPer100us>:
>>>>>>> f88694781bd54d0bca96bec7ac145bdac62fa329


static bool _5msFlag, _10msFlag, _20msFlag, _30msFlag, _100msFlag, _500msFlag, _1s;
static void dealPerMs();
void dealPer100us()
{
<<<<<<< HEAD
 800db14:	b580      	push	{r7, lr}
 800db16:	af00      	add	r7, sp, #0
    static unsigned char cnt;
    if (++cnt >= 10)
 800db18:	4b08      	ldr	r3, [pc, #32]	@ (800db3c <dealPer100us+0x28>)
 800db1a:	781b      	ldrb	r3, [r3, #0]
 800db1c:	3301      	adds	r3, #1
 800db1e:	b2da      	uxtb	r2, r3
 800db20:	4b06      	ldr	r3, [pc, #24]	@ (800db3c <dealPer100us+0x28>)
 800db22:	701a      	strb	r2, [r3, #0]
 800db24:	4b05      	ldr	r3, [pc, #20]	@ (800db3c <dealPer100us+0x28>)
 800db26:	781b      	ldrb	r3, [r3, #0]
 800db28:	2b09      	cmp	r3, #9
 800db2a:	d904      	bls.n	800db36 <dealPer100us+0x22>
    {
        cnt = 0;
 800db2c:	4b03      	ldr	r3, [pc, #12]	@ (800db3c <dealPer100us+0x28>)
 800db2e:	2200      	movs	r2, #0
 800db30:	701a      	strb	r2, [r3, #0]
        dealPerMs();
 800db32:	f000 f805 	bl	800db40 <dealPerMs>
    }

}
 800db36:	bf00      	nop
 800db38:	bd80      	pop	{r7, pc}
 800db3a:	bf00      	nop
 800db3c:	2000096b 	.word	0x2000096b

0800db40 <dealPerMs>:

static void dealPerMs()
{
 800db40:	b480      	push	{r7}
 800db42:	af00      	add	r7, sp, #0
    static unsigned char _5msCnt, _30msCnt, _20msCnt, _100msCnt, _10msCnt;
    static uint _500msCnt, _1000msCnt;
    if (++_5msCnt >= 5)
 800db44:	4b45      	ldr	r3, [pc, #276]	@ (800dc5c <dealPerMs+0x11c>)
 800db46:	781b      	ldrb	r3, [r3, #0]
 800db48:	3301      	adds	r3, #1
 800db4a:	b2da      	uxtb	r2, r3
 800db4c:	4b43      	ldr	r3, [pc, #268]	@ (800dc5c <dealPerMs+0x11c>)
 800db4e:	701a      	strb	r2, [r3, #0]
 800db50:	4b42      	ldr	r3, [pc, #264]	@ (800dc5c <dealPerMs+0x11c>)
 800db52:	781b      	ldrb	r3, [r3, #0]
 800db54:	2b04      	cmp	r3, #4
 800db56:	d905      	bls.n	800db64 <dealPerMs+0x24>
    {
        _5msCnt = 0;
 800db58:	4b40      	ldr	r3, [pc, #256]	@ (800dc5c <dealPerMs+0x11c>)
 800db5a:	2200      	movs	r2, #0
 800db5c:	701a      	strb	r2, [r3, #0]
        _5msFlag = 1;
 800db5e:	4b40      	ldr	r3, [pc, #256]	@ (800dc60 <dealPerMs+0x120>)
 800db60:	2201      	movs	r2, #1
 800db62:	701a      	strb	r2, [r3, #0]
    }

    if (++_10msCnt >= 10)
 800db64:	4b3f      	ldr	r3, [pc, #252]	@ (800dc64 <dealPerMs+0x124>)
 800db66:	781b      	ldrb	r3, [r3, #0]
 800db68:	3301      	adds	r3, #1
 800db6a:	b2da      	uxtb	r2, r3
 800db6c:	4b3d      	ldr	r3, [pc, #244]	@ (800dc64 <dealPerMs+0x124>)
 800db6e:	701a      	strb	r2, [r3, #0]
 800db70:	4b3c      	ldr	r3, [pc, #240]	@ (800dc64 <dealPerMs+0x124>)
 800db72:	781b      	ldrb	r3, [r3, #0]
 800db74:	2b09      	cmp	r3, #9
 800db76:	d905      	bls.n	800db84 <dealPerMs+0x44>
    {
        _10msCnt = 0;
 800db78:	4b3a      	ldr	r3, [pc, #232]	@ (800dc64 <dealPerMs+0x124>)
 800db7a:	2200      	movs	r2, #0
 800db7c:	701a      	strb	r2, [r3, #0]
        _10msFlag = 1;
 800db7e:	4b3a      	ldr	r3, [pc, #232]	@ (800dc68 <dealPerMs+0x128>)
 800db80:	2201      	movs	r2, #1
 800db82:	701a      	strb	r2, [r3, #0]
    }

    if (++_20msCnt >= 20)
 800db84:	4b39      	ldr	r3, [pc, #228]	@ (800dc6c <dealPerMs+0x12c>)
 800db86:	781b      	ldrb	r3, [r3, #0]
 800db88:	3301      	adds	r3, #1
 800db8a:	b2da      	uxtb	r2, r3
 800db8c:	4b37      	ldr	r3, [pc, #220]	@ (800dc6c <dealPerMs+0x12c>)
 800db8e:	701a      	strb	r2, [r3, #0]
 800db90:	4b36      	ldr	r3, [pc, #216]	@ (800dc6c <dealPerMs+0x12c>)
 800db92:	781b      	ldrb	r3, [r3, #0]
 800db94:	2b13      	cmp	r3, #19
 800db96:	d905      	bls.n	800dba4 <dealPerMs+0x64>
    {
        _20msCnt = 0;
 800db98:	4b34      	ldr	r3, [pc, #208]	@ (800dc6c <dealPerMs+0x12c>)
 800db9a:	2200      	movs	r2, #0
 800db9c:	701a      	strb	r2, [r3, #0]
        _20msFlag = 1;
 800db9e:	4b34      	ldr	r3, [pc, #208]	@ (800dc70 <dealPerMs+0x130>)
 800dba0:	2201      	movs	r2, #1
 800dba2:	701a      	strb	r2, [r3, #0]
    }

    if (++_30msCnt >= 30)
 800dba4:	4b33      	ldr	r3, [pc, #204]	@ (800dc74 <dealPerMs+0x134>)
 800dba6:	781b      	ldrb	r3, [r3, #0]
 800dba8:	3301      	adds	r3, #1
 800dbaa:	b2da      	uxtb	r2, r3
 800dbac:	4b31      	ldr	r3, [pc, #196]	@ (800dc74 <dealPerMs+0x134>)
 800dbae:	701a      	strb	r2, [r3, #0]
 800dbb0:	4b30      	ldr	r3, [pc, #192]	@ (800dc74 <dealPerMs+0x134>)
 800dbb2:	781b      	ldrb	r3, [r3, #0]
 800dbb4:	2b1d      	cmp	r3, #29
 800dbb6:	d905      	bls.n	800dbc4 <dealPerMs+0x84>
    {
        _30msCnt = 0;
 800dbb8:	4b2e      	ldr	r3, [pc, #184]	@ (800dc74 <dealPerMs+0x134>)
 800dbba:	2200      	movs	r2, #0
 800dbbc:	701a      	strb	r2, [r3, #0]
        _30msFlag = 1;
 800dbbe:	4b2e      	ldr	r3, [pc, #184]	@ (800dc78 <dealPerMs+0x138>)
 800dbc0:	2201      	movs	r2, #1
 800dbc2:	701a      	strb	r2, [r3, #0]
    }

    if (++_100msCnt >= 100)
 800dbc4:	4b2d      	ldr	r3, [pc, #180]	@ (800dc7c <dealPerMs+0x13c>)
 800dbc6:	781b      	ldrb	r3, [r3, #0]
 800dbc8:	3301      	adds	r3, #1
 800dbca:	b2da      	uxtb	r2, r3
 800dbcc:	4b2b      	ldr	r3, [pc, #172]	@ (800dc7c <dealPerMs+0x13c>)
 800dbce:	701a      	strb	r2, [r3, #0]
 800dbd0:	4b2a      	ldr	r3, [pc, #168]	@ (800dc7c <dealPerMs+0x13c>)
 800dbd2:	781b      	ldrb	r3, [r3, #0]
 800dbd4:	2b63      	cmp	r3, #99	@ 0x63
 800dbd6:	d905      	bls.n	800dbe4 <dealPerMs+0xa4>
    {
        _100msCnt = 0;
 800dbd8:	4b28      	ldr	r3, [pc, #160]	@ (800dc7c <dealPerMs+0x13c>)
 800dbda:	2200      	movs	r2, #0
 800dbdc:	701a      	strb	r2, [r3, #0]
        _100msFlag = 1;
 800dbde:	4b28      	ldr	r3, [pc, #160]	@ (800dc80 <dealPerMs+0x140>)
 800dbe0:	2201      	movs	r2, #1
 800dbe2:	701a      	strb	r2, [r3, #0]
    }

    if (++_500msCnt >= 500)
 800dbe4:	4b27      	ldr	r3, [pc, #156]	@ (800dc84 <dealPerMs+0x144>)
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	3301      	adds	r3, #1
 800dbea:	4a26      	ldr	r2, [pc, #152]	@ (800dc84 <dealPerMs+0x144>)
 800dbec:	6013      	str	r3, [r2, #0]
 800dbee:	4b25      	ldr	r3, [pc, #148]	@ (800dc84 <dealPerMs+0x144>)
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800dbf6:	d305      	bcc.n	800dc04 <dealPerMs+0xc4>
    {
        _500msCnt = 0;
 800dbf8:	4b22      	ldr	r3, [pc, #136]	@ (800dc84 <dealPerMs+0x144>)
 800dbfa:	2200      	movs	r2, #0
 800dbfc:	601a      	str	r2, [r3, #0]
        _500msFlag = 1;
 800dbfe:	4b22      	ldr	r3, [pc, #136]	@ (800dc88 <dealPerMs+0x148>)
 800dc00:	2201      	movs	r2, #1
 800dc02:	701a      	strb	r2, [r3, #0]
    }
    if (++_1000msCnt >= 1000)
 800dc04:	4b21      	ldr	r3, [pc, #132]	@ (800dc8c <dealPerMs+0x14c>)
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	3301      	adds	r3, #1
 800dc0a:	4a20      	ldr	r2, [pc, #128]	@ (800dc8c <dealPerMs+0x14c>)
 800dc0c:	6013      	str	r3, [r2, #0]
 800dc0e:	4b1f      	ldr	r3, [pc, #124]	@ (800dc8c <dealPerMs+0x14c>)
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800dc16:	d305      	bcc.n	800dc24 <dealPerMs+0xe4>
    {
        _1000msCnt = 0;
 800dc18:	4b1c      	ldr	r3, [pc, #112]	@ (800dc8c <dealPerMs+0x14c>)
 800dc1a:	2200      	movs	r2, #0
 800dc1c:	601a      	str	r2, [r3, #0]
        _1s = 1;
 800dc1e:	4b1c      	ldr	r3, [pc, #112]	@ (800dc90 <dealPerMs+0x150>)
 800dc20:	2201      	movs	r2, #1
 800dc22:	701a      	strb	r2, [r3, #0]
=======
 800edf8:	b580      	push	{r7, lr}
 800edfa:	af00      	add	r7, sp, #0
    static unsigned char cnt;
    if (++cnt >= 10)
 800edfc:	4b08      	ldr	r3, [pc, #32]	@ (800ee20 <dealPer100us+0x28>)
 800edfe:	781b      	ldrb	r3, [r3, #0]
 800ee00:	3301      	adds	r3, #1
 800ee02:	b2da      	uxtb	r2, r3
 800ee04:	4b06      	ldr	r3, [pc, #24]	@ (800ee20 <dealPer100us+0x28>)
 800ee06:	701a      	strb	r2, [r3, #0]
 800ee08:	4b05      	ldr	r3, [pc, #20]	@ (800ee20 <dealPer100us+0x28>)
 800ee0a:	781b      	ldrb	r3, [r3, #0]
 800ee0c:	2b09      	cmp	r3, #9
 800ee0e:	d904      	bls.n	800ee1a <dealPer100us+0x22>
    {
        cnt = 0;
 800ee10:	4b03      	ldr	r3, [pc, #12]	@ (800ee20 <dealPer100us+0x28>)
 800ee12:	2200      	movs	r2, #0
 800ee14:	701a      	strb	r2, [r3, #0]
        dealPerMs();
 800ee16:	f000 f805 	bl	800ee24 <dealPerMs>
    }

}
 800ee1a:	bf00      	nop
 800ee1c:	bd80      	pop	{r7, pc}
 800ee1e:	bf00      	nop
 800ee20:	200009db 	.word	0x200009db

0800ee24 <dealPerMs>:

static void dealPerMs()
{
 800ee24:	b480      	push	{r7}
 800ee26:	af00      	add	r7, sp, #0
    static unsigned char _5msCnt, _30msCnt, _20msCnt, _100msCnt, _10msCnt;
    static uint _500msCnt, _1000msCnt;
    if (++_5msCnt >= 5)
 800ee28:	4b45      	ldr	r3, [pc, #276]	@ (800ef40 <dealPerMs+0x11c>)
 800ee2a:	781b      	ldrb	r3, [r3, #0]
 800ee2c:	3301      	adds	r3, #1
 800ee2e:	b2da      	uxtb	r2, r3
 800ee30:	4b43      	ldr	r3, [pc, #268]	@ (800ef40 <dealPerMs+0x11c>)
 800ee32:	701a      	strb	r2, [r3, #0]
 800ee34:	4b42      	ldr	r3, [pc, #264]	@ (800ef40 <dealPerMs+0x11c>)
 800ee36:	781b      	ldrb	r3, [r3, #0]
 800ee38:	2b04      	cmp	r3, #4
 800ee3a:	d905      	bls.n	800ee48 <dealPerMs+0x24>
    {
        _5msCnt = 0;
 800ee3c:	4b40      	ldr	r3, [pc, #256]	@ (800ef40 <dealPerMs+0x11c>)
 800ee3e:	2200      	movs	r2, #0
 800ee40:	701a      	strb	r2, [r3, #0]
        _5msFlag = 1;
 800ee42:	4b40      	ldr	r3, [pc, #256]	@ (800ef44 <dealPerMs+0x120>)
 800ee44:	2201      	movs	r2, #1
 800ee46:	701a      	strb	r2, [r3, #0]
    }

    if (++_10msCnt >= 10)
 800ee48:	4b3f      	ldr	r3, [pc, #252]	@ (800ef48 <dealPerMs+0x124>)
 800ee4a:	781b      	ldrb	r3, [r3, #0]
 800ee4c:	3301      	adds	r3, #1
 800ee4e:	b2da      	uxtb	r2, r3
 800ee50:	4b3d      	ldr	r3, [pc, #244]	@ (800ef48 <dealPerMs+0x124>)
 800ee52:	701a      	strb	r2, [r3, #0]
 800ee54:	4b3c      	ldr	r3, [pc, #240]	@ (800ef48 <dealPerMs+0x124>)
 800ee56:	781b      	ldrb	r3, [r3, #0]
 800ee58:	2b09      	cmp	r3, #9
 800ee5a:	d905      	bls.n	800ee68 <dealPerMs+0x44>
    {
        _10msCnt = 0;
 800ee5c:	4b3a      	ldr	r3, [pc, #232]	@ (800ef48 <dealPerMs+0x124>)
 800ee5e:	2200      	movs	r2, #0
 800ee60:	701a      	strb	r2, [r3, #0]
        _10msFlag = 1;
 800ee62:	4b3a      	ldr	r3, [pc, #232]	@ (800ef4c <dealPerMs+0x128>)
 800ee64:	2201      	movs	r2, #1
 800ee66:	701a      	strb	r2, [r3, #0]
    }

    if (++_20msCnt >= 20)
 800ee68:	4b39      	ldr	r3, [pc, #228]	@ (800ef50 <dealPerMs+0x12c>)
 800ee6a:	781b      	ldrb	r3, [r3, #0]
 800ee6c:	3301      	adds	r3, #1
 800ee6e:	b2da      	uxtb	r2, r3
 800ee70:	4b37      	ldr	r3, [pc, #220]	@ (800ef50 <dealPerMs+0x12c>)
 800ee72:	701a      	strb	r2, [r3, #0]
 800ee74:	4b36      	ldr	r3, [pc, #216]	@ (800ef50 <dealPerMs+0x12c>)
 800ee76:	781b      	ldrb	r3, [r3, #0]
 800ee78:	2b13      	cmp	r3, #19
 800ee7a:	d905      	bls.n	800ee88 <dealPerMs+0x64>
    {
        _20msCnt = 0;
 800ee7c:	4b34      	ldr	r3, [pc, #208]	@ (800ef50 <dealPerMs+0x12c>)
 800ee7e:	2200      	movs	r2, #0
 800ee80:	701a      	strb	r2, [r3, #0]
        _20msFlag = 1;
 800ee82:	4b34      	ldr	r3, [pc, #208]	@ (800ef54 <dealPerMs+0x130>)
 800ee84:	2201      	movs	r2, #1
 800ee86:	701a      	strb	r2, [r3, #0]
    }

    if (++_30msCnt >= 30)
 800ee88:	4b33      	ldr	r3, [pc, #204]	@ (800ef58 <dealPerMs+0x134>)
 800ee8a:	781b      	ldrb	r3, [r3, #0]
 800ee8c:	3301      	adds	r3, #1
 800ee8e:	b2da      	uxtb	r2, r3
 800ee90:	4b31      	ldr	r3, [pc, #196]	@ (800ef58 <dealPerMs+0x134>)
 800ee92:	701a      	strb	r2, [r3, #0]
 800ee94:	4b30      	ldr	r3, [pc, #192]	@ (800ef58 <dealPerMs+0x134>)
 800ee96:	781b      	ldrb	r3, [r3, #0]
 800ee98:	2b1d      	cmp	r3, #29
 800ee9a:	d905      	bls.n	800eea8 <dealPerMs+0x84>
    {
        _30msCnt = 0;
 800ee9c:	4b2e      	ldr	r3, [pc, #184]	@ (800ef58 <dealPerMs+0x134>)
 800ee9e:	2200      	movs	r2, #0
 800eea0:	701a      	strb	r2, [r3, #0]
        _30msFlag = 1;
 800eea2:	4b2e      	ldr	r3, [pc, #184]	@ (800ef5c <dealPerMs+0x138>)
 800eea4:	2201      	movs	r2, #1
 800eea6:	701a      	strb	r2, [r3, #0]
    }

    if (++_100msCnt >= 100)
 800eea8:	4b2d      	ldr	r3, [pc, #180]	@ (800ef60 <dealPerMs+0x13c>)
 800eeaa:	781b      	ldrb	r3, [r3, #0]
 800eeac:	3301      	adds	r3, #1
 800eeae:	b2da      	uxtb	r2, r3
 800eeb0:	4b2b      	ldr	r3, [pc, #172]	@ (800ef60 <dealPerMs+0x13c>)
 800eeb2:	701a      	strb	r2, [r3, #0]
 800eeb4:	4b2a      	ldr	r3, [pc, #168]	@ (800ef60 <dealPerMs+0x13c>)
 800eeb6:	781b      	ldrb	r3, [r3, #0]
 800eeb8:	2b63      	cmp	r3, #99	@ 0x63
 800eeba:	d905      	bls.n	800eec8 <dealPerMs+0xa4>
    {
        _100msCnt = 0;
 800eebc:	4b28      	ldr	r3, [pc, #160]	@ (800ef60 <dealPerMs+0x13c>)
 800eebe:	2200      	movs	r2, #0
 800eec0:	701a      	strb	r2, [r3, #0]
        _100msFlag = 1;
 800eec2:	4b28      	ldr	r3, [pc, #160]	@ (800ef64 <dealPerMs+0x140>)
 800eec4:	2201      	movs	r2, #1
 800eec6:	701a      	strb	r2, [r3, #0]
    }

    if (++_500msCnt >= 500)
 800eec8:	4b27      	ldr	r3, [pc, #156]	@ (800ef68 <dealPerMs+0x144>)
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	3301      	adds	r3, #1
 800eece:	4a26      	ldr	r2, [pc, #152]	@ (800ef68 <dealPerMs+0x144>)
 800eed0:	6013      	str	r3, [r2, #0]
 800eed2:	4b25      	ldr	r3, [pc, #148]	@ (800ef68 <dealPerMs+0x144>)
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800eeda:	d305      	bcc.n	800eee8 <dealPerMs+0xc4>
    {
        _500msCnt = 0;
 800eedc:	4b22      	ldr	r3, [pc, #136]	@ (800ef68 <dealPerMs+0x144>)
 800eede:	2200      	movs	r2, #0
 800eee0:	601a      	str	r2, [r3, #0]
        _500msFlag = 1;
 800eee2:	4b22      	ldr	r3, [pc, #136]	@ (800ef6c <dealPerMs+0x148>)
 800eee4:	2201      	movs	r2, #1
 800eee6:	701a      	strb	r2, [r3, #0]
    }
    if (++_1000msCnt >= 1000)
 800eee8:	4b21      	ldr	r3, [pc, #132]	@ (800ef70 <dealPerMs+0x14c>)
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	3301      	adds	r3, #1
 800eeee:	4a20      	ldr	r2, [pc, #128]	@ (800ef70 <dealPerMs+0x14c>)
 800eef0:	6013      	str	r3, [r2, #0]
 800eef2:	4b1f      	ldr	r3, [pc, #124]	@ (800ef70 <dealPerMs+0x14c>)
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800eefa:	d305      	bcc.n	800ef08 <dealPerMs+0xe4>
    {
        _1000msCnt = 0;
 800eefc:	4b1c      	ldr	r3, [pc, #112]	@ (800ef70 <dealPerMs+0x14c>)
 800eefe:	2200      	movs	r2, #0
 800ef00:	601a      	str	r2, [r3, #0]
        _1s = 1;
 800ef02:	4b1c      	ldr	r3, [pc, #112]	@ (800ef74 <dealPerMs+0x150>)
 800ef04:	2201      	movs	r2, #1
 800ef06:	701a      	strb	r2, [r3, #0]
>>>>>>> f88694781bd54d0bca96bec7ac145bdac62fa329

        cnt = 0;
    }

#else
    frequence = 50;
<<<<<<< HEAD
 800dc24:	4b1b      	ldr	r3, [pc, #108]	@ (800dc94 <dealPerMs+0x154>)
 800dc26:	2232      	movs	r2, #50	@ 0x32
 800dc28:	701a      	strb	r2, [r3, #0]
=======
 800ef08:	4b1b      	ldr	r3, [pc, #108]	@ (800ef78 <dealPerMs+0x154>)
 800ef0a:	2232      	movs	r2, #50	@ 0x32
 800ef0c:	701a      	strb	r2, [r3, #0]
>>>>>>> f88694781bd54d0bca96bec7ac145bdac62fa329
            _1s = 1;
        }
    }
#else

    if (++_1msCnt >= 1000)
<<<<<<< HEAD
 800dc2a:	4b1b      	ldr	r3, [pc, #108]	@ (800dc98 <dealPerMs+0x158>)
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	3301      	adds	r3, #1
 800dc30:	4a19      	ldr	r2, [pc, #100]	@ (800dc98 <dealPerMs+0x158>)
 800dc32:	6013      	str	r3, [r2, #0]
 800dc34:	4b18      	ldr	r3, [pc, #96]	@ (800dc98 <dealPerMs+0x158>)
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800dc3c:	d305      	bcc.n	800dc4a <dealPerMs+0x10a>
    {
        _1msCnt = 0;
 800dc3e:	4b16      	ldr	r3, [pc, #88]	@ (800dc98 <dealPerMs+0x158>)
 800dc40:	2200      	movs	r2, #0
 800dc42:	601a      	str	r2, [r3, #0]
        _1s = 1;
 800dc44:	4b12      	ldr	r3, [pc, #72]	@ (800dc90 <dealPerMs+0x150>)
 800dc46:	2201      	movs	r2, #1
 800dc48:	701a      	strb	r2, [r3, #0]
=======
 800ef0e:	4b1b      	ldr	r3, [pc, #108]	@ (800ef7c <dealPerMs+0x158>)
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	3301      	adds	r3, #1
 800ef14:	4a19      	ldr	r2, [pc, #100]	@ (800ef7c <dealPerMs+0x158>)
 800ef16:	6013      	str	r3, [r2, #0]
 800ef18:	4b18      	ldr	r3, [pc, #96]	@ (800ef7c <dealPerMs+0x158>)
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ef20:	d305      	bcc.n	800ef2e <dealPerMs+0x10a>
    {
        _1msCnt = 0;
 800ef22:	4b16      	ldr	r3, [pc, #88]	@ (800ef7c <dealPerMs+0x158>)
 800ef24:	2200      	movs	r2, #0
 800ef26:	601a      	str	r2, [r3, #0]
        _1s = 1;
 800ef28:	4b12      	ldr	r3, [pc, #72]	@ (800ef74 <dealPerMs+0x150>)
 800ef2a:	2201      	movs	r2, #1
 800ef2c:	701a      	strb	r2, [r3, #0]
>>>>>>> f88694781bd54d0bca96bec7ac145bdac62fa329
    }
#endif
#if SPEED_UP
    _1s = 1;
#endif
    _1ms = 1;
<<<<<<< HEAD
 800dc4a:	4b14      	ldr	r3, [pc, #80]	@ (800dc9c <dealPerMs+0x15c>)
 800dc4c:	2201      	movs	r2, #1
 800dc4e:	701a      	strb	r2, [r3, #0]
=======
 800ef2e:	4b14      	ldr	r3, [pc, #80]	@ (800ef80 <dealPerMs+0x15c>)
 800ef30:	2201      	movs	r2, #1
 800ef32:	701a      	strb	r2, [r3, #0]
>>>>>>> f88694781bd54d0bca96bec7ac145bdac62fa329




}
<<<<<<< HEAD
 800dc50:	bf00      	nop
 800dc52:	46bd      	mov	sp, r7
 800dc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc58:	4770      	bx	lr
 800dc5a:	bf00      	nop
 800dc5c:	2000096c 	.word	0x2000096c
 800dc60:	20000965 	.word	0x20000965
 800dc64:	2000096d 	.word	0x2000096d
 800dc68:	20000966 	.word	0x20000966
 800dc6c:	2000096e 	.word	0x2000096e
 800dc70:	20000967 	.word	0x20000967
 800dc74:	2000096f 	.word	0x2000096f
 800dc78:	20000968 	.word	0x20000968
 800dc7c:	20000970 	.word	0x20000970
 800dc80:	20000969 	.word	0x20000969
 800dc84:	20000974 	.word	0x20000974
 800dc88:	2000096a 	.word	0x2000096a
 800dc8c:	20000978 	.word	0x20000978
 800dc90:	2000095c 	.word	0x2000095c
 800dc94:	20000964 	.word	0x20000964
 800dc98:	20000960 	.word	0x20000960
 800dc9c:	2000095d 	.word	0x2000095d

0800dca0 <getOneSecFlag>:
=======
 800ef34:	bf00      	nop
 800ef36:	46bd      	mov	sp, r7
 800ef38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef3c:	4770      	bx	lr
 800ef3e:	bf00      	nop
 800ef40:	200009dc 	.word	0x200009dc
 800ef44:	200009d5 	.word	0x200009d5
 800ef48:	200009dd 	.word	0x200009dd
 800ef4c:	200009d6 	.word	0x200009d6
 800ef50:	200009de 	.word	0x200009de
 800ef54:	200009d7 	.word	0x200009d7
 800ef58:	200009df 	.word	0x200009df
 800ef5c:	200009d8 	.word	0x200009d8
 800ef60:	200009e0 	.word	0x200009e0
 800ef64:	200009d9 	.word	0x200009d9
 800ef68:	200009e4 	.word	0x200009e4
 800ef6c:	200009da 	.word	0x200009da
 800ef70:	200009e8 	.word	0x200009e8
 800ef74:	200009cc 	.word	0x200009cc
 800ef78:	200009d4 	.word	0x200009d4
 800ef7c:	200009d0 	.word	0x200009d0
 800ef80:	200009cd 	.word	0x200009cd

0800ef84 <getOneSecFlag>:
>>>>>>> f88694781bd54d0bca96bec7ac145bdac62fa329
}



bool getOneSecFlag()
{
<<<<<<< HEAD
 800dca0:	b480      	push	{r7}
 800dca2:	af00      	add	r7, sp, #0
    if (_1s)
 800dca4:	4b07      	ldr	r3, [pc, #28]	@ (800dcc4 <getOneSecFlag+0x24>)
 800dca6:	781b      	ldrb	r3, [r3, #0]
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d004      	beq.n	800dcb6 <getOneSecFlag+0x16>
    {
        _1s = 0;
 800dcac:	4b05      	ldr	r3, [pc, #20]	@ (800dcc4 <getOneSecFlag+0x24>)
 800dcae:	2200      	movs	r2, #0
 800dcb0:	701a      	strb	r2, [r3, #0]
        return 1;
 800dcb2:	2301      	movs	r3, #1
 800dcb4:	e000      	b.n	800dcb8 <getOneSecFlag+0x18>
    }
    else
        return 0;
 800dcb6:	2300      	movs	r3, #0
}
 800dcb8:	4618      	mov	r0, r3
 800dcba:	46bd      	mov	sp, r7
 800dcbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcc0:	4770      	bx	lr
 800dcc2:	bf00      	nop
 800dcc4:	2000095c 	.word	0x2000095c

0800dcc8 <get5MsFlag>:
=======
 800ef84:	b480      	push	{r7}
 800ef86:	af00      	add	r7, sp, #0
    if (_1s)
 800ef88:	4b07      	ldr	r3, [pc, #28]	@ (800efa8 <getOneSecFlag+0x24>)
 800ef8a:	781b      	ldrb	r3, [r3, #0]
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d004      	beq.n	800ef9a <getOneSecFlag+0x16>
    {
        _1s = 0;
 800ef90:	4b05      	ldr	r3, [pc, #20]	@ (800efa8 <getOneSecFlag+0x24>)
 800ef92:	2200      	movs	r2, #0
 800ef94:	701a      	strb	r2, [r3, #0]
        return 1;
 800ef96:	2301      	movs	r3, #1
 800ef98:	e000      	b.n	800ef9c <getOneSecFlag+0x18>
    }
    else
        return 0;
 800ef9a:	2300      	movs	r3, #0
}
 800ef9c:	4618      	mov	r0, r3
 800ef9e:	46bd      	mov	sp, r7
 800efa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa4:	4770      	bx	lr
 800efa6:	bf00      	nop
 800efa8:	200009cc 	.word	0x200009cc

0800efac <get5MsFlag>:
>>>>>>> f88694781bd54d0bca96bec7ac145bdac62fa329
bool getCrossZero()
{
    return crossZero;
}
bool get5MsFlag()
{
<<<<<<< HEAD
 800dcc8:	b480      	push	{r7}
 800dcca:	af00      	add	r7, sp, #0
    if (_5msFlag)
 800dccc:	4b07      	ldr	r3, [pc, #28]	@ (800dcec <get5MsFlag+0x24>)
 800dcce:	781b      	ldrb	r3, [r3, #0]
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d004      	beq.n	800dcde <get5MsFlag+0x16>
    {
        _5msFlag = 0;
 800dcd4:	4b05      	ldr	r3, [pc, #20]	@ (800dcec <get5MsFlag+0x24>)
 800dcd6:	2200      	movs	r2, #0
 800dcd8:	701a      	strb	r2, [r3, #0]
        return 1;
 800dcda:	2301      	movs	r3, #1
 800dcdc:	e000      	b.n	800dce0 <get5MsFlag+0x18>
=======
 800efac:	b480      	push	{r7}
 800efae:	af00      	add	r7, sp, #0
    if (_5msFlag)
 800efb0:	4b07      	ldr	r3, [pc, #28]	@ (800efd0 <get5MsFlag+0x24>)
 800efb2:	781b      	ldrb	r3, [r3, #0]
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d004      	beq.n	800efc2 <get5MsFlag+0x16>
    {
        _5msFlag = 0;
 800efb8:	4b05      	ldr	r3, [pc, #20]	@ (800efd0 <get5MsFlag+0x24>)
 800efba:	2200      	movs	r2, #0
 800efbc:	701a      	strb	r2, [r3, #0]
        return 1;
 800efbe:	2301      	movs	r3, #1
 800efc0:	e000      	b.n	800efc4 <get5MsFlag+0x18>
>>>>>>> f88694781bd54d0bca96bec7ac145bdac62fa329
    }
    else
    {
        return 0;
<<<<<<< HEAD
 800dcde:	2300      	movs	r3, #0
    }
}
 800dce0:	4618      	mov	r0, r3
 800dce2:	46bd      	mov	sp, r7
 800dce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce8:	4770      	bx	lr
 800dcea:	bf00      	nop
 800dcec:	20000965 	.word	0x20000965

0800dcf0 <get100MsFlag>:
=======
 800efc2:	2300      	movs	r3, #0
    }
}
 800efc4:	4618      	mov	r0, r3
 800efc6:	46bd      	mov	sp, r7
 800efc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efcc:	4770      	bx	lr
 800efce:	bf00      	nop
 800efd0:	200009d5 	.word	0x200009d5

0800efd4 <get100MsFlag>:
>>>>>>> f88694781bd54d0bca96bec7ac145bdac62fa329
        return 0;
    }
}

bool get100MsFlag()
{
<<<<<<< HEAD
 800dcf0:	b480      	push	{r7}
 800dcf2:	af00      	add	r7, sp, #0
    if (_100msFlag)
 800dcf4:	4b07      	ldr	r3, [pc, #28]	@ (800dd14 <get100MsFlag+0x24>)
 800dcf6:	781b      	ldrb	r3, [r3, #0]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d004      	beq.n	800dd06 <get100MsFlag+0x16>
    {
        _100msFlag = 0;
 800dcfc:	4b05      	ldr	r3, [pc, #20]	@ (800dd14 <get100MsFlag+0x24>)
 800dcfe:	2200      	movs	r2, #0
 800dd00:	701a      	strb	r2, [r3, #0]
        return 1;
 800dd02:	2301      	movs	r3, #1
 800dd04:	e000      	b.n	800dd08 <get100MsFlag+0x18>
=======
 800efd4:	b480      	push	{r7}
 800efd6:	af00      	add	r7, sp, #0
    if (_100msFlag)
 800efd8:	4b07      	ldr	r3, [pc, #28]	@ (800eff8 <get100MsFlag+0x24>)
 800efda:	781b      	ldrb	r3, [r3, #0]
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d004      	beq.n	800efea <get100MsFlag+0x16>
    {
        _100msFlag = 0;
 800efe0:	4b05      	ldr	r3, [pc, #20]	@ (800eff8 <get100MsFlag+0x24>)
 800efe2:	2200      	movs	r2, #0
 800efe4:	701a      	strb	r2, [r3, #0]
        return 1;
 800efe6:	2301      	movs	r3, #1
 800efe8:	e000      	b.n	800efec <get100MsFlag+0x18>
>>>>>>> f88694781bd54d0bca96bec7ac145bdac62fa329
    }
    else
    {
        return 0;
<<<<<<< HEAD
 800dd06:	2300      	movs	r3, #0
    }
}
 800dd08:	4618      	mov	r0, r3
 800dd0a:	46bd      	mov	sp, r7
 800dd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd10:	4770      	bx	lr
 800dd12:	bf00      	nop
 800dd14:	20000969 	.word	0x20000969

0800dd18 <atof>:
 800dd18:	2100      	movs	r1, #0
 800dd1a:	f000 be0b 	b.w	800e934 <strtod>

0800dd1e <sulp>:
 800dd1e:	b570      	push	{r4, r5, r6, lr}
 800dd20:	4604      	mov	r4, r0
 800dd22:	460d      	mov	r5, r1
 800dd24:	ec45 4b10 	vmov	d0, r4, r5
 800dd28:	4616      	mov	r6, r2
 800dd2a:	f003 fc7d 	bl	8011628 <__ulp>
 800dd2e:	ec51 0b10 	vmov	r0, r1, d0
 800dd32:	b17e      	cbz	r6, 800dd54 <sulp+0x36>
 800dd34:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800dd38:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	dd09      	ble.n	800dd54 <sulp+0x36>
 800dd40:	051b      	lsls	r3, r3, #20
 800dd42:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800dd46:	2400      	movs	r4, #0
 800dd48:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800dd4c:	4622      	mov	r2, r4
 800dd4e:	462b      	mov	r3, r5
 800dd50:	f7f2 fc7a 	bl	8000648 <__aeabi_dmul>
 800dd54:	ec41 0b10 	vmov	d0, r0, r1
 800dd58:	bd70      	pop	{r4, r5, r6, pc}
 800dd5a:	0000      	movs	r0, r0
 800dd5c:	0000      	movs	r0, r0
	...

0800dd60 <_strtod_l>:
 800dd60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd64:	b09f      	sub	sp, #124	@ 0x7c
 800dd66:	460c      	mov	r4, r1
 800dd68:	9217      	str	r2, [sp, #92]	@ 0x5c
 800dd6a:	2200      	movs	r2, #0
 800dd6c:	921a      	str	r2, [sp, #104]	@ 0x68
 800dd6e:	9005      	str	r0, [sp, #20]
 800dd70:	f04f 0a00 	mov.w	sl, #0
 800dd74:	f04f 0b00 	mov.w	fp, #0
 800dd78:	460a      	mov	r2, r1
 800dd7a:	9219      	str	r2, [sp, #100]	@ 0x64
 800dd7c:	7811      	ldrb	r1, [r2, #0]
 800dd7e:	292b      	cmp	r1, #43	@ 0x2b
 800dd80:	d04a      	beq.n	800de18 <_strtod_l+0xb8>
 800dd82:	d838      	bhi.n	800ddf6 <_strtod_l+0x96>
 800dd84:	290d      	cmp	r1, #13
 800dd86:	d832      	bhi.n	800ddee <_strtod_l+0x8e>
 800dd88:	2908      	cmp	r1, #8
 800dd8a:	d832      	bhi.n	800ddf2 <_strtod_l+0x92>
 800dd8c:	2900      	cmp	r1, #0
 800dd8e:	d03b      	beq.n	800de08 <_strtod_l+0xa8>
 800dd90:	2200      	movs	r2, #0
 800dd92:	920b      	str	r2, [sp, #44]	@ 0x2c
 800dd94:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800dd96:	782a      	ldrb	r2, [r5, #0]
 800dd98:	2a30      	cmp	r2, #48	@ 0x30
 800dd9a:	f040 80b3 	bne.w	800df04 <_strtod_l+0x1a4>
 800dd9e:	786a      	ldrb	r2, [r5, #1]
 800dda0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800dda4:	2a58      	cmp	r2, #88	@ 0x58
 800dda6:	d16e      	bne.n	800de86 <_strtod_l+0x126>
 800dda8:	9302      	str	r3, [sp, #8]
 800ddaa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ddac:	9301      	str	r3, [sp, #4]
 800ddae:	ab1a      	add	r3, sp, #104	@ 0x68
 800ddb0:	9300      	str	r3, [sp, #0]
 800ddb2:	4a8e      	ldr	r2, [pc, #568]	@ (800dfec <_strtod_l+0x28c>)
 800ddb4:	9805      	ldr	r0, [sp, #20]
 800ddb6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800ddb8:	a919      	add	r1, sp, #100	@ 0x64
 800ddba:	f002 fd27 	bl	801080c <__gethex>
 800ddbe:	f010 060f 	ands.w	r6, r0, #15
 800ddc2:	4604      	mov	r4, r0
 800ddc4:	d005      	beq.n	800ddd2 <_strtod_l+0x72>
 800ddc6:	2e06      	cmp	r6, #6
 800ddc8:	d128      	bne.n	800de1c <_strtod_l+0xbc>
 800ddca:	3501      	adds	r5, #1
 800ddcc:	2300      	movs	r3, #0
 800ddce:	9519      	str	r5, [sp, #100]	@ 0x64
 800ddd0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ddd2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	f040 858e 	bne.w	800e8f6 <_strtod_l+0xb96>
 800ddda:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dddc:	b1cb      	cbz	r3, 800de12 <_strtod_l+0xb2>
 800ddde:	4652      	mov	r2, sl
 800dde0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800dde4:	ec43 2b10 	vmov	d0, r2, r3
 800dde8:	b01f      	add	sp, #124	@ 0x7c
 800ddea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddee:	2920      	cmp	r1, #32
 800ddf0:	d1ce      	bne.n	800dd90 <_strtod_l+0x30>
 800ddf2:	3201      	adds	r2, #1
 800ddf4:	e7c1      	b.n	800dd7a <_strtod_l+0x1a>
 800ddf6:	292d      	cmp	r1, #45	@ 0x2d
 800ddf8:	d1ca      	bne.n	800dd90 <_strtod_l+0x30>
 800ddfa:	2101      	movs	r1, #1
 800ddfc:	910b      	str	r1, [sp, #44]	@ 0x2c
 800ddfe:	1c51      	adds	r1, r2, #1
 800de00:	9119      	str	r1, [sp, #100]	@ 0x64
 800de02:	7852      	ldrb	r2, [r2, #1]
 800de04:	2a00      	cmp	r2, #0
 800de06:	d1c5      	bne.n	800dd94 <_strtod_l+0x34>
 800de08:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800de0a:	9419      	str	r4, [sp, #100]	@ 0x64
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	f040 8570 	bne.w	800e8f2 <_strtod_l+0xb92>
 800de12:	4652      	mov	r2, sl
 800de14:	465b      	mov	r3, fp
 800de16:	e7e5      	b.n	800dde4 <_strtod_l+0x84>
 800de18:	2100      	movs	r1, #0
 800de1a:	e7ef      	b.n	800ddfc <_strtod_l+0x9c>
 800de1c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800de1e:	b13a      	cbz	r2, 800de30 <_strtod_l+0xd0>
 800de20:	2135      	movs	r1, #53	@ 0x35
 800de22:	a81c      	add	r0, sp, #112	@ 0x70
 800de24:	f003 fcfa 	bl	801181c <__copybits>
 800de28:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800de2a:	9805      	ldr	r0, [sp, #20]
 800de2c:	f003 f8c8 	bl	8010fc0 <_Bfree>
 800de30:	3e01      	subs	r6, #1
 800de32:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800de34:	2e04      	cmp	r6, #4
 800de36:	d806      	bhi.n	800de46 <_strtod_l+0xe6>
 800de38:	e8df f006 	tbb	[pc, r6]
 800de3c:	201d0314 	.word	0x201d0314
 800de40:	14          	.byte	0x14
 800de41:	00          	.byte	0x00
 800de42:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800de46:	05e1      	lsls	r1, r4, #23
 800de48:	bf48      	it	mi
 800de4a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800de4e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800de52:	0d1b      	lsrs	r3, r3, #20
 800de54:	051b      	lsls	r3, r3, #20
 800de56:	2b00      	cmp	r3, #0
 800de58:	d1bb      	bne.n	800ddd2 <_strtod_l+0x72>
 800de5a:	f001 fd8d 	bl	800f978 <__errno>
 800de5e:	2322      	movs	r3, #34	@ 0x22
 800de60:	6003      	str	r3, [r0, #0]
 800de62:	e7b6      	b.n	800ddd2 <_strtod_l+0x72>
 800de64:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800de68:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800de6c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800de70:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800de74:	e7e7      	b.n	800de46 <_strtod_l+0xe6>
 800de76:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800dff4 <_strtod_l+0x294>
 800de7a:	e7e4      	b.n	800de46 <_strtod_l+0xe6>
 800de7c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800de80:	f04f 3aff 	mov.w	sl, #4294967295
 800de84:	e7df      	b.n	800de46 <_strtod_l+0xe6>
 800de86:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800de88:	1c5a      	adds	r2, r3, #1
 800de8a:	9219      	str	r2, [sp, #100]	@ 0x64
 800de8c:	785b      	ldrb	r3, [r3, #1]
 800de8e:	2b30      	cmp	r3, #48	@ 0x30
 800de90:	d0f9      	beq.n	800de86 <_strtod_l+0x126>
 800de92:	2b00      	cmp	r3, #0
 800de94:	d09d      	beq.n	800ddd2 <_strtod_l+0x72>
 800de96:	2301      	movs	r3, #1
 800de98:	9309      	str	r3, [sp, #36]	@ 0x24
 800de9a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800de9c:	930c      	str	r3, [sp, #48]	@ 0x30
 800de9e:	2300      	movs	r3, #0
 800dea0:	9308      	str	r3, [sp, #32]
 800dea2:	930a      	str	r3, [sp, #40]	@ 0x28
 800dea4:	461f      	mov	r7, r3
 800dea6:	220a      	movs	r2, #10
 800dea8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800deaa:	7805      	ldrb	r5, [r0, #0]
 800deac:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800deb0:	b2d9      	uxtb	r1, r3
 800deb2:	2909      	cmp	r1, #9
 800deb4:	d928      	bls.n	800df08 <_strtod_l+0x1a8>
 800deb6:	494e      	ldr	r1, [pc, #312]	@ (800dff0 <_strtod_l+0x290>)
 800deb8:	2201      	movs	r2, #1
 800deba:	f001 fd01 	bl	800f8c0 <strncmp>
 800debe:	2800      	cmp	r0, #0
 800dec0:	d032      	beq.n	800df28 <_strtod_l+0x1c8>
 800dec2:	2000      	movs	r0, #0
 800dec4:	462a      	mov	r2, r5
 800dec6:	4681      	mov	r9, r0
 800dec8:	463d      	mov	r5, r7
 800deca:	4603      	mov	r3, r0
 800decc:	2a65      	cmp	r2, #101	@ 0x65
 800dece:	d001      	beq.n	800ded4 <_strtod_l+0x174>
 800ded0:	2a45      	cmp	r2, #69	@ 0x45
 800ded2:	d114      	bne.n	800defe <_strtod_l+0x19e>
 800ded4:	b91d      	cbnz	r5, 800dede <_strtod_l+0x17e>
 800ded6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ded8:	4302      	orrs	r2, r0
 800deda:	d095      	beq.n	800de08 <_strtod_l+0xa8>
 800dedc:	2500      	movs	r5, #0
 800dede:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800dee0:	1c62      	adds	r2, r4, #1
 800dee2:	9219      	str	r2, [sp, #100]	@ 0x64
 800dee4:	7862      	ldrb	r2, [r4, #1]
 800dee6:	2a2b      	cmp	r2, #43	@ 0x2b
 800dee8:	d077      	beq.n	800dfda <_strtod_l+0x27a>
 800deea:	2a2d      	cmp	r2, #45	@ 0x2d
 800deec:	d07b      	beq.n	800dfe6 <_strtod_l+0x286>
 800deee:	f04f 0c00 	mov.w	ip, #0
 800def2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800def6:	2909      	cmp	r1, #9
 800def8:	f240 8082 	bls.w	800e000 <_strtod_l+0x2a0>
 800defc:	9419      	str	r4, [sp, #100]	@ 0x64
 800defe:	f04f 0800 	mov.w	r8, #0
 800df02:	e0a2      	b.n	800e04a <_strtod_l+0x2ea>
 800df04:	2300      	movs	r3, #0
 800df06:	e7c7      	b.n	800de98 <_strtod_l+0x138>
 800df08:	2f08      	cmp	r7, #8
 800df0a:	bfd5      	itete	le
 800df0c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800df0e:	9908      	ldrgt	r1, [sp, #32]
 800df10:	fb02 3301 	mlale	r3, r2, r1, r3
 800df14:	fb02 3301 	mlagt	r3, r2, r1, r3
 800df18:	f100 0001 	add.w	r0, r0, #1
 800df1c:	bfd4      	ite	le
 800df1e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800df20:	9308      	strgt	r3, [sp, #32]
 800df22:	3701      	adds	r7, #1
 800df24:	9019      	str	r0, [sp, #100]	@ 0x64
 800df26:	e7bf      	b.n	800dea8 <_strtod_l+0x148>
 800df28:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800df2a:	1c5a      	adds	r2, r3, #1
 800df2c:	9219      	str	r2, [sp, #100]	@ 0x64
 800df2e:	785a      	ldrb	r2, [r3, #1]
 800df30:	b37f      	cbz	r7, 800df92 <_strtod_l+0x232>
 800df32:	4681      	mov	r9, r0
 800df34:	463d      	mov	r5, r7
 800df36:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800df3a:	2b09      	cmp	r3, #9
 800df3c:	d912      	bls.n	800df64 <_strtod_l+0x204>
 800df3e:	2301      	movs	r3, #1
 800df40:	e7c4      	b.n	800decc <_strtod_l+0x16c>
 800df42:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800df44:	1c5a      	adds	r2, r3, #1
 800df46:	9219      	str	r2, [sp, #100]	@ 0x64
 800df48:	785a      	ldrb	r2, [r3, #1]
 800df4a:	3001      	adds	r0, #1
 800df4c:	2a30      	cmp	r2, #48	@ 0x30
 800df4e:	d0f8      	beq.n	800df42 <_strtod_l+0x1e2>
 800df50:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800df54:	2b08      	cmp	r3, #8
 800df56:	f200 84d3 	bhi.w	800e900 <_strtod_l+0xba0>
 800df5a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800df5c:	930c      	str	r3, [sp, #48]	@ 0x30
 800df5e:	4681      	mov	r9, r0
 800df60:	2000      	movs	r0, #0
 800df62:	4605      	mov	r5, r0
 800df64:	3a30      	subs	r2, #48	@ 0x30
 800df66:	f100 0301 	add.w	r3, r0, #1
 800df6a:	d02a      	beq.n	800dfc2 <_strtod_l+0x262>
 800df6c:	4499      	add	r9, r3
 800df6e:	eb00 0c05 	add.w	ip, r0, r5
 800df72:	462b      	mov	r3, r5
 800df74:	210a      	movs	r1, #10
 800df76:	4563      	cmp	r3, ip
 800df78:	d10d      	bne.n	800df96 <_strtod_l+0x236>
 800df7a:	1c69      	adds	r1, r5, #1
 800df7c:	4401      	add	r1, r0
 800df7e:	4428      	add	r0, r5
 800df80:	2808      	cmp	r0, #8
 800df82:	dc16      	bgt.n	800dfb2 <_strtod_l+0x252>
 800df84:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800df86:	230a      	movs	r3, #10
 800df88:	fb03 2300 	mla	r3, r3, r0, r2
 800df8c:	930a      	str	r3, [sp, #40]	@ 0x28
 800df8e:	2300      	movs	r3, #0
 800df90:	e018      	b.n	800dfc4 <_strtod_l+0x264>
 800df92:	4638      	mov	r0, r7
 800df94:	e7da      	b.n	800df4c <_strtod_l+0x1ec>
 800df96:	2b08      	cmp	r3, #8
 800df98:	f103 0301 	add.w	r3, r3, #1
 800df9c:	dc03      	bgt.n	800dfa6 <_strtod_l+0x246>
 800df9e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800dfa0:	434e      	muls	r6, r1
 800dfa2:	960a      	str	r6, [sp, #40]	@ 0x28
 800dfa4:	e7e7      	b.n	800df76 <_strtod_l+0x216>
 800dfa6:	2b10      	cmp	r3, #16
 800dfa8:	bfde      	ittt	le
 800dfaa:	9e08      	ldrle	r6, [sp, #32]
 800dfac:	434e      	mulle	r6, r1
 800dfae:	9608      	strle	r6, [sp, #32]
 800dfb0:	e7e1      	b.n	800df76 <_strtod_l+0x216>
 800dfb2:	280f      	cmp	r0, #15
 800dfb4:	dceb      	bgt.n	800df8e <_strtod_l+0x22e>
 800dfb6:	9808      	ldr	r0, [sp, #32]
 800dfb8:	230a      	movs	r3, #10
 800dfba:	fb03 2300 	mla	r3, r3, r0, r2
 800dfbe:	9308      	str	r3, [sp, #32]
 800dfc0:	e7e5      	b.n	800df8e <_strtod_l+0x22e>
 800dfc2:	4629      	mov	r1, r5
 800dfc4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800dfc6:	1c50      	adds	r0, r2, #1
 800dfc8:	9019      	str	r0, [sp, #100]	@ 0x64
 800dfca:	7852      	ldrb	r2, [r2, #1]
 800dfcc:	4618      	mov	r0, r3
 800dfce:	460d      	mov	r5, r1
 800dfd0:	e7b1      	b.n	800df36 <_strtod_l+0x1d6>
 800dfd2:	f04f 0900 	mov.w	r9, #0
 800dfd6:	2301      	movs	r3, #1
 800dfd8:	e77d      	b.n	800ded6 <_strtod_l+0x176>
 800dfda:	f04f 0c00 	mov.w	ip, #0
 800dfde:	1ca2      	adds	r2, r4, #2
 800dfe0:	9219      	str	r2, [sp, #100]	@ 0x64
 800dfe2:	78a2      	ldrb	r2, [r4, #2]
 800dfe4:	e785      	b.n	800def2 <_strtod_l+0x192>
 800dfe6:	f04f 0c01 	mov.w	ip, #1
 800dfea:	e7f8      	b.n	800dfde <_strtod_l+0x27e>
 800dfec:	08012858 	.word	0x08012858
 800dff0:	08012840 	.word	0x08012840
 800dff4:	7ff00000 	.word	0x7ff00000
 800dff8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800dffa:	1c51      	adds	r1, r2, #1
 800dffc:	9119      	str	r1, [sp, #100]	@ 0x64
 800dffe:	7852      	ldrb	r2, [r2, #1]
 800e000:	2a30      	cmp	r2, #48	@ 0x30
 800e002:	d0f9      	beq.n	800dff8 <_strtod_l+0x298>
 800e004:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800e008:	2908      	cmp	r1, #8
 800e00a:	f63f af78 	bhi.w	800defe <_strtod_l+0x19e>
 800e00e:	3a30      	subs	r2, #48	@ 0x30
 800e010:	920e      	str	r2, [sp, #56]	@ 0x38
 800e012:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e014:	920f      	str	r2, [sp, #60]	@ 0x3c
 800e016:	f04f 080a 	mov.w	r8, #10
 800e01a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e01c:	1c56      	adds	r6, r2, #1
 800e01e:	9619      	str	r6, [sp, #100]	@ 0x64
 800e020:	7852      	ldrb	r2, [r2, #1]
 800e022:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800e026:	f1be 0f09 	cmp.w	lr, #9
 800e02a:	d939      	bls.n	800e0a0 <_strtod_l+0x340>
 800e02c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800e02e:	1a76      	subs	r6, r6, r1
 800e030:	2e08      	cmp	r6, #8
 800e032:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800e036:	dc03      	bgt.n	800e040 <_strtod_l+0x2e0>
 800e038:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800e03a:	4588      	cmp	r8, r1
 800e03c:	bfa8      	it	ge
 800e03e:	4688      	movge	r8, r1
 800e040:	f1bc 0f00 	cmp.w	ip, #0
 800e044:	d001      	beq.n	800e04a <_strtod_l+0x2ea>
 800e046:	f1c8 0800 	rsb	r8, r8, #0
 800e04a:	2d00      	cmp	r5, #0
 800e04c:	d14e      	bne.n	800e0ec <_strtod_l+0x38c>
 800e04e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e050:	4308      	orrs	r0, r1
 800e052:	f47f aebe 	bne.w	800ddd2 <_strtod_l+0x72>
 800e056:	2b00      	cmp	r3, #0
 800e058:	f47f aed6 	bne.w	800de08 <_strtod_l+0xa8>
 800e05c:	2a69      	cmp	r2, #105	@ 0x69
 800e05e:	d028      	beq.n	800e0b2 <_strtod_l+0x352>
 800e060:	dc25      	bgt.n	800e0ae <_strtod_l+0x34e>
 800e062:	2a49      	cmp	r2, #73	@ 0x49
 800e064:	d025      	beq.n	800e0b2 <_strtod_l+0x352>
 800e066:	2a4e      	cmp	r2, #78	@ 0x4e
 800e068:	f47f aece 	bne.w	800de08 <_strtod_l+0xa8>
 800e06c:	499b      	ldr	r1, [pc, #620]	@ (800e2dc <_strtod_l+0x57c>)
 800e06e:	a819      	add	r0, sp, #100	@ 0x64
 800e070:	f002 fdee 	bl	8010c50 <__match>
 800e074:	2800      	cmp	r0, #0
 800e076:	f43f aec7 	beq.w	800de08 <_strtod_l+0xa8>
 800e07a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e07c:	781b      	ldrb	r3, [r3, #0]
 800e07e:	2b28      	cmp	r3, #40	@ 0x28
 800e080:	d12e      	bne.n	800e0e0 <_strtod_l+0x380>
 800e082:	4997      	ldr	r1, [pc, #604]	@ (800e2e0 <_strtod_l+0x580>)
 800e084:	aa1c      	add	r2, sp, #112	@ 0x70
 800e086:	a819      	add	r0, sp, #100	@ 0x64
 800e088:	f002 fdf6 	bl	8010c78 <__hexnan>
 800e08c:	2805      	cmp	r0, #5
 800e08e:	d127      	bne.n	800e0e0 <_strtod_l+0x380>
 800e090:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e092:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800e096:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800e09a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800e09e:	e698      	b.n	800ddd2 <_strtod_l+0x72>
 800e0a0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800e0a2:	fb08 2101 	mla	r1, r8, r1, r2
 800e0a6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800e0aa:	920e      	str	r2, [sp, #56]	@ 0x38
 800e0ac:	e7b5      	b.n	800e01a <_strtod_l+0x2ba>
 800e0ae:	2a6e      	cmp	r2, #110	@ 0x6e
 800e0b0:	e7da      	b.n	800e068 <_strtod_l+0x308>
 800e0b2:	498c      	ldr	r1, [pc, #560]	@ (800e2e4 <_strtod_l+0x584>)
 800e0b4:	a819      	add	r0, sp, #100	@ 0x64
 800e0b6:	f002 fdcb 	bl	8010c50 <__match>
 800e0ba:	2800      	cmp	r0, #0
 800e0bc:	f43f aea4 	beq.w	800de08 <_strtod_l+0xa8>
 800e0c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e0c2:	4989      	ldr	r1, [pc, #548]	@ (800e2e8 <_strtod_l+0x588>)
 800e0c4:	3b01      	subs	r3, #1
 800e0c6:	a819      	add	r0, sp, #100	@ 0x64
 800e0c8:	9319      	str	r3, [sp, #100]	@ 0x64
 800e0ca:	f002 fdc1 	bl	8010c50 <__match>
 800e0ce:	b910      	cbnz	r0, 800e0d6 <_strtod_l+0x376>
 800e0d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e0d2:	3301      	adds	r3, #1
 800e0d4:	9319      	str	r3, [sp, #100]	@ 0x64
 800e0d6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800e2f8 <_strtod_l+0x598>
 800e0da:	f04f 0a00 	mov.w	sl, #0
 800e0de:	e678      	b.n	800ddd2 <_strtod_l+0x72>
 800e0e0:	4882      	ldr	r0, [pc, #520]	@ (800e2ec <_strtod_l+0x58c>)
 800e0e2:	f001 fc85 	bl	800f9f0 <nan>
 800e0e6:	ec5b ab10 	vmov	sl, fp, d0
 800e0ea:	e672      	b.n	800ddd2 <_strtod_l+0x72>
 800e0ec:	eba8 0309 	sub.w	r3, r8, r9
 800e0f0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e0f2:	9309      	str	r3, [sp, #36]	@ 0x24
 800e0f4:	2f00      	cmp	r7, #0
 800e0f6:	bf08      	it	eq
 800e0f8:	462f      	moveq	r7, r5
 800e0fa:	2d10      	cmp	r5, #16
 800e0fc:	462c      	mov	r4, r5
 800e0fe:	bfa8      	it	ge
 800e100:	2410      	movge	r4, #16
 800e102:	f7f2 fa27 	bl	8000554 <__aeabi_ui2d>
 800e106:	2d09      	cmp	r5, #9
 800e108:	4682      	mov	sl, r0
 800e10a:	468b      	mov	fp, r1
 800e10c:	dc13      	bgt.n	800e136 <_strtod_l+0x3d6>
 800e10e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e110:	2b00      	cmp	r3, #0
 800e112:	f43f ae5e 	beq.w	800ddd2 <_strtod_l+0x72>
 800e116:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e118:	dd78      	ble.n	800e20c <_strtod_l+0x4ac>
 800e11a:	2b16      	cmp	r3, #22
 800e11c:	dc5f      	bgt.n	800e1de <_strtod_l+0x47e>
 800e11e:	4974      	ldr	r1, [pc, #464]	@ (800e2f0 <_strtod_l+0x590>)
 800e120:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e124:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e128:	4652      	mov	r2, sl
 800e12a:	465b      	mov	r3, fp
 800e12c:	f7f2 fa8c 	bl	8000648 <__aeabi_dmul>
 800e130:	4682      	mov	sl, r0
 800e132:	468b      	mov	fp, r1
 800e134:	e64d      	b.n	800ddd2 <_strtod_l+0x72>
 800e136:	4b6e      	ldr	r3, [pc, #440]	@ (800e2f0 <_strtod_l+0x590>)
 800e138:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e13c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800e140:	f7f2 fa82 	bl	8000648 <__aeabi_dmul>
 800e144:	4682      	mov	sl, r0
 800e146:	9808      	ldr	r0, [sp, #32]
 800e148:	468b      	mov	fp, r1
 800e14a:	f7f2 fa03 	bl	8000554 <__aeabi_ui2d>
 800e14e:	4602      	mov	r2, r0
 800e150:	460b      	mov	r3, r1
 800e152:	4650      	mov	r0, sl
 800e154:	4659      	mov	r1, fp
 800e156:	f7f2 f8c1 	bl	80002dc <__adddf3>
 800e15a:	2d0f      	cmp	r5, #15
 800e15c:	4682      	mov	sl, r0
 800e15e:	468b      	mov	fp, r1
 800e160:	ddd5      	ble.n	800e10e <_strtod_l+0x3ae>
 800e162:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e164:	1b2c      	subs	r4, r5, r4
 800e166:	441c      	add	r4, r3
 800e168:	2c00      	cmp	r4, #0
 800e16a:	f340 8096 	ble.w	800e29a <_strtod_l+0x53a>
 800e16e:	f014 030f 	ands.w	r3, r4, #15
 800e172:	d00a      	beq.n	800e18a <_strtod_l+0x42a>
 800e174:	495e      	ldr	r1, [pc, #376]	@ (800e2f0 <_strtod_l+0x590>)
 800e176:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e17a:	4652      	mov	r2, sl
 800e17c:	465b      	mov	r3, fp
 800e17e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e182:	f7f2 fa61 	bl	8000648 <__aeabi_dmul>
 800e186:	4682      	mov	sl, r0
 800e188:	468b      	mov	fp, r1
 800e18a:	f034 040f 	bics.w	r4, r4, #15
 800e18e:	d073      	beq.n	800e278 <_strtod_l+0x518>
 800e190:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800e194:	dd48      	ble.n	800e228 <_strtod_l+0x4c8>
 800e196:	2400      	movs	r4, #0
 800e198:	46a0      	mov	r8, r4
 800e19a:	940a      	str	r4, [sp, #40]	@ 0x28
 800e19c:	46a1      	mov	r9, r4
 800e19e:	9a05      	ldr	r2, [sp, #20]
 800e1a0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800e2f8 <_strtod_l+0x598>
 800e1a4:	2322      	movs	r3, #34	@ 0x22
 800e1a6:	6013      	str	r3, [r2, #0]
 800e1a8:	f04f 0a00 	mov.w	sl, #0
 800e1ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	f43f ae0f 	beq.w	800ddd2 <_strtod_l+0x72>
 800e1b4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e1b6:	9805      	ldr	r0, [sp, #20]
 800e1b8:	f002 ff02 	bl	8010fc0 <_Bfree>
 800e1bc:	9805      	ldr	r0, [sp, #20]
 800e1be:	4649      	mov	r1, r9
 800e1c0:	f002 fefe 	bl	8010fc0 <_Bfree>
 800e1c4:	9805      	ldr	r0, [sp, #20]
 800e1c6:	4641      	mov	r1, r8
 800e1c8:	f002 fefa 	bl	8010fc0 <_Bfree>
 800e1cc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e1ce:	9805      	ldr	r0, [sp, #20]
 800e1d0:	f002 fef6 	bl	8010fc0 <_Bfree>
 800e1d4:	9805      	ldr	r0, [sp, #20]
 800e1d6:	4621      	mov	r1, r4
 800e1d8:	f002 fef2 	bl	8010fc0 <_Bfree>
 800e1dc:	e5f9      	b.n	800ddd2 <_strtod_l+0x72>
 800e1de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e1e0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800e1e4:	4293      	cmp	r3, r2
 800e1e6:	dbbc      	blt.n	800e162 <_strtod_l+0x402>
 800e1e8:	4c41      	ldr	r4, [pc, #260]	@ (800e2f0 <_strtod_l+0x590>)
 800e1ea:	f1c5 050f 	rsb	r5, r5, #15
 800e1ee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800e1f2:	4652      	mov	r2, sl
 800e1f4:	465b      	mov	r3, fp
 800e1f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e1fa:	f7f2 fa25 	bl	8000648 <__aeabi_dmul>
 800e1fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e200:	1b5d      	subs	r5, r3, r5
 800e202:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800e206:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e20a:	e78f      	b.n	800e12c <_strtod_l+0x3cc>
 800e20c:	3316      	adds	r3, #22
 800e20e:	dba8      	blt.n	800e162 <_strtod_l+0x402>
 800e210:	4b37      	ldr	r3, [pc, #220]	@ (800e2f0 <_strtod_l+0x590>)
 800e212:	eba9 0808 	sub.w	r8, r9, r8
 800e216:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800e21a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800e21e:	4650      	mov	r0, sl
 800e220:	4659      	mov	r1, fp
 800e222:	f7f2 fb3b 	bl	800089c <__aeabi_ddiv>
 800e226:	e783      	b.n	800e130 <_strtod_l+0x3d0>
 800e228:	4b32      	ldr	r3, [pc, #200]	@ (800e2f4 <_strtod_l+0x594>)
 800e22a:	9308      	str	r3, [sp, #32]
 800e22c:	2300      	movs	r3, #0
 800e22e:	1124      	asrs	r4, r4, #4
 800e230:	4650      	mov	r0, sl
 800e232:	4659      	mov	r1, fp
 800e234:	461e      	mov	r6, r3
 800e236:	2c01      	cmp	r4, #1
 800e238:	dc21      	bgt.n	800e27e <_strtod_l+0x51e>
 800e23a:	b10b      	cbz	r3, 800e240 <_strtod_l+0x4e0>
 800e23c:	4682      	mov	sl, r0
 800e23e:	468b      	mov	fp, r1
 800e240:	492c      	ldr	r1, [pc, #176]	@ (800e2f4 <_strtod_l+0x594>)
 800e242:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800e246:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800e24a:	4652      	mov	r2, sl
 800e24c:	465b      	mov	r3, fp
 800e24e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e252:	f7f2 f9f9 	bl	8000648 <__aeabi_dmul>
 800e256:	4b28      	ldr	r3, [pc, #160]	@ (800e2f8 <_strtod_l+0x598>)
 800e258:	460a      	mov	r2, r1
 800e25a:	400b      	ands	r3, r1
 800e25c:	4927      	ldr	r1, [pc, #156]	@ (800e2fc <_strtod_l+0x59c>)
 800e25e:	428b      	cmp	r3, r1
 800e260:	4682      	mov	sl, r0
 800e262:	d898      	bhi.n	800e196 <_strtod_l+0x436>
 800e264:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800e268:	428b      	cmp	r3, r1
 800e26a:	bf86      	itte	hi
 800e26c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800e300 <_strtod_l+0x5a0>
 800e270:	f04f 3aff 	movhi.w	sl, #4294967295
 800e274:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800e278:	2300      	movs	r3, #0
 800e27a:	9308      	str	r3, [sp, #32]
 800e27c:	e07a      	b.n	800e374 <_strtod_l+0x614>
 800e27e:	07e2      	lsls	r2, r4, #31
 800e280:	d505      	bpl.n	800e28e <_strtod_l+0x52e>
 800e282:	9b08      	ldr	r3, [sp, #32]
 800e284:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e288:	f7f2 f9de 	bl	8000648 <__aeabi_dmul>
 800e28c:	2301      	movs	r3, #1
 800e28e:	9a08      	ldr	r2, [sp, #32]
 800e290:	3208      	adds	r2, #8
 800e292:	3601      	adds	r6, #1
 800e294:	1064      	asrs	r4, r4, #1
 800e296:	9208      	str	r2, [sp, #32]
 800e298:	e7cd      	b.n	800e236 <_strtod_l+0x4d6>
 800e29a:	d0ed      	beq.n	800e278 <_strtod_l+0x518>
 800e29c:	4264      	negs	r4, r4
 800e29e:	f014 020f 	ands.w	r2, r4, #15
 800e2a2:	d00a      	beq.n	800e2ba <_strtod_l+0x55a>
 800e2a4:	4b12      	ldr	r3, [pc, #72]	@ (800e2f0 <_strtod_l+0x590>)
 800e2a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e2aa:	4650      	mov	r0, sl
 800e2ac:	4659      	mov	r1, fp
 800e2ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2b2:	f7f2 faf3 	bl	800089c <__aeabi_ddiv>
 800e2b6:	4682      	mov	sl, r0
 800e2b8:	468b      	mov	fp, r1
 800e2ba:	1124      	asrs	r4, r4, #4
 800e2bc:	d0dc      	beq.n	800e278 <_strtod_l+0x518>
 800e2be:	2c1f      	cmp	r4, #31
 800e2c0:	dd20      	ble.n	800e304 <_strtod_l+0x5a4>
 800e2c2:	2400      	movs	r4, #0
 800e2c4:	46a0      	mov	r8, r4
 800e2c6:	940a      	str	r4, [sp, #40]	@ 0x28
 800e2c8:	46a1      	mov	r9, r4
 800e2ca:	9a05      	ldr	r2, [sp, #20]
 800e2cc:	2322      	movs	r3, #34	@ 0x22
 800e2ce:	f04f 0a00 	mov.w	sl, #0
 800e2d2:	f04f 0b00 	mov.w	fp, #0
 800e2d6:	6013      	str	r3, [r2, #0]
 800e2d8:	e768      	b.n	800e1ac <_strtod_l+0x44c>
 800e2da:	bf00      	nop
 800e2dc:	080128a5 	.word	0x080128a5
 800e2e0:	08012844 	.word	0x08012844
 800e2e4:	0801289d 	.word	0x0801289d
 800e2e8:	080128dc 	.word	0x080128dc
 800e2ec:	08012c6d 	.word	0x08012c6d
 800e2f0:	08012a58 	.word	0x08012a58
 800e2f4:	08012a30 	.word	0x08012a30
 800e2f8:	7ff00000 	.word	0x7ff00000
 800e2fc:	7ca00000 	.word	0x7ca00000
 800e300:	7fefffff 	.word	0x7fefffff
 800e304:	f014 0310 	ands.w	r3, r4, #16
 800e308:	bf18      	it	ne
 800e30a:	236a      	movne	r3, #106	@ 0x6a
 800e30c:	4ea9      	ldr	r6, [pc, #676]	@ (800e5b4 <_strtod_l+0x854>)
 800e30e:	9308      	str	r3, [sp, #32]
 800e310:	4650      	mov	r0, sl
 800e312:	4659      	mov	r1, fp
 800e314:	2300      	movs	r3, #0
 800e316:	07e2      	lsls	r2, r4, #31
 800e318:	d504      	bpl.n	800e324 <_strtod_l+0x5c4>
 800e31a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e31e:	f7f2 f993 	bl	8000648 <__aeabi_dmul>
 800e322:	2301      	movs	r3, #1
 800e324:	1064      	asrs	r4, r4, #1
 800e326:	f106 0608 	add.w	r6, r6, #8
 800e32a:	d1f4      	bne.n	800e316 <_strtod_l+0x5b6>
 800e32c:	b10b      	cbz	r3, 800e332 <_strtod_l+0x5d2>
 800e32e:	4682      	mov	sl, r0
 800e330:	468b      	mov	fp, r1
 800e332:	9b08      	ldr	r3, [sp, #32]
 800e334:	b1b3      	cbz	r3, 800e364 <_strtod_l+0x604>
 800e336:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800e33a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800e33e:	2b00      	cmp	r3, #0
 800e340:	4659      	mov	r1, fp
 800e342:	dd0f      	ble.n	800e364 <_strtod_l+0x604>
 800e344:	2b1f      	cmp	r3, #31
 800e346:	dd55      	ble.n	800e3f4 <_strtod_l+0x694>
 800e348:	2b34      	cmp	r3, #52	@ 0x34
 800e34a:	bfde      	ittt	le
 800e34c:	f04f 33ff 	movle.w	r3, #4294967295
 800e350:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800e354:	4093      	lslle	r3, r2
 800e356:	f04f 0a00 	mov.w	sl, #0
 800e35a:	bfcc      	ite	gt
 800e35c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800e360:	ea03 0b01 	andle.w	fp, r3, r1
 800e364:	2200      	movs	r2, #0
 800e366:	2300      	movs	r3, #0
 800e368:	4650      	mov	r0, sl
 800e36a:	4659      	mov	r1, fp
 800e36c:	f7f2 fbd4 	bl	8000b18 <__aeabi_dcmpeq>
 800e370:	2800      	cmp	r0, #0
 800e372:	d1a6      	bne.n	800e2c2 <_strtod_l+0x562>
 800e374:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e376:	9300      	str	r3, [sp, #0]
 800e378:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800e37a:	9805      	ldr	r0, [sp, #20]
 800e37c:	462b      	mov	r3, r5
 800e37e:	463a      	mov	r2, r7
 800e380:	f002 fe86 	bl	8011090 <__s2b>
 800e384:	900a      	str	r0, [sp, #40]	@ 0x28
 800e386:	2800      	cmp	r0, #0
 800e388:	f43f af05 	beq.w	800e196 <_strtod_l+0x436>
 800e38c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e38e:	2a00      	cmp	r2, #0
 800e390:	eba9 0308 	sub.w	r3, r9, r8
 800e394:	bfa8      	it	ge
 800e396:	2300      	movge	r3, #0
 800e398:	9312      	str	r3, [sp, #72]	@ 0x48
 800e39a:	2400      	movs	r4, #0
 800e39c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800e3a0:	9316      	str	r3, [sp, #88]	@ 0x58
 800e3a2:	46a0      	mov	r8, r4
 800e3a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e3a6:	9805      	ldr	r0, [sp, #20]
 800e3a8:	6859      	ldr	r1, [r3, #4]
 800e3aa:	f002 fdc9 	bl	8010f40 <_Balloc>
 800e3ae:	4681      	mov	r9, r0
 800e3b0:	2800      	cmp	r0, #0
 800e3b2:	f43f aef4 	beq.w	800e19e <_strtod_l+0x43e>
 800e3b6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e3b8:	691a      	ldr	r2, [r3, #16]
 800e3ba:	3202      	adds	r2, #2
 800e3bc:	f103 010c 	add.w	r1, r3, #12
 800e3c0:	0092      	lsls	r2, r2, #2
 800e3c2:	300c      	adds	r0, #12
 800e3c4:	f001 fb05 	bl	800f9d2 <memcpy>
 800e3c8:	ec4b ab10 	vmov	d0, sl, fp
 800e3cc:	9805      	ldr	r0, [sp, #20]
 800e3ce:	aa1c      	add	r2, sp, #112	@ 0x70
 800e3d0:	a91b      	add	r1, sp, #108	@ 0x6c
 800e3d2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800e3d6:	f003 f997 	bl	8011708 <__d2b>
 800e3da:	901a      	str	r0, [sp, #104]	@ 0x68
 800e3dc:	2800      	cmp	r0, #0
 800e3de:	f43f aede 	beq.w	800e19e <_strtod_l+0x43e>
 800e3e2:	9805      	ldr	r0, [sp, #20]
 800e3e4:	2101      	movs	r1, #1
 800e3e6:	f002 fee9 	bl	80111bc <__i2b>
 800e3ea:	4680      	mov	r8, r0
 800e3ec:	b948      	cbnz	r0, 800e402 <_strtod_l+0x6a2>
 800e3ee:	f04f 0800 	mov.w	r8, #0
 800e3f2:	e6d4      	b.n	800e19e <_strtod_l+0x43e>
 800e3f4:	f04f 32ff 	mov.w	r2, #4294967295
 800e3f8:	fa02 f303 	lsl.w	r3, r2, r3
 800e3fc:	ea03 0a0a 	and.w	sl, r3, sl
 800e400:	e7b0      	b.n	800e364 <_strtod_l+0x604>
 800e402:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800e404:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800e406:	2d00      	cmp	r5, #0
 800e408:	bfab      	itete	ge
 800e40a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800e40c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800e40e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800e410:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800e412:	bfac      	ite	ge
 800e414:	18ef      	addge	r7, r5, r3
 800e416:	1b5e      	sublt	r6, r3, r5
 800e418:	9b08      	ldr	r3, [sp, #32]
 800e41a:	1aed      	subs	r5, r5, r3
 800e41c:	4415      	add	r5, r2
 800e41e:	4b66      	ldr	r3, [pc, #408]	@ (800e5b8 <_strtod_l+0x858>)
 800e420:	3d01      	subs	r5, #1
 800e422:	429d      	cmp	r5, r3
 800e424:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800e428:	da50      	bge.n	800e4cc <_strtod_l+0x76c>
 800e42a:	1b5b      	subs	r3, r3, r5
 800e42c:	2b1f      	cmp	r3, #31
 800e42e:	eba2 0203 	sub.w	r2, r2, r3
 800e432:	f04f 0101 	mov.w	r1, #1
 800e436:	dc3d      	bgt.n	800e4b4 <_strtod_l+0x754>
 800e438:	fa01 f303 	lsl.w	r3, r1, r3
 800e43c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e43e:	2300      	movs	r3, #0
 800e440:	9310      	str	r3, [sp, #64]	@ 0x40
 800e442:	18bd      	adds	r5, r7, r2
 800e444:	9b08      	ldr	r3, [sp, #32]
 800e446:	42af      	cmp	r7, r5
 800e448:	4416      	add	r6, r2
 800e44a:	441e      	add	r6, r3
 800e44c:	463b      	mov	r3, r7
 800e44e:	bfa8      	it	ge
 800e450:	462b      	movge	r3, r5
 800e452:	42b3      	cmp	r3, r6
 800e454:	bfa8      	it	ge
 800e456:	4633      	movge	r3, r6
 800e458:	2b00      	cmp	r3, #0
 800e45a:	bfc2      	ittt	gt
 800e45c:	1aed      	subgt	r5, r5, r3
 800e45e:	1af6      	subgt	r6, r6, r3
 800e460:	1aff      	subgt	r7, r7, r3
 800e462:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e464:	2b00      	cmp	r3, #0
 800e466:	dd16      	ble.n	800e496 <_strtod_l+0x736>
 800e468:	4641      	mov	r1, r8
 800e46a:	9805      	ldr	r0, [sp, #20]
 800e46c:	461a      	mov	r2, r3
 800e46e:	f002 ff65 	bl	801133c <__pow5mult>
 800e472:	4680      	mov	r8, r0
 800e474:	2800      	cmp	r0, #0
 800e476:	d0ba      	beq.n	800e3ee <_strtod_l+0x68e>
 800e478:	4601      	mov	r1, r0
 800e47a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e47c:	9805      	ldr	r0, [sp, #20]
 800e47e:	f002 feb3 	bl	80111e8 <__multiply>
 800e482:	900e      	str	r0, [sp, #56]	@ 0x38
 800e484:	2800      	cmp	r0, #0
 800e486:	f43f ae8a 	beq.w	800e19e <_strtod_l+0x43e>
 800e48a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e48c:	9805      	ldr	r0, [sp, #20]
 800e48e:	f002 fd97 	bl	8010fc0 <_Bfree>
 800e492:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e494:	931a      	str	r3, [sp, #104]	@ 0x68
 800e496:	2d00      	cmp	r5, #0
 800e498:	dc1d      	bgt.n	800e4d6 <_strtod_l+0x776>
 800e49a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	dd23      	ble.n	800e4e8 <_strtod_l+0x788>
 800e4a0:	4649      	mov	r1, r9
 800e4a2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800e4a4:	9805      	ldr	r0, [sp, #20]
 800e4a6:	f002 ff49 	bl	801133c <__pow5mult>
 800e4aa:	4681      	mov	r9, r0
 800e4ac:	b9e0      	cbnz	r0, 800e4e8 <_strtod_l+0x788>
 800e4ae:	f04f 0900 	mov.w	r9, #0
 800e4b2:	e674      	b.n	800e19e <_strtod_l+0x43e>
 800e4b4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800e4b8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800e4bc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800e4c0:	35e2      	adds	r5, #226	@ 0xe2
 800e4c2:	fa01 f305 	lsl.w	r3, r1, r5
 800e4c6:	9310      	str	r3, [sp, #64]	@ 0x40
 800e4c8:	9113      	str	r1, [sp, #76]	@ 0x4c
 800e4ca:	e7ba      	b.n	800e442 <_strtod_l+0x6e2>
 800e4cc:	2300      	movs	r3, #0
 800e4ce:	9310      	str	r3, [sp, #64]	@ 0x40
 800e4d0:	2301      	movs	r3, #1
 800e4d2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e4d4:	e7b5      	b.n	800e442 <_strtod_l+0x6e2>
 800e4d6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e4d8:	9805      	ldr	r0, [sp, #20]
 800e4da:	462a      	mov	r2, r5
 800e4dc:	f002 ff88 	bl	80113f0 <__lshift>
 800e4e0:	901a      	str	r0, [sp, #104]	@ 0x68
 800e4e2:	2800      	cmp	r0, #0
 800e4e4:	d1d9      	bne.n	800e49a <_strtod_l+0x73a>
 800e4e6:	e65a      	b.n	800e19e <_strtod_l+0x43e>
 800e4e8:	2e00      	cmp	r6, #0
 800e4ea:	dd07      	ble.n	800e4fc <_strtod_l+0x79c>
 800e4ec:	4649      	mov	r1, r9
 800e4ee:	9805      	ldr	r0, [sp, #20]
 800e4f0:	4632      	mov	r2, r6
 800e4f2:	f002 ff7d 	bl	80113f0 <__lshift>
 800e4f6:	4681      	mov	r9, r0
 800e4f8:	2800      	cmp	r0, #0
 800e4fa:	d0d8      	beq.n	800e4ae <_strtod_l+0x74e>
 800e4fc:	2f00      	cmp	r7, #0
 800e4fe:	dd08      	ble.n	800e512 <_strtod_l+0x7b2>
 800e500:	4641      	mov	r1, r8
 800e502:	9805      	ldr	r0, [sp, #20]
 800e504:	463a      	mov	r2, r7
 800e506:	f002 ff73 	bl	80113f0 <__lshift>
 800e50a:	4680      	mov	r8, r0
 800e50c:	2800      	cmp	r0, #0
 800e50e:	f43f ae46 	beq.w	800e19e <_strtod_l+0x43e>
 800e512:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e514:	9805      	ldr	r0, [sp, #20]
 800e516:	464a      	mov	r2, r9
 800e518:	f002 fff2 	bl	8011500 <__mdiff>
 800e51c:	4604      	mov	r4, r0
 800e51e:	2800      	cmp	r0, #0
 800e520:	f43f ae3d 	beq.w	800e19e <_strtod_l+0x43e>
 800e524:	68c3      	ldr	r3, [r0, #12]
 800e526:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e528:	2300      	movs	r3, #0
 800e52a:	60c3      	str	r3, [r0, #12]
 800e52c:	4641      	mov	r1, r8
 800e52e:	f002 ffcb 	bl	80114c8 <__mcmp>
 800e532:	2800      	cmp	r0, #0
 800e534:	da46      	bge.n	800e5c4 <_strtod_l+0x864>
 800e536:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e538:	ea53 030a 	orrs.w	r3, r3, sl
 800e53c:	d16c      	bne.n	800e618 <_strtod_l+0x8b8>
 800e53e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e542:	2b00      	cmp	r3, #0
 800e544:	d168      	bne.n	800e618 <_strtod_l+0x8b8>
 800e546:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e54a:	0d1b      	lsrs	r3, r3, #20
 800e54c:	051b      	lsls	r3, r3, #20
 800e54e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e552:	d961      	bls.n	800e618 <_strtod_l+0x8b8>
 800e554:	6963      	ldr	r3, [r4, #20]
 800e556:	b913      	cbnz	r3, 800e55e <_strtod_l+0x7fe>
 800e558:	6923      	ldr	r3, [r4, #16]
 800e55a:	2b01      	cmp	r3, #1
 800e55c:	dd5c      	ble.n	800e618 <_strtod_l+0x8b8>
 800e55e:	4621      	mov	r1, r4
 800e560:	2201      	movs	r2, #1
 800e562:	9805      	ldr	r0, [sp, #20]
 800e564:	f002 ff44 	bl	80113f0 <__lshift>
 800e568:	4641      	mov	r1, r8
 800e56a:	4604      	mov	r4, r0
 800e56c:	f002 ffac 	bl	80114c8 <__mcmp>
 800e570:	2800      	cmp	r0, #0
 800e572:	dd51      	ble.n	800e618 <_strtod_l+0x8b8>
 800e574:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e578:	9a08      	ldr	r2, [sp, #32]
 800e57a:	0d1b      	lsrs	r3, r3, #20
 800e57c:	051b      	lsls	r3, r3, #20
 800e57e:	2a00      	cmp	r2, #0
 800e580:	d06b      	beq.n	800e65a <_strtod_l+0x8fa>
 800e582:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e586:	d868      	bhi.n	800e65a <_strtod_l+0x8fa>
 800e588:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800e58c:	f67f ae9d 	bls.w	800e2ca <_strtod_l+0x56a>
 800e590:	4b0a      	ldr	r3, [pc, #40]	@ (800e5bc <_strtod_l+0x85c>)
 800e592:	4650      	mov	r0, sl
 800e594:	4659      	mov	r1, fp
 800e596:	2200      	movs	r2, #0
 800e598:	f7f2 f856 	bl	8000648 <__aeabi_dmul>
 800e59c:	4b08      	ldr	r3, [pc, #32]	@ (800e5c0 <_strtod_l+0x860>)
 800e59e:	400b      	ands	r3, r1
 800e5a0:	4682      	mov	sl, r0
 800e5a2:	468b      	mov	fp, r1
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	f47f ae05 	bne.w	800e1b4 <_strtod_l+0x454>
 800e5aa:	9a05      	ldr	r2, [sp, #20]
 800e5ac:	2322      	movs	r3, #34	@ 0x22
 800e5ae:	6013      	str	r3, [r2, #0]
 800e5b0:	e600      	b.n	800e1b4 <_strtod_l+0x454>
 800e5b2:	bf00      	nop
 800e5b4:	08012870 	.word	0x08012870
 800e5b8:	fffffc02 	.word	0xfffffc02
 800e5bc:	39500000 	.word	0x39500000
 800e5c0:	7ff00000 	.word	0x7ff00000
 800e5c4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800e5c8:	d165      	bne.n	800e696 <_strtod_l+0x936>
 800e5ca:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800e5cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e5d0:	b35a      	cbz	r2, 800e62a <_strtod_l+0x8ca>
 800e5d2:	4a9f      	ldr	r2, [pc, #636]	@ (800e850 <_strtod_l+0xaf0>)
 800e5d4:	4293      	cmp	r3, r2
 800e5d6:	d12b      	bne.n	800e630 <_strtod_l+0x8d0>
 800e5d8:	9b08      	ldr	r3, [sp, #32]
 800e5da:	4651      	mov	r1, sl
 800e5dc:	b303      	cbz	r3, 800e620 <_strtod_l+0x8c0>
 800e5de:	4b9d      	ldr	r3, [pc, #628]	@ (800e854 <_strtod_l+0xaf4>)
 800e5e0:	465a      	mov	r2, fp
 800e5e2:	4013      	ands	r3, r2
 800e5e4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800e5e8:	f04f 32ff 	mov.w	r2, #4294967295
 800e5ec:	d81b      	bhi.n	800e626 <_strtod_l+0x8c6>
 800e5ee:	0d1b      	lsrs	r3, r3, #20
 800e5f0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e5f4:	fa02 f303 	lsl.w	r3, r2, r3
 800e5f8:	4299      	cmp	r1, r3
 800e5fa:	d119      	bne.n	800e630 <_strtod_l+0x8d0>
 800e5fc:	4b96      	ldr	r3, [pc, #600]	@ (800e858 <_strtod_l+0xaf8>)
 800e5fe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e600:	429a      	cmp	r2, r3
 800e602:	d102      	bne.n	800e60a <_strtod_l+0x8aa>
 800e604:	3101      	adds	r1, #1
 800e606:	f43f adca 	beq.w	800e19e <_strtod_l+0x43e>
 800e60a:	4b92      	ldr	r3, [pc, #584]	@ (800e854 <_strtod_l+0xaf4>)
 800e60c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e60e:	401a      	ands	r2, r3
 800e610:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800e614:	f04f 0a00 	mov.w	sl, #0
 800e618:	9b08      	ldr	r3, [sp, #32]
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d1b8      	bne.n	800e590 <_strtod_l+0x830>
 800e61e:	e5c9      	b.n	800e1b4 <_strtod_l+0x454>
 800e620:	f04f 33ff 	mov.w	r3, #4294967295
 800e624:	e7e8      	b.n	800e5f8 <_strtod_l+0x898>
 800e626:	4613      	mov	r3, r2
 800e628:	e7e6      	b.n	800e5f8 <_strtod_l+0x898>
 800e62a:	ea53 030a 	orrs.w	r3, r3, sl
 800e62e:	d0a1      	beq.n	800e574 <_strtod_l+0x814>
 800e630:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e632:	b1db      	cbz	r3, 800e66c <_strtod_l+0x90c>
 800e634:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e636:	4213      	tst	r3, r2
 800e638:	d0ee      	beq.n	800e618 <_strtod_l+0x8b8>
 800e63a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e63c:	9a08      	ldr	r2, [sp, #32]
 800e63e:	4650      	mov	r0, sl
 800e640:	4659      	mov	r1, fp
 800e642:	b1bb      	cbz	r3, 800e674 <_strtod_l+0x914>
 800e644:	f7ff fb6b 	bl	800dd1e <sulp>
 800e648:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e64c:	ec53 2b10 	vmov	r2, r3, d0
 800e650:	f7f1 fe44 	bl	80002dc <__adddf3>
 800e654:	4682      	mov	sl, r0
 800e656:	468b      	mov	fp, r1
 800e658:	e7de      	b.n	800e618 <_strtod_l+0x8b8>
 800e65a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800e65e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e662:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e666:	f04f 3aff 	mov.w	sl, #4294967295
 800e66a:	e7d5      	b.n	800e618 <_strtod_l+0x8b8>
 800e66c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e66e:	ea13 0f0a 	tst.w	r3, sl
 800e672:	e7e1      	b.n	800e638 <_strtod_l+0x8d8>
 800e674:	f7ff fb53 	bl	800dd1e <sulp>
 800e678:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e67c:	ec53 2b10 	vmov	r2, r3, d0
 800e680:	f7f1 fe2a 	bl	80002d8 <__aeabi_dsub>
 800e684:	2200      	movs	r2, #0
 800e686:	2300      	movs	r3, #0
 800e688:	4682      	mov	sl, r0
 800e68a:	468b      	mov	fp, r1
 800e68c:	f7f2 fa44 	bl	8000b18 <__aeabi_dcmpeq>
 800e690:	2800      	cmp	r0, #0
 800e692:	d0c1      	beq.n	800e618 <_strtod_l+0x8b8>
 800e694:	e619      	b.n	800e2ca <_strtod_l+0x56a>
 800e696:	4641      	mov	r1, r8
 800e698:	4620      	mov	r0, r4
 800e69a:	f003 f88d 	bl	80117b8 <__ratio>
 800e69e:	ec57 6b10 	vmov	r6, r7, d0
 800e6a2:	2200      	movs	r2, #0
 800e6a4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e6a8:	4630      	mov	r0, r6
 800e6aa:	4639      	mov	r1, r7
 800e6ac:	f7f2 fa48 	bl	8000b40 <__aeabi_dcmple>
 800e6b0:	2800      	cmp	r0, #0
 800e6b2:	d06f      	beq.n	800e794 <_strtod_l+0xa34>
 800e6b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d17a      	bne.n	800e7b0 <_strtod_l+0xa50>
 800e6ba:	f1ba 0f00 	cmp.w	sl, #0
 800e6be:	d158      	bne.n	800e772 <_strtod_l+0xa12>
 800e6c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e6c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d15a      	bne.n	800e780 <_strtod_l+0xa20>
 800e6ca:	4b64      	ldr	r3, [pc, #400]	@ (800e85c <_strtod_l+0xafc>)
 800e6cc:	2200      	movs	r2, #0
 800e6ce:	4630      	mov	r0, r6
 800e6d0:	4639      	mov	r1, r7
 800e6d2:	f7f2 fa2b 	bl	8000b2c <__aeabi_dcmplt>
 800e6d6:	2800      	cmp	r0, #0
 800e6d8:	d159      	bne.n	800e78e <_strtod_l+0xa2e>
 800e6da:	4630      	mov	r0, r6
 800e6dc:	4639      	mov	r1, r7
 800e6de:	4b60      	ldr	r3, [pc, #384]	@ (800e860 <_strtod_l+0xb00>)
 800e6e0:	2200      	movs	r2, #0
 800e6e2:	f7f1 ffb1 	bl	8000648 <__aeabi_dmul>
 800e6e6:	4606      	mov	r6, r0
 800e6e8:	460f      	mov	r7, r1
 800e6ea:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800e6ee:	9606      	str	r6, [sp, #24]
 800e6f0:	9307      	str	r3, [sp, #28]
 800e6f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e6f6:	4d57      	ldr	r5, [pc, #348]	@ (800e854 <_strtod_l+0xaf4>)
 800e6f8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e6fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e6fe:	401d      	ands	r5, r3
 800e700:	4b58      	ldr	r3, [pc, #352]	@ (800e864 <_strtod_l+0xb04>)
 800e702:	429d      	cmp	r5, r3
 800e704:	f040 80b2 	bne.w	800e86c <_strtod_l+0xb0c>
 800e708:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e70a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800e70e:	ec4b ab10 	vmov	d0, sl, fp
 800e712:	f002 ff89 	bl	8011628 <__ulp>
 800e716:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e71a:	ec51 0b10 	vmov	r0, r1, d0
 800e71e:	f7f1 ff93 	bl	8000648 <__aeabi_dmul>
 800e722:	4652      	mov	r2, sl
 800e724:	465b      	mov	r3, fp
 800e726:	f7f1 fdd9 	bl	80002dc <__adddf3>
 800e72a:	460b      	mov	r3, r1
 800e72c:	4949      	ldr	r1, [pc, #292]	@ (800e854 <_strtod_l+0xaf4>)
 800e72e:	4a4e      	ldr	r2, [pc, #312]	@ (800e868 <_strtod_l+0xb08>)
 800e730:	4019      	ands	r1, r3
 800e732:	4291      	cmp	r1, r2
 800e734:	4682      	mov	sl, r0
 800e736:	d942      	bls.n	800e7be <_strtod_l+0xa5e>
 800e738:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e73a:	4b47      	ldr	r3, [pc, #284]	@ (800e858 <_strtod_l+0xaf8>)
 800e73c:	429a      	cmp	r2, r3
 800e73e:	d103      	bne.n	800e748 <_strtod_l+0x9e8>
 800e740:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e742:	3301      	adds	r3, #1
 800e744:	f43f ad2b 	beq.w	800e19e <_strtod_l+0x43e>
 800e748:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800e858 <_strtod_l+0xaf8>
 800e74c:	f04f 3aff 	mov.w	sl, #4294967295
 800e750:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e752:	9805      	ldr	r0, [sp, #20]
 800e754:	f002 fc34 	bl	8010fc0 <_Bfree>
 800e758:	9805      	ldr	r0, [sp, #20]
 800e75a:	4649      	mov	r1, r9
 800e75c:	f002 fc30 	bl	8010fc0 <_Bfree>
 800e760:	9805      	ldr	r0, [sp, #20]
 800e762:	4641      	mov	r1, r8
 800e764:	f002 fc2c 	bl	8010fc0 <_Bfree>
 800e768:	9805      	ldr	r0, [sp, #20]
 800e76a:	4621      	mov	r1, r4
 800e76c:	f002 fc28 	bl	8010fc0 <_Bfree>
 800e770:	e618      	b.n	800e3a4 <_strtod_l+0x644>
 800e772:	f1ba 0f01 	cmp.w	sl, #1
 800e776:	d103      	bne.n	800e780 <_strtod_l+0xa20>
 800e778:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	f43f ada5 	beq.w	800e2ca <_strtod_l+0x56a>
 800e780:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800e830 <_strtod_l+0xad0>
 800e784:	4f35      	ldr	r7, [pc, #212]	@ (800e85c <_strtod_l+0xafc>)
 800e786:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e78a:	2600      	movs	r6, #0
 800e78c:	e7b1      	b.n	800e6f2 <_strtod_l+0x992>
 800e78e:	4f34      	ldr	r7, [pc, #208]	@ (800e860 <_strtod_l+0xb00>)
 800e790:	2600      	movs	r6, #0
 800e792:	e7aa      	b.n	800e6ea <_strtod_l+0x98a>
 800e794:	4b32      	ldr	r3, [pc, #200]	@ (800e860 <_strtod_l+0xb00>)
 800e796:	4630      	mov	r0, r6
 800e798:	4639      	mov	r1, r7
 800e79a:	2200      	movs	r2, #0
 800e79c:	f7f1 ff54 	bl	8000648 <__aeabi_dmul>
 800e7a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e7a2:	4606      	mov	r6, r0
 800e7a4:	460f      	mov	r7, r1
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d09f      	beq.n	800e6ea <_strtod_l+0x98a>
 800e7aa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800e7ae:	e7a0      	b.n	800e6f2 <_strtod_l+0x992>
 800e7b0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800e838 <_strtod_l+0xad8>
 800e7b4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e7b8:	ec57 6b17 	vmov	r6, r7, d7
 800e7bc:	e799      	b.n	800e6f2 <_strtod_l+0x992>
 800e7be:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800e7c2:	9b08      	ldr	r3, [sp, #32]
 800e7c4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d1c1      	bne.n	800e750 <_strtod_l+0x9f0>
 800e7cc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e7d0:	0d1b      	lsrs	r3, r3, #20
 800e7d2:	051b      	lsls	r3, r3, #20
 800e7d4:	429d      	cmp	r5, r3
 800e7d6:	d1bb      	bne.n	800e750 <_strtod_l+0x9f0>
 800e7d8:	4630      	mov	r0, r6
 800e7da:	4639      	mov	r1, r7
 800e7dc:	f7f2 fa94 	bl	8000d08 <__aeabi_d2lz>
 800e7e0:	f7f1 ff04 	bl	80005ec <__aeabi_l2d>
 800e7e4:	4602      	mov	r2, r0
 800e7e6:	460b      	mov	r3, r1
 800e7e8:	4630      	mov	r0, r6
 800e7ea:	4639      	mov	r1, r7
 800e7ec:	f7f1 fd74 	bl	80002d8 <__aeabi_dsub>
 800e7f0:	460b      	mov	r3, r1
 800e7f2:	4602      	mov	r2, r0
 800e7f4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800e7f8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800e7fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e7fe:	ea46 060a 	orr.w	r6, r6, sl
 800e802:	431e      	orrs	r6, r3
 800e804:	d06f      	beq.n	800e8e6 <_strtod_l+0xb86>
 800e806:	a30e      	add	r3, pc, #56	@ (adr r3, 800e840 <_strtod_l+0xae0>)
 800e808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e80c:	f7f2 f98e 	bl	8000b2c <__aeabi_dcmplt>
 800e810:	2800      	cmp	r0, #0
 800e812:	f47f accf 	bne.w	800e1b4 <_strtod_l+0x454>
 800e816:	a30c      	add	r3, pc, #48	@ (adr r3, 800e848 <_strtod_l+0xae8>)
 800e818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e81c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e820:	f7f2 f9a2 	bl	8000b68 <__aeabi_dcmpgt>
 800e824:	2800      	cmp	r0, #0
 800e826:	d093      	beq.n	800e750 <_strtod_l+0x9f0>
 800e828:	e4c4      	b.n	800e1b4 <_strtod_l+0x454>
 800e82a:	bf00      	nop
 800e82c:	f3af 8000 	nop.w
 800e830:	00000000 	.word	0x00000000
 800e834:	bff00000 	.word	0xbff00000
 800e838:	00000000 	.word	0x00000000
 800e83c:	3ff00000 	.word	0x3ff00000
 800e840:	94a03595 	.word	0x94a03595
 800e844:	3fdfffff 	.word	0x3fdfffff
 800e848:	35afe535 	.word	0x35afe535
 800e84c:	3fe00000 	.word	0x3fe00000
 800e850:	000fffff 	.word	0x000fffff
 800e854:	7ff00000 	.word	0x7ff00000
 800e858:	7fefffff 	.word	0x7fefffff
 800e85c:	3ff00000 	.word	0x3ff00000
 800e860:	3fe00000 	.word	0x3fe00000
 800e864:	7fe00000 	.word	0x7fe00000
 800e868:	7c9fffff 	.word	0x7c9fffff
 800e86c:	9b08      	ldr	r3, [sp, #32]
 800e86e:	b323      	cbz	r3, 800e8ba <_strtod_l+0xb5a>
 800e870:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800e874:	d821      	bhi.n	800e8ba <_strtod_l+0xb5a>
 800e876:	a328      	add	r3, pc, #160	@ (adr r3, 800e918 <_strtod_l+0xbb8>)
 800e878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e87c:	4630      	mov	r0, r6
 800e87e:	4639      	mov	r1, r7
 800e880:	f7f2 f95e 	bl	8000b40 <__aeabi_dcmple>
 800e884:	b1a0      	cbz	r0, 800e8b0 <_strtod_l+0xb50>
 800e886:	4639      	mov	r1, r7
 800e888:	4630      	mov	r0, r6
 800e88a:	f7f2 f9b5 	bl	8000bf8 <__aeabi_d2uiz>
 800e88e:	2801      	cmp	r0, #1
 800e890:	bf38      	it	cc
 800e892:	2001      	movcc	r0, #1
 800e894:	f7f1 fe5e 	bl	8000554 <__aeabi_ui2d>
 800e898:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e89a:	4606      	mov	r6, r0
 800e89c:	460f      	mov	r7, r1
 800e89e:	b9fb      	cbnz	r3, 800e8e0 <_strtod_l+0xb80>
 800e8a0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e8a4:	9014      	str	r0, [sp, #80]	@ 0x50
 800e8a6:	9315      	str	r3, [sp, #84]	@ 0x54
 800e8a8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800e8ac:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e8b0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e8b2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800e8b6:	1b5b      	subs	r3, r3, r5
 800e8b8:	9311      	str	r3, [sp, #68]	@ 0x44
 800e8ba:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e8be:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800e8c2:	f002 feb1 	bl	8011628 <__ulp>
 800e8c6:	4650      	mov	r0, sl
 800e8c8:	ec53 2b10 	vmov	r2, r3, d0
 800e8cc:	4659      	mov	r1, fp
 800e8ce:	f7f1 febb 	bl	8000648 <__aeabi_dmul>
 800e8d2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800e8d6:	f7f1 fd01 	bl	80002dc <__adddf3>
 800e8da:	4682      	mov	sl, r0
 800e8dc:	468b      	mov	fp, r1
 800e8de:	e770      	b.n	800e7c2 <_strtod_l+0xa62>
 800e8e0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800e8e4:	e7e0      	b.n	800e8a8 <_strtod_l+0xb48>
 800e8e6:	a30e      	add	r3, pc, #56	@ (adr r3, 800e920 <_strtod_l+0xbc0>)
 800e8e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8ec:	f7f2 f91e 	bl	8000b2c <__aeabi_dcmplt>
 800e8f0:	e798      	b.n	800e824 <_strtod_l+0xac4>
 800e8f2:	2300      	movs	r3, #0
 800e8f4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e8f6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800e8f8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e8fa:	6013      	str	r3, [r2, #0]
 800e8fc:	f7ff ba6d 	b.w	800ddda <_strtod_l+0x7a>
 800e900:	2a65      	cmp	r2, #101	@ 0x65
 800e902:	f43f ab66 	beq.w	800dfd2 <_strtod_l+0x272>
 800e906:	2a45      	cmp	r2, #69	@ 0x45
 800e908:	f43f ab63 	beq.w	800dfd2 <_strtod_l+0x272>
 800e90c:	2301      	movs	r3, #1
 800e90e:	f7ff bb9e 	b.w	800e04e <_strtod_l+0x2ee>
 800e912:	bf00      	nop
 800e914:	f3af 8000 	nop.w
 800e918:	ffc00000 	.word	0xffc00000
 800e91c:	41dfffff 	.word	0x41dfffff
 800e920:	94a03595 	.word	0x94a03595
 800e924:	3fcfffff 	.word	0x3fcfffff

0800e928 <_strtod_r>:
 800e928:	4b01      	ldr	r3, [pc, #4]	@ (800e930 <_strtod_r+0x8>)
 800e92a:	f7ff ba19 	b.w	800dd60 <_strtod_l>
 800e92e:	bf00      	nop
 800e930:	2000009c 	.word	0x2000009c

0800e934 <strtod>:
 800e934:	460a      	mov	r2, r1
 800e936:	4601      	mov	r1, r0
 800e938:	4802      	ldr	r0, [pc, #8]	@ (800e944 <strtod+0x10>)
 800e93a:	4b03      	ldr	r3, [pc, #12]	@ (800e948 <strtod+0x14>)
 800e93c:	6800      	ldr	r0, [r0, #0]
 800e93e:	f7ff ba0f 	b.w	800dd60 <_strtod_l>
 800e942:	bf00      	nop
 800e944:	20000208 	.word	0x20000208
 800e948:	2000009c 	.word	0x2000009c

0800e94c <__cvt>:
 800e94c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e950:	ec57 6b10 	vmov	r6, r7, d0
 800e954:	2f00      	cmp	r7, #0
 800e956:	460c      	mov	r4, r1
 800e958:	4619      	mov	r1, r3
 800e95a:	463b      	mov	r3, r7
 800e95c:	bfbb      	ittet	lt
 800e95e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800e962:	461f      	movlt	r7, r3
 800e964:	2300      	movge	r3, #0
 800e966:	232d      	movlt	r3, #45	@ 0x2d
 800e968:	700b      	strb	r3, [r1, #0]
 800e96a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e96c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800e970:	4691      	mov	r9, r2
 800e972:	f023 0820 	bic.w	r8, r3, #32
 800e976:	bfbc      	itt	lt
 800e978:	4632      	movlt	r2, r6
 800e97a:	4616      	movlt	r6, r2
 800e97c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e980:	d005      	beq.n	800e98e <__cvt+0x42>
 800e982:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800e986:	d100      	bne.n	800e98a <__cvt+0x3e>
 800e988:	3401      	adds	r4, #1
 800e98a:	2102      	movs	r1, #2
 800e98c:	e000      	b.n	800e990 <__cvt+0x44>
 800e98e:	2103      	movs	r1, #3
 800e990:	ab03      	add	r3, sp, #12
 800e992:	9301      	str	r3, [sp, #4]
 800e994:	ab02      	add	r3, sp, #8
 800e996:	9300      	str	r3, [sp, #0]
 800e998:	ec47 6b10 	vmov	d0, r6, r7
 800e99c:	4653      	mov	r3, sl
 800e99e:	4622      	mov	r2, r4
 800e9a0:	f001 f8be 	bl	800fb20 <_dtoa_r>
 800e9a4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800e9a8:	4605      	mov	r5, r0
 800e9aa:	d119      	bne.n	800e9e0 <__cvt+0x94>
 800e9ac:	f019 0f01 	tst.w	r9, #1
 800e9b0:	d00e      	beq.n	800e9d0 <__cvt+0x84>
 800e9b2:	eb00 0904 	add.w	r9, r0, r4
 800e9b6:	2200      	movs	r2, #0
 800e9b8:	2300      	movs	r3, #0
 800e9ba:	4630      	mov	r0, r6
 800e9bc:	4639      	mov	r1, r7
 800e9be:	f7f2 f8ab 	bl	8000b18 <__aeabi_dcmpeq>
 800e9c2:	b108      	cbz	r0, 800e9c8 <__cvt+0x7c>
 800e9c4:	f8cd 900c 	str.w	r9, [sp, #12]
 800e9c8:	2230      	movs	r2, #48	@ 0x30
 800e9ca:	9b03      	ldr	r3, [sp, #12]
 800e9cc:	454b      	cmp	r3, r9
 800e9ce:	d31e      	bcc.n	800ea0e <__cvt+0xc2>
 800e9d0:	9b03      	ldr	r3, [sp, #12]
 800e9d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e9d4:	1b5b      	subs	r3, r3, r5
 800e9d6:	4628      	mov	r0, r5
 800e9d8:	6013      	str	r3, [r2, #0]
 800e9da:	b004      	add	sp, #16
 800e9dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9e0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e9e4:	eb00 0904 	add.w	r9, r0, r4
 800e9e8:	d1e5      	bne.n	800e9b6 <__cvt+0x6a>
 800e9ea:	7803      	ldrb	r3, [r0, #0]
 800e9ec:	2b30      	cmp	r3, #48	@ 0x30
 800e9ee:	d10a      	bne.n	800ea06 <__cvt+0xba>
 800e9f0:	2200      	movs	r2, #0
 800e9f2:	2300      	movs	r3, #0
 800e9f4:	4630      	mov	r0, r6
 800e9f6:	4639      	mov	r1, r7
 800e9f8:	f7f2 f88e 	bl	8000b18 <__aeabi_dcmpeq>
 800e9fc:	b918      	cbnz	r0, 800ea06 <__cvt+0xba>
 800e9fe:	f1c4 0401 	rsb	r4, r4, #1
 800ea02:	f8ca 4000 	str.w	r4, [sl]
 800ea06:	f8da 3000 	ldr.w	r3, [sl]
 800ea0a:	4499      	add	r9, r3
 800ea0c:	e7d3      	b.n	800e9b6 <__cvt+0x6a>
 800ea0e:	1c59      	adds	r1, r3, #1
 800ea10:	9103      	str	r1, [sp, #12]
 800ea12:	701a      	strb	r2, [r3, #0]
 800ea14:	e7d9      	b.n	800e9ca <__cvt+0x7e>

0800ea16 <__exponent>:
 800ea16:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ea18:	2900      	cmp	r1, #0
 800ea1a:	bfba      	itte	lt
 800ea1c:	4249      	neglt	r1, r1
 800ea1e:	232d      	movlt	r3, #45	@ 0x2d
 800ea20:	232b      	movge	r3, #43	@ 0x2b
 800ea22:	2909      	cmp	r1, #9
 800ea24:	7002      	strb	r2, [r0, #0]
 800ea26:	7043      	strb	r3, [r0, #1]
 800ea28:	dd29      	ble.n	800ea7e <__exponent+0x68>
 800ea2a:	f10d 0307 	add.w	r3, sp, #7
 800ea2e:	461d      	mov	r5, r3
 800ea30:	270a      	movs	r7, #10
 800ea32:	461a      	mov	r2, r3
 800ea34:	fbb1 f6f7 	udiv	r6, r1, r7
 800ea38:	fb07 1416 	mls	r4, r7, r6, r1
 800ea3c:	3430      	adds	r4, #48	@ 0x30
 800ea3e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ea42:	460c      	mov	r4, r1
 800ea44:	2c63      	cmp	r4, #99	@ 0x63
 800ea46:	f103 33ff 	add.w	r3, r3, #4294967295
 800ea4a:	4631      	mov	r1, r6
 800ea4c:	dcf1      	bgt.n	800ea32 <__exponent+0x1c>
 800ea4e:	3130      	adds	r1, #48	@ 0x30
 800ea50:	1e94      	subs	r4, r2, #2
 800ea52:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ea56:	1c41      	adds	r1, r0, #1
 800ea58:	4623      	mov	r3, r4
 800ea5a:	42ab      	cmp	r3, r5
 800ea5c:	d30a      	bcc.n	800ea74 <__exponent+0x5e>
 800ea5e:	f10d 0309 	add.w	r3, sp, #9
 800ea62:	1a9b      	subs	r3, r3, r2
 800ea64:	42ac      	cmp	r4, r5
 800ea66:	bf88      	it	hi
 800ea68:	2300      	movhi	r3, #0
 800ea6a:	3302      	adds	r3, #2
 800ea6c:	4403      	add	r3, r0
 800ea6e:	1a18      	subs	r0, r3, r0
 800ea70:	b003      	add	sp, #12
 800ea72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ea74:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ea78:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ea7c:	e7ed      	b.n	800ea5a <__exponent+0x44>
 800ea7e:	2330      	movs	r3, #48	@ 0x30
 800ea80:	3130      	adds	r1, #48	@ 0x30
 800ea82:	7083      	strb	r3, [r0, #2]
 800ea84:	70c1      	strb	r1, [r0, #3]
 800ea86:	1d03      	adds	r3, r0, #4
 800ea88:	e7f1      	b.n	800ea6e <__exponent+0x58>
	...

0800ea8c <_printf_float>:
 800ea8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea90:	b08d      	sub	sp, #52	@ 0x34
 800ea92:	460c      	mov	r4, r1
 800ea94:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ea98:	4616      	mov	r6, r2
 800ea9a:	461f      	mov	r7, r3
 800ea9c:	4605      	mov	r5, r0
 800ea9e:	f000 ff21 	bl	800f8e4 <_localeconv_r>
 800eaa2:	6803      	ldr	r3, [r0, #0]
 800eaa4:	9304      	str	r3, [sp, #16]
 800eaa6:	4618      	mov	r0, r3
 800eaa8:	f7f1 fc0a 	bl	80002c0 <strlen>
 800eaac:	2300      	movs	r3, #0
 800eaae:	930a      	str	r3, [sp, #40]	@ 0x28
 800eab0:	f8d8 3000 	ldr.w	r3, [r8]
 800eab4:	9005      	str	r0, [sp, #20]
 800eab6:	3307      	adds	r3, #7
 800eab8:	f023 0307 	bic.w	r3, r3, #7
 800eabc:	f103 0208 	add.w	r2, r3, #8
 800eac0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800eac4:	f8d4 b000 	ldr.w	fp, [r4]
 800eac8:	f8c8 2000 	str.w	r2, [r8]
 800eacc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ead0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800ead4:	9307      	str	r3, [sp, #28]
 800ead6:	f8cd 8018 	str.w	r8, [sp, #24]
 800eada:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800eade:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eae2:	4b9c      	ldr	r3, [pc, #624]	@ (800ed54 <_printf_float+0x2c8>)
 800eae4:	f04f 32ff 	mov.w	r2, #4294967295
 800eae8:	f7f2 f848 	bl	8000b7c <__aeabi_dcmpun>
 800eaec:	bb70      	cbnz	r0, 800eb4c <_printf_float+0xc0>
 800eaee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eaf2:	4b98      	ldr	r3, [pc, #608]	@ (800ed54 <_printf_float+0x2c8>)
 800eaf4:	f04f 32ff 	mov.w	r2, #4294967295
 800eaf8:	f7f2 f822 	bl	8000b40 <__aeabi_dcmple>
 800eafc:	bb30      	cbnz	r0, 800eb4c <_printf_float+0xc0>
 800eafe:	2200      	movs	r2, #0
 800eb00:	2300      	movs	r3, #0
 800eb02:	4640      	mov	r0, r8
 800eb04:	4649      	mov	r1, r9
 800eb06:	f7f2 f811 	bl	8000b2c <__aeabi_dcmplt>
 800eb0a:	b110      	cbz	r0, 800eb12 <_printf_float+0x86>
 800eb0c:	232d      	movs	r3, #45	@ 0x2d
 800eb0e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800eb12:	4a91      	ldr	r2, [pc, #580]	@ (800ed58 <_printf_float+0x2cc>)
 800eb14:	4b91      	ldr	r3, [pc, #580]	@ (800ed5c <_printf_float+0x2d0>)
 800eb16:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800eb1a:	bf94      	ite	ls
 800eb1c:	4690      	movls	r8, r2
 800eb1e:	4698      	movhi	r8, r3
 800eb20:	2303      	movs	r3, #3
 800eb22:	6123      	str	r3, [r4, #16]
 800eb24:	f02b 0304 	bic.w	r3, fp, #4
 800eb28:	6023      	str	r3, [r4, #0]
 800eb2a:	f04f 0900 	mov.w	r9, #0
 800eb2e:	9700      	str	r7, [sp, #0]
 800eb30:	4633      	mov	r3, r6
 800eb32:	aa0b      	add	r2, sp, #44	@ 0x2c
 800eb34:	4621      	mov	r1, r4
 800eb36:	4628      	mov	r0, r5
 800eb38:	f000 f9d2 	bl	800eee0 <_printf_common>
 800eb3c:	3001      	adds	r0, #1
 800eb3e:	f040 808d 	bne.w	800ec5c <_printf_float+0x1d0>
 800eb42:	f04f 30ff 	mov.w	r0, #4294967295
 800eb46:	b00d      	add	sp, #52	@ 0x34
 800eb48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb4c:	4642      	mov	r2, r8
 800eb4e:	464b      	mov	r3, r9
 800eb50:	4640      	mov	r0, r8
 800eb52:	4649      	mov	r1, r9
 800eb54:	f7f2 f812 	bl	8000b7c <__aeabi_dcmpun>
 800eb58:	b140      	cbz	r0, 800eb6c <_printf_float+0xe0>
 800eb5a:	464b      	mov	r3, r9
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	bfbc      	itt	lt
 800eb60:	232d      	movlt	r3, #45	@ 0x2d
 800eb62:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800eb66:	4a7e      	ldr	r2, [pc, #504]	@ (800ed60 <_printf_float+0x2d4>)
 800eb68:	4b7e      	ldr	r3, [pc, #504]	@ (800ed64 <_printf_float+0x2d8>)
 800eb6a:	e7d4      	b.n	800eb16 <_printf_float+0x8a>
 800eb6c:	6863      	ldr	r3, [r4, #4]
 800eb6e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800eb72:	9206      	str	r2, [sp, #24]
 800eb74:	1c5a      	adds	r2, r3, #1
 800eb76:	d13b      	bne.n	800ebf0 <_printf_float+0x164>
 800eb78:	2306      	movs	r3, #6
 800eb7a:	6063      	str	r3, [r4, #4]
 800eb7c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800eb80:	2300      	movs	r3, #0
 800eb82:	6022      	str	r2, [r4, #0]
 800eb84:	9303      	str	r3, [sp, #12]
 800eb86:	ab0a      	add	r3, sp, #40	@ 0x28
 800eb88:	e9cd a301 	strd	sl, r3, [sp, #4]
 800eb8c:	ab09      	add	r3, sp, #36	@ 0x24
 800eb8e:	9300      	str	r3, [sp, #0]
 800eb90:	6861      	ldr	r1, [r4, #4]
 800eb92:	ec49 8b10 	vmov	d0, r8, r9
 800eb96:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800eb9a:	4628      	mov	r0, r5
 800eb9c:	f7ff fed6 	bl	800e94c <__cvt>
 800eba0:	9b06      	ldr	r3, [sp, #24]
 800eba2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800eba4:	2b47      	cmp	r3, #71	@ 0x47
 800eba6:	4680      	mov	r8, r0
 800eba8:	d129      	bne.n	800ebfe <_printf_float+0x172>
 800ebaa:	1cc8      	adds	r0, r1, #3
 800ebac:	db02      	blt.n	800ebb4 <_printf_float+0x128>
 800ebae:	6863      	ldr	r3, [r4, #4]
 800ebb0:	4299      	cmp	r1, r3
 800ebb2:	dd41      	ble.n	800ec38 <_printf_float+0x1ac>
 800ebb4:	f1aa 0a02 	sub.w	sl, sl, #2
 800ebb8:	fa5f fa8a 	uxtb.w	sl, sl
 800ebbc:	3901      	subs	r1, #1
 800ebbe:	4652      	mov	r2, sl
 800ebc0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ebc4:	9109      	str	r1, [sp, #36]	@ 0x24
 800ebc6:	f7ff ff26 	bl	800ea16 <__exponent>
 800ebca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ebcc:	1813      	adds	r3, r2, r0
 800ebce:	2a01      	cmp	r2, #1
 800ebd0:	4681      	mov	r9, r0
 800ebd2:	6123      	str	r3, [r4, #16]
 800ebd4:	dc02      	bgt.n	800ebdc <_printf_float+0x150>
 800ebd6:	6822      	ldr	r2, [r4, #0]
 800ebd8:	07d2      	lsls	r2, r2, #31
 800ebda:	d501      	bpl.n	800ebe0 <_printf_float+0x154>
 800ebdc:	3301      	adds	r3, #1
 800ebde:	6123      	str	r3, [r4, #16]
 800ebe0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d0a2      	beq.n	800eb2e <_printf_float+0xa2>
 800ebe8:	232d      	movs	r3, #45	@ 0x2d
 800ebea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ebee:	e79e      	b.n	800eb2e <_printf_float+0xa2>
 800ebf0:	9a06      	ldr	r2, [sp, #24]
 800ebf2:	2a47      	cmp	r2, #71	@ 0x47
 800ebf4:	d1c2      	bne.n	800eb7c <_printf_float+0xf0>
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d1c0      	bne.n	800eb7c <_printf_float+0xf0>
 800ebfa:	2301      	movs	r3, #1
 800ebfc:	e7bd      	b.n	800eb7a <_printf_float+0xee>
 800ebfe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ec02:	d9db      	bls.n	800ebbc <_printf_float+0x130>
 800ec04:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800ec08:	d118      	bne.n	800ec3c <_printf_float+0x1b0>
 800ec0a:	2900      	cmp	r1, #0
 800ec0c:	6863      	ldr	r3, [r4, #4]
 800ec0e:	dd0b      	ble.n	800ec28 <_printf_float+0x19c>
 800ec10:	6121      	str	r1, [r4, #16]
 800ec12:	b913      	cbnz	r3, 800ec1a <_printf_float+0x18e>
 800ec14:	6822      	ldr	r2, [r4, #0]
 800ec16:	07d0      	lsls	r0, r2, #31
 800ec18:	d502      	bpl.n	800ec20 <_printf_float+0x194>
 800ec1a:	3301      	adds	r3, #1
 800ec1c:	440b      	add	r3, r1
 800ec1e:	6123      	str	r3, [r4, #16]
 800ec20:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ec22:	f04f 0900 	mov.w	r9, #0
 800ec26:	e7db      	b.n	800ebe0 <_printf_float+0x154>
 800ec28:	b913      	cbnz	r3, 800ec30 <_printf_float+0x1a4>
 800ec2a:	6822      	ldr	r2, [r4, #0]
 800ec2c:	07d2      	lsls	r2, r2, #31
 800ec2e:	d501      	bpl.n	800ec34 <_printf_float+0x1a8>
 800ec30:	3302      	adds	r3, #2
 800ec32:	e7f4      	b.n	800ec1e <_printf_float+0x192>
 800ec34:	2301      	movs	r3, #1
 800ec36:	e7f2      	b.n	800ec1e <_printf_float+0x192>
 800ec38:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800ec3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ec3e:	4299      	cmp	r1, r3
 800ec40:	db05      	blt.n	800ec4e <_printf_float+0x1c2>
 800ec42:	6823      	ldr	r3, [r4, #0]
 800ec44:	6121      	str	r1, [r4, #16]
 800ec46:	07d8      	lsls	r0, r3, #31
 800ec48:	d5ea      	bpl.n	800ec20 <_printf_float+0x194>
 800ec4a:	1c4b      	adds	r3, r1, #1
 800ec4c:	e7e7      	b.n	800ec1e <_printf_float+0x192>
 800ec4e:	2900      	cmp	r1, #0
 800ec50:	bfd4      	ite	le
 800ec52:	f1c1 0202 	rsble	r2, r1, #2
 800ec56:	2201      	movgt	r2, #1
 800ec58:	4413      	add	r3, r2
 800ec5a:	e7e0      	b.n	800ec1e <_printf_float+0x192>
 800ec5c:	6823      	ldr	r3, [r4, #0]
 800ec5e:	055a      	lsls	r2, r3, #21
 800ec60:	d407      	bmi.n	800ec72 <_printf_float+0x1e6>
 800ec62:	6923      	ldr	r3, [r4, #16]
 800ec64:	4642      	mov	r2, r8
 800ec66:	4631      	mov	r1, r6
 800ec68:	4628      	mov	r0, r5
 800ec6a:	47b8      	blx	r7
 800ec6c:	3001      	adds	r0, #1
 800ec6e:	d12b      	bne.n	800ecc8 <_printf_float+0x23c>
 800ec70:	e767      	b.n	800eb42 <_printf_float+0xb6>
 800ec72:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ec76:	f240 80dd 	bls.w	800ee34 <_printf_float+0x3a8>
 800ec7a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ec7e:	2200      	movs	r2, #0
 800ec80:	2300      	movs	r3, #0
 800ec82:	f7f1 ff49 	bl	8000b18 <__aeabi_dcmpeq>
 800ec86:	2800      	cmp	r0, #0
 800ec88:	d033      	beq.n	800ecf2 <_printf_float+0x266>
 800ec8a:	4a37      	ldr	r2, [pc, #220]	@ (800ed68 <_printf_float+0x2dc>)
 800ec8c:	2301      	movs	r3, #1
 800ec8e:	4631      	mov	r1, r6
 800ec90:	4628      	mov	r0, r5
 800ec92:	47b8      	blx	r7
 800ec94:	3001      	adds	r0, #1
 800ec96:	f43f af54 	beq.w	800eb42 <_printf_float+0xb6>
 800ec9a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800ec9e:	4543      	cmp	r3, r8
 800eca0:	db02      	blt.n	800eca8 <_printf_float+0x21c>
 800eca2:	6823      	ldr	r3, [r4, #0]
 800eca4:	07d8      	lsls	r0, r3, #31
 800eca6:	d50f      	bpl.n	800ecc8 <_printf_float+0x23c>
 800eca8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ecac:	4631      	mov	r1, r6
 800ecae:	4628      	mov	r0, r5
 800ecb0:	47b8      	blx	r7
 800ecb2:	3001      	adds	r0, #1
 800ecb4:	f43f af45 	beq.w	800eb42 <_printf_float+0xb6>
 800ecb8:	f04f 0900 	mov.w	r9, #0
 800ecbc:	f108 38ff 	add.w	r8, r8, #4294967295
 800ecc0:	f104 0a1a 	add.w	sl, r4, #26
 800ecc4:	45c8      	cmp	r8, r9
 800ecc6:	dc09      	bgt.n	800ecdc <_printf_float+0x250>
 800ecc8:	6823      	ldr	r3, [r4, #0]
 800ecca:	079b      	lsls	r3, r3, #30
 800eccc:	f100 8103 	bmi.w	800eed6 <_printf_float+0x44a>
 800ecd0:	68e0      	ldr	r0, [r4, #12]
 800ecd2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ecd4:	4298      	cmp	r0, r3
 800ecd6:	bfb8      	it	lt
 800ecd8:	4618      	movlt	r0, r3
 800ecda:	e734      	b.n	800eb46 <_printf_float+0xba>
 800ecdc:	2301      	movs	r3, #1
 800ecde:	4652      	mov	r2, sl
 800ece0:	4631      	mov	r1, r6
 800ece2:	4628      	mov	r0, r5
 800ece4:	47b8      	blx	r7
 800ece6:	3001      	adds	r0, #1
 800ece8:	f43f af2b 	beq.w	800eb42 <_printf_float+0xb6>
 800ecec:	f109 0901 	add.w	r9, r9, #1
 800ecf0:	e7e8      	b.n	800ecc4 <_printf_float+0x238>
 800ecf2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	dc39      	bgt.n	800ed6c <_printf_float+0x2e0>
 800ecf8:	4a1b      	ldr	r2, [pc, #108]	@ (800ed68 <_printf_float+0x2dc>)
 800ecfa:	2301      	movs	r3, #1
 800ecfc:	4631      	mov	r1, r6
 800ecfe:	4628      	mov	r0, r5
 800ed00:	47b8      	blx	r7
 800ed02:	3001      	adds	r0, #1
 800ed04:	f43f af1d 	beq.w	800eb42 <_printf_float+0xb6>
 800ed08:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800ed0c:	ea59 0303 	orrs.w	r3, r9, r3
 800ed10:	d102      	bne.n	800ed18 <_printf_float+0x28c>
 800ed12:	6823      	ldr	r3, [r4, #0]
 800ed14:	07d9      	lsls	r1, r3, #31
 800ed16:	d5d7      	bpl.n	800ecc8 <_printf_float+0x23c>
 800ed18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ed1c:	4631      	mov	r1, r6
 800ed1e:	4628      	mov	r0, r5
 800ed20:	47b8      	blx	r7
 800ed22:	3001      	adds	r0, #1
 800ed24:	f43f af0d 	beq.w	800eb42 <_printf_float+0xb6>
 800ed28:	f04f 0a00 	mov.w	sl, #0
 800ed2c:	f104 0b1a 	add.w	fp, r4, #26
 800ed30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed32:	425b      	negs	r3, r3
 800ed34:	4553      	cmp	r3, sl
 800ed36:	dc01      	bgt.n	800ed3c <_printf_float+0x2b0>
 800ed38:	464b      	mov	r3, r9
 800ed3a:	e793      	b.n	800ec64 <_printf_float+0x1d8>
 800ed3c:	2301      	movs	r3, #1
 800ed3e:	465a      	mov	r2, fp
 800ed40:	4631      	mov	r1, r6
 800ed42:	4628      	mov	r0, r5
 800ed44:	47b8      	blx	r7
 800ed46:	3001      	adds	r0, #1
 800ed48:	f43f aefb 	beq.w	800eb42 <_printf_float+0xb6>
 800ed4c:	f10a 0a01 	add.w	sl, sl, #1
 800ed50:	e7ee      	b.n	800ed30 <_printf_float+0x2a4>
 800ed52:	bf00      	nop
 800ed54:	7fefffff 	.word	0x7fefffff
 800ed58:	08012898 	.word	0x08012898
 800ed5c:	0801289c 	.word	0x0801289c
 800ed60:	080128a0 	.word	0x080128a0
 800ed64:	080128a4 	.word	0x080128a4
 800ed68:	080128a8 	.word	0x080128a8
 800ed6c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ed6e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ed72:	4553      	cmp	r3, sl
 800ed74:	bfa8      	it	ge
 800ed76:	4653      	movge	r3, sl
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	4699      	mov	r9, r3
 800ed7c:	dc36      	bgt.n	800edec <_printf_float+0x360>
 800ed7e:	f04f 0b00 	mov.w	fp, #0
 800ed82:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ed86:	f104 021a 	add.w	r2, r4, #26
 800ed8a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ed8c:	9306      	str	r3, [sp, #24]
 800ed8e:	eba3 0309 	sub.w	r3, r3, r9
 800ed92:	455b      	cmp	r3, fp
 800ed94:	dc31      	bgt.n	800edfa <_printf_float+0x36e>
 800ed96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed98:	459a      	cmp	sl, r3
 800ed9a:	dc3a      	bgt.n	800ee12 <_printf_float+0x386>
 800ed9c:	6823      	ldr	r3, [r4, #0]
 800ed9e:	07da      	lsls	r2, r3, #31
 800eda0:	d437      	bmi.n	800ee12 <_printf_float+0x386>
 800eda2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eda4:	ebaa 0903 	sub.w	r9, sl, r3
 800eda8:	9b06      	ldr	r3, [sp, #24]
 800edaa:	ebaa 0303 	sub.w	r3, sl, r3
 800edae:	4599      	cmp	r9, r3
 800edb0:	bfa8      	it	ge
 800edb2:	4699      	movge	r9, r3
 800edb4:	f1b9 0f00 	cmp.w	r9, #0
 800edb8:	dc33      	bgt.n	800ee22 <_printf_float+0x396>
 800edba:	f04f 0800 	mov.w	r8, #0
 800edbe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800edc2:	f104 0b1a 	add.w	fp, r4, #26
 800edc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800edc8:	ebaa 0303 	sub.w	r3, sl, r3
 800edcc:	eba3 0309 	sub.w	r3, r3, r9
 800edd0:	4543      	cmp	r3, r8
 800edd2:	f77f af79 	ble.w	800ecc8 <_printf_float+0x23c>
 800edd6:	2301      	movs	r3, #1
 800edd8:	465a      	mov	r2, fp
 800edda:	4631      	mov	r1, r6
 800eddc:	4628      	mov	r0, r5
 800edde:	47b8      	blx	r7
 800ede0:	3001      	adds	r0, #1
 800ede2:	f43f aeae 	beq.w	800eb42 <_printf_float+0xb6>
 800ede6:	f108 0801 	add.w	r8, r8, #1
 800edea:	e7ec      	b.n	800edc6 <_printf_float+0x33a>
 800edec:	4642      	mov	r2, r8
 800edee:	4631      	mov	r1, r6
 800edf0:	4628      	mov	r0, r5
 800edf2:	47b8      	blx	r7
 800edf4:	3001      	adds	r0, #1
 800edf6:	d1c2      	bne.n	800ed7e <_printf_float+0x2f2>
 800edf8:	e6a3      	b.n	800eb42 <_printf_float+0xb6>
 800edfa:	2301      	movs	r3, #1
 800edfc:	4631      	mov	r1, r6
 800edfe:	4628      	mov	r0, r5
 800ee00:	9206      	str	r2, [sp, #24]
 800ee02:	47b8      	blx	r7
 800ee04:	3001      	adds	r0, #1
 800ee06:	f43f ae9c 	beq.w	800eb42 <_printf_float+0xb6>
 800ee0a:	9a06      	ldr	r2, [sp, #24]
 800ee0c:	f10b 0b01 	add.w	fp, fp, #1
 800ee10:	e7bb      	b.n	800ed8a <_printf_float+0x2fe>
 800ee12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ee16:	4631      	mov	r1, r6
 800ee18:	4628      	mov	r0, r5
 800ee1a:	47b8      	blx	r7
 800ee1c:	3001      	adds	r0, #1
 800ee1e:	d1c0      	bne.n	800eda2 <_printf_float+0x316>
 800ee20:	e68f      	b.n	800eb42 <_printf_float+0xb6>
 800ee22:	9a06      	ldr	r2, [sp, #24]
 800ee24:	464b      	mov	r3, r9
 800ee26:	4442      	add	r2, r8
 800ee28:	4631      	mov	r1, r6
 800ee2a:	4628      	mov	r0, r5
 800ee2c:	47b8      	blx	r7
 800ee2e:	3001      	adds	r0, #1
 800ee30:	d1c3      	bne.n	800edba <_printf_float+0x32e>
 800ee32:	e686      	b.n	800eb42 <_printf_float+0xb6>
 800ee34:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ee38:	f1ba 0f01 	cmp.w	sl, #1
 800ee3c:	dc01      	bgt.n	800ee42 <_printf_float+0x3b6>
 800ee3e:	07db      	lsls	r3, r3, #31
 800ee40:	d536      	bpl.n	800eeb0 <_printf_float+0x424>
 800ee42:	2301      	movs	r3, #1
 800ee44:	4642      	mov	r2, r8
 800ee46:	4631      	mov	r1, r6
 800ee48:	4628      	mov	r0, r5
 800ee4a:	47b8      	blx	r7
 800ee4c:	3001      	adds	r0, #1
 800ee4e:	f43f ae78 	beq.w	800eb42 <_printf_float+0xb6>
 800ee52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ee56:	4631      	mov	r1, r6
 800ee58:	4628      	mov	r0, r5
 800ee5a:	47b8      	blx	r7
 800ee5c:	3001      	adds	r0, #1
 800ee5e:	f43f ae70 	beq.w	800eb42 <_printf_float+0xb6>
 800ee62:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ee66:	2200      	movs	r2, #0
 800ee68:	2300      	movs	r3, #0
 800ee6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ee6e:	f7f1 fe53 	bl	8000b18 <__aeabi_dcmpeq>
 800ee72:	b9c0      	cbnz	r0, 800eea6 <_printf_float+0x41a>
 800ee74:	4653      	mov	r3, sl
 800ee76:	f108 0201 	add.w	r2, r8, #1
 800ee7a:	4631      	mov	r1, r6
 800ee7c:	4628      	mov	r0, r5
 800ee7e:	47b8      	blx	r7
 800ee80:	3001      	adds	r0, #1
 800ee82:	d10c      	bne.n	800ee9e <_printf_float+0x412>
 800ee84:	e65d      	b.n	800eb42 <_printf_float+0xb6>
 800ee86:	2301      	movs	r3, #1
 800ee88:	465a      	mov	r2, fp
 800ee8a:	4631      	mov	r1, r6
 800ee8c:	4628      	mov	r0, r5
 800ee8e:	47b8      	blx	r7
 800ee90:	3001      	adds	r0, #1
 800ee92:	f43f ae56 	beq.w	800eb42 <_printf_float+0xb6>
 800ee96:	f108 0801 	add.w	r8, r8, #1
 800ee9a:	45d0      	cmp	r8, sl
 800ee9c:	dbf3      	blt.n	800ee86 <_printf_float+0x3fa>
 800ee9e:	464b      	mov	r3, r9
 800eea0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800eea4:	e6df      	b.n	800ec66 <_printf_float+0x1da>
 800eea6:	f04f 0800 	mov.w	r8, #0
 800eeaa:	f104 0b1a 	add.w	fp, r4, #26
 800eeae:	e7f4      	b.n	800ee9a <_printf_float+0x40e>
 800eeb0:	2301      	movs	r3, #1
 800eeb2:	4642      	mov	r2, r8
 800eeb4:	e7e1      	b.n	800ee7a <_printf_float+0x3ee>
 800eeb6:	2301      	movs	r3, #1
 800eeb8:	464a      	mov	r2, r9
 800eeba:	4631      	mov	r1, r6
 800eebc:	4628      	mov	r0, r5
 800eebe:	47b8      	blx	r7
 800eec0:	3001      	adds	r0, #1
 800eec2:	f43f ae3e 	beq.w	800eb42 <_printf_float+0xb6>
 800eec6:	f108 0801 	add.w	r8, r8, #1
 800eeca:	68e3      	ldr	r3, [r4, #12]
 800eecc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800eece:	1a5b      	subs	r3, r3, r1
 800eed0:	4543      	cmp	r3, r8
 800eed2:	dcf0      	bgt.n	800eeb6 <_printf_float+0x42a>
 800eed4:	e6fc      	b.n	800ecd0 <_printf_float+0x244>
 800eed6:	f04f 0800 	mov.w	r8, #0
 800eeda:	f104 0919 	add.w	r9, r4, #25
 800eede:	e7f4      	b.n	800eeca <_printf_float+0x43e>

0800eee0 <_printf_common>:
 800eee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eee4:	4616      	mov	r6, r2
 800eee6:	4698      	mov	r8, r3
 800eee8:	688a      	ldr	r2, [r1, #8]
 800eeea:	690b      	ldr	r3, [r1, #16]
 800eeec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800eef0:	4293      	cmp	r3, r2
 800eef2:	bfb8      	it	lt
 800eef4:	4613      	movlt	r3, r2
 800eef6:	6033      	str	r3, [r6, #0]
 800eef8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800eefc:	4607      	mov	r7, r0
 800eefe:	460c      	mov	r4, r1
 800ef00:	b10a      	cbz	r2, 800ef06 <_printf_common+0x26>
 800ef02:	3301      	adds	r3, #1
 800ef04:	6033      	str	r3, [r6, #0]
 800ef06:	6823      	ldr	r3, [r4, #0]
 800ef08:	0699      	lsls	r1, r3, #26
 800ef0a:	bf42      	ittt	mi
 800ef0c:	6833      	ldrmi	r3, [r6, #0]
 800ef0e:	3302      	addmi	r3, #2
 800ef10:	6033      	strmi	r3, [r6, #0]
 800ef12:	6825      	ldr	r5, [r4, #0]
 800ef14:	f015 0506 	ands.w	r5, r5, #6
 800ef18:	d106      	bne.n	800ef28 <_printf_common+0x48>
 800ef1a:	f104 0a19 	add.w	sl, r4, #25
 800ef1e:	68e3      	ldr	r3, [r4, #12]
 800ef20:	6832      	ldr	r2, [r6, #0]
 800ef22:	1a9b      	subs	r3, r3, r2
 800ef24:	42ab      	cmp	r3, r5
 800ef26:	dc26      	bgt.n	800ef76 <_printf_common+0x96>
 800ef28:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ef2c:	6822      	ldr	r2, [r4, #0]
 800ef2e:	3b00      	subs	r3, #0
 800ef30:	bf18      	it	ne
 800ef32:	2301      	movne	r3, #1
 800ef34:	0692      	lsls	r2, r2, #26
 800ef36:	d42b      	bmi.n	800ef90 <_printf_common+0xb0>
 800ef38:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ef3c:	4641      	mov	r1, r8
 800ef3e:	4638      	mov	r0, r7
 800ef40:	47c8      	blx	r9
 800ef42:	3001      	adds	r0, #1
 800ef44:	d01e      	beq.n	800ef84 <_printf_common+0xa4>
 800ef46:	6823      	ldr	r3, [r4, #0]
 800ef48:	6922      	ldr	r2, [r4, #16]
 800ef4a:	f003 0306 	and.w	r3, r3, #6
 800ef4e:	2b04      	cmp	r3, #4
 800ef50:	bf02      	ittt	eq
 800ef52:	68e5      	ldreq	r5, [r4, #12]
 800ef54:	6833      	ldreq	r3, [r6, #0]
 800ef56:	1aed      	subeq	r5, r5, r3
 800ef58:	68a3      	ldr	r3, [r4, #8]
 800ef5a:	bf0c      	ite	eq
 800ef5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ef60:	2500      	movne	r5, #0
 800ef62:	4293      	cmp	r3, r2
 800ef64:	bfc4      	itt	gt
 800ef66:	1a9b      	subgt	r3, r3, r2
 800ef68:	18ed      	addgt	r5, r5, r3
 800ef6a:	2600      	movs	r6, #0
 800ef6c:	341a      	adds	r4, #26
 800ef6e:	42b5      	cmp	r5, r6
 800ef70:	d11a      	bne.n	800efa8 <_printf_common+0xc8>
 800ef72:	2000      	movs	r0, #0
 800ef74:	e008      	b.n	800ef88 <_printf_common+0xa8>
 800ef76:	2301      	movs	r3, #1
 800ef78:	4652      	mov	r2, sl
 800ef7a:	4641      	mov	r1, r8
 800ef7c:	4638      	mov	r0, r7
 800ef7e:	47c8      	blx	r9
 800ef80:	3001      	adds	r0, #1
 800ef82:	d103      	bne.n	800ef8c <_printf_common+0xac>
 800ef84:	f04f 30ff 	mov.w	r0, #4294967295
 800ef88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef8c:	3501      	adds	r5, #1
 800ef8e:	e7c6      	b.n	800ef1e <_printf_common+0x3e>
 800ef90:	18e1      	adds	r1, r4, r3
 800ef92:	1c5a      	adds	r2, r3, #1
 800ef94:	2030      	movs	r0, #48	@ 0x30
 800ef96:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ef9a:	4422      	add	r2, r4
 800ef9c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800efa0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800efa4:	3302      	adds	r3, #2
 800efa6:	e7c7      	b.n	800ef38 <_printf_common+0x58>
 800efa8:	2301      	movs	r3, #1
 800efaa:	4622      	mov	r2, r4
 800efac:	4641      	mov	r1, r8
 800efae:	4638      	mov	r0, r7
 800efb0:	47c8      	blx	r9
 800efb2:	3001      	adds	r0, #1
 800efb4:	d0e6      	beq.n	800ef84 <_printf_common+0xa4>
 800efb6:	3601      	adds	r6, #1
 800efb8:	e7d9      	b.n	800ef6e <_printf_common+0x8e>
	...

0800efbc <_printf_i>:
 800efbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800efc0:	7e0f      	ldrb	r7, [r1, #24]
 800efc2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800efc4:	2f78      	cmp	r7, #120	@ 0x78
 800efc6:	4691      	mov	r9, r2
 800efc8:	4680      	mov	r8, r0
 800efca:	460c      	mov	r4, r1
 800efcc:	469a      	mov	sl, r3
 800efce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800efd2:	d807      	bhi.n	800efe4 <_printf_i+0x28>
 800efd4:	2f62      	cmp	r7, #98	@ 0x62
 800efd6:	d80a      	bhi.n	800efee <_printf_i+0x32>
 800efd8:	2f00      	cmp	r7, #0
 800efda:	f000 80d2 	beq.w	800f182 <_printf_i+0x1c6>
 800efde:	2f58      	cmp	r7, #88	@ 0x58
 800efe0:	f000 80b9 	beq.w	800f156 <_printf_i+0x19a>
 800efe4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800efe8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800efec:	e03a      	b.n	800f064 <_printf_i+0xa8>
 800efee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800eff2:	2b15      	cmp	r3, #21
 800eff4:	d8f6      	bhi.n	800efe4 <_printf_i+0x28>
 800eff6:	a101      	add	r1, pc, #4	@ (adr r1, 800effc <_printf_i+0x40>)
 800eff8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800effc:	0800f055 	.word	0x0800f055
 800f000:	0800f069 	.word	0x0800f069
 800f004:	0800efe5 	.word	0x0800efe5
 800f008:	0800efe5 	.word	0x0800efe5
 800f00c:	0800efe5 	.word	0x0800efe5
 800f010:	0800efe5 	.word	0x0800efe5
 800f014:	0800f069 	.word	0x0800f069
 800f018:	0800efe5 	.word	0x0800efe5
 800f01c:	0800efe5 	.word	0x0800efe5
 800f020:	0800efe5 	.word	0x0800efe5
 800f024:	0800efe5 	.word	0x0800efe5
 800f028:	0800f169 	.word	0x0800f169
 800f02c:	0800f093 	.word	0x0800f093
 800f030:	0800f123 	.word	0x0800f123
 800f034:	0800efe5 	.word	0x0800efe5
 800f038:	0800efe5 	.word	0x0800efe5
 800f03c:	0800f18b 	.word	0x0800f18b
 800f040:	0800efe5 	.word	0x0800efe5
 800f044:	0800f093 	.word	0x0800f093
 800f048:	0800efe5 	.word	0x0800efe5
 800f04c:	0800efe5 	.word	0x0800efe5
 800f050:	0800f12b 	.word	0x0800f12b
 800f054:	6833      	ldr	r3, [r6, #0]
 800f056:	1d1a      	adds	r2, r3, #4
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	6032      	str	r2, [r6, #0]
 800f05c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f060:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f064:	2301      	movs	r3, #1
 800f066:	e09d      	b.n	800f1a4 <_printf_i+0x1e8>
 800f068:	6833      	ldr	r3, [r6, #0]
 800f06a:	6820      	ldr	r0, [r4, #0]
 800f06c:	1d19      	adds	r1, r3, #4
 800f06e:	6031      	str	r1, [r6, #0]
 800f070:	0606      	lsls	r6, r0, #24
 800f072:	d501      	bpl.n	800f078 <_printf_i+0xbc>
 800f074:	681d      	ldr	r5, [r3, #0]
 800f076:	e003      	b.n	800f080 <_printf_i+0xc4>
 800f078:	0645      	lsls	r5, r0, #25
 800f07a:	d5fb      	bpl.n	800f074 <_printf_i+0xb8>
 800f07c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f080:	2d00      	cmp	r5, #0
 800f082:	da03      	bge.n	800f08c <_printf_i+0xd0>
 800f084:	232d      	movs	r3, #45	@ 0x2d
 800f086:	426d      	negs	r5, r5
 800f088:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f08c:	4859      	ldr	r0, [pc, #356]	@ (800f1f4 <_printf_i+0x238>)
 800f08e:	230a      	movs	r3, #10
 800f090:	e011      	b.n	800f0b6 <_printf_i+0xfa>
 800f092:	6821      	ldr	r1, [r4, #0]
 800f094:	6833      	ldr	r3, [r6, #0]
 800f096:	0608      	lsls	r0, r1, #24
 800f098:	f853 5b04 	ldr.w	r5, [r3], #4
 800f09c:	d402      	bmi.n	800f0a4 <_printf_i+0xe8>
 800f09e:	0649      	lsls	r1, r1, #25
 800f0a0:	bf48      	it	mi
 800f0a2:	b2ad      	uxthmi	r5, r5
 800f0a4:	2f6f      	cmp	r7, #111	@ 0x6f
 800f0a6:	4853      	ldr	r0, [pc, #332]	@ (800f1f4 <_printf_i+0x238>)
 800f0a8:	6033      	str	r3, [r6, #0]
 800f0aa:	bf14      	ite	ne
 800f0ac:	230a      	movne	r3, #10
 800f0ae:	2308      	moveq	r3, #8
 800f0b0:	2100      	movs	r1, #0
 800f0b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f0b6:	6866      	ldr	r6, [r4, #4]
 800f0b8:	60a6      	str	r6, [r4, #8]
 800f0ba:	2e00      	cmp	r6, #0
 800f0bc:	bfa2      	ittt	ge
 800f0be:	6821      	ldrge	r1, [r4, #0]
 800f0c0:	f021 0104 	bicge.w	r1, r1, #4
 800f0c4:	6021      	strge	r1, [r4, #0]
 800f0c6:	b90d      	cbnz	r5, 800f0cc <_printf_i+0x110>
 800f0c8:	2e00      	cmp	r6, #0
 800f0ca:	d04b      	beq.n	800f164 <_printf_i+0x1a8>
 800f0cc:	4616      	mov	r6, r2
 800f0ce:	fbb5 f1f3 	udiv	r1, r5, r3
 800f0d2:	fb03 5711 	mls	r7, r3, r1, r5
 800f0d6:	5dc7      	ldrb	r7, [r0, r7]
 800f0d8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f0dc:	462f      	mov	r7, r5
 800f0de:	42bb      	cmp	r3, r7
 800f0e0:	460d      	mov	r5, r1
 800f0e2:	d9f4      	bls.n	800f0ce <_printf_i+0x112>
 800f0e4:	2b08      	cmp	r3, #8
 800f0e6:	d10b      	bne.n	800f100 <_printf_i+0x144>
 800f0e8:	6823      	ldr	r3, [r4, #0]
 800f0ea:	07df      	lsls	r7, r3, #31
 800f0ec:	d508      	bpl.n	800f100 <_printf_i+0x144>
 800f0ee:	6923      	ldr	r3, [r4, #16]
 800f0f0:	6861      	ldr	r1, [r4, #4]
 800f0f2:	4299      	cmp	r1, r3
 800f0f4:	bfde      	ittt	le
 800f0f6:	2330      	movle	r3, #48	@ 0x30
 800f0f8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f0fc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f100:	1b92      	subs	r2, r2, r6
 800f102:	6122      	str	r2, [r4, #16]
 800f104:	f8cd a000 	str.w	sl, [sp]
 800f108:	464b      	mov	r3, r9
 800f10a:	aa03      	add	r2, sp, #12
 800f10c:	4621      	mov	r1, r4
 800f10e:	4640      	mov	r0, r8
 800f110:	f7ff fee6 	bl	800eee0 <_printf_common>
 800f114:	3001      	adds	r0, #1
 800f116:	d14a      	bne.n	800f1ae <_printf_i+0x1f2>
 800f118:	f04f 30ff 	mov.w	r0, #4294967295
 800f11c:	b004      	add	sp, #16
 800f11e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f122:	6823      	ldr	r3, [r4, #0]
 800f124:	f043 0320 	orr.w	r3, r3, #32
 800f128:	6023      	str	r3, [r4, #0]
 800f12a:	4833      	ldr	r0, [pc, #204]	@ (800f1f8 <_printf_i+0x23c>)
 800f12c:	2778      	movs	r7, #120	@ 0x78
 800f12e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f132:	6823      	ldr	r3, [r4, #0]
 800f134:	6831      	ldr	r1, [r6, #0]
 800f136:	061f      	lsls	r7, r3, #24
 800f138:	f851 5b04 	ldr.w	r5, [r1], #4
 800f13c:	d402      	bmi.n	800f144 <_printf_i+0x188>
 800f13e:	065f      	lsls	r7, r3, #25
 800f140:	bf48      	it	mi
 800f142:	b2ad      	uxthmi	r5, r5
 800f144:	6031      	str	r1, [r6, #0]
 800f146:	07d9      	lsls	r1, r3, #31
 800f148:	bf44      	itt	mi
 800f14a:	f043 0320 	orrmi.w	r3, r3, #32
 800f14e:	6023      	strmi	r3, [r4, #0]
 800f150:	b11d      	cbz	r5, 800f15a <_printf_i+0x19e>
 800f152:	2310      	movs	r3, #16
 800f154:	e7ac      	b.n	800f0b0 <_printf_i+0xf4>
 800f156:	4827      	ldr	r0, [pc, #156]	@ (800f1f4 <_printf_i+0x238>)
 800f158:	e7e9      	b.n	800f12e <_printf_i+0x172>
 800f15a:	6823      	ldr	r3, [r4, #0]
 800f15c:	f023 0320 	bic.w	r3, r3, #32
 800f160:	6023      	str	r3, [r4, #0]
 800f162:	e7f6      	b.n	800f152 <_printf_i+0x196>
 800f164:	4616      	mov	r6, r2
 800f166:	e7bd      	b.n	800f0e4 <_printf_i+0x128>
 800f168:	6833      	ldr	r3, [r6, #0]
 800f16a:	6825      	ldr	r5, [r4, #0]
 800f16c:	6961      	ldr	r1, [r4, #20]
 800f16e:	1d18      	adds	r0, r3, #4
 800f170:	6030      	str	r0, [r6, #0]
 800f172:	062e      	lsls	r6, r5, #24
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	d501      	bpl.n	800f17c <_printf_i+0x1c0>
 800f178:	6019      	str	r1, [r3, #0]
 800f17a:	e002      	b.n	800f182 <_printf_i+0x1c6>
 800f17c:	0668      	lsls	r0, r5, #25
 800f17e:	d5fb      	bpl.n	800f178 <_printf_i+0x1bc>
 800f180:	8019      	strh	r1, [r3, #0]
 800f182:	2300      	movs	r3, #0
 800f184:	6123      	str	r3, [r4, #16]
 800f186:	4616      	mov	r6, r2
 800f188:	e7bc      	b.n	800f104 <_printf_i+0x148>
 800f18a:	6833      	ldr	r3, [r6, #0]
 800f18c:	1d1a      	adds	r2, r3, #4
 800f18e:	6032      	str	r2, [r6, #0]
 800f190:	681e      	ldr	r6, [r3, #0]
 800f192:	6862      	ldr	r2, [r4, #4]
 800f194:	2100      	movs	r1, #0
 800f196:	4630      	mov	r0, r6
 800f198:	f7f1 f842 	bl	8000220 <memchr>
 800f19c:	b108      	cbz	r0, 800f1a2 <_printf_i+0x1e6>
 800f19e:	1b80      	subs	r0, r0, r6
 800f1a0:	6060      	str	r0, [r4, #4]
 800f1a2:	6863      	ldr	r3, [r4, #4]
 800f1a4:	6123      	str	r3, [r4, #16]
 800f1a6:	2300      	movs	r3, #0
 800f1a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f1ac:	e7aa      	b.n	800f104 <_printf_i+0x148>
 800f1ae:	6923      	ldr	r3, [r4, #16]
 800f1b0:	4632      	mov	r2, r6
 800f1b2:	4649      	mov	r1, r9
 800f1b4:	4640      	mov	r0, r8
 800f1b6:	47d0      	blx	sl
 800f1b8:	3001      	adds	r0, #1
 800f1ba:	d0ad      	beq.n	800f118 <_printf_i+0x15c>
 800f1bc:	6823      	ldr	r3, [r4, #0]
 800f1be:	079b      	lsls	r3, r3, #30
 800f1c0:	d413      	bmi.n	800f1ea <_printf_i+0x22e>
 800f1c2:	68e0      	ldr	r0, [r4, #12]
 800f1c4:	9b03      	ldr	r3, [sp, #12]
 800f1c6:	4298      	cmp	r0, r3
 800f1c8:	bfb8      	it	lt
 800f1ca:	4618      	movlt	r0, r3
 800f1cc:	e7a6      	b.n	800f11c <_printf_i+0x160>
 800f1ce:	2301      	movs	r3, #1
 800f1d0:	4632      	mov	r2, r6
 800f1d2:	4649      	mov	r1, r9
 800f1d4:	4640      	mov	r0, r8
 800f1d6:	47d0      	blx	sl
 800f1d8:	3001      	adds	r0, #1
 800f1da:	d09d      	beq.n	800f118 <_printf_i+0x15c>
 800f1dc:	3501      	adds	r5, #1
 800f1de:	68e3      	ldr	r3, [r4, #12]
 800f1e0:	9903      	ldr	r1, [sp, #12]
 800f1e2:	1a5b      	subs	r3, r3, r1
 800f1e4:	42ab      	cmp	r3, r5
 800f1e6:	dcf2      	bgt.n	800f1ce <_printf_i+0x212>
 800f1e8:	e7eb      	b.n	800f1c2 <_printf_i+0x206>
 800f1ea:	2500      	movs	r5, #0
 800f1ec:	f104 0619 	add.w	r6, r4, #25
 800f1f0:	e7f5      	b.n	800f1de <_printf_i+0x222>
 800f1f2:	bf00      	nop
 800f1f4:	080128aa 	.word	0x080128aa
 800f1f8:	080128bb 	.word	0x080128bb

0800f1fc <_scanf_float>:
 800f1fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f200:	b087      	sub	sp, #28
 800f202:	4617      	mov	r7, r2
 800f204:	9303      	str	r3, [sp, #12]
 800f206:	688b      	ldr	r3, [r1, #8]
 800f208:	1e5a      	subs	r2, r3, #1
 800f20a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800f20e:	bf81      	itttt	hi
 800f210:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800f214:	eb03 0b05 	addhi.w	fp, r3, r5
 800f218:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800f21c:	608b      	strhi	r3, [r1, #8]
 800f21e:	680b      	ldr	r3, [r1, #0]
 800f220:	460a      	mov	r2, r1
 800f222:	f04f 0500 	mov.w	r5, #0
 800f226:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800f22a:	f842 3b1c 	str.w	r3, [r2], #28
 800f22e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800f232:	4680      	mov	r8, r0
 800f234:	460c      	mov	r4, r1
 800f236:	bf98      	it	ls
 800f238:	f04f 0b00 	movls.w	fp, #0
 800f23c:	9201      	str	r2, [sp, #4]
 800f23e:	4616      	mov	r6, r2
 800f240:	46aa      	mov	sl, r5
 800f242:	46a9      	mov	r9, r5
 800f244:	9502      	str	r5, [sp, #8]
 800f246:	68a2      	ldr	r2, [r4, #8]
 800f248:	b152      	cbz	r2, 800f260 <_scanf_float+0x64>
 800f24a:	683b      	ldr	r3, [r7, #0]
 800f24c:	781b      	ldrb	r3, [r3, #0]
 800f24e:	2b4e      	cmp	r3, #78	@ 0x4e
 800f250:	d864      	bhi.n	800f31c <_scanf_float+0x120>
 800f252:	2b40      	cmp	r3, #64	@ 0x40
 800f254:	d83c      	bhi.n	800f2d0 <_scanf_float+0xd4>
 800f256:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800f25a:	b2c8      	uxtb	r0, r1
 800f25c:	280e      	cmp	r0, #14
 800f25e:	d93a      	bls.n	800f2d6 <_scanf_float+0xda>
 800f260:	f1b9 0f00 	cmp.w	r9, #0
 800f264:	d003      	beq.n	800f26e <_scanf_float+0x72>
 800f266:	6823      	ldr	r3, [r4, #0]
 800f268:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f26c:	6023      	str	r3, [r4, #0]
 800f26e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f272:	f1ba 0f01 	cmp.w	sl, #1
 800f276:	f200 8117 	bhi.w	800f4a8 <_scanf_float+0x2ac>
 800f27a:	9b01      	ldr	r3, [sp, #4]
 800f27c:	429e      	cmp	r6, r3
 800f27e:	f200 8108 	bhi.w	800f492 <_scanf_float+0x296>
 800f282:	2001      	movs	r0, #1
 800f284:	b007      	add	sp, #28
 800f286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f28a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800f28e:	2a0d      	cmp	r2, #13
 800f290:	d8e6      	bhi.n	800f260 <_scanf_float+0x64>
 800f292:	a101      	add	r1, pc, #4	@ (adr r1, 800f298 <_scanf_float+0x9c>)
 800f294:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f298:	0800f3df 	.word	0x0800f3df
 800f29c:	0800f261 	.word	0x0800f261
 800f2a0:	0800f261 	.word	0x0800f261
 800f2a4:	0800f261 	.word	0x0800f261
 800f2a8:	0800f43f 	.word	0x0800f43f
 800f2ac:	0800f417 	.word	0x0800f417
 800f2b0:	0800f261 	.word	0x0800f261
 800f2b4:	0800f261 	.word	0x0800f261
 800f2b8:	0800f3ed 	.word	0x0800f3ed
 800f2bc:	0800f261 	.word	0x0800f261
 800f2c0:	0800f261 	.word	0x0800f261
 800f2c4:	0800f261 	.word	0x0800f261
 800f2c8:	0800f261 	.word	0x0800f261
 800f2cc:	0800f3a5 	.word	0x0800f3a5
 800f2d0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800f2d4:	e7db      	b.n	800f28e <_scanf_float+0x92>
 800f2d6:	290e      	cmp	r1, #14
 800f2d8:	d8c2      	bhi.n	800f260 <_scanf_float+0x64>
 800f2da:	a001      	add	r0, pc, #4	@ (adr r0, 800f2e0 <_scanf_float+0xe4>)
 800f2dc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800f2e0:	0800f395 	.word	0x0800f395
 800f2e4:	0800f261 	.word	0x0800f261
 800f2e8:	0800f395 	.word	0x0800f395
 800f2ec:	0800f42b 	.word	0x0800f42b
 800f2f0:	0800f261 	.word	0x0800f261
 800f2f4:	0800f33d 	.word	0x0800f33d
 800f2f8:	0800f37b 	.word	0x0800f37b
 800f2fc:	0800f37b 	.word	0x0800f37b
 800f300:	0800f37b 	.word	0x0800f37b
 800f304:	0800f37b 	.word	0x0800f37b
 800f308:	0800f37b 	.word	0x0800f37b
 800f30c:	0800f37b 	.word	0x0800f37b
 800f310:	0800f37b 	.word	0x0800f37b
 800f314:	0800f37b 	.word	0x0800f37b
 800f318:	0800f37b 	.word	0x0800f37b
 800f31c:	2b6e      	cmp	r3, #110	@ 0x6e
 800f31e:	d809      	bhi.n	800f334 <_scanf_float+0x138>
 800f320:	2b60      	cmp	r3, #96	@ 0x60
 800f322:	d8b2      	bhi.n	800f28a <_scanf_float+0x8e>
 800f324:	2b54      	cmp	r3, #84	@ 0x54
 800f326:	d07b      	beq.n	800f420 <_scanf_float+0x224>
 800f328:	2b59      	cmp	r3, #89	@ 0x59
 800f32a:	d199      	bne.n	800f260 <_scanf_float+0x64>
 800f32c:	2d07      	cmp	r5, #7
 800f32e:	d197      	bne.n	800f260 <_scanf_float+0x64>
 800f330:	2508      	movs	r5, #8
 800f332:	e02c      	b.n	800f38e <_scanf_float+0x192>
 800f334:	2b74      	cmp	r3, #116	@ 0x74
 800f336:	d073      	beq.n	800f420 <_scanf_float+0x224>
 800f338:	2b79      	cmp	r3, #121	@ 0x79
 800f33a:	e7f6      	b.n	800f32a <_scanf_float+0x12e>
 800f33c:	6821      	ldr	r1, [r4, #0]
 800f33e:	05c8      	lsls	r0, r1, #23
 800f340:	d51b      	bpl.n	800f37a <_scanf_float+0x17e>
 800f342:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800f346:	6021      	str	r1, [r4, #0]
 800f348:	f109 0901 	add.w	r9, r9, #1
 800f34c:	f1bb 0f00 	cmp.w	fp, #0
 800f350:	d003      	beq.n	800f35a <_scanf_float+0x15e>
 800f352:	3201      	adds	r2, #1
 800f354:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f358:	60a2      	str	r2, [r4, #8]
 800f35a:	68a3      	ldr	r3, [r4, #8]
 800f35c:	3b01      	subs	r3, #1
 800f35e:	60a3      	str	r3, [r4, #8]
 800f360:	6923      	ldr	r3, [r4, #16]
 800f362:	3301      	adds	r3, #1
 800f364:	6123      	str	r3, [r4, #16]
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	3b01      	subs	r3, #1
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	607b      	str	r3, [r7, #4]
 800f36e:	f340 8087 	ble.w	800f480 <_scanf_float+0x284>
 800f372:	683b      	ldr	r3, [r7, #0]
 800f374:	3301      	adds	r3, #1
 800f376:	603b      	str	r3, [r7, #0]
 800f378:	e765      	b.n	800f246 <_scanf_float+0x4a>
 800f37a:	eb1a 0105 	adds.w	r1, sl, r5
 800f37e:	f47f af6f 	bne.w	800f260 <_scanf_float+0x64>
 800f382:	6822      	ldr	r2, [r4, #0]
 800f384:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800f388:	6022      	str	r2, [r4, #0]
 800f38a:	460d      	mov	r5, r1
 800f38c:	468a      	mov	sl, r1
 800f38e:	f806 3b01 	strb.w	r3, [r6], #1
 800f392:	e7e2      	b.n	800f35a <_scanf_float+0x15e>
 800f394:	6822      	ldr	r2, [r4, #0]
 800f396:	0610      	lsls	r0, r2, #24
 800f398:	f57f af62 	bpl.w	800f260 <_scanf_float+0x64>
 800f39c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800f3a0:	6022      	str	r2, [r4, #0]
 800f3a2:	e7f4      	b.n	800f38e <_scanf_float+0x192>
 800f3a4:	f1ba 0f00 	cmp.w	sl, #0
 800f3a8:	d10e      	bne.n	800f3c8 <_scanf_float+0x1cc>
 800f3aa:	f1b9 0f00 	cmp.w	r9, #0
 800f3ae:	d10e      	bne.n	800f3ce <_scanf_float+0x1d2>
 800f3b0:	6822      	ldr	r2, [r4, #0]
 800f3b2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f3b6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f3ba:	d108      	bne.n	800f3ce <_scanf_float+0x1d2>
 800f3bc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f3c0:	6022      	str	r2, [r4, #0]
 800f3c2:	f04f 0a01 	mov.w	sl, #1
 800f3c6:	e7e2      	b.n	800f38e <_scanf_float+0x192>
 800f3c8:	f1ba 0f02 	cmp.w	sl, #2
 800f3cc:	d055      	beq.n	800f47a <_scanf_float+0x27e>
 800f3ce:	2d01      	cmp	r5, #1
 800f3d0:	d002      	beq.n	800f3d8 <_scanf_float+0x1dc>
 800f3d2:	2d04      	cmp	r5, #4
 800f3d4:	f47f af44 	bne.w	800f260 <_scanf_float+0x64>
 800f3d8:	3501      	adds	r5, #1
 800f3da:	b2ed      	uxtb	r5, r5
 800f3dc:	e7d7      	b.n	800f38e <_scanf_float+0x192>
 800f3de:	f1ba 0f01 	cmp.w	sl, #1
 800f3e2:	f47f af3d 	bne.w	800f260 <_scanf_float+0x64>
 800f3e6:	f04f 0a02 	mov.w	sl, #2
 800f3ea:	e7d0      	b.n	800f38e <_scanf_float+0x192>
 800f3ec:	b97d      	cbnz	r5, 800f40e <_scanf_float+0x212>
 800f3ee:	f1b9 0f00 	cmp.w	r9, #0
 800f3f2:	f47f af38 	bne.w	800f266 <_scanf_float+0x6a>
 800f3f6:	6822      	ldr	r2, [r4, #0]
 800f3f8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f3fc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f400:	f040 8108 	bne.w	800f614 <_scanf_float+0x418>
 800f404:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f408:	6022      	str	r2, [r4, #0]
 800f40a:	2501      	movs	r5, #1
 800f40c:	e7bf      	b.n	800f38e <_scanf_float+0x192>
 800f40e:	2d03      	cmp	r5, #3
 800f410:	d0e2      	beq.n	800f3d8 <_scanf_float+0x1dc>
 800f412:	2d05      	cmp	r5, #5
 800f414:	e7de      	b.n	800f3d4 <_scanf_float+0x1d8>
 800f416:	2d02      	cmp	r5, #2
 800f418:	f47f af22 	bne.w	800f260 <_scanf_float+0x64>
 800f41c:	2503      	movs	r5, #3
 800f41e:	e7b6      	b.n	800f38e <_scanf_float+0x192>
 800f420:	2d06      	cmp	r5, #6
 800f422:	f47f af1d 	bne.w	800f260 <_scanf_float+0x64>
 800f426:	2507      	movs	r5, #7
 800f428:	e7b1      	b.n	800f38e <_scanf_float+0x192>
 800f42a:	6822      	ldr	r2, [r4, #0]
 800f42c:	0591      	lsls	r1, r2, #22
 800f42e:	f57f af17 	bpl.w	800f260 <_scanf_float+0x64>
 800f432:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800f436:	6022      	str	r2, [r4, #0]
 800f438:	f8cd 9008 	str.w	r9, [sp, #8]
 800f43c:	e7a7      	b.n	800f38e <_scanf_float+0x192>
 800f43e:	6822      	ldr	r2, [r4, #0]
 800f440:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800f444:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800f448:	d006      	beq.n	800f458 <_scanf_float+0x25c>
 800f44a:	0550      	lsls	r0, r2, #21
 800f44c:	f57f af08 	bpl.w	800f260 <_scanf_float+0x64>
 800f450:	f1b9 0f00 	cmp.w	r9, #0
 800f454:	f000 80de 	beq.w	800f614 <_scanf_float+0x418>
 800f458:	0591      	lsls	r1, r2, #22
 800f45a:	bf58      	it	pl
 800f45c:	9902      	ldrpl	r1, [sp, #8]
 800f45e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f462:	bf58      	it	pl
 800f464:	eba9 0101 	subpl.w	r1, r9, r1
 800f468:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800f46c:	bf58      	it	pl
 800f46e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800f472:	6022      	str	r2, [r4, #0]
 800f474:	f04f 0900 	mov.w	r9, #0
 800f478:	e789      	b.n	800f38e <_scanf_float+0x192>
 800f47a:	f04f 0a03 	mov.w	sl, #3
 800f47e:	e786      	b.n	800f38e <_scanf_float+0x192>
 800f480:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800f484:	4639      	mov	r1, r7
 800f486:	4640      	mov	r0, r8
 800f488:	4798      	blx	r3
 800f48a:	2800      	cmp	r0, #0
 800f48c:	f43f aedb 	beq.w	800f246 <_scanf_float+0x4a>
 800f490:	e6e6      	b.n	800f260 <_scanf_float+0x64>
 800f492:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f496:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f49a:	463a      	mov	r2, r7
 800f49c:	4640      	mov	r0, r8
 800f49e:	4798      	blx	r3
 800f4a0:	6923      	ldr	r3, [r4, #16]
 800f4a2:	3b01      	subs	r3, #1
 800f4a4:	6123      	str	r3, [r4, #16]
 800f4a6:	e6e8      	b.n	800f27a <_scanf_float+0x7e>
 800f4a8:	1e6b      	subs	r3, r5, #1
 800f4aa:	2b06      	cmp	r3, #6
 800f4ac:	d824      	bhi.n	800f4f8 <_scanf_float+0x2fc>
 800f4ae:	2d02      	cmp	r5, #2
 800f4b0:	d836      	bhi.n	800f520 <_scanf_float+0x324>
 800f4b2:	9b01      	ldr	r3, [sp, #4]
 800f4b4:	429e      	cmp	r6, r3
 800f4b6:	f67f aee4 	bls.w	800f282 <_scanf_float+0x86>
 800f4ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f4be:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f4c2:	463a      	mov	r2, r7
 800f4c4:	4640      	mov	r0, r8
 800f4c6:	4798      	blx	r3
 800f4c8:	6923      	ldr	r3, [r4, #16]
 800f4ca:	3b01      	subs	r3, #1
 800f4cc:	6123      	str	r3, [r4, #16]
 800f4ce:	e7f0      	b.n	800f4b2 <_scanf_float+0x2b6>
 800f4d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f4d4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800f4d8:	463a      	mov	r2, r7
 800f4da:	4640      	mov	r0, r8
 800f4dc:	4798      	blx	r3
 800f4de:	6923      	ldr	r3, [r4, #16]
 800f4e0:	3b01      	subs	r3, #1
 800f4e2:	6123      	str	r3, [r4, #16]
 800f4e4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f4e8:	fa5f fa8a 	uxtb.w	sl, sl
 800f4ec:	f1ba 0f02 	cmp.w	sl, #2
 800f4f0:	d1ee      	bne.n	800f4d0 <_scanf_float+0x2d4>
 800f4f2:	3d03      	subs	r5, #3
 800f4f4:	b2ed      	uxtb	r5, r5
 800f4f6:	1b76      	subs	r6, r6, r5
 800f4f8:	6823      	ldr	r3, [r4, #0]
 800f4fa:	05da      	lsls	r2, r3, #23
 800f4fc:	d530      	bpl.n	800f560 <_scanf_float+0x364>
 800f4fe:	055b      	lsls	r3, r3, #21
 800f500:	d511      	bpl.n	800f526 <_scanf_float+0x32a>
 800f502:	9b01      	ldr	r3, [sp, #4]
 800f504:	429e      	cmp	r6, r3
 800f506:	f67f aebc 	bls.w	800f282 <_scanf_float+0x86>
 800f50a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f50e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f512:	463a      	mov	r2, r7
 800f514:	4640      	mov	r0, r8
 800f516:	4798      	blx	r3
 800f518:	6923      	ldr	r3, [r4, #16]
 800f51a:	3b01      	subs	r3, #1
 800f51c:	6123      	str	r3, [r4, #16]
 800f51e:	e7f0      	b.n	800f502 <_scanf_float+0x306>
 800f520:	46aa      	mov	sl, r5
 800f522:	46b3      	mov	fp, r6
 800f524:	e7de      	b.n	800f4e4 <_scanf_float+0x2e8>
 800f526:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800f52a:	6923      	ldr	r3, [r4, #16]
 800f52c:	2965      	cmp	r1, #101	@ 0x65
 800f52e:	f103 33ff 	add.w	r3, r3, #4294967295
 800f532:	f106 35ff 	add.w	r5, r6, #4294967295
 800f536:	6123      	str	r3, [r4, #16]
 800f538:	d00c      	beq.n	800f554 <_scanf_float+0x358>
 800f53a:	2945      	cmp	r1, #69	@ 0x45
 800f53c:	d00a      	beq.n	800f554 <_scanf_float+0x358>
 800f53e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f542:	463a      	mov	r2, r7
 800f544:	4640      	mov	r0, r8
 800f546:	4798      	blx	r3
 800f548:	6923      	ldr	r3, [r4, #16]
 800f54a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800f54e:	3b01      	subs	r3, #1
 800f550:	1eb5      	subs	r5, r6, #2
 800f552:	6123      	str	r3, [r4, #16]
 800f554:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f558:	463a      	mov	r2, r7
 800f55a:	4640      	mov	r0, r8
 800f55c:	4798      	blx	r3
 800f55e:	462e      	mov	r6, r5
 800f560:	6822      	ldr	r2, [r4, #0]
 800f562:	f012 0210 	ands.w	r2, r2, #16
 800f566:	d001      	beq.n	800f56c <_scanf_float+0x370>
 800f568:	2000      	movs	r0, #0
 800f56a:	e68b      	b.n	800f284 <_scanf_float+0x88>
 800f56c:	7032      	strb	r2, [r6, #0]
 800f56e:	6823      	ldr	r3, [r4, #0]
 800f570:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800f574:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f578:	d11c      	bne.n	800f5b4 <_scanf_float+0x3b8>
 800f57a:	9b02      	ldr	r3, [sp, #8]
 800f57c:	454b      	cmp	r3, r9
 800f57e:	eba3 0209 	sub.w	r2, r3, r9
 800f582:	d123      	bne.n	800f5cc <_scanf_float+0x3d0>
 800f584:	9901      	ldr	r1, [sp, #4]
 800f586:	2200      	movs	r2, #0
 800f588:	4640      	mov	r0, r8
 800f58a:	f7ff f9cd 	bl	800e928 <_strtod_r>
 800f58e:	9b03      	ldr	r3, [sp, #12]
 800f590:	6821      	ldr	r1, [r4, #0]
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	f011 0f02 	tst.w	r1, #2
 800f598:	ec57 6b10 	vmov	r6, r7, d0
 800f59c:	f103 0204 	add.w	r2, r3, #4
 800f5a0:	d01f      	beq.n	800f5e2 <_scanf_float+0x3e6>
 800f5a2:	9903      	ldr	r1, [sp, #12]
 800f5a4:	600a      	str	r2, [r1, #0]
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	e9c3 6700 	strd	r6, r7, [r3]
 800f5ac:	68e3      	ldr	r3, [r4, #12]
 800f5ae:	3301      	adds	r3, #1
 800f5b0:	60e3      	str	r3, [r4, #12]
 800f5b2:	e7d9      	b.n	800f568 <_scanf_float+0x36c>
 800f5b4:	9b04      	ldr	r3, [sp, #16]
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d0e4      	beq.n	800f584 <_scanf_float+0x388>
 800f5ba:	9905      	ldr	r1, [sp, #20]
 800f5bc:	230a      	movs	r3, #10
 800f5be:	3101      	adds	r1, #1
 800f5c0:	4640      	mov	r0, r8
 800f5c2:	f002 f9e9 	bl	8011998 <_strtol_r>
 800f5c6:	9b04      	ldr	r3, [sp, #16]
 800f5c8:	9e05      	ldr	r6, [sp, #20]
 800f5ca:	1ac2      	subs	r2, r0, r3
 800f5cc:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800f5d0:	429e      	cmp	r6, r3
 800f5d2:	bf28      	it	cs
 800f5d4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800f5d8:	4910      	ldr	r1, [pc, #64]	@ (800f61c <_scanf_float+0x420>)
 800f5da:	4630      	mov	r0, r6
 800f5dc:	f000 f8e4 	bl	800f7a8 <siprintf>
 800f5e0:	e7d0      	b.n	800f584 <_scanf_float+0x388>
 800f5e2:	f011 0f04 	tst.w	r1, #4
 800f5e6:	9903      	ldr	r1, [sp, #12]
 800f5e8:	600a      	str	r2, [r1, #0]
 800f5ea:	d1dc      	bne.n	800f5a6 <_scanf_float+0x3aa>
 800f5ec:	681d      	ldr	r5, [r3, #0]
 800f5ee:	4632      	mov	r2, r6
 800f5f0:	463b      	mov	r3, r7
 800f5f2:	4630      	mov	r0, r6
 800f5f4:	4639      	mov	r1, r7
 800f5f6:	f7f1 fac1 	bl	8000b7c <__aeabi_dcmpun>
 800f5fa:	b128      	cbz	r0, 800f608 <_scanf_float+0x40c>
 800f5fc:	4808      	ldr	r0, [pc, #32]	@ (800f620 <_scanf_float+0x424>)
 800f5fe:	f000 f9ff 	bl	800fa00 <nanf>
 800f602:	ed85 0a00 	vstr	s0, [r5]
 800f606:	e7d1      	b.n	800f5ac <_scanf_float+0x3b0>
 800f608:	4630      	mov	r0, r6
 800f60a:	4639      	mov	r1, r7
 800f60c:	f7f1 fb14 	bl	8000c38 <__aeabi_d2f>
 800f610:	6028      	str	r0, [r5, #0]
 800f612:	e7cb      	b.n	800f5ac <_scanf_float+0x3b0>
 800f614:	f04f 0900 	mov.w	r9, #0
 800f618:	e629      	b.n	800f26e <_scanf_float+0x72>
 800f61a:	bf00      	nop
 800f61c:	080128cc 	.word	0x080128cc
 800f620:	08012c6d 	.word	0x08012c6d

0800f624 <std>:
 800f624:	2300      	movs	r3, #0
 800f626:	b510      	push	{r4, lr}
 800f628:	4604      	mov	r4, r0
 800f62a:	e9c0 3300 	strd	r3, r3, [r0]
 800f62e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f632:	6083      	str	r3, [r0, #8]
 800f634:	8181      	strh	r1, [r0, #12]
 800f636:	6643      	str	r3, [r0, #100]	@ 0x64
 800f638:	81c2      	strh	r2, [r0, #14]
 800f63a:	6183      	str	r3, [r0, #24]
 800f63c:	4619      	mov	r1, r3
 800f63e:	2208      	movs	r2, #8
 800f640:	305c      	adds	r0, #92	@ 0x5c
 800f642:	f000 f935 	bl	800f8b0 <memset>
 800f646:	4b0d      	ldr	r3, [pc, #52]	@ (800f67c <std+0x58>)
 800f648:	6263      	str	r3, [r4, #36]	@ 0x24
 800f64a:	4b0d      	ldr	r3, [pc, #52]	@ (800f680 <std+0x5c>)
 800f64c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f64e:	4b0d      	ldr	r3, [pc, #52]	@ (800f684 <std+0x60>)
 800f650:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f652:	4b0d      	ldr	r3, [pc, #52]	@ (800f688 <std+0x64>)
 800f654:	6323      	str	r3, [r4, #48]	@ 0x30
 800f656:	4b0d      	ldr	r3, [pc, #52]	@ (800f68c <std+0x68>)
 800f658:	6224      	str	r4, [r4, #32]
 800f65a:	429c      	cmp	r4, r3
 800f65c:	d006      	beq.n	800f66c <std+0x48>
 800f65e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f662:	4294      	cmp	r4, r2
 800f664:	d002      	beq.n	800f66c <std+0x48>
 800f666:	33d0      	adds	r3, #208	@ 0xd0
 800f668:	429c      	cmp	r4, r3
 800f66a:	d105      	bne.n	800f678 <std+0x54>
 800f66c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f670:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f674:	f000 b9aa 	b.w	800f9cc <__retarget_lock_init_recursive>
 800f678:	bd10      	pop	{r4, pc}
 800f67a:	bf00      	nop
 800f67c:	0800f7e9 	.word	0x0800f7e9
 800f680:	0800f80b 	.word	0x0800f80b
 800f684:	0800f843 	.word	0x0800f843
 800f688:	0800f867 	.word	0x0800f867
 800f68c:	2000097c 	.word	0x2000097c

0800f690 <stdio_exit_handler>:
 800f690:	4a02      	ldr	r2, [pc, #8]	@ (800f69c <stdio_exit_handler+0xc>)
 800f692:	4903      	ldr	r1, [pc, #12]	@ (800f6a0 <stdio_exit_handler+0x10>)
 800f694:	4803      	ldr	r0, [pc, #12]	@ (800f6a4 <stdio_exit_handler+0x14>)
 800f696:	f000 b869 	b.w	800f76c <_fwalk_sglue>
 800f69a:	bf00      	nop
 800f69c:	20000090 	.word	0x20000090
 800f6a0:	08011d6d 	.word	0x08011d6d
 800f6a4:	2000020c 	.word	0x2000020c

0800f6a8 <cleanup_stdio>:
 800f6a8:	6841      	ldr	r1, [r0, #4]
 800f6aa:	4b0c      	ldr	r3, [pc, #48]	@ (800f6dc <cleanup_stdio+0x34>)
 800f6ac:	4299      	cmp	r1, r3
 800f6ae:	b510      	push	{r4, lr}
 800f6b0:	4604      	mov	r4, r0
 800f6b2:	d001      	beq.n	800f6b8 <cleanup_stdio+0x10>
 800f6b4:	f002 fb5a 	bl	8011d6c <_fflush_r>
 800f6b8:	68a1      	ldr	r1, [r4, #8]
 800f6ba:	4b09      	ldr	r3, [pc, #36]	@ (800f6e0 <cleanup_stdio+0x38>)
 800f6bc:	4299      	cmp	r1, r3
 800f6be:	d002      	beq.n	800f6c6 <cleanup_stdio+0x1e>
 800f6c0:	4620      	mov	r0, r4
 800f6c2:	f002 fb53 	bl	8011d6c <_fflush_r>
 800f6c6:	68e1      	ldr	r1, [r4, #12]
 800f6c8:	4b06      	ldr	r3, [pc, #24]	@ (800f6e4 <cleanup_stdio+0x3c>)
 800f6ca:	4299      	cmp	r1, r3
 800f6cc:	d004      	beq.n	800f6d8 <cleanup_stdio+0x30>
 800f6ce:	4620      	mov	r0, r4
 800f6d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f6d4:	f002 bb4a 	b.w	8011d6c <_fflush_r>
 800f6d8:	bd10      	pop	{r4, pc}
 800f6da:	bf00      	nop
 800f6dc:	2000097c 	.word	0x2000097c
 800f6e0:	200009e4 	.word	0x200009e4
 800f6e4:	20000a4c 	.word	0x20000a4c

0800f6e8 <global_stdio_init.part.0>:
 800f6e8:	b510      	push	{r4, lr}
 800f6ea:	4b0b      	ldr	r3, [pc, #44]	@ (800f718 <global_stdio_init.part.0+0x30>)
 800f6ec:	4c0b      	ldr	r4, [pc, #44]	@ (800f71c <global_stdio_init.part.0+0x34>)
 800f6ee:	4a0c      	ldr	r2, [pc, #48]	@ (800f720 <global_stdio_init.part.0+0x38>)
 800f6f0:	601a      	str	r2, [r3, #0]
 800f6f2:	4620      	mov	r0, r4
 800f6f4:	2200      	movs	r2, #0
 800f6f6:	2104      	movs	r1, #4
 800f6f8:	f7ff ff94 	bl	800f624 <std>
 800f6fc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f700:	2201      	movs	r2, #1
 800f702:	2109      	movs	r1, #9
 800f704:	f7ff ff8e 	bl	800f624 <std>
 800f708:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f70c:	2202      	movs	r2, #2
 800f70e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f712:	2112      	movs	r1, #18
 800f714:	f7ff bf86 	b.w	800f624 <std>
 800f718:	20000ab4 	.word	0x20000ab4
 800f71c:	2000097c 	.word	0x2000097c
 800f720:	0800f691 	.word	0x0800f691

0800f724 <__sfp_lock_acquire>:
 800f724:	4801      	ldr	r0, [pc, #4]	@ (800f72c <__sfp_lock_acquire+0x8>)
 800f726:	f000 b952 	b.w	800f9ce <__retarget_lock_acquire_recursive>
 800f72a:	bf00      	nop
 800f72c:	20000abd 	.word	0x20000abd

0800f730 <__sfp_lock_release>:
 800f730:	4801      	ldr	r0, [pc, #4]	@ (800f738 <__sfp_lock_release+0x8>)
 800f732:	f000 b94d 	b.w	800f9d0 <__retarget_lock_release_recursive>
 800f736:	bf00      	nop
 800f738:	20000abd 	.word	0x20000abd

0800f73c <__sinit>:
 800f73c:	b510      	push	{r4, lr}
 800f73e:	4604      	mov	r4, r0
 800f740:	f7ff fff0 	bl	800f724 <__sfp_lock_acquire>
 800f744:	6a23      	ldr	r3, [r4, #32]
 800f746:	b11b      	cbz	r3, 800f750 <__sinit+0x14>
 800f748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f74c:	f7ff bff0 	b.w	800f730 <__sfp_lock_release>
 800f750:	4b04      	ldr	r3, [pc, #16]	@ (800f764 <__sinit+0x28>)
 800f752:	6223      	str	r3, [r4, #32]
 800f754:	4b04      	ldr	r3, [pc, #16]	@ (800f768 <__sinit+0x2c>)
 800f756:	681b      	ldr	r3, [r3, #0]
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d1f5      	bne.n	800f748 <__sinit+0xc>
 800f75c:	f7ff ffc4 	bl	800f6e8 <global_stdio_init.part.0>
 800f760:	e7f2      	b.n	800f748 <__sinit+0xc>
 800f762:	bf00      	nop
 800f764:	0800f6a9 	.word	0x0800f6a9
 800f768:	20000ab4 	.word	0x20000ab4

0800f76c <_fwalk_sglue>:
 800f76c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f770:	4607      	mov	r7, r0
 800f772:	4688      	mov	r8, r1
 800f774:	4614      	mov	r4, r2
 800f776:	2600      	movs	r6, #0
 800f778:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f77c:	f1b9 0901 	subs.w	r9, r9, #1
 800f780:	d505      	bpl.n	800f78e <_fwalk_sglue+0x22>
 800f782:	6824      	ldr	r4, [r4, #0]
 800f784:	2c00      	cmp	r4, #0
 800f786:	d1f7      	bne.n	800f778 <_fwalk_sglue+0xc>
 800f788:	4630      	mov	r0, r6
 800f78a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f78e:	89ab      	ldrh	r3, [r5, #12]
 800f790:	2b01      	cmp	r3, #1
 800f792:	d907      	bls.n	800f7a4 <_fwalk_sglue+0x38>
 800f794:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f798:	3301      	adds	r3, #1
 800f79a:	d003      	beq.n	800f7a4 <_fwalk_sglue+0x38>
 800f79c:	4629      	mov	r1, r5
 800f79e:	4638      	mov	r0, r7
 800f7a0:	47c0      	blx	r8
 800f7a2:	4306      	orrs	r6, r0
 800f7a4:	3568      	adds	r5, #104	@ 0x68
 800f7a6:	e7e9      	b.n	800f77c <_fwalk_sglue+0x10>

0800f7a8 <siprintf>:
 800f7a8:	b40e      	push	{r1, r2, r3}
 800f7aa:	b500      	push	{lr}
 800f7ac:	b09c      	sub	sp, #112	@ 0x70
 800f7ae:	ab1d      	add	r3, sp, #116	@ 0x74
 800f7b0:	9002      	str	r0, [sp, #8]
 800f7b2:	9006      	str	r0, [sp, #24]
 800f7b4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800f7b8:	4809      	ldr	r0, [pc, #36]	@ (800f7e0 <siprintf+0x38>)
 800f7ba:	9107      	str	r1, [sp, #28]
 800f7bc:	9104      	str	r1, [sp, #16]
 800f7be:	4909      	ldr	r1, [pc, #36]	@ (800f7e4 <siprintf+0x3c>)
 800f7c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800f7c4:	9105      	str	r1, [sp, #20]
 800f7c6:	6800      	ldr	r0, [r0, #0]
 800f7c8:	9301      	str	r3, [sp, #4]
 800f7ca:	a902      	add	r1, sp, #8
 800f7cc:	f002 f94e 	bl	8011a6c <_svfiprintf_r>
 800f7d0:	9b02      	ldr	r3, [sp, #8]
 800f7d2:	2200      	movs	r2, #0
 800f7d4:	701a      	strb	r2, [r3, #0]
 800f7d6:	b01c      	add	sp, #112	@ 0x70
 800f7d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800f7dc:	b003      	add	sp, #12
 800f7de:	4770      	bx	lr
 800f7e0:	20000208 	.word	0x20000208
 800f7e4:	ffff0208 	.word	0xffff0208

0800f7e8 <__sread>:
 800f7e8:	b510      	push	{r4, lr}
 800f7ea:	460c      	mov	r4, r1
 800f7ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f7f0:	f000 f89e 	bl	800f930 <_read_r>
 800f7f4:	2800      	cmp	r0, #0
 800f7f6:	bfab      	itete	ge
 800f7f8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f7fa:	89a3      	ldrhlt	r3, [r4, #12]
 800f7fc:	181b      	addge	r3, r3, r0
 800f7fe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f802:	bfac      	ite	ge
 800f804:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f806:	81a3      	strhlt	r3, [r4, #12]
 800f808:	bd10      	pop	{r4, pc}

0800f80a <__swrite>:
 800f80a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f80e:	461f      	mov	r7, r3
 800f810:	898b      	ldrh	r3, [r1, #12]
 800f812:	05db      	lsls	r3, r3, #23
 800f814:	4605      	mov	r5, r0
 800f816:	460c      	mov	r4, r1
 800f818:	4616      	mov	r6, r2
 800f81a:	d505      	bpl.n	800f828 <__swrite+0x1e>
 800f81c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f820:	2302      	movs	r3, #2
 800f822:	2200      	movs	r2, #0
 800f824:	f000 f872 	bl	800f90c <_lseek_r>
 800f828:	89a3      	ldrh	r3, [r4, #12]
 800f82a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f82e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f832:	81a3      	strh	r3, [r4, #12]
 800f834:	4632      	mov	r2, r6
 800f836:	463b      	mov	r3, r7
 800f838:	4628      	mov	r0, r5
 800f83a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f83e:	f000 b889 	b.w	800f954 <_write_r>

0800f842 <__sseek>:
 800f842:	b510      	push	{r4, lr}
 800f844:	460c      	mov	r4, r1
 800f846:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f84a:	f000 f85f 	bl	800f90c <_lseek_r>
 800f84e:	1c43      	adds	r3, r0, #1
 800f850:	89a3      	ldrh	r3, [r4, #12]
 800f852:	bf15      	itete	ne
 800f854:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f856:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f85a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f85e:	81a3      	strheq	r3, [r4, #12]
 800f860:	bf18      	it	ne
 800f862:	81a3      	strhne	r3, [r4, #12]
 800f864:	bd10      	pop	{r4, pc}

0800f866 <__sclose>:
 800f866:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f86a:	f000 b83f 	b.w	800f8ec <_close_r>
	...

0800f870 <_vsiprintf_r>:
 800f870:	b500      	push	{lr}
 800f872:	b09b      	sub	sp, #108	@ 0x6c
 800f874:	9100      	str	r1, [sp, #0]
 800f876:	9104      	str	r1, [sp, #16]
 800f878:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800f87c:	9105      	str	r1, [sp, #20]
 800f87e:	9102      	str	r1, [sp, #8]
 800f880:	4905      	ldr	r1, [pc, #20]	@ (800f898 <_vsiprintf_r+0x28>)
 800f882:	9103      	str	r1, [sp, #12]
 800f884:	4669      	mov	r1, sp
 800f886:	f002 f8f1 	bl	8011a6c <_svfiprintf_r>
 800f88a:	9b00      	ldr	r3, [sp, #0]
 800f88c:	2200      	movs	r2, #0
 800f88e:	701a      	strb	r2, [r3, #0]
 800f890:	b01b      	add	sp, #108	@ 0x6c
 800f892:	f85d fb04 	ldr.w	pc, [sp], #4
 800f896:	bf00      	nop
 800f898:	ffff0208 	.word	0xffff0208

0800f89c <vsiprintf>:
 800f89c:	4613      	mov	r3, r2
 800f89e:	460a      	mov	r2, r1
 800f8a0:	4601      	mov	r1, r0
 800f8a2:	4802      	ldr	r0, [pc, #8]	@ (800f8ac <vsiprintf+0x10>)
 800f8a4:	6800      	ldr	r0, [r0, #0]
 800f8a6:	f7ff bfe3 	b.w	800f870 <_vsiprintf_r>
 800f8aa:	bf00      	nop
 800f8ac:	20000208 	.word	0x20000208

0800f8b0 <memset>:
 800f8b0:	4402      	add	r2, r0
 800f8b2:	4603      	mov	r3, r0
 800f8b4:	4293      	cmp	r3, r2
 800f8b6:	d100      	bne.n	800f8ba <memset+0xa>
 800f8b8:	4770      	bx	lr
 800f8ba:	f803 1b01 	strb.w	r1, [r3], #1
 800f8be:	e7f9      	b.n	800f8b4 <memset+0x4>

0800f8c0 <strncmp>:
 800f8c0:	b510      	push	{r4, lr}
 800f8c2:	b16a      	cbz	r2, 800f8e0 <strncmp+0x20>
 800f8c4:	3901      	subs	r1, #1
 800f8c6:	1884      	adds	r4, r0, r2
 800f8c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f8cc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800f8d0:	429a      	cmp	r2, r3
 800f8d2:	d103      	bne.n	800f8dc <strncmp+0x1c>
 800f8d4:	42a0      	cmp	r0, r4
 800f8d6:	d001      	beq.n	800f8dc <strncmp+0x1c>
 800f8d8:	2a00      	cmp	r2, #0
 800f8da:	d1f5      	bne.n	800f8c8 <strncmp+0x8>
 800f8dc:	1ad0      	subs	r0, r2, r3
 800f8de:	bd10      	pop	{r4, pc}
 800f8e0:	4610      	mov	r0, r2
 800f8e2:	e7fc      	b.n	800f8de <strncmp+0x1e>

0800f8e4 <_localeconv_r>:
 800f8e4:	4800      	ldr	r0, [pc, #0]	@ (800f8e8 <_localeconv_r+0x4>)
 800f8e6:	4770      	bx	lr
 800f8e8:	2000018c 	.word	0x2000018c

0800f8ec <_close_r>:
 800f8ec:	b538      	push	{r3, r4, r5, lr}
 800f8ee:	4d06      	ldr	r5, [pc, #24]	@ (800f908 <_close_r+0x1c>)
 800f8f0:	2300      	movs	r3, #0
 800f8f2:	4604      	mov	r4, r0
 800f8f4:	4608      	mov	r0, r1
 800f8f6:	602b      	str	r3, [r5, #0]
 800f8f8:	f7f2 faf0 	bl	8001edc <_close>
 800f8fc:	1c43      	adds	r3, r0, #1
 800f8fe:	d102      	bne.n	800f906 <_close_r+0x1a>
 800f900:	682b      	ldr	r3, [r5, #0]
 800f902:	b103      	cbz	r3, 800f906 <_close_r+0x1a>
 800f904:	6023      	str	r3, [r4, #0]
 800f906:	bd38      	pop	{r3, r4, r5, pc}
 800f908:	20000ab8 	.word	0x20000ab8

0800f90c <_lseek_r>:
 800f90c:	b538      	push	{r3, r4, r5, lr}
 800f90e:	4d07      	ldr	r5, [pc, #28]	@ (800f92c <_lseek_r+0x20>)
 800f910:	4604      	mov	r4, r0
 800f912:	4608      	mov	r0, r1
 800f914:	4611      	mov	r1, r2
 800f916:	2200      	movs	r2, #0
 800f918:	602a      	str	r2, [r5, #0]
 800f91a:	461a      	mov	r2, r3
 800f91c:	f7f2 fb05 	bl	8001f2a <_lseek>
 800f920:	1c43      	adds	r3, r0, #1
 800f922:	d102      	bne.n	800f92a <_lseek_r+0x1e>
 800f924:	682b      	ldr	r3, [r5, #0]
 800f926:	b103      	cbz	r3, 800f92a <_lseek_r+0x1e>
 800f928:	6023      	str	r3, [r4, #0]
 800f92a:	bd38      	pop	{r3, r4, r5, pc}
 800f92c:	20000ab8 	.word	0x20000ab8

0800f930 <_read_r>:
 800f930:	b538      	push	{r3, r4, r5, lr}
 800f932:	4d07      	ldr	r5, [pc, #28]	@ (800f950 <_read_r+0x20>)
 800f934:	4604      	mov	r4, r0
 800f936:	4608      	mov	r0, r1
 800f938:	4611      	mov	r1, r2
 800f93a:	2200      	movs	r2, #0
 800f93c:	602a      	str	r2, [r5, #0]
 800f93e:	461a      	mov	r2, r3
 800f940:	f7f2 fa93 	bl	8001e6a <_read>
 800f944:	1c43      	adds	r3, r0, #1
 800f946:	d102      	bne.n	800f94e <_read_r+0x1e>
 800f948:	682b      	ldr	r3, [r5, #0]
 800f94a:	b103      	cbz	r3, 800f94e <_read_r+0x1e>
 800f94c:	6023      	str	r3, [r4, #0]
 800f94e:	bd38      	pop	{r3, r4, r5, pc}
 800f950:	20000ab8 	.word	0x20000ab8

0800f954 <_write_r>:
 800f954:	b538      	push	{r3, r4, r5, lr}
 800f956:	4d07      	ldr	r5, [pc, #28]	@ (800f974 <_write_r+0x20>)
 800f958:	4604      	mov	r4, r0
 800f95a:	4608      	mov	r0, r1
 800f95c:	4611      	mov	r1, r2
 800f95e:	2200      	movs	r2, #0
 800f960:	602a      	str	r2, [r5, #0]
 800f962:	461a      	mov	r2, r3
 800f964:	f7f2 fa9e 	bl	8001ea4 <_write>
 800f968:	1c43      	adds	r3, r0, #1
 800f96a:	d102      	bne.n	800f972 <_write_r+0x1e>
 800f96c:	682b      	ldr	r3, [r5, #0]
 800f96e:	b103      	cbz	r3, 800f972 <_write_r+0x1e>
 800f970:	6023      	str	r3, [r4, #0]
 800f972:	bd38      	pop	{r3, r4, r5, pc}
 800f974:	20000ab8 	.word	0x20000ab8

0800f978 <__errno>:
 800f978:	4b01      	ldr	r3, [pc, #4]	@ (800f980 <__errno+0x8>)
 800f97a:	6818      	ldr	r0, [r3, #0]
 800f97c:	4770      	bx	lr
 800f97e:	bf00      	nop
 800f980:	20000208 	.word	0x20000208

0800f984 <__libc_init_array>:
 800f984:	b570      	push	{r4, r5, r6, lr}
 800f986:	4d0d      	ldr	r5, [pc, #52]	@ (800f9bc <__libc_init_array+0x38>)
 800f988:	4c0d      	ldr	r4, [pc, #52]	@ (800f9c0 <__libc_init_array+0x3c>)
 800f98a:	1b64      	subs	r4, r4, r5
 800f98c:	10a4      	asrs	r4, r4, #2
 800f98e:	2600      	movs	r6, #0
 800f990:	42a6      	cmp	r6, r4
 800f992:	d109      	bne.n	800f9a8 <__libc_init_array+0x24>
 800f994:	4d0b      	ldr	r5, [pc, #44]	@ (800f9c4 <__libc_init_array+0x40>)
 800f996:	4c0c      	ldr	r4, [pc, #48]	@ (800f9c8 <__libc_init_array+0x44>)
 800f998:	f002 fe90 	bl	80126bc <_init>
 800f99c:	1b64      	subs	r4, r4, r5
 800f99e:	10a4      	asrs	r4, r4, #2
 800f9a0:	2600      	movs	r6, #0
 800f9a2:	42a6      	cmp	r6, r4
 800f9a4:	d105      	bne.n	800f9b2 <__libc_init_array+0x2e>
 800f9a6:	bd70      	pop	{r4, r5, r6, pc}
 800f9a8:	f855 3b04 	ldr.w	r3, [r5], #4
 800f9ac:	4798      	blx	r3
 800f9ae:	3601      	adds	r6, #1
 800f9b0:	e7ee      	b.n	800f990 <__libc_init_array+0xc>
 800f9b2:	f855 3b04 	ldr.w	r3, [r5], #4
 800f9b6:	4798      	blx	r3
 800f9b8:	3601      	adds	r6, #1
 800f9ba:	e7f2      	b.n	800f9a2 <__libc_init_array+0x1e>
 800f9bc:	08012c88 	.word	0x08012c88
 800f9c0:	08012c88 	.word	0x08012c88
 800f9c4:	08012c88 	.word	0x08012c88
 800f9c8:	08012c8c 	.word	0x08012c8c

0800f9cc <__retarget_lock_init_recursive>:
 800f9cc:	4770      	bx	lr

0800f9ce <__retarget_lock_acquire_recursive>:
 800f9ce:	4770      	bx	lr

0800f9d0 <__retarget_lock_release_recursive>:
 800f9d0:	4770      	bx	lr

0800f9d2 <memcpy>:
 800f9d2:	440a      	add	r2, r1
 800f9d4:	4291      	cmp	r1, r2
 800f9d6:	f100 33ff 	add.w	r3, r0, #4294967295
 800f9da:	d100      	bne.n	800f9de <memcpy+0xc>
 800f9dc:	4770      	bx	lr
 800f9de:	b510      	push	{r4, lr}
 800f9e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f9e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f9e8:	4291      	cmp	r1, r2
 800f9ea:	d1f9      	bne.n	800f9e0 <memcpy+0xe>
 800f9ec:	bd10      	pop	{r4, pc}
	...

0800f9f0 <nan>:
 800f9f0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800f9f8 <nan+0x8>
 800f9f4:	4770      	bx	lr
 800f9f6:	bf00      	nop
 800f9f8:	00000000 	.word	0x00000000
 800f9fc:	7ff80000 	.word	0x7ff80000

0800fa00 <nanf>:
 800fa00:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800fa08 <nanf+0x8>
 800fa04:	4770      	bx	lr
 800fa06:	bf00      	nop
 800fa08:	7fc00000 	.word	0x7fc00000

0800fa0c <quorem>:
 800fa0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa10:	6903      	ldr	r3, [r0, #16]
 800fa12:	690c      	ldr	r4, [r1, #16]
 800fa14:	42a3      	cmp	r3, r4
 800fa16:	4607      	mov	r7, r0
 800fa18:	db7e      	blt.n	800fb18 <quorem+0x10c>
 800fa1a:	3c01      	subs	r4, #1
 800fa1c:	f101 0814 	add.w	r8, r1, #20
 800fa20:	00a3      	lsls	r3, r4, #2
 800fa22:	f100 0514 	add.w	r5, r0, #20
 800fa26:	9300      	str	r3, [sp, #0]
 800fa28:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fa2c:	9301      	str	r3, [sp, #4]
 800fa2e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fa32:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fa36:	3301      	adds	r3, #1
 800fa38:	429a      	cmp	r2, r3
 800fa3a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fa3e:	fbb2 f6f3 	udiv	r6, r2, r3
 800fa42:	d32e      	bcc.n	800faa2 <quorem+0x96>
 800fa44:	f04f 0a00 	mov.w	sl, #0
 800fa48:	46c4      	mov	ip, r8
 800fa4a:	46ae      	mov	lr, r5
 800fa4c:	46d3      	mov	fp, sl
 800fa4e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800fa52:	b298      	uxth	r0, r3
 800fa54:	fb06 a000 	mla	r0, r6, r0, sl
 800fa58:	0c02      	lsrs	r2, r0, #16
 800fa5a:	0c1b      	lsrs	r3, r3, #16
 800fa5c:	fb06 2303 	mla	r3, r6, r3, r2
 800fa60:	f8de 2000 	ldr.w	r2, [lr]
 800fa64:	b280      	uxth	r0, r0
 800fa66:	b292      	uxth	r2, r2
 800fa68:	1a12      	subs	r2, r2, r0
 800fa6a:	445a      	add	r2, fp
 800fa6c:	f8de 0000 	ldr.w	r0, [lr]
 800fa70:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fa74:	b29b      	uxth	r3, r3
 800fa76:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800fa7a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800fa7e:	b292      	uxth	r2, r2
 800fa80:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800fa84:	45e1      	cmp	r9, ip
 800fa86:	f84e 2b04 	str.w	r2, [lr], #4
 800fa8a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800fa8e:	d2de      	bcs.n	800fa4e <quorem+0x42>
 800fa90:	9b00      	ldr	r3, [sp, #0]
 800fa92:	58eb      	ldr	r3, [r5, r3]
 800fa94:	b92b      	cbnz	r3, 800faa2 <quorem+0x96>
 800fa96:	9b01      	ldr	r3, [sp, #4]
 800fa98:	3b04      	subs	r3, #4
 800fa9a:	429d      	cmp	r5, r3
 800fa9c:	461a      	mov	r2, r3
 800fa9e:	d32f      	bcc.n	800fb00 <quorem+0xf4>
 800faa0:	613c      	str	r4, [r7, #16]
 800faa2:	4638      	mov	r0, r7
 800faa4:	f001 fd10 	bl	80114c8 <__mcmp>
 800faa8:	2800      	cmp	r0, #0
 800faaa:	db25      	blt.n	800faf8 <quorem+0xec>
 800faac:	4629      	mov	r1, r5
 800faae:	2000      	movs	r0, #0
 800fab0:	f858 2b04 	ldr.w	r2, [r8], #4
 800fab4:	f8d1 c000 	ldr.w	ip, [r1]
 800fab8:	fa1f fe82 	uxth.w	lr, r2
 800fabc:	fa1f f38c 	uxth.w	r3, ip
 800fac0:	eba3 030e 	sub.w	r3, r3, lr
 800fac4:	4403      	add	r3, r0
 800fac6:	0c12      	lsrs	r2, r2, #16
 800fac8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800facc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800fad0:	b29b      	uxth	r3, r3
 800fad2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fad6:	45c1      	cmp	r9, r8
 800fad8:	f841 3b04 	str.w	r3, [r1], #4
 800fadc:	ea4f 4022 	mov.w	r0, r2, asr #16
 800fae0:	d2e6      	bcs.n	800fab0 <quorem+0xa4>
 800fae2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fae6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800faea:	b922      	cbnz	r2, 800faf6 <quorem+0xea>
 800faec:	3b04      	subs	r3, #4
 800faee:	429d      	cmp	r5, r3
 800faf0:	461a      	mov	r2, r3
 800faf2:	d30b      	bcc.n	800fb0c <quorem+0x100>
 800faf4:	613c      	str	r4, [r7, #16]
 800faf6:	3601      	adds	r6, #1
 800faf8:	4630      	mov	r0, r6
 800fafa:	b003      	add	sp, #12
 800fafc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb00:	6812      	ldr	r2, [r2, #0]
 800fb02:	3b04      	subs	r3, #4
 800fb04:	2a00      	cmp	r2, #0
 800fb06:	d1cb      	bne.n	800faa0 <quorem+0x94>
 800fb08:	3c01      	subs	r4, #1
 800fb0a:	e7c6      	b.n	800fa9a <quorem+0x8e>
 800fb0c:	6812      	ldr	r2, [r2, #0]
 800fb0e:	3b04      	subs	r3, #4
 800fb10:	2a00      	cmp	r2, #0
 800fb12:	d1ef      	bne.n	800faf4 <quorem+0xe8>
 800fb14:	3c01      	subs	r4, #1
 800fb16:	e7ea      	b.n	800faee <quorem+0xe2>
 800fb18:	2000      	movs	r0, #0
 800fb1a:	e7ee      	b.n	800fafa <quorem+0xee>
 800fb1c:	0000      	movs	r0, r0
	...

0800fb20 <_dtoa_r>:
 800fb20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb24:	69c7      	ldr	r7, [r0, #28]
 800fb26:	b099      	sub	sp, #100	@ 0x64
 800fb28:	ed8d 0b02 	vstr	d0, [sp, #8]
 800fb2c:	ec55 4b10 	vmov	r4, r5, d0
 800fb30:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800fb32:	9109      	str	r1, [sp, #36]	@ 0x24
 800fb34:	4683      	mov	fp, r0
 800fb36:	920e      	str	r2, [sp, #56]	@ 0x38
 800fb38:	9313      	str	r3, [sp, #76]	@ 0x4c
 800fb3a:	b97f      	cbnz	r7, 800fb5c <_dtoa_r+0x3c>
 800fb3c:	2010      	movs	r0, #16
 800fb3e:	f001 f937 	bl	8010db0 <malloc>
 800fb42:	4602      	mov	r2, r0
 800fb44:	f8cb 001c 	str.w	r0, [fp, #28]
 800fb48:	b920      	cbnz	r0, 800fb54 <_dtoa_r+0x34>
 800fb4a:	4ba7      	ldr	r3, [pc, #668]	@ (800fde8 <_dtoa_r+0x2c8>)
 800fb4c:	21ef      	movs	r1, #239	@ 0xef
 800fb4e:	48a7      	ldr	r0, [pc, #668]	@ (800fdec <_dtoa_r+0x2cc>)
 800fb50:	f002 f95e 	bl	8011e10 <__assert_func>
 800fb54:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800fb58:	6007      	str	r7, [r0, #0]
 800fb5a:	60c7      	str	r7, [r0, #12]
 800fb5c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800fb60:	6819      	ldr	r1, [r3, #0]
 800fb62:	b159      	cbz	r1, 800fb7c <_dtoa_r+0x5c>
 800fb64:	685a      	ldr	r2, [r3, #4]
 800fb66:	604a      	str	r2, [r1, #4]
 800fb68:	2301      	movs	r3, #1
 800fb6a:	4093      	lsls	r3, r2
 800fb6c:	608b      	str	r3, [r1, #8]
 800fb6e:	4658      	mov	r0, fp
 800fb70:	f001 fa26 	bl	8010fc0 <_Bfree>
 800fb74:	f8db 301c 	ldr.w	r3, [fp, #28]
 800fb78:	2200      	movs	r2, #0
 800fb7a:	601a      	str	r2, [r3, #0]
 800fb7c:	1e2b      	subs	r3, r5, #0
 800fb7e:	bfb9      	ittee	lt
 800fb80:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800fb84:	9303      	strlt	r3, [sp, #12]
 800fb86:	2300      	movge	r3, #0
 800fb88:	6033      	strge	r3, [r6, #0]
 800fb8a:	9f03      	ldr	r7, [sp, #12]
 800fb8c:	4b98      	ldr	r3, [pc, #608]	@ (800fdf0 <_dtoa_r+0x2d0>)
 800fb8e:	bfbc      	itt	lt
 800fb90:	2201      	movlt	r2, #1
 800fb92:	6032      	strlt	r2, [r6, #0]
 800fb94:	43bb      	bics	r3, r7
 800fb96:	d112      	bne.n	800fbbe <_dtoa_r+0x9e>
 800fb98:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800fb9a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800fb9e:	6013      	str	r3, [r2, #0]
 800fba0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fba4:	4323      	orrs	r3, r4
 800fba6:	f000 854d 	beq.w	8010644 <_dtoa_r+0xb24>
 800fbaa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800fbac:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800fe04 <_dtoa_r+0x2e4>
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	f000 854f 	beq.w	8010654 <_dtoa_r+0xb34>
 800fbb6:	f10a 0303 	add.w	r3, sl, #3
 800fbba:	f000 bd49 	b.w	8010650 <_dtoa_r+0xb30>
 800fbbe:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fbc2:	2200      	movs	r2, #0
 800fbc4:	ec51 0b17 	vmov	r0, r1, d7
 800fbc8:	2300      	movs	r3, #0
 800fbca:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800fbce:	f7f0 ffa3 	bl	8000b18 <__aeabi_dcmpeq>
 800fbd2:	4680      	mov	r8, r0
 800fbd4:	b158      	cbz	r0, 800fbee <_dtoa_r+0xce>
 800fbd6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800fbd8:	2301      	movs	r3, #1
 800fbda:	6013      	str	r3, [r2, #0]
 800fbdc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800fbde:	b113      	cbz	r3, 800fbe6 <_dtoa_r+0xc6>
 800fbe0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800fbe2:	4b84      	ldr	r3, [pc, #528]	@ (800fdf4 <_dtoa_r+0x2d4>)
 800fbe4:	6013      	str	r3, [r2, #0]
 800fbe6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800fe08 <_dtoa_r+0x2e8>
 800fbea:	f000 bd33 	b.w	8010654 <_dtoa_r+0xb34>
 800fbee:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800fbf2:	aa16      	add	r2, sp, #88	@ 0x58
 800fbf4:	a917      	add	r1, sp, #92	@ 0x5c
 800fbf6:	4658      	mov	r0, fp
 800fbf8:	f001 fd86 	bl	8011708 <__d2b>
 800fbfc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800fc00:	4681      	mov	r9, r0
 800fc02:	2e00      	cmp	r6, #0
 800fc04:	d077      	beq.n	800fcf6 <_dtoa_r+0x1d6>
 800fc06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fc08:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800fc0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fc10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fc14:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800fc18:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800fc1c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800fc20:	4619      	mov	r1, r3
 800fc22:	2200      	movs	r2, #0
 800fc24:	4b74      	ldr	r3, [pc, #464]	@ (800fdf8 <_dtoa_r+0x2d8>)
 800fc26:	f7f0 fb57 	bl	80002d8 <__aeabi_dsub>
 800fc2a:	a369      	add	r3, pc, #420	@ (adr r3, 800fdd0 <_dtoa_r+0x2b0>)
 800fc2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc30:	f7f0 fd0a 	bl	8000648 <__aeabi_dmul>
 800fc34:	a368      	add	r3, pc, #416	@ (adr r3, 800fdd8 <_dtoa_r+0x2b8>)
 800fc36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc3a:	f7f0 fb4f 	bl	80002dc <__adddf3>
 800fc3e:	4604      	mov	r4, r0
 800fc40:	4630      	mov	r0, r6
 800fc42:	460d      	mov	r5, r1
 800fc44:	f7f0 fc96 	bl	8000574 <__aeabi_i2d>
 800fc48:	a365      	add	r3, pc, #404	@ (adr r3, 800fde0 <_dtoa_r+0x2c0>)
 800fc4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc4e:	f7f0 fcfb 	bl	8000648 <__aeabi_dmul>
 800fc52:	4602      	mov	r2, r0
 800fc54:	460b      	mov	r3, r1
 800fc56:	4620      	mov	r0, r4
 800fc58:	4629      	mov	r1, r5
 800fc5a:	f7f0 fb3f 	bl	80002dc <__adddf3>
 800fc5e:	4604      	mov	r4, r0
 800fc60:	460d      	mov	r5, r1
 800fc62:	f7f0 ffa1 	bl	8000ba8 <__aeabi_d2iz>
 800fc66:	2200      	movs	r2, #0
 800fc68:	4607      	mov	r7, r0
 800fc6a:	2300      	movs	r3, #0
 800fc6c:	4620      	mov	r0, r4
 800fc6e:	4629      	mov	r1, r5
 800fc70:	f7f0 ff5c 	bl	8000b2c <__aeabi_dcmplt>
 800fc74:	b140      	cbz	r0, 800fc88 <_dtoa_r+0x168>
 800fc76:	4638      	mov	r0, r7
 800fc78:	f7f0 fc7c 	bl	8000574 <__aeabi_i2d>
 800fc7c:	4622      	mov	r2, r4
 800fc7e:	462b      	mov	r3, r5
 800fc80:	f7f0 ff4a 	bl	8000b18 <__aeabi_dcmpeq>
 800fc84:	b900      	cbnz	r0, 800fc88 <_dtoa_r+0x168>
 800fc86:	3f01      	subs	r7, #1
 800fc88:	2f16      	cmp	r7, #22
 800fc8a:	d851      	bhi.n	800fd30 <_dtoa_r+0x210>
 800fc8c:	4b5b      	ldr	r3, [pc, #364]	@ (800fdfc <_dtoa_r+0x2dc>)
 800fc8e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800fc92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc96:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fc9a:	f7f0 ff47 	bl	8000b2c <__aeabi_dcmplt>
 800fc9e:	2800      	cmp	r0, #0
 800fca0:	d048      	beq.n	800fd34 <_dtoa_r+0x214>
 800fca2:	3f01      	subs	r7, #1
 800fca4:	2300      	movs	r3, #0
 800fca6:	9312      	str	r3, [sp, #72]	@ 0x48
 800fca8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800fcaa:	1b9b      	subs	r3, r3, r6
 800fcac:	1e5a      	subs	r2, r3, #1
 800fcae:	bf44      	itt	mi
 800fcb0:	f1c3 0801 	rsbmi	r8, r3, #1
 800fcb4:	2300      	movmi	r3, #0
 800fcb6:	9208      	str	r2, [sp, #32]
 800fcb8:	bf54      	ite	pl
 800fcba:	f04f 0800 	movpl.w	r8, #0
 800fcbe:	9308      	strmi	r3, [sp, #32]
 800fcc0:	2f00      	cmp	r7, #0
 800fcc2:	db39      	blt.n	800fd38 <_dtoa_r+0x218>
 800fcc4:	9b08      	ldr	r3, [sp, #32]
 800fcc6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800fcc8:	443b      	add	r3, r7
 800fcca:	9308      	str	r3, [sp, #32]
 800fccc:	2300      	movs	r3, #0
 800fcce:	930a      	str	r3, [sp, #40]	@ 0x28
 800fcd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fcd2:	2b09      	cmp	r3, #9
 800fcd4:	d864      	bhi.n	800fda0 <_dtoa_r+0x280>
 800fcd6:	2b05      	cmp	r3, #5
 800fcd8:	bfc4      	itt	gt
 800fcda:	3b04      	subgt	r3, #4
 800fcdc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800fcde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fce0:	f1a3 0302 	sub.w	r3, r3, #2
 800fce4:	bfcc      	ite	gt
 800fce6:	2400      	movgt	r4, #0
 800fce8:	2401      	movle	r4, #1
 800fcea:	2b03      	cmp	r3, #3
 800fcec:	d863      	bhi.n	800fdb6 <_dtoa_r+0x296>
 800fcee:	e8df f003 	tbb	[pc, r3]
 800fcf2:	372a      	.short	0x372a
 800fcf4:	5535      	.short	0x5535
 800fcf6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800fcfa:	441e      	add	r6, r3
 800fcfc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800fd00:	2b20      	cmp	r3, #32
 800fd02:	bfc1      	itttt	gt
 800fd04:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800fd08:	409f      	lslgt	r7, r3
 800fd0a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800fd0e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800fd12:	bfd6      	itet	le
 800fd14:	f1c3 0320 	rsble	r3, r3, #32
 800fd18:	ea47 0003 	orrgt.w	r0, r7, r3
 800fd1c:	fa04 f003 	lslle.w	r0, r4, r3
 800fd20:	f7f0 fc18 	bl	8000554 <__aeabi_ui2d>
 800fd24:	2201      	movs	r2, #1
 800fd26:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800fd2a:	3e01      	subs	r6, #1
 800fd2c:	9214      	str	r2, [sp, #80]	@ 0x50
 800fd2e:	e777      	b.n	800fc20 <_dtoa_r+0x100>
 800fd30:	2301      	movs	r3, #1
 800fd32:	e7b8      	b.n	800fca6 <_dtoa_r+0x186>
 800fd34:	9012      	str	r0, [sp, #72]	@ 0x48
 800fd36:	e7b7      	b.n	800fca8 <_dtoa_r+0x188>
 800fd38:	427b      	negs	r3, r7
 800fd3a:	930a      	str	r3, [sp, #40]	@ 0x28
 800fd3c:	2300      	movs	r3, #0
 800fd3e:	eba8 0807 	sub.w	r8, r8, r7
 800fd42:	930f      	str	r3, [sp, #60]	@ 0x3c
 800fd44:	e7c4      	b.n	800fcd0 <_dtoa_r+0x1b0>
 800fd46:	2300      	movs	r3, #0
 800fd48:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fd4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	dc35      	bgt.n	800fdbc <_dtoa_r+0x29c>
 800fd50:	2301      	movs	r3, #1
 800fd52:	9300      	str	r3, [sp, #0]
 800fd54:	9307      	str	r3, [sp, #28]
 800fd56:	461a      	mov	r2, r3
 800fd58:	920e      	str	r2, [sp, #56]	@ 0x38
 800fd5a:	e00b      	b.n	800fd74 <_dtoa_r+0x254>
 800fd5c:	2301      	movs	r3, #1
 800fd5e:	e7f3      	b.n	800fd48 <_dtoa_r+0x228>
 800fd60:	2300      	movs	r3, #0
 800fd62:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fd64:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fd66:	18fb      	adds	r3, r7, r3
 800fd68:	9300      	str	r3, [sp, #0]
 800fd6a:	3301      	adds	r3, #1
 800fd6c:	2b01      	cmp	r3, #1
 800fd6e:	9307      	str	r3, [sp, #28]
 800fd70:	bfb8      	it	lt
 800fd72:	2301      	movlt	r3, #1
 800fd74:	f8db 001c 	ldr.w	r0, [fp, #28]
 800fd78:	2100      	movs	r1, #0
 800fd7a:	2204      	movs	r2, #4
 800fd7c:	f102 0514 	add.w	r5, r2, #20
 800fd80:	429d      	cmp	r5, r3
 800fd82:	d91f      	bls.n	800fdc4 <_dtoa_r+0x2a4>
 800fd84:	6041      	str	r1, [r0, #4]
 800fd86:	4658      	mov	r0, fp
 800fd88:	f001 f8da 	bl	8010f40 <_Balloc>
 800fd8c:	4682      	mov	sl, r0
 800fd8e:	2800      	cmp	r0, #0
 800fd90:	d13c      	bne.n	800fe0c <_dtoa_r+0x2ec>
 800fd92:	4b1b      	ldr	r3, [pc, #108]	@ (800fe00 <_dtoa_r+0x2e0>)
 800fd94:	4602      	mov	r2, r0
 800fd96:	f240 11af 	movw	r1, #431	@ 0x1af
 800fd9a:	e6d8      	b.n	800fb4e <_dtoa_r+0x2e>
 800fd9c:	2301      	movs	r3, #1
 800fd9e:	e7e0      	b.n	800fd62 <_dtoa_r+0x242>
 800fda0:	2401      	movs	r4, #1
 800fda2:	2300      	movs	r3, #0
 800fda4:	9309      	str	r3, [sp, #36]	@ 0x24
 800fda6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800fda8:	f04f 33ff 	mov.w	r3, #4294967295
 800fdac:	9300      	str	r3, [sp, #0]
 800fdae:	9307      	str	r3, [sp, #28]
 800fdb0:	2200      	movs	r2, #0
 800fdb2:	2312      	movs	r3, #18
 800fdb4:	e7d0      	b.n	800fd58 <_dtoa_r+0x238>
 800fdb6:	2301      	movs	r3, #1
 800fdb8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fdba:	e7f5      	b.n	800fda8 <_dtoa_r+0x288>
 800fdbc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fdbe:	9300      	str	r3, [sp, #0]
 800fdc0:	9307      	str	r3, [sp, #28]
 800fdc2:	e7d7      	b.n	800fd74 <_dtoa_r+0x254>
 800fdc4:	3101      	adds	r1, #1
 800fdc6:	0052      	lsls	r2, r2, #1
 800fdc8:	e7d8      	b.n	800fd7c <_dtoa_r+0x25c>
 800fdca:	bf00      	nop
 800fdcc:	f3af 8000 	nop.w
 800fdd0:	636f4361 	.word	0x636f4361
 800fdd4:	3fd287a7 	.word	0x3fd287a7
 800fdd8:	8b60c8b3 	.word	0x8b60c8b3
 800fddc:	3fc68a28 	.word	0x3fc68a28
 800fde0:	509f79fb 	.word	0x509f79fb
 800fde4:	3fd34413 	.word	0x3fd34413
 800fde8:	080128e6 	.word	0x080128e6
 800fdec:	080128fd 	.word	0x080128fd
 800fdf0:	7ff00000 	.word	0x7ff00000
 800fdf4:	080128a9 	.word	0x080128a9
 800fdf8:	3ff80000 	.word	0x3ff80000
 800fdfc:	08012a58 	.word	0x08012a58
 800fe00:	08012955 	.word	0x08012955
 800fe04:	080128e2 	.word	0x080128e2
 800fe08:	080128a8 	.word	0x080128a8
 800fe0c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800fe10:	6018      	str	r0, [r3, #0]
 800fe12:	9b07      	ldr	r3, [sp, #28]
 800fe14:	2b0e      	cmp	r3, #14
 800fe16:	f200 80a4 	bhi.w	800ff62 <_dtoa_r+0x442>
 800fe1a:	2c00      	cmp	r4, #0
 800fe1c:	f000 80a1 	beq.w	800ff62 <_dtoa_r+0x442>
 800fe20:	2f00      	cmp	r7, #0
 800fe22:	dd33      	ble.n	800fe8c <_dtoa_r+0x36c>
 800fe24:	4bad      	ldr	r3, [pc, #692]	@ (80100dc <_dtoa_r+0x5bc>)
 800fe26:	f007 020f 	and.w	r2, r7, #15
 800fe2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fe2e:	ed93 7b00 	vldr	d7, [r3]
 800fe32:	05f8      	lsls	r0, r7, #23
 800fe34:	ed8d 7b04 	vstr	d7, [sp, #16]
 800fe38:	ea4f 1427 	mov.w	r4, r7, asr #4
 800fe3c:	d516      	bpl.n	800fe6c <_dtoa_r+0x34c>
 800fe3e:	4ba8      	ldr	r3, [pc, #672]	@ (80100e0 <_dtoa_r+0x5c0>)
 800fe40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fe44:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800fe48:	f7f0 fd28 	bl	800089c <__aeabi_ddiv>
 800fe4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fe50:	f004 040f 	and.w	r4, r4, #15
 800fe54:	2603      	movs	r6, #3
 800fe56:	4da2      	ldr	r5, [pc, #648]	@ (80100e0 <_dtoa_r+0x5c0>)
 800fe58:	b954      	cbnz	r4, 800fe70 <_dtoa_r+0x350>
 800fe5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fe5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fe62:	f7f0 fd1b 	bl	800089c <__aeabi_ddiv>
 800fe66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fe6a:	e028      	b.n	800febe <_dtoa_r+0x39e>
 800fe6c:	2602      	movs	r6, #2
 800fe6e:	e7f2      	b.n	800fe56 <_dtoa_r+0x336>
 800fe70:	07e1      	lsls	r1, r4, #31
 800fe72:	d508      	bpl.n	800fe86 <_dtoa_r+0x366>
 800fe74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fe78:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fe7c:	f7f0 fbe4 	bl	8000648 <__aeabi_dmul>
 800fe80:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fe84:	3601      	adds	r6, #1
 800fe86:	1064      	asrs	r4, r4, #1
 800fe88:	3508      	adds	r5, #8
 800fe8a:	e7e5      	b.n	800fe58 <_dtoa_r+0x338>
 800fe8c:	f000 80d2 	beq.w	8010034 <_dtoa_r+0x514>
 800fe90:	427c      	negs	r4, r7
 800fe92:	4b92      	ldr	r3, [pc, #584]	@ (80100dc <_dtoa_r+0x5bc>)
 800fe94:	4d92      	ldr	r5, [pc, #584]	@ (80100e0 <_dtoa_r+0x5c0>)
 800fe96:	f004 020f 	and.w	r2, r4, #15
 800fe9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fe9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fea2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fea6:	f7f0 fbcf 	bl	8000648 <__aeabi_dmul>
 800feaa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800feae:	1124      	asrs	r4, r4, #4
 800feb0:	2300      	movs	r3, #0
 800feb2:	2602      	movs	r6, #2
 800feb4:	2c00      	cmp	r4, #0
 800feb6:	f040 80b2 	bne.w	801001e <_dtoa_r+0x4fe>
 800feba:	2b00      	cmp	r3, #0
 800febc:	d1d3      	bne.n	800fe66 <_dtoa_r+0x346>
 800febe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800fec0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	f000 80b7 	beq.w	8010038 <_dtoa_r+0x518>
 800feca:	4b86      	ldr	r3, [pc, #536]	@ (80100e4 <_dtoa_r+0x5c4>)
 800fecc:	2200      	movs	r2, #0
 800fece:	4620      	mov	r0, r4
 800fed0:	4629      	mov	r1, r5
 800fed2:	f7f0 fe2b 	bl	8000b2c <__aeabi_dcmplt>
 800fed6:	2800      	cmp	r0, #0
 800fed8:	f000 80ae 	beq.w	8010038 <_dtoa_r+0x518>
 800fedc:	9b07      	ldr	r3, [sp, #28]
 800fede:	2b00      	cmp	r3, #0
 800fee0:	f000 80aa 	beq.w	8010038 <_dtoa_r+0x518>
 800fee4:	9b00      	ldr	r3, [sp, #0]
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	dd37      	ble.n	800ff5a <_dtoa_r+0x43a>
 800feea:	1e7b      	subs	r3, r7, #1
 800feec:	9304      	str	r3, [sp, #16]
 800feee:	4620      	mov	r0, r4
 800fef0:	4b7d      	ldr	r3, [pc, #500]	@ (80100e8 <_dtoa_r+0x5c8>)
 800fef2:	2200      	movs	r2, #0
 800fef4:	4629      	mov	r1, r5
 800fef6:	f7f0 fba7 	bl	8000648 <__aeabi_dmul>
 800fefa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fefe:	9c00      	ldr	r4, [sp, #0]
 800ff00:	3601      	adds	r6, #1
 800ff02:	4630      	mov	r0, r6
 800ff04:	f7f0 fb36 	bl	8000574 <__aeabi_i2d>
 800ff08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ff0c:	f7f0 fb9c 	bl	8000648 <__aeabi_dmul>
 800ff10:	4b76      	ldr	r3, [pc, #472]	@ (80100ec <_dtoa_r+0x5cc>)
 800ff12:	2200      	movs	r2, #0
 800ff14:	f7f0 f9e2 	bl	80002dc <__adddf3>
 800ff18:	4605      	mov	r5, r0
 800ff1a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ff1e:	2c00      	cmp	r4, #0
 800ff20:	f040 808d 	bne.w	801003e <_dtoa_r+0x51e>
 800ff24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ff28:	4b71      	ldr	r3, [pc, #452]	@ (80100f0 <_dtoa_r+0x5d0>)
 800ff2a:	2200      	movs	r2, #0
 800ff2c:	f7f0 f9d4 	bl	80002d8 <__aeabi_dsub>
 800ff30:	4602      	mov	r2, r0
 800ff32:	460b      	mov	r3, r1
 800ff34:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ff38:	462a      	mov	r2, r5
 800ff3a:	4633      	mov	r3, r6
 800ff3c:	f7f0 fe14 	bl	8000b68 <__aeabi_dcmpgt>
 800ff40:	2800      	cmp	r0, #0
 800ff42:	f040 828b 	bne.w	801045c <_dtoa_r+0x93c>
 800ff46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ff4a:	462a      	mov	r2, r5
 800ff4c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ff50:	f7f0 fdec 	bl	8000b2c <__aeabi_dcmplt>
 800ff54:	2800      	cmp	r0, #0
 800ff56:	f040 8128 	bne.w	80101aa <_dtoa_r+0x68a>
 800ff5a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800ff5e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800ff62:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	f2c0 815a 	blt.w	801021e <_dtoa_r+0x6fe>
 800ff6a:	2f0e      	cmp	r7, #14
 800ff6c:	f300 8157 	bgt.w	801021e <_dtoa_r+0x6fe>
 800ff70:	4b5a      	ldr	r3, [pc, #360]	@ (80100dc <_dtoa_r+0x5bc>)
 800ff72:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ff76:	ed93 7b00 	vldr	d7, [r3]
 800ff7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	ed8d 7b00 	vstr	d7, [sp]
 800ff82:	da03      	bge.n	800ff8c <_dtoa_r+0x46c>
 800ff84:	9b07      	ldr	r3, [sp, #28]
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	f340 8101 	ble.w	801018e <_dtoa_r+0x66e>
 800ff8c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ff90:	4656      	mov	r6, sl
 800ff92:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ff96:	4620      	mov	r0, r4
 800ff98:	4629      	mov	r1, r5
 800ff9a:	f7f0 fc7f 	bl	800089c <__aeabi_ddiv>
 800ff9e:	f7f0 fe03 	bl	8000ba8 <__aeabi_d2iz>
 800ffa2:	4680      	mov	r8, r0
 800ffa4:	f7f0 fae6 	bl	8000574 <__aeabi_i2d>
 800ffa8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ffac:	f7f0 fb4c 	bl	8000648 <__aeabi_dmul>
 800ffb0:	4602      	mov	r2, r0
 800ffb2:	460b      	mov	r3, r1
 800ffb4:	4620      	mov	r0, r4
 800ffb6:	4629      	mov	r1, r5
 800ffb8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ffbc:	f7f0 f98c 	bl	80002d8 <__aeabi_dsub>
 800ffc0:	f806 4b01 	strb.w	r4, [r6], #1
 800ffc4:	9d07      	ldr	r5, [sp, #28]
 800ffc6:	eba6 040a 	sub.w	r4, r6, sl
 800ffca:	42a5      	cmp	r5, r4
 800ffcc:	4602      	mov	r2, r0
 800ffce:	460b      	mov	r3, r1
 800ffd0:	f040 8117 	bne.w	8010202 <_dtoa_r+0x6e2>
 800ffd4:	f7f0 f982 	bl	80002dc <__adddf3>
 800ffd8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ffdc:	4604      	mov	r4, r0
 800ffde:	460d      	mov	r5, r1
 800ffe0:	f7f0 fdc2 	bl	8000b68 <__aeabi_dcmpgt>
 800ffe4:	2800      	cmp	r0, #0
 800ffe6:	f040 80f9 	bne.w	80101dc <_dtoa_r+0x6bc>
 800ffea:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ffee:	4620      	mov	r0, r4
 800fff0:	4629      	mov	r1, r5
 800fff2:	f7f0 fd91 	bl	8000b18 <__aeabi_dcmpeq>
 800fff6:	b118      	cbz	r0, 8010000 <_dtoa_r+0x4e0>
 800fff8:	f018 0f01 	tst.w	r8, #1
 800fffc:	f040 80ee 	bne.w	80101dc <_dtoa_r+0x6bc>
 8010000:	4649      	mov	r1, r9
 8010002:	4658      	mov	r0, fp
 8010004:	f000 ffdc 	bl	8010fc0 <_Bfree>
 8010008:	2300      	movs	r3, #0
 801000a:	7033      	strb	r3, [r6, #0]
 801000c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801000e:	3701      	adds	r7, #1
 8010010:	601f      	str	r7, [r3, #0]
 8010012:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010014:	2b00      	cmp	r3, #0
 8010016:	f000 831d 	beq.w	8010654 <_dtoa_r+0xb34>
 801001a:	601e      	str	r6, [r3, #0]
 801001c:	e31a      	b.n	8010654 <_dtoa_r+0xb34>
 801001e:	07e2      	lsls	r2, r4, #31
 8010020:	d505      	bpl.n	801002e <_dtoa_r+0x50e>
 8010022:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010026:	f7f0 fb0f 	bl	8000648 <__aeabi_dmul>
 801002a:	3601      	adds	r6, #1
 801002c:	2301      	movs	r3, #1
 801002e:	1064      	asrs	r4, r4, #1
 8010030:	3508      	adds	r5, #8
 8010032:	e73f      	b.n	800feb4 <_dtoa_r+0x394>
 8010034:	2602      	movs	r6, #2
 8010036:	e742      	b.n	800febe <_dtoa_r+0x39e>
 8010038:	9c07      	ldr	r4, [sp, #28]
 801003a:	9704      	str	r7, [sp, #16]
 801003c:	e761      	b.n	800ff02 <_dtoa_r+0x3e2>
 801003e:	4b27      	ldr	r3, [pc, #156]	@ (80100dc <_dtoa_r+0x5bc>)
 8010040:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010042:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010046:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801004a:	4454      	add	r4, sl
 801004c:	2900      	cmp	r1, #0
 801004e:	d053      	beq.n	80100f8 <_dtoa_r+0x5d8>
 8010050:	4928      	ldr	r1, [pc, #160]	@ (80100f4 <_dtoa_r+0x5d4>)
 8010052:	2000      	movs	r0, #0
 8010054:	f7f0 fc22 	bl	800089c <__aeabi_ddiv>
 8010058:	4633      	mov	r3, r6
 801005a:	462a      	mov	r2, r5
 801005c:	f7f0 f93c 	bl	80002d8 <__aeabi_dsub>
 8010060:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8010064:	4656      	mov	r6, sl
 8010066:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801006a:	f7f0 fd9d 	bl	8000ba8 <__aeabi_d2iz>
 801006e:	4605      	mov	r5, r0
 8010070:	f7f0 fa80 	bl	8000574 <__aeabi_i2d>
 8010074:	4602      	mov	r2, r0
 8010076:	460b      	mov	r3, r1
 8010078:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801007c:	f7f0 f92c 	bl	80002d8 <__aeabi_dsub>
 8010080:	3530      	adds	r5, #48	@ 0x30
 8010082:	4602      	mov	r2, r0
 8010084:	460b      	mov	r3, r1
 8010086:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801008a:	f806 5b01 	strb.w	r5, [r6], #1
 801008e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8010092:	f7f0 fd4b 	bl	8000b2c <__aeabi_dcmplt>
 8010096:	2800      	cmp	r0, #0
 8010098:	d171      	bne.n	801017e <_dtoa_r+0x65e>
 801009a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801009e:	4911      	ldr	r1, [pc, #68]	@ (80100e4 <_dtoa_r+0x5c4>)
 80100a0:	2000      	movs	r0, #0
 80100a2:	f7f0 f919 	bl	80002d8 <__aeabi_dsub>
 80100a6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80100aa:	f7f0 fd3f 	bl	8000b2c <__aeabi_dcmplt>
 80100ae:	2800      	cmp	r0, #0
 80100b0:	f040 8095 	bne.w	80101de <_dtoa_r+0x6be>
 80100b4:	42a6      	cmp	r6, r4
 80100b6:	f43f af50 	beq.w	800ff5a <_dtoa_r+0x43a>
 80100ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80100be:	4b0a      	ldr	r3, [pc, #40]	@ (80100e8 <_dtoa_r+0x5c8>)
 80100c0:	2200      	movs	r2, #0
 80100c2:	f7f0 fac1 	bl	8000648 <__aeabi_dmul>
 80100c6:	4b08      	ldr	r3, [pc, #32]	@ (80100e8 <_dtoa_r+0x5c8>)
 80100c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80100cc:	2200      	movs	r2, #0
 80100ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80100d2:	f7f0 fab9 	bl	8000648 <__aeabi_dmul>
 80100d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80100da:	e7c4      	b.n	8010066 <_dtoa_r+0x546>
 80100dc:	08012a58 	.word	0x08012a58
 80100e0:	08012a30 	.word	0x08012a30
 80100e4:	3ff00000 	.word	0x3ff00000
 80100e8:	40240000 	.word	0x40240000
 80100ec:	401c0000 	.word	0x401c0000
 80100f0:	40140000 	.word	0x40140000
 80100f4:	3fe00000 	.word	0x3fe00000
 80100f8:	4631      	mov	r1, r6
 80100fa:	4628      	mov	r0, r5
 80100fc:	f7f0 faa4 	bl	8000648 <__aeabi_dmul>
 8010100:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8010104:	9415      	str	r4, [sp, #84]	@ 0x54
 8010106:	4656      	mov	r6, sl
 8010108:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801010c:	f7f0 fd4c 	bl	8000ba8 <__aeabi_d2iz>
 8010110:	4605      	mov	r5, r0
 8010112:	f7f0 fa2f 	bl	8000574 <__aeabi_i2d>
 8010116:	4602      	mov	r2, r0
 8010118:	460b      	mov	r3, r1
 801011a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801011e:	f7f0 f8db 	bl	80002d8 <__aeabi_dsub>
 8010122:	3530      	adds	r5, #48	@ 0x30
 8010124:	f806 5b01 	strb.w	r5, [r6], #1
 8010128:	4602      	mov	r2, r0
 801012a:	460b      	mov	r3, r1
 801012c:	42a6      	cmp	r6, r4
 801012e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010132:	f04f 0200 	mov.w	r2, #0
 8010136:	d124      	bne.n	8010182 <_dtoa_r+0x662>
 8010138:	4bac      	ldr	r3, [pc, #688]	@ (80103ec <_dtoa_r+0x8cc>)
 801013a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801013e:	f7f0 f8cd 	bl	80002dc <__adddf3>
 8010142:	4602      	mov	r2, r0
 8010144:	460b      	mov	r3, r1
 8010146:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801014a:	f7f0 fd0d 	bl	8000b68 <__aeabi_dcmpgt>
 801014e:	2800      	cmp	r0, #0
 8010150:	d145      	bne.n	80101de <_dtoa_r+0x6be>
 8010152:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8010156:	49a5      	ldr	r1, [pc, #660]	@ (80103ec <_dtoa_r+0x8cc>)
 8010158:	2000      	movs	r0, #0
 801015a:	f7f0 f8bd 	bl	80002d8 <__aeabi_dsub>
 801015e:	4602      	mov	r2, r0
 8010160:	460b      	mov	r3, r1
 8010162:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010166:	f7f0 fce1 	bl	8000b2c <__aeabi_dcmplt>
 801016a:	2800      	cmp	r0, #0
 801016c:	f43f aef5 	beq.w	800ff5a <_dtoa_r+0x43a>
 8010170:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8010172:	1e73      	subs	r3, r6, #1
 8010174:	9315      	str	r3, [sp, #84]	@ 0x54
 8010176:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801017a:	2b30      	cmp	r3, #48	@ 0x30
 801017c:	d0f8      	beq.n	8010170 <_dtoa_r+0x650>
 801017e:	9f04      	ldr	r7, [sp, #16]
 8010180:	e73e      	b.n	8010000 <_dtoa_r+0x4e0>
 8010182:	4b9b      	ldr	r3, [pc, #620]	@ (80103f0 <_dtoa_r+0x8d0>)
 8010184:	f7f0 fa60 	bl	8000648 <__aeabi_dmul>
 8010188:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801018c:	e7bc      	b.n	8010108 <_dtoa_r+0x5e8>
 801018e:	d10c      	bne.n	80101aa <_dtoa_r+0x68a>
 8010190:	4b98      	ldr	r3, [pc, #608]	@ (80103f4 <_dtoa_r+0x8d4>)
 8010192:	2200      	movs	r2, #0
 8010194:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010198:	f7f0 fa56 	bl	8000648 <__aeabi_dmul>
 801019c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80101a0:	f7f0 fcd8 	bl	8000b54 <__aeabi_dcmpge>
 80101a4:	2800      	cmp	r0, #0
 80101a6:	f000 8157 	beq.w	8010458 <_dtoa_r+0x938>
 80101aa:	2400      	movs	r4, #0
 80101ac:	4625      	mov	r5, r4
 80101ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80101b0:	43db      	mvns	r3, r3
 80101b2:	9304      	str	r3, [sp, #16]
 80101b4:	4656      	mov	r6, sl
 80101b6:	2700      	movs	r7, #0
 80101b8:	4621      	mov	r1, r4
 80101ba:	4658      	mov	r0, fp
 80101bc:	f000 ff00 	bl	8010fc0 <_Bfree>
 80101c0:	2d00      	cmp	r5, #0
 80101c2:	d0dc      	beq.n	801017e <_dtoa_r+0x65e>
 80101c4:	b12f      	cbz	r7, 80101d2 <_dtoa_r+0x6b2>
 80101c6:	42af      	cmp	r7, r5
 80101c8:	d003      	beq.n	80101d2 <_dtoa_r+0x6b2>
 80101ca:	4639      	mov	r1, r7
 80101cc:	4658      	mov	r0, fp
 80101ce:	f000 fef7 	bl	8010fc0 <_Bfree>
 80101d2:	4629      	mov	r1, r5
 80101d4:	4658      	mov	r0, fp
 80101d6:	f000 fef3 	bl	8010fc0 <_Bfree>
 80101da:	e7d0      	b.n	801017e <_dtoa_r+0x65e>
 80101dc:	9704      	str	r7, [sp, #16]
 80101de:	4633      	mov	r3, r6
 80101e0:	461e      	mov	r6, r3
 80101e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80101e6:	2a39      	cmp	r2, #57	@ 0x39
 80101e8:	d107      	bne.n	80101fa <_dtoa_r+0x6da>
 80101ea:	459a      	cmp	sl, r3
 80101ec:	d1f8      	bne.n	80101e0 <_dtoa_r+0x6c0>
 80101ee:	9a04      	ldr	r2, [sp, #16]
 80101f0:	3201      	adds	r2, #1
 80101f2:	9204      	str	r2, [sp, #16]
 80101f4:	2230      	movs	r2, #48	@ 0x30
 80101f6:	f88a 2000 	strb.w	r2, [sl]
 80101fa:	781a      	ldrb	r2, [r3, #0]
 80101fc:	3201      	adds	r2, #1
 80101fe:	701a      	strb	r2, [r3, #0]
 8010200:	e7bd      	b.n	801017e <_dtoa_r+0x65e>
 8010202:	4b7b      	ldr	r3, [pc, #492]	@ (80103f0 <_dtoa_r+0x8d0>)
 8010204:	2200      	movs	r2, #0
 8010206:	f7f0 fa1f 	bl	8000648 <__aeabi_dmul>
 801020a:	2200      	movs	r2, #0
 801020c:	2300      	movs	r3, #0
 801020e:	4604      	mov	r4, r0
 8010210:	460d      	mov	r5, r1
 8010212:	f7f0 fc81 	bl	8000b18 <__aeabi_dcmpeq>
 8010216:	2800      	cmp	r0, #0
 8010218:	f43f aebb 	beq.w	800ff92 <_dtoa_r+0x472>
 801021c:	e6f0      	b.n	8010000 <_dtoa_r+0x4e0>
 801021e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010220:	2a00      	cmp	r2, #0
 8010222:	f000 80db 	beq.w	80103dc <_dtoa_r+0x8bc>
 8010226:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010228:	2a01      	cmp	r2, #1
 801022a:	f300 80bf 	bgt.w	80103ac <_dtoa_r+0x88c>
 801022e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8010230:	2a00      	cmp	r2, #0
 8010232:	f000 80b7 	beq.w	80103a4 <_dtoa_r+0x884>
 8010236:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801023a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801023c:	4646      	mov	r6, r8
 801023e:	9a08      	ldr	r2, [sp, #32]
 8010240:	2101      	movs	r1, #1
 8010242:	441a      	add	r2, r3
 8010244:	4658      	mov	r0, fp
 8010246:	4498      	add	r8, r3
 8010248:	9208      	str	r2, [sp, #32]
 801024a:	f000 ffb7 	bl	80111bc <__i2b>
 801024e:	4605      	mov	r5, r0
 8010250:	b15e      	cbz	r6, 801026a <_dtoa_r+0x74a>
 8010252:	9b08      	ldr	r3, [sp, #32]
 8010254:	2b00      	cmp	r3, #0
 8010256:	dd08      	ble.n	801026a <_dtoa_r+0x74a>
 8010258:	42b3      	cmp	r3, r6
 801025a:	9a08      	ldr	r2, [sp, #32]
 801025c:	bfa8      	it	ge
 801025e:	4633      	movge	r3, r6
 8010260:	eba8 0803 	sub.w	r8, r8, r3
 8010264:	1af6      	subs	r6, r6, r3
 8010266:	1ad3      	subs	r3, r2, r3
 8010268:	9308      	str	r3, [sp, #32]
 801026a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801026c:	b1f3      	cbz	r3, 80102ac <_dtoa_r+0x78c>
 801026e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010270:	2b00      	cmp	r3, #0
 8010272:	f000 80b7 	beq.w	80103e4 <_dtoa_r+0x8c4>
 8010276:	b18c      	cbz	r4, 801029c <_dtoa_r+0x77c>
 8010278:	4629      	mov	r1, r5
 801027a:	4622      	mov	r2, r4
 801027c:	4658      	mov	r0, fp
 801027e:	f001 f85d 	bl	801133c <__pow5mult>
 8010282:	464a      	mov	r2, r9
 8010284:	4601      	mov	r1, r0
 8010286:	4605      	mov	r5, r0
 8010288:	4658      	mov	r0, fp
 801028a:	f000 ffad 	bl	80111e8 <__multiply>
 801028e:	4649      	mov	r1, r9
 8010290:	9004      	str	r0, [sp, #16]
 8010292:	4658      	mov	r0, fp
 8010294:	f000 fe94 	bl	8010fc0 <_Bfree>
 8010298:	9b04      	ldr	r3, [sp, #16]
 801029a:	4699      	mov	r9, r3
 801029c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801029e:	1b1a      	subs	r2, r3, r4
 80102a0:	d004      	beq.n	80102ac <_dtoa_r+0x78c>
 80102a2:	4649      	mov	r1, r9
 80102a4:	4658      	mov	r0, fp
 80102a6:	f001 f849 	bl	801133c <__pow5mult>
 80102aa:	4681      	mov	r9, r0
 80102ac:	2101      	movs	r1, #1
 80102ae:	4658      	mov	r0, fp
 80102b0:	f000 ff84 	bl	80111bc <__i2b>
 80102b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80102b6:	4604      	mov	r4, r0
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	f000 81cf 	beq.w	801065c <_dtoa_r+0xb3c>
 80102be:	461a      	mov	r2, r3
 80102c0:	4601      	mov	r1, r0
 80102c2:	4658      	mov	r0, fp
 80102c4:	f001 f83a 	bl	801133c <__pow5mult>
 80102c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80102ca:	2b01      	cmp	r3, #1
 80102cc:	4604      	mov	r4, r0
 80102ce:	f300 8095 	bgt.w	80103fc <_dtoa_r+0x8dc>
 80102d2:	9b02      	ldr	r3, [sp, #8]
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	f040 8087 	bne.w	80103e8 <_dtoa_r+0x8c8>
 80102da:	9b03      	ldr	r3, [sp, #12]
 80102dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	f040 8089 	bne.w	80103f8 <_dtoa_r+0x8d8>
 80102e6:	9b03      	ldr	r3, [sp, #12]
 80102e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80102ec:	0d1b      	lsrs	r3, r3, #20
 80102ee:	051b      	lsls	r3, r3, #20
 80102f0:	b12b      	cbz	r3, 80102fe <_dtoa_r+0x7de>
 80102f2:	9b08      	ldr	r3, [sp, #32]
 80102f4:	3301      	adds	r3, #1
 80102f6:	9308      	str	r3, [sp, #32]
 80102f8:	f108 0801 	add.w	r8, r8, #1
 80102fc:	2301      	movs	r3, #1
 80102fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8010300:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010302:	2b00      	cmp	r3, #0
 8010304:	f000 81b0 	beq.w	8010668 <_dtoa_r+0xb48>
 8010308:	6923      	ldr	r3, [r4, #16]
 801030a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801030e:	6918      	ldr	r0, [r3, #16]
 8010310:	f000 ff08 	bl	8011124 <__hi0bits>
 8010314:	f1c0 0020 	rsb	r0, r0, #32
 8010318:	9b08      	ldr	r3, [sp, #32]
 801031a:	4418      	add	r0, r3
 801031c:	f010 001f 	ands.w	r0, r0, #31
 8010320:	d077      	beq.n	8010412 <_dtoa_r+0x8f2>
 8010322:	f1c0 0320 	rsb	r3, r0, #32
 8010326:	2b04      	cmp	r3, #4
 8010328:	dd6b      	ble.n	8010402 <_dtoa_r+0x8e2>
 801032a:	9b08      	ldr	r3, [sp, #32]
 801032c:	f1c0 001c 	rsb	r0, r0, #28
 8010330:	4403      	add	r3, r0
 8010332:	4480      	add	r8, r0
 8010334:	4406      	add	r6, r0
 8010336:	9308      	str	r3, [sp, #32]
 8010338:	f1b8 0f00 	cmp.w	r8, #0
 801033c:	dd05      	ble.n	801034a <_dtoa_r+0x82a>
 801033e:	4649      	mov	r1, r9
 8010340:	4642      	mov	r2, r8
 8010342:	4658      	mov	r0, fp
 8010344:	f001 f854 	bl	80113f0 <__lshift>
 8010348:	4681      	mov	r9, r0
 801034a:	9b08      	ldr	r3, [sp, #32]
 801034c:	2b00      	cmp	r3, #0
 801034e:	dd05      	ble.n	801035c <_dtoa_r+0x83c>
 8010350:	4621      	mov	r1, r4
 8010352:	461a      	mov	r2, r3
 8010354:	4658      	mov	r0, fp
 8010356:	f001 f84b 	bl	80113f0 <__lshift>
 801035a:	4604      	mov	r4, r0
 801035c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801035e:	2b00      	cmp	r3, #0
 8010360:	d059      	beq.n	8010416 <_dtoa_r+0x8f6>
 8010362:	4621      	mov	r1, r4
 8010364:	4648      	mov	r0, r9
 8010366:	f001 f8af 	bl	80114c8 <__mcmp>
 801036a:	2800      	cmp	r0, #0
 801036c:	da53      	bge.n	8010416 <_dtoa_r+0x8f6>
 801036e:	1e7b      	subs	r3, r7, #1
 8010370:	9304      	str	r3, [sp, #16]
 8010372:	4649      	mov	r1, r9
 8010374:	2300      	movs	r3, #0
 8010376:	220a      	movs	r2, #10
 8010378:	4658      	mov	r0, fp
 801037a:	f000 fe43 	bl	8011004 <__multadd>
 801037e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010380:	4681      	mov	r9, r0
 8010382:	2b00      	cmp	r3, #0
 8010384:	f000 8172 	beq.w	801066c <_dtoa_r+0xb4c>
 8010388:	2300      	movs	r3, #0
 801038a:	4629      	mov	r1, r5
 801038c:	220a      	movs	r2, #10
 801038e:	4658      	mov	r0, fp
 8010390:	f000 fe38 	bl	8011004 <__multadd>
 8010394:	9b00      	ldr	r3, [sp, #0]
 8010396:	2b00      	cmp	r3, #0
 8010398:	4605      	mov	r5, r0
 801039a:	dc67      	bgt.n	801046c <_dtoa_r+0x94c>
 801039c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801039e:	2b02      	cmp	r3, #2
 80103a0:	dc41      	bgt.n	8010426 <_dtoa_r+0x906>
 80103a2:	e063      	b.n	801046c <_dtoa_r+0x94c>
 80103a4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80103a6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80103aa:	e746      	b.n	801023a <_dtoa_r+0x71a>
 80103ac:	9b07      	ldr	r3, [sp, #28]
 80103ae:	1e5c      	subs	r4, r3, #1
 80103b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80103b2:	42a3      	cmp	r3, r4
 80103b4:	bfbf      	itttt	lt
 80103b6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80103b8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80103ba:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80103bc:	1ae3      	sublt	r3, r4, r3
 80103be:	bfb4      	ite	lt
 80103c0:	18d2      	addlt	r2, r2, r3
 80103c2:	1b1c      	subge	r4, r3, r4
 80103c4:	9b07      	ldr	r3, [sp, #28]
 80103c6:	bfbc      	itt	lt
 80103c8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80103ca:	2400      	movlt	r4, #0
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	bfb5      	itete	lt
 80103d0:	eba8 0603 	sublt.w	r6, r8, r3
 80103d4:	9b07      	ldrge	r3, [sp, #28]
 80103d6:	2300      	movlt	r3, #0
 80103d8:	4646      	movge	r6, r8
 80103da:	e730      	b.n	801023e <_dtoa_r+0x71e>
 80103dc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80103de:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80103e0:	4646      	mov	r6, r8
 80103e2:	e735      	b.n	8010250 <_dtoa_r+0x730>
 80103e4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80103e6:	e75c      	b.n	80102a2 <_dtoa_r+0x782>
 80103e8:	2300      	movs	r3, #0
 80103ea:	e788      	b.n	80102fe <_dtoa_r+0x7de>
 80103ec:	3fe00000 	.word	0x3fe00000
 80103f0:	40240000 	.word	0x40240000
 80103f4:	40140000 	.word	0x40140000
 80103f8:	9b02      	ldr	r3, [sp, #8]
 80103fa:	e780      	b.n	80102fe <_dtoa_r+0x7de>
 80103fc:	2300      	movs	r3, #0
 80103fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8010400:	e782      	b.n	8010308 <_dtoa_r+0x7e8>
 8010402:	d099      	beq.n	8010338 <_dtoa_r+0x818>
 8010404:	9a08      	ldr	r2, [sp, #32]
 8010406:	331c      	adds	r3, #28
 8010408:	441a      	add	r2, r3
 801040a:	4498      	add	r8, r3
 801040c:	441e      	add	r6, r3
 801040e:	9208      	str	r2, [sp, #32]
 8010410:	e792      	b.n	8010338 <_dtoa_r+0x818>
 8010412:	4603      	mov	r3, r0
 8010414:	e7f6      	b.n	8010404 <_dtoa_r+0x8e4>
 8010416:	9b07      	ldr	r3, [sp, #28]
 8010418:	9704      	str	r7, [sp, #16]
 801041a:	2b00      	cmp	r3, #0
 801041c:	dc20      	bgt.n	8010460 <_dtoa_r+0x940>
 801041e:	9300      	str	r3, [sp, #0]
 8010420:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010422:	2b02      	cmp	r3, #2
 8010424:	dd1e      	ble.n	8010464 <_dtoa_r+0x944>
 8010426:	9b00      	ldr	r3, [sp, #0]
 8010428:	2b00      	cmp	r3, #0
 801042a:	f47f aec0 	bne.w	80101ae <_dtoa_r+0x68e>
 801042e:	4621      	mov	r1, r4
 8010430:	2205      	movs	r2, #5
 8010432:	4658      	mov	r0, fp
 8010434:	f000 fde6 	bl	8011004 <__multadd>
 8010438:	4601      	mov	r1, r0
 801043a:	4604      	mov	r4, r0
 801043c:	4648      	mov	r0, r9
 801043e:	f001 f843 	bl	80114c8 <__mcmp>
 8010442:	2800      	cmp	r0, #0
 8010444:	f77f aeb3 	ble.w	80101ae <_dtoa_r+0x68e>
 8010448:	4656      	mov	r6, sl
 801044a:	2331      	movs	r3, #49	@ 0x31
 801044c:	f806 3b01 	strb.w	r3, [r6], #1
 8010450:	9b04      	ldr	r3, [sp, #16]
 8010452:	3301      	adds	r3, #1
 8010454:	9304      	str	r3, [sp, #16]
 8010456:	e6ae      	b.n	80101b6 <_dtoa_r+0x696>
 8010458:	9c07      	ldr	r4, [sp, #28]
 801045a:	9704      	str	r7, [sp, #16]
 801045c:	4625      	mov	r5, r4
 801045e:	e7f3      	b.n	8010448 <_dtoa_r+0x928>
 8010460:	9b07      	ldr	r3, [sp, #28]
 8010462:	9300      	str	r3, [sp, #0]
 8010464:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010466:	2b00      	cmp	r3, #0
 8010468:	f000 8104 	beq.w	8010674 <_dtoa_r+0xb54>
 801046c:	2e00      	cmp	r6, #0
 801046e:	dd05      	ble.n	801047c <_dtoa_r+0x95c>
 8010470:	4629      	mov	r1, r5
 8010472:	4632      	mov	r2, r6
 8010474:	4658      	mov	r0, fp
 8010476:	f000 ffbb 	bl	80113f0 <__lshift>
 801047a:	4605      	mov	r5, r0
 801047c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801047e:	2b00      	cmp	r3, #0
 8010480:	d05a      	beq.n	8010538 <_dtoa_r+0xa18>
 8010482:	6869      	ldr	r1, [r5, #4]
 8010484:	4658      	mov	r0, fp
 8010486:	f000 fd5b 	bl	8010f40 <_Balloc>
 801048a:	4606      	mov	r6, r0
 801048c:	b928      	cbnz	r0, 801049a <_dtoa_r+0x97a>
 801048e:	4b84      	ldr	r3, [pc, #528]	@ (80106a0 <_dtoa_r+0xb80>)
 8010490:	4602      	mov	r2, r0
 8010492:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8010496:	f7ff bb5a 	b.w	800fb4e <_dtoa_r+0x2e>
 801049a:	692a      	ldr	r2, [r5, #16]
 801049c:	3202      	adds	r2, #2
 801049e:	0092      	lsls	r2, r2, #2
 80104a0:	f105 010c 	add.w	r1, r5, #12
 80104a4:	300c      	adds	r0, #12
 80104a6:	f7ff fa94 	bl	800f9d2 <memcpy>
 80104aa:	2201      	movs	r2, #1
 80104ac:	4631      	mov	r1, r6
 80104ae:	4658      	mov	r0, fp
 80104b0:	f000 ff9e 	bl	80113f0 <__lshift>
 80104b4:	f10a 0301 	add.w	r3, sl, #1
 80104b8:	9307      	str	r3, [sp, #28]
 80104ba:	9b00      	ldr	r3, [sp, #0]
 80104bc:	4453      	add	r3, sl
 80104be:	930b      	str	r3, [sp, #44]	@ 0x2c
 80104c0:	9b02      	ldr	r3, [sp, #8]
 80104c2:	f003 0301 	and.w	r3, r3, #1
 80104c6:	462f      	mov	r7, r5
 80104c8:	930a      	str	r3, [sp, #40]	@ 0x28
 80104ca:	4605      	mov	r5, r0
 80104cc:	9b07      	ldr	r3, [sp, #28]
 80104ce:	4621      	mov	r1, r4
 80104d0:	3b01      	subs	r3, #1
 80104d2:	4648      	mov	r0, r9
 80104d4:	9300      	str	r3, [sp, #0]
 80104d6:	f7ff fa99 	bl	800fa0c <quorem>
 80104da:	4639      	mov	r1, r7
 80104dc:	9002      	str	r0, [sp, #8]
 80104de:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80104e2:	4648      	mov	r0, r9
 80104e4:	f000 fff0 	bl	80114c8 <__mcmp>
 80104e8:	462a      	mov	r2, r5
 80104ea:	9008      	str	r0, [sp, #32]
 80104ec:	4621      	mov	r1, r4
 80104ee:	4658      	mov	r0, fp
 80104f0:	f001 f806 	bl	8011500 <__mdiff>
 80104f4:	68c2      	ldr	r2, [r0, #12]
 80104f6:	4606      	mov	r6, r0
 80104f8:	bb02      	cbnz	r2, 801053c <_dtoa_r+0xa1c>
 80104fa:	4601      	mov	r1, r0
 80104fc:	4648      	mov	r0, r9
 80104fe:	f000 ffe3 	bl	80114c8 <__mcmp>
 8010502:	4602      	mov	r2, r0
 8010504:	4631      	mov	r1, r6
 8010506:	4658      	mov	r0, fp
 8010508:	920e      	str	r2, [sp, #56]	@ 0x38
 801050a:	f000 fd59 	bl	8010fc0 <_Bfree>
 801050e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010510:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010512:	9e07      	ldr	r6, [sp, #28]
 8010514:	ea43 0102 	orr.w	r1, r3, r2
 8010518:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801051a:	4319      	orrs	r1, r3
 801051c:	d110      	bne.n	8010540 <_dtoa_r+0xa20>
 801051e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010522:	d029      	beq.n	8010578 <_dtoa_r+0xa58>
 8010524:	9b08      	ldr	r3, [sp, #32]
 8010526:	2b00      	cmp	r3, #0
 8010528:	dd02      	ble.n	8010530 <_dtoa_r+0xa10>
 801052a:	9b02      	ldr	r3, [sp, #8]
 801052c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8010530:	9b00      	ldr	r3, [sp, #0]
 8010532:	f883 8000 	strb.w	r8, [r3]
 8010536:	e63f      	b.n	80101b8 <_dtoa_r+0x698>
 8010538:	4628      	mov	r0, r5
 801053a:	e7bb      	b.n	80104b4 <_dtoa_r+0x994>
 801053c:	2201      	movs	r2, #1
 801053e:	e7e1      	b.n	8010504 <_dtoa_r+0x9e4>
 8010540:	9b08      	ldr	r3, [sp, #32]
 8010542:	2b00      	cmp	r3, #0
 8010544:	db04      	blt.n	8010550 <_dtoa_r+0xa30>
 8010546:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010548:	430b      	orrs	r3, r1
 801054a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801054c:	430b      	orrs	r3, r1
 801054e:	d120      	bne.n	8010592 <_dtoa_r+0xa72>
 8010550:	2a00      	cmp	r2, #0
 8010552:	dded      	ble.n	8010530 <_dtoa_r+0xa10>
 8010554:	4649      	mov	r1, r9
 8010556:	2201      	movs	r2, #1
 8010558:	4658      	mov	r0, fp
 801055a:	f000 ff49 	bl	80113f0 <__lshift>
 801055e:	4621      	mov	r1, r4
 8010560:	4681      	mov	r9, r0
 8010562:	f000 ffb1 	bl	80114c8 <__mcmp>
 8010566:	2800      	cmp	r0, #0
 8010568:	dc03      	bgt.n	8010572 <_dtoa_r+0xa52>
 801056a:	d1e1      	bne.n	8010530 <_dtoa_r+0xa10>
 801056c:	f018 0f01 	tst.w	r8, #1
 8010570:	d0de      	beq.n	8010530 <_dtoa_r+0xa10>
 8010572:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010576:	d1d8      	bne.n	801052a <_dtoa_r+0xa0a>
 8010578:	9a00      	ldr	r2, [sp, #0]
 801057a:	2339      	movs	r3, #57	@ 0x39
 801057c:	7013      	strb	r3, [r2, #0]
 801057e:	4633      	mov	r3, r6
 8010580:	461e      	mov	r6, r3
 8010582:	3b01      	subs	r3, #1
 8010584:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8010588:	2a39      	cmp	r2, #57	@ 0x39
 801058a:	d052      	beq.n	8010632 <_dtoa_r+0xb12>
 801058c:	3201      	adds	r2, #1
 801058e:	701a      	strb	r2, [r3, #0]
 8010590:	e612      	b.n	80101b8 <_dtoa_r+0x698>
 8010592:	2a00      	cmp	r2, #0
 8010594:	dd07      	ble.n	80105a6 <_dtoa_r+0xa86>
 8010596:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801059a:	d0ed      	beq.n	8010578 <_dtoa_r+0xa58>
 801059c:	9a00      	ldr	r2, [sp, #0]
 801059e:	f108 0301 	add.w	r3, r8, #1
 80105a2:	7013      	strb	r3, [r2, #0]
 80105a4:	e608      	b.n	80101b8 <_dtoa_r+0x698>
 80105a6:	9b07      	ldr	r3, [sp, #28]
 80105a8:	9a07      	ldr	r2, [sp, #28]
 80105aa:	f803 8c01 	strb.w	r8, [r3, #-1]
 80105ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80105b0:	4293      	cmp	r3, r2
 80105b2:	d028      	beq.n	8010606 <_dtoa_r+0xae6>
 80105b4:	4649      	mov	r1, r9
 80105b6:	2300      	movs	r3, #0
 80105b8:	220a      	movs	r2, #10
 80105ba:	4658      	mov	r0, fp
 80105bc:	f000 fd22 	bl	8011004 <__multadd>
 80105c0:	42af      	cmp	r7, r5
 80105c2:	4681      	mov	r9, r0
 80105c4:	f04f 0300 	mov.w	r3, #0
 80105c8:	f04f 020a 	mov.w	r2, #10
 80105cc:	4639      	mov	r1, r7
 80105ce:	4658      	mov	r0, fp
 80105d0:	d107      	bne.n	80105e2 <_dtoa_r+0xac2>
 80105d2:	f000 fd17 	bl	8011004 <__multadd>
 80105d6:	4607      	mov	r7, r0
 80105d8:	4605      	mov	r5, r0
 80105da:	9b07      	ldr	r3, [sp, #28]
 80105dc:	3301      	adds	r3, #1
 80105de:	9307      	str	r3, [sp, #28]
 80105e0:	e774      	b.n	80104cc <_dtoa_r+0x9ac>
 80105e2:	f000 fd0f 	bl	8011004 <__multadd>
 80105e6:	4629      	mov	r1, r5
 80105e8:	4607      	mov	r7, r0
 80105ea:	2300      	movs	r3, #0
 80105ec:	220a      	movs	r2, #10
 80105ee:	4658      	mov	r0, fp
 80105f0:	f000 fd08 	bl	8011004 <__multadd>
 80105f4:	4605      	mov	r5, r0
 80105f6:	e7f0      	b.n	80105da <_dtoa_r+0xaba>
 80105f8:	9b00      	ldr	r3, [sp, #0]
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	bfcc      	ite	gt
 80105fe:	461e      	movgt	r6, r3
 8010600:	2601      	movle	r6, #1
 8010602:	4456      	add	r6, sl
 8010604:	2700      	movs	r7, #0
 8010606:	4649      	mov	r1, r9
 8010608:	2201      	movs	r2, #1
 801060a:	4658      	mov	r0, fp
 801060c:	f000 fef0 	bl	80113f0 <__lshift>
 8010610:	4621      	mov	r1, r4
 8010612:	4681      	mov	r9, r0
 8010614:	f000 ff58 	bl	80114c8 <__mcmp>
 8010618:	2800      	cmp	r0, #0
 801061a:	dcb0      	bgt.n	801057e <_dtoa_r+0xa5e>
 801061c:	d102      	bne.n	8010624 <_dtoa_r+0xb04>
 801061e:	f018 0f01 	tst.w	r8, #1
 8010622:	d1ac      	bne.n	801057e <_dtoa_r+0xa5e>
 8010624:	4633      	mov	r3, r6
 8010626:	461e      	mov	r6, r3
 8010628:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801062c:	2a30      	cmp	r2, #48	@ 0x30
 801062e:	d0fa      	beq.n	8010626 <_dtoa_r+0xb06>
 8010630:	e5c2      	b.n	80101b8 <_dtoa_r+0x698>
 8010632:	459a      	cmp	sl, r3
 8010634:	d1a4      	bne.n	8010580 <_dtoa_r+0xa60>
 8010636:	9b04      	ldr	r3, [sp, #16]
 8010638:	3301      	adds	r3, #1
 801063a:	9304      	str	r3, [sp, #16]
 801063c:	2331      	movs	r3, #49	@ 0x31
 801063e:	f88a 3000 	strb.w	r3, [sl]
 8010642:	e5b9      	b.n	80101b8 <_dtoa_r+0x698>
 8010644:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010646:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80106a4 <_dtoa_r+0xb84>
 801064a:	b11b      	cbz	r3, 8010654 <_dtoa_r+0xb34>
 801064c:	f10a 0308 	add.w	r3, sl, #8
 8010650:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8010652:	6013      	str	r3, [r2, #0]
 8010654:	4650      	mov	r0, sl
 8010656:	b019      	add	sp, #100	@ 0x64
 8010658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801065c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801065e:	2b01      	cmp	r3, #1
 8010660:	f77f ae37 	ble.w	80102d2 <_dtoa_r+0x7b2>
 8010664:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010666:	930a      	str	r3, [sp, #40]	@ 0x28
 8010668:	2001      	movs	r0, #1
 801066a:	e655      	b.n	8010318 <_dtoa_r+0x7f8>
 801066c:	9b00      	ldr	r3, [sp, #0]
 801066e:	2b00      	cmp	r3, #0
 8010670:	f77f aed6 	ble.w	8010420 <_dtoa_r+0x900>
 8010674:	4656      	mov	r6, sl
 8010676:	4621      	mov	r1, r4
 8010678:	4648      	mov	r0, r9
 801067a:	f7ff f9c7 	bl	800fa0c <quorem>
 801067e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8010682:	f806 8b01 	strb.w	r8, [r6], #1
 8010686:	9b00      	ldr	r3, [sp, #0]
 8010688:	eba6 020a 	sub.w	r2, r6, sl
 801068c:	4293      	cmp	r3, r2
 801068e:	ddb3      	ble.n	80105f8 <_dtoa_r+0xad8>
 8010690:	4649      	mov	r1, r9
 8010692:	2300      	movs	r3, #0
 8010694:	220a      	movs	r2, #10
 8010696:	4658      	mov	r0, fp
 8010698:	f000 fcb4 	bl	8011004 <__multadd>
 801069c:	4681      	mov	r9, r0
 801069e:	e7ea      	b.n	8010676 <_dtoa_r+0xb56>
 80106a0:	08012955 	.word	0x08012955
 80106a4:	080128d9 	.word	0x080128d9

080106a8 <_free_r>:
 80106a8:	b538      	push	{r3, r4, r5, lr}
 80106aa:	4605      	mov	r5, r0
 80106ac:	2900      	cmp	r1, #0
 80106ae:	d041      	beq.n	8010734 <_free_r+0x8c>
 80106b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80106b4:	1f0c      	subs	r4, r1, #4
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	bfb8      	it	lt
 80106ba:	18e4      	addlt	r4, r4, r3
 80106bc:	f000 fc34 	bl	8010f28 <__malloc_lock>
 80106c0:	4a1d      	ldr	r2, [pc, #116]	@ (8010738 <_free_r+0x90>)
 80106c2:	6813      	ldr	r3, [r2, #0]
 80106c4:	b933      	cbnz	r3, 80106d4 <_free_r+0x2c>
 80106c6:	6063      	str	r3, [r4, #4]
 80106c8:	6014      	str	r4, [r2, #0]
 80106ca:	4628      	mov	r0, r5
 80106cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80106d0:	f000 bc30 	b.w	8010f34 <__malloc_unlock>
 80106d4:	42a3      	cmp	r3, r4
 80106d6:	d908      	bls.n	80106ea <_free_r+0x42>
 80106d8:	6820      	ldr	r0, [r4, #0]
 80106da:	1821      	adds	r1, r4, r0
 80106dc:	428b      	cmp	r3, r1
 80106de:	bf01      	itttt	eq
 80106e0:	6819      	ldreq	r1, [r3, #0]
 80106e2:	685b      	ldreq	r3, [r3, #4]
 80106e4:	1809      	addeq	r1, r1, r0
 80106e6:	6021      	streq	r1, [r4, #0]
 80106e8:	e7ed      	b.n	80106c6 <_free_r+0x1e>
 80106ea:	461a      	mov	r2, r3
 80106ec:	685b      	ldr	r3, [r3, #4]
 80106ee:	b10b      	cbz	r3, 80106f4 <_free_r+0x4c>
 80106f0:	42a3      	cmp	r3, r4
 80106f2:	d9fa      	bls.n	80106ea <_free_r+0x42>
 80106f4:	6811      	ldr	r1, [r2, #0]
 80106f6:	1850      	adds	r0, r2, r1
 80106f8:	42a0      	cmp	r0, r4
 80106fa:	d10b      	bne.n	8010714 <_free_r+0x6c>
 80106fc:	6820      	ldr	r0, [r4, #0]
 80106fe:	4401      	add	r1, r0
 8010700:	1850      	adds	r0, r2, r1
 8010702:	4283      	cmp	r3, r0
 8010704:	6011      	str	r1, [r2, #0]
 8010706:	d1e0      	bne.n	80106ca <_free_r+0x22>
 8010708:	6818      	ldr	r0, [r3, #0]
 801070a:	685b      	ldr	r3, [r3, #4]
 801070c:	6053      	str	r3, [r2, #4]
 801070e:	4408      	add	r0, r1
 8010710:	6010      	str	r0, [r2, #0]
 8010712:	e7da      	b.n	80106ca <_free_r+0x22>
 8010714:	d902      	bls.n	801071c <_free_r+0x74>
 8010716:	230c      	movs	r3, #12
 8010718:	602b      	str	r3, [r5, #0]
 801071a:	e7d6      	b.n	80106ca <_free_r+0x22>
 801071c:	6820      	ldr	r0, [r4, #0]
 801071e:	1821      	adds	r1, r4, r0
 8010720:	428b      	cmp	r3, r1
 8010722:	bf04      	itt	eq
 8010724:	6819      	ldreq	r1, [r3, #0]
 8010726:	685b      	ldreq	r3, [r3, #4]
 8010728:	6063      	str	r3, [r4, #4]
 801072a:	bf04      	itt	eq
 801072c:	1809      	addeq	r1, r1, r0
 801072e:	6021      	streq	r1, [r4, #0]
 8010730:	6054      	str	r4, [r2, #4]
 8010732:	e7ca      	b.n	80106ca <_free_r+0x22>
 8010734:	bd38      	pop	{r3, r4, r5, pc}
 8010736:	bf00      	nop
 8010738:	20000ac4 	.word	0x20000ac4

0801073c <rshift>:
 801073c:	6903      	ldr	r3, [r0, #16]
 801073e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010742:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010746:	ea4f 1261 	mov.w	r2, r1, asr #5
 801074a:	f100 0414 	add.w	r4, r0, #20
 801074e:	dd45      	ble.n	80107dc <rshift+0xa0>
 8010750:	f011 011f 	ands.w	r1, r1, #31
 8010754:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010758:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801075c:	d10c      	bne.n	8010778 <rshift+0x3c>
 801075e:	f100 0710 	add.w	r7, r0, #16
 8010762:	4629      	mov	r1, r5
 8010764:	42b1      	cmp	r1, r6
 8010766:	d334      	bcc.n	80107d2 <rshift+0x96>
 8010768:	1a9b      	subs	r3, r3, r2
 801076a:	009b      	lsls	r3, r3, #2
 801076c:	1eea      	subs	r2, r5, #3
 801076e:	4296      	cmp	r6, r2
 8010770:	bf38      	it	cc
 8010772:	2300      	movcc	r3, #0
 8010774:	4423      	add	r3, r4
 8010776:	e015      	b.n	80107a4 <rshift+0x68>
 8010778:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801077c:	f1c1 0820 	rsb	r8, r1, #32
 8010780:	40cf      	lsrs	r7, r1
 8010782:	f105 0e04 	add.w	lr, r5, #4
 8010786:	46a1      	mov	r9, r4
 8010788:	4576      	cmp	r6, lr
 801078a:	46f4      	mov	ip, lr
 801078c:	d815      	bhi.n	80107ba <rshift+0x7e>
 801078e:	1a9a      	subs	r2, r3, r2
 8010790:	0092      	lsls	r2, r2, #2
 8010792:	3a04      	subs	r2, #4
 8010794:	3501      	adds	r5, #1
 8010796:	42ae      	cmp	r6, r5
 8010798:	bf38      	it	cc
 801079a:	2200      	movcc	r2, #0
 801079c:	18a3      	adds	r3, r4, r2
 801079e:	50a7      	str	r7, [r4, r2]
 80107a0:	b107      	cbz	r7, 80107a4 <rshift+0x68>
 80107a2:	3304      	adds	r3, #4
 80107a4:	1b1a      	subs	r2, r3, r4
 80107a6:	42a3      	cmp	r3, r4
 80107a8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80107ac:	bf08      	it	eq
 80107ae:	2300      	moveq	r3, #0
 80107b0:	6102      	str	r2, [r0, #16]
 80107b2:	bf08      	it	eq
 80107b4:	6143      	streq	r3, [r0, #20]
 80107b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80107ba:	f8dc c000 	ldr.w	ip, [ip]
 80107be:	fa0c fc08 	lsl.w	ip, ip, r8
 80107c2:	ea4c 0707 	orr.w	r7, ip, r7
 80107c6:	f849 7b04 	str.w	r7, [r9], #4
 80107ca:	f85e 7b04 	ldr.w	r7, [lr], #4
 80107ce:	40cf      	lsrs	r7, r1
 80107d0:	e7da      	b.n	8010788 <rshift+0x4c>
 80107d2:	f851 cb04 	ldr.w	ip, [r1], #4
 80107d6:	f847 cf04 	str.w	ip, [r7, #4]!
 80107da:	e7c3      	b.n	8010764 <rshift+0x28>
 80107dc:	4623      	mov	r3, r4
 80107de:	e7e1      	b.n	80107a4 <rshift+0x68>

080107e0 <__hexdig_fun>:
 80107e0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80107e4:	2b09      	cmp	r3, #9
 80107e6:	d802      	bhi.n	80107ee <__hexdig_fun+0xe>
 80107e8:	3820      	subs	r0, #32
 80107ea:	b2c0      	uxtb	r0, r0
 80107ec:	4770      	bx	lr
 80107ee:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80107f2:	2b05      	cmp	r3, #5
 80107f4:	d801      	bhi.n	80107fa <__hexdig_fun+0x1a>
 80107f6:	3847      	subs	r0, #71	@ 0x47
 80107f8:	e7f7      	b.n	80107ea <__hexdig_fun+0xa>
 80107fa:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80107fe:	2b05      	cmp	r3, #5
 8010800:	d801      	bhi.n	8010806 <__hexdig_fun+0x26>
 8010802:	3827      	subs	r0, #39	@ 0x27
 8010804:	e7f1      	b.n	80107ea <__hexdig_fun+0xa>
 8010806:	2000      	movs	r0, #0
 8010808:	4770      	bx	lr
	...

0801080c <__gethex>:
 801080c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010810:	b085      	sub	sp, #20
 8010812:	468a      	mov	sl, r1
 8010814:	9302      	str	r3, [sp, #8]
 8010816:	680b      	ldr	r3, [r1, #0]
 8010818:	9001      	str	r0, [sp, #4]
 801081a:	4690      	mov	r8, r2
 801081c:	1c9c      	adds	r4, r3, #2
 801081e:	46a1      	mov	r9, r4
 8010820:	f814 0b01 	ldrb.w	r0, [r4], #1
 8010824:	2830      	cmp	r0, #48	@ 0x30
 8010826:	d0fa      	beq.n	801081e <__gethex+0x12>
 8010828:	eba9 0303 	sub.w	r3, r9, r3
 801082c:	f1a3 0b02 	sub.w	fp, r3, #2
 8010830:	f7ff ffd6 	bl	80107e0 <__hexdig_fun>
 8010834:	4605      	mov	r5, r0
 8010836:	2800      	cmp	r0, #0
 8010838:	d168      	bne.n	801090c <__gethex+0x100>
 801083a:	49a0      	ldr	r1, [pc, #640]	@ (8010abc <__gethex+0x2b0>)
 801083c:	2201      	movs	r2, #1
 801083e:	4648      	mov	r0, r9
 8010840:	f7ff f83e 	bl	800f8c0 <strncmp>
 8010844:	4607      	mov	r7, r0
 8010846:	2800      	cmp	r0, #0
 8010848:	d167      	bne.n	801091a <__gethex+0x10e>
 801084a:	f899 0001 	ldrb.w	r0, [r9, #1]
 801084e:	4626      	mov	r6, r4
 8010850:	f7ff ffc6 	bl	80107e0 <__hexdig_fun>
 8010854:	2800      	cmp	r0, #0
 8010856:	d062      	beq.n	801091e <__gethex+0x112>
 8010858:	4623      	mov	r3, r4
 801085a:	7818      	ldrb	r0, [r3, #0]
 801085c:	2830      	cmp	r0, #48	@ 0x30
 801085e:	4699      	mov	r9, r3
 8010860:	f103 0301 	add.w	r3, r3, #1
 8010864:	d0f9      	beq.n	801085a <__gethex+0x4e>
 8010866:	f7ff ffbb 	bl	80107e0 <__hexdig_fun>
 801086a:	fab0 f580 	clz	r5, r0
 801086e:	096d      	lsrs	r5, r5, #5
 8010870:	f04f 0b01 	mov.w	fp, #1
 8010874:	464a      	mov	r2, r9
 8010876:	4616      	mov	r6, r2
 8010878:	3201      	adds	r2, #1
 801087a:	7830      	ldrb	r0, [r6, #0]
 801087c:	f7ff ffb0 	bl	80107e0 <__hexdig_fun>
 8010880:	2800      	cmp	r0, #0
 8010882:	d1f8      	bne.n	8010876 <__gethex+0x6a>
 8010884:	498d      	ldr	r1, [pc, #564]	@ (8010abc <__gethex+0x2b0>)
 8010886:	2201      	movs	r2, #1
 8010888:	4630      	mov	r0, r6
 801088a:	f7ff f819 	bl	800f8c0 <strncmp>
 801088e:	2800      	cmp	r0, #0
 8010890:	d13f      	bne.n	8010912 <__gethex+0x106>
 8010892:	b944      	cbnz	r4, 80108a6 <__gethex+0x9a>
 8010894:	1c74      	adds	r4, r6, #1
 8010896:	4622      	mov	r2, r4
 8010898:	4616      	mov	r6, r2
 801089a:	3201      	adds	r2, #1
 801089c:	7830      	ldrb	r0, [r6, #0]
 801089e:	f7ff ff9f 	bl	80107e0 <__hexdig_fun>
 80108a2:	2800      	cmp	r0, #0
 80108a4:	d1f8      	bne.n	8010898 <__gethex+0x8c>
 80108a6:	1ba4      	subs	r4, r4, r6
 80108a8:	00a7      	lsls	r7, r4, #2
 80108aa:	7833      	ldrb	r3, [r6, #0]
 80108ac:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80108b0:	2b50      	cmp	r3, #80	@ 0x50
 80108b2:	d13e      	bne.n	8010932 <__gethex+0x126>
 80108b4:	7873      	ldrb	r3, [r6, #1]
 80108b6:	2b2b      	cmp	r3, #43	@ 0x2b
 80108b8:	d033      	beq.n	8010922 <__gethex+0x116>
 80108ba:	2b2d      	cmp	r3, #45	@ 0x2d
 80108bc:	d034      	beq.n	8010928 <__gethex+0x11c>
 80108be:	1c71      	adds	r1, r6, #1
 80108c0:	2400      	movs	r4, #0
 80108c2:	7808      	ldrb	r0, [r1, #0]
 80108c4:	f7ff ff8c 	bl	80107e0 <__hexdig_fun>
 80108c8:	1e43      	subs	r3, r0, #1
 80108ca:	b2db      	uxtb	r3, r3
 80108cc:	2b18      	cmp	r3, #24
 80108ce:	d830      	bhi.n	8010932 <__gethex+0x126>
 80108d0:	f1a0 0210 	sub.w	r2, r0, #16
 80108d4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80108d8:	f7ff ff82 	bl	80107e0 <__hexdig_fun>
 80108dc:	f100 3cff 	add.w	ip, r0, #4294967295
 80108e0:	fa5f fc8c 	uxtb.w	ip, ip
 80108e4:	f1bc 0f18 	cmp.w	ip, #24
 80108e8:	f04f 030a 	mov.w	r3, #10
 80108ec:	d91e      	bls.n	801092c <__gethex+0x120>
 80108ee:	b104      	cbz	r4, 80108f2 <__gethex+0xe6>
 80108f0:	4252      	negs	r2, r2
 80108f2:	4417      	add	r7, r2
 80108f4:	f8ca 1000 	str.w	r1, [sl]
 80108f8:	b1ed      	cbz	r5, 8010936 <__gethex+0x12a>
 80108fa:	f1bb 0f00 	cmp.w	fp, #0
 80108fe:	bf0c      	ite	eq
 8010900:	2506      	moveq	r5, #6
 8010902:	2500      	movne	r5, #0
 8010904:	4628      	mov	r0, r5
 8010906:	b005      	add	sp, #20
 8010908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801090c:	2500      	movs	r5, #0
 801090e:	462c      	mov	r4, r5
 8010910:	e7b0      	b.n	8010874 <__gethex+0x68>
 8010912:	2c00      	cmp	r4, #0
 8010914:	d1c7      	bne.n	80108a6 <__gethex+0x9a>
 8010916:	4627      	mov	r7, r4
 8010918:	e7c7      	b.n	80108aa <__gethex+0x9e>
 801091a:	464e      	mov	r6, r9
 801091c:	462f      	mov	r7, r5
 801091e:	2501      	movs	r5, #1
 8010920:	e7c3      	b.n	80108aa <__gethex+0x9e>
 8010922:	2400      	movs	r4, #0
 8010924:	1cb1      	adds	r1, r6, #2
 8010926:	e7cc      	b.n	80108c2 <__gethex+0xb6>
 8010928:	2401      	movs	r4, #1
 801092a:	e7fb      	b.n	8010924 <__gethex+0x118>
 801092c:	fb03 0002 	mla	r0, r3, r2, r0
 8010930:	e7ce      	b.n	80108d0 <__gethex+0xc4>
 8010932:	4631      	mov	r1, r6
 8010934:	e7de      	b.n	80108f4 <__gethex+0xe8>
 8010936:	eba6 0309 	sub.w	r3, r6, r9
 801093a:	3b01      	subs	r3, #1
 801093c:	4629      	mov	r1, r5
 801093e:	2b07      	cmp	r3, #7
 8010940:	dc0a      	bgt.n	8010958 <__gethex+0x14c>
 8010942:	9801      	ldr	r0, [sp, #4]
 8010944:	f000 fafc 	bl	8010f40 <_Balloc>
 8010948:	4604      	mov	r4, r0
 801094a:	b940      	cbnz	r0, 801095e <__gethex+0x152>
 801094c:	4b5c      	ldr	r3, [pc, #368]	@ (8010ac0 <__gethex+0x2b4>)
 801094e:	4602      	mov	r2, r0
 8010950:	21e4      	movs	r1, #228	@ 0xe4
 8010952:	485c      	ldr	r0, [pc, #368]	@ (8010ac4 <__gethex+0x2b8>)
 8010954:	f001 fa5c 	bl	8011e10 <__assert_func>
 8010958:	3101      	adds	r1, #1
 801095a:	105b      	asrs	r3, r3, #1
 801095c:	e7ef      	b.n	801093e <__gethex+0x132>
 801095e:	f100 0a14 	add.w	sl, r0, #20
 8010962:	2300      	movs	r3, #0
 8010964:	4655      	mov	r5, sl
 8010966:	469b      	mov	fp, r3
 8010968:	45b1      	cmp	r9, r6
 801096a:	d337      	bcc.n	80109dc <__gethex+0x1d0>
 801096c:	f845 bb04 	str.w	fp, [r5], #4
 8010970:	eba5 050a 	sub.w	r5, r5, sl
 8010974:	10ad      	asrs	r5, r5, #2
 8010976:	6125      	str	r5, [r4, #16]
 8010978:	4658      	mov	r0, fp
 801097a:	f000 fbd3 	bl	8011124 <__hi0bits>
 801097e:	016d      	lsls	r5, r5, #5
 8010980:	f8d8 6000 	ldr.w	r6, [r8]
 8010984:	1a2d      	subs	r5, r5, r0
 8010986:	42b5      	cmp	r5, r6
 8010988:	dd54      	ble.n	8010a34 <__gethex+0x228>
 801098a:	1bad      	subs	r5, r5, r6
 801098c:	4629      	mov	r1, r5
 801098e:	4620      	mov	r0, r4
 8010990:	f000 ff67 	bl	8011862 <__any_on>
 8010994:	4681      	mov	r9, r0
 8010996:	b178      	cbz	r0, 80109b8 <__gethex+0x1ac>
 8010998:	1e6b      	subs	r3, r5, #1
 801099a:	1159      	asrs	r1, r3, #5
 801099c:	f003 021f 	and.w	r2, r3, #31
 80109a0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80109a4:	f04f 0901 	mov.w	r9, #1
 80109a8:	fa09 f202 	lsl.w	r2, r9, r2
 80109ac:	420a      	tst	r2, r1
 80109ae:	d003      	beq.n	80109b8 <__gethex+0x1ac>
 80109b0:	454b      	cmp	r3, r9
 80109b2:	dc36      	bgt.n	8010a22 <__gethex+0x216>
 80109b4:	f04f 0902 	mov.w	r9, #2
 80109b8:	4629      	mov	r1, r5
 80109ba:	4620      	mov	r0, r4
 80109bc:	f7ff febe 	bl	801073c <rshift>
 80109c0:	442f      	add	r7, r5
 80109c2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80109c6:	42bb      	cmp	r3, r7
 80109c8:	da42      	bge.n	8010a50 <__gethex+0x244>
 80109ca:	9801      	ldr	r0, [sp, #4]
 80109cc:	4621      	mov	r1, r4
 80109ce:	f000 faf7 	bl	8010fc0 <_Bfree>
 80109d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80109d4:	2300      	movs	r3, #0
 80109d6:	6013      	str	r3, [r2, #0]
 80109d8:	25a3      	movs	r5, #163	@ 0xa3
 80109da:	e793      	b.n	8010904 <__gethex+0xf8>
 80109dc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80109e0:	2a2e      	cmp	r2, #46	@ 0x2e
 80109e2:	d012      	beq.n	8010a0a <__gethex+0x1fe>
 80109e4:	2b20      	cmp	r3, #32
 80109e6:	d104      	bne.n	80109f2 <__gethex+0x1e6>
 80109e8:	f845 bb04 	str.w	fp, [r5], #4
 80109ec:	f04f 0b00 	mov.w	fp, #0
 80109f0:	465b      	mov	r3, fp
 80109f2:	7830      	ldrb	r0, [r6, #0]
 80109f4:	9303      	str	r3, [sp, #12]
 80109f6:	f7ff fef3 	bl	80107e0 <__hexdig_fun>
 80109fa:	9b03      	ldr	r3, [sp, #12]
 80109fc:	f000 000f 	and.w	r0, r0, #15
 8010a00:	4098      	lsls	r0, r3
 8010a02:	ea4b 0b00 	orr.w	fp, fp, r0
 8010a06:	3304      	adds	r3, #4
 8010a08:	e7ae      	b.n	8010968 <__gethex+0x15c>
 8010a0a:	45b1      	cmp	r9, r6
 8010a0c:	d8ea      	bhi.n	80109e4 <__gethex+0x1d8>
 8010a0e:	492b      	ldr	r1, [pc, #172]	@ (8010abc <__gethex+0x2b0>)
 8010a10:	9303      	str	r3, [sp, #12]
 8010a12:	2201      	movs	r2, #1
 8010a14:	4630      	mov	r0, r6
 8010a16:	f7fe ff53 	bl	800f8c0 <strncmp>
 8010a1a:	9b03      	ldr	r3, [sp, #12]
 8010a1c:	2800      	cmp	r0, #0
 8010a1e:	d1e1      	bne.n	80109e4 <__gethex+0x1d8>
 8010a20:	e7a2      	b.n	8010968 <__gethex+0x15c>
 8010a22:	1ea9      	subs	r1, r5, #2
 8010a24:	4620      	mov	r0, r4
 8010a26:	f000 ff1c 	bl	8011862 <__any_on>
 8010a2a:	2800      	cmp	r0, #0
 8010a2c:	d0c2      	beq.n	80109b4 <__gethex+0x1a8>
 8010a2e:	f04f 0903 	mov.w	r9, #3
 8010a32:	e7c1      	b.n	80109b8 <__gethex+0x1ac>
 8010a34:	da09      	bge.n	8010a4a <__gethex+0x23e>
 8010a36:	1b75      	subs	r5, r6, r5
 8010a38:	4621      	mov	r1, r4
 8010a3a:	9801      	ldr	r0, [sp, #4]
 8010a3c:	462a      	mov	r2, r5
 8010a3e:	f000 fcd7 	bl	80113f0 <__lshift>
 8010a42:	1b7f      	subs	r7, r7, r5
 8010a44:	4604      	mov	r4, r0
 8010a46:	f100 0a14 	add.w	sl, r0, #20
 8010a4a:	f04f 0900 	mov.w	r9, #0
 8010a4e:	e7b8      	b.n	80109c2 <__gethex+0x1b6>
 8010a50:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8010a54:	42bd      	cmp	r5, r7
 8010a56:	dd6f      	ble.n	8010b38 <__gethex+0x32c>
 8010a58:	1bed      	subs	r5, r5, r7
 8010a5a:	42ae      	cmp	r6, r5
 8010a5c:	dc34      	bgt.n	8010ac8 <__gethex+0x2bc>
 8010a5e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010a62:	2b02      	cmp	r3, #2
 8010a64:	d022      	beq.n	8010aac <__gethex+0x2a0>
 8010a66:	2b03      	cmp	r3, #3
 8010a68:	d024      	beq.n	8010ab4 <__gethex+0x2a8>
 8010a6a:	2b01      	cmp	r3, #1
 8010a6c:	d115      	bne.n	8010a9a <__gethex+0x28e>
 8010a6e:	42ae      	cmp	r6, r5
 8010a70:	d113      	bne.n	8010a9a <__gethex+0x28e>
 8010a72:	2e01      	cmp	r6, #1
 8010a74:	d10b      	bne.n	8010a8e <__gethex+0x282>
 8010a76:	9a02      	ldr	r2, [sp, #8]
 8010a78:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010a7c:	6013      	str	r3, [r2, #0]
 8010a7e:	2301      	movs	r3, #1
 8010a80:	6123      	str	r3, [r4, #16]
 8010a82:	f8ca 3000 	str.w	r3, [sl]
 8010a86:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010a88:	2562      	movs	r5, #98	@ 0x62
 8010a8a:	601c      	str	r4, [r3, #0]
 8010a8c:	e73a      	b.n	8010904 <__gethex+0xf8>
 8010a8e:	1e71      	subs	r1, r6, #1
 8010a90:	4620      	mov	r0, r4
 8010a92:	f000 fee6 	bl	8011862 <__any_on>
 8010a96:	2800      	cmp	r0, #0
 8010a98:	d1ed      	bne.n	8010a76 <__gethex+0x26a>
 8010a9a:	9801      	ldr	r0, [sp, #4]
 8010a9c:	4621      	mov	r1, r4
 8010a9e:	f000 fa8f 	bl	8010fc0 <_Bfree>
 8010aa2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010aa4:	2300      	movs	r3, #0
 8010aa6:	6013      	str	r3, [r2, #0]
 8010aa8:	2550      	movs	r5, #80	@ 0x50
 8010aaa:	e72b      	b.n	8010904 <__gethex+0xf8>
 8010aac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d1f3      	bne.n	8010a9a <__gethex+0x28e>
 8010ab2:	e7e0      	b.n	8010a76 <__gethex+0x26a>
 8010ab4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d1dd      	bne.n	8010a76 <__gethex+0x26a>
 8010aba:	e7ee      	b.n	8010a9a <__gethex+0x28e>
 8010abc:	08012840 	.word	0x08012840
 8010ac0:	08012955 	.word	0x08012955
 8010ac4:	08012966 	.word	0x08012966
 8010ac8:	1e6f      	subs	r7, r5, #1
 8010aca:	f1b9 0f00 	cmp.w	r9, #0
 8010ace:	d130      	bne.n	8010b32 <__gethex+0x326>
 8010ad0:	b127      	cbz	r7, 8010adc <__gethex+0x2d0>
 8010ad2:	4639      	mov	r1, r7
 8010ad4:	4620      	mov	r0, r4
 8010ad6:	f000 fec4 	bl	8011862 <__any_on>
 8010ada:	4681      	mov	r9, r0
 8010adc:	117a      	asrs	r2, r7, #5
 8010ade:	2301      	movs	r3, #1
 8010ae0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8010ae4:	f007 071f 	and.w	r7, r7, #31
 8010ae8:	40bb      	lsls	r3, r7
 8010aea:	4213      	tst	r3, r2
 8010aec:	4629      	mov	r1, r5
 8010aee:	4620      	mov	r0, r4
 8010af0:	bf18      	it	ne
 8010af2:	f049 0902 	orrne.w	r9, r9, #2
 8010af6:	f7ff fe21 	bl	801073c <rshift>
 8010afa:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8010afe:	1b76      	subs	r6, r6, r5
 8010b00:	2502      	movs	r5, #2
 8010b02:	f1b9 0f00 	cmp.w	r9, #0
 8010b06:	d047      	beq.n	8010b98 <__gethex+0x38c>
 8010b08:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010b0c:	2b02      	cmp	r3, #2
 8010b0e:	d015      	beq.n	8010b3c <__gethex+0x330>
 8010b10:	2b03      	cmp	r3, #3
 8010b12:	d017      	beq.n	8010b44 <__gethex+0x338>
 8010b14:	2b01      	cmp	r3, #1
 8010b16:	d109      	bne.n	8010b2c <__gethex+0x320>
 8010b18:	f019 0f02 	tst.w	r9, #2
 8010b1c:	d006      	beq.n	8010b2c <__gethex+0x320>
 8010b1e:	f8da 3000 	ldr.w	r3, [sl]
 8010b22:	ea49 0903 	orr.w	r9, r9, r3
 8010b26:	f019 0f01 	tst.w	r9, #1
 8010b2a:	d10e      	bne.n	8010b4a <__gethex+0x33e>
 8010b2c:	f045 0510 	orr.w	r5, r5, #16
 8010b30:	e032      	b.n	8010b98 <__gethex+0x38c>
 8010b32:	f04f 0901 	mov.w	r9, #1
 8010b36:	e7d1      	b.n	8010adc <__gethex+0x2d0>
 8010b38:	2501      	movs	r5, #1
 8010b3a:	e7e2      	b.n	8010b02 <__gethex+0x2f6>
 8010b3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010b3e:	f1c3 0301 	rsb	r3, r3, #1
 8010b42:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010b44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d0f0      	beq.n	8010b2c <__gethex+0x320>
 8010b4a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010b4e:	f104 0314 	add.w	r3, r4, #20
 8010b52:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8010b56:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010b5a:	f04f 0c00 	mov.w	ip, #0
 8010b5e:	4618      	mov	r0, r3
 8010b60:	f853 2b04 	ldr.w	r2, [r3], #4
 8010b64:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010b68:	d01b      	beq.n	8010ba2 <__gethex+0x396>
 8010b6a:	3201      	adds	r2, #1
 8010b6c:	6002      	str	r2, [r0, #0]
 8010b6e:	2d02      	cmp	r5, #2
 8010b70:	f104 0314 	add.w	r3, r4, #20
 8010b74:	d13c      	bne.n	8010bf0 <__gethex+0x3e4>
 8010b76:	f8d8 2000 	ldr.w	r2, [r8]
 8010b7a:	3a01      	subs	r2, #1
 8010b7c:	42b2      	cmp	r2, r6
 8010b7e:	d109      	bne.n	8010b94 <__gethex+0x388>
 8010b80:	1171      	asrs	r1, r6, #5
 8010b82:	2201      	movs	r2, #1
 8010b84:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010b88:	f006 061f 	and.w	r6, r6, #31
 8010b8c:	fa02 f606 	lsl.w	r6, r2, r6
 8010b90:	421e      	tst	r6, r3
 8010b92:	d13a      	bne.n	8010c0a <__gethex+0x3fe>
 8010b94:	f045 0520 	orr.w	r5, r5, #32
 8010b98:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010b9a:	601c      	str	r4, [r3, #0]
 8010b9c:	9b02      	ldr	r3, [sp, #8]
 8010b9e:	601f      	str	r7, [r3, #0]
 8010ba0:	e6b0      	b.n	8010904 <__gethex+0xf8>
 8010ba2:	4299      	cmp	r1, r3
 8010ba4:	f843 cc04 	str.w	ip, [r3, #-4]
 8010ba8:	d8d9      	bhi.n	8010b5e <__gethex+0x352>
 8010baa:	68a3      	ldr	r3, [r4, #8]
 8010bac:	459b      	cmp	fp, r3
 8010bae:	db17      	blt.n	8010be0 <__gethex+0x3d4>
 8010bb0:	6861      	ldr	r1, [r4, #4]
 8010bb2:	9801      	ldr	r0, [sp, #4]
 8010bb4:	3101      	adds	r1, #1
 8010bb6:	f000 f9c3 	bl	8010f40 <_Balloc>
 8010bba:	4681      	mov	r9, r0
 8010bbc:	b918      	cbnz	r0, 8010bc6 <__gethex+0x3ba>
 8010bbe:	4b1a      	ldr	r3, [pc, #104]	@ (8010c28 <__gethex+0x41c>)
 8010bc0:	4602      	mov	r2, r0
 8010bc2:	2184      	movs	r1, #132	@ 0x84
 8010bc4:	e6c5      	b.n	8010952 <__gethex+0x146>
 8010bc6:	6922      	ldr	r2, [r4, #16]
 8010bc8:	3202      	adds	r2, #2
 8010bca:	f104 010c 	add.w	r1, r4, #12
 8010bce:	0092      	lsls	r2, r2, #2
 8010bd0:	300c      	adds	r0, #12
 8010bd2:	f7fe fefe 	bl	800f9d2 <memcpy>
 8010bd6:	4621      	mov	r1, r4
 8010bd8:	9801      	ldr	r0, [sp, #4]
 8010bda:	f000 f9f1 	bl	8010fc0 <_Bfree>
 8010bde:	464c      	mov	r4, r9
 8010be0:	6923      	ldr	r3, [r4, #16]
 8010be2:	1c5a      	adds	r2, r3, #1
 8010be4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010be8:	6122      	str	r2, [r4, #16]
 8010bea:	2201      	movs	r2, #1
 8010bec:	615a      	str	r2, [r3, #20]
 8010bee:	e7be      	b.n	8010b6e <__gethex+0x362>
 8010bf0:	6922      	ldr	r2, [r4, #16]
 8010bf2:	455a      	cmp	r2, fp
 8010bf4:	dd0b      	ble.n	8010c0e <__gethex+0x402>
 8010bf6:	2101      	movs	r1, #1
 8010bf8:	4620      	mov	r0, r4
 8010bfa:	f7ff fd9f 	bl	801073c <rshift>
 8010bfe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010c02:	3701      	adds	r7, #1
 8010c04:	42bb      	cmp	r3, r7
 8010c06:	f6ff aee0 	blt.w	80109ca <__gethex+0x1be>
 8010c0a:	2501      	movs	r5, #1
 8010c0c:	e7c2      	b.n	8010b94 <__gethex+0x388>
 8010c0e:	f016 061f 	ands.w	r6, r6, #31
 8010c12:	d0fa      	beq.n	8010c0a <__gethex+0x3fe>
 8010c14:	4453      	add	r3, sl
 8010c16:	f1c6 0620 	rsb	r6, r6, #32
 8010c1a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8010c1e:	f000 fa81 	bl	8011124 <__hi0bits>
 8010c22:	42b0      	cmp	r0, r6
 8010c24:	dbe7      	blt.n	8010bf6 <__gethex+0x3ea>
 8010c26:	e7f0      	b.n	8010c0a <__gethex+0x3fe>
 8010c28:	08012955 	.word	0x08012955

08010c2c <L_shift>:
 8010c2c:	f1c2 0208 	rsb	r2, r2, #8
 8010c30:	0092      	lsls	r2, r2, #2
 8010c32:	b570      	push	{r4, r5, r6, lr}
 8010c34:	f1c2 0620 	rsb	r6, r2, #32
 8010c38:	6843      	ldr	r3, [r0, #4]
 8010c3a:	6804      	ldr	r4, [r0, #0]
 8010c3c:	fa03 f506 	lsl.w	r5, r3, r6
 8010c40:	432c      	orrs	r4, r5
 8010c42:	40d3      	lsrs	r3, r2
 8010c44:	6004      	str	r4, [r0, #0]
 8010c46:	f840 3f04 	str.w	r3, [r0, #4]!
 8010c4a:	4288      	cmp	r0, r1
 8010c4c:	d3f4      	bcc.n	8010c38 <L_shift+0xc>
 8010c4e:	bd70      	pop	{r4, r5, r6, pc}

08010c50 <__match>:
 8010c50:	b530      	push	{r4, r5, lr}
 8010c52:	6803      	ldr	r3, [r0, #0]
 8010c54:	3301      	adds	r3, #1
 8010c56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010c5a:	b914      	cbnz	r4, 8010c62 <__match+0x12>
 8010c5c:	6003      	str	r3, [r0, #0]
 8010c5e:	2001      	movs	r0, #1
 8010c60:	bd30      	pop	{r4, r5, pc}
 8010c62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010c66:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8010c6a:	2d19      	cmp	r5, #25
 8010c6c:	bf98      	it	ls
 8010c6e:	3220      	addls	r2, #32
 8010c70:	42a2      	cmp	r2, r4
 8010c72:	d0f0      	beq.n	8010c56 <__match+0x6>
 8010c74:	2000      	movs	r0, #0
 8010c76:	e7f3      	b.n	8010c60 <__match+0x10>

08010c78 <__hexnan>:
 8010c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c7c:	680b      	ldr	r3, [r1, #0]
 8010c7e:	6801      	ldr	r1, [r0, #0]
 8010c80:	115e      	asrs	r6, r3, #5
 8010c82:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010c86:	f013 031f 	ands.w	r3, r3, #31
 8010c8a:	b087      	sub	sp, #28
 8010c8c:	bf18      	it	ne
 8010c8e:	3604      	addne	r6, #4
 8010c90:	2500      	movs	r5, #0
 8010c92:	1f37      	subs	r7, r6, #4
 8010c94:	4682      	mov	sl, r0
 8010c96:	4690      	mov	r8, r2
 8010c98:	9301      	str	r3, [sp, #4]
 8010c9a:	f846 5c04 	str.w	r5, [r6, #-4]
 8010c9e:	46b9      	mov	r9, r7
 8010ca0:	463c      	mov	r4, r7
 8010ca2:	9502      	str	r5, [sp, #8]
 8010ca4:	46ab      	mov	fp, r5
 8010ca6:	784a      	ldrb	r2, [r1, #1]
 8010ca8:	1c4b      	adds	r3, r1, #1
 8010caa:	9303      	str	r3, [sp, #12]
 8010cac:	b342      	cbz	r2, 8010d00 <__hexnan+0x88>
 8010cae:	4610      	mov	r0, r2
 8010cb0:	9105      	str	r1, [sp, #20]
 8010cb2:	9204      	str	r2, [sp, #16]
 8010cb4:	f7ff fd94 	bl	80107e0 <__hexdig_fun>
 8010cb8:	2800      	cmp	r0, #0
 8010cba:	d151      	bne.n	8010d60 <__hexnan+0xe8>
 8010cbc:	9a04      	ldr	r2, [sp, #16]
 8010cbe:	9905      	ldr	r1, [sp, #20]
 8010cc0:	2a20      	cmp	r2, #32
 8010cc2:	d818      	bhi.n	8010cf6 <__hexnan+0x7e>
 8010cc4:	9b02      	ldr	r3, [sp, #8]
 8010cc6:	459b      	cmp	fp, r3
 8010cc8:	dd13      	ble.n	8010cf2 <__hexnan+0x7a>
 8010cca:	454c      	cmp	r4, r9
 8010ccc:	d206      	bcs.n	8010cdc <__hexnan+0x64>
 8010cce:	2d07      	cmp	r5, #7
 8010cd0:	dc04      	bgt.n	8010cdc <__hexnan+0x64>
 8010cd2:	462a      	mov	r2, r5
 8010cd4:	4649      	mov	r1, r9
 8010cd6:	4620      	mov	r0, r4
 8010cd8:	f7ff ffa8 	bl	8010c2c <L_shift>
 8010cdc:	4544      	cmp	r4, r8
 8010cde:	d952      	bls.n	8010d86 <__hexnan+0x10e>
 8010ce0:	2300      	movs	r3, #0
 8010ce2:	f1a4 0904 	sub.w	r9, r4, #4
 8010ce6:	f844 3c04 	str.w	r3, [r4, #-4]
 8010cea:	f8cd b008 	str.w	fp, [sp, #8]
 8010cee:	464c      	mov	r4, r9
 8010cf0:	461d      	mov	r5, r3
 8010cf2:	9903      	ldr	r1, [sp, #12]
 8010cf4:	e7d7      	b.n	8010ca6 <__hexnan+0x2e>
 8010cf6:	2a29      	cmp	r2, #41	@ 0x29
 8010cf8:	d157      	bne.n	8010daa <__hexnan+0x132>
 8010cfa:	3102      	adds	r1, #2
 8010cfc:	f8ca 1000 	str.w	r1, [sl]
 8010d00:	f1bb 0f00 	cmp.w	fp, #0
 8010d04:	d051      	beq.n	8010daa <__hexnan+0x132>
 8010d06:	454c      	cmp	r4, r9
 8010d08:	d206      	bcs.n	8010d18 <__hexnan+0xa0>
 8010d0a:	2d07      	cmp	r5, #7
 8010d0c:	dc04      	bgt.n	8010d18 <__hexnan+0xa0>
 8010d0e:	462a      	mov	r2, r5
 8010d10:	4649      	mov	r1, r9
 8010d12:	4620      	mov	r0, r4
 8010d14:	f7ff ff8a 	bl	8010c2c <L_shift>
 8010d18:	4544      	cmp	r4, r8
 8010d1a:	d936      	bls.n	8010d8a <__hexnan+0x112>
 8010d1c:	f1a8 0204 	sub.w	r2, r8, #4
 8010d20:	4623      	mov	r3, r4
 8010d22:	f853 1b04 	ldr.w	r1, [r3], #4
 8010d26:	f842 1f04 	str.w	r1, [r2, #4]!
 8010d2a:	429f      	cmp	r7, r3
 8010d2c:	d2f9      	bcs.n	8010d22 <__hexnan+0xaa>
 8010d2e:	1b3b      	subs	r3, r7, r4
 8010d30:	f023 0303 	bic.w	r3, r3, #3
 8010d34:	3304      	adds	r3, #4
 8010d36:	3401      	adds	r4, #1
 8010d38:	3e03      	subs	r6, #3
 8010d3a:	42b4      	cmp	r4, r6
 8010d3c:	bf88      	it	hi
 8010d3e:	2304      	movhi	r3, #4
 8010d40:	4443      	add	r3, r8
 8010d42:	2200      	movs	r2, #0
 8010d44:	f843 2b04 	str.w	r2, [r3], #4
 8010d48:	429f      	cmp	r7, r3
 8010d4a:	d2fb      	bcs.n	8010d44 <__hexnan+0xcc>
 8010d4c:	683b      	ldr	r3, [r7, #0]
 8010d4e:	b91b      	cbnz	r3, 8010d58 <__hexnan+0xe0>
 8010d50:	4547      	cmp	r7, r8
 8010d52:	d128      	bne.n	8010da6 <__hexnan+0x12e>
 8010d54:	2301      	movs	r3, #1
 8010d56:	603b      	str	r3, [r7, #0]
 8010d58:	2005      	movs	r0, #5
 8010d5a:	b007      	add	sp, #28
 8010d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d60:	3501      	adds	r5, #1
 8010d62:	2d08      	cmp	r5, #8
 8010d64:	f10b 0b01 	add.w	fp, fp, #1
 8010d68:	dd06      	ble.n	8010d78 <__hexnan+0x100>
 8010d6a:	4544      	cmp	r4, r8
 8010d6c:	d9c1      	bls.n	8010cf2 <__hexnan+0x7a>
 8010d6e:	2300      	movs	r3, #0
 8010d70:	f844 3c04 	str.w	r3, [r4, #-4]
 8010d74:	2501      	movs	r5, #1
 8010d76:	3c04      	subs	r4, #4
 8010d78:	6822      	ldr	r2, [r4, #0]
 8010d7a:	f000 000f 	and.w	r0, r0, #15
 8010d7e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8010d82:	6020      	str	r0, [r4, #0]
 8010d84:	e7b5      	b.n	8010cf2 <__hexnan+0x7a>
 8010d86:	2508      	movs	r5, #8
 8010d88:	e7b3      	b.n	8010cf2 <__hexnan+0x7a>
 8010d8a:	9b01      	ldr	r3, [sp, #4]
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d0dd      	beq.n	8010d4c <__hexnan+0xd4>
 8010d90:	f1c3 0320 	rsb	r3, r3, #32
 8010d94:	f04f 32ff 	mov.w	r2, #4294967295
 8010d98:	40da      	lsrs	r2, r3
 8010d9a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8010d9e:	4013      	ands	r3, r2
 8010da0:	f846 3c04 	str.w	r3, [r6, #-4]
 8010da4:	e7d2      	b.n	8010d4c <__hexnan+0xd4>
 8010da6:	3f04      	subs	r7, #4
 8010da8:	e7d0      	b.n	8010d4c <__hexnan+0xd4>
 8010daa:	2004      	movs	r0, #4
 8010dac:	e7d5      	b.n	8010d5a <__hexnan+0xe2>
	...

08010db0 <malloc>:
 8010db0:	4b02      	ldr	r3, [pc, #8]	@ (8010dbc <malloc+0xc>)
 8010db2:	4601      	mov	r1, r0
 8010db4:	6818      	ldr	r0, [r3, #0]
 8010db6:	f000 b825 	b.w	8010e04 <_malloc_r>
 8010dba:	bf00      	nop
 8010dbc:	20000208 	.word	0x20000208

08010dc0 <sbrk_aligned>:
 8010dc0:	b570      	push	{r4, r5, r6, lr}
 8010dc2:	4e0f      	ldr	r6, [pc, #60]	@ (8010e00 <sbrk_aligned+0x40>)
 8010dc4:	460c      	mov	r4, r1
 8010dc6:	6831      	ldr	r1, [r6, #0]
 8010dc8:	4605      	mov	r5, r0
 8010dca:	b911      	cbnz	r1, 8010dd2 <sbrk_aligned+0x12>
 8010dcc:	f001 f810 	bl	8011df0 <_sbrk_r>
 8010dd0:	6030      	str	r0, [r6, #0]
 8010dd2:	4621      	mov	r1, r4
 8010dd4:	4628      	mov	r0, r5
 8010dd6:	f001 f80b 	bl	8011df0 <_sbrk_r>
 8010dda:	1c43      	adds	r3, r0, #1
 8010ddc:	d103      	bne.n	8010de6 <sbrk_aligned+0x26>
 8010dde:	f04f 34ff 	mov.w	r4, #4294967295
 8010de2:	4620      	mov	r0, r4
 8010de4:	bd70      	pop	{r4, r5, r6, pc}
 8010de6:	1cc4      	adds	r4, r0, #3
 8010de8:	f024 0403 	bic.w	r4, r4, #3
 8010dec:	42a0      	cmp	r0, r4
 8010dee:	d0f8      	beq.n	8010de2 <sbrk_aligned+0x22>
 8010df0:	1a21      	subs	r1, r4, r0
 8010df2:	4628      	mov	r0, r5
 8010df4:	f000 fffc 	bl	8011df0 <_sbrk_r>
 8010df8:	3001      	adds	r0, #1
 8010dfa:	d1f2      	bne.n	8010de2 <sbrk_aligned+0x22>
 8010dfc:	e7ef      	b.n	8010dde <sbrk_aligned+0x1e>
 8010dfe:	bf00      	nop
 8010e00:	20000ac0 	.word	0x20000ac0

08010e04 <_malloc_r>:
 8010e04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010e08:	1ccd      	adds	r5, r1, #3
 8010e0a:	f025 0503 	bic.w	r5, r5, #3
 8010e0e:	3508      	adds	r5, #8
 8010e10:	2d0c      	cmp	r5, #12
 8010e12:	bf38      	it	cc
 8010e14:	250c      	movcc	r5, #12
 8010e16:	2d00      	cmp	r5, #0
 8010e18:	4606      	mov	r6, r0
 8010e1a:	db01      	blt.n	8010e20 <_malloc_r+0x1c>
 8010e1c:	42a9      	cmp	r1, r5
 8010e1e:	d904      	bls.n	8010e2a <_malloc_r+0x26>
 8010e20:	230c      	movs	r3, #12
 8010e22:	6033      	str	r3, [r6, #0]
 8010e24:	2000      	movs	r0, #0
 8010e26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010e2a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010f00 <_malloc_r+0xfc>
 8010e2e:	f000 f87b 	bl	8010f28 <__malloc_lock>
 8010e32:	f8d8 3000 	ldr.w	r3, [r8]
 8010e36:	461c      	mov	r4, r3
 8010e38:	bb44      	cbnz	r4, 8010e8c <_malloc_r+0x88>
 8010e3a:	4629      	mov	r1, r5
 8010e3c:	4630      	mov	r0, r6
 8010e3e:	f7ff ffbf 	bl	8010dc0 <sbrk_aligned>
 8010e42:	1c43      	adds	r3, r0, #1
 8010e44:	4604      	mov	r4, r0
 8010e46:	d158      	bne.n	8010efa <_malloc_r+0xf6>
 8010e48:	f8d8 4000 	ldr.w	r4, [r8]
 8010e4c:	4627      	mov	r7, r4
 8010e4e:	2f00      	cmp	r7, #0
 8010e50:	d143      	bne.n	8010eda <_malloc_r+0xd6>
 8010e52:	2c00      	cmp	r4, #0
 8010e54:	d04b      	beq.n	8010eee <_malloc_r+0xea>
 8010e56:	6823      	ldr	r3, [r4, #0]
 8010e58:	4639      	mov	r1, r7
 8010e5a:	4630      	mov	r0, r6
 8010e5c:	eb04 0903 	add.w	r9, r4, r3
 8010e60:	f000 ffc6 	bl	8011df0 <_sbrk_r>
 8010e64:	4581      	cmp	r9, r0
 8010e66:	d142      	bne.n	8010eee <_malloc_r+0xea>
 8010e68:	6821      	ldr	r1, [r4, #0]
 8010e6a:	1a6d      	subs	r5, r5, r1
 8010e6c:	4629      	mov	r1, r5
 8010e6e:	4630      	mov	r0, r6
 8010e70:	f7ff ffa6 	bl	8010dc0 <sbrk_aligned>
 8010e74:	3001      	adds	r0, #1
 8010e76:	d03a      	beq.n	8010eee <_malloc_r+0xea>
 8010e78:	6823      	ldr	r3, [r4, #0]
 8010e7a:	442b      	add	r3, r5
 8010e7c:	6023      	str	r3, [r4, #0]
 8010e7e:	f8d8 3000 	ldr.w	r3, [r8]
 8010e82:	685a      	ldr	r2, [r3, #4]
 8010e84:	bb62      	cbnz	r2, 8010ee0 <_malloc_r+0xdc>
 8010e86:	f8c8 7000 	str.w	r7, [r8]
 8010e8a:	e00f      	b.n	8010eac <_malloc_r+0xa8>
 8010e8c:	6822      	ldr	r2, [r4, #0]
 8010e8e:	1b52      	subs	r2, r2, r5
 8010e90:	d420      	bmi.n	8010ed4 <_malloc_r+0xd0>
 8010e92:	2a0b      	cmp	r2, #11
 8010e94:	d917      	bls.n	8010ec6 <_malloc_r+0xc2>
 8010e96:	1961      	adds	r1, r4, r5
 8010e98:	42a3      	cmp	r3, r4
 8010e9a:	6025      	str	r5, [r4, #0]
 8010e9c:	bf18      	it	ne
 8010e9e:	6059      	strne	r1, [r3, #4]
 8010ea0:	6863      	ldr	r3, [r4, #4]
 8010ea2:	bf08      	it	eq
 8010ea4:	f8c8 1000 	streq.w	r1, [r8]
 8010ea8:	5162      	str	r2, [r4, r5]
 8010eaa:	604b      	str	r3, [r1, #4]
 8010eac:	4630      	mov	r0, r6
 8010eae:	f000 f841 	bl	8010f34 <__malloc_unlock>
 8010eb2:	f104 000b 	add.w	r0, r4, #11
 8010eb6:	1d23      	adds	r3, r4, #4
 8010eb8:	f020 0007 	bic.w	r0, r0, #7
 8010ebc:	1ac2      	subs	r2, r0, r3
 8010ebe:	bf1c      	itt	ne
 8010ec0:	1a1b      	subne	r3, r3, r0
 8010ec2:	50a3      	strne	r3, [r4, r2]
 8010ec4:	e7af      	b.n	8010e26 <_malloc_r+0x22>
 8010ec6:	6862      	ldr	r2, [r4, #4]
 8010ec8:	42a3      	cmp	r3, r4
 8010eca:	bf0c      	ite	eq
 8010ecc:	f8c8 2000 	streq.w	r2, [r8]
 8010ed0:	605a      	strne	r2, [r3, #4]
 8010ed2:	e7eb      	b.n	8010eac <_malloc_r+0xa8>
 8010ed4:	4623      	mov	r3, r4
 8010ed6:	6864      	ldr	r4, [r4, #4]
 8010ed8:	e7ae      	b.n	8010e38 <_malloc_r+0x34>
 8010eda:	463c      	mov	r4, r7
 8010edc:	687f      	ldr	r7, [r7, #4]
 8010ede:	e7b6      	b.n	8010e4e <_malloc_r+0x4a>
 8010ee0:	461a      	mov	r2, r3
 8010ee2:	685b      	ldr	r3, [r3, #4]
 8010ee4:	42a3      	cmp	r3, r4
 8010ee6:	d1fb      	bne.n	8010ee0 <_malloc_r+0xdc>
 8010ee8:	2300      	movs	r3, #0
 8010eea:	6053      	str	r3, [r2, #4]
 8010eec:	e7de      	b.n	8010eac <_malloc_r+0xa8>
 8010eee:	230c      	movs	r3, #12
 8010ef0:	6033      	str	r3, [r6, #0]
 8010ef2:	4630      	mov	r0, r6
 8010ef4:	f000 f81e 	bl	8010f34 <__malloc_unlock>
 8010ef8:	e794      	b.n	8010e24 <_malloc_r+0x20>
 8010efa:	6005      	str	r5, [r0, #0]
 8010efc:	e7d6      	b.n	8010eac <_malloc_r+0xa8>
 8010efe:	bf00      	nop
 8010f00:	20000ac4 	.word	0x20000ac4

08010f04 <__ascii_mbtowc>:
 8010f04:	b082      	sub	sp, #8
 8010f06:	b901      	cbnz	r1, 8010f0a <__ascii_mbtowc+0x6>
 8010f08:	a901      	add	r1, sp, #4
 8010f0a:	b142      	cbz	r2, 8010f1e <__ascii_mbtowc+0x1a>
 8010f0c:	b14b      	cbz	r3, 8010f22 <__ascii_mbtowc+0x1e>
 8010f0e:	7813      	ldrb	r3, [r2, #0]
 8010f10:	600b      	str	r3, [r1, #0]
 8010f12:	7812      	ldrb	r2, [r2, #0]
 8010f14:	1e10      	subs	r0, r2, #0
 8010f16:	bf18      	it	ne
 8010f18:	2001      	movne	r0, #1
 8010f1a:	b002      	add	sp, #8
 8010f1c:	4770      	bx	lr
 8010f1e:	4610      	mov	r0, r2
 8010f20:	e7fb      	b.n	8010f1a <__ascii_mbtowc+0x16>
 8010f22:	f06f 0001 	mvn.w	r0, #1
 8010f26:	e7f8      	b.n	8010f1a <__ascii_mbtowc+0x16>

08010f28 <__malloc_lock>:
 8010f28:	4801      	ldr	r0, [pc, #4]	@ (8010f30 <__malloc_lock+0x8>)
 8010f2a:	f7fe bd50 	b.w	800f9ce <__retarget_lock_acquire_recursive>
 8010f2e:	bf00      	nop
 8010f30:	20000abc 	.word	0x20000abc

08010f34 <__malloc_unlock>:
 8010f34:	4801      	ldr	r0, [pc, #4]	@ (8010f3c <__malloc_unlock+0x8>)
 8010f36:	f7fe bd4b 	b.w	800f9d0 <__retarget_lock_release_recursive>
 8010f3a:	bf00      	nop
 8010f3c:	20000abc 	.word	0x20000abc

08010f40 <_Balloc>:
 8010f40:	b570      	push	{r4, r5, r6, lr}
 8010f42:	69c6      	ldr	r6, [r0, #28]
 8010f44:	4604      	mov	r4, r0
 8010f46:	460d      	mov	r5, r1
 8010f48:	b976      	cbnz	r6, 8010f68 <_Balloc+0x28>
 8010f4a:	2010      	movs	r0, #16
 8010f4c:	f7ff ff30 	bl	8010db0 <malloc>
 8010f50:	4602      	mov	r2, r0
 8010f52:	61e0      	str	r0, [r4, #28]
 8010f54:	b920      	cbnz	r0, 8010f60 <_Balloc+0x20>
 8010f56:	4b18      	ldr	r3, [pc, #96]	@ (8010fb8 <_Balloc+0x78>)
 8010f58:	4818      	ldr	r0, [pc, #96]	@ (8010fbc <_Balloc+0x7c>)
 8010f5a:	216b      	movs	r1, #107	@ 0x6b
 8010f5c:	f000 ff58 	bl	8011e10 <__assert_func>
 8010f60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010f64:	6006      	str	r6, [r0, #0]
 8010f66:	60c6      	str	r6, [r0, #12]
 8010f68:	69e6      	ldr	r6, [r4, #28]
 8010f6a:	68f3      	ldr	r3, [r6, #12]
 8010f6c:	b183      	cbz	r3, 8010f90 <_Balloc+0x50>
 8010f6e:	69e3      	ldr	r3, [r4, #28]
 8010f70:	68db      	ldr	r3, [r3, #12]
 8010f72:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010f76:	b9b8      	cbnz	r0, 8010fa8 <_Balloc+0x68>
 8010f78:	2101      	movs	r1, #1
 8010f7a:	fa01 f605 	lsl.w	r6, r1, r5
 8010f7e:	1d72      	adds	r2, r6, #5
 8010f80:	0092      	lsls	r2, r2, #2
 8010f82:	4620      	mov	r0, r4
 8010f84:	f000 ff62 	bl	8011e4c <_calloc_r>
 8010f88:	b160      	cbz	r0, 8010fa4 <_Balloc+0x64>
 8010f8a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010f8e:	e00e      	b.n	8010fae <_Balloc+0x6e>
 8010f90:	2221      	movs	r2, #33	@ 0x21
 8010f92:	2104      	movs	r1, #4
 8010f94:	4620      	mov	r0, r4
 8010f96:	f000 ff59 	bl	8011e4c <_calloc_r>
 8010f9a:	69e3      	ldr	r3, [r4, #28]
 8010f9c:	60f0      	str	r0, [r6, #12]
 8010f9e:	68db      	ldr	r3, [r3, #12]
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d1e4      	bne.n	8010f6e <_Balloc+0x2e>
 8010fa4:	2000      	movs	r0, #0
 8010fa6:	bd70      	pop	{r4, r5, r6, pc}
 8010fa8:	6802      	ldr	r2, [r0, #0]
 8010faa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010fae:	2300      	movs	r3, #0
 8010fb0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010fb4:	e7f7      	b.n	8010fa6 <_Balloc+0x66>
 8010fb6:	bf00      	nop
 8010fb8:	080128e6 	.word	0x080128e6
 8010fbc:	080129c6 	.word	0x080129c6

08010fc0 <_Bfree>:
 8010fc0:	b570      	push	{r4, r5, r6, lr}
 8010fc2:	69c6      	ldr	r6, [r0, #28]
 8010fc4:	4605      	mov	r5, r0
 8010fc6:	460c      	mov	r4, r1
 8010fc8:	b976      	cbnz	r6, 8010fe8 <_Bfree+0x28>
 8010fca:	2010      	movs	r0, #16
 8010fcc:	f7ff fef0 	bl	8010db0 <malloc>
 8010fd0:	4602      	mov	r2, r0
 8010fd2:	61e8      	str	r0, [r5, #28]
 8010fd4:	b920      	cbnz	r0, 8010fe0 <_Bfree+0x20>
 8010fd6:	4b09      	ldr	r3, [pc, #36]	@ (8010ffc <_Bfree+0x3c>)
 8010fd8:	4809      	ldr	r0, [pc, #36]	@ (8011000 <_Bfree+0x40>)
 8010fda:	218f      	movs	r1, #143	@ 0x8f
 8010fdc:	f000 ff18 	bl	8011e10 <__assert_func>
 8010fe0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010fe4:	6006      	str	r6, [r0, #0]
 8010fe6:	60c6      	str	r6, [r0, #12]
 8010fe8:	b13c      	cbz	r4, 8010ffa <_Bfree+0x3a>
 8010fea:	69eb      	ldr	r3, [r5, #28]
 8010fec:	6862      	ldr	r2, [r4, #4]
 8010fee:	68db      	ldr	r3, [r3, #12]
 8010ff0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010ff4:	6021      	str	r1, [r4, #0]
 8010ff6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010ffa:	bd70      	pop	{r4, r5, r6, pc}
 8010ffc:	080128e6 	.word	0x080128e6
 8011000:	080129c6 	.word	0x080129c6

08011004 <__multadd>:
 8011004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011008:	690d      	ldr	r5, [r1, #16]
 801100a:	4607      	mov	r7, r0
 801100c:	460c      	mov	r4, r1
 801100e:	461e      	mov	r6, r3
 8011010:	f101 0c14 	add.w	ip, r1, #20
 8011014:	2000      	movs	r0, #0
 8011016:	f8dc 3000 	ldr.w	r3, [ip]
 801101a:	b299      	uxth	r1, r3
 801101c:	fb02 6101 	mla	r1, r2, r1, r6
 8011020:	0c1e      	lsrs	r6, r3, #16
 8011022:	0c0b      	lsrs	r3, r1, #16
 8011024:	fb02 3306 	mla	r3, r2, r6, r3
 8011028:	b289      	uxth	r1, r1
 801102a:	3001      	adds	r0, #1
 801102c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011030:	4285      	cmp	r5, r0
 8011032:	f84c 1b04 	str.w	r1, [ip], #4
 8011036:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801103a:	dcec      	bgt.n	8011016 <__multadd+0x12>
 801103c:	b30e      	cbz	r6, 8011082 <__multadd+0x7e>
 801103e:	68a3      	ldr	r3, [r4, #8]
 8011040:	42ab      	cmp	r3, r5
 8011042:	dc19      	bgt.n	8011078 <__multadd+0x74>
 8011044:	6861      	ldr	r1, [r4, #4]
 8011046:	4638      	mov	r0, r7
 8011048:	3101      	adds	r1, #1
 801104a:	f7ff ff79 	bl	8010f40 <_Balloc>
 801104e:	4680      	mov	r8, r0
 8011050:	b928      	cbnz	r0, 801105e <__multadd+0x5a>
 8011052:	4602      	mov	r2, r0
 8011054:	4b0c      	ldr	r3, [pc, #48]	@ (8011088 <__multadd+0x84>)
 8011056:	480d      	ldr	r0, [pc, #52]	@ (801108c <__multadd+0x88>)
 8011058:	21ba      	movs	r1, #186	@ 0xba
 801105a:	f000 fed9 	bl	8011e10 <__assert_func>
 801105e:	6922      	ldr	r2, [r4, #16]
 8011060:	3202      	adds	r2, #2
 8011062:	f104 010c 	add.w	r1, r4, #12
 8011066:	0092      	lsls	r2, r2, #2
 8011068:	300c      	adds	r0, #12
 801106a:	f7fe fcb2 	bl	800f9d2 <memcpy>
 801106e:	4621      	mov	r1, r4
 8011070:	4638      	mov	r0, r7
 8011072:	f7ff ffa5 	bl	8010fc0 <_Bfree>
 8011076:	4644      	mov	r4, r8
 8011078:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801107c:	3501      	adds	r5, #1
 801107e:	615e      	str	r6, [r3, #20]
 8011080:	6125      	str	r5, [r4, #16]
 8011082:	4620      	mov	r0, r4
 8011084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011088:	08012955 	.word	0x08012955
 801108c:	080129c6 	.word	0x080129c6

08011090 <__s2b>:
 8011090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011094:	460c      	mov	r4, r1
 8011096:	4615      	mov	r5, r2
 8011098:	461f      	mov	r7, r3
 801109a:	2209      	movs	r2, #9
 801109c:	3308      	adds	r3, #8
 801109e:	4606      	mov	r6, r0
 80110a0:	fb93 f3f2 	sdiv	r3, r3, r2
 80110a4:	2100      	movs	r1, #0
 80110a6:	2201      	movs	r2, #1
 80110a8:	429a      	cmp	r2, r3
 80110aa:	db09      	blt.n	80110c0 <__s2b+0x30>
 80110ac:	4630      	mov	r0, r6
 80110ae:	f7ff ff47 	bl	8010f40 <_Balloc>
 80110b2:	b940      	cbnz	r0, 80110c6 <__s2b+0x36>
 80110b4:	4602      	mov	r2, r0
 80110b6:	4b19      	ldr	r3, [pc, #100]	@ (801111c <__s2b+0x8c>)
 80110b8:	4819      	ldr	r0, [pc, #100]	@ (8011120 <__s2b+0x90>)
 80110ba:	21d3      	movs	r1, #211	@ 0xd3
 80110bc:	f000 fea8 	bl	8011e10 <__assert_func>
 80110c0:	0052      	lsls	r2, r2, #1
 80110c2:	3101      	adds	r1, #1
 80110c4:	e7f0      	b.n	80110a8 <__s2b+0x18>
 80110c6:	9b08      	ldr	r3, [sp, #32]
 80110c8:	6143      	str	r3, [r0, #20]
 80110ca:	2d09      	cmp	r5, #9
 80110cc:	f04f 0301 	mov.w	r3, #1
 80110d0:	6103      	str	r3, [r0, #16]
 80110d2:	dd16      	ble.n	8011102 <__s2b+0x72>
 80110d4:	f104 0909 	add.w	r9, r4, #9
 80110d8:	46c8      	mov	r8, r9
 80110da:	442c      	add	r4, r5
 80110dc:	f818 3b01 	ldrb.w	r3, [r8], #1
 80110e0:	4601      	mov	r1, r0
 80110e2:	3b30      	subs	r3, #48	@ 0x30
 80110e4:	220a      	movs	r2, #10
 80110e6:	4630      	mov	r0, r6
 80110e8:	f7ff ff8c 	bl	8011004 <__multadd>
 80110ec:	45a0      	cmp	r8, r4
 80110ee:	d1f5      	bne.n	80110dc <__s2b+0x4c>
 80110f0:	f1a5 0408 	sub.w	r4, r5, #8
 80110f4:	444c      	add	r4, r9
 80110f6:	1b2d      	subs	r5, r5, r4
 80110f8:	1963      	adds	r3, r4, r5
 80110fa:	42bb      	cmp	r3, r7
 80110fc:	db04      	blt.n	8011108 <__s2b+0x78>
 80110fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011102:	340a      	adds	r4, #10
 8011104:	2509      	movs	r5, #9
 8011106:	e7f6      	b.n	80110f6 <__s2b+0x66>
 8011108:	f814 3b01 	ldrb.w	r3, [r4], #1
 801110c:	4601      	mov	r1, r0
 801110e:	3b30      	subs	r3, #48	@ 0x30
 8011110:	220a      	movs	r2, #10
 8011112:	4630      	mov	r0, r6
 8011114:	f7ff ff76 	bl	8011004 <__multadd>
 8011118:	e7ee      	b.n	80110f8 <__s2b+0x68>
 801111a:	bf00      	nop
 801111c:	08012955 	.word	0x08012955
 8011120:	080129c6 	.word	0x080129c6

08011124 <__hi0bits>:
 8011124:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8011128:	4603      	mov	r3, r0
 801112a:	bf36      	itet	cc
 801112c:	0403      	lslcc	r3, r0, #16
 801112e:	2000      	movcs	r0, #0
 8011130:	2010      	movcc	r0, #16
 8011132:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8011136:	bf3c      	itt	cc
 8011138:	021b      	lslcc	r3, r3, #8
 801113a:	3008      	addcc	r0, #8
 801113c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011140:	bf3c      	itt	cc
 8011142:	011b      	lslcc	r3, r3, #4
 8011144:	3004      	addcc	r0, #4
 8011146:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801114a:	bf3c      	itt	cc
 801114c:	009b      	lslcc	r3, r3, #2
 801114e:	3002      	addcc	r0, #2
 8011150:	2b00      	cmp	r3, #0
 8011152:	db05      	blt.n	8011160 <__hi0bits+0x3c>
 8011154:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8011158:	f100 0001 	add.w	r0, r0, #1
 801115c:	bf08      	it	eq
 801115e:	2020      	moveq	r0, #32
 8011160:	4770      	bx	lr

08011162 <__lo0bits>:
 8011162:	6803      	ldr	r3, [r0, #0]
 8011164:	4602      	mov	r2, r0
 8011166:	f013 0007 	ands.w	r0, r3, #7
 801116a:	d00b      	beq.n	8011184 <__lo0bits+0x22>
 801116c:	07d9      	lsls	r1, r3, #31
 801116e:	d421      	bmi.n	80111b4 <__lo0bits+0x52>
 8011170:	0798      	lsls	r0, r3, #30
 8011172:	bf49      	itett	mi
 8011174:	085b      	lsrmi	r3, r3, #1
 8011176:	089b      	lsrpl	r3, r3, #2
 8011178:	2001      	movmi	r0, #1
 801117a:	6013      	strmi	r3, [r2, #0]
 801117c:	bf5c      	itt	pl
 801117e:	6013      	strpl	r3, [r2, #0]
 8011180:	2002      	movpl	r0, #2
 8011182:	4770      	bx	lr
 8011184:	b299      	uxth	r1, r3
 8011186:	b909      	cbnz	r1, 801118c <__lo0bits+0x2a>
 8011188:	0c1b      	lsrs	r3, r3, #16
 801118a:	2010      	movs	r0, #16
 801118c:	b2d9      	uxtb	r1, r3
 801118e:	b909      	cbnz	r1, 8011194 <__lo0bits+0x32>
 8011190:	3008      	adds	r0, #8
 8011192:	0a1b      	lsrs	r3, r3, #8
 8011194:	0719      	lsls	r1, r3, #28
 8011196:	bf04      	itt	eq
 8011198:	091b      	lsreq	r3, r3, #4
 801119a:	3004      	addeq	r0, #4
 801119c:	0799      	lsls	r1, r3, #30
 801119e:	bf04      	itt	eq
 80111a0:	089b      	lsreq	r3, r3, #2
 80111a2:	3002      	addeq	r0, #2
 80111a4:	07d9      	lsls	r1, r3, #31
 80111a6:	d403      	bmi.n	80111b0 <__lo0bits+0x4e>
 80111a8:	085b      	lsrs	r3, r3, #1
 80111aa:	f100 0001 	add.w	r0, r0, #1
 80111ae:	d003      	beq.n	80111b8 <__lo0bits+0x56>
 80111b0:	6013      	str	r3, [r2, #0]
 80111b2:	4770      	bx	lr
 80111b4:	2000      	movs	r0, #0
 80111b6:	4770      	bx	lr
 80111b8:	2020      	movs	r0, #32
 80111ba:	4770      	bx	lr

080111bc <__i2b>:
 80111bc:	b510      	push	{r4, lr}
 80111be:	460c      	mov	r4, r1
 80111c0:	2101      	movs	r1, #1
 80111c2:	f7ff febd 	bl	8010f40 <_Balloc>
 80111c6:	4602      	mov	r2, r0
 80111c8:	b928      	cbnz	r0, 80111d6 <__i2b+0x1a>
 80111ca:	4b05      	ldr	r3, [pc, #20]	@ (80111e0 <__i2b+0x24>)
 80111cc:	4805      	ldr	r0, [pc, #20]	@ (80111e4 <__i2b+0x28>)
 80111ce:	f240 1145 	movw	r1, #325	@ 0x145
 80111d2:	f000 fe1d 	bl	8011e10 <__assert_func>
 80111d6:	2301      	movs	r3, #1
 80111d8:	6144      	str	r4, [r0, #20]
 80111da:	6103      	str	r3, [r0, #16]
 80111dc:	bd10      	pop	{r4, pc}
 80111de:	bf00      	nop
 80111e0:	08012955 	.word	0x08012955
 80111e4:	080129c6 	.word	0x080129c6

080111e8 <__multiply>:
 80111e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111ec:	4614      	mov	r4, r2
 80111ee:	690a      	ldr	r2, [r1, #16]
 80111f0:	6923      	ldr	r3, [r4, #16]
 80111f2:	429a      	cmp	r2, r3
 80111f4:	bfa8      	it	ge
 80111f6:	4623      	movge	r3, r4
 80111f8:	460f      	mov	r7, r1
 80111fa:	bfa4      	itt	ge
 80111fc:	460c      	movge	r4, r1
 80111fe:	461f      	movge	r7, r3
 8011200:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8011204:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8011208:	68a3      	ldr	r3, [r4, #8]
 801120a:	6861      	ldr	r1, [r4, #4]
 801120c:	eb0a 0609 	add.w	r6, sl, r9
 8011210:	42b3      	cmp	r3, r6
 8011212:	b085      	sub	sp, #20
 8011214:	bfb8      	it	lt
 8011216:	3101      	addlt	r1, #1
 8011218:	f7ff fe92 	bl	8010f40 <_Balloc>
 801121c:	b930      	cbnz	r0, 801122c <__multiply+0x44>
 801121e:	4602      	mov	r2, r0
 8011220:	4b44      	ldr	r3, [pc, #272]	@ (8011334 <__multiply+0x14c>)
 8011222:	4845      	ldr	r0, [pc, #276]	@ (8011338 <__multiply+0x150>)
 8011224:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8011228:	f000 fdf2 	bl	8011e10 <__assert_func>
 801122c:	f100 0514 	add.w	r5, r0, #20
 8011230:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011234:	462b      	mov	r3, r5
 8011236:	2200      	movs	r2, #0
 8011238:	4543      	cmp	r3, r8
 801123a:	d321      	bcc.n	8011280 <__multiply+0x98>
 801123c:	f107 0114 	add.w	r1, r7, #20
 8011240:	f104 0214 	add.w	r2, r4, #20
 8011244:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8011248:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801124c:	9302      	str	r3, [sp, #8]
 801124e:	1b13      	subs	r3, r2, r4
 8011250:	3b15      	subs	r3, #21
 8011252:	f023 0303 	bic.w	r3, r3, #3
 8011256:	3304      	adds	r3, #4
 8011258:	f104 0715 	add.w	r7, r4, #21
 801125c:	42ba      	cmp	r2, r7
 801125e:	bf38      	it	cc
 8011260:	2304      	movcc	r3, #4
 8011262:	9301      	str	r3, [sp, #4]
 8011264:	9b02      	ldr	r3, [sp, #8]
 8011266:	9103      	str	r1, [sp, #12]
 8011268:	428b      	cmp	r3, r1
 801126a:	d80c      	bhi.n	8011286 <__multiply+0x9e>
 801126c:	2e00      	cmp	r6, #0
 801126e:	dd03      	ble.n	8011278 <__multiply+0x90>
 8011270:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011274:	2b00      	cmp	r3, #0
 8011276:	d05b      	beq.n	8011330 <__multiply+0x148>
 8011278:	6106      	str	r6, [r0, #16]
 801127a:	b005      	add	sp, #20
 801127c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011280:	f843 2b04 	str.w	r2, [r3], #4
 8011284:	e7d8      	b.n	8011238 <__multiply+0x50>
 8011286:	f8b1 a000 	ldrh.w	sl, [r1]
 801128a:	f1ba 0f00 	cmp.w	sl, #0
 801128e:	d024      	beq.n	80112da <__multiply+0xf2>
 8011290:	f104 0e14 	add.w	lr, r4, #20
 8011294:	46a9      	mov	r9, r5
 8011296:	f04f 0c00 	mov.w	ip, #0
 801129a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801129e:	f8d9 3000 	ldr.w	r3, [r9]
 80112a2:	fa1f fb87 	uxth.w	fp, r7
 80112a6:	b29b      	uxth	r3, r3
 80112a8:	fb0a 330b 	mla	r3, sl, fp, r3
 80112ac:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80112b0:	f8d9 7000 	ldr.w	r7, [r9]
 80112b4:	4463      	add	r3, ip
 80112b6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80112ba:	fb0a c70b 	mla	r7, sl, fp, ip
 80112be:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80112c2:	b29b      	uxth	r3, r3
 80112c4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80112c8:	4572      	cmp	r2, lr
 80112ca:	f849 3b04 	str.w	r3, [r9], #4
 80112ce:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80112d2:	d8e2      	bhi.n	801129a <__multiply+0xb2>
 80112d4:	9b01      	ldr	r3, [sp, #4]
 80112d6:	f845 c003 	str.w	ip, [r5, r3]
 80112da:	9b03      	ldr	r3, [sp, #12]
 80112dc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80112e0:	3104      	adds	r1, #4
 80112e2:	f1b9 0f00 	cmp.w	r9, #0
 80112e6:	d021      	beq.n	801132c <__multiply+0x144>
 80112e8:	682b      	ldr	r3, [r5, #0]
 80112ea:	f104 0c14 	add.w	ip, r4, #20
 80112ee:	46ae      	mov	lr, r5
 80112f0:	f04f 0a00 	mov.w	sl, #0
 80112f4:	f8bc b000 	ldrh.w	fp, [ip]
 80112f8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80112fc:	fb09 770b 	mla	r7, r9, fp, r7
 8011300:	4457      	add	r7, sl
 8011302:	b29b      	uxth	r3, r3
 8011304:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011308:	f84e 3b04 	str.w	r3, [lr], #4
 801130c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011310:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011314:	f8be 3000 	ldrh.w	r3, [lr]
 8011318:	fb09 330a 	mla	r3, r9, sl, r3
 801131c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8011320:	4562      	cmp	r2, ip
 8011322:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011326:	d8e5      	bhi.n	80112f4 <__multiply+0x10c>
 8011328:	9f01      	ldr	r7, [sp, #4]
 801132a:	51eb      	str	r3, [r5, r7]
 801132c:	3504      	adds	r5, #4
 801132e:	e799      	b.n	8011264 <__multiply+0x7c>
 8011330:	3e01      	subs	r6, #1
 8011332:	e79b      	b.n	801126c <__multiply+0x84>
 8011334:	08012955 	.word	0x08012955
 8011338:	080129c6 	.word	0x080129c6

0801133c <__pow5mult>:
 801133c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011340:	4615      	mov	r5, r2
 8011342:	f012 0203 	ands.w	r2, r2, #3
 8011346:	4607      	mov	r7, r0
 8011348:	460e      	mov	r6, r1
 801134a:	d007      	beq.n	801135c <__pow5mult+0x20>
 801134c:	4c25      	ldr	r4, [pc, #148]	@ (80113e4 <__pow5mult+0xa8>)
 801134e:	3a01      	subs	r2, #1
 8011350:	2300      	movs	r3, #0
 8011352:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011356:	f7ff fe55 	bl	8011004 <__multadd>
 801135a:	4606      	mov	r6, r0
 801135c:	10ad      	asrs	r5, r5, #2
 801135e:	d03d      	beq.n	80113dc <__pow5mult+0xa0>
 8011360:	69fc      	ldr	r4, [r7, #28]
 8011362:	b97c      	cbnz	r4, 8011384 <__pow5mult+0x48>
 8011364:	2010      	movs	r0, #16
 8011366:	f7ff fd23 	bl	8010db0 <malloc>
 801136a:	4602      	mov	r2, r0
 801136c:	61f8      	str	r0, [r7, #28]
 801136e:	b928      	cbnz	r0, 801137c <__pow5mult+0x40>
 8011370:	4b1d      	ldr	r3, [pc, #116]	@ (80113e8 <__pow5mult+0xac>)
 8011372:	481e      	ldr	r0, [pc, #120]	@ (80113ec <__pow5mult+0xb0>)
 8011374:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8011378:	f000 fd4a 	bl	8011e10 <__assert_func>
 801137c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011380:	6004      	str	r4, [r0, #0]
 8011382:	60c4      	str	r4, [r0, #12]
 8011384:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8011388:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801138c:	b94c      	cbnz	r4, 80113a2 <__pow5mult+0x66>
 801138e:	f240 2171 	movw	r1, #625	@ 0x271
 8011392:	4638      	mov	r0, r7
 8011394:	f7ff ff12 	bl	80111bc <__i2b>
 8011398:	2300      	movs	r3, #0
 801139a:	f8c8 0008 	str.w	r0, [r8, #8]
 801139e:	4604      	mov	r4, r0
 80113a0:	6003      	str	r3, [r0, #0]
 80113a2:	f04f 0900 	mov.w	r9, #0
 80113a6:	07eb      	lsls	r3, r5, #31
 80113a8:	d50a      	bpl.n	80113c0 <__pow5mult+0x84>
 80113aa:	4631      	mov	r1, r6
 80113ac:	4622      	mov	r2, r4
 80113ae:	4638      	mov	r0, r7
 80113b0:	f7ff ff1a 	bl	80111e8 <__multiply>
 80113b4:	4631      	mov	r1, r6
 80113b6:	4680      	mov	r8, r0
 80113b8:	4638      	mov	r0, r7
 80113ba:	f7ff fe01 	bl	8010fc0 <_Bfree>
 80113be:	4646      	mov	r6, r8
 80113c0:	106d      	asrs	r5, r5, #1
 80113c2:	d00b      	beq.n	80113dc <__pow5mult+0xa0>
 80113c4:	6820      	ldr	r0, [r4, #0]
 80113c6:	b938      	cbnz	r0, 80113d8 <__pow5mult+0x9c>
 80113c8:	4622      	mov	r2, r4
 80113ca:	4621      	mov	r1, r4
 80113cc:	4638      	mov	r0, r7
 80113ce:	f7ff ff0b 	bl	80111e8 <__multiply>
 80113d2:	6020      	str	r0, [r4, #0]
 80113d4:	f8c0 9000 	str.w	r9, [r0]
 80113d8:	4604      	mov	r4, r0
 80113da:	e7e4      	b.n	80113a6 <__pow5mult+0x6a>
 80113dc:	4630      	mov	r0, r6
 80113de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80113e2:	bf00      	nop
 80113e4:	08012a20 	.word	0x08012a20
 80113e8:	080128e6 	.word	0x080128e6
 80113ec:	080129c6 	.word	0x080129c6

080113f0 <__lshift>:
 80113f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80113f4:	460c      	mov	r4, r1
 80113f6:	6849      	ldr	r1, [r1, #4]
 80113f8:	6923      	ldr	r3, [r4, #16]
 80113fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80113fe:	68a3      	ldr	r3, [r4, #8]
 8011400:	4607      	mov	r7, r0
 8011402:	4691      	mov	r9, r2
 8011404:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011408:	f108 0601 	add.w	r6, r8, #1
 801140c:	42b3      	cmp	r3, r6
 801140e:	db0b      	blt.n	8011428 <__lshift+0x38>
 8011410:	4638      	mov	r0, r7
 8011412:	f7ff fd95 	bl	8010f40 <_Balloc>
 8011416:	4605      	mov	r5, r0
 8011418:	b948      	cbnz	r0, 801142e <__lshift+0x3e>
 801141a:	4602      	mov	r2, r0
 801141c:	4b28      	ldr	r3, [pc, #160]	@ (80114c0 <__lshift+0xd0>)
 801141e:	4829      	ldr	r0, [pc, #164]	@ (80114c4 <__lshift+0xd4>)
 8011420:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8011424:	f000 fcf4 	bl	8011e10 <__assert_func>
 8011428:	3101      	adds	r1, #1
 801142a:	005b      	lsls	r3, r3, #1
 801142c:	e7ee      	b.n	801140c <__lshift+0x1c>
 801142e:	2300      	movs	r3, #0
 8011430:	f100 0114 	add.w	r1, r0, #20
 8011434:	f100 0210 	add.w	r2, r0, #16
 8011438:	4618      	mov	r0, r3
 801143a:	4553      	cmp	r3, sl
 801143c:	db33      	blt.n	80114a6 <__lshift+0xb6>
 801143e:	6920      	ldr	r0, [r4, #16]
 8011440:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011444:	f104 0314 	add.w	r3, r4, #20
 8011448:	f019 091f 	ands.w	r9, r9, #31
 801144c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011450:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011454:	d02b      	beq.n	80114ae <__lshift+0xbe>
 8011456:	f1c9 0e20 	rsb	lr, r9, #32
 801145a:	468a      	mov	sl, r1
 801145c:	2200      	movs	r2, #0
 801145e:	6818      	ldr	r0, [r3, #0]
 8011460:	fa00 f009 	lsl.w	r0, r0, r9
 8011464:	4310      	orrs	r0, r2
 8011466:	f84a 0b04 	str.w	r0, [sl], #4
 801146a:	f853 2b04 	ldr.w	r2, [r3], #4
 801146e:	459c      	cmp	ip, r3
 8011470:	fa22 f20e 	lsr.w	r2, r2, lr
 8011474:	d8f3      	bhi.n	801145e <__lshift+0x6e>
 8011476:	ebac 0304 	sub.w	r3, ip, r4
 801147a:	3b15      	subs	r3, #21
 801147c:	f023 0303 	bic.w	r3, r3, #3
 8011480:	3304      	adds	r3, #4
 8011482:	f104 0015 	add.w	r0, r4, #21
 8011486:	4584      	cmp	ip, r0
 8011488:	bf38      	it	cc
 801148a:	2304      	movcc	r3, #4
 801148c:	50ca      	str	r2, [r1, r3]
 801148e:	b10a      	cbz	r2, 8011494 <__lshift+0xa4>
 8011490:	f108 0602 	add.w	r6, r8, #2
 8011494:	3e01      	subs	r6, #1
 8011496:	4638      	mov	r0, r7
 8011498:	612e      	str	r6, [r5, #16]
 801149a:	4621      	mov	r1, r4
 801149c:	f7ff fd90 	bl	8010fc0 <_Bfree>
 80114a0:	4628      	mov	r0, r5
 80114a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80114a6:	f842 0f04 	str.w	r0, [r2, #4]!
 80114aa:	3301      	adds	r3, #1
 80114ac:	e7c5      	b.n	801143a <__lshift+0x4a>
 80114ae:	3904      	subs	r1, #4
 80114b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80114b4:	f841 2f04 	str.w	r2, [r1, #4]!
 80114b8:	459c      	cmp	ip, r3
 80114ba:	d8f9      	bhi.n	80114b0 <__lshift+0xc0>
 80114bc:	e7ea      	b.n	8011494 <__lshift+0xa4>
 80114be:	bf00      	nop
 80114c0:	08012955 	.word	0x08012955
 80114c4:	080129c6 	.word	0x080129c6

080114c8 <__mcmp>:
 80114c8:	690a      	ldr	r2, [r1, #16]
 80114ca:	4603      	mov	r3, r0
 80114cc:	6900      	ldr	r0, [r0, #16]
 80114ce:	1a80      	subs	r0, r0, r2
 80114d0:	b530      	push	{r4, r5, lr}
 80114d2:	d10e      	bne.n	80114f2 <__mcmp+0x2a>
 80114d4:	3314      	adds	r3, #20
 80114d6:	3114      	adds	r1, #20
 80114d8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80114dc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80114e0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80114e4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80114e8:	4295      	cmp	r5, r2
 80114ea:	d003      	beq.n	80114f4 <__mcmp+0x2c>
 80114ec:	d205      	bcs.n	80114fa <__mcmp+0x32>
 80114ee:	f04f 30ff 	mov.w	r0, #4294967295
 80114f2:	bd30      	pop	{r4, r5, pc}
 80114f4:	42a3      	cmp	r3, r4
 80114f6:	d3f3      	bcc.n	80114e0 <__mcmp+0x18>
 80114f8:	e7fb      	b.n	80114f2 <__mcmp+0x2a>
 80114fa:	2001      	movs	r0, #1
 80114fc:	e7f9      	b.n	80114f2 <__mcmp+0x2a>
	...

08011500 <__mdiff>:
 8011500:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011504:	4689      	mov	r9, r1
 8011506:	4606      	mov	r6, r0
 8011508:	4611      	mov	r1, r2
 801150a:	4648      	mov	r0, r9
 801150c:	4614      	mov	r4, r2
 801150e:	f7ff ffdb 	bl	80114c8 <__mcmp>
 8011512:	1e05      	subs	r5, r0, #0
 8011514:	d112      	bne.n	801153c <__mdiff+0x3c>
 8011516:	4629      	mov	r1, r5
 8011518:	4630      	mov	r0, r6
 801151a:	f7ff fd11 	bl	8010f40 <_Balloc>
 801151e:	4602      	mov	r2, r0
 8011520:	b928      	cbnz	r0, 801152e <__mdiff+0x2e>
 8011522:	4b3f      	ldr	r3, [pc, #252]	@ (8011620 <__mdiff+0x120>)
 8011524:	f240 2137 	movw	r1, #567	@ 0x237
 8011528:	483e      	ldr	r0, [pc, #248]	@ (8011624 <__mdiff+0x124>)
 801152a:	f000 fc71 	bl	8011e10 <__assert_func>
 801152e:	2301      	movs	r3, #1
 8011530:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011534:	4610      	mov	r0, r2
 8011536:	b003      	add	sp, #12
 8011538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801153c:	bfbc      	itt	lt
 801153e:	464b      	movlt	r3, r9
 8011540:	46a1      	movlt	r9, r4
 8011542:	4630      	mov	r0, r6
 8011544:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8011548:	bfba      	itte	lt
 801154a:	461c      	movlt	r4, r3
 801154c:	2501      	movlt	r5, #1
 801154e:	2500      	movge	r5, #0
 8011550:	f7ff fcf6 	bl	8010f40 <_Balloc>
 8011554:	4602      	mov	r2, r0
 8011556:	b918      	cbnz	r0, 8011560 <__mdiff+0x60>
 8011558:	4b31      	ldr	r3, [pc, #196]	@ (8011620 <__mdiff+0x120>)
 801155a:	f240 2145 	movw	r1, #581	@ 0x245
 801155e:	e7e3      	b.n	8011528 <__mdiff+0x28>
 8011560:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8011564:	6926      	ldr	r6, [r4, #16]
 8011566:	60c5      	str	r5, [r0, #12]
 8011568:	f109 0310 	add.w	r3, r9, #16
 801156c:	f109 0514 	add.w	r5, r9, #20
 8011570:	f104 0e14 	add.w	lr, r4, #20
 8011574:	f100 0b14 	add.w	fp, r0, #20
 8011578:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801157c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8011580:	9301      	str	r3, [sp, #4]
 8011582:	46d9      	mov	r9, fp
 8011584:	f04f 0c00 	mov.w	ip, #0
 8011588:	9b01      	ldr	r3, [sp, #4]
 801158a:	f85e 0b04 	ldr.w	r0, [lr], #4
 801158e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8011592:	9301      	str	r3, [sp, #4]
 8011594:	fa1f f38a 	uxth.w	r3, sl
 8011598:	4619      	mov	r1, r3
 801159a:	b283      	uxth	r3, r0
 801159c:	1acb      	subs	r3, r1, r3
 801159e:	0c00      	lsrs	r0, r0, #16
 80115a0:	4463      	add	r3, ip
 80115a2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80115a6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80115aa:	b29b      	uxth	r3, r3
 80115ac:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80115b0:	4576      	cmp	r6, lr
 80115b2:	f849 3b04 	str.w	r3, [r9], #4
 80115b6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80115ba:	d8e5      	bhi.n	8011588 <__mdiff+0x88>
 80115bc:	1b33      	subs	r3, r6, r4
 80115be:	3b15      	subs	r3, #21
 80115c0:	f023 0303 	bic.w	r3, r3, #3
 80115c4:	3415      	adds	r4, #21
 80115c6:	3304      	adds	r3, #4
 80115c8:	42a6      	cmp	r6, r4
 80115ca:	bf38      	it	cc
 80115cc:	2304      	movcc	r3, #4
 80115ce:	441d      	add	r5, r3
 80115d0:	445b      	add	r3, fp
 80115d2:	461e      	mov	r6, r3
 80115d4:	462c      	mov	r4, r5
 80115d6:	4544      	cmp	r4, r8
 80115d8:	d30e      	bcc.n	80115f8 <__mdiff+0xf8>
 80115da:	f108 0103 	add.w	r1, r8, #3
 80115de:	1b49      	subs	r1, r1, r5
 80115e0:	f021 0103 	bic.w	r1, r1, #3
 80115e4:	3d03      	subs	r5, #3
 80115e6:	45a8      	cmp	r8, r5
 80115e8:	bf38      	it	cc
 80115ea:	2100      	movcc	r1, #0
 80115ec:	440b      	add	r3, r1
 80115ee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80115f2:	b191      	cbz	r1, 801161a <__mdiff+0x11a>
 80115f4:	6117      	str	r7, [r2, #16]
 80115f6:	e79d      	b.n	8011534 <__mdiff+0x34>
 80115f8:	f854 1b04 	ldr.w	r1, [r4], #4
 80115fc:	46e6      	mov	lr, ip
 80115fe:	0c08      	lsrs	r0, r1, #16
 8011600:	fa1c fc81 	uxtah	ip, ip, r1
 8011604:	4471      	add	r1, lr
 8011606:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801160a:	b289      	uxth	r1, r1
 801160c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011610:	f846 1b04 	str.w	r1, [r6], #4
 8011614:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011618:	e7dd      	b.n	80115d6 <__mdiff+0xd6>
 801161a:	3f01      	subs	r7, #1
 801161c:	e7e7      	b.n	80115ee <__mdiff+0xee>
 801161e:	bf00      	nop
 8011620:	08012955 	.word	0x08012955
 8011624:	080129c6 	.word	0x080129c6

08011628 <__ulp>:
 8011628:	b082      	sub	sp, #8
 801162a:	ed8d 0b00 	vstr	d0, [sp]
 801162e:	9a01      	ldr	r2, [sp, #4]
 8011630:	4b0f      	ldr	r3, [pc, #60]	@ (8011670 <__ulp+0x48>)
 8011632:	4013      	ands	r3, r2
 8011634:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8011638:	2b00      	cmp	r3, #0
 801163a:	dc08      	bgt.n	801164e <__ulp+0x26>
 801163c:	425b      	negs	r3, r3
 801163e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8011642:	ea4f 5223 	mov.w	r2, r3, asr #20
 8011646:	da04      	bge.n	8011652 <__ulp+0x2a>
 8011648:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801164c:	4113      	asrs	r3, r2
 801164e:	2200      	movs	r2, #0
 8011650:	e008      	b.n	8011664 <__ulp+0x3c>
 8011652:	f1a2 0314 	sub.w	r3, r2, #20
 8011656:	2b1e      	cmp	r3, #30
 8011658:	bfda      	itte	le
 801165a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801165e:	40da      	lsrle	r2, r3
 8011660:	2201      	movgt	r2, #1
 8011662:	2300      	movs	r3, #0
 8011664:	4619      	mov	r1, r3
 8011666:	4610      	mov	r0, r2
 8011668:	ec41 0b10 	vmov	d0, r0, r1
 801166c:	b002      	add	sp, #8
 801166e:	4770      	bx	lr
 8011670:	7ff00000 	.word	0x7ff00000

08011674 <__b2d>:
 8011674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011678:	6906      	ldr	r6, [r0, #16]
 801167a:	f100 0814 	add.w	r8, r0, #20
 801167e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8011682:	1f37      	subs	r7, r6, #4
 8011684:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011688:	4610      	mov	r0, r2
 801168a:	f7ff fd4b 	bl	8011124 <__hi0bits>
 801168e:	f1c0 0320 	rsb	r3, r0, #32
 8011692:	280a      	cmp	r0, #10
 8011694:	600b      	str	r3, [r1, #0]
 8011696:	491b      	ldr	r1, [pc, #108]	@ (8011704 <__b2d+0x90>)
 8011698:	dc15      	bgt.n	80116c6 <__b2d+0x52>
 801169a:	f1c0 0c0b 	rsb	ip, r0, #11
 801169e:	fa22 f30c 	lsr.w	r3, r2, ip
 80116a2:	45b8      	cmp	r8, r7
 80116a4:	ea43 0501 	orr.w	r5, r3, r1
 80116a8:	bf34      	ite	cc
 80116aa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80116ae:	2300      	movcs	r3, #0
 80116b0:	3015      	adds	r0, #21
 80116b2:	fa02 f000 	lsl.w	r0, r2, r0
 80116b6:	fa23 f30c 	lsr.w	r3, r3, ip
 80116ba:	4303      	orrs	r3, r0
 80116bc:	461c      	mov	r4, r3
 80116be:	ec45 4b10 	vmov	d0, r4, r5
 80116c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116c6:	45b8      	cmp	r8, r7
 80116c8:	bf3a      	itte	cc
 80116ca:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80116ce:	f1a6 0708 	subcc.w	r7, r6, #8
 80116d2:	2300      	movcs	r3, #0
 80116d4:	380b      	subs	r0, #11
 80116d6:	d012      	beq.n	80116fe <__b2d+0x8a>
 80116d8:	f1c0 0120 	rsb	r1, r0, #32
 80116dc:	fa23 f401 	lsr.w	r4, r3, r1
 80116e0:	4082      	lsls	r2, r0
 80116e2:	4322      	orrs	r2, r4
 80116e4:	4547      	cmp	r7, r8
 80116e6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80116ea:	bf8c      	ite	hi
 80116ec:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80116f0:	2200      	movls	r2, #0
 80116f2:	4083      	lsls	r3, r0
 80116f4:	40ca      	lsrs	r2, r1
 80116f6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80116fa:	4313      	orrs	r3, r2
 80116fc:	e7de      	b.n	80116bc <__b2d+0x48>
 80116fe:	ea42 0501 	orr.w	r5, r2, r1
 8011702:	e7db      	b.n	80116bc <__b2d+0x48>
 8011704:	3ff00000 	.word	0x3ff00000

08011708 <__d2b>:
 8011708:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801170c:	460f      	mov	r7, r1
 801170e:	2101      	movs	r1, #1
 8011710:	ec59 8b10 	vmov	r8, r9, d0
 8011714:	4616      	mov	r6, r2
 8011716:	f7ff fc13 	bl	8010f40 <_Balloc>
 801171a:	4604      	mov	r4, r0
 801171c:	b930      	cbnz	r0, 801172c <__d2b+0x24>
 801171e:	4602      	mov	r2, r0
 8011720:	4b23      	ldr	r3, [pc, #140]	@ (80117b0 <__d2b+0xa8>)
 8011722:	4824      	ldr	r0, [pc, #144]	@ (80117b4 <__d2b+0xac>)
 8011724:	f240 310f 	movw	r1, #783	@ 0x30f
 8011728:	f000 fb72 	bl	8011e10 <__assert_func>
 801172c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011730:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011734:	b10d      	cbz	r5, 801173a <__d2b+0x32>
 8011736:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801173a:	9301      	str	r3, [sp, #4]
 801173c:	f1b8 0300 	subs.w	r3, r8, #0
 8011740:	d023      	beq.n	801178a <__d2b+0x82>
 8011742:	4668      	mov	r0, sp
 8011744:	9300      	str	r3, [sp, #0]
 8011746:	f7ff fd0c 	bl	8011162 <__lo0bits>
 801174a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801174e:	b1d0      	cbz	r0, 8011786 <__d2b+0x7e>
 8011750:	f1c0 0320 	rsb	r3, r0, #32
 8011754:	fa02 f303 	lsl.w	r3, r2, r3
 8011758:	430b      	orrs	r3, r1
 801175a:	40c2      	lsrs	r2, r0
 801175c:	6163      	str	r3, [r4, #20]
 801175e:	9201      	str	r2, [sp, #4]
 8011760:	9b01      	ldr	r3, [sp, #4]
 8011762:	61a3      	str	r3, [r4, #24]
 8011764:	2b00      	cmp	r3, #0
 8011766:	bf0c      	ite	eq
 8011768:	2201      	moveq	r2, #1
 801176a:	2202      	movne	r2, #2
 801176c:	6122      	str	r2, [r4, #16]
 801176e:	b1a5      	cbz	r5, 801179a <__d2b+0x92>
 8011770:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8011774:	4405      	add	r5, r0
 8011776:	603d      	str	r5, [r7, #0]
 8011778:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801177c:	6030      	str	r0, [r6, #0]
 801177e:	4620      	mov	r0, r4
 8011780:	b003      	add	sp, #12
 8011782:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011786:	6161      	str	r1, [r4, #20]
 8011788:	e7ea      	b.n	8011760 <__d2b+0x58>
 801178a:	a801      	add	r0, sp, #4
 801178c:	f7ff fce9 	bl	8011162 <__lo0bits>
 8011790:	9b01      	ldr	r3, [sp, #4]
 8011792:	6163      	str	r3, [r4, #20]
 8011794:	3020      	adds	r0, #32
 8011796:	2201      	movs	r2, #1
 8011798:	e7e8      	b.n	801176c <__d2b+0x64>
 801179a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801179e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80117a2:	6038      	str	r0, [r7, #0]
 80117a4:	6918      	ldr	r0, [r3, #16]
 80117a6:	f7ff fcbd 	bl	8011124 <__hi0bits>
 80117aa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80117ae:	e7e5      	b.n	801177c <__d2b+0x74>
 80117b0:	08012955 	.word	0x08012955
 80117b4:	080129c6 	.word	0x080129c6

080117b8 <__ratio>:
 80117b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117bc:	b085      	sub	sp, #20
 80117be:	e9cd 1000 	strd	r1, r0, [sp]
 80117c2:	a902      	add	r1, sp, #8
 80117c4:	f7ff ff56 	bl	8011674 <__b2d>
 80117c8:	9800      	ldr	r0, [sp, #0]
 80117ca:	a903      	add	r1, sp, #12
 80117cc:	ec55 4b10 	vmov	r4, r5, d0
 80117d0:	f7ff ff50 	bl	8011674 <__b2d>
 80117d4:	9b01      	ldr	r3, [sp, #4]
 80117d6:	6919      	ldr	r1, [r3, #16]
 80117d8:	9b00      	ldr	r3, [sp, #0]
 80117da:	691b      	ldr	r3, [r3, #16]
 80117dc:	1ac9      	subs	r1, r1, r3
 80117de:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80117e2:	1a9b      	subs	r3, r3, r2
 80117e4:	ec5b ab10 	vmov	sl, fp, d0
 80117e8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80117ec:	2b00      	cmp	r3, #0
 80117ee:	bfce      	itee	gt
 80117f0:	462a      	movgt	r2, r5
 80117f2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80117f6:	465a      	movle	r2, fp
 80117f8:	462f      	mov	r7, r5
 80117fa:	46d9      	mov	r9, fp
 80117fc:	bfcc      	ite	gt
 80117fe:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8011802:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8011806:	464b      	mov	r3, r9
 8011808:	4652      	mov	r2, sl
 801180a:	4620      	mov	r0, r4
 801180c:	4639      	mov	r1, r7
 801180e:	f7ef f845 	bl	800089c <__aeabi_ddiv>
 8011812:	ec41 0b10 	vmov	d0, r0, r1
 8011816:	b005      	add	sp, #20
 8011818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801181c <__copybits>:
 801181c:	3901      	subs	r1, #1
 801181e:	b570      	push	{r4, r5, r6, lr}
 8011820:	1149      	asrs	r1, r1, #5
 8011822:	6914      	ldr	r4, [r2, #16]
 8011824:	3101      	adds	r1, #1
 8011826:	f102 0314 	add.w	r3, r2, #20
 801182a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801182e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011832:	1f05      	subs	r5, r0, #4
 8011834:	42a3      	cmp	r3, r4
 8011836:	d30c      	bcc.n	8011852 <__copybits+0x36>
 8011838:	1aa3      	subs	r3, r4, r2
 801183a:	3b11      	subs	r3, #17
 801183c:	f023 0303 	bic.w	r3, r3, #3
 8011840:	3211      	adds	r2, #17
 8011842:	42a2      	cmp	r2, r4
 8011844:	bf88      	it	hi
 8011846:	2300      	movhi	r3, #0
 8011848:	4418      	add	r0, r3
 801184a:	2300      	movs	r3, #0
 801184c:	4288      	cmp	r0, r1
 801184e:	d305      	bcc.n	801185c <__copybits+0x40>
 8011850:	bd70      	pop	{r4, r5, r6, pc}
 8011852:	f853 6b04 	ldr.w	r6, [r3], #4
 8011856:	f845 6f04 	str.w	r6, [r5, #4]!
 801185a:	e7eb      	b.n	8011834 <__copybits+0x18>
 801185c:	f840 3b04 	str.w	r3, [r0], #4
 8011860:	e7f4      	b.n	801184c <__copybits+0x30>

08011862 <__any_on>:
 8011862:	f100 0214 	add.w	r2, r0, #20
 8011866:	6900      	ldr	r0, [r0, #16]
 8011868:	114b      	asrs	r3, r1, #5
 801186a:	4298      	cmp	r0, r3
 801186c:	b510      	push	{r4, lr}
 801186e:	db11      	blt.n	8011894 <__any_on+0x32>
 8011870:	dd0a      	ble.n	8011888 <__any_on+0x26>
 8011872:	f011 011f 	ands.w	r1, r1, #31
 8011876:	d007      	beq.n	8011888 <__any_on+0x26>
 8011878:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801187c:	fa24 f001 	lsr.w	r0, r4, r1
 8011880:	fa00 f101 	lsl.w	r1, r0, r1
 8011884:	428c      	cmp	r4, r1
 8011886:	d10b      	bne.n	80118a0 <__any_on+0x3e>
 8011888:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801188c:	4293      	cmp	r3, r2
 801188e:	d803      	bhi.n	8011898 <__any_on+0x36>
 8011890:	2000      	movs	r0, #0
 8011892:	bd10      	pop	{r4, pc}
 8011894:	4603      	mov	r3, r0
 8011896:	e7f7      	b.n	8011888 <__any_on+0x26>
 8011898:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801189c:	2900      	cmp	r1, #0
 801189e:	d0f5      	beq.n	801188c <__any_on+0x2a>
 80118a0:	2001      	movs	r0, #1
 80118a2:	e7f6      	b.n	8011892 <__any_on+0x30>

080118a4 <_strtol_l.constprop.0>:
 80118a4:	2b24      	cmp	r3, #36	@ 0x24
 80118a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80118aa:	4686      	mov	lr, r0
 80118ac:	4690      	mov	r8, r2
 80118ae:	d801      	bhi.n	80118b4 <_strtol_l.constprop.0+0x10>
 80118b0:	2b01      	cmp	r3, #1
 80118b2:	d106      	bne.n	80118c2 <_strtol_l.constprop.0+0x1e>
 80118b4:	f7fe f860 	bl	800f978 <__errno>
 80118b8:	2316      	movs	r3, #22
 80118ba:	6003      	str	r3, [r0, #0]
 80118bc:	2000      	movs	r0, #0
 80118be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80118c2:	4834      	ldr	r0, [pc, #208]	@ (8011994 <_strtol_l.constprop.0+0xf0>)
 80118c4:	460d      	mov	r5, r1
 80118c6:	462a      	mov	r2, r5
 80118c8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80118cc:	5d06      	ldrb	r6, [r0, r4]
 80118ce:	f016 0608 	ands.w	r6, r6, #8
 80118d2:	d1f8      	bne.n	80118c6 <_strtol_l.constprop.0+0x22>
 80118d4:	2c2d      	cmp	r4, #45	@ 0x2d
 80118d6:	d12d      	bne.n	8011934 <_strtol_l.constprop.0+0x90>
 80118d8:	782c      	ldrb	r4, [r5, #0]
 80118da:	2601      	movs	r6, #1
 80118dc:	1c95      	adds	r5, r2, #2
 80118de:	f033 0210 	bics.w	r2, r3, #16
 80118e2:	d109      	bne.n	80118f8 <_strtol_l.constprop.0+0x54>
 80118e4:	2c30      	cmp	r4, #48	@ 0x30
 80118e6:	d12a      	bne.n	801193e <_strtol_l.constprop.0+0x9a>
 80118e8:	782a      	ldrb	r2, [r5, #0]
 80118ea:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80118ee:	2a58      	cmp	r2, #88	@ 0x58
 80118f0:	d125      	bne.n	801193e <_strtol_l.constprop.0+0x9a>
 80118f2:	786c      	ldrb	r4, [r5, #1]
 80118f4:	2310      	movs	r3, #16
 80118f6:	3502      	adds	r5, #2
 80118f8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80118fc:	f10c 3cff 	add.w	ip, ip, #4294967295
 8011900:	2200      	movs	r2, #0
 8011902:	fbbc f9f3 	udiv	r9, ip, r3
 8011906:	4610      	mov	r0, r2
 8011908:	fb03 ca19 	mls	sl, r3, r9, ip
 801190c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8011910:	2f09      	cmp	r7, #9
 8011912:	d81b      	bhi.n	801194c <_strtol_l.constprop.0+0xa8>
 8011914:	463c      	mov	r4, r7
 8011916:	42a3      	cmp	r3, r4
 8011918:	dd27      	ble.n	801196a <_strtol_l.constprop.0+0xc6>
 801191a:	1c57      	adds	r7, r2, #1
 801191c:	d007      	beq.n	801192e <_strtol_l.constprop.0+0x8a>
 801191e:	4581      	cmp	r9, r0
 8011920:	d320      	bcc.n	8011964 <_strtol_l.constprop.0+0xc0>
 8011922:	d101      	bne.n	8011928 <_strtol_l.constprop.0+0x84>
 8011924:	45a2      	cmp	sl, r4
 8011926:	db1d      	blt.n	8011964 <_strtol_l.constprop.0+0xc0>
 8011928:	fb00 4003 	mla	r0, r0, r3, r4
 801192c:	2201      	movs	r2, #1
 801192e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011932:	e7eb      	b.n	801190c <_strtol_l.constprop.0+0x68>
 8011934:	2c2b      	cmp	r4, #43	@ 0x2b
 8011936:	bf04      	itt	eq
 8011938:	782c      	ldrbeq	r4, [r5, #0]
 801193a:	1c95      	addeq	r5, r2, #2
 801193c:	e7cf      	b.n	80118de <_strtol_l.constprop.0+0x3a>
 801193e:	2b00      	cmp	r3, #0
 8011940:	d1da      	bne.n	80118f8 <_strtol_l.constprop.0+0x54>
 8011942:	2c30      	cmp	r4, #48	@ 0x30
 8011944:	bf0c      	ite	eq
 8011946:	2308      	moveq	r3, #8
 8011948:	230a      	movne	r3, #10
 801194a:	e7d5      	b.n	80118f8 <_strtol_l.constprop.0+0x54>
 801194c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8011950:	2f19      	cmp	r7, #25
 8011952:	d801      	bhi.n	8011958 <_strtol_l.constprop.0+0xb4>
 8011954:	3c37      	subs	r4, #55	@ 0x37
 8011956:	e7de      	b.n	8011916 <_strtol_l.constprop.0+0x72>
 8011958:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801195c:	2f19      	cmp	r7, #25
 801195e:	d804      	bhi.n	801196a <_strtol_l.constprop.0+0xc6>
 8011960:	3c57      	subs	r4, #87	@ 0x57
 8011962:	e7d8      	b.n	8011916 <_strtol_l.constprop.0+0x72>
 8011964:	f04f 32ff 	mov.w	r2, #4294967295
 8011968:	e7e1      	b.n	801192e <_strtol_l.constprop.0+0x8a>
 801196a:	1c53      	adds	r3, r2, #1
 801196c:	d108      	bne.n	8011980 <_strtol_l.constprop.0+0xdc>
 801196e:	2322      	movs	r3, #34	@ 0x22
 8011970:	f8ce 3000 	str.w	r3, [lr]
 8011974:	4660      	mov	r0, ip
 8011976:	f1b8 0f00 	cmp.w	r8, #0
 801197a:	d0a0      	beq.n	80118be <_strtol_l.constprop.0+0x1a>
 801197c:	1e69      	subs	r1, r5, #1
 801197e:	e006      	b.n	801198e <_strtol_l.constprop.0+0xea>
 8011980:	b106      	cbz	r6, 8011984 <_strtol_l.constprop.0+0xe0>
 8011982:	4240      	negs	r0, r0
 8011984:	f1b8 0f00 	cmp.w	r8, #0
 8011988:	d099      	beq.n	80118be <_strtol_l.constprop.0+0x1a>
 801198a:	2a00      	cmp	r2, #0
 801198c:	d1f6      	bne.n	801197c <_strtol_l.constprop.0+0xd8>
 801198e:	f8c8 1000 	str.w	r1, [r8]
 8011992:	e794      	b.n	80118be <_strtol_l.constprop.0+0x1a>
 8011994:	08012b21 	.word	0x08012b21

08011998 <_strtol_r>:
 8011998:	f7ff bf84 	b.w	80118a4 <_strtol_l.constprop.0>

0801199c <__ascii_wctomb>:
 801199c:	4603      	mov	r3, r0
 801199e:	4608      	mov	r0, r1
 80119a0:	b141      	cbz	r1, 80119b4 <__ascii_wctomb+0x18>
 80119a2:	2aff      	cmp	r2, #255	@ 0xff
 80119a4:	d904      	bls.n	80119b0 <__ascii_wctomb+0x14>
 80119a6:	228a      	movs	r2, #138	@ 0x8a
 80119a8:	601a      	str	r2, [r3, #0]
 80119aa:	f04f 30ff 	mov.w	r0, #4294967295
 80119ae:	4770      	bx	lr
 80119b0:	700a      	strb	r2, [r1, #0]
 80119b2:	2001      	movs	r0, #1
 80119b4:	4770      	bx	lr

080119b6 <__ssputs_r>:
 80119b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80119ba:	688e      	ldr	r6, [r1, #8]
 80119bc:	461f      	mov	r7, r3
 80119be:	42be      	cmp	r6, r7
 80119c0:	680b      	ldr	r3, [r1, #0]
 80119c2:	4682      	mov	sl, r0
 80119c4:	460c      	mov	r4, r1
 80119c6:	4690      	mov	r8, r2
 80119c8:	d82d      	bhi.n	8011a26 <__ssputs_r+0x70>
 80119ca:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80119ce:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80119d2:	d026      	beq.n	8011a22 <__ssputs_r+0x6c>
 80119d4:	6965      	ldr	r5, [r4, #20]
 80119d6:	6909      	ldr	r1, [r1, #16]
 80119d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80119dc:	eba3 0901 	sub.w	r9, r3, r1
 80119e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80119e4:	1c7b      	adds	r3, r7, #1
 80119e6:	444b      	add	r3, r9
 80119e8:	106d      	asrs	r5, r5, #1
 80119ea:	429d      	cmp	r5, r3
 80119ec:	bf38      	it	cc
 80119ee:	461d      	movcc	r5, r3
 80119f0:	0553      	lsls	r3, r2, #21
 80119f2:	d527      	bpl.n	8011a44 <__ssputs_r+0x8e>
 80119f4:	4629      	mov	r1, r5
 80119f6:	f7ff fa05 	bl	8010e04 <_malloc_r>
 80119fa:	4606      	mov	r6, r0
 80119fc:	b360      	cbz	r0, 8011a58 <__ssputs_r+0xa2>
 80119fe:	6921      	ldr	r1, [r4, #16]
 8011a00:	464a      	mov	r2, r9
 8011a02:	f7fd ffe6 	bl	800f9d2 <memcpy>
 8011a06:	89a3      	ldrh	r3, [r4, #12]
 8011a08:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011a0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011a10:	81a3      	strh	r3, [r4, #12]
 8011a12:	6126      	str	r6, [r4, #16]
 8011a14:	6165      	str	r5, [r4, #20]
 8011a16:	444e      	add	r6, r9
 8011a18:	eba5 0509 	sub.w	r5, r5, r9
 8011a1c:	6026      	str	r6, [r4, #0]
 8011a1e:	60a5      	str	r5, [r4, #8]
 8011a20:	463e      	mov	r6, r7
 8011a22:	42be      	cmp	r6, r7
 8011a24:	d900      	bls.n	8011a28 <__ssputs_r+0x72>
 8011a26:	463e      	mov	r6, r7
 8011a28:	6820      	ldr	r0, [r4, #0]
 8011a2a:	4632      	mov	r2, r6
 8011a2c:	4641      	mov	r1, r8
 8011a2e:	f000 f9c5 	bl	8011dbc <memmove>
 8011a32:	68a3      	ldr	r3, [r4, #8]
 8011a34:	1b9b      	subs	r3, r3, r6
 8011a36:	60a3      	str	r3, [r4, #8]
 8011a38:	6823      	ldr	r3, [r4, #0]
 8011a3a:	4433      	add	r3, r6
 8011a3c:	6023      	str	r3, [r4, #0]
 8011a3e:	2000      	movs	r0, #0
 8011a40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a44:	462a      	mov	r2, r5
 8011a46:	f000 fa15 	bl	8011e74 <_realloc_r>
 8011a4a:	4606      	mov	r6, r0
 8011a4c:	2800      	cmp	r0, #0
 8011a4e:	d1e0      	bne.n	8011a12 <__ssputs_r+0x5c>
 8011a50:	6921      	ldr	r1, [r4, #16]
 8011a52:	4650      	mov	r0, sl
 8011a54:	f7fe fe28 	bl	80106a8 <_free_r>
 8011a58:	230c      	movs	r3, #12
 8011a5a:	f8ca 3000 	str.w	r3, [sl]
 8011a5e:	89a3      	ldrh	r3, [r4, #12]
 8011a60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011a64:	81a3      	strh	r3, [r4, #12]
 8011a66:	f04f 30ff 	mov.w	r0, #4294967295
 8011a6a:	e7e9      	b.n	8011a40 <__ssputs_r+0x8a>

08011a6c <_svfiprintf_r>:
 8011a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a70:	4698      	mov	r8, r3
 8011a72:	898b      	ldrh	r3, [r1, #12]
 8011a74:	061b      	lsls	r3, r3, #24
 8011a76:	b09d      	sub	sp, #116	@ 0x74
 8011a78:	4607      	mov	r7, r0
 8011a7a:	460d      	mov	r5, r1
 8011a7c:	4614      	mov	r4, r2
 8011a7e:	d510      	bpl.n	8011aa2 <_svfiprintf_r+0x36>
 8011a80:	690b      	ldr	r3, [r1, #16]
 8011a82:	b973      	cbnz	r3, 8011aa2 <_svfiprintf_r+0x36>
 8011a84:	2140      	movs	r1, #64	@ 0x40
 8011a86:	f7ff f9bd 	bl	8010e04 <_malloc_r>
 8011a8a:	6028      	str	r0, [r5, #0]
 8011a8c:	6128      	str	r0, [r5, #16]
 8011a8e:	b930      	cbnz	r0, 8011a9e <_svfiprintf_r+0x32>
 8011a90:	230c      	movs	r3, #12
 8011a92:	603b      	str	r3, [r7, #0]
 8011a94:	f04f 30ff 	mov.w	r0, #4294967295
 8011a98:	b01d      	add	sp, #116	@ 0x74
 8011a9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a9e:	2340      	movs	r3, #64	@ 0x40
 8011aa0:	616b      	str	r3, [r5, #20]
 8011aa2:	2300      	movs	r3, #0
 8011aa4:	9309      	str	r3, [sp, #36]	@ 0x24
 8011aa6:	2320      	movs	r3, #32
 8011aa8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011aac:	f8cd 800c 	str.w	r8, [sp, #12]
 8011ab0:	2330      	movs	r3, #48	@ 0x30
 8011ab2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011c50 <_svfiprintf_r+0x1e4>
 8011ab6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011aba:	f04f 0901 	mov.w	r9, #1
 8011abe:	4623      	mov	r3, r4
 8011ac0:	469a      	mov	sl, r3
 8011ac2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011ac6:	b10a      	cbz	r2, 8011acc <_svfiprintf_r+0x60>
 8011ac8:	2a25      	cmp	r2, #37	@ 0x25
 8011aca:	d1f9      	bne.n	8011ac0 <_svfiprintf_r+0x54>
 8011acc:	ebba 0b04 	subs.w	fp, sl, r4
 8011ad0:	d00b      	beq.n	8011aea <_svfiprintf_r+0x7e>
 8011ad2:	465b      	mov	r3, fp
 8011ad4:	4622      	mov	r2, r4
 8011ad6:	4629      	mov	r1, r5
 8011ad8:	4638      	mov	r0, r7
 8011ada:	f7ff ff6c 	bl	80119b6 <__ssputs_r>
 8011ade:	3001      	adds	r0, #1
 8011ae0:	f000 80a7 	beq.w	8011c32 <_svfiprintf_r+0x1c6>
 8011ae4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011ae6:	445a      	add	r2, fp
 8011ae8:	9209      	str	r2, [sp, #36]	@ 0x24
 8011aea:	f89a 3000 	ldrb.w	r3, [sl]
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	f000 809f 	beq.w	8011c32 <_svfiprintf_r+0x1c6>
 8011af4:	2300      	movs	r3, #0
 8011af6:	f04f 32ff 	mov.w	r2, #4294967295
 8011afa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011afe:	f10a 0a01 	add.w	sl, sl, #1
 8011b02:	9304      	str	r3, [sp, #16]
 8011b04:	9307      	str	r3, [sp, #28]
 8011b06:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011b0a:	931a      	str	r3, [sp, #104]	@ 0x68
 8011b0c:	4654      	mov	r4, sl
 8011b0e:	2205      	movs	r2, #5
 8011b10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011b14:	484e      	ldr	r0, [pc, #312]	@ (8011c50 <_svfiprintf_r+0x1e4>)
 8011b16:	f7ee fb83 	bl	8000220 <memchr>
 8011b1a:	9a04      	ldr	r2, [sp, #16]
 8011b1c:	b9d8      	cbnz	r0, 8011b56 <_svfiprintf_r+0xea>
 8011b1e:	06d0      	lsls	r0, r2, #27
 8011b20:	bf44      	itt	mi
 8011b22:	2320      	movmi	r3, #32
 8011b24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011b28:	0711      	lsls	r1, r2, #28
 8011b2a:	bf44      	itt	mi
 8011b2c:	232b      	movmi	r3, #43	@ 0x2b
 8011b2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011b32:	f89a 3000 	ldrb.w	r3, [sl]
 8011b36:	2b2a      	cmp	r3, #42	@ 0x2a
 8011b38:	d015      	beq.n	8011b66 <_svfiprintf_r+0xfa>
 8011b3a:	9a07      	ldr	r2, [sp, #28]
 8011b3c:	4654      	mov	r4, sl
 8011b3e:	2000      	movs	r0, #0
 8011b40:	f04f 0c0a 	mov.w	ip, #10
 8011b44:	4621      	mov	r1, r4
 8011b46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011b4a:	3b30      	subs	r3, #48	@ 0x30
 8011b4c:	2b09      	cmp	r3, #9
 8011b4e:	d94b      	bls.n	8011be8 <_svfiprintf_r+0x17c>
 8011b50:	b1b0      	cbz	r0, 8011b80 <_svfiprintf_r+0x114>
 8011b52:	9207      	str	r2, [sp, #28]
 8011b54:	e014      	b.n	8011b80 <_svfiprintf_r+0x114>
 8011b56:	eba0 0308 	sub.w	r3, r0, r8
 8011b5a:	fa09 f303 	lsl.w	r3, r9, r3
 8011b5e:	4313      	orrs	r3, r2
 8011b60:	9304      	str	r3, [sp, #16]
 8011b62:	46a2      	mov	sl, r4
 8011b64:	e7d2      	b.n	8011b0c <_svfiprintf_r+0xa0>
 8011b66:	9b03      	ldr	r3, [sp, #12]
 8011b68:	1d19      	adds	r1, r3, #4
 8011b6a:	681b      	ldr	r3, [r3, #0]
 8011b6c:	9103      	str	r1, [sp, #12]
 8011b6e:	2b00      	cmp	r3, #0
 8011b70:	bfbb      	ittet	lt
 8011b72:	425b      	neglt	r3, r3
 8011b74:	f042 0202 	orrlt.w	r2, r2, #2
 8011b78:	9307      	strge	r3, [sp, #28]
 8011b7a:	9307      	strlt	r3, [sp, #28]
 8011b7c:	bfb8      	it	lt
 8011b7e:	9204      	strlt	r2, [sp, #16]
 8011b80:	7823      	ldrb	r3, [r4, #0]
 8011b82:	2b2e      	cmp	r3, #46	@ 0x2e
 8011b84:	d10a      	bne.n	8011b9c <_svfiprintf_r+0x130>
 8011b86:	7863      	ldrb	r3, [r4, #1]
 8011b88:	2b2a      	cmp	r3, #42	@ 0x2a
 8011b8a:	d132      	bne.n	8011bf2 <_svfiprintf_r+0x186>
 8011b8c:	9b03      	ldr	r3, [sp, #12]
 8011b8e:	1d1a      	adds	r2, r3, #4
 8011b90:	681b      	ldr	r3, [r3, #0]
 8011b92:	9203      	str	r2, [sp, #12]
 8011b94:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011b98:	3402      	adds	r4, #2
 8011b9a:	9305      	str	r3, [sp, #20]
 8011b9c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011c60 <_svfiprintf_r+0x1f4>
 8011ba0:	7821      	ldrb	r1, [r4, #0]
 8011ba2:	2203      	movs	r2, #3
 8011ba4:	4650      	mov	r0, sl
 8011ba6:	f7ee fb3b 	bl	8000220 <memchr>
 8011baa:	b138      	cbz	r0, 8011bbc <_svfiprintf_r+0x150>
 8011bac:	9b04      	ldr	r3, [sp, #16]
 8011bae:	eba0 000a 	sub.w	r0, r0, sl
 8011bb2:	2240      	movs	r2, #64	@ 0x40
 8011bb4:	4082      	lsls	r2, r0
 8011bb6:	4313      	orrs	r3, r2
 8011bb8:	3401      	adds	r4, #1
 8011bba:	9304      	str	r3, [sp, #16]
 8011bbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011bc0:	4824      	ldr	r0, [pc, #144]	@ (8011c54 <_svfiprintf_r+0x1e8>)
 8011bc2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011bc6:	2206      	movs	r2, #6
 8011bc8:	f7ee fb2a 	bl	8000220 <memchr>
 8011bcc:	2800      	cmp	r0, #0
 8011bce:	d036      	beq.n	8011c3e <_svfiprintf_r+0x1d2>
 8011bd0:	4b21      	ldr	r3, [pc, #132]	@ (8011c58 <_svfiprintf_r+0x1ec>)
 8011bd2:	bb1b      	cbnz	r3, 8011c1c <_svfiprintf_r+0x1b0>
 8011bd4:	9b03      	ldr	r3, [sp, #12]
 8011bd6:	3307      	adds	r3, #7
 8011bd8:	f023 0307 	bic.w	r3, r3, #7
 8011bdc:	3308      	adds	r3, #8
 8011bde:	9303      	str	r3, [sp, #12]
 8011be0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011be2:	4433      	add	r3, r6
 8011be4:	9309      	str	r3, [sp, #36]	@ 0x24
 8011be6:	e76a      	b.n	8011abe <_svfiprintf_r+0x52>
 8011be8:	fb0c 3202 	mla	r2, ip, r2, r3
 8011bec:	460c      	mov	r4, r1
 8011bee:	2001      	movs	r0, #1
 8011bf0:	e7a8      	b.n	8011b44 <_svfiprintf_r+0xd8>
 8011bf2:	2300      	movs	r3, #0
 8011bf4:	3401      	adds	r4, #1
 8011bf6:	9305      	str	r3, [sp, #20]
 8011bf8:	4619      	mov	r1, r3
 8011bfa:	f04f 0c0a 	mov.w	ip, #10
 8011bfe:	4620      	mov	r0, r4
 8011c00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011c04:	3a30      	subs	r2, #48	@ 0x30
 8011c06:	2a09      	cmp	r2, #9
 8011c08:	d903      	bls.n	8011c12 <_svfiprintf_r+0x1a6>
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d0c6      	beq.n	8011b9c <_svfiprintf_r+0x130>
 8011c0e:	9105      	str	r1, [sp, #20]
 8011c10:	e7c4      	b.n	8011b9c <_svfiprintf_r+0x130>
 8011c12:	fb0c 2101 	mla	r1, ip, r1, r2
 8011c16:	4604      	mov	r4, r0
 8011c18:	2301      	movs	r3, #1
 8011c1a:	e7f0      	b.n	8011bfe <_svfiprintf_r+0x192>
 8011c1c:	ab03      	add	r3, sp, #12
 8011c1e:	9300      	str	r3, [sp, #0]
 8011c20:	462a      	mov	r2, r5
 8011c22:	4b0e      	ldr	r3, [pc, #56]	@ (8011c5c <_svfiprintf_r+0x1f0>)
 8011c24:	a904      	add	r1, sp, #16
 8011c26:	4638      	mov	r0, r7
 8011c28:	f7fc ff30 	bl	800ea8c <_printf_float>
 8011c2c:	1c42      	adds	r2, r0, #1
 8011c2e:	4606      	mov	r6, r0
 8011c30:	d1d6      	bne.n	8011be0 <_svfiprintf_r+0x174>
 8011c32:	89ab      	ldrh	r3, [r5, #12]
 8011c34:	065b      	lsls	r3, r3, #25
 8011c36:	f53f af2d 	bmi.w	8011a94 <_svfiprintf_r+0x28>
 8011c3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011c3c:	e72c      	b.n	8011a98 <_svfiprintf_r+0x2c>
 8011c3e:	ab03      	add	r3, sp, #12
 8011c40:	9300      	str	r3, [sp, #0]
 8011c42:	462a      	mov	r2, r5
 8011c44:	4b05      	ldr	r3, [pc, #20]	@ (8011c5c <_svfiprintf_r+0x1f0>)
 8011c46:	a904      	add	r1, sp, #16
 8011c48:	4638      	mov	r0, r7
 8011c4a:	f7fd f9b7 	bl	800efbc <_printf_i>
 8011c4e:	e7ed      	b.n	8011c2c <_svfiprintf_r+0x1c0>
 8011c50:	08012c21 	.word	0x08012c21
 8011c54:	08012c2b 	.word	0x08012c2b
 8011c58:	0800ea8d 	.word	0x0800ea8d
 8011c5c:	080119b7 	.word	0x080119b7
 8011c60:	08012c27 	.word	0x08012c27

08011c64 <__sflush_r>:
 8011c64:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011c68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c6c:	0716      	lsls	r6, r2, #28
 8011c6e:	4605      	mov	r5, r0
 8011c70:	460c      	mov	r4, r1
 8011c72:	d454      	bmi.n	8011d1e <__sflush_r+0xba>
 8011c74:	684b      	ldr	r3, [r1, #4]
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	dc02      	bgt.n	8011c80 <__sflush_r+0x1c>
 8011c7a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	dd48      	ble.n	8011d12 <__sflush_r+0xae>
 8011c80:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011c82:	2e00      	cmp	r6, #0
 8011c84:	d045      	beq.n	8011d12 <__sflush_r+0xae>
 8011c86:	2300      	movs	r3, #0
 8011c88:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011c8c:	682f      	ldr	r7, [r5, #0]
 8011c8e:	6a21      	ldr	r1, [r4, #32]
 8011c90:	602b      	str	r3, [r5, #0]
 8011c92:	d030      	beq.n	8011cf6 <__sflush_r+0x92>
 8011c94:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011c96:	89a3      	ldrh	r3, [r4, #12]
 8011c98:	0759      	lsls	r1, r3, #29
 8011c9a:	d505      	bpl.n	8011ca8 <__sflush_r+0x44>
 8011c9c:	6863      	ldr	r3, [r4, #4]
 8011c9e:	1ad2      	subs	r2, r2, r3
 8011ca0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011ca2:	b10b      	cbz	r3, 8011ca8 <__sflush_r+0x44>
 8011ca4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011ca6:	1ad2      	subs	r2, r2, r3
 8011ca8:	2300      	movs	r3, #0
 8011caa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011cac:	6a21      	ldr	r1, [r4, #32]
 8011cae:	4628      	mov	r0, r5
 8011cb0:	47b0      	blx	r6
 8011cb2:	1c43      	adds	r3, r0, #1
 8011cb4:	89a3      	ldrh	r3, [r4, #12]
 8011cb6:	d106      	bne.n	8011cc6 <__sflush_r+0x62>
 8011cb8:	6829      	ldr	r1, [r5, #0]
 8011cba:	291d      	cmp	r1, #29
 8011cbc:	d82b      	bhi.n	8011d16 <__sflush_r+0xb2>
 8011cbe:	4a2a      	ldr	r2, [pc, #168]	@ (8011d68 <__sflush_r+0x104>)
 8011cc0:	410a      	asrs	r2, r1
 8011cc2:	07d6      	lsls	r6, r2, #31
 8011cc4:	d427      	bmi.n	8011d16 <__sflush_r+0xb2>
 8011cc6:	2200      	movs	r2, #0
 8011cc8:	6062      	str	r2, [r4, #4]
 8011cca:	04d9      	lsls	r1, r3, #19
 8011ccc:	6922      	ldr	r2, [r4, #16]
 8011cce:	6022      	str	r2, [r4, #0]
 8011cd0:	d504      	bpl.n	8011cdc <__sflush_r+0x78>
 8011cd2:	1c42      	adds	r2, r0, #1
 8011cd4:	d101      	bne.n	8011cda <__sflush_r+0x76>
 8011cd6:	682b      	ldr	r3, [r5, #0]
 8011cd8:	b903      	cbnz	r3, 8011cdc <__sflush_r+0x78>
 8011cda:	6560      	str	r0, [r4, #84]	@ 0x54
 8011cdc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011cde:	602f      	str	r7, [r5, #0]
 8011ce0:	b1b9      	cbz	r1, 8011d12 <__sflush_r+0xae>
 8011ce2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011ce6:	4299      	cmp	r1, r3
 8011ce8:	d002      	beq.n	8011cf0 <__sflush_r+0x8c>
 8011cea:	4628      	mov	r0, r5
 8011cec:	f7fe fcdc 	bl	80106a8 <_free_r>
 8011cf0:	2300      	movs	r3, #0
 8011cf2:	6363      	str	r3, [r4, #52]	@ 0x34
 8011cf4:	e00d      	b.n	8011d12 <__sflush_r+0xae>
 8011cf6:	2301      	movs	r3, #1
 8011cf8:	4628      	mov	r0, r5
 8011cfa:	47b0      	blx	r6
 8011cfc:	4602      	mov	r2, r0
 8011cfe:	1c50      	adds	r0, r2, #1
 8011d00:	d1c9      	bne.n	8011c96 <__sflush_r+0x32>
 8011d02:	682b      	ldr	r3, [r5, #0]
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d0c6      	beq.n	8011c96 <__sflush_r+0x32>
 8011d08:	2b1d      	cmp	r3, #29
 8011d0a:	d001      	beq.n	8011d10 <__sflush_r+0xac>
 8011d0c:	2b16      	cmp	r3, #22
 8011d0e:	d11e      	bne.n	8011d4e <__sflush_r+0xea>
 8011d10:	602f      	str	r7, [r5, #0]
 8011d12:	2000      	movs	r0, #0
 8011d14:	e022      	b.n	8011d5c <__sflush_r+0xf8>
 8011d16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011d1a:	b21b      	sxth	r3, r3
 8011d1c:	e01b      	b.n	8011d56 <__sflush_r+0xf2>
 8011d1e:	690f      	ldr	r7, [r1, #16]
 8011d20:	2f00      	cmp	r7, #0
 8011d22:	d0f6      	beq.n	8011d12 <__sflush_r+0xae>
 8011d24:	0793      	lsls	r3, r2, #30
 8011d26:	680e      	ldr	r6, [r1, #0]
 8011d28:	bf08      	it	eq
 8011d2a:	694b      	ldreq	r3, [r1, #20]
 8011d2c:	600f      	str	r7, [r1, #0]
 8011d2e:	bf18      	it	ne
 8011d30:	2300      	movne	r3, #0
 8011d32:	eba6 0807 	sub.w	r8, r6, r7
 8011d36:	608b      	str	r3, [r1, #8]
 8011d38:	f1b8 0f00 	cmp.w	r8, #0
 8011d3c:	dde9      	ble.n	8011d12 <__sflush_r+0xae>
 8011d3e:	6a21      	ldr	r1, [r4, #32]
 8011d40:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011d42:	4643      	mov	r3, r8
 8011d44:	463a      	mov	r2, r7
 8011d46:	4628      	mov	r0, r5
 8011d48:	47b0      	blx	r6
 8011d4a:	2800      	cmp	r0, #0
 8011d4c:	dc08      	bgt.n	8011d60 <__sflush_r+0xfc>
 8011d4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011d52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011d56:	81a3      	strh	r3, [r4, #12]
 8011d58:	f04f 30ff 	mov.w	r0, #4294967295
 8011d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d60:	4407      	add	r7, r0
 8011d62:	eba8 0800 	sub.w	r8, r8, r0
 8011d66:	e7e7      	b.n	8011d38 <__sflush_r+0xd4>
 8011d68:	dfbffffe 	.word	0xdfbffffe

08011d6c <_fflush_r>:
 8011d6c:	b538      	push	{r3, r4, r5, lr}
 8011d6e:	690b      	ldr	r3, [r1, #16]
 8011d70:	4605      	mov	r5, r0
 8011d72:	460c      	mov	r4, r1
 8011d74:	b913      	cbnz	r3, 8011d7c <_fflush_r+0x10>
 8011d76:	2500      	movs	r5, #0
 8011d78:	4628      	mov	r0, r5
 8011d7a:	bd38      	pop	{r3, r4, r5, pc}
 8011d7c:	b118      	cbz	r0, 8011d86 <_fflush_r+0x1a>
 8011d7e:	6a03      	ldr	r3, [r0, #32]
 8011d80:	b90b      	cbnz	r3, 8011d86 <_fflush_r+0x1a>
 8011d82:	f7fd fcdb 	bl	800f73c <__sinit>
 8011d86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	d0f3      	beq.n	8011d76 <_fflush_r+0xa>
 8011d8e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011d90:	07d0      	lsls	r0, r2, #31
 8011d92:	d404      	bmi.n	8011d9e <_fflush_r+0x32>
 8011d94:	0599      	lsls	r1, r3, #22
 8011d96:	d402      	bmi.n	8011d9e <_fflush_r+0x32>
 8011d98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011d9a:	f7fd fe18 	bl	800f9ce <__retarget_lock_acquire_recursive>
 8011d9e:	4628      	mov	r0, r5
 8011da0:	4621      	mov	r1, r4
 8011da2:	f7ff ff5f 	bl	8011c64 <__sflush_r>
 8011da6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011da8:	07da      	lsls	r2, r3, #31
 8011daa:	4605      	mov	r5, r0
 8011dac:	d4e4      	bmi.n	8011d78 <_fflush_r+0xc>
 8011dae:	89a3      	ldrh	r3, [r4, #12]
 8011db0:	059b      	lsls	r3, r3, #22
 8011db2:	d4e1      	bmi.n	8011d78 <_fflush_r+0xc>
 8011db4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011db6:	f7fd fe0b 	bl	800f9d0 <__retarget_lock_release_recursive>
 8011dba:	e7dd      	b.n	8011d78 <_fflush_r+0xc>

08011dbc <memmove>:
 8011dbc:	4288      	cmp	r0, r1
 8011dbe:	b510      	push	{r4, lr}
 8011dc0:	eb01 0402 	add.w	r4, r1, r2
 8011dc4:	d902      	bls.n	8011dcc <memmove+0x10>
 8011dc6:	4284      	cmp	r4, r0
 8011dc8:	4623      	mov	r3, r4
 8011dca:	d807      	bhi.n	8011ddc <memmove+0x20>
 8011dcc:	1e43      	subs	r3, r0, #1
 8011dce:	42a1      	cmp	r1, r4
 8011dd0:	d008      	beq.n	8011de4 <memmove+0x28>
 8011dd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011dd6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011dda:	e7f8      	b.n	8011dce <memmove+0x12>
 8011ddc:	4402      	add	r2, r0
 8011dde:	4601      	mov	r1, r0
 8011de0:	428a      	cmp	r2, r1
 8011de2:	d100      	bne.n	8011de6 <memmove+0x2a>
 8011de4:	bd10      	pop	{r4, pc}
 8011de6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011dea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011dee:	e7f7      	b.n	8011de0 <memmove+0x24>

08011df0 <_sbrk_r>:
 8011df0:	b538      	push	{r3, r4, r5, lr}
 8011df2:	4d06      	ldr	r5, [pc, #24]	@ (8011e0c <_sbrk_r+0x1c>)
 8011df4:	2300      	movs	r3, #0
 8011df6:	4604      	mov	r4, r0
 8011df8:	4608      	mov	r0, r1
 8011dfa:	602b      	str	r3, [r5, #0]
 8011dfc:	f7f0 f8a2 	bl	8001f44 <_sbrk>
 8011e00:	1c43      	adds	r3, r0, #1
 8011e02:	d102      	bne.n	8011e0a <_sbrk_r+0x1a>
 8011e04:	682b      	ldr	r3, [r5, #0]
 8011e06:	b103      	cbz	r3, 8011e0a <_sbrk_r+0x1a>
 8011e08:	6023      	str	r3, [r4, #0]
 8011e0a:	bd38      	pop	{r3, r4, r5, pc}
 8011e0c:	20000ab8 	.word	0x20000ab8

08011e10 <__assert_func>:
 8011e10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011e12:	4614      	mov	r4, r2
 8011e14:	461a      	mov	r2, r3
 8011e16:	4b09      	ldr	r3, [pc, #36]	@ (8011e3c <__assert_func+0x2c>)
 8011e18:	681b      	ldr	r3, [r3, #0]
 8011e1a:	4605      	mov	r5, r0
 8011e1c:	68d8      	ldr	r0, [r3, #12]
 8011e1e:	b954      	cbnz	r4, 8011e36 <__assert_func+0x26>
 8011e20:	4b07      	ldr	r3, [pc, #28]	@ (8011e40 <__assert_func+0x30>)
 8011e22:	461c      	mov	r4, r3
 8011e24:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011e28:	9100      	str	r1, [sp, #0]
 8011e2a:	462b      	mov	r3, r5
 8011e2c:	4905      	ldr	r1, [pc, #20]	@ (8011e44 <__assert_func+0x34>)
 8011e2e:	f000 f84f 	bl	8011ed0 <fiprintf>
 8011e32:	f000 f85f 	bl	8011ef4 <abort>
 8011e36:	4b04      	ldr	r3, [pc, #16]	@ (8011e48 <__assert_func+0x38>)
 8011e38:	e7f4      	b.n	8011e24 <__assert_func+0x14>
 8011e3a:	bf00      	nop
 8011e3c:	20000208 	.word	0x20000208
 8011e40:	08012c6d 	.word	0x08012c6d
 8011e44:	08012c3f 	.word	0x08012c3f
 8011e48:	08012c32 	.word	0x08012c32

08011e4c <_calloc_r>:
 8011e4c:	b570      	push	{r4, r5, r6, lr}
 8011e4e:	fba1 5402 	umull	r5, r4, r1, r2
 8011e52:	b93c      	cbnz	r4, 8011e64 <_calloc_r+0x18>
 8011e54:	4629      	mov	r1, r5
 8011e56:	f7fe ffd5 	bl	8010e04 <_malloc_r>
 8011e5a:	4606      	mov	r6, r0
 8011e5c:	b928      	cbnz	r0, 8011e6a <_calloc_r+0x1e>
 8011e5e:	2600      	movs	r6, #0
 8011e60:	4630      	mov	r0, r6
 8011e62:	bd70      	pop	{r4, r5, r6, pc}
 8011e64:	220c      	movs	r2, #12
 8011e66:	6002      	str	r2, [r0, #0]
 8011e68:	e7f9      	b.n	8011e5e <_calloc_r+0x12>
 8011e6a:	462a      	mov	r2, r5
 8011e6c:	4621      	mov	r1, r4
 8011e6e:	f7fd fd1f 	bl	800f8b0 <memset>
 8011e72:	e7f5      	b.n	8011e60 <_calloc_r+0x14>

08011e74 <_realloc_r>:
 8011e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e78:	4680      	mov	r8, r0
 8011e7a:	4615      	mov	r5, r2
 8011e7c:	460c      	mov	r4, r1
 8011e7e:	b921      	cbnz	r1, 8011e8a <_realloc_r+0x16>
 8011e80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011e84:	4611      	mov	r1, r2
 8011e86:	f7fe bfbd 	b.w	8010e04 <_malloc_r>
 8011e8a:	b92a      	cbnz	r2, 8011e98 <_realloc_r+0x24>
 8011e8c:	f7fe fc0c 	bl	80106a8 <_free_r>
 8011e90:	2400      	movs	r4, #0
 8011e92:	4620      	mov	r0, r4
 8011e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e98:	f000 f833 	bl	8011f02 <_malloc_usable_size_r>
 8011e9c:	4285      	cmp	r5, r0
 8011e9e:	4606      	mov	r6, r0
 8011ea0:	d802      	bhi.n	8011ea8 <_realloc_r+0x34>
 8011ea2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8011ea6:	d8f4      	bhi.n	8011e92 <_realloc_r+0x1e>
 8011ea8:	4629      	mov	r1, r5
 8011eaa:	4640      	mov	r0, r8
 8011eac:	f7fe ffaa 	bl	8010e04 <_malloc_r>
 8011eb0:	4607      	mov	r7, r0
 8011eb2:	2800      	cmp	r0, #0
 8011eb4:	d0ec      	beq.n	8011e90 <_realloc_r+0x1c>
 8011eb6:	42b5      	cmp	r5, r6
 8011eb8:	462a      	mov	r2, r5
 8011eba:	4621      	mov	r1, r4
 8011ebc:	bf28      	it	cs
 8011ebe:	4632      	movcs	r2, r6
 8011ec0:	f7fd fd87 	bl	800f9d2 <memcpy>
 8011ec4:	4621      	mov	r1, r4
 8011ec6:	4640      	mov	r0, r8
 8011ec8:	f7fe fbee 	bl	80106a8 <_free_r>
 8011ecc:	463c      	mov	r4, r7
 8011ece:	e7e0      	b.n	8011e92 <_realloc_r+0x1e>

08011ed0 <fiprintf>:
 8011ed0:	b40e      	push	{r1, r2, r3}
 8011ed2:	b503      	push	{r0, r1, lr}
 8011ed4:	4601      	mov	r1, r0
 8011ed6:	ab03      	add	r3, sp, #12
 8011ed8:	4805      	ldr	r0, [pc, #20]	@ (8011ef0 <fiprintf+0x20>)
 8011eda:	f853 2b04 	ldr.w	r2, [r3], #4
 8011ede:	6800      	ldr	r0, [r0, #0]
 8011ee0:	9301      	str	r3, [sp, #4]
 8011ee2:	f000 f83f 	bl	8011f64 <_vfiprintf_r>
 8011ee6:	b002      	add	sp, #8
 8011ee8:	f85d eb04 	ldr.w	lr, [sp], #4
 8011eec:	b003      	add	sp, #12
 8011eee:	4770      	bx	lr
 8011ef0:	20000208 	.word	0x20000208

08011ef4 <abort>:
 8011ef4:	b508      	push	{r3, lr}
 8011ef6:	2006      	movs	r0, #6
 8011ef8:	f000 fa08 	bl	801230c <raise>
 8011efc:	2001      	movs	r0, #1
 8011efe:	f7ef ffa9 	bl	8001e54 <_exit>

08011f02 <_malloc_usable_size_r>:
 8011f02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011f06:	1f18      	subs	r0, r3, #4
 8011f08:	2b00      	cmp	r3, #0
 8011f0a:	bfbc      	itt	lt
 8011f0c:	580b      	ldrlt	r3, [r1, r0]
 8011f0e:	18c0      	addlt	r0, r0, r3
 8011f10:	4770      	bx	lr

08011f12 <__sfputc_r>:
 8011f12:	6893      	ldr	r3, [r2, #8]
 8011f14:	3b01      	subs	r3, #1
 8011f16:	2b00      	cmp	r3, #0
 8011f18:	b410      	push	{r4}
 8011f1a:	6093      	str	r3, [r2, #8]
 8011f1c:	da08      	bge.n	8011f30 <__sfputc_r+0x1e>
 8011f1e:	6994      	ldr	r4, [r2, #24]
 8011f20:	42a3      	cmp	r3, r4
 8011f22:	db01      	blt.n	8011f28 <__sfputc_r+0x16>
 8011f24:	290a      	cmp	r1, #10
 8011f26:	d103      	bne.n	8011f30 <__sfputc_r+0x1e>
 8011f28:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011f2c:	f000 b932 	b.w	8012194 <__swbuf_r>
 8011f30:	6813      	ldr	r3, [r2, #0]
 8011f32:	1c58      	adds	r0, r3, #1
 8011f34:	6010      	str	r0, [r2, #0]
 8011f36:	7019      	strb	r1, [r3, #0]
 8011f38:	4608      	mov	r0, r1
 8011f3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011f3e:	4770      	bx	lr

08011f40 <__sfputs_r>:
 8011f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f42:	4606      	mov	r6, r0
 8011f44:	460f      	mov	r7, r1
 8011f46:	4614      	mov	r4, r2
 8011f48:	18d5      	adds	r5, r2, r3
 8011f4a:	42ac      	cmp	r4, r5
 8011f4c:	d101      	bne.n	8011f52 <__sfputs_r+0x12>
 8011f4e:	2000      	movs	r0, #0
 8011f50:	e007      	b.n	8011f62 <__sfputs_r+0x22>
 8011f52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f56:	463a      	mov	r2, r7
 8011f58:	4630      	mov	r0, r6
 8011f5a:	f7ff ffda 	bl	8011f12 <__sfputc_r>
 8011f5e:	1c43      	adds	r3, r0, #1
 8011f60:	d1f3      	bne.n	8011f4a <__sfputs_r+0xa>
 8011f62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011f64 <_vfiprintf_r>:
 8011f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f68:	460d      	mov	r5, r1
 8011f6a:	b09d      	sub	sp, #116	@ 0x74
 8011f6c:	4614      	mov	r4, r2
 8011f6e:	4698      	mov	r8, r3
 8011f70:	4606      	mov	r6, r0
 8011f72:	b118      	cbz	r0, 8011f7c <_vfiprintf_r+0x18>
 8011f74:	6a03      	ldr	r3, [r0, #32]
 8011f76:	b90b      	cbnz	r3, 8011f7c <_vfiprintf_r+0x18>
 8011f78:	f7fd fbe0 	bl	800f73c <__sinit>
 8011f7c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011f7e:	07d9      	lsls	r1, r3, #31
 8011f80:	d405      	bmi.n	8011f8e <_vfiprintf_r+0x2a>
 8011f82:	89ab      	ldrh	r3, [r5, #12]
 8011f84:	059a      	lsls	r2, r3, #22
 8011f86:	d402      	bmi.n	8011f8e <_vfiprintf_r+0x2a>
 8011f88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011f8a:	f7fd fd20 	bl	800f9ce <__retarget_lock_acquire_recursive>
 8011f8e:	89ab      	ldrh	r3, [r5, #12]
 8011f90:	071b      	lsls	r3, r3, #28
 8011f92:	d501      	bpl.n	8011f98 <_vfiprintf_r+0x34>
 8011f94:	692b      	ldr	r3, [r5, #16]
 8011f96:	b99b      	cbnz	r3, 8011fc0 <_vfiprintf_r+0x5c>
 8011f98:	4629      	mov	r1, r5
 8011f9a:	4630      	mov	r0, r6
 8011f9c:	f000 f938 	bl	8012210 <__swsetup_r>
 8011fa0:	b170      	cbz	r0, 8011fc0 <_vfiprintf_r+0x5c>
 8011fa2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011fa4:	07dc      	lsls	r4, r3, #31
 8011fa6:	d504      	bpl.n	8011fb2 <_vfiprintf_r+0x4e>
 8011fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8011fac:	b01d      	add	sp, #116	@ 0x74
 8011fae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fb2:	89ab      	ldrh	r3, [r5, #12]
 8011fb4:	0598      	lsls	r0, r3, #22
 8011fb6:	d4f7      	bmi.n	8011fa8 <_vfiprintf_r+0x44>
 8011fb8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011fba:	f7fd fd09 	bl	800f9d0 <__retarget_lock_release_recursive>
 8011fbe:	e7f3      	b.n	8011fa8 <_vfiprintf_r+0x44>
 8011fc0:	2300      	movs	r3, #0
 8011fc2:	9309      	str	r3, [sp, #36]	@ 0x24
 8011fc4:	2320      	movs	r3, #32
 8011fc6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011fca:	f8cd 800c 	str.w	r8, [sp, #12]
 8011fce:	2330      	movs	r3, #48	@ 0x30
 8011fd0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012180 <_vfiprintf_r+0x21c>
 8011fd4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011fd8:	f04f 0901 	mov.w	r9, #1
 8011fdc:	4623      	mov	r3, r4
 8011fde:	469a      	mov	sl, r3
 8011fe0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011fe4:	b10a      	cbz	r2, 8011fea <_vfiprintf_r+0x86>
 8011fe6:	2a25      	cmp	r2, #37	@ 0x25
 8011fe8:	d1f9      	bne.n	8011fde <_vfiprintf_r+0x7a>
 8011fea:	ebba 0b04 	subs.w	fp, sl, r4
 8011fee:	d00b      	beq.n	8012008 <_vfiprintf_r+0xa4>
 8011ff0:	465b      	mov	r3, fp
 8011ff2:	4622      	mov	r2, r4
 8011ff4:	4629      	mov	r1, r5
 8011ff6:	4630      	mov	r0, r6
 8011ff8:	f7ff ffa2 	bl	8011f40 <__sfputs_r>
 8011ffc:	3001      	adds	r0, #1
 8011ffe:	f000 80a7 	beq.w	8012150 <_vfiprintf_r+0x1ec>
 8012002:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012004:	445a      	add	r2, fp
 8012006:	9209      	str	r2, [sp, #36]	@ 0x24
 8012008:	f89a 3000 	ldrb.w	r3, [sl]
 801200c:	2b00      	cmp	r3, #0
 801200e:	f000 809f 	beq.w	8012150 <_vfiprintf_r+0x1ec>
 8012012:	2300      	movs	r3, #0
 8012014:	f04f 32ff 	mov.w	r2, #4294967295
 8012018:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801201c:	f10a 0a01 	add.w	sl, sl, #1
 8012020:	9304      	str	r3, [sp, #16]
 8012022:	9307      	str	r3, [sp, #28]
 8012024:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012028:	931a      	str	r3, [sp, #104]	@ 0x68
 801202a:	4654      	mov	r4, sl
 801202c:	2205      	movs	r2, #5
 801202e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012032:	4853      	ldr	r0, [pc, #332]	@ (8012180 <_vfiprintf_r+0x21c>)
 8012034:	f7ee f8f4 	bl	8000220 <memchr>
 8012038:	9a04      	ldr	r2, [sp, #16]
 801203a:	b9d8      	cbnz	r0, 8012074 <_vfiprintf_r+0x110>
 801203c:	06d1      	lsls	r1, r2, #27
 801203e:	bf44      	itt	mi
 8012040:	2320      	movmi	r3, #32
 8012042:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012046:	0713      	lsls	r3, r2, #28
 8012048:	bf44      	itt	mi
 801204a:	232b      	movmi	r3, #43	@ 0x2b
 801204c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012050:	f89a 3000 	ldrb.w	r3, [sl]
 8012054:	2b2a      	cmp	r3, #42	@ 0x2a
 8012056:	d015      	beq.n	8012084 <_vfiprintf_r+0x120>
 8012058:	9a07      	ldr	r2, [sp, #28]
 801205a:	4654      	mov	r4, sl
 801205c:	2000      	movs	r0, #0
 801205e:	f04f 0c0a 	mov.w	ip, #10
 8012062:	4621      	mov	r1, r4
 8012064:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012068:	3b30      	subs	r3, #48	@ 0x30
 801206a:	2b09      	cmp	r3, #9
 801206c:	d94b      	bls.n	8012106 <_vfiprintf_r+0x1a2>
 801206e:	b1b0      	cbz	r0, 801209e <_vfiprintf_r+0x13a>
 8012070:	9207      	str	r2, [sp, #28]
 8012072:	e014      	b.n	801209e <_vfiprintf_r+0x13a>
 8012074:	eba0 0308 	sub.w	r3, r0, r8
 8012078:	fa09 f303 	lsl.w	r3, r9, r3
 801207c:	4313      	orrs	r3, r2
 801207e:	9304      	str	r3, [sp, #16]
 8012080:	46a2      	mov	sl, r4
 8012082:	e7d2      	b.n	801202a <_vfiprintf_r+0xc6>
 8012084:	9b03      	ldr	r3, [sp, #12]
 8012086:	1d19      	adds	r1, r3, #4
 8012088:	681b      	ldr	r3, [r3, #0]
 801208a:	9103      	str	r1, [sp, #12]
 801208c:	2b00      	cmp	r3, #0
 801208e:	bfbb      	ittet	lt
 8012090:	425b      	neglt	r3, r3
 8012092:	f042 0202 	orrlt.w	r2, r2, #2
 8012096:	9307      	strge	r3, [sp, #28]
 8012098:	9307      	strlt	r3, [sp, #28]
 801209a:	bfb8      	it	lt
 801209c:	9204      	strlt	r2, [sp, #16]
 801209e:	7823      	ldrb	r3, [r4, #0]
 80120a0:	2b2e      	cmp	r3, #46	@ 0x2e
 80120a2:	d10a      	bne.n	80120ba <_vfiprintf_r+0x156>
 80120a4:	7863      	ldrb	r3, [r4, #1]
 80120a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80120a8:	d132      	bne.n	8012110 <_vfiprintf_r+0x1ac>
 80120aa:	9b03      	ldr	r3, [sp, #12]
 80120ac:	1d1a      	adds	r2, r3, #4
 80120ae:	681b      	ldr	r3, [r3, #0]
 80120b0:	9203      	str	r2, [sp, #12]
 80120b2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80120b6:	3402      	adds	r4, #2
 80120b8:	9305      	str	r3, [sp, #20]
 80120ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012190 <_vfiprintf_r+0x22c>
 80120be:	7821      	ldrb	r1, [r4, #0]
 80120c0:	2203      	movs	r2, #3
 80120c2:	4650      	mov	r0, sl
 80120c4:	f7ee f8ac 	bl	8000220 <memchr>
 80120c8:	b138      	cbz	r0, 80120da <_vfiprintf_r+0x176>
 80120ca:	9b04      	ldr	r3, [sp, #16]
 80120cc:	eba0 000a 	sub.w	r0, r0, sl
 80120d0:	2240      	movs	r2, #64	@ 0x40
 80120d2:	4082      	lsls	r2, r0
 80120d4:	4313      	orrs	r3, r2
 80120d6:	3401      	adds	r4, #1
 80120d8:	9304      	str	r3, [sp, #16]
 80120da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80120de:	4829      	ldr	r0, [pc, #164]	@ (8012184 <_vfiprintf_r+0x220>)
 80120e0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80120e4:	2206      	movs	r2, #6
 80120e6:	f7ee f89b 	bl	8000220 <memchr>
 80120ea:	2800      	cmp	r0, #0
 80120ec:	d03f      	beq.n	801216e <_vfiprintf_r+0x20a>
 80120ee:	4b26      	ldr	r3, [pc, #152]	@ (8012188 <_vfiprintf_r+0x224>)
 80120f0:	bb1b      	cbnz	r3, 801213a <_vfiprintf_r+0x1d6>
 80120f2:	9b03      	ldr	r3, [sp, #12]
 80120f4:	3307      	adds	r3, #7
 80120f6:	f023 0307 	bic.w	r3, r3, #7
 80120fa:	3308      	adds	r3, #8
 80120fc:	9303      	str	r3, [sp, #12]
 80120fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012100:	443b      	add	r3, r7
 8012102:	9309      	str	r3, [sp, #36]	@ 0x24
 8012104:	e76a      	b.n	8011fdc <_vfiprintf_r+0x78>
 8012106:	fb0c 3202 	mla	r2, ip, r2, r3
 801210a:	460c      	mov	r4, r1
 801210c:	2001      	movs	r0, #1
 801210e:	e7a8      	b.n	8012062 <_vfiprintf_r+0xfe>
 8012110:	2300      	movs	r3, #0
 8012112:	3401      	adds	r4, #1
 8012114:	9305      	str	r3, [sp, #20]
 8012116:	4619      	mov	r1, r3
 8012118:	f04f 0c0a 	mov.w	ip, #10
 801211c:	4620      	mov	r0, r4
 801211e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012122:	3a30      	subs	r2, #48	@ 0x30
 8012124:	2a09      	cmp	r2, #9
 8012126:	d903      	bls.n	8012130 <_vfiprintf_r+0x1cc>
 8012128:	2b00      	cmp	r3, #0
 801212a:	d0c6      	beq.n	80120ba <_vfiprintf_r+0x156>
 801212c:	9105      	str	r1, [sp, #20]
 801212e:	e7c4      	b.n	80120ba <_vfiprintf_r+0x156>
 8012130:	fb0c 2101 	mla	r1, ip, r1, r2
 8012134:	4604      	mov	r4, r0
 8012136:	2301      	movs	r3, #1
 8012138:	e7f0      	b.n	801211c <_vfiprintf_r+0x1b8>
 801213a:	ab03      	add	r3, sp, #12
 801213c:	9300      	str	r3, [sp, #0]
 801213e:	462a      	mov	r2, r5
 8012140:	4b12      	ldr	r3, [pc, #72]	@ (801218c <_vfiprintf_r+0x228>)
 8012142:	a904      	add	r1, sp, #16
 8012144:	4630      	mov	r0, r6
 8012146:	f7fc fca1 	bl	800ea8c <_printf_float>
 801214a:	4607      	mov	r7, r0
 801214c:	1c78      	adds	r0, r7, #1
 801214e:	d1d6      	bne.n	80120fe <_vfiprintf_r+0x19a>
 8012150:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012152:	07d9      	lsls	r1, r3, #31
 8012154:	d405      	bmi.n	8012162 <_vfiprintf_r+0x1fe>
 8012156:	89ab      	ldrh	r3, [r5, #12]
 8012158:	059a      	lsls	r2, r3, #22
 801215a:	d402      	bmi.n	8012162 <_vfiprintf_r+0x1fe>
 801215c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801215e:	f7fd fc37 	bl	800f9d0 <__retarget_lock_release_recursive>
 8012162:	89ab      	ldrh	r3, [r5, #12]
 8012164:	065b      	lsls	r3, r3, #25
 8012166:	f53f af1f 	bmi.w	8011fa8 <_vfiprintf_r+0x44>
 801216a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801216c:	e71e      	b.n	8011fac <_vfiprintf_r+0x48>
 801216e:	ab03      	add	r3, sp, #12
 8012170:	9300      	str	r3, [sp, #0]
 8012172:	462a      	mov	r2, r5
 8012174:	4b05      	ldr	r3, [pc, #20]	@ (801218c <_vfiprintf_r+0x228>)
 8012176:	a904      	add	r1, sp, #16
 8012178:	4630      	mov	r0, r6
 801217a:	f7fc ff1f 	bl	800efbc <_printf_i>
 801217e:	e7e4      	b.n	801214a <_vfiprintf_r+0x1e6>
 8012180:	08012c21 	.word	0x08012c21
 8012184:	08012c2b 	.word	0x08012c2b
 8012188:	0800ea8d 	.word	0x0800ea8d
 801218c:	08011f41 	.word	0x08011f41
 8012190:	08012c27 	.word	0x08012c27

08012194 <__swbuf_r>:
 8012194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012196:	460e      	mov	r6, r1
 8012198:	4614      	mov	r4, r2
 801219a:	4605      	mov	r5, r0
 801219c:	b118      	cbz	r0, 80121a6 <__swbuf_r+0x12>
 801219e:	6a03      	ldr	r3, [r0, #32]
 80121a0:	b90b      	cbnz	r3, 80121a6 <__swbuf_r+0x12>
 80121a2:	f7fd facb 	bl	800f73c <__sinit>
 80121a6:	69a3      	ldr	r3, [r4, #24]
 80121a8:	60a3      	str	r3, [r4, #8]
 80121aa:	89a3      	ldrh	r3, [r4, #12]
 80121ac:	071a      	lsls	r2, r3, #28
 80121ae:	d501      	bpl.n	80121b4 <__swbuf_r+0x20>
 80121b0:	6923      	ldr	r3, [r4, #16]
 80121b2:	b943      	cbnz	r3, 80121c6 <__swbuf_r+0x32>
 80121b4:	4621      	mov	r1, r4
 80121b6:	4628      	mov	r0, r5
 80121b8:	f000 f82a 	bl	8012210 <__swsetup_r>
 80121bc:	b118      	cbz	r0, 80121c6 <__swbuf_r+0x32>
 80121be:	f04f 37ff 	mov.w	r7, #4294967295
 80121c2:	4638      	mov	r0, r7
 80121c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80121c6:	6823      	ldr	r3, [r4, #0]
 80121c8:	6922      	ldr	r2, [r4, #16]
 80121ca:	1a98      	subs	r0, r3, r2
 80121cc:	6963      	ldr	r3, [r4, #20]
 80121ce:	b2f6      	uxtb	r6, r6
 80121d0:	4283      	cmp	r3, r0
 80121d2:	4637      	mov	r7, r6
 80121d4:	dc05      	bgt.n	80121e2 <__swbuf_r+0x4e>
 80121d6:	4621      	mov	r1, r4
 80121d8:	4628      	mov	r0, r5
 80121da:	f7ff fdc7 	bl	8011d6c <_fflush_r>
 80121de:	2800      	cmp	r0, #0
 80121e0:	d1ed      	bne.n	80121be <__swbuf_r+0x2a>
 80121e2:	68a3      	ldr	r3, [r4, #8]
 80121e4:	3b01      	subs	r3, #1
 80121e6:	60a3      	str	r3, [r4, #8]
 80121e8:	6823      	ldr	r3, [r4, #0]
 80121ea:	1c5a      	adds	r2, r3, #1
 80121ec:	6022      	str	r2, [r4, #0]
 80121ee:	701e      	strb	r6, [r3, #0]
 80121f0:	6962      	ldr	r2, [r4, #20]
 80121f2:	1c43      	adds	r3, r0, #1
 80121f4:	429a      	cmp	r2, r3
 80121f6:	d004      	beq.n	8012202 <__swbuf_r+0x6e>
 80121f8:	89a3      	ldrh	r3, [r4, #12]
 80121fa:	07db      	lsls	r3, r3, #31
 80121fc:	d5e1      	bpl.n	80121c2 <__swbuf_r+0x2e>
 80121fe:	2e0a      	cmp	r6, #10
 8012200:	d1df      	bne.n	80121c2 <__swbuf_r+0x2e>
 8012202:	4621      	mov	r1, r4
 8012204:	4628      	mov	r0, r5
 8012206:	f7ff fdb1 	bl	8011d6c <_fflush_r>
 801220a:	2800      	cmp	r0, #0
 801220c:	d0d9      	beq.n	80121c2 <__swbuf_r+0x2e>
 801220e:	e7d6      	b.n	80121be <__swbuf_r+0x2a>

08012210 <__swsetup_r>:
 8012210:	b538      	push	{r3, r4, r5, lr}
 8012212:	4b29      	ldr	r3, [pc, #164]	@ (80122b8 <__swsetup_r+0xa8>)
 8012214:	4605      	mov	r5, r0
 8012216:	6818      	ldr	r0, [r3, #0]
 8012218:	460c      	mov	r4, r1
 801221a:	b118      	cbz	r0, 8012224 <__swsetup_r+0x14>
 801221c:	6a03      	ldr	r3, [r0, #32]
 801221e:	b90b      	cbnz	r3, 8012224 <__swsetup_r+0x14>
 8012220:	f7fd fa8c 	bl	800f73c <__sinit>
 8012224:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012228:	0719      	lsls	r1, r3, #28
 801222a:	d422      	bmi.n	8012272 <__swsetup_r+0x62>
 801222c:	06da      	lsls	r2, r3, #27
 801222e:	d407      	bmi.n	8012240 <__swsetup_r+0x30>
 8012230:	2209      	movs	r2, #9
 8012232:	602a      	str	r2, [r5, #0]
 8012234:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012238:	81a3      	strh	r3, [r4, #12]
 801223a:	f04f 30ff 	mov.w	r0, #4294967295
 801223e:	e033      	b.n	80122a8 <__swsetup_r+0x98>
 8012240:	0758      	lsls	r0, r3, #29
 8012242:	d512      	bpl.n	801226a <__swsetup_r+0x5a>
 8012244:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012246:	b141      	cbz	r1, 801225a <__swsetup_r+0x4a>
 8012248:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801224c:	4299      	cmp	r1, r3
 801224e:	d002      	beq.n	8012256 <__swsetup_r+0x46>
 8012250:	4628      	mov	r0, r5
 8012252:	f7fe fa29 	bl	80106a8 <_free_r>
 8012256:	2300      	movs	r3, #0
 8012258:	6363      	str	r3, [r4, #52]	@ 0x34
 801225a:	89a3      	ldrh	r3, [r4, #12]
 801225c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012260:	81a3      	strh	r3, [r4, #12]
 8012262:	2300      	movs	r3, #0
 8012264:	6063      	str	r3, [r4, #4]
 8012266:	6923      	ldr	r3, [r4, #16]
 8012268:	6023      	str	r3, [r4, #0]
 801226a:	89a3      	ldrh	r3, [r4, #12]
 801226c:	f043 0308 	orr.w	r3, r3, #8
 8012270:	81a3      	strh	r3, [r4, #12]
 8012272:	6923      	ldr	r3, [r4, #16]
 8012274:	b94b      	cbnz	r3, 801228a <__swsetup_r+0x7a>
 8012276:	89a3      	ldrh	r3, [r4, #12]
 8012278:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801227c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012280:	d003      	beq.n	801228a <__swsetup_r+0x7a>
 8012282:	4621      	mov	r1, r4
 8012284:	4628      	mov	r0, r5
 8012286:	f000 f883 	bl	8012390 <__smakebuf_r>
 801228a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801228e:	f013 0201 	ands.w	r2, r3, #1
 8012292:	d00a      	beq.n	80122aa <__swsetup_r+0x9a>
 8012294:	2200      	movs	r2, #0
 8012296:	60a2      	str	r2, [r4, #8]
 8012298:	6962      	ldr	r2, [r4, #20]
 801229a:	4252      	negs	r2, r2
 801229c:	61a2      	str	r2, [r4, #24]
 801229e:	6922      	ldr	r2, [r4, #16]
 80122a0:	b942      	cbnz	r2, 80122b4 <__swsetup_r+0xa4>
 80122a2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80122a6:	d1c5      	bne.n	8012234 <__swsetup_r+0x24>
 80122a8:	bd38      	pop	{r3, r4, r5, pc}
 80122aa:	0799      	lsls	r1, r3, #30
 80122ac:	bf58      	it	pl
 80122ae:	6962      	ldrpl	r2, [r4, #20]
 80122b0:	60a2      	str	r2, [r4, #8]
 80122b2:	e7f4      	b.n	801229e <__swsetup_r+0x8e>
 80122b4:	2000      	movs	r0, #0
 80122b6:	e7f7      	b.n	80122a8 <__swsetup_r+0x98>
 80122b8:	20000208 	.word	0x20000208

080122bc <_raise_r>:
 80122bc:	291f      	cmp	r1, #31
 80122be:	b538      	push	{r3, r4, r5, lr}
 80122c0:	4605      	mov	r5, r0
 80122c2:	460c      	mov	r4, r1
 80122c4:	d904      	bls.n	80122d0 <_raise_r+0x14>
 80122c6:	2316      	movs	r3, #22
 80122c8:	6003      	str	r3, [r0, #0]
 80122ca:	f04f 30ff 	mov.w	r0, #4294967295
 80122ce:	bd38      	pop	{r3, r4, r5, pc}
 80122d0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80122d2:	b112      	cbz	r2, 80122da <_raise_r+0x1e>
 80122d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80122d8:	b94b      	cbnz	r3, 80122ee <_raise_r+0x32>
 80122da:	4628      	mov	r0, r5
 80122dc:	f000 f830 	bl	8012340 <_getpid_r>
 80122e0:	4622      	mov	r2, r4
 80122e2:	4601      	mov	r1, r0
 80122e4:	4628      	mov	r0, r5
 80122e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80122ea:	f000 b817 	b.w	801231c <_kill_r>
 80122ee:	2b01      	cmp	r3, #1
 80122f0:	d00a      	beq.n	8012308 <_raise_r+0x4c>
 80122f2:	1c59      	adds	r1, r3, #1
 80122f4:	d103      	bne.n	80122fe <_raise_r+0x42>
 80122f6:	2316      	movs	r3, #22
 80122f8:	6003      	str	r3, [r0, #0]
 80122fa:	2001      	movs	r0, #1
 80122fc:	e7e7      	b.n	80122ce <_raise_r+0x12>
 80122fe:	2100      	movs	r1, #0
 8012300:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012304:	4620      	mov	r0, r4
 8012306:	4798      	blx	r3
 8012308:	2000      	movs	r0, #0
 801230a:	e7e0      	b.n	80122ce <_raise_r+0x12>

0801230c <raise>:
 801230c:	4b02      	ldr	r3, [pc, #8]	@ (8012318 <raise+0xc>)
 801230e:	4601      	mov	r1, r0
 8012310:	6818      	ldr	r0, [r3, #0]
 8012312:	f7ff bfd3 	b.w	80122bc <_raise_r>
 8012316:	bf00      	nop
 8012318:	20000208 	.word	0x20000208

0801231c <_kill_r>:
 801231c:	b538      	push	{r3, r4, r5, lr}
 801231e:	4d07      	ldr	r5, [pc, #28]	@ (801233c <_kill_r+0x20>)
 8012320:	2300      	movs	r3, #0
 8012322:	4604      	mov	r4, r0
 8012324:	4608      	mov	r0, r1
 8012326:	4611      	mov	r1, r2
 8012328:	602b      	str	r3, [r5, #0]
 801232a:	f7ef fd83 	bl	8001e34 <_kill>
 801232e:	1c43      	adds	r3, r0, #1
 8012330:	d102      	bne.n	8012338 <_kill_r+0x1c>
 8012332:	682b      	ldr	r3, [r5, #0]
 8012334:	b103      	cbz	r3, 8012338 <_kill_r+0x1c>
 8012336:	6023      	str	r3, [r4, #0]
 8012338:	bd38      	pop	{r3, r4, r5, pc}
 801233a:	bf00      	nop
 801233c:	20000ab8 	.word	0x20000ab8

08012340 <_getpid_r>:
 8012340:	f7ef bd70 	b.w	8001e24 <_getpid>

08012344 <__swhatbuf_r>:
 8012344:	b570      	push	{r4, r5, r6, lr}
 8012346:	460c      	mov	r4, r1
 8012348:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801234c:	2900      	cmp	r1, #0
 801234e:	b096      	sub	sp, #88	@ 0x58
 8012350:	4615      	mov	r5, r2
 8012352:	461e      	mov	r6, r3
 8012354:	da0d      	bge.n	8012372 <__swhatbuf_r+0x2e>
 8012356:	89a3      	ldrh	r3, [r4, #12]
 8012358:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801235c:	f04f 0100 	mov.w	r1, #0
 8012360:	bf14      	ite	ne
 8012362:	2340      	movne	r3, #64	@ 0x40
 8012364:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012368:	2000      	movs	r0, #0
 801236a:	6031      	str	r1, [r6, #0]
 801236c:	602b      	str	r3, [r5, #0]
 801236e:	b016      	add	sp, #88	@ 0x58
 8012370:	bd70      	pop	{r4, r5, r6, pc}
 8012372:	466a      	mov	r2, sp
 8012374:	f000 f848 	bl	8012408 <_fstat_r>
 8012378:	2800      	cmp	r0, #0
 801237a:	dbec      	blt.n	8012356 <__swhatbuf_r+0x12>
 801237c:	9901      	ldr	r1, [sp, #4]
 801237e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012382:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012386:	4259      	negs	r1, r3
 8012388:	4159      	adcs	r1, r3
 801238a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801238e:	e7eb      	b.n	8012368 <__swhatbuf_r+0x24>

08012390 <__smakebuf_r>:
 8012390:	898b      	ldrh	r3, [r1, #12]
 8012392:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012394:	079d      	lsls	r5, r3, #30
 8012396:	4606      	mov	r6, r0
 8012398:	460c      	mov	r4, r1
 801239a:	d507      	bpl.n	80123ac <__smakebuf_r+0x1c>
 801239c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80123a0:	6023      	str	r3, [r4, #0]
 80123a2:	6123      	str	r3, [r4, #16]
 80123a4:	2301      	movs	r3, #1
 80123a6:	6163      	str	r3, [r4, #20]
 80123a8:	b003      	add	sp, #12
 80123aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80123ac:	ab01      	add	r3, sp, #4
 80123ae:	466a      	mov	r2, sp
 80123b0:	f7ff ffc8 	bl	8012344 <__swhatbuf_r>
 80123b4:	9f00      	ldr	r7, [sp, #0]
 80123b6:	4605      	mov	r5, r0
 80123b8:	4639      	mov	r1, r7
 80123ba:	4630      	mov	r0, r6
 80123bc:	f7fe fd22 	bl	8010e04 <_malloc_r>
 80123c0:	b948      	cbnz	r0, 80123d6 <__smakebuf_r+0x46>
 80123c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80123c6:	059a      	lsls	r2, r3, #22
 80123c8:	d4ee      	bmi.n	80123a8 <__smakebuf_r+0x18>
 80123ca:	f023 0303 	bic.w	r3, r3, #3
 80123ce:	f043 0302 	orr.w	r3, r3, #2
 80123d2:	81a3      	strh	r3, [r4, #12]
 80123d4:	e7e2      	b.n	801239c <__smakebuf_r+0xc>
 80123d6:	89a3      	ldrh	r3, [r4, #12]
 80123d8:	6020      	str	r0, [r4, #0]
 80123da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80123de:	81a3      	strh	r3, [r4, #12]
 80123e0:	9b01      	ldr	r3, [sp, #4]
 80123e2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80123e6:	b15b      	cbz	r3, 8012400 <__smakebuf_r+0x70>
 80123e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80123ec:	4630      	mov	r0, r6
 80123ee:	f000 f81d 	bl	801242c <_isatty_r>
 80123f2:	b128      	cbz	r0, 8012400 <__smakebuf_r+0x70>
 80123f4:	89a3      	ldrh	r3, [r4, #12]
 80123f6:	f023 0303 	bic.w	r3, r3, #3
 80123fa:	f043 0301 	orr.w	r3, r3, #1
 80123fe:	81a3      	strh	r3, [r4, #12]
 8012400:	89a3      	ldrh	r3, [r4, #12]
 8012402:	431d      	orrs	r5, r3
 8012404:	81a5      	strh	r5, [r4, #12]
 8012406:	e7cf      	b.n	80123a8 <__smakebuf_r+0x18>

08012408 <_fstat_r>:
 8012408:	b538      	push	{r3, r4, r5, lr}
 801240a:	4d07      	ldr	r5, [pc, #28]	@ (8012428 <_fstat_r+0x20>)
 801240c:	2300      	movs	r3, #0
 801240e:	4604      	mov	r4, r0
 8012410:	4608      	mov	r0, r1
 8012412:	4611      	mov	r1, r2
 8012414:	602b      	str	r3, [r5, #0]
 8012416:	f7ef fd6d 	bl	8001ef4 <_fstat>
 801241a:	1c43      	adds	r3, r0, #1
 801241c:	d102      	bne.n	8012424 <_fstat_r+0x1c>
 801241e:	682b      	ldr	r3, [r5, #0]
 8012420:	b103      	cbz	r3, 8012424 <_fstat_r+0x1c>
 8012422:	6023      	str	r3, [r4, #0]
 8012424:	bd38      	pop	{r3, r4, r5, pc}
 8012426:	bf00      	nop
 8012428:	20000ab8 	.word	0x20000ab8

0801242c <_isatty_r>:
 801242c:	b538      	push	{r3, r4, r5, lr}
 801242e:	4d06      	ldr	r5, [pc, #24]	@ (8012448 <_isatty_r+0x1c>)
 8012430:	2300      	movs	r3, #0
 8012432:	4604      	mov	r4, r0
 8012434:	4608      	mov	r0, r1
 8012436:	602b      	str	r3, [r5, #0]
 8012438:	f7ef fd6c 	bl	8001f14 <_isatty>
 801243c:	1c43      	adds	r3, r0, #1
 801243e:	d102      	bne.n	8012446 <_isatty_r+0x1a>
 8012440:	682b      	ldr	r3, [r5, #0]
 8012442:	b103      	cbz	r3, 8012446 <_isatty_r+0x1a>
 8012444:	6023      	str	r3, [r4, #0]
 8012446:	bd38      	pop	{r3, r4, r5, pc}
 8012448:	20000ab8 	.word	0x20000ab8

0801244c <fmod>:
 801244c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801244e:	ed2d 8b02 	vpush	{d8}
 8012452:	ec57 6b10 	vmov	r6, r7, d0
 8012456:	ec55 4b11 	vmov	r4, r5, d1
 801245a:	f000 f825 	bl	80124a8 <__ieee754_fmod>
 801245e:	4622      	mov	r2, r4
 8012460:	462b      	mov	r3, r5
 8012462:	4630      	mov	r0, r6
 8012464:	4639      	mov	r1, r7
 8012466:	eeb0 8a40 	vmov.f32	s16, s0
 801246a:	eef0 8a60 	vmov.f32	s17, s1
 801246e:	f7ee fb85 	bl	8000b7c <__aeabi_dcmpun>
 8012472:	b990      	cbnz	r0, 801249a <fmod+0x4e>
 8012474:	2200      	movs	r2, #0
 8012476:	2300      	movs	r3, #0
 8012478:	4620      	mov	r0, r4
 801247a:	4629      	mov	r1, r5
 801247c:	f7ee fb4c 	bl	8000b18 <__aeabi_dcmpeq>
 8012480:	b158      	cbz	r0, 801249a <fmod+0x4e>
 8012482:	f7fd fa79 	bl	800f978 <__errno>
 8012486:	2321      	movs	r3, #33	@ 0x21
 8012488:	6003      	str	r3, [r0, #0]
 801248a:	2200      	movs	r2, #0
 801248c:	2300      	movs	r3, #0
 801248e:	4610      	mov	r0, r2
 8012490:	4619      	mov	r1, r3
 8012492:	f7ee fa03 	bl	800089c <__aeabi_ddiv>
 8012496:	ec41 0b18 	vmov	d8, r0, r1
 801249a:	eeb0 0a48 	vmov.f32	s0, s16
 801249e:	eef0 0a68 	vmov.f32	s1, s17
 80124a2:	ecbd 8b02 	vpop	{d8}
 80124a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080124a8 <__ieee754_fmod>:
 80124a8:	ec53 2b11 	vmov	r2, r3, d1
 80124ac:	f023 4c00 	bic.w	ip, r3, #2147483648	@ 0x80000000
 80124b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80124b4:	ea52 040c 	orrs.w	r4, r2, ip
 80124b8:	ec51 0b10 	vmov	r0, r1, d0
 80124bc:	461e      	mov	r6, r3
 80124be:	4617      	mov	r7, r2
 80124c0:	4696      	mov	lr, r2
 80124c2:	d00c      	beq.n	80124de <__ieee754_fmod+0x36>
 80124c4:	4c77      	ldr	r4, [pc, #476]	@ (80126a4 <__ieee754_fmod+0x1fc>)
 80124c6:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 80124ca:	45a0      	cmp	r8, r4
 80124cc:	4689      	mov	r9, r1
 80124ce:	d806      	bhi.n	80124de <__ieee754_fmod+0x36>
 80124d0:	4254      	negs	r4, r2
 80124d2:	4d75      	ldr	r5, [pc, #468]	@ (80126a8 <__ieee754_fmod+0x200>)
 80124d4:	4314      	orrs	r4, r2
 80124d6:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 80124da:	42ac      	cmp	r4, r5
 80124dc:	d909      	bls.n	80124f2 <__ieee754_fmod+0x4a>
 80124de:	f7ee f8b3 	bl	8000648 <__aeabi_dmul>
 80124e2:	4602      	mov	r2, r0
 80124e4:	460b      	mov	r3, r1
 80124e6:	f7ee f9d9 	bl	800089c <__aeabi_ddiv>
 80124ea:	ec41 0b10 	vmov	d0, r0, r1
 80124ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80124f2:	45e0      	cmp	r8, ip
 80124f4:	4682      	mov	sl, r0
 80124f6:	4604      	mov	r4, r0
 80124f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80124fc:	dc09      	bgt.n	8012512 <__ieee754_fmod+0x6a>
 80124fe:	dbf4      	blt.n	80124ea <__ieee754_fmod+0x42>
 8012500:	4282      	cmp	r2, r0
 8012502:	d8f2      	bhi.n	80124ea <__ieee754_fmod+0x42>
 8012504:	d105      	bne.n	8012512 <__ieee754_fmod+0x6a>
 8012506:	4b69      	ldr	r3, [pc, #420]	@ (80126ac <__ieee754_fmod+0x204>)
 8012508:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 801250c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012510:	e7eb      	b.n	80124ea <__ieee754_fmod+0x42>
 8012512:	4a65      	ldr	r2, [pc, #404]	@ (80126a8 <__ieee754_fmod+0x200>)
 8012514:	ea19 0f02 	tst.w	r9, r2
 8012518:	d148      	bne.n	80125ac <__ieee754_fmod+0x104>
 801251a:	f1b8 0f00 	cmp.w	r8, #0
 801251e:	d13d      	bne.n	801259c <__ieee754_fmod+0xf4>
 8012520:	4963      	ldr	r1, [pc, #396]	@ (80126b0 <__ieee754_fmod+0x208>)
 8012522:	4653      	mov	r3, sl
 8012524:	2b00      	cmp	r3, #0
 8012526:	dc36      	bgt.n	8012596 <__ieee754_fmod+0xee>
 8012528:	4216      	tst	r6, r2
 801252a:	d14f      	bne.n	80125cc <__ieee754_fmod+0x124>
 801252c:	f1bc 0f00 	cmp.w	ip, #0
 8012530:	d144      	bne.n	80125bc <__ieee754_fmod+0x114>
 8012532:	4a5f      	ldr	r2, [pc, #380]	@ (80126b0 <__ieee754_fmod+0x208>)
 8012534:	463b      	mov	r3, r7
 8012536:	2b00      	cmp	r3, #0
 8012538:	dc3d      	bgt.n	80125b6 <__ieee754_fmod+0x10e>
 801253a:	485e      	ldr	r0, [pc, #376]	@ (80126b4 <__ieee754_fmod+0x20c>)
 801253c:	4281      	cmp	r1, r0
 801253e:	db4a      	blt.n	80125d6 <__ieee754_fmod+0x12e>
 8012540:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012544:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8012548:	485a      	ldr	r0, [pc, #360]	@ (80126b4 <__ieee754_fmod+0x20c>)
 801254a:	4282      	cmp	r2, r0
 801254c:	db57      	blt.n	80125fe <__ieee754_fmod+0x156>
 801254e:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8012552:	f446 1680 	orr.w	r6, r6, #1048576	@ 0x100000
 8012556:	1a89      	subs	r1, r1, r2
 8012558:	1b98      	subs	r0, r3, r6
 801255a:	eba4 070e 	sub.w	r7, r4, lr
 801255e:	2900      	cmp	r1, #0
 8012560:	d162      	bne.n	8012628 <__ieee754_fmod+0x180>
 8012562:	4574      	cmp	r4, lr
 8012564:	bf38      	it	cc
 8012566:	f100 30ff 	addcc.w	r0, r0, #4294967295
 801256a:	2800      	cmp	r0, #0
 801256c:	bfa4      	itt	ge
 801256e:	463c      	movge	r4, r7
 8012570:	4603      	movge	r3, r0
 8012572:	ea53 0104 	orrs.w	r1, r3, r4
 8012576:	d0c6      	beq.n	8012506 <__ieee754_fmod+0x5e>
 8012578:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801257c:	db69      	blt.n	8012652 <__ieee754_fmod+0x1aa>
 801257e:	494d      	ldr	r1, [pc, #308]	@ (80126b4 <__ieee754_fmod+0x20c>)
 8012580:	428a      	cmp	r2, r1
 8012582:	db6c      	blt.n	801265e <__ieee754_fmod+0x1b6>
 8012584:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8012588:	432b      	orrs	r3, r5
 801258a:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 801258e:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8012592:	4620      	mov	r0, r4
 8012594:	e7a9      	b.n	80124ea <__ieee754_fmod+0x42>
 8012596:	3901      	subs	r1, #1
 8012598:	005b      	lsls	r3, r3, #1
 801259a:	e7c3      	b.n	8012524 <__ieee754_fmod+0x7c>
 801259c:	4945      	ldr	r1, [pc, #276]	@ (80126b4 <__ieee754_fmod+0x20c>)
 801259e:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	ddc0      	ble.n	8012528 <__ieee754_fmod+0x80>
 80125a6:	3901      	subs	r1, #1
 80125a8:	005b      	lsls	r3, r3, #1
 80125aa:	e7fa      	b.n	80125a2 <__ieee754_fmod+0xfa>
 80125ac:	ea4f 5128 	mov.w	r1, r8, asr #20
 80125b0:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 80125b4:	e7b8      	b.n	8012528 <__ieee754_fmod+0x80>
 80125b6:	3a01      	subs	r2, #1
 80125b8:	005b      	lsls	r3, r3, #1
 80125ba:	e7bc      	b.n	8012536 <__ieee754_fmod+0x8e>
 80125bc:	4a3d      	ldr	r2, [pc, #244]	@ (80126b4 <__ieee754_fmod+0x20c>)
 80125be:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 80125c2:	2b00      	cmp	r3, #0
 80125c4:	ddb9      	ble.n	801253a <__ieee754_fmod+0x92>
 80125c6:	3a01      	subs	r2, #1
 80125c8:	005b      	lsls	r3, r3, #1
 80125ca:	e7fa      	b.n	80125c2 <__ieee754_fmod+0x11a>
 80125cc:	ea4f 522c 	mov.w	r2, ip, asr #20
 80125d0:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80125d4:	e7b1      	b.n	801253a <__ieee754_fmod+0x92>
 80125d6:	1a40      	subs	r0, r0, r1
 80125d8:	281f      	cmp	r0, #31
 80125da:	dc0a      	bgt.n	80125f2 <__ieee754_fmod+0x14a>
 80125dc:	f201 431e 	addw	r3, r1, #1054	@ 0x41e
 80125e0:	fa08 f800 	lsl.w	r8, r8, r0
 80125e4:	fa2a f303 	lsr.w	r3, sl, r3
 80125e8:	ea43 0308 	orr.w	r3, r3, r8
 80125ec:	fa0a f400 	lsl.w	r4, sl, r0
 80125f0:	e7aa      	b.n	8012548 <__ieee754_fmod+0xa0>
 80125f2:	4b31      	ldr	r3, [pc, #196]	@ (80126b8 <__ieee754_fmod+0x210>)
 80125f4:	1a5b      	subs	r3, r3, r1
 80125f6:	fa0a f303 	lsl.w	r3, sl, r3
 80125fa:	2400      	movs	r4, #0
 80125fc:	e7a4      	b.n	8012548 <__ieee754_fmod+0xa0>
 80125fe:	1a80      	subs	r0, r0, r2
 8012600:	281f      	cmp	r0, #31
 8012602:	dc0a      	bgt.n	801261a <__ieee754_fmod+0x172>
 8012604:	f202 461e 	addw	r6, r2, #1054	@ 0x41e
 8012608:	fa0c fc00 	lsl.w	ip, ip, r0
 801260c:	fa27 f606 	lsr.w	r6, r7, r6
 8012610:	ea46 060c 	orr.w	r6, r6, ip
 8012614:	fa07 fe00 	lsl.w	lr, r7, r0
 8012618:	e79d      	b.n	8012556 <__ieee754_fmod+0xae>
 801261a:	4e27      	ldr	r6, [pc, #156]	@ (80126b8 <__ieee754_fmod+0x210>)
 801261c:	1ab6      	subs	r6, r6, r2
 801261e:	fa07 f606 	lsl.w	r6, r7, r6
 8012622:	f04f 0e00 	mov.w	lr, #0
 8012626:	e796      	b.n	8012556 <__ieee754_fmod+0xae>
 8012628:	4574      	cmp	r4, lr
 801262a:	bf38      	it	cc
 801262c:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8012630:	2800      	cmp	r0, #0
 8012632:	da05      	bge.n	8012640 <__ieee754_fmod+0x198>
 8012634:	0fe0      	lsrs	r0, r4, #31
 8012636:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801263a:	0064      	lsls	r4, r4, #1
 801263c:	3901      	subs	r1, #1
 801263e:	e78b      	b.n	8012558 <__ieee754_fmod+0xb0>
 8012640:	ea50 0307 	orrs.w	r3, r0, r7
 8012644:	f43f af5f 	beq.w	8012506 <__ieee754_fmod+0x5e>
 8012648:	0ffb      	lsrs	r3, r7, #31
 801264a:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 801264e:	007c      	lsls	r4, r7, #1
 8012650:	e7f4      	b.n	801263c <__ieee754_fmod+0x194>
 8012652:	0fe1      	lsrs	r1, r4, #31
 8012654:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8012658:	0064      	lsls	r4, r4, #1
 801265a:	3a01      	subs	r2, #1
 801265c:	e78c      	b.n	8012578 <__ieee754_fmod+0xd0>
 801265e:	1a89      	subs	r1, r1, r2
 8012660:	2914      	cmp	r1, #20
 8012662:	dc0a      	bgt.n	801267a <__ieee754_fmod+0x1d2>
 8012664:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 8012668:	fa03 f202 	lsl.w	r2, r3, r2
 801266c:	40cc      	lsrs	r4, r1
 801266e:	4322      	orrs	r2, r4
 8012670:	410b      	asrs	r3, r1
 8012672:	ea43 0105 	orr.w	r1, r3, r5
 8012676:	4610      	mov	r0, r2
 8012678:	e737      	b.n	80124ea <__ieee754_fmod+0x42>
 801267a:	291f      	cmp	r1, #31
 801267c:	dc07      	bgt.n	801268e <__ieee754_fmod+0x1e6>
 801267e:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 8012682:	40cc      	lsrs	r4, r1
 8012684:	fa03 f202 	lsl.w	r2, r3, r2
 8012688:	4322      	orrs	r2, r4
 801268a:	462b      	mov	r3, r5
 801268c:	e7f1      	b.n	8012672 <__ieee754_fmod+0x1ca>
 801268e:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 8012692:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 8012696:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 801269a:	32e2      	adds	r2, #226	@ 0xe2
 801269c:	fa43 f202 	asr.w	r2, r3, r2
 80126a0:	e7f3      	b.n	801268a <__ieee754_fmod+0x1e2>
 80126a2:	bf00      	nop
 80126a4:	7fefffff 	.word	0x7fefffff
 80126a8:	7ff00000 	.word	0x7ff00000
 80126ac:	08012c70 	.word	0x08012c70
 80126b0:	fffffbed 	.word	0xfffffbed
 80126b4:	fffffc02 	.word	0xfffffc02
 80126b8:	fffffbe2 	.word	0xfffffbe2

080126bc <_init>:
 80126bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80126be:	bf00      	nop
 80126c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80126c2:	bc08      	pop	{r3}
 80126c4:	469e      	mov	lr, r3
 80126c6:	4770      	bx	lr

080126c8 <_fini>:
 80126c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80126ca:	bf00      	nop
 80126cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80126ce:	bc08      	pop	{r3}
 80126d0:	469e      	mov	lr, r3
 80126d2:	4770      	bx	lr
=======
 800efea:	2300      	movs	r3, #0
    }
}
 800efec:	4618      	mov	r0, r3
 800efee:	46bd      	mov	sp, r7
 800eff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eff4:	4770      	bx	lr
 800eff6:	bf00      	nop
 800eff8:	200009d9 	.word	0x200009d9

0800effc <atof>:
 800effc:	2100      	movs	r1, #0
 800effe:	f000 be09 	b.w	800fc14 <strtod>

0800f002 <sulp>:
 800f002:	b570      	push	{r4, r5, r6, lr}
 800f004:	4604      	mov	r4, r0
 800f006:	460d      	mov	r5, r1
 800f008:	ec45 4b10 	vmov	d0, r4, r5
 800f00c:	4616      	mov	r6, r2
 800f00e:	f003 fc7b 	bl	8012908 <__ulp>
 800f012:	ec51 0b10 	vmov	r0, r1, d0
 800f016:	b17e      	cbz	r6, 800f038 <sulp+0x36>
 800f018:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800f01c:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800f020:	2b00      	cmp	r3, #0
 800f022:	dd09      	ble.n	800f038 <sulp+0x36>
 800f024:	051b      	lsls	r3, r3, #20
 800f026:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800f02a:	2400      	movs	r4, #0
 800f02c:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800f030:	4622      	mov	r2, r4
 800f032:	462b      	mov	r3, r5
 800f034:	f7f1 fb08 	bl	8000648 <__aeabi_dmul>
 800f038:	ec41 0b10 	vmov	d0, r0, r1
 800f03c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f040 <_strtod_l>:
 800f040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f044:	b09f      	sub	sp, #124	@ 0x7c
 800f046:	460c      	mov	r4, r1
 800f048:	9217      	str	r2, [sp, #92]	@ 0x5c
 800f04a:	2200      	movs	r2, #0
 800f04c:	921a      	str	r2, [sp, #104]	@ 0x68
 800f04e:	9005      	str	r0, [sp, #20]
 800f050:	f04f 0a00 	mov.w	sl, #0
 800f054:	f04f 0b00 	mov.w	fp, #0
 800f058:	460a      	mov	r2, r1
 800f05a:	9219      	str	r2, [sp, #100]	@ 0x64
 800f05c:	7811      	ldrb	r1, [r2, #0]
 800f05e:	292b      	cmp	r1, #43	@ 0x2b
 800f060:	d04a      	beq.n	800f0f8 <_strtod_l+0xb8>
 800f062:	d838      	bhi.n	800f0d6 <_strtod_l+0x96>
 800f064:	290d      	cmp	r1, #13
 800f066:	d832      	bhi.n	800f0ce <_strtod_l+0x8e>
 800f068:	2908      	cmp	r1, #8
 800f06a:	d832      	bhi.n	800f0d2 <_strtod_l+0x92>
 800f06c:	2900      	cmp	r1, #0
 800f06e:	d03b      	beq.n	800f0e8 <_strtod_l+0xa8>
 800f070:	2200      	movs	r2, #0
 800f072:	920b      	str	r2, [sp, #44]	@ 0x2c
 800f074:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800f076:	782a      	ldrb	r2, [r5, #0]
 800f078:	2a30      	cmp	r2, #48	@ 0x30
 800f07a:	f040 80b3 	bne.w	800f1e4 <_strtod_l+0x1a4>
 800f07e:	786a      	ldrb	r2, [r5, #1]
 800f080:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800f084:	2a58      	cmp	r2, #88	@ 0x58
 800f086:	d16e      	bne.n	800f166 <_strtod_l+0x126>
 800f088:	9302      	str	r3, [sp, #8]
 800f08a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f08c:	9301      	str	r3, [sp, #4]
 800f08e:	ab1a      	add	r3, sp, #104	@ 0x68
 800f090:	9300      	str	r3, [sp, #0]
 800f092:	4a8e      	ldr	r2, [pc, #568]	@ (800f2cc <_strtod_l+0x28c>)
 800f094:	9805      	ldr	r0, [sp, #20]
 800f096:	ab1b      	add	r3, sp, #108	@ 0x6c
 800f098:	a919      	add	r1, sp, #100	@ 0x64
 800f09a:	f002 fd27 	bl	8011aec <__gethex>
 800f09e:	f010 060f 	ands.w	r6, r0, #15
 800f0a2:	4604      	mov	r4, r0
 800f0a4:	d005      	beq.n	800f0b2 <_strtod_l+0x72>
 800f0a6:	2e06      	cmp	r6, #6
 800f0a8:	d128      	bne.n	800f0fc <_strtod_l+0xbc>
 800f0aa:	3501      	adds	r5, #1
 800f0ac:	2300      	movs	r3, #0
 800f0ae:	9519      	str	r5, [sp, #100]	@ 0x64
 800f0b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f0b2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	f040 858e 	bne.w	800fbd6 <_strtod_l+0xb96>
 800f0ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f0bc:	b1cb      	cbz	r3, 800f0f2 <_strtod_l+0xb2>
 800f0be:	4652      	mov	r2, sl
 800f0c0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800f0c4:	ec43 2b10 	vmov	d0, r2, r3
 800f0c8:	b01f      	add	sp, #124	@ 0x7c
 800f0ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0ce:	2920      	cmp	r1, #32
 800f0d0:	d1ce      	bne.n	800f070 <_strtod_l+0x30>
 800f0d2:	3201      	adds	r2, #1
 800f0d4:	e7c1      	b.n	800f05a <_strtod_l+0x1a>
 800f0d6:	292d      	cmp	r1, #45	@ 0x2d
 800f0d8:	d1ca      	bne.n	800f070 <_strtod_l+0x30>
 800f0da:	2101      	movs	r1, #1
 800f0dc:	910b      	str	r1, [sp, #44]	@ 0x2c
 800f0de:	1c51      	adds	r1, r2, #1
 800f0e0:	9119      	str	r1, [sp, #100]	@ 0x64
 800f0e2:	7852      	ldrb	r2, [r2, #1]
 800f0e4:	2a00      	cmp	r2, #0
 800f0e6:	d1c5      	bne.n	800f074 <_strtod_l+0x34>
 800f0e8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f0ea:	9419      	str	r4, [sp, #100]	@ 0x64
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	f040 8570 	bne.w	800fbd2 <_strtod_l+0xb92>
 800f0f2:	4652      	mov	r2, sl
 800f0f4:	465b      	mov	r3, fp
 800f0f6:	e7e5      	b.n	800f0c4 <_strtod_l+0x84>
 800f0f8:	2100      	movs	r1, #0
 800f0fa:	e7ef      	b.n	800f0dc <_strtod_l+0x9c>
 800f0fc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800f0fe:	b13a      	cbz	r2, 800f110 <_strtod_l+0xd0>
 800f100:	2135      	movs	r1, #53	@ 0x35
 800f102:	a81c      	add	r0, sp, #112	@ 0x70
 800f104:	f003 fcfa 	bl	8012afc <__copybits>
 800f108:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f10a:	9805      	ldr	r0, [sp, #20]
 800f10c:	f003 f8c8 	bl	80122a0 <_Bfree>
 800f110:	3e01      	subs	r6, #1
 800f112:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800f114:	2e04      	cmp	r6, #4
 800f116:	d806      	bhi.n	800f126 <_strtod_l+0xe6>
 800f118:	e8df f006 	tbb	[pc, r6]
 800f11c:	201d0314 	.word	0x201d0314
 800f120:	14          	.byte	0x14
 800f121:	00          	.byte	0x00
 800f122:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800f126:	05e1      	lsls	r1, r4, #23
 800f128:	bf48      	it	mi
 800f12a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800f12e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f132:	0d1b      	lsrs	r3, r3, #20
 800f134:	051b      	lsls	r3, r3, #20
 800f136:	2b00      	cmp	r3, #0
 800f138:	d1bb      	bne.n	800f0b2 <_strtod_l+0x72>
 800f13a:	f001 fd8d 	bl	8010c58 <__errno>
 800f13e:	2322      	movs	r3, #34	@ 0x22
 800f140:	6003      	str	r3, [r0, #0]
 800f142:	e7b6      	b.n	800f0b2 <_strtod_l+0x72>
 800f144:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800f148:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800f14c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800f150:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800f154:	e7e7      	b.n	800f126 <_strtod_l+0xe6>
 800f156:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800f2d4 <_strtod_l+0x294>
 800f15a:	e7e4      	b.n	800f126 <_strtod_l+0xe6>
 800f15c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800f160:	f04f 3aff 	mov.w	sl, #4294967295
 800f164:	e7df      	b.n	800f126 <_strtod_l+0xe6>
 800f166:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f168:	1c5a      	adds	r2, r3, #1
 800f16a:	9219      	str	r2, [sp, #100]	@ 0x64
 800f16c:	785b      	ldrb	r3, [r3, #1]
 800f16e:	2b30      	cmp	r3, #48	@ 0x30
 800f170:	d0f9      	beq.n	800f166 <_strtod_l+0x126>
 800f172:	2b00      	cmp	r3, #0
 800f174:	d09d      	beq.n	800f0b2 <_strtod_l+0x72>
 800f176:	2301      	movs	r3, #1
 800f178:	9309      	str	r3, [sp, #36]	@ 0x24
 800f17a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f17c:	930c      	str	r3, [sp, #48]	@ 0x30
 800f17e:	2300      	movs	r3, #0
 800f180:	9308      	str	r3, [sp, #32]
 800f182:	930a      	str	r3, [sp, #40]	@ 0x28
 800f184:	461f      	mov	r7, r3
 800f186:	220a      	movs	r2, #10
 800f188:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800f18a:	7805      	ldrb	r5, [r0, #0]
 800f18c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800f190:	b2d9      	uxtb	r1, r3
 800f192:	2909      	cmp	r1, #9
 800f194:	d928      	bls.n	800f1e8 <_strtod_l+0x1a8>
 800f196:	494e      	ldr	r1, [pc, #312]	@ (800f2d0 <_strtod_l+0x290>)
 800f198:	2201      	movs	r2, #1
 800f19a:	f001 fd01 	bl	8010ba0 <strncmp>
 800f19e:	2800      	cmp	r0, #0
 800f1a0:	d032      	beq.n	800f208 <_strtod_l+0x1c8>
 800f1a2:	2000      	movs	r0, #0
 800f1a4:	462a      	mov	r2, r5
 800f1a6:	4681      	mov	r9, r0
 800f1a8:	463d      	mov	r5, r7
 800f1aa:	4603      	mov	r3, r0
 800f1ac:	2a65      	cmp	r2, #101	@ 0x65
 800f1ae:	d001      	beq.n	800f1b4 <_strtod_l+0x174>
 800f1b0:	2a45      	cmp	r2, #69	@ 0x45
 800f1b2:	d114      	bne.n	800f1de <_strtod_l+0x19e>
 800f1b4:	b91d      	cbnz	r5, 800f1be <_strtod_l+0x17e>
 800f1b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f1b8:	4302      	orrs	r2, r0
 800f1ba:	d095      	beq.n	800f0e8 <_strtod_l+0xa8>
 800f1bc:	2500      	movs	r5, #0
 800f1be:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800f1c0:	1c62      	adds	r2, r4, #1
 800f1c2:	9219      	str	r2, [sp, #100]	@ 0x64
 800f1c4:	7862      	ldrb	r2, [r4, #1]
 800f1c6:	2a2b      	cmp	r2, #43	@ 0x2b
 800f1c8:	d077      	beq.n	800f2ba <_strtod_l+0x27a>
 800f1ca:	2a2d      	cmp	r2, #45	@ 0x2d
 800f1cc:	d07b      	beq.n	800f2c6 <_strtod_l+0x286>
 800f1ce:	f04f 0c00 	mov.w	ip, #0
 800f1d2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800f1d6:	2909      	cmp	r1, #9
 800f1d8:	f240 8082 	bls.w	800f2e0 <_strtod_l+0x2a0>
 800f1dc:	9419      	str	r4, [sp, #100]	@ 0x64
 800f1de:	f04f 0800 	mov.w	r8, #0
 800f1e2:	e0a2      	b.n	800f32a <_strtod_l+0x2ea>
 800f1e4:	2300      	movs	r3, #0
 800f1e6:	e7c7      	b.n	800f178 <_strtod_l+0x138>
 800f1e8:	2f08      	cmp	r7, #8
 800f1ea:	bfd5      	itete	le
 800f1ec:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800f1ee:	9908      	ldrgt	r1, [sp, #32]
 800f1f0:	fb02 3301 	mlale	r3, r2, r1, r3
 800f1f4:	fb02 3301 	mlagt	r3, r2, r1, r3
 800f1f8:	f100 0001 	add.w	r0, r0, #1
 800f1fc:	bfd4      	ite	le
 800f1fe:	930a      	strle	r3, [sp, #40]	@ 0x28
 800f200:	9308      	strgt	r3, [sp, #32]
 800f202:	3701      	adds	r7, #1
 800f204:	9019      	str	r0, [sp, #100]	@ 0x64
 800f206:	e7bf      	b.n	800f188 <_strtod_l+0x148>
 800f208:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f20a:	1c5a      	adds	r2, r3, #1
 800f20c:	9219      	str	r2, [sp, #100]	@ 0x64
 800f20e:	785a      	ldrb	r2, [r3, #1]
 800f210:	b37f      	cbz	r7, 800f272 <_strtod_l+0x232>
 800f212:	4681      	mov	r9, r0
 800f214:	463d      	mov	r5, r7
 800f216:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800f21a:	2b09      	cmp	r3, #9
 800f21c:	d912      	bls.n	800f244 <_strtod_l+0x204>
 800f21e:	2301      	movs	r3, #1
 800f220:	e7c4      	b.n	800f1ac <_strtod_l+0x16c>
 800f222:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f224:	1c5a      	adds	r2, r3, #1
 800f226:	9219      	str	r2, [sp, #100]	@ 0x64
 800f228:	785a      	ldrb	r2, [r3, #1]
 800f22a:	3001      	adds	r0, #1
 800f22c:	2a30      	cmp	r2, #48	@ 0x30
 800f22e:	d0f8      	beq.n	800f222 <_strtod_l+0x1e2>
 800f230:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800f234:	2b08      	cmp	r3, #8
 800f236:	f200 84d3 	bhi.w	800fbe0 <_strtod_l+0xba0>
 800f23a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f23c:	930c      	str	r3, [sp, #48]	@ 0x30
 800f23e:	4681      	mov	r9, r0
 800f240:	2000      	movs	r0, #0
 800f242:	4605      	mov	r5, r0
 800f244:	3a30      	subs	r2, #48	@ 0x30
 800f246:	f100 0301 	add.w	r3, r0, #1
 800f24a:	d02a      	beq.n	800f2a2 <_strtod_l+0x262>
 800f24c:	4499      	add	r9, r3
 800f24e:	eb00 0c05 	add.w	ip, r0, r5
 800f252:	462b      	mov	r3, r5
 800f254:	210a      	movs	r1, #10
 800f256:	4563      	cmp	r3, ip
 800f258:	d10d      	bne.n	800f276 <_strtod_l+0x236>
 800f25a:	1c69      	adds	r1, r5, #1
 800f25c:	4401      	add	r1, r0
 800f25e:	4428      	add	r0, r5
 800f260:	2808      	cmp	r0, #8
 800f262:	dc16      	bgt.n	800f292 <_strtod_l+0x252>
 800f264:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800f266:	230a      	movs	r3, #10
 800f268:	fb03 2300 	mla	r3, r3, r0, r2
 800f26c:	930a      	str	r3, [sp, #40]	@ 0x28
 800f26e:	2300      	movs	r3, #0
 800f270:	e018      	b.n	800f2a4 <_strtod_l+0x264>
 800f272:	4638      	mov	r0, r7
 800f274:	e7da      	b.n	800f22c <_strtod_l+0x1ec>
 800f276:	2b08      	cmp	r3, #8
 800f278:	f103 0301 	add.w	r3, r3, #1
 800f27c:	dc03      	bgt.n	800f286 <_strtod_l+0x246>
 800f27e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800f280:	434e      	muls	r6, r1
 800f282:	960a      	str	r6, [sp, #40]	@ 0x28
 800f284:	e7e7      	b.n	800f256 <_strtod_l+0x216>
 800f286:	2b10      	cmp	r3, #16
 800f288:	bfde      	ittt	le
 800f28a:	9e08      	ldrle	r6, [sp, #32]
 800f28c:	434e      	mulle	r6, r1
 800f28e:	9608      	strle	r6, [sp, #32]
 800f290:	e7e1      	b.n	800f256 <_strtod_l+0x216>
 800f292:	280f      	cmp	r0, #15
 800f294:	dceb      	bgt.n	800f26e <_strtod_l+0x22e>
 800f296:	9808      	ldr	r0, [sp, #32]
 800f298:	230a      	movs	r3, #10
 800f29a:	fb03 2300 	mla	r3, r3, r0, r2
 800f29e:	9308      	str	r3, [sp, #32]
 800f2a0:	e7e5      	b.n	800f26e <_strtod_l+0x22e>
 800f2a2:	4629      	mov	r1, r5
 800f2a4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f2a6:	1c50      	adds	r0, r2, #1
 800f2a8:	9019      	str	r0, [sp, #100]	@ 0x64
 800f2aa:	7852      	ldrb	r2, [r2, #1]
 800f2ac:	4618      	mov	r0, r3
 800f2ae:	460d      	mov	r5, r1
 800f2b0:	e7b1      	b.n	800f216 <_strtod_l+0x1d6>
 800f2b2:	f04f 0900 	mov.w	r9, #0
 800f2b6:	2301      	movs	r3, #1
 800f2b8:	e77d      	b.n	800f1b6 <_strtod_l+0x176>
 800f2ba:	f04f 0c00 	mov.w	ip, #0
 800f2be:	1ca2      	adds	r2, r4, #2
 800f2c0:	9219      	str	r2, [sp, #100]	@ 0x64
 800f2c2:	78a2      	ldrb	r2, [r4, #2]
 800f2c4:	e785      	b.n	800f1d2 <_strtod_l+0x192>
 800f2c6:	f04f 0c01 	mov.w	ip, #1
 800f2ca:	e7f8      	b.n	800f2be <_strtod_l+0x27e>
 800f2cc:	08013b34 	.word	0x08013b34
 800f2d0:	08013b1c 	.word	0x08013b1c
 800f2d4:	7ff00000 	.word	0x7ff00000
 800f2d8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f2da:	1c51      	adds	r1, r2, #1
 800f2dc:	9119      	str	r1, [sp, #100]	@ 0x64
 800f2de:	7852      	ldrb	r2, [r2, #1]
 800f2e0:	2a30      	cmp	r2, #48	@ 0x30
 800f2e2:	d0f9      	beq.n	800f2d8 <_strtod_l+0x298>
 800f2e4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800f2e8:	2908      	cmp	r1, #8
 800f2ea:	f63f af78 	bhi.w	800f1de <_strtod_l+0x19e>
 800f2ee:	3a30      	subs	r2, #48	@ 0x30
 800f2f0:	920e      	str	r2, [sp, #56]	@ 0x38
 800f2f2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f2f4:	920f      	str	r2, [sp, #60]	@ 0x3c
 800f2f6:	f04f 080a 	mov.w	r8, #10
 800f2fa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f2fc:	1c56      	adds	r6, r2, #1
 800f2fe:	9619      	str	r6, [sp, #100]	@ 0x64
 800f300:	7852      	ldrb	r2, [r2, #1]
 800f302:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800f306:	f1be 0f09 	cmp.w	lr, #9
 800f30a:	d939      	bls.n	800f380 <_strtod_l+0x340>
 800f30c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800f30e:	1a76      	subs	r6, r6, r1
 800f310:	2e08      	cmp	r6, #8
 800f312:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800f316:	dc03      	bgt.n	800f320 <_strtod_l+0x2e0>
 800f318:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800f31a:	4588      	cmp	r8, r1
 800f31c:	bfa8      	it	ge
 800f31e:	4688      	movge	r8, r1
 800f320:	f1bc 0f00 	cmp.w	ip, #0
 800f324:	d001      	beq.n	800f32a <_strtod_l+0x2ea>
 800f326:	f1c8 0800 	rsb	r8, r8, #0
 800f32a:	2d00      	cmp	r5, #0
 800f32c:	d14e      	bne.n	800f3cc <_strtod_l+0x38c>
 800f32e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f330:	4308      	orrs	r0, r1
 800f332:	f47f aebe 	bne.w	800f0b2 <_strtod_l+0x72>
 800f336:	2b00      	cmp	r3, #0
 800f338:	f47f aed6 	bne.w	800f0e8 <_strtod_l+0xa8>
 800f33c:	2a69      	cmp	r2, #105	@ 0x69
 800f33e:	d028      	beq.n	800f392 <_strtod_l+0x352>
 800f340:	dc25      	bgt.n	800f38e <_strtod_l+0x34e>
 800f342:	2a49      	cmp	r2, #73	@ 0x49
 800f344:	d025      	beq.n	800f392 <_strtod_l+0x352>
 800f346:	2a4e      	cmp	r2, #78	@ 0x4e
 800f348:	f47f aece 	bne.w	800f0e8 <_strtod_l+0xa8>
 800f34c:	499b      	ldr	r1, [pc, #620]	@ (800f5bc <_strtod_l+0x57c>)
 800f34e:	a819      	add	r0, sp, #100	@ 0x64
 800f350:	f002 fdee 	bl	8011f30 <__match>
 800f354:	2800      	cmp	r0, #0
 800f356:	f43f aec7 	beq.w	800f0e8 <_strtod_l+0xa8>
 800f35a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f35c:	781b      	ldrb	r3, [r3, #0]
 800f35e:	2b28      	cmp	r3, #40	@ 0x28
 800f360:	d12e      	bne.n	800f3c0 <_strtod_l+0x380>
 800f362:	4997      	ldr	r1, [pc, #604]	@ (800f5c0 <_strtod_l+0x580>)
 800f364:	aa1c      	add	r2, sp, #112	@ 0x70
 800f366:	a819      	add	r0, sp, #100	@ 0x64
 800f368:	f002 fdf6 	bl	8011f58 <__hexnan>
 800f36c:	2805      	cmp	r0, #5
 800f36e:	d127      	bne.n	800f3c0 <_strtod_l+0x380>
 800f370:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f372:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800f376:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800f37a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800f37e:	e698      	b.n	800f0b2 <_strtod_l+0x72>
 800f380:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800f382:	fb08 2101 	mla	r1, r8, r1, r2
 800f386:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800f38a:	920e      	str	r2, [sp, #56]	@ 0x38
 800f38c:	e7b5      	b.n	800f2fa <_strtod_l+0x2ba>
 800f38e:	2a6e      	cmp	r2, #110	@ 0x6e
 800f390:	e7da      	b.n	800f348 <_strtod_l+0x308>
 800f392:	498c      	ldr	r1, [pc, #560]	@ (800f5c4 <_strtod_l+0x584>)
 800f394:	a819      	add	r0, sp, #100	@ 0x64
 800f396:	f002 fdcb 	bl	8011f30 <__match>
 800f39a:	2800      	cmp	r0, #0
 800f39c:	f43f aea4 	beq.w	800f0e8 <_strtod_l+0xa8>
 800f3a0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f3a2:	4989      	ldr	r1, [pc, #548]	@ (800f5c8 <_strtod_l+0x588>)
 800f3a4:	3b01      	subs	r3, #1
 800f3a6:	a819      	add	r0, sp, #100	@ 0x64
 800f3a8:	9319      	str	r3, [sp, #100]	@ 0x64
 800f3aa:	f002 fdc1 	bl	8011f30 <__match>
 800f3ae:	b910      	cbnz	r0, 800f3b6 <_strtod_l+0x376>
 800f3b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f3b2:	3301      	adds	r3, #1
 800f3b4:	9319      	str	r3, [sp, #100]	@ 0x64
 800f3b6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800f5d8 <_strtod_l+0x598>
 800f3ba:	f04f 0a00 	mov.w	sl, #0
 800f3be:	e678      	b.n	800f0b2 <_strtod_l+0x72>
 800f3c0:	4882      	ldr	r0, [pc, #520]	@ (800f5cc <_strtod_l+0x58c>)
 800f3c2:	f001 fc85 	bl	8010cd0 <nan>
 800f3c6:	ec5b ab10 	vmov	sl, fp, d0
 800f3ca:	e672      	b.n	800f0b2 <_strtod_l+0x72>
 800f3cc:	eba8 0309 	sub.w	r3, r8, r9
 800f3d0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800f3d2:	9309      	str	r3, [sp, #36]	@ 0x24
 800f3d4:	2f00      	cmp	r7, #0
 800f3d6:	bf08      	it	eq
 800f3d8:	462f      	moveq	r7, r5
 800f3da:	2d10      	cmp	r5, #16
 800f3dc:	462c      	mov	r4, r5
 800f3de:	bfa8      	it	ge
 800f3e0:	2410      	movge	r4, #16
 800f3e2:	f7f1 f8b7 	bl	8000554 <__aeabi_ui2d>
 800f3e6:	2d09      	cmp	r5, #9
 800f3e8:	4682      	mov	sl, r0
 800f3ea:	468b      	mov	fp, r1
 800f3ec:	dc13      	bgt.n	800f416 <_strtod_l+0x3d6>
 800f3ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	f43f ae5e 	beq.w	800f0b2 <_strtod_l+0x72>
 800f3f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f3f8:	dd78      	ble.n	800f4ec <_strtod_l+0x4ac>
 800f3fa:	2b16      	cmp	r3, #22
 800f3fc:	dc5f      	bgt.n	800f4be <_strtod_l+0x47e>
 800f3fe:	4974      	ldr	r1, [pc, #464]	@ (800f5d0 <_strtod_l+0x590>)
 800f400:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f404:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f408:	4652      	mov	r2, sl
 800f40a:	465b      	mov	r3, fp
 800f40c:	f7f1 f91c 	bl	8000648 <__aeabi_dmul>
 800f410:	4682      	mov	sl, r0
 800f412:	468b      	mov	fp, r1
 800f414:	e64d      	b.n	800f0b2 <_strtod_l+0x72>
 800f416:	4b6e      	ldr	r3, [pc, #440]	@ (800f5d0 <_strtod_l+0x590>)
 800f418:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f41c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800f420:	f7f1 f912 	bl	8000648 <__aeabi_dmul>
 800f424:	4682      	mov	sl, r0
 800f426:	9808      	ldr	r0, [sp, #32]
 800f428:	468b      	mov	fp, r1
 800f42a:	f7f1 f893 	bl	8000554 <__aeabi_ui2d>
 800f42e:	4602      	mov	r2, r0
 800f430:	460b      	mov	r3, r1
 800f432:	4650      	mov	r0, sl
 800f434:	4659      	mov	r1, fp
 800f436:	f7f0 ff51 	bl	80002dc <__adddf3>
 800f43a:	2d0f      	cmp	r5, #15
 800f43c:	4682      	mov	sl, r0
 800f43e:	468b      	mov	fp, r1
 800f440:	ddd5      	ble.n	800f3ee <_strtod_l+0x3ae>
 800f442:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f444:	1b2c      	subs	r4, r5, r4
 800f446:	441c      	add	r4, r3
 800f448:	2c00      	cmp	r4, #0
 800f44a:	f340 8096 	ble.w	800f57a <_strtod_l+0x53a>
 800f44e:	f014 030f 	ands.w	r3, r4, #15
 800f452:	d00a      	beq.n	800f46a <_strtod_l+0x42a>
 800f454:	495e      	ldr	r1, [pc, #376]	@ (800f5d0 <_strtod_l+0x590>)
 800f456:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f45a:	4652      	mov	r2, sl
 800f45c:	465b      	mov	r3, fp
 800f45e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f462:	f7f1 f8f1 	bl	8000648 <__aeabi_dmul>
 800f466:	4682      	mov	sl, r0
 800f468:	468b      	mov	fp, r1
 800f46a:	f034 040f 	bics.w	r4, r4, #15
 800f46e:	d073      	beq.n	800f558 <_strtod_l+0x518>
 800f470:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800f474:	dd48      	ble.n	800f508 <_strtod_l+0x4c8>
 800f476:	2400      	movs	r4, #0
 800f478:	46a0      	mov	r8, r4
 800f47a:	940a      	str	r4, [sp, #40]	@ 0x28
 800f47c:	46a1      	mov	r9, r4
 800f47e:	9a05      	ldr	r2, [sp, #20]
 800f480:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800f5d8 <_strtod_l+0x598>
 800f484:	2322      	movs	r3, #34	@ 0x22
 800f486:	6013      	str	r3, [r2, #0]
 800f488:	f04f 0a00 	mov.w	sl, #0
 800f48c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f48e:	2b00      	cmp	r3, #0
 800f490:	f43f ae0f 	beq.w	800f0b2 <_strtod_l+0x72>
 800f494:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f496:	9805      	ldr	r0, [sp, #20]
 800f498:	f002 ff02 	bl	80122a0 <_Bfree>
 800f49c:	9805      	ldr	r0, [sp, #20]
 800f49e:	4649      	mov	r1, r9
 800f4a0:	f002 fefe 	bl	80122a0 <_Bfree>
 800f4a4:	9805      	ldr	r0, [sp, #20]
 800f4a6:	4641      	mov	r1, r8
 800f4a8:	f002 fefa 	bl	80122a0 <_Bfree>
 800f4ac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f4ae:	9805      	ldr	r0, [sp, #20]
 800f4b0:	f002 fef6 	bl	80122a0 <_Bfree>
 800f4b4:	9805      	ldr	r0, [sp, #20]
 800f4b6:	4621      	mov	r1, r4
 800f4b8:	f002 fef2 	bl	80122a0 <_Bfree>
 800f4bc:	e5f9      	b.n	800f0b2 <_strtod_l+0x72>
 800f4be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f4c0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800f4c4:	4293      	cmp	r3, r2
 800f4c6:	dbbc      	blt.n	800f442 <_strtod_l+0x402>
 800f4c8:	4c41      	ldr	r4, [pc, #260]	@ (800f5d0 <_strtod_l+0x590>)
 800f4ca:	f1c5 050f 	rsb	r5, r5, #15
 800f4ce:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800f4d2:	4652      	mov	r2, sl
 800f4d4:	465b      	mov	r3, fp
 800f4d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f4da:	f7f1 f8b5 	bl	8000648 <__aeabi_dmul>
 800f4de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f4e0:	1b5d      	subs	r5, r3, r5
 800f4e2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800f4e6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f4ea:	e78f      	b.n	800f40c <_strtod_l+0x3cc>
 800f4ec:	3316      	adds	r3, #22
 800f4ee:	dba8      	blt.n	800f442 <_strtod_l+0x402>
 800f4f0:	4b37      	ldr	r3, [pc, #220]	@ (800f5d0 <_strtod_l+0x590>)
 800f4f2:	eba9 0808 	sub.w	r8, r9, r8
 800f4f6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800f4fa:	e9d8 2300 	ldrd	r2, r3, [r8]
 800f4fe:	4650      	mov	r0, sl
 800f500:	4659      	mov	r1, fp
 800f502:	f7f1 f9cb 	bl	800089c <__aeabi_ddiv>
 800f506:	e783      	b.n	800f410 <_strtod_l+0x3d0>
 800f508:	4b32      	ldr	r3, [pc, #200]	@ (800f5d4 <_strtod_l+0x594>)
 800f50a:	9308      	str	r3, [sp, #32]
 800f50c:	2300      	movs	r3, #0
 800f50e:	1124      	asrs	r4, r4, #4
 800f510:	4650      	mov	r0, sl
 800f512:	4659      	mov	r1, fp
 800f514:	461e      	mov	r6, r3
 800f516:	2c01      	cmp	r4, #1
 800f518:	dc21      	bgt.n	800f55e <_strtod_l+0x51e>
 800f51a:	b10b      	cbz	r3, 800f520 <_strtod_l+0x4e0>
 800f51c:	4682      	mov	sl, r0
 800f51e:	468b      	mov	fp, r1
 800f520:	492c      	ldr	r1, [pc, #176]	@ (800f5d4 <_strtod_l+0x594>)
 800f522:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800f526:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800f52a:	4652      	mov	r2, sl
 800f52c:	465b      	mov	r3, fp
 800f52e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f532:	f7f1 f889 	bl	8000648 <__aeabi_dmul>
 800f536:	4b28      	ldr	r3, [pc, #160]	@ (800f5d8 <_strtod_l+0x598>)
 800f538:	460a      	mov	r2, r1
 800f53a:	400b      	ands	r3, r1
 800f53c:	4927      	ldr	r1, [pc, #156]	@ (800f5dc <_strtod_l+0x59c>)
 800f53e:	428b      	cmp	r3, r1
 800f540:	4682      	mov	sl, r0
 800f542:	d898      	bhi.n	800f476 <_strtod_l+0x436>
 800f544:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800f548:	428b      	cmp	r3, r1
 800f54a:	bf86      	itte	hi
 800f54c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800f5e0 <_strtod_l+0x5a0>
 800f550:	f04f 3aff 	movhi.w	sl, #4294967295
 800f554:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800f558:	2300      	movs	r3, #0
 800f55a:	9308      	str	r3, [sp, #32]
 800f55c:	e07a      	b.n	800f654 <_strtod_l+0x614>
 800f55e:	07e2      	lsls	r2, r4, #31
 800f560:	d505      	bpl.n	800f56e <_strtod_l+0x52e>
 800f562:	9b08      	ldr	r3, [sp, #32]
 800f564:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f568:	f7f1 f86e 	bl	8000648 <__aeabi_dmul>
 800f56c:	2301      	movs	r3, #1
 800f56e:	9a08      	ldr	r2, [sp, #32]
 800f570:	3208      	adds	r2, #8
 800f572:	3601      	adds	r6, #1
 800f574:	1064      	asrs	r4, r4, #1
 800f576:	9208      	str	r2, [sp, #32]
 800f578:	e7cd      	b.n	800f516 <_strtod_l+0x4d6>
 800f57a:	d0ed      	beq.n	800f558 <_strtod_l+0x518>
 800f57c:	4264      	negs	r4, r4
 800f57e:	f014 020f 	ands.w	r2, r4, #15
 800f582:	d00a      	beq.n	800f59a <_strtod_l+0x55a>
 800f584:	4b12      	ldr	r3, [pc, #72]	@ (800f5d0 <_strtod_l+0x590>)
 800f586:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f58a:	4650      	mov	r0, sl
 800f58c:	4659      	mov	r1, fp
 800f58e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f592:	f7f1 f983 	bl	800089c <__aeabi_ddiv>
 800f596:	4682      	mov	sl, r0
 800f598:	468b      	mov	fp, r1
 800f59a:	1124      	asrs	r4, r4, #4
 800f59c:	d0dc      	beq.n	800f558 <_strtod_l+0x518>
 800f59e:	2c1f      	cmp	r4, #31
 800f5a0:	dd20      	ble.n	800f5e4 <_strtod_l+0x5a4>
 800f5a2:	2400      	movs	r4, #0
 800f5a4:	46a0      	mov	r8, r4
 800f5a6:	940a      	str	r4, [sp, #40]	@ 0x28
 800f5a8:	46a1      	mov	r9, r4
 800f5aa:	9a05      	ldr	r2, [sp, #20]
 800f5ac:	2322      	movs	r3, #34	@ 0x22
 800f5ae:	f04f 0a00 	mov.w	sl, #0
 800f5b2:	f04f 0b00 	mov.w	fp, #0
 800f5b6:	6013      	str	r3, [r2, #0]
 800f5b8:	e768      	b.n	800f48c <_strtod_l+0x44c>
 800f5ba:	bf00      	nop
 800f5bc:	08013b7d 	.word	0x08013b7d
 800f5c0:	08013b20 	.word	0x08013b20
 800f5c4:	08013b75 	.word	0x08013b75
 800f5c8:	08013bb4 	.word	0x08013bb4
 800f5cc:	08013f45 	.word	0x08013f45
 800f5d0:	08013d30 	.word	0x08013d30
 800f5d4:	08013d08 	.word	0x08013d08
 800f5d8:	7ff00000 	.word	0x7ff00000
 800f5dc:	7ca00000 	.word	0x7ca00000
 800f5e0:	7fefffff 	.word	0x7fefffff
 800f5e4:	f014 0310 	ands.w	r3, r4, #16
 800f5e8:	bf18      	it	ne
 800f5ea:	236a      	movne	r3, #106	@ 0x6a
 800f5ec:	4ea9      	ldr	r6, [pc, #676]	@ (800f894 <_strtod_l+0x854>)
 800f5ee:	9308      	str	r3, [sp, #32]
 800f5f0:	4650      	mov	r0, sl
 800f5f2:	4659      	mov	r1, fp
 800f5f4:	2300      	movs	r3, #0
 800f5f6:	07e2      	lsls	r2, r4, #31
 800f5f8:	d504      	bpl.n	800f604 <_strtod_l+0x5c4>
 800f5fa:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f5fe:	f7f1 f823 	bl	8000648 <__aeabi_dmul>
 800f602:	2301      	movs	r3, #1
 800f604:	1064      	asrs	r4, r4, #1
 800f606:	f106 0608 	add.w	r6, r6, #8
 800f60a:	d1f4      	bne.n	800f5f6 <_strtod_l+0x5b6>
 800f60c:	b10b      	cbz	r3, 800f612 <_strtod_l+0x5d2>
 800f60e:	4682      	mov	sl, r0
 800f610:	468b      	mov	fp, r1
 800f612:	9b08      	ldr	r3, [sp, #32]
 800f614:	b1b3      	cbz	r3, 800f644 <_strtod_l+0x604>
 800f616:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800f61a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800f61e:	2b00      	cmp	r3, #0
 800f620:	4659      	mov	r1, fp
 800f622:	dd0f      	ble.n	800f644 <_strtod_l+0x604>
 800f624:	2b1f      	cmp	r3, #31
 800f626:	dd55      	ble.n	800f6d4 <_strtod_l+0x694>
 800f628:	2b34      	cmp	r3, #52	@ 0x34
 800f62a:	bfde      	ittt	le
 800f62c:	f04f 33ff 	movle.w	r3, #4294967295
 800f630:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800f634:	4093      	lslle	r3, r2
 800f636:	f04f 0a00 	mov.w	sl, #0
 800f63a:	bfcc      	ite	gt
 800f63c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800f640:	ea03 0b01 	andle.w	fp, r3, r1
 800f644:	2200      	movs	r2, #0
 800f646:	2300      	movs	r3, #0
 800f648:	4650      	mov	r0, sl
 800f64a:	4659      	mov	r1, fp
 800f64c:	f7f1 fa64 	bl	8000b18 <__aeabi_dcmpeq>
 800f650:	2800      	cmp	r0, #0
 800f652:	d1a6      	bne.n	800f5a2 <_strtod_l+0x562>
 800f654:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f656:	9300      	str	r3, [sp, #0]
 800f658:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800f65a:	9805      	ldr	r0, [sp, #20]
 800f65c:	462b      	mov	r3, r5
 800f65e:	463a      	mov	r2, r7
 800f660:	f002 fe86 	bl	8012370 <__s2b>
 800f664:	900a      	str	r0, [sp, #40]	@ 0x28
 800f666:	2800      	cmp	r0, #0
 800f668:	f43f af05 	beq.w	800f476 <_strtod_l+0x436>
 800f66c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f66e:	2a00      	cmp	r2, #0
 800f670:	eba9 0308 	sub.w	r3, r9, r8
 800f674:	bfa8      	it	ge
 800f676:	2300      	movge	r3, #0
 800f678:	9312      	str	r3, [sp, #72]	@ 0x48
 800f67a:	2400      	movs	r4, #0
 800f67c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800f680:	9316      	str	r3, [sp, #88]	@ 0x58
 800f682:	46a0      	mov	r8, r4
 800f684:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f686:	9805      	ldr	r0, [sp, #20]
 800f688:	6859      	ldr	r1, [r3, #4]
 800f68a:	f002 fdc9 	bl	8012220 <_Balloc>
 800f68e:	4681      	mov	r9, r0
 800f690:	2800      	cmp	r0, #0
 800f692:	f43f aef4 	beq.w	800f47e <_strtod_l+0x43e>
 800f696:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f698:	691a      	ldr	r2, [r3, #16]
 800f69a:	3202      	adds	r2, #2
 800f69c:	f103 010c 	add.w	r1, r3, #12
 800f6a0:	0092      	lsls	r2, r2, #2
 800f6a2:	300c      	adds	r0, #12
 800f6a4:	f001 fb05 	bl	8010cb2 <memcpy>
 800f6a8:	ec4b ab10 	vmov	d0, sl, fp
 800f6ac:	9805      	ldr	r0, [sp, #20]
 800f6ae:	aa1c      	add	r2, sp, #112	@ 0x70
 800f6b0:	a91b      	add	r1, sp, #108	@ 0x6c
 800f6b2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800f6b6:	f003 f997 	bl	80129e8 <__d2b>
 800f6ba:	901a      	str	r0, [sp, #104]	@ 0x68
 800f6bc:	2800      	cmp	r0, #0
 800f6be:	f43f aede 	beq.w	800f47e <_strtod_l+0x43e>
 800f6c2:	9805      	ldr	r0, [sp, #20]
 800f6c4:	2101      	movs	r1, #1
 800f6c6:	f002 fee9 	bl	801249c <__i2b>
 800f6ca:	4680      	mov	r8, r0
 800f6cc:	b948      	cbnz	r0, 800f6e2 <_strtod_l+0x6a2>
 800f6ce:	f04f 0800 	mov.w	r8, #0
 800f6d2:	e6d4      	b.n	800f47e <_strtod_l+0x43e>
 800f6d4:	f04f 32ff 	mov.w	r2, #4294967295
 800f6d8:	fa02 f303 	lsl.w	r3, r2, r3
 800f6dc:	ea03 0a0a 	and.w	sl, r3, sl
 800f6e0:	e7b0      	b.n	800f644 <_strtod_l+0x604>
 800f6e2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800f6e4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800f6e6:	2d00      	cmp	r5, #0
 800f6e8:	bfab      	itete	ge
 800f6ea:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800f6ec:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800f6ee:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800f6f0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800f6f2:	bfac      	ite	ge
 800f6f4:	18ef      	addge	r7, r5, r3
 800f6f6:	1b5e      	sublt	r6, r3, r5
 800f6f8:	9b08      	ldr	r3, [sp, #32]
 800f6fa:	1aed      	subs	r5, r5, r3
 800f6fc:	4415      	add	r5, r2
 800f6fe:	4b66      	ldr	r3, [pc, #408]	@ (800f898 <_strtod_l+0x858>)
 800f700:	3d01      	subs	r5, #1
 800f702:	429d      	cmp	r5, r3
 800f704:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800f708:	da50      	bge.n	800f7ac <_strtod_l+0x76c>
 800f70a:	1b5b      	subs	r3, r3, r5
 800f70c:	2b1f      	cmp	r3, #31
 800f70e:	eba2 0203 	sub.w	r2, r2, r3
 800f712:	f04f 0101 	mov.w	r1, #1
 800f716:	dc3d      	bgt.n	800f794 <_strtod_l+0x754>
 800f718:	fa01 f303 	lsl.w	r3, r1, r3
 800f71c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f71e:	2300      	movs	r3, #0
 800f720:	9310      	str	r3, [sp, #64]	@ 0x40
 800f722:	18bd      	adds	r5, r7, r2
 800f724:	9b08      	ldr	r3, [sp, #32]
 800f726:	42af      	cmp	r7, r5
 800f728:	4416      	add	r6, r2
 800f72a:	441e      	add	r6, r3
 800f72c:	463b      	mov	r3, r7
 800f72e:	bfa8      	it	ge
 800f730:	462b      	movge	r3, r5
 800f732:	42b3      	cmp	r3, r6
 800f734:	bfa8      	it	ge
 800f736:	4633      	movge	r3, r6
 800f738:	2b00      	cmp	r3, #0
 800f73a:	bfc2      	ittt	gt
 800f73c:	1aed      	subgt	r5, r5, r3
 800f73e:	1af6      	subgt	r6, r6, r3
 800f740:	1aff      	subgt	r7, r7, r3
 800f742:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f744:	2b00      	cmp	r3, #0
 800f746:	dd16      	ble.n	800f776 <_strtod_l+0x736>
 800f748:	4641      	mov	r1, r8
 800f74a:	9805      	ldr	r0, [sp, #20]
 800f74c:	461a      	mov	r2, r3
 800f74e:	f002 ff65 	bl	801261c <__pow5mult>
 800f752:	4680      	mov	r8, r0
 800f754:	2800      	cmp	r0, #0
 800f756:	d0ba      	beq.n	800f6ce <_strtod_l+0x68e>
 800f758:	4601      	mov	r1, r0
 800f75a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800f75c:	9805      	ldr	r0, [sp, #20]
 800f75e:	f002 feb3 	bl	80124c8 <__multiply>
 800f762:	900e      	str	r0, [sp, #56]	@ 0x38
 800f764:	2800      	cmp	r0, #0
 800f766:	f43f ae8a 	beq.w	800f47e <_strtod_l+0x43e>
 800f76a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f76c:	9805      	ldr	r0, [sp, #20]
 800f76e:	f002 fd97 	bl	80122a0 <_Bfree>
 800f772:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f774:	931a      	str	r3, [sp, #104]	@ 0x68
 800f776:	2d00      	cmp	r5, #0
 800f778:	dc1d      	bgt.n	800f7b6 <_strtod_l+0x776>
 800f77a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	dd23      	ble.n	800f7c8 <_strtod_l+0x788>
 800f780:	4649      	mov	r1, r9
 800f782:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800f784:	9805      	ldr	r0, [sp, #20]
 800f786:	f002 ff49 	bl	801261c <__pow5mult>
 800f78a:	4681      	mov	r9, r0
 800f78c:	b9e0      	cbnz	r0, 800f7c8 <_strtod_l+0x788>
 800f78e:	f04f 0900 	mov.w	r9, #0
 800f792:	e674      	b.n	800f47e <_strtod_l+0x43e>
 800f794:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800f798:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800f79c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800f7a0:	35e2      	adds	r5, #226	@ 0xe2
 800f7a2:	fa01 f305 	lsl.w	r3, r1, r5
 800f7a6:	9310      	str	r3, [sp, #64]	@ 0x40
 800f7a8:	9113      	str	r1, [sp, #76]	@ 0x4c
 800f7aa:	e7ba      	b.n	800f722 <_strtod_l+0x6e2>
 800f7ac:	2300      	movs	r3, #0
 800f7ae:	9310      	str	r3, [sp, #64]	@ 0x40
 800f7b0:	2301      	movs	r3, #1
 800f7b2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f7b4:	e7b5      	b.n	800f722 <_strtod_l+0x6e2>
 800f7b6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f7b8:	9805      	ldr	r0, [sp, #20]
 800f7ba:	462a      	mov	r2, r5
 800f7bc:	f002 ff88 	bl	80126d0 <__lshift>
 800f7c0:	901a      	str	r0, [sp, #104]	@ 0x68
 800f7c2:	2800      	cmp	r0, #0
 800f7c4:	d1d9      	bne.n	800f77a <_strtod_l+0x73a>
 800f7c6:	e65a      	b.n	800f47e <_strtod_l+0x43e>
 800f7c8:	2e00      	cmp	r6, #0
 800f7ca:	dd07      	ble.n	800f7dc <_strtod_l+0x79c>
 800f7cc:	4649      	mov	r1, r9
 800f7ce:	9805      	ldr	r0, [sp, #20]
 800f7d0:	4632      	mov	r2, r6
 800f7d2:	f002 ff7d 	bl	80126d0 <__lshift>
 800f7d6:	4681      	mov	r9, r0
 800f7d8:	2800      	cmp	r0, #0
 800f7da:	d0d8      	beq.n	800f78e <_strtod_l+0x74e>
 800f7dc:	2f00      	cmp	r7, #0
 800f7de:	dd08      	ble.n	800f7f2 <_strtod_l+0x7b2>
 800f7e0:	4641      	mov	r1, r8
 800f7e2:	9805      	ldr	r0, [sp, #20]
 800f7e4:	463a      	mov	r2, r7
 800f7e6:	f002 ff73 	bl	80126d0 <__lshift>
 800f7ea:	4680      	mov	r8, r0
 800f7ec:	2800      	cmp	r0, #0
 800f7ee:	f43f ae46 	beq.w	800f47e <_strtod_l+0x43e>
 800f7f2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f7f4:	9805      	ldr	r0, [sp, #20]
 800f7f6:	464a      	mov	r2, r9
 800f7f8:	f002 fff2 	bl	80127e0 <__mdiff>
 800f7fc:	4604      	mov	r4, r0
 800f7fe:	2800      	cmp	r0, #0
 800f800:	f43f ae3d 	beq.w	800f47e <_strtod_l+0x43e>
 800f804:	68c3      	ldr	r3, [r0, #12]
 800f806:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f808:	2300      	movs	r3, #0
 800f80a:	60c3      	str	r3, [r0, #12]
 800f80c:	4641      	mov	r1, r8
 800f80e:	f002 ffcb 	bl	80127a8 <__mcmp>
 800f812:	2800      	cmp	r0, #0
 800f814:	da46      	bge.n	800f8a4 <_strtod_l+0x864>
 800f816:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f818:	ea53 030a 	orrs.w	r3, r3, sl
 800f81c:	d16c      	bne.n	800f8f8 <_strtod_l+0x8b8>
 800f81e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f822:	2b00      	cmp	r3, #0
 800f824:	d168      	bne.n	800f8f8 <_strtod_l+0x8b8>
 800f826:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f82a:	0d1b      	lsrs	r3, r3, #20
 800f82c:	051b      	lsls	r3, r3, #20
 800f82e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f832:	d961      	bls.n	800f8f8 <_strtod_l+0x8b8>
 800f834:	6963      	ldr	r3, [r4, #20]
 800f836:	b913      	cbnz	r3, 800f83e <_strtod_l+0x7fe>
 800f838:	6923      	ldr	r3, [r4, #16]
 800f83a:	2b01      	cmp	r3, #1
 800f83c:	dd5c      	ble.n	800f8f8 <_strtod_l+0x8b8>
 800f83e:	4621      	mov	r1, r4
 800f840:	2201      	movs	r2, #1
 800f842:	9805      	ldr	r0, [sp, #20]
 800f844:	f002 ff44 	bl	80126d0 <__lshift>
 800f848:	4641      	mov	r1, r8
 800f84a:	4604      	mov	r4, r0
 800f84c:	f002 ffac 	bl	80127a8 <__mcmp>
 800f850:	2800      	cmp	r0, #0
 800f852:	dd51      	ble.n	800f8f8 <_strtod_l+0x8b8>
 800f854:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f858:	9a08      	ldr	r2, [sp, #32]
 800f85a:	0d1b      	lsrs	r3, r3, #20
 800f85c:	051b      	lsls	r3, r3, #20
 800f85e:	2a00      	cmp	r2, #0
 800f860:	d06b      	beq.n	800f93a <_strtod_l+0x8fa>
 800f862:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f866:	d868      	bhi.n	800f93a <_strtod_l+0x8fa>
 800f868:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800f86c:	f67f ae9d 	bls.w	800f5aa <_strtod_l+0x56a>
 800f870:	4b0a      	ldr	r3, [pc, #40]	@ (800f89c <_strtod_l+0x85c>)
 800f872:	4650      	mov	r0, sl
 800f874:	4659      	mov	r1, fp
 800f876:	2200      	movs	r2, #0
 800f878:	f7f0 fee6 	bl	8000648 <__aeabi_dmul>
 800f87c:	4b08      	ldr	r3, [pc, #32]	@ (800f8a0 <_strtod_l+0x860>)
 800f87e:	400b      	ands	r3, r1
 800f880:	4682      	mov	sl, r0
 800f882:	468b      	mov	fp, r1
 800f884:	2b00      	cmp	r3, #0
 800f886:	f47f ae05 	bne.w	800f494 <_strtod_l+0x454>
 800f88a:	9a05      	ldr	r2, [sp, #20]
 800f88c:	2322      	movs	r3, #34	@ 0x22
 800f88e:	6013      	str	r3, [r2, #0]
 800f890:	e600      	b.n	800f494 <_strtod_l+0x454>
 800f892:	bf00      	nop
 800f894:	08013b48 	.word	0x08013b48
 800f898:	fffffc02 	.word	0xfffffc02
 800f89c:	39500000 	.word	0x39500000
 800f8a0:	7ff00000 	.word	0x7ff00000
 800f8a4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800f8a8:	d165      	bne.n	800f976 <_strtod_l+0x936>
 800f8aa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f8ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f8b0:	b35a      	cbz	r2, 800f90a <_strtod_l+0x8ca>
 800f8b2:	4a9f      	ldr	r2, [pc, #636]	@ (800fb30 <_strtod_l+0xaf0>)
 800f8b4:	4293      	cmp	r3, r2
 800f8b6:	d12b      	bne.n	800f910 <_strtod_l+0x8d0>
 800f8b8:	9b08      	ldr	r3, [sp, #32]
 800f8ba:	4651      	mov	r1, sl
 800f8bc:	b303      	cbz	r3, 800f900 <_strtod_l+0x8c0>
 800f8be:	4b9d      	ldr	r3, [pc, #628]	@ (800fb34 <_strtod_l+0xaf4>)
 800f8c0:	465a      	mov	r2, fp
 800f8c2:	4013      	ands	r3, r2
 800f8c4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800f8c8:	f04f 32ff 	mov.w	r2, #4294967295
 800f8cc:	d81b      	bhi.n	800f906 <_strtod_l+0x8c6>
 800f8ce:	0d1b      	lsrs	r3, r3, #20
 800f8d0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800f8d4:	fa02 f303 	lsl.w	r3, r2, r3
 800f8d8:	4299      	cmp	r1, r3
 800f8da:	d119      	bne.n	800f910 <_strtod_l+0x8d0>
 800f8dc:	4b96      	ldr	r3, [pc, #600]	@ (800fb38 <_strtod_l+0xaf8>)
 800f8de:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f8e0:	429a      	cmp	r2, r3
 800f8e2:	d102      	bne.n	800f8ea <_strtod_l+0x8aa>
 800f8e4:	3101      	adds	r1, #1
 800f8e6:	f43f adca 	beq.w	800f47e <_strtod_l+0x43e>
 800f8ea:	4b92      	ldr	r3, [pc, #584]	@ (800fb34 <_strtod_l+0xaf4>)
 800f8ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f8ee:	401a      	ands	r2, r3
 800f8f0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800f8f4:	f04f 0a00 	mov.w	sl, #0
 800f8f8:	9b08      	ldr	r3, [sp, #32]
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d1b8      	bne.n	800f870 <_strtod_l+0x830>
 800f8fe:	e5c9      	b.n	800f494 <_strtod_l+0x454>
 800f900:	f04f 33ff 	mov.w	r3, #4294967295
 800f904:	e7e8      	b.n	800f8d8 <_strtod_l+0x898>
 800f906:	4613      	mov	r3, r2
 800f908:	e7e6      	b.n	800f8d8 <_strtod_l+0x898>
 800f90a:	ea53 030a 	orrs.w	r3, r3, sl
 800f90e:	d0a1      	beq.n	800f854 <_strtod_l+0x814>
 800f910:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f912:	b1db      	cbz	r3, 800f94c <_strtod_l+0x90c>
 800f914:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f916:	4213      	tst	r3, r2
 800f918:	d0ee      	beq.n	800f8f8 <_strtod_l+0x8b8>
 800f91a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f91c:	9a08      	ldr	r2, [sp, #32]
 800f91e:	4650      	mov	r0, sl
 800f920:	4659      	mov	r1, fp
 800f922:	b1bb      	cbz	r3, 800f954 <_strtod_l+0x914>
 800f924:	f7ff fb6d 	bl	800f002 <sulp>
 800f928:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f92c:	ec53 2b10 	vmov	r2, r3, d0
 800f930:	f7f0 fcd4 	bl	80002dc <__adddf3>
 800f934:	4682      	mov	sl, r0
 800f936:	468b      	mov	fp, r1
 800f938:	e7de      	b.n	800f8f8 <_strtod_l+0x8b8>
 800f93a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800f93e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800f942:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800f946:	f04f 3aff 	mov.w	sl, #4294967295
 800f94a:	e7d5      	b.n	800f8f8 <_strtod_l+0x8b8>
 800f94c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f94e:	ea13 0f0a 	tst.w	r3, sl
 800f952:	e7e1      	b.n	800f918 <_strtod_l+0x8d8>
 800f954:	f7ff fb55 	bl	800f002 <sulp>
 800f958:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f95c:	ec53 2b10 	vmov	r2, r3, d0
 800f960:	f7f0 fcba 	bl	80002d8 <__aeabi_dsub>
 800f964:	2200      	movs	r2, #0
 800f966:	2300      	movs	r3, #0
 800f968:	4682      	mov	sl, r0
 800f96a:	468b      	mov	fp, r1
 800f96c:	f7f1 f8d4 	bl	8000b18 <__aeabi_dcmpeq>
 800f970:	2800      	cmp	r0, #0
 800f972:	d0c1      	beq.n	800f8f8 <_strtod_l+0x8b8>
 800f974:	e619      	b.n	800f5aa <_strtod_l+0x56a>
 800f976:	4641      	mov	r1, r8
 800f978:	4620      	mov	r0, r4
 800f97a:	f003 f88d 	bl	8012a98 <__ratio>
 800f97e:	ec57 6b10 	vmov	r6, r7, d0
 800f982:	2200      	movs	r2, #0
 800f984:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800f988:	4630      	mov	r0, r6
 800f98a:	4639      	mov	r1, r7
 800f98c:	f7f1 f8d8 	bl	8000b40 <__aeabi_dcmple>
 800f990:	2800      	cmp	r0, #0
 800f992:	d06f      	beq.n	800fa74 <_strtod_l+0xa34>
 800f994:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f996:	2b00      	cmp	r3, #0
 800f998:	d17a      	bne.n	800fa90 <_strtod_l+0xa50>
 800f99a:	f1ba 0f00 	cmp.w	sl, #0
 800f99e:	d158      	bne.n	800fa52 <_strtod_l+0xa12>
 800f9a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f9a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d15a      	bne.n	800fa60 <_strtod_l+0xa20>
 800f9aa:	4b64      	ldr	r3, [pc, #400]	@ (800fb3c <_strtod_l+0xafc>)
 800f9ac:	2200      	movs	r2, #0
 800f9ae:	4630      	mov	r0, r6
 800f9b0:	4639      	mov	r1, r7
 800f9b2:	f7f1 f8bb 	bl	8000b2c <__aeabi_dcmplt>
 800f9b6:	2800      	cmp	r0, #0
 800f9b8:	d159      	bne.n	800fa6e <_strtod_l+0xa2e>
 800f9ba:	4630      	mov	r0, r6
 800f9bc:	4639      	mov	r1, r7
 800f9be:	4b60      	ldr	r3, [pc, #384]	@ (800fb40 <_strtod_l+0xb00>)
 800f9c0:	2200      	movs	r2, #0
 800f9c2:	f7f0 fe41 	bl	8000648 <__aeabi_dmul>
 800f9c6:	4606      	mov	r6, r0
 800f9c8:	460f      	mov	r7, r1
 800f9ca:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800f9ce:	9606      	str	r6, [sp, #24]
 800f9d0:	9307      	str	r3, [sp, #28]
 800f9d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f9d6:	4d57      	ldr	r5, [pc, #348]	@ (800fb34 <_strtod_l+0xaf4>)
 800f9d8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800f9dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f9de:	401d      	ands	r5, r3
 800f9e0:	4b58      	ldr	r3, [pc, #352]	@ (800fb44 <_strtod_l+0xb04>)
 800f9e2:	429d      	cmp	r5, r3
 800f9e4:	f040 80b2 	bne.w	800fb4c <_strtod_l+0xb0c>
 800f9e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f9ea:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800f9ee:	ec4b ab10 	vmov	d0, sl, fp
 800f9f2:	f002 ff89 	bl	8012908 <__ulp>
 800f9f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f9fa:	ec51 0b10 	vmov	r0, r1, d0
 800f9fe:	f7f0 fe23 	bl	8000648 <__aeabi_dmul>
 800fa02:	4652      	mov	r2, sl
 800fa04:	465b      	mov	r3, fp
 800fa06:	f7f0 fc69 	bl	80002dc <__adddf3>
 800fa0a:	460b      	mov	r3, r1
 800fa0c:	4949      	ldr	r1, [pc, #292]	@ (800fb34 <_strtod_l+0xaf4>)
 800fa0e:	4a4e      	ldr	r2, [pc, #312]	@ (800fb48 <_strtod_l+0xb08>)
 800fa10:	4019      	ands	r1, r3
 800fa12:	4291      	cmp	r1, r2
 800fa14:	4682      	mov	sl, r0
 800fa16:	d942      	bls.n	800fa9e <_strtod_l+0xa5e>
 800fa18:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800fa1a:	4b47      	ldr	r3, [pc, #284]	@ (800fb38 <_strtod_l+0xaf8>)
 800fa1c:	429a      	cmp	r2, r3
 800fa1e:	d103      	bne.n	800fa28 <_strtod_l+0x9e8>
 800fa20:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fa22:	3301      	adds	r3, #1
 800fa24:	f43f ad2b 	beq.w	800f47e <_strtod_l+0x43e>
 800fa28:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800fb38 <_strtod_l+0xaf8>
 800fa2c:	f04f 3aff 	mov.w	sl, #4294967295
 800fa30:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800fa32:	9805      	ldr	r0, [sp, #20]
 800fa34:	f002 fc34 	bl	80122a0 <_Bfree>
 800fa38:	9805      	ldr	r0, [sp, #20]
 800fa3a:	4649      	mov	r1, r9
 800fa3c:	f002 fc30 	bl	80122a0 <_Bfree>
 800fa40:	9805      	ldr	r0, [sp, #20]
 800fa42:	4641      	mov	r1, r8
 800fa44:	f002 fc2c 	bl	80122a0 <_Bfree>
 800fa48:	9805      	ldr	r0, [sp, #20]
 800fa4a:	4621      	mov	r1, r4
 800fa4c:	f002 fc28 	bl	80122a0 <_Bfree>
 800fa50:	e618      	b.n	800f684 <_strtod_l+0x644>
 800fa52:	f1ba 0f01 	cmp.w	sl, #1
 800fa56:	d103      	bne.n	800fa60 <_strtod_l+0xa20>
 800fa58:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	f43f ada5 	beq.w	800f5aa <_strtod_l+0x56a>
 800fa60:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800fb10 <_strtod_l+0xad0>
 800fa64:	4f35      	ldr	r7, [pc, #212]	@ (800fb3c <_strtod_l+0xafc>)
 800fa66:	ed8d 7b06 	vstr	d7, [sp, #24]
 800fa6a:	2600      	movs	r6, #0
 800fa6c:	e7b1      	b.n	800f9d2 <_strtod_l+0x992>
 800fa6e:	4f34      	ldr	r7, [pc, #208]	@ (800fb40 <_strtod_l+0xb00>)
 800fa70:	2600      	movs	r6, #0
 800fa72:	e7aa      	b.n	800f9ca <_strtod_l+0x98a>
 800fa74:	4b32      	ldr	r3, [pc, #200]	@ (800fb40 <_strtod_l+0xb00>)
 800fa76:	4630      	mov	r0, r6
 800fa78:	4639      	mov	r1, r7
 800fa7a:	2200      	movs	r2, #0
 800fa7c:	f7f0 fde4 	bl	8000648 <__aeabi_dmul>
 800fa80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fa82:	4606      	mov	r6, r0
 800fa84:	460f      	mov	r7, r1
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d09f      	beq.n	800f9ca <_strtod_l+0x98a>
 800fa8a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800fa8e:	e7a0      	b.n	800f9d2 <_strtod_l+0x992>
 800fa90:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800fb18 <_strtod_l+0xad8>
 800fa94:	ed8d 7b06 	vstr	d7, [sp, #24]
 800fa98:	ec57 6b17 	vmov	r6, r7, d7
 800fa9c:	e799      	b.n	800f9d2 <_strtod_l+0x992>
 800fa9e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800faa2:	9b08      	ldr	r3, [sp, #32]
 800faa4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d1c1      	bne.n	800fa30 <_strtod_l+0x9f0>
 800faac:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800fab0:	0d1b      	lsrs	r3, r3, #20
 800fab2:	051b      	lsls	r3, r3, #20
 800fab4:	429d      	cmp	r5, r3
 800fab6:	d1bb      	bne.n	800fa30 <_strtod_l+0x9f0>
 800fab8:	4630      	mov	r0, r6
 800faba:	4639      	mov	r1, r7
 800fabc:	f7f1 f924 	bl	8000d08 <__aeabi_d2lz>
 800fac0:	f7f0 fd94 	bl	80005ec <__aeabi_l2d>
 800fac4:	4602      	mov	r2, r0
 800fac6:	460b      	mov	r3, r1
 800fac8:	4630      	mov	r0, r6
 800faca:	4639      	mov	r1, r7
 800facc:	f7f0 fc04 	bl	80002d8 <__aeabi_dsub>
 800fad0:	460b      	mov	r3, r1
 800fad2:	4602      	mov	r2, r0
 800fad4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800fad8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800fadc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fade:	ea46 060a 	orr.w	r6, r6, sl
 800fae2:	431e      	orrs	r6, r3
 800fae4:	d06f      	beq.n	800fbc6 <_strtod_l+0xb86>
 800fae6:	a30e      	add	r3, pc, #56	@ (adr r3, 800fb20 <_strtod_l+0xae0>)
 800fae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faec:	f7f1 f81e 	bl	8000b2c <__aeabi_dcmplt>
 800faf0:	2800      	cmp	r0, #0
 800faf2:	f47f accf 	bne.w	800f494 <_strtod_l+0x454>
 800faf6:	a30c      	add	r3, pc, #48	@ (adr r3, 800fb28 <_strtod_l+0xae8>)
 800faf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fafc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fb00:	f7f1 f832 	bl	8000b68 <__aeabi_dcmpgt>
 800fb04:	2800      	cmp	r0, #0
 800fb06:	d093      	beq.n	800fa30 <_strtod_l+0x9f0>
 800fb08:	e4c4      	b.n	800f494 <_strtod_l+0x454>
 800fb0a:	bf00      	nop
 800fb0c:	f3af 8000 	nop.w
 800fb10:	00000000 	.word	0x00000000
 800fb14:	bff00000 	.word	0xbff00000
 800fb18:	00000000 	.word	0x00000000
 800fb1c:	3ff00000 	.word	0x3ff00000
 800fb20:	94a03595 	.word	0x94a03595
 800fb24:	3fdfffff 	.word	0x3fdfffff
 800fb28:	35afe535 	.word	0x35afe535
 800fb2c:	3fe00000 	.word	0x3fe00000
 800fb30:	000fffff 	.word	0x000fffff
 800fb34:	7ff00000 	.word	0x7ff00000
 800fb38:	7fefffff 	.word	0x7fefffff
 800fb3c:	3ff00000 	.word	0x3ff00000
 800fb40:	3fe00000 	.word	0x3fe00000
 800fb44:	7fe00000 	.word	0x7fe00000
 800fb48:	7c9fffff 	.word	0x7c9fffff
 800fb4c:	9b08      	ldr	r3, [sp, #32]
 800fb4e:	b323      	cbz	r3, 800fb9a <_strtod_l+0xb5a>
 800fb50:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800fb54:	d821      	bhi.n	800fb9a <_strtod_l+0xb5a>
 800fb56:	a328      	add	r3, pc, #160	@ (adr r3, 800fbf8 <_strtod_l+0xbb8>)
 800fb58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb5c:	4630      	mov	r0, r6
 800fb5e:	4639      	mov	r1, r7
 800fb60:	f7f0 ffee 	bl	8000b40 <__aeabi_dcmple>
 800fb64:	b1a0      	cbz	r0, 800fb90 <_strtod_l+0xb50>
 800fb66:	4639      	mov	r1, r7
 800fb68:	4630      	mov	r0, r6
 800fb6a:	f7f1 f845 	bl	8000bf8 <__aeabi_d2uiz>
 800fb6e:	2801      	cmp	r0, #1
 800fb70:	bf38      	it	cc
 800fb72:	2001      	movcc	r0, #1
 800fb74:	f7f0 fcee 	bl	8000554 <__aeabi_ui2d>
 800fb78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fb7a:	4606      	mov	r6, r0
 800fb7c:	460f      	mov	r7, r1
 800fb7e:	b9fb      	cbnz	r3, 800fbc0 <_strtod_l+0xb80>
 800fb80:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800fb84:	9014      	str	r0, [sp, #80]	@ 0x50
 800fb86:	9315      	str	r3, [sp, #84]	@ 0x54
 800fb88:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800fb8c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800fb90:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800fb92:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800fb96:	1b5b      	subs	r3, r3, r5
 800fb98:	9311      	str	r3, [sp, #68]	@ 0x44
 800fb9a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800fb9e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800fba2:	f002 feb1 	bl	8012908 <__ulp>
 800fba6:	4650      	mov	r0, sl
 800fba8:	ec53 2b10 	vmov	r2, r3, d0
 800fbac:	4659      	mov	r1, fp
 800fbae:	f7f0 fd4b 	bl	8000648 <__aeabi_dmul>
 800fbb2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800fbb6:	f7f0 fb91 	bl	80002dc <__adddf3>
 800fbba:	4682      	mov	sl, r0
 800fbbc:	468b      	mov	fp, r1
 800fbbe:	e770      	b.n	800faa2 <_strtod_l+0xa62>
 800fbc0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800fbc4:	e7e0      	b.n	800fb88 <_strtod_l+0xb48>
 800fbc6:	a30e      	add	r3, pc, #56	@ (adr r3, 800fc00 <_strtod_l+0xbc0>)
 800fbc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbcc:	f7f0 ffae 	bl	8000b2c <__aeabi_dcmplt>
 800fbd0:	e798      	b.n	800fb04 <_strtod_l+0xac4>
 800fbd2:	2300      	movs	r3, #0
 800fbd4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fbd6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800fbd8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fbda:	6013      	str	r3, [r2, #0]
 800fbdc:	f7ff ba6d 	b.w	800f0ba <_strtod_l+0x7a>
 800fbe0:	2a65      	cmp	r2, #101	@ 0x65
 800fbe2:	f43f ab66 	beq.w	800f2b2 <_strtod_l+0x272>
 800fbe6:	2a45      	cmp	r2, #69	@ 0x45
 800fbe8:	f43f ab63 	beq.w	800f2b2 <_strtod_l+0x272>
 800fbec:	2301      	movs	r3, #1
 800fbee:	f7ff bb9e 	b.w	800f32e <_strtod_l+0x2ee>
 800fbf2:	bf00      	nop
 800fbf4:	f3af 8000 	nop.w
 800fbf8:	ffc00000 	.word	0xffc00000
 800fbfc:	41dfffff 	.word	0x41dfffff
 800fc00:	94a03595 	.word	0x94a03595
 800fc04:	3fcfffff 	.word	0x3fcfffff

0800fc08 <_strtod_r>:
 800fc08:	4b01      	ldr	r3, [pc, #4]	@ (800fc10 <_strtod_r+0x8>)
 800fc0a:	f7ff ba19 	b.w	800f040 <_strtod_l>
 800fc0e:	bf00      	nop
 800fc10:	2000009c 	.word	0x2000009c

0800fc14 <strtod>:
 800fc14:	460a      	mov	r2, r1
 800fc16:	4601      	mov	r1, r0
 800fc18:	4802      	ldr	r0, [pc, #8]	@ (800fc24 <strtod+0x10>)
 800fc1a:	4b03      	ldr	r3, [pc, #12]	@ (800fc28 <strtod+0x14>)
 800fc1c:	6800      	ldr	r0, [r0, #0]
 800fc1e:	f7ff ba0f 	b.w	800f040 <_strtod_l>
 800fc22:	bf00      	nop
 800fc24:	20000208 	.word	0x20000208
 800fc28:	2000009c 	.word	0x2000009c

0800fc2c <__cvt>:
 800fc2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fc30:	ec57 6b10 	vmov	r6, r7, d0
 800fc34:	2f00      	cmp	r7, #0
 800fc36:	460c      	mov	r4, r1
 800fc38:	4619      	mov	r1, r3
 800fc3a:	463b      	mov	r3, r7
 800fc3c:	bfbb      	ittet	lt
 800fc3e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800fc42:	461f      	movlt	r7, r3
 800fc44:	2300      	movge	r3, #0
 800fc46:	232d      	movlt	r3, #45	@ 0x2d
 800fc48:	700b      	strb	r3, [r1, #0]
 800fc4a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fc4c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800fc50:	4691      	mov	r9, r2
 800fc52:	f023 0820 	bic.w	r8, r3, #32
 800fc56:	bfbc      	itt	lt
 800fc58:	4632      	movlt	r2, r6
 800fc5a:	4616      	movlt	r6, r2
 800fc5c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800fc60:	d005      	beq.n	800fc6e <__cvt+0x42>
 800fc62:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800fc66:	d100      	bne.n	800fc6a <__cvt+0x3e>
 800fc68:	3401      	adds	r4, #1
 800fc6a:	2102      	movs	r1, #2
 800fc6c:	e000      	b.n	800fc70 <__cvt+0x44>
 800fc6e:	2103      	movs	r1, #3
 800fc70:	ab03      	add	r3, sp, #12
 800fc72:	9301      	str	r3, [sp, #4]
 800fc74:	ab02      	add	r3, sp, #8
 800fc76:	9300      	str	r3, [sp, #0]
 800fc78:	ec47 6b10 	vmov	d0, r6, r7
 800fc7c:	4653      	mov	r3, sl
 800fc7e:	4622      	mov	r2, r4
 800fc80:	f001 f8be 	bl	8010e00 <_dtoa_r>
 800fc84:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800fc88:	4605      	mov	r5, r0
 800fc8a:	d119      	bne.n	800fcc0 <__cvt+0x94>
 800fc8c:	f019 0f01 	tst.w	r9, #1
 800fc90:	d00e      	beq.n	800fcb0 <__cvt+0x84>
 800fc92:	eb00 0904 	add.w	r9, r0, r4
 800fc96:	2200      	movs	r2, #0
 800fc98:	2300      	movs	r3, #0
 800fc9a:	4630      	mov	r0, r6
 800fc9c:	4639      	mov	r1, r7
 800fc9e:	f7f0 ff3b 	bl	8000b18 <__aeabi_dcmpeq>
 800fca2:	b108      	cbz	r0, 800fca8 <__cvt+0x7c>
 800fca4:	f8cd 900c 	str.w	r9, [sp, #12]
 800fca8:	2230      	movs	r2, #48	@ 0x30
 800fcaa:	9b03      	ldr	r3, [sp, #12]
 800fcac:	454b      	cmp	r3, r9
 800fcae:	d31e      	bcc.n	800fcee <__cvt+0xc2>
 800fcb0:	9b03      	ldr	r3, [sp, #12]
 800fcb2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fcb4:	1b5b      	subs	r3, r3, r5
 800fcb6:	4628      	mov	r0, r5
 800fcb8:	6013      	str	r3, [r2, #0]
 800fcba:	b004      	add	sp, #16
 800fcbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fcc0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800fcc4:	eb00 0904 	add.w	r9, r0, r4
 800fcc8:	d1e5      	bne.n	800fc96 <__cvt+0x6a>
 800fcca:	7803      	ldrb	r3, [r0, #0]
 800fccc:	2b30      	cmp	r3, #48	@ 0x30
 800fcce:	d10a      	bne.n	800fce6 <__cvt+0xba>
 800fcd0:	2200      	movs	r2, #0
 800fcd2:	2300      	movs	r3, #0
 800fcd4:	4630      	mov	r0, r6
 800fcd6:	4639      	mov	r1, r7
 800fcd8:	f7f0 ff1e 	bl	8000b18 <__aeabi_dcmpeq>
 800fcdc:	b918      	cbnz	r0, 800fce6 <__cvt+0xba>
 800fcde:	f1c4 0401 	rsb	r4, r4, #1
 800fce2:	f8ca 4000 	str.w	r4, [sl]
 800fce6:	f8da 3000 	ldr.w	r3, [sl]
 800fcea:	4499      	add	r9, r3
 800fcec:	e7d3      	b.n	800fc96 <__cvt+0x6a>
 800fcee:	1c59      	adds	r1, r3, #1
 800fcf0:	9103      	str	r1, [sp, #12]
 800fcf2:	701a      	strb	r2, [r3, #0]
 800fcf4:	e7d9      	b.n	800fcaa <__cvt+0x7e>

0800fcf6 <__exponent>:
 800fcf6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fcf8:	2900      	cmp	r1, #0
 800fcfa:	bfba      	itte	lt
 800fcfc:	4249      	neglt	r1, r1
 800fcfe:	232d      	movlt	r3, #45	@ 0x2d
 800fd00:	232b      	movge	r3, #43	@ 0x2b
 800fd02:	2909      	cmp	r1, #9
 800fd04:	7002      	strb	r2, [r0, #0]
 800fd06:	7043      	strb	r3, [r0, #1]
 800fd08:	dd29      	ble.n	800fd5e <__exponent+0x68>
 800fd0a:	f10d 0307 	add.w	r3, sp, #7
 800fd0e:	461d      	mov	r5, r3
 800fd10:	270a      	movs	r7, #10
 800fd12:	461a      	mov	r2, r3
 800fd14:	fbb1 f6f7 	udiv	r6, r1, r7
 800fd18:	fb07 1416 	mls	r4, r7, r6, r1
 800fd1c:	3430      	adds	r4, #48	@ 0x30
 800fd1e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800fd22:	460c      	mov	r4, r1
 800fd24:	2c63      	cmp	r4, #99	@ 0x63
 800fd26:	f103 33ff 	add.w	r3, r3, #4294967295
 800fd2a:	4631      	mov	r1, r6
 800fd2c:	dcf1      	bgt.n	800fd12 <__exponent+0x1c>
 800fd2e:	3130      	adds	r1, #48	@ 0x30
 800fd30:	1e94      	subs	r4, r2, #2
 800fd32:	f803 1c01 	strb.w	r1, [r3, #-1]
 800fd36:	1c41      	adds	r1, r0, #1
 800fd38:	4623      	mov	r3, r4
 800fd3a:	42ab      	cmp	r3, r5
 800fd3c:	d30a      	bcc.n	800fd54 <__exponent+0x5e>
 800fd3e:	f10d 0309 	add.w	r3, sp, #9
 800fd42:	1a9b      	subs	r3, r3, r2
 800fd44:	42ac      	cmp	r4, r5
 800fd46:	bf88      	it	hi
 800fd48:	2300      	movhi	r3, #0
 800fd4a:	3302      	adds	r3, #2
 800fd4c:	4403      	add	r3, r0
 800fd4e:	1a18      	subs	r0, r3, r0
 800fd50:	b003      	add	sp, #12
 800fd52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd54:	f813 6b01 	ldrb.w	r6, [r3], #1
 800fd58:	f801 6f01 	strb.w	r6, [r1, #1]!
 800fd5c:	e7ed      	b.n	800fd3a <__exponent+0x44>
 800fd5e:	2330      	movs	r3, #48	@ 0x30
 800fd60:	3130      	adds	r1, #48	@ 0x30
 800fd62:	7083      	strb	r3, [r0, #2]
 800fd64:	70c1      	strb	r1, [r0, #3]
 800fd66:	1d03      	adds	r3, r0, #4
 800fd68:	e7f1      	b.n	800fd4e <__exponent+0x58>
	...

0800fd6c <_printf_float>:
 800fd6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd70:	b08d      	sub	sp, #52	@ 0x34
 800fd72:	460c      	mov	r4, r1
 800fd74:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800fd78:	4616      	mov	r6, r2
 800fd7a:	461f      	mov	r7, r3
 800fd7c:	4605      	mov	r5, r0
 800fd7e:	f000 ff21 	bl	8010bc4 <_localeconv_r>
 800fd82:	6803      	ldr	r3, [r0, #0]
 800fd84:	9304      	str	r3, [sp, #16]
 800fd86:	4618      	mov	r0, r3
 800fd88:	f7f0 fa9a 	bl	80002c0 <strlen>
 800fd8c:	2300      	movs	r3, #0
 800fd8e:	930a      	str	r3, [sp, #40]	@ 0x28
 800fd90:	f8d8 3000 	ldr.w	r3, [r8]
 800fd94:	9005      	str	r0, [sp, #20]
 800fd96:	3307      	adds	r3, #7
 800fd98:	f023 0307 	bic.w	r3, r3, #7
 800fd9c:	f103 0208 	add.w	r2, r3, #8
 800fda0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800fda4:	f8d4 b000 	ldr.w	fp, [r4]
 800fda8:	f8c8 2000 	str.w	r2, [r8]
 800fdac:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fdb0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800fdb4:	9307      	str	r3, [sp, #28]
 800fdb6:	f8cd 8018 	str.w	r8, [sp, #24]
 800fdba:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800fdbe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fdc2:	4b9c      	ldr	r3, [pc, #624]	@ (8010034 <_printf_float+0x2c8>)
 800fdc4:	f04f 32ff 	mov.w	r2, #4294967295
 800fdc8:	f7f0 fed8 	bl	8000b7c <__aeabi_dcmpun>
 800fdcc:	bb70      	cbnz	r0, 800fe2c <_printf_float+0xc0>
 800fdce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fdd2:	4b98      	ldr	r3, [pc, #608]	@ (8010034 <_printf_float+0x2c8>)
 800fdd4:	f04f 32ff 	mov.w	r2, #4294967295
 800fdd8:	f7f0 feb2 	bl	8000b40 <__aeabi_dcmple>
 800fddc:	bb30      	cbnz	r0, 800fe2c <_printf_float+0xc0>
 800fdde:	2200      	movs	r2, #0
 800fde0:	2300      	movs	r3, #0
 800fde2:	4640      	mov	r0, r8
 800fde4:	4649      	mov	r1, r9
 800fde6:	f7f0 fea1 	bl	8000b2c <__aeabi_dcmplt>
 800fdea:	b110      	cbz	r0, 800fdf2 <_printf_float+0x86>
 800fdec:	232d      	movs	r3, #45	@ 0x2d
 800fdee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fdf2:	4a91      	ldr	r2, [pc, #580]	@ (8010038 <_printf_float+0x2cc>)
 800fdf4:	4b91      	ldr	r3, [pc, #580]	@ (801003c <_printf_float+0x2d0>)
 800fdf6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800fdfa:	bf94      	ite	ls
 800fdfc:	4690      	movls	r8, r2
 800fdfe:	4698      	movhi	r8, r3
 800fe00:	2303      	movs	r3, #3
 800fe02:	6123      	str	r3, [r4, #16]
 800fe04:	f02b 0304 	bic.w	r3, fp, #4
 800fe08:	6023      	str	r3, [r4, #0]
 800fe0a:	f04f 0900 	mov.w	r9, #0
 800fe0e:	9700      	str	r7, [sp, #0]
 800fe10:	4633      	mov	r3, r6
 800fe12:	aa0b      	add	r2, sp, #44	@ 0x2c
 800fe14:	4621      	mov	r1, r4
 800fe16:	4628      	mov	r0, r5
 800fe18:	f000 f9d2 	bl	80101c0 <_printf_common>
 800fe1c:	3001      	adds	r0, #1
 800fe1e:	f040 808d 	bne.w	800ff3c <_printf_float+0x1d0>
 800fe22:	f04f 30ff 	mov.w	r0, #4294967295
 800fe26:	b00d      	add	sp, #52	@ 0x34
 800fe28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe2c:	4642      	mov	r2, r8
 800fe2e:	464b      	mov	r3, r9
 800fe30:	4640      	mov	r0, r8
 800fe32:	4649      	mov	r1, r9
 800fe34:	f7f0 fea2 	bl	8000b7c <__aeabi_dcmpun>
 800fe38:	b140      	cbz	r0, 800fe4c <_printf_float+0xe0>
 800fe3a:	464b      	mov	r3, r9
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	bfbc      	itt	lt
 800fe40:	232d      	movlt	r3, #45	@ 0x2d
 800fe42:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800fe46:	4a7e      	ldr	r2, [pc, #504]	@ (8010040 <_printf_float+0x2d4>)
 800fe48:	4b7e      	ldr	r3, [pc, #504]	@ (8010044 <_printf_float+0x2d8>)
 800fe4a:	e7d4      	b.n	800fdf6 <_printf_float+0x8a>
 800fe4c:	6863      	ldr	r3, [r4, #4]
 800fe4e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800fe52:	9206      	str	r2, [sp, #24]
 800fe54:	1c5a      	adds	r2, r3, #1
 800fe56:	d13b      	bne.n	800fed0 <_printf_float+0x164>
 800fe58:	2306      	movs	r3, #6
 800fe5a:	6063      	str	r3, [r4, #4]
 800fe5c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800fe60:	2300      	movs	r3, #0
 800fe62:	6022      	str	r2, [r4, #0]
 800fe64:	9303      	str	r3, [sp, #12]
 800fe66:	ab0a      	add	r3, sp, #40	@ 0x28
 800fe68:	e9cd a301 	strd	sl, r3, [sp, #4]
 800fe6c:	ab09      	add	r3, sp, #36	@ 0x24
 800fe6e:	9300      	str	r3, [sp, #0]
 800fe70:	6861      	ldr	r1, [r4, #4]
 800fe72:	ec49 8b10 	vmov	d0, r8, r9
 800fe76:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800fe7a:	4628      	mov	r0, r5
 800fe7c:	f7ff fed6 	bl	800fc2c <__cvt>
 800fe80:	9b06      	ldr	r3, [sp, #24]
 800fe82:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800fe84:	2b47      	cmp	r3, #71	@ 0x47
 800fe86:	4680      	mov	r8, r0
 800fe88:	d129      	bne.n	800fede <_printf_float+0x172>
 800fe8a:	1cc8      	adds	r0, r1, #3
 800fe8c:	db02      	blt.n	800fe94 <_printf_float+0x128>
 800fe8e:	6863      	ldr	r3, [r4, #4]
 800fe90:	4299      	cmp	r1, r3
 800fe92:	dd41      	ble.n	800ff18 <_printf_float+0x1ac>
 800fe94:	f1aa 0a02 	sub.w	sl, sl, #2
 800fe98:	fa5f fa8a 	uxtb.w	sl, sl
 800fe9c:	3901      	subs	r1, #1
 800fe9e:	4652      	mov	r2, sl
 800fea0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800fea4:	9109      	str	r1, [sp, #36]	@ 0x24
 800fea6:	f7ff ff26 	bl	800fcf6 <__exponent>
 800feaa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800feac:	1813      	adds	r3, r2, r0
 800feae:	2a01      	cmp	r2, #1
 800feb0:	4681      	mov	r9, r0
 800feb2:	6123      	str	r3, [r4, #16]
 800feb4:	dc02      	bgt.n	800febc <_printf_float+0x150>
 800feb6:	6822      	ldr	r2, [r4, #0]
 800feb8:	07d2      	lsls	r2, r2, #31
 800feba:	d501      	bpl.n	800fec0 <_printf_float+0x154>
 800febc:	3301      	adds	r3, #1
 800febe:	6123      	str	r3, [r4, #16]
 800fec0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d0a2      	beq.n	800fe0e <_printf_float+0xa2>
 800fec8:	232d      	movs	r3, #45	@ 0x2d
 800feca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fece:	e79e      	b.n	800fe0e <_printf_float+0xa2>
 800fed0:	9a06      	ldr	r2, [sp, #24]
 800fed2:	2a47      	cmp	r2, #71	@ 0x47
 800fed4:	d1c2      	bne.n	800fe5c <_printf_float+0xf0>
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d1c0      	bne.n	800fe5c <_printf_float+0xf0>
 800feda:	2301      	movs	r3, #1
 800fedc:	e7bd      	b.n	800fe5a <_printf_float+0xee>
 800fede:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800fee2:	d9db      	bls.n	800fe9c <_printf_float+0x130>
 800fee4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800fee8:	d118      	bne.n	800ff1c <_printf_float+0x1b0>
 800feea:	2900      	cmp	r1, #0
 800feec:	6863      	ldr	r3, [r4, #4]
 800feee:	dd0b      	ble.n	800ff08 <_printf_float+0x19c>
 800fef0:	6121      	str	r1, [r4, #16]
 800fef2:	b913      	cbnz	r3, 800fefa <_printf_float+0x18e>
 800fef4:	6822      	ldr	r2, [r4, #0]
 800fef6:	07d0      	lsls	r0, r2, #31
 800fef8:	d502      	bpl.n	800ff00 <_printf_float+0x194>
 800fefa:	3301      	adds	r3, #1
 800fefc:	440b      	add	r3, r1
 800fefe:	6123      	str	r3, [r4, #16]
 800ff00:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ff02:	f04f 0900 	mov.w	r9, #0
 800ff06:	e7db      	b.n	800fec0 <_printf_float+0x154>
 800ff08:	b913      	cbnz	r3, 800ff10 <_printf_float+0x1a4>
 800ff0a:	6822      	ldr	r2, [r4, #0]
 800ff0c:	07d2      	lsls	r2, r2, #31
 800ff0e:	d501      	bpl.n	800ff14 <_printf_float+0x1a8>
 800ff10:	3302      	adds	r3, #2
 800ff12:	e7f4      	b.n	800fefe <_printf_float+0x192>
 800ff14:	2301      	movs	r3, #1
 800ff16:	e7f2      	b.n	800fefe <_printf_float+0x192>
 800ff18:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800ff1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ff1e:	4299      	cmp	r1, r3
 800ff20:	db05      	blt.n	800ff2e <_printf_float+0x1c2>
 800ff22:	6823      	ldr	r3, [r4, #0]
 800ff24:	6121      	str	r1, [r4, #16]
 800ff26:	07d8      	lsls	r0, r3, #31
 800ff28:	d5ea      	bpl.n	800ff00 <_printf_float+0x194>
 800ff2a:	1c4b      	adds	r3, r1, #1
 800ff2c:	e7e7      	b.n	800fefe <_printf_float+0x192>
 800ff2e:	2900      	cmp	r1, #0
 800ff30:	bfd4      	ite	le
 800ff32:	f1c1 0202 	rsble	r2, r1, #2
 800ff36:	2201      	movgt	r2, #1
 800ff38:	4413      	add	r3, r2
 800ff3a:	e7e0      	b.n	800fefe <_printf_float+0x192>
 800ff3c:	6823      	ldr	r3, [r4, #0]
 800ff3e:	055a      	lsls	r2, r3, #21
 800ff40:	d407      	bmi.n	800ff52 <_printf_float+0x1e6>
 800ff42:	6923      	ldr	r3, [r4, #16]
 800ff44:	4642      	mov	r2, r8
 800ff46:	4631      	mov	r1, r6
 800ff48:	4628      	mov	r0, r5
 800ff4a:	47b8      	blx	r7
 800ff4c:	3001      	adds	r0, #1
 800ff4e:	d12b      	bne.n	800ffa8 <_printf_float+0x23c>
 800ff50:	e767      	b.n	800fe22 <_printf_float+0xb6>
 800ff52:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ff56:	f240 80dd 	bls.w	8010114 <_printf_float+0x3a8>
 800ff5a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ff5e:	2200      	movs	r2, #0
 800ff60:	2300      	movs	r3, #0
 800ff62:	f7f0 fdd9 	bl	8000b18 <__aeabi_dcmpeq>
 800ff66:	2800      	cmp	r0, #0
 800ff68:	d033      	beq.n	800ffd2 <_printf_float+0x266>
 800ff6a:	4a37      	ldr	r2, [pc, #220]	@ (8010048 <_printf_float+0x2dc>)
 800ff6c:	2301      	movs	r3, #1
 800ff6e:	4631      	mov	r1, r6
 800ff70:	4628      	mov	r0, r5
 800ff72:	47b8      	blx	r7
 800ff74:	3001      	adds	r0, #1
 800ff76:	f43f af54 	beq.w	800fe22 <_printf_float+0xb6>
 800ff7a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800ff7e:	4543      	cmp	r3, r8
 800ff80:	db02      	blt.n	800ff88 <_printf_float+0x21c>
 800ff82:	6823      	ldr	r3, [r4, #0]
 800ff84:	07d8      	lsls	r0, r3, #31
 800ff86:	d50f      	bpl.n	800ffa8 <_printf_float+0x23c>
 800ff88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ff8c:	4631      	mov	r1, r6
 800ff8e:	4628      	mov	r0, r5
 800ff90:	47b8      	blx	r7
 800ff92:	3001      	adds	r0, #1
 800ff94:	f43f af45 	beq.w	800fe22 <_printf_float+0xb6>
 800ff98:	f04f 0900 	mov.w	r9, #0
 800ff9c:	f108 38ff 	add.w	r8, r8, #4294967295
 800ffa0:	f104 0a1a 	add.w	sl, r4, #26
 800ffa4:	45c8      	cmp	r8, r9
 800ffa6:	dc09      	bgt.n	800ffbc <_printf_float+0x250>
 800ffa8:	6823      	ldr	r3, [r4, #0]
 800ffaa:	079b      	lsls	r3, r3, #30
 800ffac:	f100 8103 	bmi.w	80101b6 <_printf_float+0x44a>
 800ffb0:	68e0      	ldr	r0, [r4, #12]
 800ffb2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ffb4:	4298      	cmp	r0, r3
 800ffb6:	bfb8      	it	lt
 800ffb8:	4618      	movlt	r0, r3
 800ffba:	e734      	b.n	800fe26 <_printf_float+0xba>
 800ffbc:	2301      	movs	r3, #1
 800ffbe:	4652      	mov	r2, sl
 800ffc0:	4631      	mov	r1, r6
 800ffc2:	4628      	mov	r0, r5
 800ffc4:	47b8      	blx	r7
 800ffc6:	3001      	adds	r0, #1
 800ffc8:	f43f af2b 	beq.w	800fe22 <_printf_float+0xb6>
 800ffcc:	f109 0901 	add.w	r9, r9, #1
 800ffd0:	e7e8      	b.n	800ffa4 <_printf_float+0x238>
 800ffd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	dc39      	bgt.n	801004c <_printf_float+0x2e0>
 800ffd8:	4a1b      	ldr	r2, [pc, #108]	@ (8010048 <_printf_float+0x2dc>)
 800ffda:	2301      	movs	r3, #1
 800ffdc:	4631      	mov	r1, r6
 800ffde:	4628      	mov	r0, r5
 800ffe0:	47b8      	blx	r7
 800ffe2:	3001      	adds	r0, #1
 800ffe4:	f43f af1d 	beq.w	800fe22 <_printf_float+0xb6>
 800ffe8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800ffec:	ea59 0303 	orrs.w	r3, r9, r3
 800fff0:	d102      	bne.n	800fff8 <_printf_float+0x28c>
 800fff2:	6823      	ldr	r3, [r4, #0]
 800fff4:	07d9      	lsls	r1, r3, #31
 800fff6:	d5d7      	bpl.n	800ffa8 <_printf_float+0x23c>
 800fff8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fffc:	4631      	mov	r1, r6
 800fffe:	4628      	mov	r0, r5
 8010000:	47b8      	blx	r7
 8010002:	3001      	adds	r0, #1
 8010004:	f43f af0d 	beq.w	800fe22 <_printf_float+0xb6>
 8010008:	f04f 0a00 	mov.w	sl, #0
 801000c:	f104 0b1a 	add.w	fp, r4, #26
 8010010:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010012:	425b      	negs	r3, r3
 8010014:	4553      	cmp	r3, sl
 8010016:	dc01      	bgt.n	801001c <_printf_float+0x2b0>
 8010018:	464b      	mov	r3, r9
 801001a:	e793      	b.n	800ff44 <_printf_float+0x1d8>
 801001c:	2301      	movs	r3, #1
 801001e:	465a      	mov	r2, fp
 8010020:	4631      	mov	r1, r6
 8010022:	4628      	mov	r0, r5
 8010024:	47b8      	blx	r7
 8010026:	3001      	adds	r0, #1
 8010028:	f43f aefb 	beq.w	800fe22 <_printf_float+0xb6>
 801002c:	f10a 0a01 	add.w	sl, sl, #1
 8010030:	e7ee      	b.n	8010010 <_printf_float+0x2a4>
 8010032:	bf00      	nop
 8010034:	7fefffff 	.word	0x7fefffff
 8010038:	08013b70 	.word	0x08013b70
 801003c:	08013b74 	.word	0x08013b74
 8010040:	08013b78 	.word	0x08013b78
 8010044:	08013b7c 	.word	0x08013b7c
 8010048:	08013b80 	.word	0x08013b80
 801004c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801004e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8010052:	4553      	cmp	r3, sl
 8010054:	bfa8      	it	ge
 8010056:	4653      	movge	r3, sl
 8010058:	2b00      	cmp	r3, #0
 801005a:	4699      	mov	r9, r3
 801005c:	dc36      	bgt.n	80100cc <_printf_float+0x360>
 801005e:	f04f 0b00 	mov.w	fp, #0
 8010062:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010066:	f104 021a 	add.w	r2, r4, #26
 801006a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801006c:	9306      	str	r3, [sp, #24]
 801006e:	eba3 0309 	sub.w	r3, r3, r9
 8010072:	455b      	cmp	r3, fp
 8010074:	dc31      	bgt.n	80100da <_printf_float+0x36e>
 8010076:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010078:	459a      	cmp	sl, r3
 801007a:	dc3a      	bgt.n	80100f2 <_printf_float+0x386>
 801007c:	6823      	ldr	r3, [r4, #0]
 801007e:	07da      	lsls	r2, r3, #31
 8010080:	d437      	bmi.n	80100f2 <_printf_float+0x386>
 8010082:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010084:	ebaa 0903 	sub.w	r9, sl, r3
 8010088:	9b06      	ldr	r3, [sp, #24]
 801008a:	ebaa 0303 	sub.w	r3, sl, r3
 801008e:	4599      	cmp	r9, r3
 8010090:	bfa8      	it	ge
 8010092:	4699      	movge	r9, r3
 8010094:	f1b9 0f00 	cmp.w	r9, #0
 8010098:	dc33      	bgt.n	8010102 <_printf_float+0x396>
 801009a:	f04f 0800 	mov.w	r8, #0
 801009e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80100a2:	f104 0b1a 	add.w	fp, r4, #26
 80100a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80100a8:	ebaa 0303 	sub.w	r3, sl, r3
 80100ac:	eba3 0309 	sub.w	r3, r3, r9
 80100b0:	4543      	cmp	r3, r8
 80100b2:	f77f af79 	ble.w	800ffa8 <_printf_float+0x23c>
 80100b6:	2301      	movs	r3, #1
 80100b8:	465a      	mov	r2, fp
 80100ba:	4631      	mov	r1, r6
 80100bc:	4628      	mov	r0, r5
 80100be:	47b8      	blx	r7
 80100c0:	3001      	adds	r0, #1
 80100c2:	f43f aeae 	beq.w	800fe22 <_printf_float+0xb6>
 80100c6:	f108 0801 	add.w	r8, r8, #1
 80100ca:	e7ec      	b.n	80100a6 <_printf_float+0x33a>
 80100cc:	4642      	mov	r2, r8
 80100ce:	4631      	mov	r1, r6
 80100d0:	4628      	mov	r0, r5
 80100d2:	47b8      	blx	r7
 80100d4:	3001      	adds	r0, #1
 80100d6:	d1c2      	bne.n	801005e <_printf_float+0x2f2>
 80100d8:	e6a3      	b.n	800fe22 <_printf_float+0xb6>
 80100da:	2301      	movs	r3, #1
 80100dc:	4631      	mov	r1, r6
 80100de:	4628      	mov	r0, r5
 80100e0:	9206      	str	r2, [sp, #24]
 80100e2:	47b8      	blx	r7
 80100e4:	3001      	adds	r0, #1
 80100e6:	f43f ae9c 	beq.w	800fe22 <_printf_float+0xb6>
 80100ea:	9a06      	ldr	r2, [sp, #24]
 80100ec:	f10b 0b01 	add.w	fp, fp, #1
 80100f0:	e7bb      	b.n	801006a <_printf_float+0x2fe>
 80100f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80100f6:	4631      	mov	r1, r6
 80100f8:	4628      	mov	r0, r5
 80100fa:	47b8      	blx	r7
 80100fc:	3001      	adds	r0, #1
 80100fe:	d1c0      	bne.n	8010082 <_printf_float+0x316>
 8010100:	e68f      	b.n	800fe22 <_printf_float+0xb6>
 8010102:	9a06      	ldr	r2, [sp, #24]
 8010104:	464b      	mov	r3, r9
 8010106:	4442      	add	r2, r8
 8010108:	4631      	mov	r1, r6
 801010a:	4628      	mov	r0, r5
 801010c:	47b8      	blx	r7
 801010e:	3001      	adds	r0, #1
 8010110:	d1c3      	bne.n	801009a <_printf_float+0x32e>
 8010112:	e686      	b.n	800fe22 <_printf_float+0xb6>
 8010114:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8010118:	f1ba 0f01 	cmp.w	sl, #1
 801011c:	dc01      	bgt.n	8010122 <_printf_float+0x3b6>
 801011e:	07db      	lsls	r3, r3, #31
 8010120:	d536      	bpl.n	8010190 <_printf_float+0x424>
 8010122:	2301      	movs	r3, #1
 8010124:	4642      	mov	r2, r8
 8010126:	4631      	mov	r1, r6
 8010128:	4628      	mov	r0, r5
 801012a:	47b8      	blx	r7
 801012c:	3001      	adds	r0, #1
 801012e:	f43f ae78 	beq.w	800fe22 <_printf_float+0xb6>
 8010132:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010136:	4631      	mov	r1, r6
 8010138:	4628      	mov	r0, r5
 801013a:	47b8      	blx	r7
 801013c:	3001      	adds	r0, #1
 801013e:	f43f ae70 	beq.w	800fe22 <_printf_float+0xb6>
 8010142:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8010146:	2200      	movs	r2, #0
 8010148:	2300      	movs	r3, #0
 801014a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801014e:	f7f0 fce3 	bl	8000b18 <__aeabi_dcmpeq>
 8010152:	b9c0      	cbnz	r0, 8010186 <_printf_float+0x41a>
 8010154:	4653      	mov	r3, sl
 8010156:	f108 0201 	add.w	r2, r8, #1
 801015a:	4631      	mov	r1, r6
 801015c:	4628      	mov	r0, r5
 801015e:	47b8      	blx	r7
 8010160:	3001      	adds	r0, #1
 8010162:	d10c      	bne.n	801017e <_printf_float+0x412>
 8010164:	e65d      	b.n	800fe22 <_printf_float+0xb6>
 8010166:	2301      	movs	r3, #1
 8010168:	465a      	mov	r2, fp
 801016a:	4631      	mov	r1, r6
 801016c:	4628      	mov	r0, r5
 801016e:	47b8      	blx	r7
 8010170:	3001      	adds	r0, #1
 8010172:	f43f ae56 	beq.w	800fe22 <_printf_float+0xb6>
 8010176:	f108 0801 	add.w	r8, r8, #1
 801017a:	45d0      	cmp	r8, sl
 801017c:	dbf3      	blt.n	8010166 <_printf_float+0x3fa>
 801017e:	464b      	mov	r3, r9
 8010180:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8010184:	e6df      	b.n	800ff46 <_printf_float+0x1da>
 8010186:	f04f 0800 	mov.w	r8, #0
 801018a:	f104 0b1a 	add.w	fp, r4, #26
 801018e:	e7f4      	b.n	801017a <_printf_float+0x40e>
 8010190:	2301      	movs	r3, #1
 8010192:	4642      	mov	r2, r8
 8010194:	e7e1      	b.n	801015a <_printf_float+0x3ee>
 8010196:	2301      	movs	r3, #1
 8010198:	464a      	mov	r2, r9
 801019a:	4631      	mov	r1, r6
 801019c:	4628      	mov	r0, r5
 801019e:	47b8      	blx	r7
 80101a0:	3001      	adds	r0, #1
 80101a2:	f43f ae3e 	beq.w	800fe22 <_printf_float+0xb6>
 80101a6:	f108 0801 	add.w	r8, r8, #1
 80101aa:	68e3      	ldr	r3, [r4, #12]
 80101ac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80101ae:	1a5b      	subs	r3, r3, r1
 80101b0:	4543      	cmp	r3, r8
 80101b2:	dcf0      	bgt.n	8010196 <_printf_float+0x42a>
 80101b4:	e6fc      	b.n	800ffb0 <_printf_float+0x244>
 80101b6:	f04f 0800 	mov.w	r8, #0
 80101ba:	f104 0919 	add.w	r9, r4, #25
 80101be:	e7f4      	b.n	80101aa <_printf_float+0x43e>

080101c0 <_printf_common>:
 80101c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80101c4:	4616      	mov	r6, r2
 80101c6:	4698      	mov	r8, r3
 80101c8:	688a      	ldr	r2, [r1, #8]
 80101ca:	690b      	ldr	r3, [r1, #16]
 80101cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80101d0:	4293      	cmp	r3, r2
 80101d2:	bfb8      	it	lt
 80101d4:	4613      	movlt	r3, r2
 80101d6:	6033      	str	r3, [r6, #0]
 80101d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80101dc:	4607      	mov	r7, r0
 80101de:	460c      	mov	r4, r1
 80101e0:	b10a      	cbz	r2, 80101e6 <_printf_common+0x26>
 80101e2:	3301      	adds	r3, #1
 80101e4:	6033      	str	r3, [r6, #0]
 80101e6:	6823      	ldr	r3, [r4, #0]
 80101e8:	0699      	lsls	r1, r3, #26
 80101ea:	bf42      	ittt	mi
 80101ec:	6833      	ldrmi	r3, [r6, #0]
 80101ee:	3302      	addmi	r3, #2
 80101f0:	6033      	strmi	r3, [r6, #0]
 80101f2:	6825      	ldr	r5, [r4, #0]
 80101f4:	f015 0506 	ands.w	r5, r5, #6
 80101f8:	d106      	bne.n	8010208 <_printf_common+0x48>
 80101fa:	f104 0a19 	add.w	sl, r4, #25
 80101fe:	68e3      	ldr	r3, [r4, #12]
 8010200:	6832      	ldr	r2, [r6, #0]
 8010202:	1a9b      	subs	r3, r3, r2
 8010204:	42ab      	cmp	r3, r5
 8010206:	dc26      	bgt.n	8010256 <_printf_common+0x96>
 8010208:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801020c:	6822      	ldr	r2, [r4, #0]
 801020e:	3b00      	subs	r3, #0
 8010210:	bf18      	it	ne
 8010212:	2301      	movne	r3, #1
 8010214:	0692      	lsls	r2, r2, #26
 8010216:	d42b      	bmi.n	8010270 <_printf_common+0xb0>
 8010218:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801021c:	4641      	mov	r1, r8
 801021e:	4638      	mov	r0, r7
 8010220:	47c8      	blx	r9
 8010222:	3001      	adds	r0, #1
 8010224:	d01e      	beq.n	8010264 <_printf_common+0xa4>
 8010226:	6823      	ldr	r3, [r4, #0]
 8010228:	6922      	ldr	r2, [r4, #16]
 801022a:	f003 0306 	and.w	r3, r3, #6
 801022e:	2b04      	cmp	r3, #4
 8010230:	bf02      	ittt	eq
 8010232:	68e5      	ldreq	r5, [r4, #12]
 8010234:	6833      	ldreq	r3, [r6, #0]
 8010236:	1aed      	subeq	r5, r5, r3
 8010238:	68a3      	ldr	r3, [r4, #8]
 801023a:	bf0c      	ite	eq
 801023c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010240:	2500      	movne	r5, #0
 8010242:	4293      	cmp	r3, r2
 8010244:	bfc4      	itt	gt
 8010246:	1a9b      	subgt	r3, r3, r2
 8010248:	18ed      	addgt	r5, r5, r3
 801024a:	2600      	movs	r6, #0
 801024c:	341a      	adds	r4, #26
 801024e:	42b5      	cmp	r5, r6
 8010250:	d11a      	bne.n	8010288 <_printf_common+0xc8>
 8010252:	2000      	movs	r0, #0
 8010254:	e008      	b.n	8010268 <_printf_common+0xa8>
 8010256:	2301      	movs	r3, #1
 8010258:	4652      	mov	r2, sl
 801025a:	4641      	mov	r1, r8
 801025c:	4638      	mov	r0, r7
 801025e:	47c8      	blx	r9
 8010260:	3001      	adds	r0, #1
 8010262:	d103      	bne.n	801026c <_printf_common+0xac>
 8010264:	f04f 30ff 	mov.w	r0, #4294967295
 8010268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801026c:	3501      	adds	r5, #1
 801026e:	e7c6      	b.n	80101fe <_printf_common+0x3e>
 8010270:	18e1      	adds	r1, r4, r3
 8010272:	1c5a      	adds	r2, r3, #1
 8010274:	2030      	movs	r0, #48	@ 0x30
 8010276:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801027a:	4422      	add	r2, r4
 801027c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010280:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010284:	3302      	adds	r3, #2
 8010286:	e7c7      	b.n	8010218 <_printf_common+0x58>
 8010288:	2301      	movs	r3, #1
 801028a:	4622      	mov	r2, r4
 801028c:	4641      	mov	r1, r8
 801028e:	4638      	mov	r0, r7
 8010290:	47c8      	blx	r9
 8010292:	3001      	adds	r0, #1
 8010294:	d0e6      	beq.n	8010264 <_printf_common+0xa4>
 8010296:	3601      	adds	r6, #1
 8010298:	e7d9      	b.n	801024e <_printf_common+0x8e>
	...

0801029c <_printf_i>:
 801029c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80102a0:	7e0f      	ldrb	r7, [r1, #24]
 80102a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80102a4:	2f78      	cmp	r7, #120	@ 0x78
 80102a6:	4691      	mov	r9, r2
 80102a8:	4680      	mov	r8, r0
 80102aa:	460c      	mov	r4, r1
 80102ac:	469a      	mov	sl, r3
 80102ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80102b2:	d807      	bhi.n	80102c4 <_printf_i+0x28>
 80102b4:	2f62      	cmp	r7, #98	@ 0x62
 80102b6:	d80a      	bhi.n	80102ce <_printf_i+0x32>
 80102b8:	2f00      	cmp	r7, #0
 80102ba:	f000 80d2 	beq.w	8010462 <_printf_i+0x1c6>
 80102be:	2f58      	cmp	r7, #88	@ 0x58
 80102c0:	f000 80b9 	beq.w	8010436 <_printf_i+0x19a>
 80102c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80102c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80102cc:	e03a      	b.n	8010344 <_printf_i+0xa8>
 80102ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80102d2:	2b15      	cmp	r3, #21
 80102d4:	d8f6      	bhi.n	80102c4 <_printf_i+0x28>
 80102d6:	a101      	add	r1, pc, #4	@ (adr r1, 80102dc <_printf_i+0x40>)
 80102d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80102dc:	08010335 	.word	0x08010335
 80102e0:	08010349 	.word	0x08010349
 80102e4:	080102c5 	.word	0x080102c5
 80102e8:	080102c5 	.word	0x080102c5
 80102ec:	080102c5 	.word	0x080102c5
 80102f0:	080102c5 	.word	0x080102c5
 80102f4:	08010349 	.word	0x08010349
 80102f8:	080102c5 	.word	0x080102c5
 80102fc:	080102c5 	.word	0x080102c5
 8010300:	080102c5 	.word	0x080102c5
 8010304:	080102c5 	.word	0x080102c5
 8010308:	08010449 	.word	0x08010449
 801030c:	08010373 	.word	0x08010373
 8010310:	08010403 	.word	0x08010403
 8010314:	080102c5 	.word	0x080102c5
 8010318:	080102c5 	.word	0x080102c5
 801031c:	0801046b 	.word	0x0801046b
 8010320:	080102c5 	.word	0x080102c5
 8010324:	08010373 	.word	0x08010373
 8010328:	080102c5 	.word	0x080102c5
 801032c:	080102c5 	.word	0x080102c5
 8010330:	0801040b 	.word	0x0801040b
 8010334:	6833      	ldr	r3, [r6, #0]
 8010336:	1d1a      	adds	r2, r3, #4
 8010338:	681b      	ldr	r3, [r3, #0]
 801033a:	6032      	str	r2, [r6, #0]
 801033c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010340:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010344:	2301      	movs	r3, #1
 8010346:	e09d      	b.n	8010484 <_printf_i+0x1e8>
 8010348:	6833      	ldr	r3, [r6, #0]
 801034a:	6820      	ldr	r0, [r4, #0]
 801034c:	1d19      	adds	r1, r3, #4
 801034e:	6031      	str	r1, [r6, #0]
 8010350:	0606      	lsls	r6, r0, #24
 8010352:	d501      	bpl.n	8010358 <_printf_i+0xbc>
 8010354:	681d      	ldr	r5, [r3, #0]
 8010356:	e003      	b.n	8010360 <_printf_i+0xc4>
 8010358:	0645      	lsls	r5, r0, #25
 801035a:	d5fb      	bpl.n	8010354 <_printf_i+0xb8>
 801035c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010360:	2d00      	cmp	r5, #0
 8010362:	da03      	bge.n	801036c <_printf_i+0xd0>
 8010364:	232d      	movs	r3, #45	@ 0x2d
 8010366:	426d      	negs	r5, r5
 8010368:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801036c:	4859      	ldr	r0, [pc, #356]	@ (80104d4 <_printf_i+0x238>)
 801036e:	230a      	movs	r3, #10
 8010370:	e011      	b.n	8010396 <_printf_i+0xfa>
 8010372:	6821      	ldr	r1, [r4, #0]
 8010374:	6833      	ldr	r3, [r6, #0]
 8010376:	0608      	lsls	r0, r1, #24
 8010378:	f853 5b04 	ldr.w	r5, [r3], #4
 801037c:	d402      	bmi.n	8010384 <_printf_i+0xe8>
 801037e:	0649      	lsls	r1, r1, #25
 8010380:	bf48      	it	mi
 8010382:	b2ad      	uxthmi	r5, r5
 8010384:	2f6f      	cmp	r7, #111	@ 0x6f
 8010386:	4853      	ldr	r0, [pc, #332]	@ (80104d4 <_printf_i+0x238>)
 8010388:	6033      	str	r3, [r6, #0]
 801038a:	bf14      	ite	ne
 801038c:	230a      	movne	r3, #10
 801038e:	2308      	moveq	r3, #8
 8010390:	2100      	movs	r1, #0
 8010392:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010396:	6866      	ldr	r6, [r4, #4]
 8010398:	60a6      	str	r6, [r4, #8]
 801039a:	2e00      	cmp	r6, #0
 801039c:	bfa2      	ittt	ge
 801039e:	6821      	ldrge	r1, [r4, #0]
 80103a0:	f021 0104 	bicge.w	r1, r1, #4
 80103a4:	6021      	strge	r1, [r4, #0]
 80103a6:	b90d      	cbnz	r5, 80103ac <_printf_i+0x110>
 80103a8:	2e00      	cmp	r6, #0
 80103aa:	d04b      	beq.n	8010444 <_printf_i+0x1a8>
 80103ac:	4616      	mov	r6, r2
 80103ae:	fbb5 f1f3 	udiv	r1, r5, r3
 80103b2:	fb03 5711 	mls	r7, r3, r1, r5
 80103b6:	5dc7      	ldrb	r7, [r0, r7]
 80103b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80103bc:	462f      	mov	r7, r5
 80103be:	42bb      	cmp	r3, r7
 80103c0:	460d      	mov	r5, r1
 80103c2:	d9f4      	bls.n	80103ae <_printf_i+0x112>
 80103c4:	2b08      	cmp	r3, #8
 80103c6:	d10b      	bne.n	80103e0 <_printf_i+0x144>
 80103c8:	6823      	ldr	r3, [r4, #0]
 80103ca:	07df      	lsls	r7, r3, #31
 80103cc:	d508      	bpl.n	80103e0 <_printf_i+0x144>
 80103ce:	6923      	ldr	r3, [r4, #16]
 80103d0:	6861      	ldr	r1, [r4, #4]
 80103d2:	4299      	cmp	r1, r3
 80103d4:	bfde      	ittt	le
 80103d6:	2330      	movle	r3, #48	@ 0x30
 80103d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80103dc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80103e0:	1b92      	subs	r2, r2, r6
 80103e2:	6122      	str	r2, [r4, #16]
 80103e4:	f8cd a000 	str.w	sl, [sp]
 80103e8:	464b      	mov	r3, r9
 80103ea:	aa03      	add	r2, sp, #12
 80103ec:	4621      	mov	r1, r4
 80103ee:	4640      	mov	r0, r8
 80103f0:	f7ff fee6 	bl	80101c0 <_printf_common>
 80103f4:	3001      	adds	r0, #1
 80103f6:	d14a      	bne.n	801048e <_printf_i+0x1f2>
 80103f8:	f04f 30ff 	mov.w	r0, #4294967295
 80103fc:	b004      	add	sp, #16
 80103fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010402:	6823      	ldr	r3, [r4, #0]
 8010404:	f043 0320 	orr.w	r3, r3, #32
 8010408:	6023      	str	r3, [r4, #0]
 801040a:	4833      	ldr	r0, [pc, #204]	@ (80104d8 <_printf_i+0x23c>)
 801040c:	2778      	movs	r7, #120	@ 0x78
 801040e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010412:	6823      	ldr	r3, [r4, #0]
 8010414:	6831      	ldr	r1, [r6, #0]
 8010416:	061f      	lsls	r7, r3, #24
 8010418:	f851 5b04 	ldr.w	r5, [r1], #4
 801041c:	d402      	bmi.n	8010424 <_printf_i+0x188>
 801041e:	065f      	lsls	r7, r3, #25
 8010420:	bf48      	it	mi
 8010422:	b2ad      	uxthmi	r5, r5
 8010424:	6031      	str	r1, [r6, #0]
 8010426:	07d9      	lsls	r1, r3, #31
 8010428:	bf44      	itt	mi
 801042a:	f043 0320 	orrmi.w	r3, r3, #32
 801042e:	6023      	strmi	r3, [r4, #0]
 8010430:	b11d      	cbz	r5, 801043a <_printf_i+0x19e>
 8010432:	2310      	movs	r3, #16
 8010434:	e7ac      	b.n	8010390 <_printf_i+0xf4>
 8010436:	4827      	ldr	r0, [pc, #156]	@ (80104d4 <_printf_i+0x238>)
 8010438:	e7e9      	b.n	801040e <_printf_i+0x172>
 801043a:	6823      	ldr	r3, [r4, #0]
 801043c:	f023 0320 	bic.w	r3, r3, #32
 8010440:	6023      	str	r3, [r4, #0]
 8010442:	e7f6      	b.n	8010432 <_printf_i+0x196>
 8010444:	4616      	mov	r6, r2
 8010446:	e7bd      	b.n	80103c4 <_printf_i+0x128>
 8010448:	6833      	ldr	r3, [r6, #0]
 801044a:	6825      	ldr	r5, [r4, #0]
 801044c:	6961      	ldr	r1, [r4, #20]
 801044e:	1d18      	adds	r0, r3, #4
 8010450:	6030      	str	r0, [r6, #0]
 8010452:	062e      	lsls	r6, r5, #24
 8010454:	681b      	ldr	r3, [r3, #0]
 8010456:	d501      	bpl.n	801045c <_printf_i+0x1c0>
 8010458:	6019      	str	r1, [r3, #0]
 801045a:	e002      	b.n	8010462 <_printf_i+0x1c6>
 801045c:	0668      	lsls	r0, r5, #25
 801045e:	d5fb      	bpl.n	8010458 <_printf_i+0x1bc>
 8010460:	8019      	strh	r1, [r3, #0]
 8010462:	2300      	movs	r3, #0
 8010464:	6123      	str	r3, [r4, #16]
 8010466:	4616      	mov	r6, r2
 8010468:	e7bc      	b.n	80103e4 <_printf_i+0x148>
 801046a:	6833      	ldr	r3, [r6, #0]
 801046c:	1d1a      	adds	r2, r3, #4
 801046e:	6032      	str	r2, [r6, #0]
 8010470:	681e      	ldr	r6, [r3, #0]
 8010472:	6862      	ldr	r2, [r4, #4]
 8010474:	2100      	movs	r1, #0
 8010476:	4630      	mov	r0, r6
 8010478:	f7ef fed2 	bl	8000220 <memchr>
 801047c:	b108      	cbz	r0, 8010482 <_printf_i+0x1e6>
 801047e:	1b80      	subs	r0, r0, r6
 8010480:	6060      	str	r0, [r4, #4]
 8010482:	6863      	ldr	r3, [r4, #4]
 8010484:	6123      	str	r3, [r4, #16]
 8010486:	2300      	movs	r3, #0
 8010488:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801048c:	e7aa      	b.n	80103e4 <_printf_i+0x148>
 801048e:	6923      	ldr	r3, [r4, #16]
 8010490:	4632      	mov	r2, r6
 8010492:	4649      	mov	r1, r9
 8010494:	4640      	mov	r0, r8
 8010496:	47d0      	blx	sl
 8010498:	3001      	adds	r0, #1
 801049a:	d0ad      	beq.n	80103f8 <_printf_i+0x15c>
 801049c:	6823      	ldr	r3, [r4, #0]
 801049e:	079b      	lsls	r3, r3, #30
 80104a0:	d413      	bmi.n	80104ca <_printf_i+0x22e>
 80104a2:	68e0      	ldr	r0, [r4, #12]
 80104a4:	9b03      	ldr	r3, [sp, #12]
 80104a6:	4298      	cmp	r0, r3
 80104a8:	bfb8      	it	lt
 80104aa:	4618      	movlt	r0, r3
 80104ac:	e7a6      	b.n	80103fc <_printf_i+0x160>
 80104ae:	2301      	movs	r3, #1
 80104b0:	4632      	mov	r2, r6
 80104b2:	4649      	mov	r1, r9
 80104b4:	4640      	mov	r0, r8
 80104b6:	47d0      	blx	sl
 80104b8:	3001      	adds	r0, #1
 80104ba:	d09d      	beq.n	80103f8 <_printf_i+0x15c>
 80104bc:	3501      	adds	r5, #1
 80104be:	68e3      	ldr	r3, [r4, #12]
 80104c0:	9903      	ldr	r1, [sp, #12]
 80104c2:	1a5b      	subs	r3, r3, r1
 80104c4:	42ab      	cmp	r3, r5
 80104c6:	dcf2      	bgt.n	80104ae <_printf_i+0x212>
 80104c8:	e7eb      	b.n	80104a2 <_printf_i+0x206>
 80104ca:	2500      	movs	r5, #0
 80104cc:	f104 0619 	add.w	r6, r4, #25
 80104d0:	e7f5      	b.n	80104be <_printf_i+0x222>
 80104d2:	bf00      	nop
 80104d4:	08013b82 	.word	0x08013b82
 80104d8:	08013b93 	.word	0x08013b93

080104dc <_scanf_float>:
 80104dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104e0:	b087      	sub	sp, #28
 80104e2:	4617      	mov	r7, r2
 80104e4:	9303      	str	r3, [sp, #12]
 80104e6:	688b      	ldr	r3, [r1, #8]
 80104e8:	1e5a      	subs	r2, r3, #1
 80104ea:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80104ee:	bf81      	itttt	hi
 80104f0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80104f4:	eb03 0b05 	addhi.w	fp, r3, r5
 80104f8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80104fc:	608b      	strhi	r3, [r1, #8]
 80104fe:	680b      	ldr	r3, [r1, #0]
 8010500:	460a      	mov	r2, r1
 8010502:	f04f 0500 	mov.w	r5, #0
 8010506:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 801050a:	f842 3b1c 	str.w	r3, [r2], #28
 801050e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8010512:	4680      	mov	r8, r0
 8010514:	460c      	mov	r4, r1
 8010516:	bf98      	it	ls
 8010518:	f04f 0b00 	movls.w	fp, #0
 801051c:	9201      	str	r2, [sp, #4]
 801051e:	4616      	mov	r6, r2
 8010520:	46aa      	mov	sl, r5
 8010522:	46a9      	mov	r9, r5
 8010524:	9502      	str	r5, [sp, #8]
 8010526:	68a2      	ldr	r2, [r4, #8]
 8010528:	b152      	cbz	r2, 8010540 <_scanf_float+0x64>
 801052a:	683b      	ldr	r3, [r7, #0]
 801052c:	781b      	ldrb	r3, [r3, #0]
 801052e:	2b4e      	cmp	r3, #78	@ 0x4e
 8010530:	d864      	bhi.n	80105fc <_scanf_float+0x120>
 8010532:	2b40      	cmp	r3, #64	@ 0x40
 8010534:	d83c      	bhi.n	80105b0 <_scanf_float+0xd4>
 8010536:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 801053a:	b2c8      	uxtb	r0, r1
 801053c:	280e      	cmp	r0, #14
 801053e:	d93a      	bls.n	80105b6 <_scanf_float+0xda>
 8010540:	f1b9 0f00 	cmp.w	r9, #0
 8010544:	d003      	beq.n	801054e <_scanf_float+0x72>
 8010546:	6823      	ldr	r3, [r4, #0]
 8010548:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801054c:	6023      	str	r3, [r4, #0]
 801054e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010552:	f1ba 0f01 	cmp.w	sl, #1
 8010556:	f200 8117 	bhi.w	8010788 <_scanf_float+0x2ac>
 801055a:	9b01      	ldr	r3, [sp, #4]
 801055c:	429e      	cmp	r6, r3
 801055e:	f200 8108 	bhi.w	8010772 <_scanf_float+0x296>
 8010562:	2001      	movs	r0, #1
 8010564:	b007      	add	sp, #28
 8010566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801056a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 801056e:	2a0d      	cmp	r2, #13
 8010570:	d8e6      	bhi.n	8010540 <_scanf_float+0x64>
 8010572:	a101      	add	r1, pc, #4	@ (adr r1, 8010578 <_scanf_float+0x9c>)
 8010574:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8010578:	080106bf 	.word	0x080106bf
 801057c:	08010541 	.word	0x08010541
 8010580:	08010541 	.word	0x08010541
 8010584:	08010541 	.word	0x08010541
 8010588:	0801071f 	.word	0x0801071f
 801058c:	080106f7 	.word	0x080106f7
 8010590:	08010541 	.word	0x08010541
 8010594:	08010541 	.word	0x08010541
 8010598:	080106cd 	.word	0x080106cd
 801059c:	08010541 	.word	0x08010541
 80105a0:	08010541 	.word	0x08010541
 80105a4:	08010541 	.word	0x08010541
 80105a8:	08010541 	.word	0x08010541
 80105ac:	08010685 	.word	0x08010685
 80105b0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80105b4:	e7db      	b.n	801056e <_scanf_float+0x92>
 80105b6:	290e      	cmp	r1, #14
 80105b8:	d8c2      	bhi.n	8010540 <_scanf_float+0x64>
 80105ba:	a001      	add	r0, pc, #4	@ (adr r0, 80105c0 <_scanf_float+0xe4>)
 80105bc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80105c0:	08010675 	.word	0x08010675
 80105c4:	08010541 	.word	0x08010541
 80105c8:	08010675 	.word	0x08010675
 80105cc:	0801070b 	.word	0x0801070b
 80105d0:	08010541 	.word	0x08010541
 80105d4:	0801061d 	.word	0x0801061d
 80105d8:	0801065b 	.word	0x0801065b
 80105dc:	0801065b 	.word	0x0801065b
 80105e0:	0801065b 	.word	0x0801065b
 80105e4:	0801065b 	.word	0x0801065b
 80105e8:	0801065b 	.word	0x0801065b
 80105ec:	0801065b 	.word	0x0801065b
 80105f0:	0801065b 	.word	0x0801065b
 80105f4:	0801065b 	.word	0x0801065b
 80105f8:	0801065b 	.word	0x0801065b
 80105fc:	2b6e      	cmp	r3, #110	@ 0x6e
 80105fe:	d809      	bhi.n	8010614 <_scanf_float+0x138>
 8010600:	2b60      	cmp	r3, #96	@ 0x60
 8010602:	d8b2      	bhi.n	801056a <_scanf_float+0x8e>
 8010604:	2b54      	cmp	r3, #84	@ 0x54
 8010606:	d07b      	beq.n	8010700 <_scanf_float+0x224>
 8010608:	2b59      	cmp	r3, #89	@ 0x59
 801060a:	d199      	bne.n	8010540 <_scanf_float+0x64>
 801060c:	2d07      	cmp	r5, #7
 801060e:	d197      	bne.n	8010540 <_scanf_float+0x64>
 8010610:	2508      	movs	r5, #8
 8010612:	e02c      	b.n	801066e <_scanf_float+0x192>
 8010614:	2b74      	cmp	r3, #116	@ 0x74
 8010616:	d073      	beq.n	8010700 <_scanf_float+0x224>
 8010618:	2b79      	cmp	r3, #121	@ 0x79
 801061a:	e7f6      	b.n	801060a <_scanf_float+0x12e>
 801061c:	6821      	ldr	r1, [r4, #0]
 801061e:	05c8      	lsls	r0, r1, #23
 8010620:	d51b      	bpl.n	801065a <_scanf_float+0x17e>
 8010622:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8010626:	6021      	str	r1, [r4, #0]
 8010628:	f109 0901 	add.w	r9, r9, #1
 801062c:	f1bb 0f00 	cmp.w	fp, #0
 8010630:	d003      	beq.n	801063a <_scanf_float+0x15e>
 8010632:	3201      	adds	r2, #1
 8010634:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010638:	60a2      	str	r2, [r4, #8]
 801063a:	68a3      	ldr	r3, [r4, #8]
 801063c:	3b01      	subs	r3, #1
 801063e:	60a3      	str	r3, [r4, #8]
 8010640:	6923      	ldr	r3, [r4, #16]
 8010642:	3301      	adds	r3, #1
 8010644:	6123      	str	r3, [r4, #16]
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	3b01      	subs	r3, #1
 801064a:	2b00      	cmp	r3, #0
 801064c:	607b      	str	r3, [r7, #4]
 801064e:	f340 8087 	ble.w	8010760 <_scanf_float+0x284>
 8010652:	683b      	ldr	r3, [r7, #0]
 8010654:	3301      	adds	r3, #1
 8010656:	603b      	str	r3, [r7, #0]
 8010658:	e765      	b.n	8010526 <_scanf_float+0x4a>
 801065a:	eb1a 0105 	adds.w	r1, sl, r5
 801065e:	f47f af6f 	bne.w	8010540 <_scanf_float+0x64>
 8010662:	6822      	ldr	r2, [r4, #0]
 8010664:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8010668:	6022      	str	r2, [r4, #0]
 801066a:	460d      	mov	r5, r1
 801066c:	468a      	mov	sl, r1
 801066e:	f806 3b01 	strb.w	r3, [r6], #1
 8010672:	e7e2      	b.n	801063a <_scanf_float+0x15e>
 8010674:	6822      	ldr	r2, [r4, #0]
 8010676:	0610      	lsls	r0, r2, #24
 8010678:	f57f af62 	bpl.w	8010540 <_scanf_float+0x64>
 801067c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8010680:	6022      	str	r2, [r4, #0]
 8010682:	e7f4      	b.n	801066e <_scanf_float+0x192>
 8010684:	f1ba 0f00 	cmp.w	sl, #0
 8010688:	d10e      	bne.n	80106a8 <_scanf_float+0x1cc>
 801068a:	f1b9 0f00 	cmp.w	r9, #0
 801068e:	d10e      	bne.n	80106ae <_scanf_float+0x1d2>
 8010690:	6822      	ldr	r2, [r4, #0]
 8010692:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8010696:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801069a:	d108      	bne.n	80106ae <_scanf_float+0x1d2>
 801069c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80106a0:	6022      	str	r2, [r4, #0]
 80106a2:	f04f 0a01 	mov.w	sl, #1
 80106a6:	e7e2      	b.n	801066e <_scanf_float+0x192>
 80106a8:	f1ba 0f02 	cmp.w	sl, #2
 80106ac:	d055      	beq.n	801075a <_scanf_float+0x27e>
 80106ae:	2d01      	cmp	r5, #1
 80106b0:	d002      	beq.n	80106b8 <_scanf_float+0x1dc>
 80106b2:	2d04      	cmp	r5, #4
 80106b4:	f47f af44 	bne.w	8010540 <_scanf_float+0x64>
 80106b8:	3501      	adds	r5, #1
 80106ba:	b2ed      	uxtb	r5, r5
 80106bc:	e7d7      	b.n	801066e <_scanf_float+0x192>
 80106be:	f1ba 0f01 	cmp.w	sl, #1
 80106c2:	f47f af3d 	bne.w	8010540 <_scanf_float+0x64>
 80106c6:	f04f 0a02 	mov.w	sl, #2
 80106ca:	e7d0      	b.n	801066e <_scanf_float+0x192>
 80106cc:	b97d      	cbnz	r5, 80106ee <_scanf_float+0x212>
 80106ce:	f1b9 0f00 	cmp.w	r9, #0
 80106d2:	f47f af38 	bne.w	8010546 <_scanf_float+0x6a>
 80106d6:	6822      	ldr	r2, [r4, #0]
 80106d8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80106dc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80106e0:	f040 8108 	bne.w	80108f4 <_scanf_float+0x418>
 80106e4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80106e8:	6022      	str	r2, [r4, #0]
 80106ea:	2501      	movs	r5, #1
 80106ec:	e7bf      	b.n	801066e <_scanf_float+0x192>
 80106ee:	2d03      	cmp	r5, #3
 80106f0:	d0e2      	beq.n	80106b8 <_scanf_float+0x1dc>
 80106f2:	2d05      	cmp	r5, #5
 80106f4:	e7de      	b.n	80106b4 <_scanf_float+0x1d8>
 80106f6:	2d02      	cmp	r5, #2
 80106f8:	f47f af22 	bne.w	8010540 <_scanf_float+0x64>
 80106fc:	2503      	movs	r5, #3
 80106fe:	e7b6      	b.n	801066e <_scanf_float+0x192>
 8010700:	2d06      	cmp	r5, #6
 8010702:	f47f af1d 	bne.w	8010540 <_scanf_float+0x64>
 8010706:	2507      	movs	r5, #7
 8010708:	e7b1      	b.n	801066e <_scanf_float+0x192>
 801070a:	6822      	ldr	r2, [r4, #0]
 801070c:	0591      	lsls	r1, r2, #22
 801070e:	f57f af17 	bpl.w	8010540 <_scanf_float+0x64>
 8010712:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8010716:	6022      	str	r2, [r4, #0]
 8010718:	f8cd 9008 	str.w	r9, [sp, #8]
 801071c:	e7a7      	b.n	801066e <_scanf_float+0x192>
 801071e:	6822      	ldr	r2, [r4, #0]
 8010720:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8010724:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8010728:	d006      	beq.n	8010738 <_scanf_float+0x25c>
 801072a:	0550      	lsls	r0, r2, #21
 801072c:	f57f af08 	bpl.w	8010540 <_scanf_float+0x64>
 8010730:	f1b9 0f00 	cmp.w	r9, #0
 8010734:	f000 80de 	beq.w	80108f4 <_scanf_float+0x418>
 8010738:	0591      	lsls	r1, r2, #22
 801073a:	bf58      	it	pl
 801073c:	9902      	ldrpl	r1, [sp, #8]
 801073e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8010742:	bf58      	it	pl
 8010744:	eba9 0101 	subpl.w	r1, r9, r1
 8010748:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 801074c:	bf58      	it	pl
 801074e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8010752:	6022      	str	r2, [r4, #0]
 8010754:	f04f 0900 	mov.w	r9, #0
 8010758:	e789      	b.n	801066e <_scanf_float+0x192>
 801075a:	f04f 0a03 	mov.w	sl, #3
 801075e:	e786      	b.n	801066e <_scanf_float+0x192>
 8010760:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8010764:	4639      	mov	r1, r7
 8010766:	4640      	mov	r0, r8
 8010768:	4798      	blx	r3
 801076a:	2800      	cmp	r0, #0
 801076c:	f43f aedb 	beq.w	8010526 <_scanf_float+0x4a>
 8010770:	e6e6      	b.n	8010540 <_scanf_float+0x64>
 8010772:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010776:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801077a:	463a      	mov	r2, r7
 801077c:	4640      	mov	r0, r8
 801077e:	4798      	blx	r3
 8010780:	6923      	ldr	r3, [r4, #16]
 8010782:	3b01      	subs	r3, #1
 8010784:	6123      	str	r3, [r4, #16]
 8010786:	e6e8      	b.n	801055a <_scanf_float+0x7e>
 8010788:	1e6b      	subs	r3, r5, #1
 801078a:	2b06      	cmp	r3, #6
 801078c:	d824      	bhi.n	80107d8 <_scanf_float+0x2fc>
 801078e:	2d02      	cmp	r5, #2
 8010790:	d836      	bhi.n	8010800 <_scanf_float+0x324>
 8010792:	9b01      	ldr	r3, [sp, #4]
 8010794:	429e      	cmp	r6, r3
 8010796:	f67f aee4 	bls.w	8010562 <_scanf_float+0x86>
 801079a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801079e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80107a2:	463a      	mov	r2, r7
 80107a4:	4640      	mov	r0, r8
 80107a6:	4798      	blx	r3
 80107a8:	6923      	ldr	r3, [r4, #16]
 80107aa:	3b01      	subs	r3, #1
 80107ac:	6123      	str	r3, [r4, #16]
 80107ae:	e7f0      	b.n	8010792 <_scanf_float+0x2b6>
 80107b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80107b4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80107b8:	463a      	mov	r2, r7
 80107ba:	4640      	mov	r0, r8
 80107bc:	4798      	blx	r3
 80107be:	6923      	ldr	r3, [r4, #16]
 80107c0:	3b01      	subs	r3, #1
 80107c2:	6123      	str	r3, [r4, #16]
 80107c4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80107c8:	fa5f fa8a 	uxtb.w	sl, sl
 80107cc:	f1ba 0f02 	cmp.w	sl, #2
 80107d0:	d1ee      	bne.n	80107b0 <_scanf_float+0x2d4>
 80107d2:	3d03      	subs	r5, #3
 80107d4:	b2ed      	uxtb	r5, r5
 80107d6:	1b76      	subs	r6, r6, r5
 80107d8:	6823      	ldr	r3, [r4, #0]
 80107da:	05da      	lsls	r2, r3, #23
 80107dc:	d530      	bpl.n	8010840 <_scanf_float+0x364>
 80107de:	055b      	lsls	r3, r3, #21
 80107e0:	d511      	bpl.n	8010806 <_scanf_float+0x32a>
 80107e2:	9b01      	ldr	r3, [sp, #4]
 80107e4:	429e      	cmp	r6, r3
 80107e6:	f67f aebc 	bls.w	8010562 <_scanf_float+0x86>
 80107ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80107ee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80107f2:	463a      	mov	r2, r7
 80107f4:	4640      	mov	r0, r8
 80107f6:	4798      	blx	r3
 80107f8:	6923      	ldr	r3, [r4, #16]
 80107fa:	3b01      	subs	r3, #1
 80107fc:	6123      	str	r3, [r4, #16]
 80107fe:	e7f0      	b.n	80107e2 <_scanf_float+0x306>
 8010800:	46aa      	mov	sl, r5
 8010802:	46b3      	mov	fp, r6
 8010804:	e7de      	b.n	80107c4 <_scanf_float+0x2e8>
 8010806:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801080a:	6923      	ldr	r3, [r4, #16]
 801080c:	2965      	cmp	r1, #101	@ 0x65
 801080e:	f103 33ff 	add.w	r3, r3, #4294967295
 8010812:	f106 35ff 	add.w	r5, r6, #4294967295
 8010816:	6123      	str	r3, [r4, #16]
 8010818:	d00c      	beq.n	8010834 <_scanf_float+0x358>
 801081a:	2945      	cmp	r1, #69	@ 0x45
 801081c:	d00a      	beq.n	8010834 <_scanf_float+0x358>
 801081e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010822:	463a      	mov	r2, r7
 8010824:	4640      	mov	r0, r8
 8010826:	4798      	blx	r3
 8010828:	6923      	ldr	r3, [r4, #16]
 801082a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801082e:	3b01      	subs	r3, #1
 8010830:	1eb5      	subs	r5, r6, #2
 8010832:	6123      	str	r3, [r4, #16]
 8010834:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010838:	463a      	mov	r2, r7
 801083a:	4640      	mov	r0, r8
 801083c:	4798      	blx	r3
 801083e:	462e      	mov	r6, r5
 8010840:	6822      	ldr	r2, [r4, #0]
 8010842:	f012 0210 	ands.w	r2, r2, #16
 8010846:	d001      	beq.n	801084c <_scanf_float+0x370>
 8010848:	2000      	movs	r0, #0
 801084a:	e68b      	b.n	8010564 <_scanf_float+0x88>
 801084c:	7032      	strb	r2, [r6, #0]
 801084e:	6823      	ldr	r3, [r4, #0]
 8010850:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8010854:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010858:	d11c      	bne.n	8010894 <_scanf_float+0x3b8>
 801085a:	9b02      	ldr	r3, [sp, #8]
 801085c:	454b      	cmp	r3, r9
 801085e:	eba3 0209 	sub.w	r2, r3, r9
 8010862:	d123      	bne.n	80108ac <_scanf_float+0x3d0>
 8010864:	9901      	ldr	r1, [sp, #4]
 8010866:	2200      	movs	r2, #0
 8010868:	4640      	mov	r0, r8
 801086a:	f7ff f9cd 	bl	800fc08 <_strtod_r>
 801086e:	9b03      	ldr	r3, [sp, #12]
 8010870:	6821      	ldr	r1, [r4, #0]
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	f011 0f02 	tst.w	r1, #2
 8010878:	ec57 6b10 	vmov	r6, r7, d0
 801087c:	f103 0204 	add.w	r2, r3, #4
 8010880:	d01f      	beq.n	80108c2 <_scanf_float+0x3e6>
 8010882:	9903      	ldr	r1, [sp, #12]
 8010884:	600a      	str	r2, [r1, #0]
 8010886:	681b      	ldr	r3, [r3, #0]
 8010888:	e9c3 6700 	strd	r6, r7, [r3]
 801088c:	68e3      	ldr	r3, [r4, #12]
 801088e:	3301      	adds	r3, #1
 8010890:	60e3      	str	r3, [r4, #12]
 8010892:	e7d9      	b.n	8010848 <_scanf_float+0x36c>
 8010894:	9b04      	ldr	r3, [sp, #16]
 8010896:	2b00      	cmp	r3, #0
 8010898:	d0e4      	beq.n	8010864 <_scanf_float+0x388>
 801089a:	9905      	ldr	r1, [sp, #20]
 801089c:	230a      	movs	r3, #10
 801089e:	3101      	adds	r1, #1
 80108a0:	4640      	mov	r0, r8
 80108a2:	f002 f9e9 	bl	8012c78 <_strtol_r>
 80108a6:	9b04      	ldr	r3, [sp, #16]
 80108a8:	9e05      	ldr	r6, [sp, #20]
 80108aa:	1ac2      	subs	r2, r0, r3
 80108ac:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80108b0:	429e      	cmp	r6, r3
 80108b2:	bf28      	it	cs
 80108b4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80108b8:	4910      	ldr	r1, [pc, #64]	@ (80108fc <_scanf_float+0x420>)
 80108ba:	4630      	mov	r0, r6
 80108bc:	f000 f8e4 	bl	8010a88 <siprintf>
 80108c0:	e7d0      	b.n	8010864 <_scanf_float+0x388>
 80108c2:	f011 0f04 	tst.w	r1, #4
 80108c6:	9903      	ldr	r1, [sp, #12]
 80108c8:	600a      	str	r2, [r1, #0]
 80108ca:	d1dc      	bne.n	8010886 <_scanf_float+0x3aa>
 80108cc:	681d      	ldr	r5, [r3, #0]
 80108ce:	4632      	mov	r2, r6
 80108d0:	463b      	mov	r3, r7
 80108d2:	4630      	mov	r0, r6
 80108d4:	4639      	mov	r1, r7
 80108d6:	f7f0 f951 	bl	8000b7c <__aeabi_dcmpun>
 80108da:	b128      	cbz	r0, 80108e8 <_scanf_float+0x40c>
 80108dc:	4808      	ldr	r0, [pc, #32]	@ (8010900 <_scanf_float+0x424>)
 80108de:	f000 f9ff 	bl	8010ce0 <nanf>
 80108e2:	ed85 0a00 	vstr	s0, [r5]
 80108e6:	e7d1      	b.n	801088c <_scanf_float+0x3b0>
 80108e8:	4630      	mov	r0, r6
 80108ea:	4639      	mov	r1, r7
 80108ec:	f7f0 f9a4 	bl	8000c38 <__aeabi_d2f>
 80108f0:	6028      	str	r0, [r5, #0]
 80108f2:	e7cb      	b.n	801088c <_scanf_float+0x3b0>
 80108f4:	f04f 0900 	mov.w	r9, #0
 80108f8:	e629      	b.n	801054e <_scanf_float+0x72>
 80108fa:	bf00      	nop
 80108fc:	08013ba4 	.word	0x08013ba4
 8010900:	08013f45 	.word	0x08013f45

08010904 <std>:
 8010904:	2300      	movs	r3, #0
 8010906:	b510      	push	{r4, lr}
 8010908:	4604      	mov	r4, r0
 801090a:	e9c0 3300 	strd	r3, r3, [r0]
 801090e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010912:	6083      	str	r3, [r0, #8]
 8010914:	8181      	strh	r1, [r0, #12]
 8010916:	6643      	str	r3, [r0, #100]	@ 0x64
 8010918:	81c2      	strh	r2, [r0, #14]
 801091a:	6183      	str	r3, [r0, #24]
 801091c:	4619      	mov	r1, r3
 801091e:	2208      	movs	r2, #8
 8010920:	305c      	adds	r0, #92	@ 0x5c
 8010922:	f000 f935 	bl	8010b90 <memset>
 8010926:	4b0d      	ldr	r3, [pc, #52]	@ (801095c <std+0x58>)
 8010928:	6263      	str	r3, [r4, #36]	@ 0x24
 801092a:	4b0d      	ldr	r3, [pc, #52]	@ (8010960 <std+0x5c>)
 801092c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801092e:	4b0d      	ldr	r3, [pc, #52]	@ (8010964 <std+0x60>)
 8010930:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010932:	4b0d      	ldr	r3, [pc, #52]	@ (8010968 <std+0x64>)
 8010934:	6323      	str	r3, [r4, #48]	@ 0x30
 8010936:	4b0d      	ldr	r3, [pc, #52]	@ (801096c <std+0x68>)
 8010938:	6224      	str	r4, [r4, #32]
 801093a:	429c      	cmp	r4, r3
 801093c:	d006      	beq.n	801094c <std+0x48>
 801093e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8010942:	4294      	cmp	r4, r2
 8010944:	d002      	beq.n	801094c <std+0x48>
 8010946:	33d0      	adds	r3, #208	@ 0xd0
 8010948:	429c      	cmp	r4, r3
 801094a:	d105      	bne.n	8010958 <std+0x54>
 801094c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010950:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010954:	f000 b9aa 	b.w	8010cac <__retarget_lock_init_recursive>
 8010958:	bd10      	pop	{r4, pc}
 801095a:	bf00      	nop
 801095c:	08010ac9 	.word	0x08010ac9
 8010960:	08010aeb 	.word	0x08010aeb
 8010964:	08010b23 	.word	0x08010b23
 8010968:	08010b47 	.word	0x08010b47
 801096c:	200009ec 	.word	0x200009ec

08010970 <stdio_exit_handler>:
 8010970:	4a02      	ldr	r2, [pc, #8]	@ (801097c <stdio_exit_handler+0xc>)
 8010972:	4903      	ldr	r1, [pc, #12]	@ (8010980 <stdio_exit_handler+0x10>)
 8010974:	4803      	ldr	r0, [pc, #12]	@ (8010984 <stdio_exit_handler+0x14>)
 8010976:	f000 b869 	b.w	8010a4c <_fwalk_sglue>
 801097a:	bf00      	nop
 801097c:	20000090 	.word	0x20000090
 8010980:	0801304d 	.word	0x0801304d
 8010984:	2000020c 	.word	0x2000020c

08010988 <cleanup_stdio>:
 8010988:	6841      	ldr	r1, [r0, #4]
 801098a:	4b0c      	ldr	r3, [pc, #48]	@ (80109bc <cleanup_stdio+0x34>)
 801098c:	4299      	cmp	r1, r3
 801098e:	b510      	push	{r4, lr}
 8010990:	4604      	mov	r4, r0
 8010992:	d001      	beq.n	8010998 <cleanup_stdio+0x10>
 8010994:	f002 fb5a 	bl	801304c <_fflush_r>
 8010998:	68a1      	ldr	r1, [r4, #8]
 801099a:	4b09      	ldr	r3, [pc, #36]	@ (80109c0 <cleanup_stdio+0x38>)
 801099c:	4299      	cmp	r1, r3
 801099e:	d002      	beq.n	80109a6 <cleanup_stdio+0x1e>
 80109a0:	4620      	mov	r0, r4
 80109a2:	f002 fb53 	bl	801304c <_fflush_r>
 80109a6:	68e1      	ldr	r1, [r4, #12]
 80109a8:	4b06      	ldr	r3, [pc, #24]	@ (80109c4 <cleanup_stdio+0x3c>)
 80109aa:	4299      	cmp	r1, r3
 80109ac:	d004      	beq.n	80109b8 <cleanup_stdio+0x30>
 80109ae:	4620      	mov	r0, r4
 80109b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80109b4:	f002 bb4a 	b.w	801304c <_fflush_r>
 80109b8:	bd10      	pop	{r4, pc}
 80109ba:	bf00      	nop
 80109bc:	200009ec 	.word	0x200009ec
 80109c0:	20000a54 	.word	0x20000a54
 80109c4:	20000abc 	.word	0x20000abc

080109c8 <global_stdio_init.part.0>:
 80109c8:	b510      	push	{r4, lr}
 80109ca:	4b0b      	ldr	r3, [pc, #44]	@ (80109f8 <global_stdio_init.part.0+0x30>)
 80109cc:	4c0b      	ldr	r4, [pc, #44]	@ (80109fc <global_stdio_init.part.0+0x34>)
 80109ce:	4a0c      	ldr	r2, [pc, #48]	@ (8010a00 <global_stdio_init.part.0+0x38>)
 80109d0:	601a      	str	r2, [r3, #0]
 80109d2:	4620      	mov	r0, r4
 80109d4:	2200      	movs	r2, #0
 80109d6:	2104      	movs	r1, #4
 80109d8:	f7ff ff94 	bl	8010904 <std>
 80109dc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80109e0:	2201      	movs	r2, #1
 80109e2:	2109      	movs	r1, #9
 80109e4:	f7ff ff8e 	bl	8010904 <std>
 80109e8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80109ec:	2202      	movs	r2, #2
 80109ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80109f2:	2112      	movs	r1, #18
 80109f4:	f7ff bf86 	b.w	8010904 <std>
 80109f8:	20000b24 	.word	0x20000b24
 80109fc:	200009ec 	.word	0x200009ec
 8010a00:	08010971 	.word	0x08010971

08010a04 <__sfp_lock_acquire>:
 8010a04:	4801      	ldr	r0, [pc, #4]	@ (8010a0c <__sfp_lock_acquire+0x8>)
 8010a06:	f000 b952 	b.w	8010cae <__retarget_lock_acquire_recursive>
 8010a0a:	bf00      	nop
 8010a0c:	20000b2d 	.word	0x20000b2d

08010a10 <__sfp_lock_release>:
 8010a10:	4801      	ldr	r0, [pc, #4]	@ (8010a18 <__sfp_lock_release+0x8>)
 8010a12:	f000 b94d 	b.w	8010cb0 <__retarget_lock_release_recursive>
 8010a16:	bf00      	nop
 8010a18:	20000b2d 	.word	0x20000b2d

08010a1c <__sinit>:
 8010a1c:	b510      	push	{r4, lr}
 8010a1e:	4604      	mov	r4, r0
 8010a20:	f7ff fff0 	bl	8010a04 <__sfp_lock_acquire>
 8010a24:	6a23      	ldr	r3, [r4, #32]
 8010a26:	b11b      	cbz	r3, 8010a30 <__sinit+0x14>
 8010a28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010a2c:	f7ff bff0 	b.w	8010a10 <__sfp_lock_release>
 8010a30:	4b04      	ldr	r3, [pc, #16]	@ (8010a44 <__sinit+0x28>)
 8010a32:	6223      	str	r3, [r4, #32]
 8010a34:	4b04      	ldr	r3, [pc, #16]	@ (8010a48 <__sinit+0x2c>)
 8010a36:	681b      	ldr	r3, [r3, #0]
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d1f5      	bne.n	8010a28 <__sinit+0xc>
 8010a3c:	f7ff ffc4 	bl	80109c8 <global_stdio_init.part.0>
 8010a40:	e7f2      	b.n	8010a28 <__sinit+0xc>
 8010a42:	bf00      	nop
 8010a44:	08010989 	.word	0x08010989
 8010a48:	20000b24 	.word	0x20000b24

08010a4c <_fwalk_sglue>:
 8010a4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010a50:	4607      	mov	r7, r0
 8010a52:	4688      	mov	r8, r1
 8010a54:	4614      	mov	r4, r2
 8010a56:	2600      	movs	r6, #0
 8010a58:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010a5c:	f1b9 0901 	subs.w	r9, r9, #1
 8010a60:	d505      	bpl.n	8010a6e <_fwalk_sglue+0x22>
 8010a62:	6824      	ldr	r4, [r4, #0]
 8010a64:	2c00      	cmp	r4, #0
 8010a66:	d1f7      	bne.n	8010a58 <_fwalk_sglue+0xc>
 8010a68:	4630      	mov	r0, r6
 8010a6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010a6e:	89ab      	ldrh	r3, [r5, #12]
 8010a70:	2b01      	cmp	r3, #1
 8010a72:	d907      	bls.n	8010a84 <_fwalk_sglue+0x38>
 8010a74:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010a78:	3301      	adds	r3, #1
 8010a7a:	d003      	beq.n	8010a84 <_fwalk_sglue+0x38>
 8010a7c:	4629      	mov	r1, r5
 8010a7e:	4638      	mov	r0, r7
 8010a80:	47c0      	blx	r8
 8010a82:	4306      	orrs	r6, r0
 8010a84:	3568      	adds	r5, #104	@ 0x68
 8010a86:	e7e9      	b.n	8010a5c <_fwalk_sglue+0x10>

08010a88 <siprintf>:
 8010a88:	b40e      	push	{r1, r2, r3}
 8010a8a:	b500      	push	{lr}
 8010a8c:	b09c      	sub	sp, #112	@ 0x70
 8010a8e:	ab1d      	add	r3, sp, #116	@ 0x74
 8010a90:	9002      	str	r0, [sp, #8]
 8010a92:	9006      	str	r0, [sp, #24]
 8010a94:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8010a98:	4809      	ldr	r0, [pc, #36]	@ (8010ac0 <siprintf+0x38>)
 8010a9a:	9107      	str	r1, [sp, #28]
 8010a9c:	9104      	str	r1, [sp, #16]
 8010a9e:	4909      	ldr	r1, [pc, #36]	@ (8010ac4 <siprintf+0x3c>)
 8010aa0:	f853 2b04 	ldr.w	r2, [r3], #4
 8010aa4:	9105      	str	r1, [sp, #20]
 8010aa6:	6800      	ldr	r0, [r0, #0]
 8010aa8:	9301      	str	r3, [sp, #4]
 8010aaa:	a902      	add	r1, sp, #8
 8010aac:	f002 f94e 	bl	8012d4c <_svfiprintf_r>
 8010ab0:	9b02      	ldr	r3, [sp, #8]
 8010ab2:	2200      	movs	r2, #0
 8010ab4:	701a      	strb	r2, [r3, #0]
 8010ab6:	b01c      	add	sp, #112	@ 0x70
 8010ab8:	f85d eb04 	ldr.w	lr, [sp], #4
 8010abc:	b003      	add	sp, #12
 8010abe:	4770      	bx	lr
 8010ac0:	20000208 	.word	0x20000208
 8010ac4:	ffff0208 	.word	0xffff0208

08010ac8 <__sread>:
 8010ac8:	b510      	push	{r4, lr}
 8010aca:	460c      	mov	r4, r1
 8010acc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ad0:	f000 f89e 	bl	8010c10 <_read_r>
 8010ad4:	2800      	cmp	r0, #0
 8010ad6:	bfab      	itete	ge
 8010ad8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8010ada:	89a3      	ldrhlt	r3, [r4, #12]
 8010adc:	181b      	addge	r3, r3, r0
 8010ade:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8010ae2:	bfac      	ite	ge
 8010ae4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8010ae6:	81a3      	strhlt	r3, [r4, #12]
 8010ae8:	bd10      	pop	{r4, pc}

08010aea <__swrite>:
 8010aea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010aee:	461f      	mov	r7, r3
 8010af0:	898b      	ldrh	r3, [r1, #12]
 8010af2:	05db      	lsls	r3, r3, #23
 8010af4:	4605      	mov	r5, r0
 8010af6:	460c      	mov	r4, r1
 8010af8:	4616      	mov	r6, r2
 8010afa:	d505      	bpl.n	8010b08 <__swrite+0x1e>
 8010afc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010b00:	2302      	movs	r3, #2
 8010b02:	2200      	movs	r2, #0
 8010b04:	f000 f872 	bl	8010bec <_lseek_r>
 8010b08:	89a3      	ldrh	r3, [r4, #12]
 8010b0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010b0e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010b12:	81a3      	strh	r3, [r4, #12]
 8010b14:	4632      	mov	r2, r6
 8010b16:	463b      	mov	r3, r7
 8010b18:	4628      	mov	r0, r5
 8010b1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010b1e:	f000 b889 	b.w	8010c34 <_write_r>

08010b22 <__sseek>:
 8010b22:	b510      	push	{r4, lr}
 8010b24:	460c      	mov	r4, r1
 8010b26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010b2a:	f000 f85f 	bl	8010bec <_lseek_r>
 8010b2e:	1c43      	adds	r3, r0, #1
 8010b30:	89a3      	ldrh	r3, [r4, #12]
 8010b32:	bf15      	itete	ne
 8010b34:	6560      	strne	r0, [r4, #84]	@ 0x54
 8010b36:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8010b3a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8010b3e:	81a3      	strheq	r3, [r4, #12]
 8010b40:	bf18      	it	ne
 8010b42:	81a3      	strhne	r3, [r4, #12]
 8010b44:	bd10      	pop	{r4, pc}

08010b46 <__sclose>:
 8010b46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010b4a:	f000 b83f 	b.w	8010bcc <_close_r>
	...

08010b50 <_vsiprintf_r>:
 8010b50:	b500      	push	{lr}
 8010b52:	b09b      	sub	sp, #108	@ 0x6c
 8010b54:	9100      	str	r1, [sp, #0]
 8010b56:	9104      	str	r1, [sp, #16]
 8010b58:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8010b5c:	9105      	str	r1, [sp, #20]
 8010b5e:	9102      	str	r1, [sp, #8]
 8010b60:	4905      	ldr	r1, [pc, #20]	@ (8010b78 <_vsiprintf_r+0x28>)
 8010b62:	9103      	str	r1, [sp, #12]
 8010b64:	4669      	mov	r1, sp
 8010b66:	f002 f8f1 	bl	8012d4c <_svfiprintf_r>
 8010b6a:	9b00      	ldr	r3, [sp, #0]
 8010b6c:	2200      	movs	r2, #0
 8010b6e:	701a      	strb	r2, [r3, #0]
 8010b70:	b01b      	add	sp, #108	@ 0x6c
 8010b72:	f85d fb04 	ldr.w	pc, [sp], #4
 8010b76:	bf00      	nop
 8010b78:	ffff0208 	.word	0xffff0208

08010b7c <vsiprintf>:
 8010b7c:	4613      	mov	r3, r2
 8010b7e:	460a      	mov	r2, r1
 8010b80:	4601      	mov	r1, r0
 8010b82:	4802      	ldr	r0, [pc, #8]	@ (8010b8c <vsiprintf+0x10>)
 8010b84:	6800      	ldr	r0, [r0, #0]
 8010b86:	f7ff bfe3 	b.w	8010b50 <_vsiprintf_r>
 8010b8a:	bf00      	nop
 8010b8c:	20000208 	.word	0x20000208

08010b90 <memset>:
 8010b90:	4402      	add	r2, r0
 8010b92:	4603      	mov	r3, r0
 8010b94:	4293      	cmp	r3, r2
 8010b96:	d100      	bne.n	8010b9a <memset+0xa>
 8010b98:	4770      	bx	lr
 8010b9a:	f803 1b01 	strb.w	r1, [r3], #1
 8010b9e:	e7f9      	b.n	8010b94 <memset+0x4>

08010ba0 <strncmp>:
 8010ba0:	b510      	push	{r4, lr}
 8010ba2:	b16a      	cbz	r2, 8010bc0 <strncmp+0x20>
 8010ba4:	3901      	subs	r1, #1
 8010ba6:	1884      	adds	r4, r0, r2
 8010ba8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010bac:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8010bb0:	429a      	cmp	r2, r3
 8010bb2:	d103      	bne.n	8010bbc <strncmp+0x1c>
 8010bb4:	42a0      	cmp	r0, r4
 8010bb6:	d001      	beq.n	8010bbc <strncmp+0x1c>
 8010bb8:	2a00      	cmp	r2, #0
 8010bba:	d1f5      	bne.n	8010ba8 <strncmp+0x8>
 8010bbc:	1ad0      	subs	r0, r2, r3
 8010bbe:	bd10      	pop	{r4, pc}
 8010bc0:	4610      	mov	r0, r2
 8010bc2:	e7fc      	b.n	8010bbe <strncmp+0x1e>

08010bc4 <_localeconv_r>:
 8010bc4:	4800      	ldr	r0, [pc, #0]	@ (8010bc8 <_localeconv_r+0x4>)
 8010bc6:	4770      	bx	lr
 8010bc8:	2000018c 	.word	0x2000018c

08010bcc <_close_r>:
 8010bcc:	b538      	push	{r3, r4, r5, lr}
 8010bce:	4d06      	ldr	r5, [pc, #24]	@ (8010be8 <_close_r+0x1c>)
 8010bd0:	2300      	movs	r3, #0
 8010bd2:	4604      	mov	r4, r0
 8010bd4:	4608      	mov	r0, r1
 8010bd6:	602b      	str	r3, [r5, #0]
 8010bd8:	f7f1 fa32 	bl	8002040 <_close>
 8010bdc:	1c43      	adds	r3, r0, #1
 8010bde:	d102      	bne.n	8010be6 <_close_r+0x1a>
 8010be0:	682b      	ldr	r3, [r5, #0]
 8010be2:	b103      	cbz	r3, 8010be6 <_close_r+0x1a>
 8010be4:	6023      	str	r3, [r4, #0]
 8010be6:	bd38      	pop	{r3, r4, r5, pc}
 8010be8:	20000b28 	.word	0x20000b28

08010bec <_lseek_r>:
 8010bec:	b538      	push	{r3, r4, r5, lr}
 8010bee:	4d07      	ldr	r5, [pc, #28]	@ (8010c0c <_lseek_r+0x20>)
 8010bf0:	4604      	mov	r4, r0
 8010bf2:	4608      	mov	r0, r1
 8010bf4:	4611      	mov	r1, r2
 8010bf6:	2200      	movs	r2, #0
 8010bf8:	602a      	str	r2, [r5, #0]
 8010bfa:	461a      	mov	r2, r3
 8010bfc:	f7f1 fa47 	bl	800208e <_lseek>
 8010c00:	1c43      	adds	r3, r0, #1
 8010c02:	d102      	bne.n	8010c0a <_lseek_r+0x1e>
 8010c04:	682b      	ldr	r3, [r5, #0]
 8010c06:	b103      	cbz	r3, 8010c0a <_lseek_r+0x1e>
 8010c08:	6023      	str	r3, [r4, #0]
 8010c0a:	bd38      	pop	{r3, r4, r5, pc}
 8010c0c:	20000b28 	.word	0x20000b28

08010c10 <_read_r>:
 8010c10:	b538      	push	{r3, r4, r5, lr}
 8010c12:	4d07      	ldr	r5, [pc, #28]	@ (8010c30 <_read_r+0x20>)
 8010c14:	4604      	mov	r4, r0
 8010c16:	4608      	mov	r0, r1
 8010c18:	4611      	mov	r1, r2
 8010c1a:	2200      	movs	r2, #0
 8010c1c:	602a      	str	r2, [r5, #0]
 8010c1e:	461a      	mov	r2, r3
 8010c20:	f7f1 f9d5 	bl	8001fce <_read>
 8010c24:	1c43      	adds	r3, r0, #1
 8010c26:	d102      	bne.n	8010c2e <_read_r+0x1e>
 8010c28:	682b      	ldr	r3, [r5, #0]
 8010c2a:	b103      	cbz	r3, 8010c2e <_read_r+0x1e>
 8010c2c:	6023      	str	r3, [r4, #0]
 8010c2e:	bd38      	pop	{r3, r4, r5, pc}
 8010c30:	20000b28 	.word	0x20000b28

08010c34 <_write_r>:
 8010c34:	b538      	push	{r3, r4, r5, lr}
 8010c36:	4d07      	ldr	r5, [pc, #28]	@ (8010c54 <_write_r+0x20>)
 8010c38:	4604      	mov	r4, r0
 8010c3a:	4608      	mov	r0, r1
 8010c3c:	4611      	mov	r1, r2
 8010c3e:	2200      	movs	r2, #0
 8010c40:	602a      	str	r2, [r5, #0]
 8010c42:	461a      	mov	r2, r3
 8010c44:	f7f1 f9e0 	bl	8002008 <_write>
 8010c48:	1c43      	adds	r3, r0, #1
 8010c4a:	d102      	bne.n	8010c52 <_write_r+0x1e>
 8010c4c:	682b      	ldr	r3, [r5, #0]
 8010c4e:	b103      	cbz	r3, 8010c52 <_write_r+0x1e>
 8010c50:	6023      	str	r3, [r4, #0]
 8010c52:	bd38      	pop	{r3, r4, r5, pc}
 8010c54:	20000b28 	.word	0x20000b28

08010c58 <__errno>:
 8010c58:	4b01      	ldr	r3, [pc, #4]	@ (8010c60 <__errno+0x8>)
 8010c5a:	6818      	ldr	r0, [r3, #0]
 8010c5c:	4770      	bx	lr
 8010c5e:	bf00      	nop
 8010c60:	20000208 	.word	0x20000208

08010c64 <__libc_init_array>:
 8010c64:	b570      	push	{r4, r5, r6, lr}
 8010c66:	4d0d      	ldr	r5, [pc, #52]	@ (8010c9c <__libc_init_array+0x38>)
 8010c68:	4c0d      	ldr	r4, [pc, #52]	@ (8010ca0 <__libc_init_array+0x3c>)
 8010c6a:	1b64      	subs	r4, r4, r5
 8010c6c:	10a4      	asrs	r4, r4, #2
 8010c6e:	2600      	movs	r6, #0
 8010c70:	42a6      	cmp	r6, r4
 8010c72:	d109      	bne.n	8010c88 <__libc_init_array+0x24>
 8010c74:	4d0b      	ldr	r5, [pc, #44]	@ (8010ca4 <__libc_init_array+0x40>)
 8010c76:	4c0c      	ldr	r4, [pc, #48]	@ (8010ca8 <__libc_init_array+0x44>)
 8010c78:	f002 fe90 	bl	801399c <_init>
 8010c7c:	1b64      	subs	r4, r4, r5
 8010c7e:	10a4      	asrs	r4, r4, #2
 8010c80:	2600      	movs	r6, #0
 8010c82:	42a6      	cmp	r6, r4
 8010c84:	d105      	bne.n	8010c92 <__libc_init_array+0x2e>
 8010c86:	bd70      	pop	{r4, r5, r6, pc}
 8010c88:	f855 3b04 	ldr.w	r3, [r5], #4
 8010c8c:	4798      	blx	r3
 8010c8e:	3601      	adds	r6, #1
 8010c90:	e7ee      	b.n	8010c70 <__libc_init_array+0xc>
 8010c92:	f855 3b04 	ldr.w	r3, [r5], #4
 8010c96:	4798      	blx	r3
 8010c98:	3601      	adds	r6, #1
 8010c9a:	e7f2      	b.n	8010c82 <__libc_init_array+0x1e>
 8010c9c:	08013f60 	.word	0x08013f60
 8010ca0:	08013f60 	.word	0x08013f60
 8010ca4:	08013f60 	.word	0x08013f60
 8010ca8:	08013f64 	.word	0x08013f64

08010cac <__retarget_lock_init_recursive>:
 8010cac:	4770      	bx	lr

08010cae <__retarget_lock_acquire_recursive>:
 8010cae:	4770      	bx	lr

08010cb0 <__retarget_lock_release_recursive>:
 8010cb0:	4770      	bx	lr

08010cb2 <memcpy>:
 8010cb2:	440a      	add	r2, r1
 8010cb4:	4291      	cmp	r1, r2
 8010cb6:	f100 33ff 	add.w	r3, r0, #4294967295
 8010cba:	d100      	bne.n	8010cbe <memcpy+0xc>
 8010cbc:	4770      	bx	lr
 8010cbe:	b510      	push	{r4, lr}
 8010cc0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010cc4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010cc8:	4291      	cmp	r1, r2
 8010cca:	d1f9      	bne.n	8010cc0 <memcpy+0xe>
 8010ccc:	bd10      	pop	{r4, pc}
	...

08010cd0 <nan>:
 8010cd0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010cd8 <nan+0x8>
 8010cd4:	4770      	bx	lr
 8010cd6:	bf00      	nop
 8010cd8:	00000000 	.word	0x00000000
 8010cdc:	7ff80000 	.word	0x7ff80000

08010ce0 <nanf>:
 8010ce0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8010ce8 <nanf+0x8>
 8010ce4:	4770      	bx	lr
 8010ce6:	bf00      	nop
 8010ce8:	7fc00000 	.word	0x7fc00000

08010cec <quorem>:
 8010cec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010cf0:	6903      	ldr	r3, [r0, #16]
 8010cf2:	690c      	ldr	r4, [r1, #16]
 8010cf4:	42a3      	cmp	r3, r4
 8010cf6:	4607      	mov	r7, r0
 8010cf8:	db7e      	blt.n	8010df8 <quorem+0x10c>
 8010cfa:	3c01      	subs	r4, #1
 8010cfc:	f101 0814 	add.w	r8, r1, #20
 8010d00:	00a3      	lsls	r3, r4, #2
 8010d02:	f100 0514 	add.w	r5, r0, #20
 8010d06:	9300      	str	r3, [sp, #0]
 8010d08:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010d0c:	9301      	str	r3, [sp, #4]
 8010d0e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010d12:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010d16:	3301      	adds	r3, #1
 8010d18:	429a      	cmp	r2, r3
 8010d1a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010d1e:	fbb2 f6f3 	udiv	r6, r2, r3
 8010d22:	d32e      	bcc.n	8010d82 <quorem+0x96>
 8010d24:	f04f 0a00 	mov.w	sl, #0
 8010d28:	46c4      	mov	ip, r8
 8010d2a:	46ae      	mov	lr, r5
 8010d2c:	46d3      	mov	fp, sl
 8010d2e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010d32:	b298      	uxth	r0, r3
 8010d34:	fb06 a000 	mla	r0, r6, r0, sl
 8010d38:	0c02      	lsrs	r2, r0, #16
 8010d3a:	0c1b      	lsrs	r3, r3, #16
 8010d3c:	fb06 2303 	mla	r3, r6, r3, r2
 8010d40:	f8de 2000 	ldr.w	r2, [lr]
 8010d44:	b280      	uxth	r0, r0
 8010d46:	b292      	uxth	r2, r2
 8010d48:	1a12      	subs	r2, r2, r0
 8010d4a:	445a      	add	r2, fp
 8010d4c:	f8de 0000 	ldr.w	r0, [lr]
 8010d50:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010d54:	b29b      	uxth	r3, r3
 8010d56:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8010d5a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8010d5e:	b292      	uxth	r2, r2
 8010d60:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8010d64:	45e1      	cmp	r9, ip
 8010d66:	f84e 2b04 	str.w	r2, [lr], #4
 8010d6a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8010d6e:	d2de      	bcs.n	8010d2e <quorem+0x42>
 8010d70:	9b00      	ldr	r3, [sp, #0]
 8010d72:	58eb      	ldr	r3, [r5, r3]
 8010d74:	b92b      	cbnz	r3, 8010d82 <quorem+0x96>
 8010d76:	9b01      	ldr	r3, [sp, #4]
 8010d78:	3b04      	subs	r3, #4
 8010d7a:	429d      	cmp	r5, r3
 8010d7c:	461a      	mov	r2, r3
 8010d7e:	d32f      	bcc.n	8010de0 <quorem+0xf4>
 8010d80:	613c      	str	r4, [r7, #16]
 8010d82:	4638      	mov	r0, r7
 8010d84:	f001 fd10 	bl	80127a8 <__mcmp>
 8010d88:	2800      	cmp	r0, #0
 8010d8a:	db25      	blt.n	8010dd8 <quorem+0xec>
 8010d8c:	4629      	mov	r1, r5
 8010d8e:	2000      	movs	r0, #0
 8010d90:	f858 2b04 	ldr.w	r2, [r8], #4
 8010d94:	f8d1 c000 	ldr.w	ip, [r1]
 8010d98:	fa1f fe82 	uxth.w	lr, r2
 8010d9c:	fa1f f38c 	uxth.w	r3, ip
 8010da0:	eba3 030e 	sub.w	r3, r3, lr
 8010da4:	4403      	add	r3, r0
 8010da6:	0c12      	lsrs	r2, r2, #16
 8010da8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8010dac:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8010db0:	b29b      	uxth	r3, r3
 8010db2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010db6:	45c1      	cmp	r9, r8
 8010db8:	f841 3b04 	str.w	r3, [r1], #4
 8010dbc:	ea4f 4022 	mov.w	r0, r2, asr #16
 8010dc0:	d2e6      	bcs.n	8010d90 <quorem+0xa4>
 8010dc2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010dc6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010dca:	b922      	cbnz	r2, 8010dd6 <quorem+0xea>
 8010dcc:	3b04      	subs	r3, #4
 8010dce:	429d      	cmp	r5, r3
 8010dd0:	461a      	mov	r2, r3
 8010dd2:	d30b      	bcc.n	8010dec <quorem+0x100>
 8010dd4:	613c      	str	r4, [r7, #16]
 8010dd6:	3601      	adds	r6, #1
 8010dd8:	4630      	mov	r0, r6
 8010dda:	b003      	add	sp, #12
 8010ddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010de0:	6812      	ldr	r2, [r2, #0]
 8010de2:	3b04      	subs	r3, #4
 8010de4:	2a00      	cmp	r2, #0
 8010de6:	d1cb      	bne.n	8010d80 <quorem+0x94>
 8010de8:	3c01      	subs	r4, #1
 8010dea:	e7c6      	b.n	8010d7a <quorem+0x8e>
 8010dec:	6812      	ldr	r2, [r2, #0]
 8010dee:	3b04      	subs	r3, #4
 8010df0:	2a00      	cmp	r2, #0
 8010df2:	d1ef      	bne.n	8010dd4 <quorem+0xe8>
 8010df4:	3c01      	subs	r4, #1
 8010df6:	e7ea      	b.n	8010dce <quorem+0xe2>
 8010df8:	2000      	movs	r0, #0
 8010dfa:	e7ee      	b.n	8010dda <quorem+0xee>
 8010dfc:	0000      	movs	r0, r0
	...

08010e00 <_dtoa_r>:
 8010e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e04:	69c7      	ldr	r7, [r0, #28]
 8010e06:	b099      	sub	sp, #100	@ 0x64
 8010e08:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010e0c:	ec55 4b10 	vmov	r4, r5, d0
 8010e10:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8010e12:	9109      	str	r1, [sp, #36]	@ 0x24
 8010e14:	4683      	mov	fp, r0
 8010e16:	920e      	str	r2, [sp, #56]	@ 0x38
 8010e18:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010e1a:	b97f      	cbnz	r7, 8010e3c <_dtoa_r+0x3c>
 8010e1c:	2010      	movs	r0, #16
 8010e1e:	f001 f937 	bl	8012090 <malloc>
 8010e22:	4602      	mov	r2, r0
 8010e24:	f8cb 001c 	str.w	r0, [fp, #28]
 8010e28:	b920      	cbnz	r0, 8010e34 <_dtoa_r+0x34>
 8010e2a:	4ba7      	ldr	r3, [pc, #668]	@ (80110c8 <_dtoa_r+0x2c8>)
 8010e2c:	21ef      	movs	r1, #239	@ 0xef
 8010e2e:	48a7      	ldr	r0, [pc, #668]	@ (80110cc <_dtoa_r+0x2cc>)
 8010e30:	f002 f95e 	bl	80130f0 <__assert_func>
 8010e34:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8010e38:	6007      	str	r7, [r0, #0]
 8010e3a:	60c7      	str	r7, [r0, #12]
 8010e3c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010e40:	6819      	ldr	r1, [r3, #0]
 8010e42:	b159      	cbz	r1, 8010e5c <_dtoa_r+0x5c>
 8010e44:	685a      	ldr	r2, [r3, #4]
 8010e46:	604a      	str	r2, [r1, #4]
 8010e48:	2301      	movs	r3, #1
 8010e4a:	4093      	lsls	r3, r2
 8010e4c:	608b      	str	r3, [r1, #8]
 8010e4e:	4658      	mov	r0, fp
 8010e50:	f001 fa26 	bl	80122a0 <_Bfree>
 8010e54:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010e58:	2200      	movs	r2, #0
 8010e5a:	601a      	str	r2, [r3, #0]
 8010e5c:	1e2b      	subs	r3, r5, #0
 8010e5e:	bfb9      	ittee	lt
 8010e60:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8010e64:	9303      	strlt	r3, [sp, #12]
 8010e66:	2300      	movge	r3, #0
 8010e68:	6033      	strge	r3, [r6, #0]
 8010e6a:	9f03      	ldr	r7, [sp, #12]
 8010e6c:	4b98      	ldr	r3, [pc, #608]	@ (80110d0 <_dtoa_r+0x2d0>)
 8010e6e:	bfbc      	itt	lt
 8010e70:	2201      	movlt	r2, #1
 8010e72:	6032      	strlt	r2, [r6, #0]
 8010e74:	43bb      	bics	r3, r7
 8010e76:	d112      	bne.n	8010e9e <_dtoa_r+0x9e>
 8010e78:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8010e7a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8010e7e:	6013      	str	r3, [r2, #0]
 8010e80:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010e84:	4323      	orrs	r3, r4
 8010e86:	f000 854d 	beq.w	8011924 <_dtoa_r+0xb24>
 8010e8a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010e8c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80110e4 <_dtoa_r+0x2e4>
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	f000 854f 	beq.w	8011934 <_dtoa_r+0xb34>
 8010e96:	f10a 0303 	add.w	r3, sl, #3
 8010e9a:	f000 bd49 	b.w	8011930 <_dtoa_r+0xb30>
 8010e9e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010ea2:	2200      	movs	r2, #0
 8010ea4:	ec51 0b17 	vmov	r0, r1, d7
 8010ea8:	2300      	movs	r3, #0
 8010eaa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8010eae:	f7ef fe33 	bl	8000b18 <__aeabi_dcmpeq>
 8010eb2:	4680      	mov	r8, r0
 8010eb4:	b158      	cbz	r0, 8010ece <_dtoa_r+0xce>
 8010eb6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8010eb8:	2301      	movs	r3, #1
 8010eba:	6013      	str	r3, [r2, #0]
 8010ebc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010ebe:	b113      	cbz	r3, 8010ec6 <_dtoa_r+0xc6>
 8010ec0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8010ec2:	4b84      	ldr	r3, [pc, #528]	@ (80110d4 <_dtoa_r+0x2d4>)
 8010ec4:	6013      	str	r3, [r2, #0]
 8010ec6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80110e8 <_dtoa_r+0x2e8>
 8010eca:	f000 bd33 	b.w	8011934 <_dtoa_r+0xb34>
 8010ece:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8010ed2:	aa16      	add	r2, sp, #88	@ 0x58
 8010ed4:	a917      	add	r1, sp, #92	@ 0x5c
 8010ed6:	4658      	mov	r0, fp
 8010ed8:	f001 fd86 	bl	80129e8 <__d2b>
 8010edc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8010ee0:	4681      	mov	r9, r0
 8010ee2:	2e00      	cmp	r6, #0
 8010ee4:	d077      	beq.n	8010fd6 <_dtoa_r+0x1d6>
 8010ee6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010ee8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8010eec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010ef0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010ef4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8010ef8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8010efc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8010f00:	4619      	mov	r1, r3
 8010f02:	2200      	movs	r2, #0
 8010f04:	4b74      	ldr	r3, [pc, #464]	@ (80110d8 <_dtoa_r+0x2d8>)
 8010f06:	f7ef f9e7 	bl	80002d8 <__aeabi_dsub>
 8010f0a:	a369      	add	r3, pc, #420	@ (adr r3, 80110b0 <_dtoa_r+0x2b0>)
 8010f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f10:	f7ef fb9a 	bl	8000648 <__aeabi_dmul>
 8010f14:	a368      	add	r3, pc, #416	@ (adr r3, 80110b8 <_dtoa_r+0x2b8>)
 8010f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f1a:	f7ef f9df 	bl	80002dc <__adddf3>
 8010f1e:	4604      	mov	r4, r0
 8010f20:	4630      	mov	r0, r6
 8010f22:	460d      	mov	r5, r1
 8010f24:	f7ef fb26 	bl	8000574 <__aeabi_i2d>
 8010f28:	a365      	add	r3, pc, #404	@ (adr r3, 80110c0 <_dtoa_r+0x2c0>)
 8010f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f2e:	f7ef fb8b 	bl	8000648 <__aeabi_dmul>
 8010f32:	4602      	mov	r2, r0
 8010f34:	460b      	mov	r3, r1
 8010f36:	4620      	mov	r0, r4
 8010f38:	4629      	mov	r1, r5
 8010f3a:	f7ef f9cf 	bl	80002dc <__adddf3>
 8010f3e:	4604      	mov	r4, r0
 8010f40:	460d      	mov	r5, r1
 8010f42:	f7ef fe31 	bl	8000ba8 <__aeabi_d2iz>
 8010f46:	2200      	movs	r2, #0
 8010f48:	4607      	mov	r7, r0
 8010f4a:	2300      	movs	r3, #0
 8010f4c:	4620      	mov	r0, r4
 8010f4e:	4629      	mov	r1, r5
 8010f50:	f7ef fdec 	bl	8000b2c <__aeabi_dcmplt>
 8010f54:	b140      	cbz	r0, 8010f68 <_dtoa_r+0x168>
 8010f56:	4638      	mov	r0, r7
 8010f58:	f7ef fb0c 	bl	8000574 <__aeabi_i2d>
 8010f5c:	4622      	mov	r2, r4
 8010f5e:	462b      	mov	r3, r5
 8010f60:	f7ef fdda 	bl	8000b18 <__aeabi_dcmpeq>
 8010f64:	b900      	cbnz	r0, 8010f68 <_dtoa_r+0x168>
 8010f66:	3f01      	subs	r7, #1
 8010f68:	2f16      	cmp	r7, #22
 8010f6a:	d851      	bhi.n	8011010 <_dtoa_r+0x210>
 8010f6c:	4b5b      	ldr	r3, [pc, #364]	@ (80110dc <_dtoa_r+0x2dc>)
 8010f6e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f76:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010f7a:	f7ef fdd7 	bl	8000b2c <__aeabi_dcmplt>
 8010f7e:	2800      	cmp	r0, #0
 8010f80:	d048      	beq.n	8011014 <_dtoa_r+0x214>
 8010f82:	3f01      	subs	r7, #1
 8010f84:	2300      	movs	r3, #0
 8010f86:	9312      	str	r3, [sp, #72]	@ 0x48
 8010f88:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8010f8a:	1b9b      	subs	r3, r3, r6
 8010f8c:	1e5a      	subs	r2, r3, #1
 8010f8e:	bf44      	itt	mi
 8010f90:	f1c3 0801 	rsbmi	r8, r3, #1
 8010f94:	2300      	movmi	r3, #0
 8010f96:	9208      	str	r2, [sp, #32]
 8010f98:	bf54      	ite	pl
 8010f9a:	f04f 0800 	movpl.w	r8, #0
 8010f9e:	9308      	strmi	r3, [sp, #32]
 8010fa0:	2f00      	cmp	r7, #0
 8010fa2:	db39      	blt.n	8011018 <_dtoa_r+0x218>
 8010fa4:	9b08      	ldr	r3, [sp, #32]
 8010fa6:	970f      	str	r7, [sp, #60]	@ 0x3c
 8010fa8:	443b      	add	r3, r7
 8010faa:	9308      	str	r3, [sp, #32]
 8010fac:	2300      	movs	r3, #0
 8010fae:	930a      	str	r3, [sp, #40]	@ 0x28
 8010fb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010fb2:	2b09      	cmp	r3, #9
 8010fb4:	d864      	bhi.n	8011080 <_dtoa_r+0x280>
 8010fb6:	2b05      	cmp	r3, #5
 8010fb8:	bfc4      	itt	gt
 8010fba:	3b04      	subgt	r3, #4
 8010fbc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8010fbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010fc0:	f1a3 0302 	sub.w	r3, r3, #2
 8010fc4:	bfcc      	ite	gt
 8010fc6:	2400      	movgt	r4, #0
 8010fc8:	2401      	movle	r4, #1
 8010fca:	2b03      	cmp	r3, #3
 8010fcc:	d863      	bhi.n	8011096 <_dtoa_r+0x296>
 8010fce:	e8df f003 	tbb	[pc, r3]
 8010fd2:	372a      	.short	0x372a
 8010fd4:	5535      	.short	0x5535
 8010fd6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8010fda:	441e      	add	r6, r3
 8010fdc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8010fe0:	2b20      	cmp	r3, #32
 8010fe2:	bfc1      	itttt	gt
 8010fe4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8010fe8:	409f      	lslgt	r7, r3
 8010fea:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8010fee:	fa24 f303 	lsrgt.w	r3, r4, r3
 8010ff2:	bfd6      	itet	le
 8010ff4:	f1c3 0320 	rsble	r3, r3, #32
 8010ff8:	ea47 0003 	orrgt.w	r0, r7, r3
 8010ffc:	fa04 f003 	lslle.w	r0, r4, r3
 8011000:	f7ef faa8 	bl	8000554 <__aeabi_ui2d>
 8011004:	2201      	movs	r2, #1
 8011006:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801100a:	3e01      	subs	r6, #1
 801100c:	9214      	str	r2, [sp, #80]	@ 0x50
 801100e:	e777      	b.n	8010f00 <_dtoa_r+0x100>
 8011010:	2301      	movs	r3, #1
 8011012:	e7b8      	b.n	8010f86 <_dtoa_r+0x186>
 8011014:	9012      	str	r0, [sp, #72]	@ 0x48
 8011016:	e7b7      	b.n	8010f88 <_dtoa_r+0x188>
 8011018:	427b      	negs	r3, r7
 801101a:	930a      	str	r3, [sp, #40]	@ 0x28
 801101c:	2300      	movs	r3, #0
 801101e:	eba8 0807 	sub.w	r8, r8, r7
 8011022:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011024:	e7c4      	b.n	8010fb0 <_dtoa_r+0x1b0>
 8011026:	2300      	movs	r3, #0
 8011028:	930b      	str	r3, [sp, #44]	@ 0x2c
 801102a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801102c:	2b00      	cmp	r3, #0
 801102e:	dc35      	bgt.n	801109c <_dtoa_r+0x29c>
 8011030:	2301      	movs	r3, #1
 8011032:	9300      	str	r3, [sp, #0]
 8011034:	9307      	str	r3, [sp, #28]
 8011036:	461a      	mov	r2, r3
 8011038:	920e      	str	r2, [sp, #56]	@ 0x38
 801103a:	e00b      	b.n	8011054 <_dtoa_r+0x254>
 801103c:	2301      	movs	r3, #1
 801103e:	e7f3      	b.n	8011028 <_dtoa_r+0x228>
 8011040:	2300      	movs	r3, #0
 8011042:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011044:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011046:	18fb      	adds	r3, r7, r3
 8011048:	9300      	str	r3, [sp, #0]
 801104a:	3301      	adds	r3, #1
 801104c:	2b01      	cmp	r3, #1
 801104e:	9307      	str	r3, [sp, #28]
 8011050:	bfb8      	it	lt
 8011052:	2301      	movlt	r3, #1
 8011054:	f8db 001c 	ldr.w	r0, [fp, #28]
 8011058:	2100      	movs	r1, #0
 801105a:	2204      	movs	r2, #4
 801105c:	f102 0514 	add.w	r5, r2, #20
 8011060:	429d      	cmp	r5, r3
 8011062:	d91f      	bls.n	80110a4 <_dtoa_r+0x2a4>
 8011064:	6041      	str	r1, [r0, #4]
 8011066:	4658      	mov	r0, fp
 8011068:	f001 f8da 	bl	8012220 <_Balloc>
 801106c:	4682      	mov	sl, r0
 801106e:	2800      	cmp	r0, #0
 8011070:	d13c      	bne.n	80110ec <_dtoa_r+0x2ec>
 8011072:	4b1b      	ldr	r3, [pc, #108]	@ (80110e0 <_dtoa_r+0x2e0>)
 8011074:	4602      	mov	r2, r0
 8011076:	f240 11af 	movw	r1, #431	@ 0x1af
 801107a:	e6d8      	b.n	8010e2e <_dtoa_r+0x2e>
 801107c:	2301      	movs	r3, #1
 801107e:	e7e0      	b.n	8011042 <_dtoa_r+0x242>
 8011080:	2401      	movs	r4, #1
 8011082:	2300      	movs	r3, #0
 8011084:	9309      	str	r3, [sp, #36]	@ 0x24
 8011086:	940b      	str	r4, [sp, #44]	@ 0x2c
 8011088:	f04f 33ff 	mov.w	r3, #4294967295
 801108c:	9300      	str	r3, [sp, #0]
 801108e:	9307      	str	r3, [sp, #28]
 8011090:	2200      	movs	r2, #0
 8011092:	2312      	movs	r3, #18
 8011094:	e7d0      	b.n	8011038 <_dtoa_r+0x238>
 8011096:	2301      	movs	r3, #1
 8011098:	930b      	str	r3, [sp, #44]	@ 0x2c
 801109a:	e7f5      	b.n	8011088 <_dtoa_r+0x288>
 801109c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801109e:	9300      	str	r3, [sp, #0]
 80110a0:	9307      	str	r3, [sp, #28]
 80110a2:	e7d7      	b.n	8011054 <_dtoa_r+0x254>
 80110a4:	3101      	adds	r1, #1
 80110a6:	0052      	lsls	r2, r2, #1
 80110a8:	e7d8      	b.n	801105c <_dtoa_r+0x25c>
 80110aa:	bf00      	nop
 80110ac:	f3af 8000 	nop.w
 80110b0:	636f4361 	.word	0x636f4361
 80110b4:	3fd287a7 	.word	0x3fd287a7
 80110b8:	8b60c8b3 	.word	0x8b60c8b3
 80110bc:	3fc68a28 	.word	0x3fc68a28
 80110c0:	509f79fb 	.word	0x509f79fb
 80110c4:	3fd34413 	.word	0x3fd34413
 80110c8:	08013bbe 	.word	0x08013bbe
 80110cc:	08013bd5 	.word	0x08013bd5
 80110d0:	7ff00000 	.word	0x7ff00000
 80110d4:	08013b81 	.word	0x08013b81
 80110d8:	3ff80000 	.word	0x3ff80000
 80110dc:	08013d30 	.word	0x08013d30
 80110e0:	08013c2d 	.word	0x08013c2d
 80110e4:	08013bba 	.word	0x08013bba
 80110e8:	08013b80 	.word	0x08013b80
 80110ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 80110f0:	6018      	str	r0, [r3, #0]
 80110f2:	9b07      	ldr	r3, [sp, #28]
 80110f4:	2b0e      	cmp	r3, #14
 80110f6:	f200 80a4 	bhi.w	8011242 <_dtoa_r+0x442>
 80110fa:	2c00      	cmp	r4, #0
 80110fc:	f000 80a1 	beq.w	8011242 <_dtoa_r+0x442>
 8011100:	2f00      	cmp	r7, #0
 8011102:	dd33      	ble.n	801116c <_dtoa_r+0x36c>
 8011104:	4bad      	ldr	r3, [pc, #692]	@ (80113bc <_dtoa_r+0x5bc>)
 8011106:	f007 020f 	and.w	r2, r7, #15
 801110a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801110e:	ed93 7b00 	vldr	d7, [r3]
 8011112:	05f8      	lsls	r0, r7, #23
 8011114:	ed8d 7b04 	vstr	d7, [sp, #16]
 8011118:	ea4f 1427 	mov.w	r4, r7, asr #4
 801111c:	d516      	bpl.n	801114c <_dtoa_r+0x34c>
 801111e:	4ba8      	ldr	r3, [pc, #672]	@ (80113c0 <_dtoa_r+0x5c0>)
 8011120:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011124:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011128:	f7ef fbb8 	bl	800089c <__aeabi_ddiv>
 801112c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011130:	f004 040f 	and.w	r4, r4, #15
 8011134:	2603      	movs	r6, #3
 8011136:	4da2      	ldr	r5, [pc, #648]	@ (80113c0 <_dtoa_r+0x5c0>)
 8011138:	b954      	cbnz	r4, 8011150 <_dtoa_r+0x350>
 801113a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801113e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011142:	f7ef fbab 	bl	800089c <__aeabi_ddiv>
 8011146:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801114a:	e028      	b.n	801119e <_dtoa_r+0x39e>
 801114c:	2602      	movs	r6, #2
 801114e:	e7f2      	b.n	8011136 <_dtoa_r+0x336>
 8011150:	07e1      	lsls	r1, r4, #31
 8011152:	d508      	bpl.n	8011166 <_dtoa_r+0x366>
 8011154:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011158:	e9d5 2300 	ldrd	r2, r3, [r5]
 801115c:	f7ef fa74 	bl	8000648 <__aeabi_dmul>
 8011160:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011164:	3601      	adds	r6, #1
 8011166:	1064      	asrs	r4, r4, #1
 8011168:	3508      	adds	r5, #8
 801116a:	e7e5      	b.n	8011138 <_dtoa_r+0x338>
 801116c:	f000 80d2 	beq.w	8011314 <_dtoa_r+0x514>
 8011170:	427c      	negs	r4, r7
 8011172:	4b92      	ldr	r3, [pc, #584]	@ (80113bc <_dtoa_r+0x5bc>)
 8011174:	4d92      	ldr	r5, [pc, #584]	@ (80113c0 <_dtoa_r+0x5c0>)
 8011176:	f004 020f 	and.w	r2, r4, #15
 801117a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801117e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011182:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011186:	f7ef fa5f 	bl	8000648 <__aeabi_dmul>
 801118a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801118e:	1124      	asrs	r4, r4, #4
 8011190:	2300      	movs	r3, #0
 8011192:	2602      	movs	r6, #2
 8011194:	2c00      	cmp	r4, #0
 8011196:	f040 80b2 	bne.w	80112fe <_dtoa_r+0x4fe>
 801119a:	2b00      	cmp	r3, #0
 801119c:	d1d3      	bne.n	8011146 <_dtoa_r+0x346>
 801119e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80111a0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	f000 80b7 	beq.w	8011318 <_dtoa_r+0x518>
 80111aa:	4b86      	ldr	r3, [pc, #536]	@ (80113c4 <_dtoa_r+0x5c4>)
 80111ac:	2200      	movs	r2, #0
 80111ae:	4620      	mov	r0, r4
 80111b0:	4629      	mov	r1, r5
 80111b2:	f7ef fcbb 	bl	8000b2c <__aeabi_dcmplt>
 80111b6:	2800      	cmp	r0, #0
 80111b8:	f000 80ae 	beq.w	8011318 <_dtoa_r+0x518>
 80111bc:	9b07      	ldr	r3, [sp, #28]
 80111be:	2b00      	cmp	r3, #0
 80111c0:	f000 80aa 	beq.w	8011318 <_dtoa_r+0x518>
 80111c4:	9b00      	ldr	r3, [sp, #0]
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	dd37      	ble.n	801123a <_dtoa_r+0x43a>
 80111ca:	1e7b      	subs	r3, r7, #1
 80111cc:	9304      	str	r3, [sp, #16]
 80111ce:	4620      	mov	r0, r4
 80111d0:	4b7d      	ldr	r3, [pc, #500]	@ (80113c8 <_dtoa_r+0x5c8>)
 80111d2:	2200      	movs	r2, #0
 80111d4:	4629      	mov	r1, r5
 80111d6:	f7ef fa37 	bl	8000648 <__aeabi_dmul>
 80111da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80111de:	9c00      	ldr	r4, [sp, #0]
 80111e0:	3601      	adds	r6, #1
 80111e2:	4630      	mov	r0, r6
 80111e4:	f7ef f9c6 	bl	8000574 <__aeabi_i2d>
 80111e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80111ec:	f7ef fa2c 	bl	8000648 <__aeabi_dmul>
 80111f0:	4b76      	ldr	r3, [pc, #472]	@ (80113cc <_dtoa_r+0x5cc>)
 80111f2:	2200      	movs	r2, #0
 80111f4:	f7ef f872 	bl	80002dc <__adddf3>
 80111f8:	4605      	mov	r5, r0
 80111fa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80111fe:	2c00      	cmp	r4, #0
 8011200:	f040 808d 	bne.w	801131e <_dtoa_r+0x51e>
 8011204:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011208:	4b71      	ldr	r3, [pc, #452]	@ (80113d0 <_dtoa_r+0x5d0>)
 801120a:	2200      	movs	r2, #0
 801120c:	f7ef f864 	bl	80002d8 <__aeabi_dsub>
 8011210:	4602      	mov	r2, r0
 8011212:	460b      	mov	r3, r1
 8011214:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011218:	462a      	mov	r2, r5
 801121a:	4633      	mov	r3, r6
 801121c:	f7ef fca4 	bl	8000b68 <__aeabi_dcmpgt>
 8011220:	2800      	cmp	r0, #0
 8011222:	f040 828b 	bne.w	801173c <_dtoa_r+0x93c>
 8011226:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801122a:	462a      	mov	r2, r5
 801122c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8011230:	f7ef fc7c 	bl	8000b2c <__aeabi_dcmplt>
 8011234:	2800      	cmp	r0, #0
 8011236:	f040 8128 	bne.w	801148a <_dtoa_r+0x68a>
 801123a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801123e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8011242:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8011244:	2b00      	cmp	r3, #0
 8011246:	f2c0 815a 	blt.w	80114fe <_dtoa_r+0x6fe>
 801124a:	2f0e      	cmp	r7, #14
 801124c:	f300 8157 	bgt.w	80114fe <_dtoa_r+0x6fe>
 8011250:	4b5a      	ldr	r3, [pc, #360]	@ (80113bc <_dtoa_r+0x5bc>)
 8011252:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8011256:	ed93 7b00 	vldr	d7, [r3]
 801125a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801125c:	2b00      	cmp	r3, #0
 801125e:	ed8d 7b00 	vstr	d7, [sp]
 8011262:	da03      	bge.n	801126c <_dtoa_r+0x46c>
 8011264:	9b07      	ldr	r3, [sp, #28]
 8011266:	2b00      	cmp	r3, #0
 8011268:	f340 8101 	ble.w	801146e <_dtoa_r+0x66e>
 801126c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8011270:	4656      	mov	r6, sl
 8011272:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011276:	4620      	mov	r0, r4
 8011278:	4629      	mov	r1, r5
 801127a:	f7ef fb0f 	bl	800089c <__aeabi_ddiv>
 801127e:	f7ef fc93 	bl	8000ba8 <__aeabi_d2iz>
 8011282:	4680      	mov	r8, r0
 8011284:	f7ef f976 	bl	8000574 <__aeabi_i2d>
 8011288:	e9dd 2300 	ldrd	r2, r3, [sp]
 801128c:	f7ef f9dc 	bl	8000648 <__aeabi_dmul>
 8011290:	4602      	mov	r2, r0
 8011292:	460b      	mov	r3, r1
 8011294:	4620      	mov	r0, r4
 8011296:	4629      	mov	r1, r5
 8011298:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801129c:	f7ef f81c 	bl	80002d8 <__aeabi_dsub>
 80112a0:	f806 4b01 	strb.w	r4, [r6], #1
 80112a4:	9d07      	ldr	r5, [sp, #28]
 80112a6:	eba6 040a 	sub.w	r4, r6, sl
 80112aa:	42a5      	cmp	r5, r4
 80112ac:	4602      	mov	r2, r0
 80112ae:	460b      	mov	r3, r1
 80112b0:	f040 8117 	bne.w	80114e2 <_dtoa_r+0x6e2>
 80112b4:	f7ef f812 	bl	80002dc <__adddf3>
 80112b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80112bc:	4604      	mov	r4, r0
 80112be:	460d      	mov	r5, r1
 80112c0:	f7ef fc52 	bl	8000b68 <__aeabi_dcmpgt>
 80112c4:	2800      	cmp	r0, #0
 80112c6:	f040 80f9 	bne.w	80114bc <_dtoa_r+0x6bc>
 80112ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 80112ce:	4620      	mov	r0, r4
 80112d0:	4629      	mov	r1, r5
 80112d2:	f7ef fc21 	bl	8000b18 <__aeabi_dcmpeq>
 80112d6:	b118      	cbz	r0, 80112e0 <_dtoa_r+0x4e0>
 80112d8:	f018 0f01 	tst.w	r8, #1
 80112dc:	f040 80ee 	bne.w	80114bc <_dtoa_r+0x6bc>
 80112e0:	4649      	mov	r1, r9
 80112e2:	4658      	mov	r0, fp
 80112e4:	f000 ffdc 	bl	80122a0 <_Bfree>
 80112e8:	2300      	movs	r3, #0
 80112ea:	7033      	strb	r3, [r6, #0]
 80112ec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80112ee:	3701      	adds	r7, #1
 80112f0:	601f      	str	r7, [r3, #0]
 80112f2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	f000 831d 	beq.w	8011934 <_dtoa_r+0xb34>
 80112fa:	601e      	str	r6, [r3, #0]
 80112fc:	e31a      	b.n	8011934 <_dtoa_r+0xb34>
 80112fe:	07e2      	lsls	r2, r4, #31
 8011300:	d505      	bpl.n	801130e <_dtoa_r+0x50e>
 8011302:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011306:	f7ef f99f 	bl	8000648 <__aeabi_dmul>
 801130a:	3601      	adds	r6, #1
 801130c:	2301      	movs	r3, #1
 801130e:	1064      	asrs	r4, r4, #1
 8011310:	3508      	adds	r5, #8
 8011312:	e73f      	b.n	8011194 <_dtoa_r+0x394>
 8011314:	2602      	movs	r6, #2
 8011316:	e742      	b.n	801119e <_dtoa_r+0x39e>
 8011318:	9c07      	ldr	r4, [sp, #28]
 801131a:	9704      	str	r7, [sp, #16]
 801131c:	e761      	b.n	80111e2 <_dtoa_r+0x3e2>
 801131e:	4b27      	ldr	r3, [pc, #156]	@ (80113bc <_dtoa_r+0x5bc>)
 8011320:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011322:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011326:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801132a:	4454      	add	r4, sl
 801132c:	2900      	cmp	r1, #0
 801132e:	d053      	beq.n	80113d8 <_dtoa_r+0x5d8>
 8011330:	4928      	ldr	r1, [pc, #160]	@ (80113d4 <_dtoa_r+0x5d4>)
 8011332:	2000      	movs	r0, #0
 8011334:	f7ef fab2 	bl	800089c <__aeabi_ddiv>
 8011338:	4633      	mov	r3, r6
 801133a:	462a      	mov	r2, r5
 801133c:	f7ee ffcc 	bl	80002d8 <__aeabi_dsub>
 8011340:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8011344:	4656      	mov	r6, sl
 8011346:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801134a:	f7ef fc2d 	bl	8000ba8 <__aeabi_d2iz>
 801134e:	4605      	mov	r5, r0
 8011350:	f7ef f910 	bl	8000574 <__aeabi_i2d>
 8011354:	4602      	mov	r2, r0
 8011356:	460b      	mov	r3, r1
 8011358:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801135c:	f7ee ffbc 	bl	80002d8 <__aeabi_dsub>
 8011360:	3530      	adds	r5, #48	@ 0x30
 8011362:	4602      	mov	r2, r0
 8011364:	460b      	mov	r3, r1
 8011366:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801136a:	f806 5b01 	strb.w	r5, [r6], #1
 801136e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8011372:	f7ef fbdb 	bl	8000b2c <__aeabi_dcmplt>
 8011376:	2800      	cmp	r0, #0
 8011378:	d171      	bne.n	801145e <_dtoa_r+0x65e>
 801137a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801137e:	4911      	ldr	r1, [pc, #68]	@ (80113c4 <_dtoa_r+0x5c4>)
 8011380:	2000      	movs	r0, #0
 8011382:	f7ee ffa9 	bl	80002d8 <__aeabi_dsub>
 8011386:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801138a:	f7ef fbcf 	bl	8000b2c <__aeabi_dcmplt>
 801138e:	2800      	cmp	r0, #0
 8011390:	f040 8095 	bne.w	80114be <_dtoa_r+0x6be>
 8011394:	42a6      	cmp	r6, r4
 8011396:	f43f af50 	beq.w	801123a <_dtoa_r+0x43a>
 801139a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801139e:	4b0a      	ldr	r3, [pc, #40]	@ (80113c8 <_dtoa_r+0x5c8>)
 80113a0:	2200      	movs	r2, #0
 80113a2:	f7ef f951 	bl	8000648 <__aeabi_dmul>
 80113a6:	4b08      	ldr	r3, [pc, #32]	@ (80113c8 <_dtoa_r+0x5c8>)
 80113a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80113ac:	2200      	movs	r2, #0
 80113ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80113b2:	f7ef f949 	bl	8000648 <__aeabi_dmul>
 80113b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80113ba:	e7c4      	b.n	8011346 <_dtoa_r+0x546>
 80113bc:	08013d30 	.word	0x08013d30
 80113c0:	08013d08 	.word	0x08013d08
 80113c4:	3ff00000 	.word	0x3ff00000
 80113c8:	40240000 	.word	0x40240000
 80113cc:	401c0000 	.word	0x401c0000
 80113d0:	40140000 	.word	0x40140000
 80113d4:	3fe00000 	.word	0x3fe00000
 80113d8:	4631      	mov	r1, r6
 80113da:	4628      	mov	r0, r5
 80113dc:	f7ef f934 	bl	8000648 <__aeabi_dmul>
 80113e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80113e4:	9415      	str	r4, [sp, #84]	@ 0x54
 80113e6:	4656      	mov	r6, sl
 80113e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80113ec:	f7ef fbdc 	bl	8000ba8 <__aeabi_d2iz>
 80113f0:	4605      	mov	r5, r0
 80113f2:	f7ef f8bf 	bl	8000574 <__aeabi_i2d>
 80113f6:	4602      	mov	r2, r0
 80113f8:	460b      	mov	r3, r1
 80113fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80113fe:	f7ee ff6b 	bl	80002d8 <__aeabi_dsub>
 8011402:	3530      	adds	r5, #48	@ 0x30
 8011404:	f806 5b01 	strb.w	r5, [r6], #1
 8011408:	4602      	mov	r2, r0
 801140a:	460b      	mov	r3, r1
 801140c:	42a6      	cmp	r6, r4
 801140e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011412:	f04f 0200 	mov.w	r2, #0
 8011416:	d124      	bne.n	8011462 <_dtoa_r+0x662>
 8011418:	4bac      	ldr	r3, [pc, #688]	@ (80116cc <_dtoa_r+0x8cc>)
 801141a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801141e:	f7ee ff5d 	bl	80002dc <__adddf3>
 8011422:	4602      	mov	r2, r0
 8011424:	460b      	mov	r3, r1
 8011426:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801142a:	f7ef fb9d 	bl	8000b68 <__aeabi_dcmpgt>
 801142e:	2800      	cmp	r0, #0
 8011430:	d145      	bne.n	80114be <_dtoa_r+0x6be>
 8011432:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8011436:	49a5      	ldr	r1, [pc, #660]	@ (80116cc <_dtoa_r+0x8cc>)
 8011438:	2000      	movs	r0, #0
 801143a:	f7ee ff4d 	bl	80002d8 <__aeabi_dsub>
 801143e:	4602      	mov	r2, r0
 8011440:	460b      	mov	r3, r1
 8011442:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011446:	f7ef fb71 	bl	8000b2c <__aeabi_dcmplt>
 801144a:	2800      	cmp	r0, #0
 801144c:	f43f aef5 	beq.w	801123a <_dtoa_r+0x43a>
 8011450:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8011452:	1e73      	subs	r3, r6, #1
 8011454:	9315      	str	r3, [sp, #84]	@ 0x54
 8011456:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801145a:	2b30      	cmp	r3, #48	@ 0x30
 801145c:	d0f8      	beq.n	8011450 <_dtoa_r+0x650>
 801145e:	9f04      	ldr	r7, [sp, #16]
 8011460:	e73e      	b.n	80112e0 <_dtoa_r+0x4e0>
 8011462:	4b9b      	ldr	r3, [pc, #620]	@ (80116d0 <_dtoa_r+0x8d0>)
 8011464:	f7ef f8f0 	bl	8000648 <__aeabi_dmul>
 8011468:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801146c:	e7bc      	b.n	80113e8 <_dtoa_r+0x5e8>
 801146e:	d10c      	bne.n	801148a <_dtoa_r+0x68a>
 8011470:	4b98      	ldr	r3, [pc, #608]	@ (80116d4 <_dtoa_r+0x8d4>)
 8011472:	2200      	movs	r2, #0
 8011474:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011478:	f7ef f8e6 	bl	8000648 <__aeabi_dmul>
 801147c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011480:	f7ef fb68 	bl	8000b54 <__aeabi_dcmpge>
 8011484:	2800      	cmp	r0, #0
 8011486:	f000 8157 	beq.w	8011738 <_dtoa_r+0x938>
 801148a:	2400      	movs	r4, #0
 801148c:	4625      	mov	r5, r4
 801148e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011490:	43db      	mvns	r3, r3
 8011492:	9304      	str	r3, [sp, #16]
 8011494:	4656      	mov	r6, sl
 8011496:	2700      	movs	r7, #0
 8011498:	4621      	mov	r1, r4
 801149a:	4658      	mov	r0, fp
 801149c:	f000 ff00 	bl	80122a0 <_Bfree>
 80114a0:	2d00      	cmp	r5, #0
 80114a2:	d0dc      	beq.n	801145e <_dtoa_r+0x65e>
 80114a4:	b12f      	cbz	r7, 80114b2 <_dtoa_r+0x6b2>
 80114a6:	42af      	cmp	r7, r5
 80114a8:	d003      	beq.n	80114b2 <_dtoa_r+0x6b2>
 80114aa:	4639      	mov	r1, r7
 80114ac:	4658      	mov	r0, fp
 80114ae:	f000 fef7 	bl	80122a0 <_Bfree>
 80114b2:	4629      	mov	r1, r5
 80114b4:	4658      	mov	r0, fp
 80114b6:	f000 fef3 	bl	80122a0 <_Bfree>
 80114ba:	e7d0      	b.n	801145e <_dtoa_r+0x65e>
 80114bc:	9704      	str	r7, [sp, #16]
 80114be:	4633      	mov	r3, r6
 80114c0:	461e      	mov	r6, r3
 80114c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80114c6:	2a39      	cmp	r2, #57	@ 0x39
 80114c8:	d107      	bne.n	80114da <_dtoa_r+0x6da>
 80114ca:	459a      	cmp	sl, r3
 80114cc:	d1f8      	bne.n	80114c0 <_dtoa_r+0x6c0>
 80114ce:	9a04      	ldr	r2, [sp, #16]
 80114d0:	3201      	adds	r2, #1
 80114d2:	9204      	str	r2, [sp, #16]
 80114d4:	2230      	movs	r2, #48	@ 0x30
 80114d6:	f88a 2000 	strb.w	r2, [sl]
 80114da:	781a      	ldrb	r2, [r3, #0]
 80114dc:	3201      	adds	r2, #1
 80114de:	701a      	strb	r2, [r3, #0]
 80114e0:	e7bd      	b.n	801145e <_dtoa_r+0x65e>
 80114e2:	4b7b      	ldr	r3, [pc, #492]	@ (80116d0 <_dtoa_r+0x8d0>)
 80114e4:	2200      	movs	r2, #0
 80114e6:	f7ef f8af 	bl	8000648 <__aeabi_dmul>
 80114ea:	2200      	movs	r2, #0
 80114ec:	2300      	movs	r3, #0
 80114ee:	4604      	mov	r4, r0
 80114f0:	460d      	mov	r5, r1
 80114f2:	f7ef fb11 	bl	8000b18 <__aeabi_dcmpeq>
 80114f6:	2800      	cmp	r0, #0
 80114f8:	f43f aebb 	beq.w	8011272 <_dtoa_r+0x472>
 80114fc:	e6f0      	b.n	80112e0 <_dtoa_r+0x4e0>
 80114fe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011500:	2a00      	cmp	r2, #0
 8011502:	f000 80db 	beq.w	80116bc <_dtoa_r+0x8bc>
 8011506:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011508:	2a01      	cmp	r2, #1
 801150a:	f300 80bf 	bgt.w	801168c <_dtoa_r+0x88c>
 801150e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8011510:	2a00      	cmp	r2, #0
 8011512:	f000 80b7 	beq.w	8011684 <_dtoa_r+0x884>
 8011516:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801151a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801151c:	4646      	mov	r6, r8
 801151e:	9a08      	ldr	r2, [sp, #32]
 8011520:	2101      	movs	r1, #1
 8011522:	441a      	add	r2, r3
 8011524:	4658      	mov	r0, fp
 8011526:	4498      	add	r8, r3
 8011528:	9208      	str	r2, [sp, #32]
 801152a:	f000 ffb7 	bl	801249c <__i2b>
 801152e:	4605      	mov	r5, r0
 8011530:	b15e      	cbz	r6, 801154a <_dtoa_r+0x74a>
 8011532:	9b08      	ldr	r3, [sp, #32]
 8011534:	2b00      	cmp	r3, #0
 8011536:	dd08      	ble.n	801154a <_dtoa_r+0x74a>
 8011538:	42b3      	cmp	r3, r6
 801153a:	9a08      	ldr	r2, [sp, #32]
 801153c:	bfa8      	it	ge
 801153e:	4633      	movge	r3, r6
 8011540:	eba8 0803 	sub.w	r8, r8, r3
 8011544:	1af6      	subs	r6, r6, r3
 8011546:	1ad3      	subs	r3, r2, r3
 8011548:	9308      	str	r3, [sp, #32]
 801154a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801154c:	b1f3      	cbz	r3, 801158c <_dtoa_r+0x78c>
 801154e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011550:	2b00      	cmp	r3, #0
 8011552:	f000 80b7 	beq.w	80116c4 <_dtoa_r+0x8c4>
 8011556:	b18c      	cbz	r4, 801157c <_dtoa_r+0x77c>
 8011558:	4629      	mov	r1, r5
 801155a:	4622      	mov	r2, r4
 801155c:	4658      	mov	r0, fp
 801155e:	f001 f85d 	bl	801261c <__pow5mult>
 8011562:	464a      	mov	r2, r9
 8011564:	4601      	mov	r1, r0
 8011566:	4605      	mov	r5, r0
 8011568:	4658      	mov	r0, fp
 801156a:	f000 ffad 	bl	80124c8 <__multiply>
 801156e:	4649      	mov	r1, r9
 8011570:	9004      	str	r0, [sp, #16]
 8011572:	4658      	mov	r0, fp
 8011574:	f000 fe94 	bl	80122a0 <_Bfree>
 8011578:	9b04      	ldr	r3, [sp, #16]
 801157a:	4699      	mov	r9, r3
 801157c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801157e:	1b1a      	subs	r2, r3, r4
 8011580:	d004      	beq.n	801158c <_dtoa_r+0x78c>
 8011582:	4649      	mov	r1, r9
 8011584:	4658      	mov	r0, fp
 8011586:	f001 f849 	bl	801261c <__pow5mult>
 801158a:	4681      	mov	r9, r0
 801158c:	2101      	movs	r1, #1
 801158e:	4658      	mov	r0, fp
 8011590:	f000 ff84 	bl	801249c <__i2b>
 8011594:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011596:	4604      	mov	r4, r0
 8011598:	2b00      	cmp	r3, #0
 801159a:	f000 81cf 	beq.w	801193c <_dtoa_r+0xb3c>
 801159e:	461a      	mov	r2, r3
 80115a0:	4601      	mov	r1, r0
 80115a2:	4658      	mov	r0, fp
 80115a4:	f001 f83a 	bl	801261c <__pow5mult>
 80115a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80115aa:	2b01      	cmp	r3, #1
 80115ac:	4604      	mov	r4, r0
 80115ae:	f300 8095 	bgt.w	80116dc <_dtoa_r+0x8dc>
 80115b2:	9b02      	ldr	r3, [sp, #8]
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	f040 8087 	bne.w	80116c8 <_dtoa_r+0x8c8>
 80115ba:	9b03      	ldr	r3, [sp, #12]
 80115bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80115c0:	2b00      	cmp	r3, #0
 80115c2:	f040 8089 	bne.w	80116d8 <_dtoa_r+0x8d8>
 80115c6:	9b03      	ldr	r3, [sp, #12]
 80115c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80115cc:	0d1b      	lsrs	r3, r3, #20
 80115ce:	051b      	lsls	r3, r3, #20
 80115d0:	b12b      	cbz	r3, 80115de <_dtoa_r+0x7de>
 80115d2:	9b08      	ldr	r3, [sp, #32]
 80115d4:	3301      	adds	r3, #1
 80115d6:	9308      	str	r3, [sp, #32]
 80115d8:	f108 0801 	add.w	r8, r8, #1
 80115dc:	2301      	movs	r3, #1
 80115de:	930a      	str	r3, [sp, #40]	@ 0x28
 80115e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80115e2:	2b00      	cmp	r3, #0
 80115e4:	f000 81b0 	beq.w	8011948 <_dtoa_r+0xb48>
 80115e8:	6923      	ldr	r3, [r4, #16]
 80115ea:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80115ee:	6918      	ldr	r0, [r3, #16]
 80115f0:	f000 ff08 	bl	8012404 <__hi0bits>
 80115f4:	f1c0 0020 	rsb	r0, r0, #32
 80115f8:	9b08      	ldr	r3, [sp, #32]
 80115fa:	4418      	add	r0, r3
 80115fc:	f010 001f 	ands.w	r0, r0, #31
 8011600:	d077      	beq.n	80116f2 <_dtoa_r+0x8f2>
 8011602:	f1c0 0320 	rsb	r3, r0, #32
 8011606:	2b04      	cmp	r3, #4
 8011608:	dd6b      	ble.n	80116e2 <_dtoa_r+0x8e2>
 801160a:	9b08      	ldr	r3, [sp, #32]
 801160c:	f1c0 001c 	rsb	r0, r0, #28
 8011610:	4403      	add	r3, r0
 8011612:	4480      	add	r8, r0
 8011614:	4406      	add	r6, r0
 8011616:	9308      	str	r3, [sp, #32]
 8011618:	f1b8 0f00 	cmp.w	r8, #0
 801161c:	dd05      	ble.n	801162a <_dtoa_r+0x82a>
 801161e:	4649      	mov	r1, r9
 8011620:	4642      	mov	r2, r8
 8011622:	4658      	mov	r0, fp
 8011624:	f001 f854 	bl	80126d0 <__lshift>
 8011628:	4681      	mov	r9, r0
 801162a:	9b08      	ldr	r3, [sp, #32]
 801162c:	2b00      	cmp	r3, #0
 801162e:	dd05      	ble.n	801163c <_dtoa_r+0x83c>
 8011630:	4621      	mov	r1, r4
 8011632:	461a      	mov	r2, r3
 8011634:	4658      	mov	r0, fp
 8011636:	f001 f84b 	bl	80126d0 <__lshift>
 801163a:	4604      	mov	r4, r0
 801163c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801163e:	2b00      	cmp	r3, #0
 8011640:	d059      	beq.n	80116f6 <_dtoa_r+0x8f6>
 8011642:	4621      	mov	r1, r4
 8011644:	4648      	mov	r0, r9
 8011646:	f001 f8af 	bl	80127a8 <__mcmp>
 801164a:	2800      	cmp	r0, #0
 801164c:	da53      	bge.n	80116f6 <_dtoa_r+0x8f6>
 801164e:	1e7b      	subs	r3, r7, #1
 8011650:	9304      	str	r3, [sp, #16]
 8011652:	4649      	mov	r1, r9
 8011654:	2300      	movs	r3, #0
 8011656:	220a      	movs	r2, #10
 8011658:	4658      	mov	r0, fp
 801165a:	f000 fe43 	bl	80122e4 <__multadd>
 801165e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011660:	4681      	mov	r9, r0
 8011662:	2b00      	cmp	r3, #0
 8011664:	f000 8172 	beq.w	801194c <_dtoa_r+0xb4c>
 8011668:	2300      	movs	r3, #0
 801166a:	4629      	mov	r1, r5
 801166c:	220a      	movs	r2, #10
 801166e:	4658      	mov	r0, fp
 8011670:	f000 fe38 	bl	80122e4 <__multadd>
 8011674:	9b00      	ldr	r3, [sp, #0]
 8011676:	2b00      	cmp	r3, #0
 8011678:	4605      	mov	r5, r0
 801167a:	dc67      	bgt.n	801174c <_dtoa_r+0x94c>
 801167c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801167e:	2b02      	cmp	r3, #2
 8011680:	dc41      	bgt.n	8011706 <_dtoa_r+0x906>
 8011682:	e063      	b.n	801174c <_dtoa_r+0x94c>
 8011684:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8011686:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801168a:	e746      	b.n	801151a <_dtoa_r+0x71a>
 801168c:	9b07      	ldr	r3, [sp, #28]
 801168e:	1e5c      	subs	r4, r3, #1
 8011690:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011692:	42a3      	cmp	r3, r4
 8011694:	bfbf      	itttt	lt
 8011696:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8011698:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801169a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801169c:	1ae3      	sublt	r3, r4, r3
 801169e:	bfb4      	ite	lt
 80116a0:	18d2      	addlt	r2, r2, r3
 80116a2:	1b1c      	subge	r4, r3, r4
 80116a4:	9b07      	ldr	r3, [sp, #28]
 80116a6:	bfbc      	itt	lt
 80116a8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80116aa:	2400      	movlt	r4, #0
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	bfb5      	itete	lt
 80116b0:	eba8 0603 	sublt.w	r6, r8, r3
 80116b4:	9b07      	ldrge	r3, [sp, #28]
 80116b6:	2300      	movlt	r3, #0
 80116b8:	4646      	movge	r6, r8
 80116ba:	e730      	b.n	801151e <_dtoa_r+0x71e>
 80116bc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80116be:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80116c0:	4646      	mov	r6, r8
 80116c2:	e735      	b.n	8011530 <_dtoa_r+0x730>
 80116c4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80116c6:	e75c      	b.n	8011582 <_dtoa_r+0x782>
 80116c8:	2300      	movs	r3, #0
 80116ca:	e788      	b.n	80115de <_dtoa_r+0x7de>
 80116cc:	3fe00000 	.word	0x3fe00000
 80116d0:	40240000 	.word	0x40240000
 80116d4:	40140000 	.word	0x40140000
 80116d8:	9b02      	ldr	r3, [sp, #8]
 80116da:	e780      	b.n	80115de <_dtoa_r+0x7de>
 80116dc:	2300      	movs	r3, #0
 80116de:	930a      	str	r3, [sp, #40]	@ 0x28
 80116e0:	e782      	b.n	80115e8 <_dtoa_r+0x7e8>
 80116e2:	d099      	beq.n	8011618 <_dtoa_r+0x818>
 80116e4:	9a08      	ldr	r2, [sp, #32]
 80116e6:	331c      	adds	r3, #28
 80116e8:	441a      	add	r2, r3
 80116ea:	4498      	add	r8, r3
 80116ec:	441e      	add	r6, r3
 80116ee:	9208      	str	r2, [sp, #32]
 80116f0:	e792      	b.n	8011618 <_dtoa_r+0x818>
 80116f2:	4603      	mov	r3, r0
 80116f4:	e7f6      	b.n	80116e4 <_dtoa_r+0x8e4>
 80116f6:	9b07      	ldr	r3, [sp, #28]
 80116f8:	9704      	str	r7, [sp, #16]
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	dc20      	bgt.n	8011740 <_dtoa_r+0x940>
 80116fe:	9300      	str	r3, [sp, #0]
 8011700:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011702:	2b02      	cmp	r3, #2
 8011704:	dd1e      	ble.n	8011744 <_dtoa_r+0x944>
 8011706:	9b00      	ldr	r3, [sp, #0]
 8011708:	2b00      	cmp	r3, #0
 801170a:	f47f aec0 	bne.w	801148e <_dtoa_r+0x68e>
 801170e:	4621      	mov	r1, r4
 8011710:	2205      	movs	r2, #5
 8011712:	4658      	mov	r0, fp
 8011714:	f000 fde6 	bl	80122e4 <__multadd>
 8011718:	4601      	mov	r1, r0
 801171a:	4604      	mov	r4, r0
 801171c:	4648      	mov	r0, r9
 801171e:	f001 f843 	bl	80127a8 <__mcmp>
 8011722:	2800      	cmp	r0, #0
 8011724:	f77f aeb3 	ble.w	801148e <_dtoa_r+0x68e>
 8011728:	4656      	mov	r6, sl
 801172a:	2331      	movs	r3, #49	@ 0x31
 801172c:	f806 3b01 	strb.w	r3, [r6], #1
 8011730:	9b04      	ldr	r3, [sp, #16]
 8011732:	3301      	adds	r3, #1
 8011734:	9304      	str	r3, [sp, #16]
 8011736:	e6ae      	b.n	8011496 <_dtoa_r+0x696>
 8011738:	9c07      	ldr	r4, [sp, #28]
 801173a:	9704      	str	r7, [sp, #16]
 801173c:	4625      	mov	r5, r4
 801173e:	e7f3      	b.n	8011728 <_dtoa_r+0x928>
 8011740:	9b07      	ldr	r3, [sp, #28]
 8011742:	9300      	str	r3, [sp, #0]
 8011744:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011746:	2b00      	cmp	r3, #0
 8011748:	f000 8104 	beq.w	8011954 <_dtoa_r+0xb54>
 801174c:	2e00      	cmp	r6, #0
 801174e:	dd05      	ble.n	801175c <_dtoa_r+0x95c>
 8011750:	4629      	mov	r1, r5
 8011752:	4632      	mov	r2, r6
 8011754:	4658      	mov	r0, fp
 8011756:	f000 ffbb 	bl	80126d0 <__lshift>
 801175a:	4605      	mov	r5, r0
 801175c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801175e:	2b00      	cmp	r3, #0
 8011760:	d05a      	beq.n	8011818 <_dtoa_r+0xa18>
 8011762:	6869      	ldr	r1, [r5, #4]
 8011764:	4658      	mov	r0, fp
 8011766:	f000 fd5b 	bl	8012220 <_Balloc>
 801176a:	4606      	mov	r6, r0
 801176c:	b928      	cbnz	r0, 801177a <_dtoa_r+0x97a>
 801176e:	4b84      	ldr	r3, [pc, #528]	@ (8011980 <_dtoa_r+0xb80>)
 8011770:	4602      	mov	r2, r0
 8011772:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8011776:	f7ff bb5a 	b.w	8010e2e <_dtoa_r+0x2e>
 801177a:	692a      	ldr	r2, [r5, #16]
 801177c:	3202      	adds	r2, #2
 801177e:	0092      	lsls	r2, r2, #2
 8011780:	f105 010c 	add.w	r1, r5, #12
 8011784:	300c      	adds	r0, #12
 8011786:	f7ff fa94 	bl	8010cb2 <memcpy>
 801178a:	2201      	movs	r2, #1
 801178c:	4631      	mov	r1, r6
 801178e:	4658      	mov	r0, fp
 8011790:	f000 ff9e 	bl	80126d0 <__lshift>
 8011794:	f10a 0301 	add.w	r3, sl, #1
 8011798:	9307      	str	r3, [sp, #28]
 801179a:	9b00      	ldr	r3, [sp, #0]
 801179c:	4453      	add	r3, sl
 801179e:	930b      	str	r3, [sp, #44]	@ 0x2c
 80117a0:	9b02      	ldr	r3, [sp, #8]
 80117a2:	f003 0301 	and.w	r3, r3, #1
 80117a6:	462f      	mov	r7, r5
 80117a8:	930a      	str	r3, [sp, #40]	@ 0x28
 80117aa:	4605      	mov	r5, r0
 80117ac:	9b07      	ldr	r3, [sp, #28]
 80117ae:	4621      	mov	r1, r4
 80117b0:	3b01      	subs	r3, #1
 80117b2:	4648      	mov	r0, r9
 80117b4:	9300      	str	r3, [sp, #0]
 80117b6:	f7ff fa99 	bl	8010cec <quorem>
 80117ba:	4639      	mov	r1, r7
 80117bc:	9002      	str	r0, [sp, #8]
 80117be:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80117c2:	4648      	mov	r0, r9
 80117c4:	f000 fff0 	bl	80127a8 <__mcmp>
 80117c8:	462a      	mov	r2, r5
 80117ca:	9008      	str	r0, [sp, #32]
 80117cc:	4621      	mov	r1, r4
 80117ce:	4658      	mov	r0, fp
 80117d0:	f001 f806 	bl	80127e0 <__mdiff>
 80117d4:	68c2      	ldr	r2, [r0, #12]
 80117d6:	4606      	mov	r6, r0
 80117d8:	bb02      	cbnz	r2, 801181c <_dtoa_r+0xa1c>
 80117da:	4601      	mov	r1, r0
 80117dc:	4648      	mov	r0, r9
 80117de:	f000 ffe3 	bl	80127a8 <__mcmp>
 80117e2:	4602      	mov	r2, r0
 80117e4:	4631      	mov	r1, r6
 80117e6:	4658      	mov	r0, fp
 80117e8:	920e      	str	r2, [sp, #56]	@ 0x38
 80117ea:	f000 fd59 	bl	80122a0 <_Bfree>
 80117ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80117f0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80117f2:	9e07      	ldr	r6, [sp, #28]
 80117f4:	ea43 0102 	orr.w	r1, r3, r2
 80117f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80117fa:	4319      	orrs	r1, r3
 80117fc:	d110      	bne.n	8011820 <_dtoa_r+0xa20>
 80117fe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8011802:	d029      	beq.n	8011858 <_dtoa_r+0xa58>
 8011804:	9b08      	ldr	r3, [sp, #32]
 8011806:	2b00      	cmp	r3, #0
 8011808:	dd02      	ble.n	8011810 <_dtoa_r+0xa10>
 801180a:	9b02      	ldr	r3, [sp, #8]
 801180c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8011810:	9b00      	ldr	r3, [sp, #0]
 8011812:	f883 8000 	strb.w	r8, [r3]
 8011816:	e63f      	b.n	8011498 <_dtoa_r+0x698>
 8011818:	4628      	mov	r0, r5
 801181a:	e7bb      	b.n	8011794 <_dtoa_r+0x994>
 801181c:	2201      	movs	r2, #1
 801181e:	e7e1      	b.n	80117e4 <_dtoa_r+0x9e4>
 8011820:	9b08      	ldr	r3, [sp, #32]
 8011822:	2b00      	cmp	r3, #0
 8011824:	db04      	blt.n	8011830 <_dtoa_r+0xa30>
 8011826:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011828:	430b      	orrs	r3, r1
 801182a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801182c:	430b      	orrs	r3, r1
 801182e:	d120      	bne.n	8011872 <_dtoa_r+0xa72>
 8011830:	2a00      	cmp	r2, #0
 8011832:	dded      	ble.n	8011810 <_dtoa_r+0xa10>
 8011834:	4649      	mov	r1, r9
 8011836:	2201      	movs	r2, #1
 8011838:	4658      	mov	r0, fp
 801183a:	f000 ff49 	bl	80126d0 <__lshift>
 801183e:	4621      	mov	r1, r4
 8011840:	4681      	mov	r9, r0
 8011842:	f000 ffb1 	bl	80127a8 <__mcmp>
 8011846:	2800      	cmp	r0, #0
 8011848:	dc03      	bgt.n	8011852 <_dtoa_r+0xa52>
 801184a:	d1e1      	bne.n	8011810 <_dtoa_r+0xa10>
 801184c:	f018 0f01 	tst.w	r8, #1
 8011850:	d0de      	beq.n	8011810 <_dtoa_r+0xa10>
 8011852:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8011856:	d1d8      	bne.n	801180a <_dtoa_r+0xa0a>
 8011858:	9a00      	ldr	r2, [sp, #0]
 801185a:	2339      	movs	r3, #57	@ 0x39
 801185c:	7013      	strb	r3, [r2, #0]
 801185e:	4633      	mov	r3, r6
 8011860:	461e      	mov	r6, r3
 8011862:	3b01      	subs	r3, #1
 8011864:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8011868:	2a39      	cmp	r2, #57	@ 0x39
 801186a:	d052      	beq.n	8011912 <_dtoa_r+0xb12>
 801186c:	3201      	adds	r2, #1
 801186e:	701a      	strb	r2, [r3, #0]
 8011870:	e612      	b.n	8011498 <_dtoa_r+0x698>
 8011872:	2a00      	cmp	r2, #0
 8011874:	dd07      	ble.n	8011886 <_dtoa_r+0xa86>
 8011876:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801187a:	d0ed      	beq.n	8011858 <_dtoa_r+0xa58>
 801187c:	9a00      	ldr	r2, [sp, #0]
 801187e:	f108 0301 	add.w	r3, r8, #1
 8011882:	7013      	strb	r3, [r2, #0]
 8011884:	e608      	b.n	8011498 <_dtoa_r+0x698>
 8011886:	9b07      	ldr	r3, [sp, #28]
 8011888:	9a07      	ldr	r2, [sp, #28]
 801188a:	f803 8c01 	strb.w	r8, [r3, #-1]
 801188e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011890:	4293      	cmp	r3, r2
 8011892:	d028      	beq.n	80118e6 <_dtoa_r+0xae6>
 8011894:	4649      	mov	r1, r9
 8011896:	2300      	movs	r3, #0
 8011898:	220a      	movs	r2, #10
 801189a:	4658      	mov	r0, fp
 801189c:	f000 fd22 	bl	80122e4 <__multadd>
 80118a0:	42af      	cmp	r7, r5
 80118a2:	4681      	mov	r9, r0
 80118a4:	f04f 0300 	mov.w	r3, #0
 80118a8:	f04f 020a 	mov.w	r2, #10
 80118ac:	4639      	mov	r1, r7
 80118ae:	4658      	mov	r0, fp
 80118b0:	d107      	bne.n	80118c2 <_dtoa_r+0xac2>
 80118b2:	f000 fd17 	bl	80122e4 <__multadd>
 80118b6:	4607      	mov	r7, r0
 80118b8:	4605      	mov	r5, r0
 80118ba:	9b07      	ldr	r3, [sp, #28]
 80118bc:	3301      	adds	r3, #1
 80118be:	9307      	str	r3, [sp, #28]
 80118c0:	e774      	b.n	80117ac <_dtoa_r+0x9ac>
 80118c2:	f000 fd0f 	bl	80122e4 <__multadd>
 80118c6:	4629      	mov	r1, r5
 80118c8:	4607      	mov	r7, r0
 80118ca:	2300      	movs	r3, #0
 80118cc:	220a      	movs	r2, #10
 80118ce:	4658      	mov	r0, fp
 80118d0:	f000 fd08 	bl	80122e4 <__multadd>
 80118d4:	4605      	mov	r5, r0
 80118d6:	e7f0      	b.n	80118ba <_dtoa_r+0xaba>
 80118d8:	9b00      	ldr	r3, [sp, #0]
 80118da:	2b00      	cmp	r3, #0
 80118dc:	bfcc      	ite	gt
 80118de:	461e      	movgt	r6, r3
 80118e0:	2601      	movle	r6, #1
 80118e2:	4456      	add	r6, sl
 80118e4:	2700      	movs	r7, #0
 80118e6:	4649      	mov	r1, r9
 80118e8:	2201      	movs	r2, #1
 80118ea:	4658      	mov	r0, fp
 80118ec:	f000 fef0 	bl	80126d0 <__lshift>
 80118f0:	4621      	mov	r1, r4
 80118f2:	4681      	mov	r9, r0
 80118f4:	f000 ff58 	bl	80127a8 <__mcmp>
 80118f8:	2800      	cmp	r0, #0
 80118fa:	dcb0      	bgt.n	801185e <_dtoa_r+0xa5e>
 80118fc:	d102      	bne.n	8011904 <_dtoa_r+0xb04>
 80118fe:	f018 0f01 	tst.w	r8, #1
 8011902:	d1ac      	bne.n	801185e <_dtoa_r+0xa5e>
 8011904:	4633      	mov	r3, r6
 8011906:	461e      	mov	r6, r3
 8011908:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801190c:	2a30      	cmp	r2, #48	@ 0x30
 801190e:	d0fa      	beq.n	8011906 <_dtoa_r+0xb06>
 8011910:	e5c2      	b.n	8011498 <_dtoa_r+0x698>
 8011912:	459a      	cmp	sl, r3
 8011914:	d1a4      	bne.n	8011860 <_dtoa_r+0xa60>
 8011916:	9b04      	ldr	r3, [sp, #16]
 8011918:	3301      	adds	r3, #1
 801191a:	9304      	str	r3, [sp, #16]
 801191c:	2331      	movs	r3, #49	@ 0x31
 801191e:	f88a 3000 	strb.w	r3, [sl]
 8011922:	e5b9      	b.n	8011498 <_dtoa_r+0x698>
 8011924:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011926:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8011984 <_dtoa_r+0xb84>
 801192a:	b11b      	cbz	r3, 8011934 <_dtoa_r+0xb34>
 801192c:	f10a 0308 	add.w	r3, sl, #8
 8011930:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8011932:	6013      	str	r3, [r2, #0]
 8011934:	4650      	mov	r0, sl
 8011936:	b019      	add	sp, #100	@ 0x64
 8011938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801193c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801193e:	2b01      	cmp	r3, #1
 8011940:	f77f ae37 	ble.w	80115b2 <_dtoa_r+0x7b2>
 8011944:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011946:	930a      	str	r3, [sp, #40]	@ 0x28
 8011948:	2001      	movs	r0, #1
 801194a:	e655      	b.n	80115f8 <_dtoa_r+0x7f8>
 801194c:	9b00      	ldr	r3, [sp, #0]
 801194e:	2b00      	cmp	r3, #0
 8011950:	f77f aed6 	ble.w	8011700 <_dtoa_r+0x900>
 8011954:	4656      	mov	r6, sl
 8011956:	4621      	mov	r1, r4
 8011958:	4648      	mov	r0, r9
 801195a:	f7ff f9c7 	bl	8010cec <quorem>
 801195e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8011962:	f806 8b01 	strb.w	r8, [r6], #1
 8011966:	9b00      	ldr	r3, [sp, #0]
 8011968:	eba6 020a 	sub.w	r2, r6, sl
 801196c:	4293      	cmp	r3, r2
 801196e:	ddb3      	ble.n	80118d8 <_dtoa_r+0xad8>
 8011970:	4649      	mov	r1, r9
 8011972:	2300      	movs	r3, #0
 8011974:	220a      	movs	r2, #10
 8011976:	4658      	mov	r0, fp
 8011978:	f000 fcb4 	bl	80122e4 <__multadd>
 801197c:	4681      	mov	r9, r0
 801197e:	e7ea      	b.n	8011956 <_dtoa_r+0xb56>
 8011980:	08013c2d 	.word	0x08013c2d
 8011984:	08013bb1 	.word	0x08013bb1

08011988 <_free_r>:
 8011988:	b538      	push	{r3, r4, r5, lr}
 801198a:	4605      	mov	r5, r0
 801198c:	2900      	cmp	r1, #0
 801198e:	d041      	beq.n	8011a14 <_free_r+0x8c>
 8011990:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011994:	1f0c      	subs	r4, r1, #4
 8011996:	2b00      	cmp	r3, #0
 8011998:	bfb8      	it	lt
 801199a:	18e4      	addlt	r4, r4, r3
 801199c:	f000 fc34 	bl	8012208 <__malloc_lock>
 80119a0:	4a1d      	ldr	r2, [pc, #116]	@ (8011a18 <_free_r+0x90>)
 80119a2:	6813      	ldr	r3, [r2, #0]
 80119a4:	b933      	cbnz	r3, 80119b4 <_free_r+0x2c>
 80119a6:	6063      	str	r3, [r4, #4]
 80119a8:	6014      	str	r4, [r2, #0]
 80119aa:	4628      	mov	r0, r5
 80119ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80119b0:	f000 bc30 	b.w	8012214 <__malloc_unlock>
 80119b4:	42a3      	cmp	r3, r4
 80119b6:	d908      	bls.n	80119ca <_free_r+0x42>
 80119b8:	6820      	ldr	r0, [r4, #0]
 80119ba:	1821      	adds	r1, r4, r0
 80119bc:	428b      	cmp	r3, r1
 80119be:	bf01      	itttt	eq
 80119c0:	6819      	ldreq	r1, [r3, #0]
 80119c2:	685b      	ldreq	r3, [r3, #4]
 80119c4:	1809      	addeq	r1, r1, r0
 80119c6:	6021      	streq	r1, [r4, #0]
 80119c8:	e7ed      	b.n	80119a6 <_free_r+0x1e>
 80119ca:	461a      	mov	r2, r3
 80119cc:	685b      	ldr	r3, [r3, #4]
 80119ce:	b10b      	cbz	r3, 80119d4 <_free_r+0x4c>
 80119d0:	42a3      	cmp	r3, r4
 80119d2:	d9fa      	bls.n	80119ca <_free_r+0x42>
 80119d4:	6811      	ldr	r1, [r2, #0]
 80119d6:	1850      	adds	r0, r2, r1
 80119d8:	42a0      	cmp	r0, r4
 80119da:	d10b      	bne.n	80119f4 <_free_r+0x6c>
 80119dc:	6820      	ldr	r0, [r4, #0]
 80119de:	4401      	add	r1, r0
 80119e0:	1850      	adds	r0, r2, r1
 80119e2:	4283      	cmp	r3, r0
 80119e4:	6011      	str	r1, [r2, #0]
 80119e6:	d1e0      	bne.n	80119aa <_free_r+0x22>
 80119e8:	6818      	ldr	r0, [r3, #0]
 80119ea:	685b      	ldr	r3, [r3, #4]
 80119ec:	6053      	str	r3, [r2, #4]
 80119ee:	4408      	add	r0, r1
 80119f0:	6010      	str	r0, [r2, #0]
 80119f2:	e7da      	b.n	80119aa <_free_r+0x22>
 80119f4:	d902      	bls.n	80119fc <_free_r+0x74>
 80119f6:	230c      	movs	r3, #12
 80119f8:	602b      	str	r3, [r5, #0]
 80119fa:	e7d6      	b.n	80119aa <_free_r+0x22>
 80119fc:	6820      	ldr	r0, [r4, #0]
 80119fe:	1821      	adds	r1, r4, r0
 8011a00:	428b      	cmp	r3, r1
 8011a02:	bf04      	itt	eq
 8011a04:	6819      	ldreq	r1, [r3, #0]
 8011a06:	685b      	ldreq	r3, [r3, #4]
 8011a08:	6063      	str	r3, [r4, #4]
 8011a0a:	bf04      	itt	eq
 8011a0c:	1809      	addeq	r1, r1, r0
 8011a0e:	6021      	streq	r1, [r4, #0]
 8011a10:	6054      	str	r4, [r2, #4]
 8011a12:	e7ca      	b.n	80119aa <_free_r+0x22>
 8011a14:	bd38      	pop	{r3, r4, r5, pc}
 8011a16:	bf00      	nop
 8011a18:	20000b34 	.word	0x20000b34

08011a1c <rshift>:
 8011a1c:	6903      	ldr	r3, [r0, #16]
 8011a1e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8011a22:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011a26:	ea4f 1261 	mov.w	r2, r1, asr #5
 8011a2a:	f100 0414 	add.w	r4, r0, #20
 8011a2e:	dd45      	ble.n	8011abc <rshift+0xa0>
 8011a30:	f011 011f 	ands.w	r1, r1, #31
 8011a34:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8011a38:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8011a3c:	d10c      	bne.n	8011a58 <rshift+0x3c>
 8011a3e:	f100 0710 	add.w	r7, r0, #16
 8011a42:	4629      	mov	r1, r5
 8011a44:	42b1      	cmp	r1, r6
 8011a46:	d334      	bcc.n	8011ab2 <rshift+0x96>
 8011a48:	1a9b      	subs	r3, r3, r2
 8011a4a:	009b      	lsls	r3, r3, #2
 8011a4c:	1eea      	subs	r2, r5, #3
 8011a4e:	4296      	cmp	r6, r2
 8011a50:	bf38      	it	cc
 8011a52:	2300      	movcc	r3, #0
 8011a54:	4423      	add	r3, r4
 8011a56:	e015      	b.n	8011a84 <rshift+0x68>
 8011a58:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8011a5c:	f1c1 0820 	rsb	r8, r1, #32
 8011a60:	40cf      	lsrs	r7, r1
 8011a62:	f105 0e04 	add.w	lr, r5, #4
 8011a66:	46a1      	mov	r9, r4
 8011a68:	4576      	cmp	r6, lr
 8011a6a:	46f4      	mov	ip, lr
 8011a6c:	d815      	bhi.n	8011a9a <rshift+0x7e>
 8011a6e:	1a9a      	subs	r2, r3, r2
 8011a70:	0092      	lsls	r2, r2, #2
 8011a72:	3a04      	subs	r2, #4
 8011a74:	3501      	adds	r5, #1
 8011a76:	42ae      	cmp	r6, r5
 8011a78:	bf38      	it	cc
 8011a7a:	2200      	movcc	r2, #0
 8011a7c:	18a3      	adds	r3, r4, r2
 8011a7e:	50a7      	str	r7, [r4, r2]
 8011a80:	b107      	cbz	r7, 8011a84 <rshift+0x68>
 8011a82:	3304      	adds	r3, #4
 8011a84:	1b1a      	subs	r2, r3, r4
 8011a86:	42a3      	cmp	r3, r4
 8011a88:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8011a8c:	bf08      	it	eq
 8011a8e:	2300      	moveq	r3, #0
 8011a90:	6102      	str	r2, [r0, #16]
 8011a92:	bf08      	it	eq
 8011a94:	6143      	streq	r3, [r0, #20]
 8011a96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011a9a:	f8dc c000 	ldr.w	ip, [ip]
 8011a9e:	fa0c fc08 	lsl.w	ip, ip, r8
 8011aa2:	ea4c 0707 	orr.w	r7, ip, r7
 8011aa6:	f849 7b04 	str.w	r7, [r9], #4
 8011aaa:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011aae:	40cf      	lsrs	r7, r1
 8011ab0:	e7da      	b.n	8011a68 <rshift+0x4c>
 8011ab2:	f851 cb04 	ldr.w	ip, [r1], #4
 8011ab6:	f847 cf04 	str.w	ip, [r7, #4]!
 8011aba:	e7c3      	b.n	8011a44 <rshift+0x28>
 8011abc:	4623      	mov	r3, r4
 8011abe:	e7e1      	b.n	8011a84 <rshift+0x68>

08011ac0 <__hexdig_fun>:
 8011ac0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8011ac4:	2b09      	cmp	r3, #9
 8011ac6:	d802      	bhi.n	8011ace <__hexdig_fun+0xe>
 8011ac8:	3820      	subs	r0, #32
 8011aca:	b2c0      	uxtb	r0, r0
 8011acc:	4770      	bx	lr
 8011ace:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8011ad2:	2b05      	cmp	r3, #5
 8011ad4:	d801      	bhi.n	8011ada <__hexdig_fun+0x1a>
 8011ad6:	3847      	subs	r0, #71	@ 0x47
 8011ad8:	e7f7      	b.n	8011aca <__hexdig_fun+0xa>
 8011ada:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8011ade:	2b05      	cmp	r3, #5
 8011ae0:	d801      	bhi.n	8011ae6 <__hexdig_fun+0x26>
 8011ae2:	3827      	subs	r0, #39	@ 0x27
 8011ae4:	e7f1      	b.n	8011aca <__hexdig_fun+0xa>
 8011ae6:	2000      	movs	r0, #0
 8011ae8:	4770      	bx	lr
	...

08011aec <__gethex>:
 8011aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011af0:	b085      	sub	sp, #20
 8011af2:	468a      	mov	sl, r1
 8011af4:	9302      	str	r3, [sp, #8]
 8011af6:	680b      	ldr	r3, [r1, #0]
 8011af8:	9001      	str	r0, [sp, #4]
 8011afa:	4690      	mov	r8, r2
 8011afc:	1c9c      	adds	r4, r3, #2
 8011afe:	46a1      	mov	r9, r4
 8011b00:	f814 0b01 	ldrb.w	r0, [r4], #1
 8011b04:	2830      	cmp	r0, #48	@ 0x30
 8011b06:	d0fa      	beq.n	8011afe <__gethex+0x12>
 8011b08:	eba9 0303 	sub.w	r3, r9, r3
 8011b0c:	f1a3 0b02 	sub.w	fp, r3, #2
 8011b10:	f7ff ffd6 	bl	8011ac0 <__hexdig_fun>
 8011b14:	4605      	mov	r5, r0
 8011b16:	2800      	cmp	r0, #0
 8011b18:	d168      	bne.n	8011bec <__gethex+0x100>
 8011b1a:	49a0      	ldr	r1, [pc, #640]	@ (8011d9c <__gethex+0x2b0>)
 8011b1c:	2201      	movs	r2, #1
 8011b1e:	4648      	mov	r0, r9
 8011b20:	f7ff f83e 	bl	8010ba0 <strncmp>
 8011b24:	4607      	mov	r7, r0
 8011b26:	2800      	cmp	r0, #0
 8011b28:	d167      	bne.n	8011bfa <__gethex+0x10e>
 8011b2a:	f899 0001 	ldrb.w	r0, [r9, #1]
 8011b2e:	4626      	mov	r6, r4
 8011b30:	f7ff ffc6 	bl	8011ac0 <__hexdig_fun>
 8011b34:	2800      	cmp	r0, #0
 8011b36:	d062      	beq.n	8011bfe <__gethex+0x112>
 8011b38:	4623      	mov	r3, r4
 8011b3a:	7818      	ldrb	r0, [r3, #0]
 8011b3c:	2830      	cmp	r0, #48	@ 0x30
 8011b3e:	4699      	mov	r9, r3
 8011b40:	f103 0301 	add.w	r3, r3, #1
 8011b44:	d0f9      	beq.n	8011b3a <__gethex+0x4e>
 8011b46:	f7ff ffbb 	bl	8011ac0 <__hexdig_fun>
 8011b4a:	fab0 f580 	clz	r5, r0
 8011b4e:	096d      	lsrs	r5, r5, #5
 8011b50:	f04f 0b01 	mov.w	fp, #1
 8011b54:	464a      	mov	r2, r9
 8011b56:	4616      	mov	r6, r2
 8011b58:	3201      	adds	r2, #1
 8011b5a:	7830      	ldrb	r0, [r6, #0]
 8011b5c:	f7ff ffb0 	bl	8011ac0 <__hexdig_fun>
 8011b60:	2800      	cmp	r0, #0
 8011b62:	d1f8      	bne.n	8011b56 <__gethex+0x6a>
 8011b64:	498d      	ldr	r1, [pc, #564]	@ (8011d9c <__gethex+0x2b0>)
 8011b66:	2201      	movs	r2, #1
 8011b68:	4630      	mov	r0, r6
 8011b6a:	f7ff f819 	bl	8010ba0 <strncmp>
 8011b6e:	2800      	cmp	r0, #0
 8011b70:	d13f      	bne.n	8011bf2 <__gethex+0x106>
 8011b72:	b944      	cbnz	r4, 8011b86 <__gethex+0x9a>
 8011b74:	1c74      	adds	r4, r6, #1
 8011b76:	4622      	mov	r2, r4
 8011b78:	4616      	mov	r6, r2
 8011b7a:	3201      	adds	r2, #1
 8011b7c:	7830      	ldrb	r0, [r6, #0]
 8011b7e:	f7ff ff9f 	bl	8011ac0 <__hexdig_fun>
 8011b82:	2800      	cmp	r0, #0
 8011b84:	d1f8      	bne.n	8011b78 <__gethex+0x8c>
 8011b86:	1ba4      	subs	r4, r4, r6
 8011b88:	00a7      	lsls	r7, r4, #2
 8011b8a:	7833      	ldrb	r3, [r6, #0]
 8011b8c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8011b90:	2b50      	cmp	r3, #80	@ 0x50
 8011b92:	d13e      	bne.n	8011c12 <__gethex+0x126>
 8011b94:	7873      	ldrb	r3, [r6, #1]
 8011b96:	2b2b      	cmp	r3, #43	@ 0x2b
 8011b98:	d033      	beq.n	8011c02 <__gethex+0x116>
 8011b9a:	2b2d      	cmp	r3, #45	@ 0x2d
 8011b9c:	d034      	beq.n	8011c08 <__gethex+0x11c>
 8011b9e:	1c71      	adds	r1, r6, #1
 8011ba0:	2400      	movs	r4, #0
 8011ba2:	7808      	ldrb	r0, [r1, #0]
 8011ba4:	f7ff ff8c 	bl	8011ac0 <__hexdig_fun>
 8011ba8:	1e43      	subs	r3, r0, #1
 8011baa:	b2db      	uxtb	r3, r3
 8011bac:	2b18      	cmp	r3, #24
 8011bae:	d830      	bhi.n	8011c12 <__gethex+0x126>
 8011bb0:	f1a0 0210 	sub.w	r2, r0, #16
 8011bb4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011bb8:	f7ff ff82 	bl	8011ac0 <__hexdig_fun>
 8011bbc:	f100 3cff 	add.w	ip, r0, #4294967295
 8011bc0:	fa5f fc8c 	uxtb.w	ip, ip
 8011bc4:	f1bc 0f18 	cmp.w	ip, #24
 8011bc8:	f04f 030a 	mov.w	r3, #10
 8011bcc:	d91e      	bls.n	8011c0c <__gethex+0x120>
 8011bce:	b104      	cbz	r4, 8011bd2 <__gethex+0xe6>
 8011bd0:	4252      	negs	r2, r2
 8011bd2:	4417      	add	r7, r2
 8011bd4:	f8ca 1000 	str.w	r1, [sl]
 8011bd8:	b1ed      	cbz	r5, 8011c16 <__gethex+0x12a>
 8011bda:	f1bb 0f00 	cmp.w	fp, #0
 8011bde:	bf0c      	ite	eq
 8011be0:	2506      	moveq	r5, #6
 8011be2:	2500      	movne	r5, #0
 8011be4:	4628      	mov	r0, r5
 8011be6:	b005      	add	sp, #20
 8011be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011bec:	2500      	movs	r5, #0
 8011bee:	462c      	mov	r4, r5
 8011bf0:	e7b0      	b.n	8011b54 <__gethex+0x68>
 8011bf2:	2c00      	cmp	r4, #0
 8011bf4:	d1c7      	bne.n	8011b86 <__gethex+0x9a>
 8011bf6:	4627      	mov	r7, r4
 8011bf8:	e7c7      	b.n	8011b8a <__gethex+0x9e>
 8011bfa:	464e      	mov	r6, r9
 8011bfc:	462f      	mov	r7, r5
 8011bfe:	2501      	movs	r5, #1
 8011c00:	e7c3      	b.n	8011b8a <__gethex+0x9e>
 8011c02:	2400      	movs	r4, #0
 8011c04:	1cb1      	adds	r1, r6, #2
 8011c06:	e7cc      	b.n	8011ba2 <__gethex+0xb6>
 8011c08:	2401      	movs	r4, #1
 8011c0a:	e7fb      	b.n	8011c04 <__gethex+0x118>
 8011c0c:	fb03 0002 	mla	r0, r3, r2, r0
 8011c10:	e7ce      	b.n	8011bb0 <__gethex+0xc4>
 8011c12:	4631      	mov	r1, r6
 8011c14:	e7de      	b.n	8011bd4 <__gethex+0xe8>
 8011c16:	eba6 0309 	sub.w	r3, r6, r9
 8011c1a:	3b01      	subs	r3, #1
 8011c1c:	4629      	mov	r1, r5
 8011c1e:	2b07      	cmp	r3, #7
 8011c20:	dc0a      	bgt.n	8011c38 <__gethex+0x14c>
 8011c22:	9801      	ldr	r0, [sp, #4]
 8011c24:	f000 fafc 	bl	8012220 <_Balloc>
 8011c28:	4604      	mov	r4, r0
 8011c2a:	b940      	cbnz	r0, 8011c3e <__gethex+0x152>
 8011c2c:	4b5c      	ldr	r3, [pc, #368]	@ (8011da0 <__gethex+0x2b4>)
 8011c2e:	4602      	mov	r2, r0
 8011c30:	21e4      	movs	r1, #228	@ 0xe4
 8011c32:	485c      	ldr	r0, [pc, #368]	@ (8011da4 <__gethex+0x2b8>)
 8011c34:	f001 fa5c 	bl	80130f0 <__assert_func>
 8011c38:	3101      	adds	r1, #1
 8011c3a:	105b      	asrs	r3, r3, #1
 8011c3c:	e7ef      	b.n	8011c1e <__gethex+0x132>
 8011c3e:	f100 0a14 	add.w	sl, r0, #20
 8011c42:	2300      	movs	r3, #0
 8011c44:	4655      	mov	r5, sl
 8011c46:	469b      	mov	fp, r3
 8011c48:	45b1      	cmp	r9, r6
 8011c4a:	d337      	bcc.n	8011cbc <__gethex+0x1d0>
 8011c4c:	f845 bb04 	str.w	fp, [r5], #4
 8011c50:	eba5 050a 	sub.w	r5, r5, sl
 8011c54:	10ad      	asrs	r5, r5, #2
 8011c56:	6125      	str	r5, [r4, #16]
 8011c58:	4658      	mov	r0, fp
 8011c5a:	f000 fbd3 	bl	8012404 <__hi0bits>
 8011c5e:	016d      	lsls	r5, r5, #5
 8011c60:	f8d8 6000 	ldr.w	r6, [r8]
 8011c64:	1a2d      	subs	r5, r5, r0
 8011c66:	42b5      	cmp	r5, r6
 8011c68:	dd54      	ble.n	8011d14 <__gethex+0x228>
 8011c6a:	1bad      	subs	r5, r5, r6
 8011c6c:	4629      	mov	r1, r5
 8011c6e:	4620      	mov	r0, r4
 8011c70:	f000 ff67 	bl	8012b42 <__any_on>
 8011c74:	4681      	mov	r9, r0
 8011c76:	b178      	cbz	r0, 8011c98 <__gethex+0x1ac>
 8011c78:	1e6b      	subs	r3, r5, #1
 8011c7a:	1159      	asrs	r1, r3, #5
 8011c7c:	f003 021f 	and.w	r2, r3, #31
 8011c80:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8011c84:	f04f 0901 	mov.w	r9, #1
 8011c88:	fa09 f202 	lsl.w	r2, r9, r2
 8011c8c:	420a      	tst	r2, r1
 8011c8e:	d003      	beq.n	8011c98 <__gethex+0x1ac>
 8011c90:	454b      	cmp	r3, r9
 8011c92:	dc36      	bgt.n	8011d02 <__gethex+0x216>
 8011c94:	f04f 0902 	mov.w	r9, #2
 8011c98:	4629      	mov	r1, r5
 8011c9a:	4620      	mov	r0, r4
 8011c9c:	f7ff febe 	bl	8011a1c <rshift>
 8011ca0:	442f      	add	r7, r5
 8011ca2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011ca6:	42bb      	cmp	r3, r7
 8011ca8:	da42      	bge.n	8011d30 <__gethex+0x244>
 8011caa:	9801      	ldr	r0, [sp, #4]
 8011cac:	4621      	mov	r1, r4
 8011cae:	f000 faf7 	bl	80122a0 <_Bfree>
 8011cb2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011cb4:	2300      	movs	r3, #0
 8011cb6:	6013      	str	r3, [r2, #0]
 8011cb8:	25a3      	movs	r5, #163	@ 0xa3
 8011cba:	e793      	b.n	8011be4 <__gethex+0xf8>
 8011cbc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8011cc0:	2a2e      	cmp	r2, #46	@ 0x2e
 8011cc2:	d012      	beq.n	8011cea <__gethex+0x1fe>
 8011cc4:	2b20      	cmp	r3, #32
 8011cc6:	d104      	bne.n	8011cd2 <__gethex+0x1e6>
 8011cc8:	f845 bb04 	str.w	fp, [r5], #4
 8011ccc:	f04f 0b00 	mov.w	fp, #0
 8011cd0:	465b      	mov	r3, fp
 8011cd2:	7830      	ldrb	r0, [r6, #0]
 8011cd4:	9303      	str	r3, [sp, #12]
 8011cd6:	f7ff fef3 	bl	8011ac0 <__hexdig_fun>
 8011cda:	9b03      	ldr	r3, [sp, #12]
 8011cdc:	f000 000f 	and.w	r0, r0, #15
 8011ce0:	4098      	lsls	r0, r3
 8011ce2:	ea4b 0b00 	orr.w	fp, fp, r0
 8011ce6:	3304      	adds	r3, #4
 8011ce8:	e7ae      	b.n	8011c48 <__gethex+0x15c>
 8011cea:	45b1      	cmp	r9, r6
 8011cec:	d8ea      	bhi.n	8011cc4 <__gethex+0x1d8>
 8011cee:	492b      	ldr	r1, [pc, #172]	@ (8011d9c <__gethex+0x2b0>)
 8011cf0:	9303      	str	r3, [sp, #12]
 8011cf2:	2201      	movs	r2, #1
 8011cf4:	4630      	mov	r0, r6
 8011cf6:	f7fe ff53 	bl	8010ba0 <strncmp>
 8011cfa:	9b03      	ldr	r3, [sp, #12]
 8011cfc:	2800      	cmp	r0, #0
 8011cfe:	d1e1      	bne.n	8011cc4 <__gethex+0x1d8>
 8011d00:	e7a2      	b.n	8011c48 <__gethex+0x15c>
 8011d02:	1ea9      	subs	r1, r5, #2
 8011d04:	4620      	mov	r0, r4
 8011d06:	f000 ff1c 	bl	8012b42 <__any_on>
 8011d0a:	2800      	cmp	r0, #0
 8011d0c:	d0c2      	beq.n	8011c94 <__gethex+0x1a8>
 8011d0e:	f04f 0903 	mov.w	r9, #3
 8011d12:	e7c1      	b.n	8011c98 <__gethex+0x1ac>
 8011d14:	da09      	bge.n	8011d2a <__gethex+0x23e>
 8011d16:	1b75      	subs	r5, r6, r5
 8011d18:	4621      	mov	r1, r4
 8011d1a:	9801      	ldr	r0, [sp, #4]
 8011d1c:	462a      	mov	r2, r5
 8011d1e:	f000 fcd7 	bl	80126d0 <__lshift>
 8011d22:	1b7f      	subs	r7, r7, r5
 8011d24:	4604      	mov	r4, r0
 8011d26:	f100 0a14 	add.w	sl, r0, #20
 8011d2a:	f04f 0900 	mov.w	r9, #0
 8011d2e:	e7b8      	b.n	8011ca2 <__gethex+0x1b6>
 8011d30:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8011d34:	42bd      	cmp	r5, r7
 8011d36:	dd6f      	ble.n	8011e18 <__gethex+0x32c>
 8011d38:	1bed      	subs	r5, r5, r7
 8011d3a:	42ae      	cmp	r6, r5
 8011d3c:	dc34      	bgt.n	8011da8 <__gethex+0x2bc>
 8011d3e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011d42:	2b02      	cmp	r3, #2
 8011d44:	d022      	beq.n	8011d8c <__gethex+0x2a0>
 8011d46:	2b03      	cmp	r3, #3
 8011d48:	d024      	beq.n	8011d94 <__gethex+0x2a8>
 8011d4a:	2b01      	cmp	r3, #1
 8011d4c:	d115      	bne.n	8011d7a <__gethex+0x28e>
 8011d4e:	42ae      	cmp	r6, r5
 8011d50:	d113      	bne.n	8011d7a <__gethex+0x28e>
 8011d52:	2e01      	cmp	r6, #1
 8011d54:	d10b      	bne.n	8011d6e <__gethex+0x282>
 8011d56:	9a02      	ldr	r2, [sp, #8]
 8011d58:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011d5c:	6013      	str	r3, [r2, #0]
 8011d5e:	2301      	movs	r3, #1
 8011d60:	6123      	str	r3, [r4, #16]
 8011d62:	f8ca 3000 	str.w	r3, [sl]
 8011d66:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011d68:	2562      	movs	r5, #98	@ 0x62
 8011d6a:	601c      	str	r4, [r3, #0]
 8011d6c:	e73a      	b.n	8011be4 <__gethex+0xf8>
 8011d6e:	1e71      	subs	r1, r6, #1
 8011d70:	4620      	mov	r0, r4
 8011d72:	f000 fee6 	bl	8012b42 <__any_on>
 8011d76:	2800      	cmp	r0, #0
 8011d78:	d1ed      	bne.n	8011d56 <__gethex+0x26a>
 8011d7a:	9801      	ldr	r0, [sp, #4]
 8011d7c:	4621      	mov	r1, r4
 8011d7e:	f000 fa8f 	bl	80122a0 <_Bfree>
 8011d82:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011d84:	2300      	movs	r3, #0
 8011d86:	6013      	str	r3, [r2, #0]
 8011d88:	2550      	movs	r5, #80	@ 0x50
 8011d8a:	e72b      	b.n	8011be4 <__gethex+0xf8>
 8011d8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	d1f3      	bne.n	8011d7a <__gethex+0x28e>
 8011d92:	e7e0      	b.n	8011d56 <__gethex+0x26a>
 8011d94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	d1dd      	bne.n	8011d56 <__gethex+0x26a>
 8011d9a:	e7ee      	b.n	8011d7a <__gethex+0x28e>
 8011d9c:	08013b1c 	.word	0x08013b1c
 8011da0:	08013c2d 	.word	0x08013c2d
 8011da4:	08013c3e 	.word	0x08013c3e
 8011da8:	1e6f      	subs	r7, r5, #1
 8011daa:	f1b9 0f00 	cmp.w	r9, #0
 8011dae:	d130      	bne.n	8011e12 <__gethex+0x326>
 8011db0:	b127      	cbz	r7, 8011dbc <__gethex+0x2d0>
 8011db2:	4639      	mov	r1, r7
 8011db4:	4620      	mov	r0, r4
 8011db6:	f000 fec4 	bl	8012b42 <__any_on>
 8011dba:	4681      	mov	r9, r0
 8011dbc:	117a      	asrs	r2, r7, #5
 8011dbe:	2301      	movs	r3, #1
 8011dc0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8011dc4:	f007 071f 	and.w	r7, r7, #31
 8011dc8:	40bb      	lsls	r3, r7
 8011dca:	4213      	tst	r3, r2
 8011dcc:	4629      	mov	r1, r5
 8011dce:	4620      	mov	r0, r4
 8011dd0:	bf18      	it	ne
 8011dd2:	f049 0902 	orrne.w	r9, r9, #2
 8011dd6:	f7ff fe21 	bl	8011a1c <rshift>
 8011dda:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8011dde:	1b76      	subs	r6, r6, r5
 8011de0:	2502      	movs	r5, #2
 8011de2:	f1b9 0f00 	cmp.w	r9, #0
 8011de6:	d047      	beq.n	8011e78 <__gethex+0x38c>
 8011de8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011dec:	2b02      	cmp	r3, #2
 8011dee:	d015      	beq.n	8011e1c <__gethex+0x330>
 8011df0:	2b03      	cmp	r3, #3
 8011df2:	d017      	beq.n	8011e24 <__gethex+0x338>
 8011df4:	2b01      	cmp	r3, #1
 8011df6:	d109      	bne.n	8011e0c <__gethex+0x320>
 8011df8:	f019 0f02 	tst.w	r9, #2
 8011dfc:	d006      	beq.n	8011e0c <__gethex+0x320>
 8011dfe:	f8da 3000 	ldr.w	r3, [sl]
 8011e02:	ea49 0903 	orr.w	r9, r9, r3
 8011e06:	f019 0f01 	tst.w	r9, #1
 8011e0a:	d10e      	bne.n	8011e2a <__gethex+0x33e>
 8011e0c:	f045 0510 	orr.w	r5, r5, #16
 8011e10:	e032      	b.n	8011e78 <__gethex+0x38c>
 8011e12:	f04f 0901 	mov.w	r9, #1
 8011e16:	e7d1      	b.n	8011dbc <__gethex+0x2d0>
 8011e18:	2501      	movs	r5, #1
 8011e1a:	e7e2      	b.n	8011de2 <__gethex+0x2f6>
 8011e1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011e1e:	f1c3 0301 	rsb	r3, r3, #1
 8011e22:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011e24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	d0f0      	beq.n	8011e0c <__gethex+0x320>
 8011e2a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8011e2e:	f104 0314 	add.w	r3, r4, #20
 8011e32:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8011e36:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8011e3a:	f04f 0c00 	mov.w	ip, #0
 8011e3e:	4618      	mov	r0, r3
 8011e40:	f853 2b04 	ldr.w	r2, [r3], #4
 8011e44:	f1b2 3fff 	cmp.w	r2, #4294967295
 8011e48:	d01b      	beq.n	8011e82 <__gethex+0x396>
 8011e4a:	3201      	adds	r2, #1
 8011e4c:	6002      	str	r2, [r0, #0]
 8011e4e:	2d02      	cmp	r5, #2
 8011e50:	f104 0314 	add.w	r3, r4, #20
 8011e54:	d13c      	bne.n	8011ed0 <__gethex+0x3e4>
 8011e56:	f8d8 2000 	ldr.w	r2, [r8]
 8011e5a:	3a01      	subs	r2, #1
 8011e5c:	42b2      	cmp	r2, r6
 8011e5e:	d109      	bne.n	8011e74 <__gethex+0x388>
 8011e60:	1171      	asrs	r1, r6, #5
 8011e62:	2201      	movs	r2, #1
 8011e64:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011e68:	f006 061f 	and.w	r6, r6, #31
 8011e6c:	fa02 f606 	lsl.w	r6, r2, r6
 8011e70:	421e      	tst	r6, r3
 8011e72:	d13a      	bne.n	8011eea <__gethex+0x3fe>
 8011e74:	f045 0520 	orr.w	r5, r5, #32
 8011e78:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011e7a:	601c      	str	r4, [r3, #0]
 8011e7c:	9b02      	ldr	r3, [sp, #8]
 8011e7e:	601f      	str	r7, [r3, #0]
 8011e80:	e6b0      	b.n	8011be4 <__gethex+0xf8>
 8011e82:	4299      	cmp	r1, r3
 8011e84:	f843 cc04 	str.w	ip, [r3, #-4]
 8011e88:	d8d9      	bhi.n	8011e3e <__gethex+0x352>
 8011e8a:	68a3      	ldr	r3, [r4, #8]
 8011e8c:	459b      	cmp	fp, r3
 8011e8e:	db17      	blt.n	8011ec0 <__gethex+0x3d4>
 8011e90:	6861      	ldr	r1, [r4, #4]
 8011e92:	9801      	ldr	r0, [sp, #4]
 8011e94:	3101      	adds	r1, #1
 8011e96:	f000 f9c3 	bl	8012220 <_Balloc>
 8011e9a:	4681      	mov	r9, r0
 8011e9c:	b918      	cbnz	r0, 8011ea6 <__gethex+0x3ba>
 8011e9e:	4b1a      	ldr	r3, [pc, #104]	@ (8011f08 <__gethex+0x41c>)
 8011ea0:	4602      	mov	r2, r0
 8011ea2:	2184      	movs	r1, #132	@ 0x84
 8011ea4:	e6c5      	b.n	8011c32 <__gethex+0x146>
 8011ea6:	6922      	ldr	r2, [r4, #16]
 8011ea8:	3202      	adds	r2, #2
 8011eaa:	f104 010c 	add.w	r1, r4, #12
 8011eae:	0092      	lsls	r2, r2, #2
 8011eb0:	300c      	adds	r0, #12
 8011eb2:	f7fe fefe 	bl	8010cb2 <memcpy>
 8011eb6:	4621      	mov	r1, r4
 8011eb8:	9801      	ldr	r0, [sp, #4]
 8011eba:	f000 f9f1 	bl	80122a0 <_Bfree>
 8011ebe:	464c      	mov	r4, r9
 8011ec0:	6923      	ldr	r3, [r4, #16]
 8011ec2:	1c5a      	adds	r2, r3, #1
 8011ec4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011ec8:	6122      	str	r2, [r4, #16]
 8011eca:	2201      	movs	r2, #1
 8011ecc:	615a      	str	r2, [r3, #20]
 8011ece:	e7be      	b.n	8011e4e <__gethex+0x362>
 8011ed0:	6922      	ldr	r2, [r4, #16]
 8011ed2:	455a      	cmp	r2, fp
 8011ed4:	dd0b      	ble.n	8011eee <__gethex+0x402>
 8011ed6:	2101      	movs	r1, #1
 8011ed8:	4620      	mov	r0, r4
 8011eda:	f7ff fd9f 	bl	8011a1c <rshift>
 8011ede:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011ee2:	3701      	adds	r7, #1
 8011ee4:	42bb      	cmp	r3, r7
 8011ee6:	f6ff aee0 	blt.w	8011caa <__gethex+0x1be>
 8011eea:	2501      	movs	r5, #1
 8011eec:	e7c2      	b.n	8011e74 <__gethex+0x388>
 8011eee:	f016 061f 	ands.w	r6, r6, #31
 8011ef2:	d0fa      	beq.n	8011eea <__gethex+0x3fe>
 8011ef4:	4453      	add	r3, sl
 8011ef6:	f1c6 0620 	rsb	r6, r6, #32
 8011efa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8011efe:	f000 fa81 	bl	8012404 <__hi0bits>
 8011f02:	42b0      	cmp	r0, r6
 8011f04:	dbe7      	blt.n	8011ed6 <__gethex+0x3ea>
 8011f06:	e7f0      	b.n	8011eea <__gethex+0x3fe>
 8011f08:	08013c2d 	.word	0x08013c2d

08011f0c <L_shift>:
 8011f0c:	f1c2 0208 	rsb	r2, r2, #8
 8011f10:	0092      	lsls	r2, r2, #2
 8011f12:	b570      	push	{r4, r5, r6, lr}
 8011f14:	f1c2 0620 	rsb	r6, r2, #32
 8011f18:	6843      	ldr	r3, [r0, #4]
 8011f1a:	6804      	ldr	r4, [r0, #0]
 8011f1c:	fa03 f506 	lsl.w	r5, r3, r6
 8011f20:	432c      	orrs	r4, r5
 8011f22:	40d3      	lsrs	r3, r2
 8011f24:	6004      	str	r4, [r0, #0]
 8011f26:	f840 3f04 	str.w	r3, [r0, #4]!
 8011f2a:	4288      	cmp	r0, r1
 8011f2c:	d3f4      	bcc.n	8011f18 <L_shift+0xc>
 8011f2e:	bd70      	pop	{r4, r5, r6, pc}

08011f30 <__match>:
 8011f30:	b530      	push	{r4, r5, lr}
 8011f32:	6803      	ldr	r3, [r0, #0]
 8011f34:	3301      	adds	r3, #1
 8011f36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011f3a:	b914      	cbnz	r4, 8011f42 <__match+0x12>
 8011f3c:	6003      	str	r3, [r0, #0]
 8011f3e:	2001      	movs	r0, #1
 8011f40:	bd30      	pop	{r4, r5, pc}
 8011f42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011f46:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8011f4a:	2d19      	cmp	r5, #25
 8011f4c:	bf98      	it	ls
 8011f4e:	3220      	addls	r2, #32
 8011f50:	42a2      	cmp	r2, r4
 8011f52:	d0f0      	beq.n	8011f36 <__match+0x6>
 8011f54:	2000      	movs	r0, #0
 8011f56:	e7f3      	b.n	8011f40 <__match+0x10>

08011f58 <__hexnan>:
 8011f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f5c:	680b      	ldr	r3, [r1, #0]
 8011f5e:	6801      	ldr	r1, [r0, #0]
 8011f60:	115e      	asrs	r6, r3, #5
 8011f62:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011f66:	f013 031f 	ands.w	r3, r3, #31
 8011f6a:	b087      	sub	sp, #28
 8011f6c:	bf18      	it	ne
 8011f6e:	3604      	addne	r6, #4
 8011f70:	2500      	movs	r5, #0
 8011f72:	1f37      	subs	r7, r6, #4
 8011f74:	4682      	mov	sl, r0
 8011f76:	4690      	mov	r8, r2
 8011f78:	9301      	str	r3, [sp, #4]
 8011f7a:	f846 5c04 	str.w	r5, [r6, #-4]
 8011f7e:	46b9      	mov	r9, r7
 8011f80:	463c      	mov	r4, r7
 8011f82:	9502      	str	r5, [sp, #8]
 8011f84:	46ab      	mov	fp, r5
 8011f86:	784a      	ldrb	r2, [r1, #1]
 8011f88:	1c4b      	adds	r3, r1, #1
 8011f8a:	9303      	str	r3, [sp, #12]
 8011f8c:	b342      	cbz	r2, 8011fe0 <__hexnan+0x88>
 8011f8e:	4610      	mov	r0, r2
 8011f90:	9105      	str	r1, [sp, #20]
 8011f92:	9204      	str	r2, [sp, #16]
 8011f94:	f7ff fd94 	bl	8011ac0 <__hexdig_fun>
 8011f98:	2800      	cmp	r0, #0
 8011f9a:	d151      	bne.n	8012040 <__hexnan+0xe8>
 8011f9c:	9a04      	ldr	r2, [sp, #16]
 8011f9e:	9905      	ldr	r1, [sp, #20]
 8011fa0:	2a20      	cmp	r2, #32
 8011fa2:	d818      	bhi.n	8011fd6 <__hexnan+0x7e>
 8011fa4:	9b02      	ldr	r3, [sp, #8]
 8011fa6:	459b      	cmp	fp, r3
 8011fa8:	dd13      	ble.n	8011fd2 <__hexnan+0x7a>
 8011faa:	454c      	cmp	r4, r9
 8011fac:	d206      	bcs.n	8011fbc <__hexnan+0x64>
 8011fae:	2d07      	cmp	r5, #7
 8011fb0:	dc04      	bgt.n	8011fbc <__hexnan+0x64>
 8011fb2:	462a      	mov	r2, r5
 8011fb4:	4649      	mov	r1, r9
 8011fb6:	4620      	mov	r0, r4
 8011fb8:	f7ff ffa8 	bl	8011f0c <L_shift>
 8011fbc:	4544      	cmp	r4, r8
 8011fbe:	d952      	bls.n	8012066 <__hexnan+0x10e>
 8011fc0:	2300      	movs	r3, #0
 8011fc2:	f1a4 0904 	sub.w	r9, r4, #4
 8011fc6:	f844 3c04 	str.w	r3, [r4, #-4]
 8011fca:	f8cd b008 	str.w	fp, [sp, #8]
 8011fce:	464c      	mov	r4, r9
 8011fd0:	461d      	mov	r5, r3
 8011fd2:	9903      	ldr	r1, [sp, #12]
 8011fd4:	e7d7      	b.n	8011f86 <__hexnan+0x2e>
 8011fd6:	2a29      	cmp	r2, #41	@ 0x29
 8011fd8:	d157      	bne.n	801208a <__hexnan+0x132>
 8011fda:	3102      	adds	r1, #2
 8011fdc:	f8ca 1000 	str.w	r1, [sl]
 8011fe0:	f1bb 0f00 	cmp.w	fp, #0
 8011fe4:	d051      	beq.n	801208a <__hexnan+0x132>
 8011fe6:	454c      	cmp	r4, r9
 8011fe8:	d206      	bcs.n	8011ff8 <__hexnan+0xa0>
 8011fea:	2d07      	cmp	r5, #7
 8011fec:	dc04      	bgt.n	8011ff8 <__hexnan+0xa0>
 8011fee:	462a      	mov	r2, r5
 8011ff0:	4649      	mov	r1, r9
 8011ff2:	4620      	mov	r0, r4
 8011ff4:	f7ff ff8a 	bl	8011f0c <L_shift>
 8011ff8:	4544      	cmp	r4, r8
 8011ffa:	d936      	bls.n	801206a <__hexnan+0x112>
 8011ffc:	f1a8 0204 	sub.w	r2, r8, #4
 8012000:	4623      	mov	r3, r4
 8012002:	f853 1b04 	ldr.w	r1, [r3], #4
 8012006:	f842 1f04 	str.w	r1, [r2, #4]!
 801200a:	429f      	cmp	r7, r3
 801200c:	d2f9      	bcs.n	8012002 <__hexnan+0xaa>
 801200e:	1b3b      	subs	r3, r7, r4
 8012010:	f023 0303 	bic.w	r3, r3, #3
 8012014:	3304      	adds	r3, #4
 8012016:	3401      	adds	r4, #1
 8012018:	3e03      	subs	r6, #3
 801201a:	42b4      	cmp	r4, r6
 801201c:	bf88      	it	hi
 801201e:	2304      	movhi	r3, #4
 8012020:	4443      	add	r3, r8
 8012022:	2200      	movs	r2, #0
 8012024:	f843 2b04 	str.w	r2, [r3], #4
 8012028:	429f      	cmp	r7, r3
 801202a:	d2fb      	bcs.n	8012024 <__hexnan+0xcc>
 801202c:	683b      	ldr	r3, [r7, #0]
 801202e:	b91b      	cbnz	r3, 8012038 <__hexnan+0xe0>
 8012030:	4547      	cmp	r7, r8
 8012032:	d128      	bne.n	8012086 <__hexnan+0x12e>
 8012034:	2301      	movs	r3, #1
 8012036:	603b      	str	r3, [r7, #0]
 8012038:	2005      	movs	r0, #5
 801203a:	b007      	add	sp, #28
 801203c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012040:	3501      	adds	r5, #1
 8012042:	2d08      	cmp	r5, #8
 8012044:	f10b 0b01 	add.w	fp, fp, #1
 8012048:	dd06      	ble.n	8012058 <__hexnan+0x100>
 801204a:	4544      	cmp	r4, r8
 801204c:	d9c1      	bls.n	8011fd2 <__hexnan+0x7a>
 801204e:	2300      	movs	r3, #0
 8012050:	f844 3c04 	str.w	r3, [r4, #-4]
 8012054:	2501      	movs	r5, #1
 8012056:	3c04      	subs	r4, #4
 8012058:	6822      	ldr	r2, [r4, #0]
 801205a:	f000 000f 	and.w	r0, r0, #15
 801205e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8012062:	6020      	str	r0, [r4, #0]
 8012064:	e7b5      	b.n	8011fd2 <__hexnan+0x7a>
 8012066:	2508      	movs	r5, #8
 8012068:	e7b3      	b.n	8011fd2 <__hexnan+0x7a>
 801206a:	9b01      	ldr	r3, [sp, #4]
 801206c:	2b00      	cmp	r3, #0
 801206e:	d0dd      	beq.n	801202c <__hexnan+0xd4>
 8012070:	f1c3 0320 	rsb	r3, r3, #32
 8012074:	f04f 32ff 	mov.w	r2, #4294967295
 8012078:	40da      	lsrs	r2, r3
 801207a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801207e:	4013      	ands	r3, r2
 8012080:	f846 3c04 	str.w	r3, [r6, #-4]
 8012084:	e7d2      	b.n	801202c <__hexnan+0xd4>
 8012086:	3f04      	subs	r7, #4
 8012088:	e7d0      	b.n	801202c <__hexnan+0xd4>
 801208a:	2004      	movs	r0, #4
 801208c:	e7d5      	b.n	801203a <__hexnan+0xe2>
	...

08012090 <malloc>:
 8012090:	4b02      	ldr	r3, [pc, #8]	@ (801209c <malloc+0xc>)
 8012092:	4601      	mov	r1, r0
 8012094:	6818      	ldr	r0, [r3, #0]
 8012096:	f000 b825 	b.w	80120e4 <_malloc_r>
 801209a:	bf00      	nop
 801209c:	20000208 	.word	0x20000208

080120a0 <sbrk_aligned>:
 80120a0:	b570      	push	{r4, r5, r6, lr}
 80120a2:	4e0f      	ldr	r6, [pc, #60]	@ (80120e0 <sbrk_aligned+0x40>)
 80120a4:	460c      	mov	r4, r1
 80120a6:	6831      	ldr	r1, [r6, #0]
 80120a8:	4605      	mov	r5, r0
 80120aa:	b911      	cbnz	r1, 80120b2 <sbrk_aligned+0x12>
 80120ac:	f001 f810 	bl	80130d0 <_sbrk_r>
 80120b0:	6030      	str	r0, [r6, #0]
 80120b2:	4621      	mov	r1, r4
 80120b4:	4628      	mov	r0, r5
 80120b6:	f001 f80b 	bl	80130d0 <_sbrk_r>
 80120ba:	1c43      	adds	r3, r0, #1
 80120bc:	d103      	bne.n	80120c6 <sbrk_aligned+0x26>
 80120be:	f04f 34ff 	mov.w	r4, #4294967295
 80120c2:	4620      	mov	r0, r4
 80120c4:	bd70      	pop	{r4, r5, r6, pc}
 80120c6:	1cc4      	adds	r4, r0, #3
 80120c8:	f024 0403 	bic.w	r4, r4, #3
 80120cc:	42a0      	cmp	r0, r4
 80120ce:	d0f8      	beq.n	80120c2 <sbrk_aligned+0x22>
 80120d0:	1a21      	subs	r1, r4, r0
 80120d2:	4628      	mov	r0, r5
 80120d4:	f000 fffc 	bl	80130d0 <_sbrk_r>
 80120d8:	3001      	adds	r0, #1
 80120da:	d1f2      	bne.n	80120c2 <sbrk_aligned+0x22>
 80120dc:	e7ef      	b.n	80120be <sbrk_aligned+0x1e>
 80120de:	bf00      	nop
 80120e0:	20000b30 	.word	0x20000b30

080120e4 <_malloc_r>:
 80120e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80120e8:	1ccd      	adds	r5, r1, #3
 80120ea:	f025 0503 	bic.w	r5, r5, #3
 80120ee:	3508      	adds	r5, #8
 80120f0:	2d0c      	cmp	r5, #12
 80120f2:	bf38      	it	cc
 80120f4:	250c      	movcc	r5, #12
 80120f6:	2d00      	cmp	r5, #0
 80120f8:	4606      	mov	r6, r0
 80120fa:	db01      	blt.n	8012100 <_malloc_r+0x1c>
 80120fc:	42a9      	cmp	r1, r5
 80120fe:	d904      	bls.n	801210a <_malloc_r+0x26>
 8012100:	230c      	movs	r3, #12
 8012102:	6033      	str	r3, [r6, #0]
 8012104:	2000      	movs	r0, #0
 8012106:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801210a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80121e0 <_malloc_r+0xfc>
 801210e:	f000 f87b 	bl	8012208 <__malloc_lock>
 8012112:	f8d8 3000 	ldr.w	r3, [r8]
 8012116:	461c      	mov	r4, r3
 8012118:	bb44      	cbnz	r4, 801216c <_malloc_r+0x88>
 801211a:	4629      	mov	r1, r5
 801211c:	4630      	mov	r0, r6
 801211e:	f7ff ffbf 	bl	80120a0 <sbrk_aligned>
 8012122:	1c43      	adds	r3, r0, #1
 8012124:	4604      	mov	r4, r0
 8012126:	d158      	bne.n	80121da <_malloc_r+0xf6>
 8012128:	f8d8 4000 	ldr.w	r4, [r8]
 801212c:	4627      	mov	r7, r4
 801212e:	2f00      	cmp	r7, #0
 8012130:	d143      	bne.n	80121ba <_malloc_r+0xd6>
 8012132:	2c00      	cmp	r4, #0
 8012134:	d04b      	beq.n	80121ce <_malloc_r+0xea>
 8012136:	6823      	ldr	r3, [r4, #0]
 8012138:	4639      	mov	r1, r7
 801213a:	4630      	mov	r0, r6
 801213c:	eb04 0903 	add.w	r9, r4, r3
 8012140:	f000 ffc6 	bl	80130d0 <_sbrk_r>
 8012144:	4581      	cmp	r9, r0
 8012146:	d142      	bne.n	80121ce <_malloc_r+0xea>
 8012148:	6821      	ldr	r1, [r4, #0]
 801214a:	1a6d      	subs	r5, r5, r1
 801214c:	4629      	mov	r1, r5
 801214e:	4630      	mov	r0, r6
 8012150:	f7ff ffa6 	bl	80120a0 <sbrk_aligned>
 8012154:	3001      	adds	r0, #1
 8012156:	d03a      	beq.n	80121ce <_malloc_r+0xea>
 8012158:	6823      	ldr	r3, [r4, #0]
 801215a:	442b      	add	r3, r5
 801215c:	6023      	str	r3, [r4, #0]
 801215e:	f8d8 3000 	ldr.w	r3, [r8]
 8012162:	685a      	ldr	r2, [r3, #4]
 8012164:	bb62      	cbnz	r2, 80121c0 <_malloc_r+0xdc>
 8012166:	f8c8 7000 	str.w	r7, [r8]
 801216a:	e00f      	b.n	801218c <_malloc_r+0xa8>
 801216c:	6822      	ldr	r2, [r4, #0]
 801216e:	1b52      	subs	r2, r2, r5
 8012170:	d420      	bmi.n	80121b4 <_malloc_r+0xd0>
 8012172:	2a0b      	cmp	r2, #11
 8012174:	d917      	bls.n	80121a6 <_malloc_r+0xc2>
 8012176:	1961      	adds	r1, r4, r5
 8012178:	42a3      	cmp	r3, r4
 801217a:	6025      	str	r5, [r4, #0]
 801217c:	bf18      	it	ne
 801217e:	6059      	strne	r1, [r3, #4]
 8012180:	6863      	ldr	r3, [r4, #4]
 8012182:	bf08      	it	eq
 8012184:	f8c8 1000 	streq.w	r1, [r8]
 8012188:	5162      	str	r2, [r4, r5]
 801218a:	604b      	str	r3, [r1, #4]
 801218c:	4630      	mov	r0, r6
 801218e:	f000 f841 	bl	8012214 <__malloc_unlock>
 8012192:	f104 000b 	add.w	r0, r4, #11
 8012196:	1d23      	adds	r3, r4, #4
 8012198:	f020 0007 	bic.w	r0, r0, #7
 801219c:	1ac2      	subs	r2, r0, r3
 801219e:	bf1c      	itt	ne
 80121a0:	1a1b      	subne	r3, r3, r0
 80121a2:	50a3      	strne	r3, [r4, r2]
 80121a4:	e7af      	b.n	8012106 <_malloc_r+0x22>
 80121a6:	6862      	ldr	r2, [r4, #4]
 80121a8:	42a3      	cmp	r3, r4
 80121aa:	bf0c      	ite	eq
 80121ac:	f8c8 2000 	streq.w	r2, [r8]
 80121b0:	605a      	strne	r2, [r3, #4]
 80121b2:	e7eb      	b.n	801218c <_malloc_r+0xa8>
 80121b4:	4623      	mov	r3, r4
 80121b6:	6864      	ldr	r4, [r4, #4]
 80121b8:	e7ae      	b.n	8012118 <_malloc_r+0x34>
 80121ba:	463c      	mov	r4, r7
 80121bc:	687f      	ldr	r7, [r7, #4]
 80121be:	e7b6      	b.n	801212e <_malloc_r+0x4a>
 80121c0:	461a      	mov	r2, r3
 80121c2:	685b      	ldr	r3, [r3, #4]
 80121c4:	42a3      	cmp	r3, r4
 80121c6:	d1fb      	bne.n	80121c0 <_malloc_r+0xdc>
 80121c8:	2300      	movs	r3, #0
 80121ca:	6053      	str	r3, [r2, #4]
 80121cc:	e7de      	b.n	801218c <_malloc_r+0xa8>
 80121ce:	230c      	movs	r3, #12
 80121d0:	6033      	str	r3, [r6, #0]
 80121d2:	4630      	mov	r0, r6
 80121d4:	f000 f81e 	bl	8012214 <__malloc_unlock>
 80121d8:	e794      	b.n	8012104 <_malloc_r+0x20>
 80121da:	6005      	str	r5, [r0, #0]
 80121dc:	e7d6      	b.n	801218c <_malloc_r+0xa8>
 80121de:	bf00      	nop
 80121e0:	20000b34 	.word	0x20000b34

080121e4 <__ascii_mbtowc>:
 80121e4:	b082      	sub	sp, #8
 80121e6:	b901      	cbnz	r1, 80121ea <__ascii_mbtowc+0x6>
 80121e8:	a901      	add	r1, sp, #4
 80121ea:	b142      	cbz	r2, 80121fe <__ascii_mbtowc+0x1a>
 80121ec:	b14b      	cbz	r3, 8012202 <__ascii_mbtowc+0x1e>
 80121ee:	7813      	ldrb	r3, [r2, #0]
 80121f0:	600b      	str	r3, [r1, #0]
 80121f2:	7812      	ldrb	r2, [r2, #0]
 80121f4:	1e10      	subs	r0, r2, #0
 80121f6:	bf18      	it	ne
 80121f8:	2001      	movne	r0, #1
 80121fa:	b002      	add	sp, #8
 80121fc:	4770      	bx	lr
 80121fe:	4610      	mov	r0, r2
 8012200:	e7fb      	b.n	80121fa <__ascii_mbtowc+0x16>
 8012202:	f06f 0001 	mvn.w	r0, #1
 8012206:	e7f8      	b.n	80121fa <__ascii_mbtowc+0x16>

08012208 <__malloc_lock>:
 8012208:	4801      	ldr	r0, [pc, #4]	@ (8012210 <__malloc_lock+0x8>)
 801220a:	f7fe bd50 	b.w	8010cae <__retarget_lock_acquire_recursive>
 801220e:	bf00      	nop
 8012210:	20000b2c 	.word	0x20000b2c

08012214 <__malloc_unlock>:
 8012214:	4801      	ldr	r0, [pc, #4]	@ (801221c <__malloc_unlock+0x8>)
 8012216:	f7fe bd4b 	b.w	8010cb0 <__retarget_lock_release_recursive>
 801221a:	bf00      	nop
 801221c:	20000b2c 	.word	0x20000b2c

08012220 <_Balloc>:
 8012220:	b570      	push	{r4, r5, r6, lr}
 8012222:	69c6      	ldr	r6, [r0, #28]
 8012224:	4604      	mov	r4, r0
 8012226:	460d      	mov	r5, r1
 8012228:	b976      	cbnz	r6, 8012248 <_Balloc+0x28>
 801222a:	2010      	movs	r0, #16
 801222c:	f7ff ff30 	bl	8012090 <malloc>
 8012230:	4602      	mov	r2, r0
 8012232:	61e0      	str	r0, [r4, #28]
 8012234:	b920      	cbnz	r0, 8012240 <_Balloc+0x20>
 8012236:	4b18      	ldr	r3, [pc, #96]	@ (8012298 <_Balloc+0x78>)
 8012238:	4818      	ldr	r0, [pc, #96]	@ (801229c <_Balloc+0x7c>)
 801223a:	216b      	movs	r1, #107	@ 0x6b
 801223c:	f000 ff58 	bl	80130f0 <__assert_func>
 8012240:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012244:	6006      	str	r6, [r0, #0]
 8012246:	60c6      	str	r6, [r0, #12]
 8012248:	69e6      	ldr	r6, [r4, #28]
 801224a:	68f3      	ldr	r3, [r6, #12]
 801224c:	b183      	cbz	r3, 8012270 <_Balloc+0x50>
 801224e:	69e3      	ldr	r3, [r4, #28]
 8012250:	68db      	ldr	r3, [r3, #12]
 8012252:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012256:	b9b8      	cbnz	r0, 8012288 <_Balloc+0x68>
 8012258:	2101      	movs	r1, #1
 801225a:	fa01 f605 	lsl.w	r6, r1, r5
 801225e:	1d72      	adds	r2, r6, #5
 8012260:	0092      	lsls	r2, r2, #2
 8012262:	4620      	mov	r0, r4
 8012264:	f000 ff62 	bl	801312c <_calloc_r>
 8012268:	b160      	cbz	r0, 8012284 <_Balloc+0x64>
 801226a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801226e:	e00e      	b.n	801228e <_Balloc+0x6e>
 8012270:	2221      	movs	r2, #33	@ 0x21
 8012272:	2104      	movs	r1, #4
 8012274:	4620      	mov	r0, r4
 8012276:	f000 ff59 	bl	801312c <_calloc_r>
 801227a:	69e3      	ldr	r3, [r4, #28]
 801227c:	60f0      	str	r0, [r6, #12]
 801227e:	68db      	ldr	r3, [r3, #12]
 8012280:	2b00      	cmp	r3, #0
 8012282:	d1e4      	bne.n	801224e <_Balloc+0x2e>
 8012284:	2000      	movs	r0, #0
 8012286:	bd70      	pop	{r4, r5, r6, pc}
 8012288:	6802      	ldr	r2, [r0, #0]
 801228a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801228e:	2300      	movs	r3, #0
 8012290:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012294:	e7f7      	b.n	8012286 <_Balloc+0x66>
 8012296:	bf00      	nop
 8012298:	08013bbe 	.word	0x08013bbe
 801229c:	08013c9e 	.word	0x08013c9e

080122a0 <_Bfree>:
 80122a0:	b570      	push	{r4, r5, r6, lr}
 80122a2:	69c6      	ldr	r6, [r0, #28]
 80122a4:	4605      	mov	r5, r0
 80122a6:	460c      	mov	r4, r1
 80122a8:	b976      	cbnz	r6, 80122c8 <_Bfree+0x28>
 80122aa:	2010      	movs	r0, #16
 80122ac:	f7ff fef0 	bl	8012090 <malloc>
 80122b0:	4602      	mov	r2, r0
 80122b2:	61e8      	str	r0, [r5, #28]
 80122b4:	b920      	cbnz	r0, 80122c0 <_Bfree+0x20>
 80122b6:	4b09      	ldr	r3, [pc, #36]	@ (80122dc <_Bfree+0x3c>)
 80122b8:	4809      	ldr	r0, [pc, #36]	@ (80122e0 <_Bfree+0x40>)
 80122ba:	218f      	movs	r1, #143	@ 0x8f
 80122bc:	f000 ff18 	bl	80130f0 <__assert_func>
 80122c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80122c4:	6006      	str	r6, [r0, #0]
 80122c6:	60c6      	str	r6, [r0, #12]
 80122c8:	b13c      	cbz	r4, 80122da <_Bfree+0x3a>
 80122ca:	69eb      	ldr	r3, [r5, #28]
 80122cc:	6862      	ldr	r2, [r4, #4]
 80122ce:	68db      	ldr	r3, [r3, #12]
 80122d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80122d4:	6021      	str	r1, [r4, #0]
 80122d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80122da:	bd70      	pop	{r4, r5, r6, pc}
 80122dc:	08013bbe 	.word	0x08013bbe
 80122e0:	08013c9e 	.word	0x08013c9e

080122e4 <__multadd>:
 80122e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122e8:	690d      	ldr	r5, [r1, #16]
 80122ea:	4607      	mov	r7, r0
 80122ec:	460c      	mov	r4, r1
 80122ee:	461e      	mov	r6, r3
 80122f0:	f101 0c14 	add.w	ip, r1, #20
 80122f4:	2000      	movs	r0, #0
 80122f6:	f8dc 3000 	ldr.w	r3, [ip]
 80122fa:	b299      	uxth	r1, r3
 80122fc:	fb02 6101 	mla	r1, r2, r1, r6
 8012300:	0c1e      	lsrs	r6, r3, #16
 8012302:	0c0b      	lsrs	r3, r1, #16
 8012304:	fb02 3306 	mla	r3, r2, r6, r3
 8012308:	b289      	uxth	r1, r1
 801230a:	3001      	adds	r0, #1
 801230c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012310:	4285      	cmp	r5, r0
 8012312:	f84c 1b04 	str.w	r1, [ip], #4
 8012316:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801231a:	dcec      	bgt.n	80122f6 <__multadd+0x12>
 801231c:	b30e      	cbz	r6, 8012362 <__multadd+0x7e>
 801231e:	68a3      	ldr	r3, [r4, #8]
 8012320:	42ab      	cmp	r3, r5
 8012322:	dc19      	bgt.n	8012358 <__multadd+0x74>
 8012324:	6861      	ldr	r1, [r4, #4]
 8012326:	4638      	mov	r0, r7
 8012328:	3101      	adds	r1, #1
 801232a:	f7ff ff79 	bl	8012220 <_Balloc>
 801232e:	4680      	mov	r8, r0
 8012330:	b928      	cbnz	r0, 801233e <__multadd+0x5a>
 8012332:	4602      	mov	r2, r0
 8012334:	4b0c      	ldr	r3, [pc, #48]	@ (8012368 <__multadd+0x84>)
 8012336:	480d      	ldr	r0, [pc, #52]	@ (801236c <__multadd+0x88>)
 8012338:	21ba      	movs	r1, #186	@ 0xba
 801233a:	f000 fed9 	bl	80130f0 <__assert_func>
 801233e:	6922      	ldr	r2, [r4, #16]
 8012340:	3202      	adds	r2, #2
 8012342:	f104 010c 	add.w	r1, r4, #12
 8012346:	0092      	lsls	r2, r2, #2
 8012348:	300c      	adds	r0, #12
 801234a:	f7fe fcb2 	bl	8010cb2 <memcpy>
 801234e:	4621      	mov	r1, r4
 8012350:	4638      	mov	r0, r7
 8012352:	f7ff ffa5 	bl	80122a0 <_Bfree>
 8012356:	4644      	mov	r4, r8
 8012358:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801235c:	3501      	adds	r5, #1
 801235e:	615e      	str	r6, [r3, #20]
 8012360:	6125      	str	r5, [r4, #16]
 8012362:	4620      	mov	r0, r4
 8012364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012368:	08013c2d 	.word	0x08013c2d
 801236c:	08013c9e 	.word	0x08013c9e

08012370 <__s2b>:
 8012370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012374:	460c      	mov	r4, r1
 8012376:	4615      	mov	r5, r2
 8012378:	461f      	mov	r7, r3
 801237a:	2209      	movs	r2, #9
 801237c:	3308      	adds	r3, #8
 801237e:	4606      	mov	r6, r0
 8012380:	fb93 f3f2 	sdiv	r3, r3, r2
 8012384:	2100      	movs	r1, #0
 8012386:	2201      	movs	r2, #1
 8012388:	429a      	cmp	r2, r3
 801238a:	db09      	blt.n	80123a0 <__s2b+0x30>
 801238c:	4630      	mov	r0, r6
 801238e:	f7ff ff47 	bl	8012220 <_Balloc>
 8012392:	b940      	cbnz	r0, 80123a6 <__s2b+0x36>
 8012394:	4602      	mov	r2, r0
 8012396:	4b19      	ldr	r3, [pc, #100]	@ (80123fc <__s2b+0x8c>)
 8012398:	4819      	ldr	r0, [pc, #100]	@ (8012400 <__s2b+0x90>)
 801239a:	21d3      	movs	r1, #211	@ 0xd3
 801239c:	f000 fea8 	bl	80130f0 <__assert_func>
 80123a0:	0052      	lsls	r2, r2, #1
 80123a2:	3101      	adds	r1, #1
 80123a4:	e7f0      	b.n	8012388 <__s2b+0x18>
 80123a6:	9b08      	ldr	r3, [sp, #32]
 80123a8:	6143      	str	r3, [r0, #20]
 80123aa:	2d09      	cmp	r5, #9
 80123ac:	f04f 0301 	mov.w	r3, #1
 80123b0:	6103      	str	r3, [r0, #16]
 80123b2:	dd16      	ble.n	80123e2 <__s2b+0x72>
 80123b4:	f104 0909 	add.w	r9, r4, #9
 80123b8:	46c8      	mov	r8, r9
 80123ba:	442c      	add	r4, r5
 80123bc:	f818 3b01 	ldrb.w	r3, [r8], #1
 80123c0:	4601      	mov	r1, r0
 80123c2:	3b30      	subs	r3, #48	@ 0x30
 80123c4:	220a      	movs	r2, #10
 80123c6:	4630      	mov	r0, r6
 80123c8:	f7ff ff8c 	bl	80122e4 <__multadd>
 80123cc:	45a0      	cmp	r8, r4
 80123ce:	d1f5      	bne.n	80123bc <__s2b+0x4c>
 80123d0:	f1a5 0408 	sub.w	r4, r5, #8
 80123d4:	444c      	add	r4, r9
 80123d6:	1b2d      	subs	r5, r5, r4
 80123d8:	1963      	adds	r3, r4, r5
 80123da:	42bb      	cmp	r3, r7
 80123dc:	db04      	blt.n	80123e8 <__s2b+0x78>
 80123de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80123e2:	340a      	adds	r4, #10
 80123e4:	2509      	movs	r5, #9
 80123e6:	e7f6      	b.n	80123d6 <__s2b+0x66>
 80123e8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80123ec:	4601      	mov	r1, r0
 80123ee:	3b30      	subs	r3, #48	@ 0x30
 80123f0:	220a      	movs	r2, #10
 80123f2:	4630      	mov	r0, r6
 80123f4:	f7ff ff76 	bl	80122e4 <__multadd>
 80123f8:	e7ee      	b.n	80123d8 <__s2b+0x68>
 80123fa:	bf00      	nop
 80123fc:	08013c2d 	.word	0x08013c2d
 8012400:	08013c9e 	.word	0x08013c9e

08012404 <__hi0bits>:
 8012404:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8012408:	4603      	mov	r3, r0
 801240a:	bf36      	itet	cc
 801240c:	0403      	lslcc	r3, r0, #16
 801240e:	2000      	movcs	r0, #0
 8012410:	2010      	movcc	r0, #16
 8012412:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8012416:	bf3c      	itt	cc
 8012418:	021b      	lslcc	r3, r3, #8
 801241a:	3008      	addcc	r0, #8
 801241c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012420:	bf3c      	itt	cc
 8012422:	011b      	lslcc	r3, r3, #4
 8012424:	3004      	addcc	r0, #4
 8012426:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801242a:	bf3c      	itt	cc
 801242c:	009b      	lslcc	r3, r3, #2
 801242e:	3002      	addcc	r0, #2
 8012430:	2b00      	cmp	r3, #0
 8012432:	db05      	blt.n	8012440 <__hi0bits+0x3c>
 8012434:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8012438:	f100 0001 	add.w	r0, r0, #1
 801243c:	bf08      	it	eq
 801243e:	2020      	moveq	r0, #32
 8012440:	4770      	bx	lr

08012442 <__lo0bits>:
 8012442:	6803      	ldr	r3, [r0, #0]
 8012444:	4602      	mov	r2, r0
 8012446:	f013 0007 	ands.w	r0, r3, #7
 801244a:	d00b      	beq.n	8012464 <__lo0bits+0x22>
 801244c:	07d9      	lsls	r1, r3, #31
 801244e:	d421      	bmi.n	8012494 <__lo0bits+0x52>
 8012450:	0798      	lsls	r0, r3, #30
 8012452:	bf49      	itett	mi
 8012454:	085b      	lsrmi	r3, r3, #1
 8012456:	089b      	lsrpl	r3, r3, #2
 8012458:	2001      	movmi	r0, #1
 801245a:	6013      	strmi	r3, [r2, #0]
 801245c:	bf5c      	itt	pl
 801245e:	6013      	strpl	r3, [r2, #0]
 8012460:	2002      	movpl	r0, #2
 8012462:	4770      	bx	lr
 8012464:	b299      	uxth	r1, r3
 8012466:	b909      	cbnz	r1, 801246c <__lo0bits+0x2a>
 8012468:	0c1b      	lsrs	r3, r3, #16
 801246a:	2010      	movs	r0, #16
 801246c:	b2d9      	uxtb	r1, r3
 801246e:	b909      	cbnz	r1, 8012474 <__lo0bits+0x32>
 8012470:	3008      	adds	r0, #8
 8012472:	0a1b      	lsrs	r3, r3, #8
 8012474:	0719      	lsls	r1, r3, #28
 8012476:	bf04      	itt	eq
 8012478:	091b      	lsreq	r3, r3, #4
 801247a:	3004      	addeq	r0, #4
 801247c:	0799      	lsls	r1, r3, #30
 801247e:	bf04      	itt	eq
 8012480:	089b      	lsreq	r3, r3, #2
 8012482:	3002      	addeq	r0, #2
 8012484:	07d9      	lsls	r1, r3, #31
 8012486:	d403      	bmi.n	8012490 <__lo0bits+0x4e>
 8012488:	085b      	lsrs	r3, r3, #1
 801248a:	f100 0001 	add.w	r0, r0, #1
 801248e:	d003      	beq.n	8012498 <__lo0bits+0x56>
 8012490:	6013      	str	r3, [r2, #0]
 8012492:	4770      	bx	lr
 8012494:	2000      	movs	r0, #0
 8012496:	4770      	bx	lr
 8012498:	2020      	movs	r0, #32
 801249a:	4770      	bx	lr

0801249c <__i2b>:
 801249c:	b510      	push	{r4, lr}
 801249e:	460c      	mov	r4, r1
 80124a0:	2101      	movs	r1, #1
 80124a2:	f7ff febd 	bl	8012220 <_Balloc>
 80124a6:	4602      	mov	r2, r0
 80124a8:	b928      	cbnz	r0, 80124b6 <__i2b+0x1a>
 80124aa:	4b05      	ldr	r3, [pc, #20]	@ (80124c0 <__i2b+0x24>)
 80124ac:	4805      	ldr	r0, [pc, #20]	@ (80124c4 <__i2b+0x28>)
 80124ae:	f240 1145 	movw	r1, #325	@ 0x145
 80124b2:	f000 fe1d 	bl	80130f0 <__assert_func>
 80124b6:	2301      	movs	r3, #1
 80124b8:	6144      	str	r4, [r0, #20]
 80124ba:	6103      	str	r3, [r0, #16]
 80124bc:	bd10      	pop	{r4, pc}
 80124be:	bf00      	nop
 80124c0:	08013c2d 	.word	0x08013c2d
 80124c4:	08013c9e 	.word	0x08013c9e

080124c8 <__multiply>:
 80124c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124cc:	4614      	mov	r4, r2
 80124ce:	690a      	ldr	r2, [r1, #16]
 80124d0:	6923      	ldr	r3, [r4, #16]
 80124d2:	429a      	cmp	r2, r3
 80124d4:	bfa8      	it	ge
 80124d6:	4623      	movge	r3, r4
 80124d8:	460f      	mov	r7, r1
 80124da:	bfa4      	itt	ge
 80124dc:	460c      	movge	r4, r1
 80124de:	461f      	movge	r7, r3
 80124e0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80124e4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80124e8:	68a3      	ldr	r3, [r4, #8]
 80124ea:	6861      	ldr	r1, [r4, #4]
 80124ec:	eb0a 0609 	add.w	r6, sl, r9
 80124f0:	42b3      	cmp	r3, r6
 80124f2:	b085      	sub	sp, #20
 80124f4:	bfb8      	it	lt
 80124f6:	3101      	addlt	r1, #1
 80124f8:	f7ff fe92 	bl	8012220 <_Balloc>
 80124fc:	b930      	cbnz	r0, 801250c <__multiply+0x44>
 80124fe:	4602      	mov	r2, r0
 8012500:	4b44      	ldr	r3, [pc, #272]	@ (8012614 <__multiply+0x14c>)
 8012502:	4845      	ldr	r0, [pc, #276]	@ (8012618 <__multiply+0x150>)
 8012504:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8012508:	f000 fdf2 	bl	80130f0 <__assert_func>
 801250c:	f100 0514 	add.w	r5, r0, #20
 8012510:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012514:	462b      	mov	r3, r5
 8012516:	2200      	movs	r2, #0
 8012518:	4543      	cmp	r3, r8
 801251a:	d321      	bcc.n	8012560 <__multiply+0x98>
 801251c:	f107 0114 	add.w	r1, r7, #20
 8012520:	f104 0214 	add.w	r2, r4, #20
 8012524:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8012528:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801252c:	9302      	str	r3, [sp, #8]
 801252e:	1b13      	subs	r3, r2, r4
 8012530:	3b15      	subs	r3, #21
 8012532:	f023 0303 	bic.w	r3, r3, #3
 8012536:	3304      	adds	r3, #4
 8012538:	f104 0715 	add.w	r7, r4, #21
 801253c:	42ba      	cmp	r2, r7
 801253e:	bf38      	it	cc
 8012540:	2304      	movcc	r3, #4
 8012542:	9301      	str	r3, [sp, #4]
 8012544:	9b02      	ldr	r3, [sp, #8]
 8012546:	9103      	str	r1, [sp, #12]
 8012548:	428b      	cmp	r3, r1
 801254a:	d80c      	bhi.n	8012566 <__multiply+0x9e>
 801254c:	2e00      	cmp	r6, #0
 801254e:	dd03      	ble.n	8012558 <__multiply+0x90>
 8012550:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012554:	2b00      	cmp	r3, #0
 8012556:	d05b      	beq.n	8012610 <__multiply+0x148>
 8012558:	6106      	str	r6, [r0, #16]
 801255a:	b005      	add	sp, #20
 801255c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012560:	f843 2b04 	str.w	r2, [r3], #4
 8012564:	e7d8      	b.n	8012518 <__multiply+0x50>
 8012566:	f8b1 a000 	ldrh.w	sl, [r1]
 801256a:	f1ba 0f00 	cmp.w	sl, #0
 801256e:	d024      	beq.n	80125ba <__multiply+0xf2>
 8012570:	f104 0e14 	add.w	lr, r4, #20
 8012574:	46a9      	mov	r9, r5
 8012576:	f04f 0c00 	mov.w	ip, #0
 801257a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801257e:	f8d9 3000 	ldr.w	r3, [r9]
 8012582:	fa1f fb87 	uxth.w	fp, r7
 8012586:	b29b      	uxth	r3, r3
 8012588:	fb0a 330b 	mla	r3, sl, fp, r3
 801258c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8012590:	f8d9 7000 	ldr.w	r7, [r9]
 8012594:	4463      	add	r3, ip
 8012596:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801259a:	fb0a c70b 	mla	r7, sl, fp, ip
 801259e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80125a2:	b29b      	uxth	r3, r3
 80125a4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80125a8:	4572      	cmp	r2, lr
 80125aa:	f849 3b04 	str.w	r3, [r9], #4
 80125ae:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80125b2:	d8e2      	bhi.n	801257a <__multiply+0xb2>
 80125b4:	9b01      	ldr	r3, [sp, #4]
 80125b6:	f845 c003 	str.w	ip, [r5, r3]
 80125ba:	9b03      	ldr	r3, [sp, #12]
 80125bc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80125c0:	3104      	adds	r1, #4
 80125c2:	f1b9 0f00 	cmp.w	r9, #0
 80125c6:	d021      	beq.n	801260c <__multiply+0x144>
 80125c8:	682b      	ldr	r3, [r5, #0]
 80125ca:	f104 0c14 	add.w	ip, r4, #20
 80125ce:	46ae      	mov	lr, r5
 80125d0:	f04f 0a00 	mov.w	sl, #0
 80125d4:	f8bc b000 	ldrh.w	fp, [ip]
 80125d8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80125dc:	fb09 770b 	mla	r7, r9, fp, r7
 80125e0:	4457      	add	r7, sl
 80125e2:	b29b      	uxth	r3, r3
 80125e4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80125e8:	f84e 3b04 	str.w	r3, [lr], #4
 80125ec:	f85c 3b04 	ldr.w	r3, [ip], #4
 80125f0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80125f4:	f8be 3000 	ldrh.w	r3, [lr]
 80125f8:	fb09 330a 	mla	r3, r9, sl, r3
 80125fc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8012600:	4562      	cmp	r2, ip
 8012602:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012606:	d8e5      	bhi.n	80125d4 <__multiply+0x10c>
 8012608:	9f01      	ldr	r7, [sp, #4]
 801260a:	51eb      	str	r3, [r5, r7]
 801260c:	3504      	adds	r5, #4
 801260e:	e799      	b.n	8012544 <__multiply+0x7c>
 8012610:	3e01      	subs	r6, #1
 8012612:	e79b      	b.n	801254c <__multiply+0x84>
 8012614:	08013c2d 	.word	0x08013c2d
 8012618:	08013c9e 	.word	0x08013c9e

0801261c <__pow5mult>:
 801261c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012620:	4615      	mov	r5, r2
 8012622:	f012 0203 	ands.w	r2, r2, #3
 8012626:	4607      	mov	r7, r0
 8012628:	460e      	mov	r6, r1
 801262a:	d007      	beq.n	801263c <__pow5mult+0x20>
 801262c:	4c25      	ldr	r4, [pc, #148]	@ (80126c4 <__pow5mult+0xa8>)
 801262e:	3a01      	subs	r2, #1
 8012630:	2300      	movs	r3, #0
 8012632:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012636:	f7ff fe55 	bl	80122e4 <__multadd>
 801263a:	4606      	mov	r6, r0
 801263c:	10ad      	asrs	r5, r5, #2
 801263e:	d03d      	beq.n	80126bc <__pow5mult+0xa0>
 8012640:	69fc      	ldr	r4, [r7, #28]
 8012642:	b97c      	cbnz	r4, 8012664 <__pow5mult+0x48>
 8012644:	2010      	movs	r0, #16
 8012646:	f7ff fd23 	bl	8012090 <malloc>
 801264a:	4602      	mov	r2, r0
 801264c:	61f8      	str	r0, [r7, #28]
 801264e:	b928      	cbnz	r0, 801265c <__pow5mult+0x40>
 8012650:	4b1d      	ldr	r3, [pc, #116]	@ (80126c8 <__pow5mult+0xac>)
 8012652:	481e      	ldr	r0, [pc, #120]	@ (80126cc <__pow5mult+0xb0>)
 8012654:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8012658:	f000 fd4a 	bl	80130f0 <__assert_func>
 801265c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012660:	6004      	str	r4, [r0, #0]
 8012662:	60c4      	str	r4, [r0, #12]
 8012664:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8012668:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801266c:	b94c      	cbnz	r4, 8012682 <__pow5mult+0x66>
 801266e:	f240 2171 	movw	r1, #625	@ 0x271
 8012672:	4638      	mov	r0, r7
 8012674:	f7ff ff12 	bl	801249c <__i2b>
 8012678:	2300      	movs	r3, #0
 801267a:	f8c8 0008 	str.w	r0, [r8, #8]
 801267e:	4604      	mov	r4, r0
 8012680:	6003      	str	r3, [r0, #0]
 8012682:	f04f 0900 	mov.w	r9, #0
 8012686:	07eb      	lsls	r3, r5, #31
 8012688:	d50a      	bpl.n	80126a0 <__pow5mult+0x84>
 801268a:	4631      	mov	r1, r6
 801268c:	4622      	mov	r2, r4
 801268e:	4638      	mov	r0, r7
 8012690:	f7ff ff1a 	bl	80124c8 <__multiply>
 8012694:	4631      	mov	r1, r6
 8012696:	4680      	mov	r8, r0
 8012698:	4638      	mov	r0, r7
 801269a:	f7ff fe01 	bl	80122a0 <_Bfree>
 801269e:	4646      	mov	r6, r8
 80126a0:	106d      	asrs	r5, r5, #1
 80126a2:	d00b      	beq.n	80126bc <__pow5mult+0xa0>
 80126a4:	6820      	ldr	r0, [r4, #0]
 80126a6:	b938      	cbnz	r0, 80126b8 <__pow5mult+0x9c>
 80126a8:	4622      	mov	r2, r4
 80126aa:	4621      	mov	r1, r4
 80126ac:	4638      	mov	r0, r7
 80126ae:	f7ff ff0b 	bl	80124c8 <__multiply>
 80126b2:	6020      	str	r0, [r4, #0]
 80126b4:	f8c0 9000 	str.w	r9, [r0]
 80126b8:	4604      	mov	r4, r0
 80126ba:	e7e4      	b.n	8012686 <__pow5mult+0x6a>
 80126bc:	4630      	mov	r0, r6
 80126be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80126c2:	bf00      	nop
 80126c4:	08013cf8 	.word	0x08013cf8
 80126c8:	08013bbe 	.word	0x08013bbe
 80126cc:	08013c9e 	.word	0x08013c9e

080126d0 <__lshift>:
 80126d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80126d4:	460c      	mov	r4, r1
 80126d6:	6849      	ldr	r1, [r1, #4]
 80126d8:	6923      	ldr	r3, [r4, #16]
 80126da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80126de:	68a3      	ldr	r3, [r4, #8]
 80126e0:	4607      	mov	r7, r0
 80126e2:	4691      	mov	r9, r2
 80126e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80126e8:	f108 0601 	add.w	r6, r8, #1
 80126ec:	42b3      	cmp	r3, r6
 80126ee:	db0b      	blt.n	8012708 <__lshift+0x38>
 80126f0:	4638      	mov	r0, r7
 80126f2:	f7ff fd95 	bl	8012220 <_Balloc>
 80126f6:	4605      	mov	r5, r0
 80126f8:	b948      	cbnz	r0, 801270e <__lshift+0x3e>
 80126fa:	4602      	mov	r2, r0
 80126fc:	4b28      	ldr	r3, [pc, #160]	@ (80127a0 <__lshift+0xd0>)
 80126fe:	4829      	ldr	r0, [pc, #164]	@ (80127a4 <__lshift+0xd4>)
 8012700:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8012704:	f000 fcf4 	bl	80130f0 <__assert_func>
 8012708:	3101      	adds	r1, #1
 801270a:	005b      	lsls	r3, r3, #1
 801270c:	e7ee      	b.n	80126ec <__lshift+0x1c>
 801270e:	2300      	movs	r3, #0
 8012710:	f100 0114 	add.w	r1, r0, #20
 8012714:	f100 0210 	add.w	r2, r0, #16
 8012718:	4618      	mov	r0, r3
 801271a:	4553      	cmp	r3, sl
 801271c:	db33      	blt.n	8012786 <__lshift+0xb6>
 801271e:	6920      	ldr	r0, [r4, #16]
 8012720:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012724:	f104 0314 	add.w	r3, r4, #20
 8012728:	f019 091f 	ands.w	r9, r9, #31
 801272c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012730:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012734:	d02b      	beq.n	801278e <__lshift+0xbe>
 8012736:	f1c9 0e20 	rsb	lr, r9, #32
 801273a:	468a      	mov	sl, r1
 801273c:	2200      	movs	r2, #0
 801273e:	6818      	ldr	r0, [r3, #0]
 8012740:	fa00 f009 	lsl.w	r0, r0, r9
 8012744:	4310      	orrs	r0, r2
 8012746:	f84a 0b04 	str.w	r0, [sl], #4
 801274a:	f853 2b04 	ldr.w	r2, [r3], #4
 801274e:	459c      	cmp	ip, r3
 8012750:	fa22 f20e 	lsr.w	r2, r2, lr
 8012754:	d8f3      	bhi.n	801273e <__lshift+0x6e>
 8012756:	ebac 0304 	sub.w	r3, ip, r4
 801275a:	3b15      	subs	r3, #21
 801275c:	f023 0303 	bic.w	r3, r3, #3
 8012760:	3304      	adds	r3, #4
 8012762:	f104 0015 	add.w	r0, r4, #21
 8012766:	4584      	cmp	ip, r0
 8012768:	bf38      	it	cc
 801276a:	2304      	movcc	r3, #4
 801276c:	50ca      	str	r2, [r1, r3]
 801276e:	b10a      	cbz	r2, 8012774 <__lshift+0xa4>
 8012770:	f108 0602 	add.w	r6, r8, #2
 8012774:	3e01      	subs	r6, #1
 8012776:	4638      	mov	r0, r7
 8012778:	612e      	str	r6, [r5, #16]
 801277a:	4621      	mov	r1, r4
 801277c:	f7ff fd90 	bl	80122a0 <_Bfree>
 8012780:	4628      	mov	r0, r5
 8012782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012786:	f842 0f04 	str.w	r0, [r2, #4]!
 801278a:	3301      	adds	r3, #1
 801278c:	e7c5      	b.n	801271a <__lshift+0x4a>
 801278e:	3904      	subs	r1, #4
 8012790:	f853 2b04 	ldr.w	r2, [r3], #4
 8012794:	f841 2f04 	str.w	r2, [r1, #4]!
 8012798:	459c      	cmp	ip, r3
 801279a:	d8f9      	bhi.n	8012790 <__lshift+0xc0>
 801279c:	e7ea      	b.n	8012774 <__lshift+0xa4>
 801279e:	bf00      	nop
 80127a0:	08013c2d 	.word	0x08013c2d
 80127a4:	08013c9e 	.word	0x08013c9e

080127a8 <__mcmp>:
 80127a8:	690a      	ldr	r2, [r1, #16]
 80127aa:	4603      	mov	r3, r0
 80127ac:	6900      	ldr	r0, [r0, #16]
 80127ae:	1a80      	subs	r0, r0, r2
 80127b0:	b530      	push	{r4, r5, lr}
 80127b2:	d10e      	bne.n	80127d2 <__mcmp+0x2a>
 80127b4:	3314      	adds	r3, #20
 80127b6:	3114      	adds	r1, #20
 80127b8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80127bc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80127c0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80127c4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80127c8:	4295      	cmp	r5, r2
 80127ca:	d003      	beq.n	80127d4 <__mcmp+0x2c>
 80127cc:	d205      	bcs.n	80127da <__mcmp+0x32>
 80127ce:	f04f 30ff 	mov.w	r0, #4294967295
 80127d2:	bd30      	pop	{r4, r5, pc}
 80127d4:	42a3      	cmp	r3, r4
 80127d6:	d3f3      	bcc.n	80127c0 <__mcmp+0x18>
 80127d8:	e7fb      	b.n	80127d2 <__mcmp+0x2a>
 80127da:	2001      	movs	r0, #1
 80127dc:	e7f9      	b.n	80127d2 <__mcmp+0x2a>
	...

080127e0 <__mdiff>:
 80127e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127e4:	4689      	mov	r9, r1
 80127e6:	4606      	mov	r6, r0
 80127e8:	4611      	mov	r1, r2
 80127ea:	4648      	mov	r0, r9
 80127ec:	4614      	mov	r4, r2
 80127ee:	f7ff ffdb 	bl	80127a8 <__mcmp>
 80127f2:	1e05      	subs	r5, r0, #0
 80127f4:	d112      	bne.n	801281c <__mdiff+0x3c>
 80127f6:	4629      	mov	r1, r5
 80127f8:	4630      	mov	r0, r6
 80127fa:	f7ff fd11 	bl	8012220 <_Balloc>
 80127fe:	4602      	mov	r2, r0
 8012800:	b928      	cbnz	r0, 801280e <__mdiff+0x2e>
 8012802:	4b3f      	ldr	r3, [pc, #252]	@ (8012900 <__mdiff+0x120>)
 8012804:	f240 2137 	movw	r1, #567	@ 0x237
 8012808:	483e      	ldr	r0, [pc, #248]	@ (8012904 <__mdiff+0x124>)
 801280a:	f000 fc71 	bl	80130f0 <__assert_func>
 801280e:	2301      	movs	r3, #1
 8012810:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012814:	4610      	mov	r0, r2
 8012816:	b003      	add	sp, #12
 8012818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801281c:	bfbc      	itt	lt
 801281e:	464b      	movlt	r3, r9
 8012820:	46a1      	movlt	r9, r4
 8012822:	4630      	mov	r0, r6
 8012824:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8012828:	bfba      	itte	lt
 801282a:	461c      	movlt	r4, r3
 801282c:	2501      	movlt	r5, #1
 801282e:	2500      	movge	r5, #0
 8012830:	f7ff fcf6 	bl	8012220 <_Balloc>
 8012834:	4602      	mov	r2, r0
 8012836:	b918      	cbnz	r0, 8012840 <__mdiff+0x60>
 8012838:	4b31      	ldr	r3, [pc, #196]	@ (8012900 <__mdiff+0x120>)
 801283a:	f240 2145 	movw	r1, #581	@ 0x245
 801283e:	e7e3      	b.n	8012808 <__mdiff+0x28>
 8012840:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8012844:	6926      	ldr	r6, [r4, #16]
 8012846:	60c5      	str	r5, [r0, #12]
 8012848:	f109 0310 	add.w	r3, r9, #16
 801284c:	f109 0514 	add.w	r5, r9, #20
 8012850:	f104 0e14 	add.w	lr, r4, #20
 8012854:	f100 0b14 	add.w	fp, r0, #20
 8012858:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801285c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8012860:	9301      	str	r3, [sp, #4]
 8012862:	46d9      	mov	r9, fp
 8012864:	f04f 0c00 	mov.w	ip, #0
 8012868:	9b01      	ldr	r3, [sp, #4]
 801286a:	f85e 0b04 	ldr.w	r0, [lr], #4
 801286e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8012872:	9301      	str	r3, [sp, #4]
 8012874:	fa1f f38a 	uxth.w	r3, sl
 8012878:	4619      	mov	r1, r3
 801287a:	b283      	uxth	r3, r0
 801287c:	1acb      	subs	r3, r1, r3
 801287e:	0c00      	lsrs	r0, r0, #16
 8012880:	4463      	add	r3, ip
 8012882:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8012886:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801288a:	b29b      	uxth	r3, r3
 801288c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8012890:	4576      	cmp	r6, lr
 8012892:	f849 3b04 	str.w	r3, [r9], #4
 8012896:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801289a:	d8e5      	bhi.n	8012868 <__mdiff+0x88>
 801289c:	1b33      	subs	r3, r6, r4
 801289e:	3b15      	subs	r3, #21
 80128a0:	f023 0303 	bic.w	r3, r3, #3
 80128a4:	3415      	adds	r4, #21
 80128a6:	3304      	adds	r3, #4
 80128a8:	42a6      	cmp	r6, r4
 80128aa:	bf38      	it	cc
 80128ac:	2304      	movcc	r3, #4
 80128ae:	441d      	add	r5, r3
 80128b0:	445b      	add	r3, fp
 80128b2:	461e      	mov	r6, r3
 80128b4:	462c      	mov	r4, r5
 80128b6:	4544      	cmp	r4, r8
 80128b8:	d30e      	bcc.n	80128d8 <__mdiff+0xf8>
 80128ba:	f108 0103 	add.w	r1, r8, #3
 80128be:	1b49      	subs	r1, r1, r5
 80128c0:	f021 0103 	bic.w	r1, r1, #3
 80128c4:	3d03      	subs	r5, #3
 80128c6:	45a8      	cmp	r8, r5
 80128c8:	bf38      	it	cc
 80128ca:	2100      	movcc	r1, #0
 80128cc:	440b      	add	r3, r1
 80128ce:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80128d2:	b191      	cbz	r1, 80128fa <__mdiff+0x11a>
 80128d4:	6117      	str	r7, [r2, #16]
 80128d6:	e79d      	b.n	8012814 <__mdiff+0x34>
 80128d8:	f854 1b04 	ldr.w	r1, [r4], #4
 80128dc:	46e6      	mov	lr, ip
 80128de:	0c08      	lsrs	r0, r1, #16
 80128e0:	fa1c fc81 	uxtah	ip, ip, r1
 80128e4:	4471      	add	r1, lr
 80128e6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80128ea:	b289      	uxth	r1, r1
 80128ec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80128f0:	f846 1b04 	str.w	r1, [r6], #4
 80128f4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80128f8:	e7dd      	b.n	80128b6 <__mdiff+0xd6>
 80128fa:	3f01      	subs	r7, #1
 80128fc:	e7e7      	b.n	80128ce <__mdiff+0xee>
 80128fe:	bf00      	nop
 8012900:	08013c2d 	.word	0x08013c2d
 8012904:	08013c9e 	.word	0x08013c9e

08012908 <__ulp>:
 8012908:	b082      	sub	sp, #8
 801290a:	ed8d 0b00 	vstr	d0, [sp]
 801290e:	9a01      	ldr	r2, [sp, #4]
 8012910:	4b0f      	ldr	r3, [pc, #60]	@ (8012950 <__ulp+0x48>)
 8012912:	4013      	ands	r3, r2
 8012914:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8012918:	2b00      	cmp	r3, #0
 801291a:	dc08      	bgt.n	801292e <__ulp+0x26>
 801291c:	425b      	negs	r3, r3
 801291e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8012922:	ea4f 5223 	mov.w	r2, r3, asr #20
 8012926:	da04      	bge.n	8012932 <__ulp+0x2a>
 8012928:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801292c:	4113      	asrs	r3, r2
 801292e:	2200      	movs	r2, #0
 8012930:	e008      	b.n	8012944 <__ulp+0x3c>
 8012932:	f1a2 0314 	sub.w	r3, r2, #20
 8012936:	2b1e      	cmp	r3, #30
 8012938:	bfda      	itte	le
 801293a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801293e:	40da      	lsrle	r2, r3
 8012940:	2201      	movgt	r2, #1
 8012942:	2300      	movs	r3, #0
 8012944:	4619      	mov	r1, r3
 8012946:	4610      	mov	r0, r2
 8012948:	ec41 0b10 	vmov	d0, r0, r1
 801294c:	b002      	add	sp, #8
 801294e:	4770      	bx	lr
 8012950:	7ff00000 	.word	0x7ff00000

08012954 <__b2d>:
 8012954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012958:	6906      	ldr	r6, [r0, #16]
 801295a:	f100 0814 	add.w	r8, r0, #20
 801295e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8012962:	1f37      	subs	r7, r6, #4
 8012964:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8012968:	4610      	mov	r0, r2
 801296a:	f7ff fd4b 	bl	8012404 <__hi0bits>
 801296e:	f1c0 0320 	rsb	r3, r0, #32
 8012972:	280a      	cmp	r0, #10
 8012974:	600b      	str	r3, [r1, #0]
 8012976:	491b      	ldr	r1, [pc, #108]	@ (80129e4 <__b2d+0x90>)
 8012978:	dc15      	bgt.n	80129a6 <__b2d+0x52>
 801297a:	f1c0 0c0b 	rsb	ip, r0, #11
 801297e:	fa22 f30c 	lsr.w	r3, r2, ip
 8012982:	45b8      	cmp	r8, r7
 8012984:	ea43 0501 	orr.w	r5, r3, r1
 8012988:	bf34      	ite	cc
 801298a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801298e:	2300      	movcs	r3, #0
 8012990:	3015      	adds	r0, #21
 8012992:	fa02 f000 	lsl.w	r0, r2, r0
 8012996:	fa23 f30c 	lsr.w	r3, r3, ip
 801299a:	4303      	orrs	r3, r0
 801299c:	461c      	mov	r4, r3
 801299e:	ec45 4b10 	vmov	d0, r4, r5
 80129a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80129a6:	45b8      	cmp	r8, r7
 80129a8:	bf3a      	itte	cc
 80129aa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80129ae:	f1a6 0708 	subcc.w	r7, r6, #8
 80129b2:	2300      	movcs	r3, #0
 80129b4:	380b      	subs	r0, #11
 80129b6:	d012      	beq.n	80129de <__b2d+0x8a>
 80129b8:	f1c0 0120 	rsb	r1, r0, #32
 80129bc:	fa23 f401 	lsr.w	r4, r3, r1
 80129c0:	4082      	lsls	r2, r0
 80129c2:	4322      	orrs	r2, r4
 80129c4:	4547      	cmp	r7, r8
 80129c6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80129ca:	bf8c      	ite	hi
 80129cc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80129d0:	2200      	movls	r2, #0
 80129d2:	4083      	lsls	r3, r0
 80129d4:	40ca      	lsrs	r2, r1
 80129d6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80129da:	4313      	orrs	r3, r2
 80129dc:	e7de      	b.n	801299c <__b2d+0x48>
 80129de:	ea42 0501 	orr.w	r5, r2, r1
 80129e2:	e7db      	b.n	801299c <__b2d+0x48>
 80129e4:	3ff00000 	.word	0x3ff00000

080129e8 <__d2b>:
 80129e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80129ec:	460f      	mov	r7, r1
 80129ee:	2101      	movs	r1, #1
 80129f0:	ec59 8b10 	vmov	r8, r9, d0
 80129f4:	4616      	mov	r6, r2
 80129f6:	f7ff fc13 	bl	8012220 <_Balloc>
 80129fa:	4604      	mov	r4, r0
 80129fc:	b930      	cbnz	r0, 8012a0c <__d2b+0x24>
 80129fe:	4602      	mov	r2, r0
 8012a00:	4b23      	ldr	r3, [pc, #140]	@ (8012a90 <__d2b+0xa8>)
 8012a02:	4824      	ldr	r0, [pc, #144]	@ (8012a94 <__d2b+0xac>)
 8012a04:	f240 310f 	movw	r1, #783	@ 0x30f
 8012a08:	f000 fb72 	bl	80130f0 <__assert_func>
 8012a0c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8012a10:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012a14:	b10d      	cbz	r5, 8012a1a <__d2b+0x32>
 8012a16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8012a1a:	9301      	str	r3, [sp, #4]
 8012a1c:	f1b8 0300 	subs.w	r3, r8, #0
 8012a20:	d023      	beq.n	8012a6a <__d2b+0x82>
 8012a22:	4668      	mov	r0, sp
 8012a24:	9300      	str	r3, [sp, #0]
 8012a26:	f7ff fd0c 	bl	8012442 <__lo0bits>
 8012a2a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8012a2e:	b1d0      	cbz	r0, 8012a66 <__d2b+0x7e>
 8012a30:	f1c0 0320 	rsb	r3, r0, #32
 8012a34:	fa02 f303 	lsl.w	r3, r2, r3
 8012a38:	430b      	orrs	r3, r1
 8012a3a:	40c2      	lsrs	r2, r0
 8012a3c:	6163      	str	r3, [r4, #20]
 8012a3e:	9201      	str	r2, [sp, #4]
 8012a40:	9b01      	ldr	r3, [sp, #4]
 8012a42:	61a3      	str	r3, [r4, #24]
 8012a44:	2b00      	cmp	r3, #0
 8012a46:	bf0c      	ite	eq
 8012a48:	2201      	moveq	r2, #1
 8012a4a:	2202      	movne	r2, #2
 8012a4c:	6122      	str	r2, [r4, #16]
 8012a4e:	b1a5      	cbz	r5, 8012a7a <__d2b+0x92>
 8012a50:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8012a54:	4405      	add	r5, r0
 8012a56:	603d      	str	r5, [r7, #0]
 8012a58:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8012a5c:	6030      	str	r0, [r6, #0]
 8012a5e:	4620      	mov	r0, r4
 8012a60:	b003      	add	sp, #12
 8012a62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012a66:	6161      	str	r1, [r4, #20]
 8012a68:	e7ea      	b.n	8012a40 <__d2b+0x58>
 8012a6a:	a801      	add	r0, sp, #4
 8012a6c:	f7ff fce9 	bl	8012442 <__lo0bits>
 8012a70:	9b01      	ldr	r3, [sp, #4]
 8012a72:	6163      	str	r3, [r4, #20]
 8012a74:	3020      	adds	r0, #32
 8012a76:	2201      	movs	r2, #1
 8012a78:	e7e8      	b.n	8012a4c <__d2b+0x64>
 8012a7a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012a7e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8012a82:	6038      	str	r0, [r7, #0]
 8012a84:	6918      	ldr	r0, [r3, #16]
 8012a86:	f7ff fcbd 	bl	8012404 <__hi0bits>
 8012a8a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012a8e:	e7e5      	b.n	8012a5c <__d2b+0x74>
 8012a90:	08013c2d 	.word	0x08013c2d
 8012a94:	08013c9e 	.word	0x08013c9e

08012a98 <__ratio>:
 8012a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a9c:	b085      	sub	sp, #20
 8012a9e:	e9cd 1000 	strd	r1, r0, [sp]
 8012aa2:	a902      	add	r1, sp, #8
 8012aa4:	f7ff ff56 	bl	8012954 <__b2d>
 8012aa8:	9800      	ldr	r0, [sp, #0]
 8012aaa:	a903      	add	r1, sp, #12
 8012aac:	ec55 4b10 	vmov	r4, r5, d0
 8012ab0:	f7ff ff50 	bl	8012954 <__b2d>
 8012ab4:	9b01      	ldr	r3, [sp, #4]
 8012ab6:	6919      	ldr	r1, [r3, #16]
 8012ab8:	9b00      	ldr	r3, [sp, #0]
 8012aba:	691b      	ldr	r3, [r3, #16]
 8012abc:	1ac9      	subs	r1, r1, r3
 8012abe:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8012ac2:	1a9b      	subs	r3, r3, r2
 8012ac4:	ec5b ab10 	vmov	sl, fp, d0
 8012ac8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8012acc:	2b00      	cmp	r3, #0
 8012ace:	bfce      	itee	gt
 8012ad0:	462a      	movgt	r2, r5
 8012ad2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8012ad6:	465a      	movle	r2, fp
 8012ad8:	462f      	mov	r7, r5
 8012ada:	46d9      	mov	r9, fp
 8012adc:	bfcc      	ite	gt
 8012ade:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8012ae2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8012ae6:	464b      	mov	r3, r9
 8012ae8:	4652      	mov	r2, sl
 8012aea:	4620      	mov	r0, r4
 8012aec:	4639      	mov	r1, r7
 8012aee:	f7ed fed5 	bl	800089c <__aeabi_ddiv>
 8012af2:	ec41 0b10 	vmov	d0, r0, r1
 8012af6:	b005      	add	sp, #20
 8012af8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012afc <__copybits>:
 8012afc:	3901      	subs	r1, #1
 8012afe:	b570      	push	{r4, r5, r6, lr}
 8012b00:	1149      	asrs	r1, r1, #5
 8012b02:	6914      	ldr	r4, [r2, #16]
 8012b04:	3101      	adds	r1, #1
 8012b06:	f102 0314 	add.w	r3, r2, #20
 8012b0a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8012b0e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8012b12:	1f05      	subs	r5, r0, #4
 8012b14:	42a3      	cmp	r3, r4
 8012b16:	d30c      	bcc.n	8012b32 <__copybits+0x36>
 8012b18:	1aa3      	subs	r3, r4, r2
 8012b1a:	3b11      	subs	r3, #17
 8012b1c:	f023 0303 	bic.w	r3, r3, #3
 8012b20:	3211      	adds	r2, #17
 8012b22:	42a2      	cmp	r2, r4
 8012b24:	bf88      	it	hi
 8012b26:	2300      	movhi	r3, #0
 8012b28:	4418      	add	r0, r3
 8012b2a:	2300      	movs	r3, #0
 8012b2c:	4288      	cmp	r0, r1
 8012b2e:	d305      	bcc.n	8012b3c <__copybits+0x40>
 8012b30:	bd70      	pop	{r4, r5, r6, pc}
 8012b32:	f853 6b04 	ldr.w	r6, [r3], #4
 8012b36:	f845 6f04 	str.w	r6, [r5, #4]!
 8012b3a:	e7eb      	b.n	8012b14 <__copybits+0x18>
 8012b3c:	f840 3b04 	str.w	r3, [r0], #4
 8012b40:	e7f4      	b.n	8012b2c <__copybits+0x30>

08012b42 <__any_on>:
 8012b42:	f100 0214 	add.w	r2, r0, #20
 8012b46:	6900      	ldr	r0, [r0, #16]
 8012b48:	114b      	asrs	r3, r1, #5
 8012b4a:	4298      	cmp	r0, r3
 8012b4c:	b510      	push	{r4, lr}
 8012b4e:	db11      	blt.n	8012b74 <__any_on+0x32>
 8012b50:	dd0a      	ble.n	8012b68 <__any_on+0x26>
 8012b52:	f011 011f 	ands.w	r1, r1, #31
 8012b56:	d007      	beq.n	8012b68 <__any_on+0x26>
 8012b58:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8012b5c:	fa24 f001 	lsr.w	r0, r4, r1
 8012b60:	fa00 f101 	lsl.w	r1, r0, r1
 8012b64:	428c      	cmp	r4, r1
 8012b66:	d10b      	bne.n	8012b80 <__any_on+0x3e>
 8012b68:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012b6c:	4293      	cmp	r3, r2
 8012b6e:	d803      	bhi.n	8012b78 <__any_on+0x36>
 8012b70:	2000      	movs	r0, #0
 8012b72:	bd10      	pop	{r4, pc}
 8012b74:	4603      	mov	r3, r0
 8012b76:	e7f7      	b.n	8012b68 <__any_on+0x26>
 8012b78:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012b7c:	2900      	cmp	r1, #0
 8012b7e:	d0f5      	beq.n	8012b6c <__any_on+0x2a>
 8012b80:	2001      	movs	r0, #1
 8012b82:	e7f6      	b.n	8012b72 <__any_on+0x30>

08012b84 <_strtol_l.constprop.0>:
 8012b84:	2b24      	cmp	r3, #36	@ 0x24
 8012b86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012b8a:	4686      	mov	lr, r0
 8012b8c:	4690      	mov	r8, r2
 8012b8e:	d801      	bhi.n	8012b94 <_strtol_l.constprop.0+0x10>
 8012b90:	2b01      	cmp	r3, #1
 8012b92:	d106      	bne.n	8012ba2 <_strtol_l.constprop.0+0x1e>
 8012b94:	f7fe f860 	bl	8010c58 <__errno>
 8012b98:	2316      	movs	r3, #22
 8012b9a:	6003      	str	r3, [r0, #0]
 8012b9c:	2000      	movs	r0, #0
 8012b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012ba2:	4834      	ldr	r0, [pc, #208]	@ (8012c74 <_strtol_l.constprop.0+0xf0>)
 8012ba4:	460d      	mov	r5, r1
 8012ba6:	462a      	mov	r2, r5
 8012ba8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012bac:	5d06      	ldrb	r6, [r0, r4]
 8012bae:	f016 0608 	ands.w	r6, r6, #8
 8012bb2:	d1f8      	bne.n	8012ba6 <_strtol_l.constprop.0+0x22>
 8012bb4:	2c2d      	cmp	r4, #45	@ 0x2d
 8012bb6:	d12d      	bne.n	8012c14 <_strtol_l.constprop.0+0x90>
 8012bb8:	782c      	ldrb	r4, [r5, #0]
 8012bba:	2601      	movs	r6, #1
 8012bbc:	1c95      	adds	r5, r2, #2
 8012bbe:	f033 0210 	bics.w	r2, r3, #16
 8012bc2:	d109      	bne.n	8012bd8 <_strtol_l.constprop.0+0x54>
 8012bc4:	2c30      	cmp	r4, #48	@ 0x30
 8012bc6:	d12a      	bne.n	8012c1e <_strtol_l.constprop.0+0x9a>
 8012bc8:	782a      	ldrb	r2, [r5, #0]
 8012bca:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8012bce:	2a58      	cmp	r2, #88	@ 0x58
 8012bd0:	d125      	bne.n	8012c1e <_strtol_l.constprop.0+0x9a>
 8012bd2:	786c      	ldrb	r4, [r5, #1]
 8012bd4:	2310      	movs	r3, #16
 8012bd6:	3502      	adds	r5, #2
 8012bd8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8012bdc:	f10c 3cff 	add.w	ip, ip, #4294967295
 8012be0:	2200      	movs	r2, #0
 8012be2:	fbbc f9f3 	udiv	r9, ip, r3
 8012be6:	4610      	mov	r0, r2
 8012be8:	fb03 ca19 	mls	sl, r3, r9, ip
 8012bec:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8012bf0:	2f09      	cmp	r7, #9
 8012bf2:	d81b      	bhi.n	8012c2c <_strtol_l.constprop.0+0xa8>
 8012bf4:	463c      	mov	r4, r7
 8012bf6:	42a3      	cmp	r3, r4
 8012bf8:	dd27      	ble.n	8012c4a <_strtol_l.constprop.0+0xc6>
 8012bfa:	1c57      	adds	r7, r2, #1
 8012bfc:	d007      	beq.n	8012c0e <_strtol_l.constprop.0+0x8a>
 8012bfe:	4581      	cmp	r9, r0
 8012c00:	d320      	bcc.n	8012c44 <_strtol_l.constprop.0+0xc0>
 8012c02:	d101      	bne.n	8012c08 <_strtol_l.constprop.0+0x84>
 8012c04:	45a2      	cmp	sl, r4
 8012c06:	db1d      	blt.n	8012c44 <_strtol_l.constprop.0+0xc0>
 8012c08:	fb00 4003 	mla	r0, r0, r3, r4
 8012c0c:	2201      	movs	r2, #1
 8012c0e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012c12:	e7eb      	b.n	8012bec <_strtol_l.constprop.0+0x68>
 8012c14:	2c2b      	cmp	r4, #43	@ 0x2b
 8012c16:	bf04      	itt	eq
 8012c18:	782c      	ldrbeq	r4, [r5, #0]
 8012c1a:	1c95      	addeq	r5, r2, #2
 8012c1c:	e7cf      	b.n	8012bbe <_strtol_l.constprop.0+0x3a>
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	d1da      	bne.n	8012bd8 <_strtol_l.constprop.0+0x54>
 8012c22:	2c30      	cmp	r4, #48	@ 0x30
 8012c24:	bf0c      	ite	eq
 8012c26:	2308      	moveq	r3, #8
 8012c28:	230a      	movne	r3, #10
 8012c2a:	e7d5      	b.n	8012bd8 <_strtol_l.constprop.0+0x54>
 8012c2c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8012c30:	2f19      	cmp	r7, #25
 8012c32:	d801      	bhi.n	8012c38 <_strtol_l.constprop.0+0xb4>
 8012c34:	3c37      	subs	r4, #55	@ 0x37
 8012c36:	e7de      	b.n	8012bf6 <_strtol_l.constprop.0+0x72>
 8012c38:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8012c3c:	2f19      	cmp	r7, #25
 8012c3e:	d804      	bhi.n	8012c4a <_strtol_l.constprop.0+0xc6>
 8012c40:	3c57      	subs	r4, #87	@ 0x57
 8012c42:	e7d8      	b.n	8012bf6 <_strtol_l.constprop.0+0x72>
 8012c44:	f04f 32ff 	mov.w	r2, #4294967295
 8012c48:	e7e1      	b.n	8012c0e <_strtol_l.constprop.0+0x8a>
 8012c4a:	1c53      	adds	r3, r2, #1
 8012c4c:	d108      	bne.n	8012c60 <_strtol_l.constprop.0+0xdc>
 8012c4e:	2322      	movs	r3, #34	@ 0x22
 8012c50:	f8ce 3000 	str.w	r3, [lr]
 8012c54:	4660      	mov	r0, ip
 8012c56:	f1b8 0f00 	cmp.w	r8, #0
 8012c5a:	d0a0      	beq.n	8012b9e <_strtol_l.constprop.0+0x1a>
 8012c5c:	1e69      	subs	r1, r5, #1
 8012c5e:	e006      	b.n	8012c6e <_strtol_l.constprop.0+0xea>
 8012c60:	b106      	cbz	r6, 8012c64 <_strtol_l.constprop.0+0xe0>
 8012c62:	4240      	negs	r0, r0
 8012c64:	f1b8 0f00 	cmp.w	r8, #0
 8012c68:	d099      	beq.n	8012b9e <_strtol_l.constprop.0+0x1a>
 8012c6a:	2a00      	cmp	r2, #0
 8012c6c:	d1f6      	bne.n	8012c5c <_strtol_l.constprop.0+0xd8>
 8012c6e:	f8c8 1000 	str.w	r1, [r8]
 8012c72:	e794      	b.n	8012b9e <_strtol_l.constprop.0+0x1a>
 8012c74:	08013df9 	.word	0x08013df9

08012c78 <_strtol_r>:
 8012c78:	f7ff bf84 	b.w	8012b84 <_strtol_l.constprop.0>

08012c7c <__ascii_wctomb>:
 8012c7c:	4603      	mov	r3, r0
 8012c7e:	4608      	mov	r0, r1
 8012c80:	b141      	cbz	r1, 8012c94 <__ascii_wctomb+0x18>
 8012c82:	2aff      	cmp	r2, #255	@ 0xff
 8012c84:	d904      	bls.n	8012c90 <__ascii_wctomb+0x14>
 8012c86:	228a      	movs	r2, #138	@ 0x8a
 8012c88:	601a      	str	r2, [r3, #0]
 8012c8a:	f04f 30ff 	mov.w	r0, #4294967295
 8012c8e:	4770      	bx	lr
 8012c90:	700a      	strb	r2, [r1, #0]
 8012c92:	2001      	movs	r0, #1
 8012c94:	4770      	bx	lr

08012c96 <__ssputs_r>:
 8012c96:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012c9a:	688e      	ldr	r6, [r1, #8]
 8012c9c:	461f      	mov	r7, r3
 8012c9e:	42be      	cmp	r6, r7
 8012ca0:	680b      	ldr	r3, [r1, #0]
 8012ca2:	4682      	mov	sl, r0
 8012ca4:	460c      	mov	r4, r1
 8012ca6:	4690      	mov	r8, r2
 8012ca8:	d82d      	bhi.n	8012d06 <__ssputs_r+0x70>
 8012caa:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012cae:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8012cb2:	d026      	beq.n	8012d02 <__ssputs_r+0x6c>
 8012cb4:	6965      	ldr	r5, [r4, #20]
 8012cb6:	6909      	ldr	r1, [r1, #16]
 8012cb8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012cbc:	eba3 0901 	sub.w	r9, r3, r1
 8012cc0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012cc4:	1c7b      	adds	r3, r7, #1
 8012cc6:	444b      	add	r3, r9
 8012cc8:	106d      	asrs	r5, r5, #1
 8012cca:	429d      	cmp	r5, r3
 8012ccc:	bf38      	it	cc
 8012cce:	461d      	movcc	r5, r3
 8012cd0:	0553      	lsls	r3, r2, #21
 8012cd2:	d527      	bpl.n	8012d24 <__ssputs_r+0x8e>
 8012cd4:	4629      	mov	r1, r5
 8012cd6:	f7ff fa05 	bl	80120e4 <_malloc_r>
 8012cda:	4606      	mov	r6, r0
 8012cdc:	b360      	cbz	r0, 8012d38 <__ssputs_r+0xa2>
 8012cde:	6921      	ldr	r1, [r4, #16]
 8012ce0:	464a      	mov	r2, r9
 8012ce2:	f7fd ffe6 	bl	8010cb2 <memcpy>
 8012ce6:	89a3      	ldrh	r3, [r4, #12]
 8012ce8:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8012cec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012cf0:	81a3      	strh	r3, [r4, #12]
 8012cf2:	6126      	str	r6, [r4, #16]
 8012cf4:	6165      	str	r5, [r4, #20]
 8012cf6:	444e      	add	r6, r9
 8012cf8:	eba5 0509 	sub.w	r5, r5, r9
 8012cfc:	6026      	str	r6, [r4, #0]
 8012cfe:	60a5      	str	r5, [r4, #8]
 8012d00:	463e      	mov	r6, r7
 8012d02:	42be      	cmp	r6, r7
 8012d04:	d900      	bls.n	8012d08 <__ssputs_r+0x72>
 8012d06:	463e      	mov	r6, r7
 8012d08:	6820      	ldr	r0, [r4, #0]
 8012d0a:	4632      	mov	r2, r6
 8012d0c:	4641      	mov	r1, r8
 8012d0e:	f000 f9c5 	bl	801309c <memmove>
 8012d12:	68a3      	ldr	r3, [r4, #8]
 8012d14:	1b9b      	subs	r3, r3, r6
 8012d16:	60a3      	str	r3, [r4, #8]
 8012d18:	6823      	ldr	r3, [r4, #0]
 8012d1a:	4433      	add	r3, r6
 8012d1c:	6023      	str	r3, [r4, #0]
 8012d1e:	2000      	movs	r0, #0
 8012d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012d24:	462a      	mov	r2, r5
 8012d26:	f000 fa15 	bl	8013154 <_realloc_r>
 8012d2a:	4606      	mov	r6, r0
 8012d2c:	2800      	cmp	r0, #0
 8012d2e:	d1e0      	bne.n	8012cf2 <__ssputs_r+0x5c>
 8012d30:	6921      	ldr	r1, [r4, #16]
 8012d32:	4650      	mov	r0, sl
 8012d34:	f7fe fe28 	bl	8011988 <_free_r>
 8012d38:	230c      	movs	r3, #12
 8012d3a:	f8ca 3000 	str.w	r3, [sl]
 8012d3e:	89a3      	ldrh	r3, [r4, #12]
 8012d40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012d44:	81a3      	strh	r3, [r4, #12]
 8012d46:	f04f 30ff 	mov.w	r0, #4294967295
 8012d4a:	e7e9      	b.n	8012d20 <__ssputs_r+0x8a>

08012d4c <_svfiprintf_r>:
 8012d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d50:	4698      	mov	r8, r3
 8012d52:	898b      	ldrh	r3, [r1, #12]
 8012d54:	061b      	lsls	r3, r3, #24
 8012d56:	b09d      	sub	sp, #116	@ 0x74
 8012d58:	4607      	mov	r7, r0
 8012d5a:	460d      	mov	r5, r1
 8012d5c:	4614      	mov	r4, r2
 8012d5e:	d510      	bpl.n	8012d82 <_svfiprintf_r+0x36>
 8012d60:	690b      	ldr	r3, [r1, #16]
 8012d62:	b973      	cbnz	r3, 8012d82 <_svfiprintf_r+0x36>
 8012d64:	2140      	movs	r1, #64	@ 0x40
 8012d66:	f7ff f9bd 	bl	80120e4 <_malloc_r>
 8012d6a:	6028      	str	r0, [r5, #0]
 8012d6c:	6128      	str	r0, [r5, #16]
 8012d6e:	b930      	cbnz	r0, 8012d7e <_svfiprintf_r+0x32>
 8012d70:	230c      	movs	r3, #12
 8012d72:	603b      	str	r3, [r7, #0]
 8012d74:	f04f 30ff 	mov.w	r0, #4294967295
 8012d78:	b01d      	add	sp, #116	@ 0x74
 8012d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d7e:	2340      	movs	r3, #64	@ 0x40
 8012d80:	616b      	str	r3, [r5, #20]
 8012d82:	2300      	movs	r3, #0
 8012d84:	9309      	str	r3, [sp, #36]	@ 0x24
 8012d86:	2320      	movs	r3, #32
 8012d88:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012d8c:	f8cd 800c 	str.w	r8, [sp, #12]
 8012d90:	2330      	movs	r3, #48	@ 0x30
 8012d92:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8012f30 <_svfiprintf_r+0x1e4>
 8012d96:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012d9a:	f04f 0901 	mov.w	r9, #1
 8012d9e:	4623      	mov	r3, r4
 8012da0:	469a      	mov	sl, r3
 8012da2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012da6:	b10a      	cbz	r2, 8012dac <_svfiprintf_r+0x60>
 8012da8:	2a25      	cmp	r2, #37	@ 0x25
 8012daa:	d1f9      	bne.n	8012da0 <_svfiprintf_r+0x54>
 8012dac:	ebba 0b04 	subs.w	fp, sl, r4
 8012db0:	d00b      	beq.n	8012dca <_svfiprintf_r+0x7e>
 8012db2:	465b      	mov	r3, fp
 8012db4:	4622      	mov	r2, r4
 8012db6:	4629      	mov	r1, r5
 8012db8:	4638      	mov	r0, r7
 8012dba:	f7ff ff6c 	bl	8012c96 <__ssputs_r>
 8012dbe:	3001      	adds	r0, #1
 8012dc0:	f000 80a7 	beq.w	8012f12 <_svfiprintf_r+0x1c6>
 8012dc4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012dc6:	445a      	add	r2, fp
 8012dc8:	9209      	str	r2, [sp, #36]	@ 0x24
 8012dca:	f89a 3000 	ldrb.w	r3, [sl]
 8012dce:	2b00      	cmp	r3, #0
 8012dd0:	f000 809f 	beq.w	8012f12 <_svfiprintf_r+0x1c6>
 8012dd4:	2300      	movs	r3, #0
 8012dd6:	f04f 32ff 	mov.w	r2, #4294967295
 8012dda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012dde:	f10a 0a01 	add.w	sl, sl, #1
 8012de2:	9304      	str	r3, [sp, #16]
 8012de4:	9307      	str	r3, [sp, #28]
 8012de6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012dea:	931a      	str	r3, [sp, #104]	@ 0x68
 8012dec:	4654      	mov	r4, sl
 8012dee:	2205      	movs	r2, #5
 8012df0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012df4:	484e      	ldr	r0, [pc, #312]	@ (8012f30 <_svfiprintf_r+0x1e4>)
 8012df6:	f7ed fa13 	bl	8000220 <memchr>
 8012dfa:	9a04      	ldr	r2, [sp, #16]
 8012dfc:	b9d8      	cbnz	r0, 8012e36 <_svfiprintf_r+0xea>
 8012dfe:	06d0      	lsls	r0, r2, #27
 8012e00:	bf44      	itt	mi
 8012e02:	2320      	movmi	r3, #32
 8012e04:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012e08:	0711      	lsls	r1, r2, #28
 8012e0a:	bf44      	itt	mi
 8012e0c:	232b      	movmi	r3, #43	@ 0x2b
 8012e0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012e12:	f89a 3000 	ldrb.w	r3, [sl]
 8012e16:	2b2a      	cmp	r3, #42	@ 0x2a
 8012e18:	d015      	beq.n	8012e46 <_svfiprintf_r+0xfa>
 8012e1a:	9a07      	ldr	r2, [sp, #28]
 8012e1c:	4654      	mov	r4, sl
 8012e1e:	2000      	movs	r0, #0
 8012e20:	f04f 0c0a 	mov.w	ip, #10
 8012e24:	4621      	mov	r1, r4
 8012e26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012e2a:	3b30      	subs	r3, #48	@ 0x30
 8012e2c:	2b09      	cmp	r3, #9
 8012e2e:	d94b      	bls.n	8012ec8 <_svfiprintf_r+0x17c>
 8012e30:	b1b0      	cbz	r0, 8012e60 <_svfiprintf_r+0x114>
 8012e32:	9207      	str	r2, [sp, #28]
 8012e34:	e014      	b.n	8012e60 <_svfiprintf_r+0x114>
 8012e36:	eba0 0308 	sub.w	r3, r0, r8
 8012e3a:	fa09 f303 	lsl.w	r3, r9, r3
 8012e3e:	4313      	orrs	r3, r2
 8012e40:	9304      	str	r3, [sp, #16]
 8012e42:	46a2      	mov	sl, r4
 8012e44:	e7d2      	b.n	8012dec <_svfiprintf_r+0xa0>
 8012e46:	9b03      	ldr	r3, [sp, #12]
 8012e48:	1d19      	adds	r1, r3, #4
 8012e4a:	681b      	ldr	r3, [r3, #0]
 8012e4c:	9103      	str	r1, [sp, #12]
 8012e4e:	2b00      	cmp	r3, #0
 8012e50:	bfbb      	ittet	lt
 8012e52:	425b      	neglt	r3, r3
 8012e54:	f042 0202 	orrlt.w	r2, r2, #2
 8012e58:	9307      	strge	r3, [sp, #28]
 8012e5a:	9307      	strlt	r3, [sp, #28]
 8012e5c:	bfb8      	it	lt
 8012e5e:	9204      	strlt	r2, [sp, #16]
 8012e60:	7823      	ldrb	r3, [r4, #0]
 8012e62:	2b2e      	cmp	r3, #46	@ 0x2e
 8012e64:	d10a      	bne.n	8012e7c <_svfiprintf_r+0x130>
 8012e66:	7863      	ldrb	r3, [r4, #1]
 8012e68:	2b2a      	cmp	r3, #42	@ 0x2a
 8012e6a:	d132      	bne.n	8012ed2 <_svfiprintf_r+0x186>
 8012e6c:	9b03      	ldr	r3, [sp, #12]
 8012e6e:	1d1a      	adds	r2, r3, #4
 8012e70:	681b      	ldr	r3, [r3, #0]
 8012e72:	9203      	str	r2, [sp, #12]
 8012e74:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012e78:	3402      	adds	r4, #2
 8012e7a:	9305      	str	r3, [sp, #20]
 8012e7c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8012f40 <_svfiprintf_r+0x1f4>
 8012e80:	7821      	ldrb	r1, [r4, #0]
 8012e82:	2203      	movs	r2, #3
 8012e84:	4650      	mov	r0, sl
 8012e86:	f7ed f9cb 	bl	8000220 <memchr>
 8012e8a:	b138      	cbz	r0, 8012e9c <_svfiprintf_r+0x150>
 8012e8c:	9b04      	ldr	r3, [sp, #16]
 8012e8e:	eba0 000a 	sub.w	r0, r0, sl
 8012e92:	2240      	movs	r2, #64	@ 0x40
 8012e94:	4082      	lsls	r2, r0
 8012e96:	4313      	orrs	r3, r2
 8012e98:	3401      	adds	r4, #1
 8012e9a:	9304      	str	r3, [sp, #16]
 8012e9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012ea0:	4824      	ldr	r0, [pc, #144]	@ (8012f34 <_svfiprintf_r+0x1e8>)
 8012ea2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012ea6:	2206      	movs	r2, #6
 8012ea8:	f7ed f9ba 	bl	8000220 <memchr>
 8012eac:	2800      	cmp	r0, #0
 8012eae:	d036      	beq.n	8012f1e <_svfiprintf_r+0x1d2>
 8012eb0:	4b21      	ldr	r3, [pc, #132]	@ (8012f38 <_svfiprintf_r+0x1ec>)
 8012eb2:	bb1b      	cbnz	r3, 8012efc <_svfiprintf_r+0x1b0>
 8012eb4:	9b03      	ldr	r3, [sp, #12]
 8012eb6:	3307      	adds	r3, #7
 8012eb8:	f023 0307 	bic.w	r3, r3, #7
 8012ebc:	3308      	adds	r3, #8
 8012ebe:	9303      	str	r3, [sp, #12]
 8012ec0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012ec2:	4433      	add	r3, r6
 8012ec4:	9309      	str	r3, [sp, #36]	@ 0x24
 8012ec6:	e76a      	b.n	8012d9e <_svfiprintf_r+0x52>
 8012ec8:	fb0c 3202 	mla	r2, ip, r2, r3
 8012ecc:	460c      	mov	r4, r1
 8012ece:	2001      	movs	r0, #1
 8012ed0:	e7a8      	b.n	8012e24 <_svfiprintf_r+0xd8>
 8012ed2:	2300      	movs	r3, #0
 8012ed4:	3401      	adds	r4, #1
 8012ed6:	9305      	str	r3, [sp, #20]
 8012ed8:	4619      	mov	r1, r3
 8012eda:	f04f 0c0a 	mov.w	ip, #10
 8012ede:	4620      	mov	r0, r4
 8012ee0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012ee4:	3a30      	subs	r2, #48	@ 0x30
 8012ee6:	2a09      	cmp	r2, #9
 8012ee8:	d903      	bls.n	8012ef2 <_svfiprintf_r+0x1a6>
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	d0c6      	beq.n	8012e7c <_svfiprintf_r+0x130>
 8012eee:	9105      	str	r1, [sp, #20]
 8012ef0:	e7c4      	b.n	8012e7c <_svfiprintf_r+0x130>
 8012ef2:	fb0c 2101 	mla	r1, ip, r1, r2
 8012ef6:	4604      	mov	r4, r0
 8012ef8:	2301      	movs	r3, #1
 8012efa:	e7f0      	b.n	8012ede <_svfiprintf_r+0x192>
 8012efc:	ab03      	add	r3, sp, #12
 8012efe:	9300      	str	r3, [sp, #0]
 8012f00:	462a      	mov	r2, r5
 8012f02:	4b0e      	ldr	r3, [pc, #56]	@ (8012f3c <_svfiprintf_r+0x1f0>)
 8012f04:	a904      	add	r1, sp, #16
 8012f06:	4638      	mov	r0, r7
 8012f08:	f7fc ff30 	bl	800fd6c <_printf_float>
 8012f0c:	1c42      	adds	r2, r0, #1
 8012f0e:	4606      	mov	r6, r0
 8012f10:	d1d6      	bne.n	8012ec0 <_svfiprintf_r+0x174>
 8012f12:	89ab      	ldrh	r3, [r5, #12]
 8012f14:	065b      	lsls	r3, r3, #25
 8012f16:	f53f af2d 	bmi.w	8012d74 <_svfiprintf_r+0x28>
 8012f1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012f1c:	e72c      	b.n	8012d78 <_svfiprintf_r+0x2c>
 8012f1e:	ab03      	add	r3, sp, #12
 8012f20:	9300      	str	r3, [sp, #0]
 8012f22:	462a      	mov	r2, r5
 8012f24:	4b05      	ldr	r3, [pc, #20]	@ (8012f3c <_svfiprintf_r+0x1f0>)
 8012f26:	a904      	add	r1, sp, #16
 8012f28:	4638      	mov	r0, r7
 8012f2a:	f7fd f9b7 	bl	801029c <_printf_i>
 8012f2e:	e7ed      	b.n	8012f0c <_svfiprintf_r+0x1c0>
 8012f30:	08013ef9 	.word	0x08013ef9
 8012f34:	08013f03 	.word	0x08013f03
 8012f38:	0800fd6d 	.word	0x0800fd6d
 8012f3c:	08012c97 	.word	0x08012c97
 8012f40:	08013eff 	.word	0x08013eff

08012f44 <__sflush_r>:
 8012f44:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f4c:	0716      	lsls	r6, r2, #28
 8012f4e:	4605      	mov	r5, r0
 8012f50:	460c      	mov	r4, r1
 8012f52:	d454      	bmi.n	8012ffe <__sflush_r+0xba>
 8012f54:	684b      	ldr	r3, [r1, #4]
 8012f56:	2b00      	cmp	r3, #0
 8012f58:	dc02      	bgt.n	8012f60 <__sflush_r+0x1c>
 8012f5a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8012f5c:	2b00      	cmp	r3, #0
 8012f5e:	dd48      	ble.n	8012ff2 <__sflush_r+0xae>
 8012f60:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012f62:	2e00      	cmp	r6, #0
 8012f64:	d045      	beq.n	8012ff2 <__sflush_r+0xae>
 8012f66:	2300      	movs	r3, #0
 8012f68:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8012f6c:	682f      	ldr	r7, [r5, #0]
 8012f6e:	6a21      	ldr	r1, [r4, #32]
 8012f70:	602b      	str	r3, [r5, #0]
 8012f72:	d030      	beq.n	8012fd6 <__sflush_r+0x92>
 8012f74:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8012f76:	89a3      	ldrh	r3, [r4, #12]
 8012f78:	0759      	lsls	r1, r3, #29
 8012f7a:	d505      	bpl.n	8012f88 <__sflush_r+0x44>
 8012f7c:	6863      	ldr	r3, [r4, #4]
 8012f7e:	1ad2      	subs	r2, r2, r3
 8012f80:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8012f82:	b10b      	cbz	r3, 8012f88 <__sflush_r+0x44>
 8012f84:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012f86:	1ad2      	subs	r2, r2, r3
 8012f88:	2300      	movs	r3, #0
 8012f8a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012f8c:	6a21      	ldr	r1, [r4, #32]
 8012f8e:	4628      	mov	r0, r5
 8012f90:	47b0      	blx	r6
 8012f92:	1c43      	adds	r3, r0, #1
 8012f94:	89a3      	ldrh	r3, [r4, #12]
 8012f96:	d106      	bne.n	8012fa6 <__sflush_r+0x62>
 8012f98:	6829      	ldr	r1, [r5, #0]
 8012f9a:	291d      	cmp	r1, #29
 8012f9c:	d82b      	bhi.n	8012ff6 <__sflush_r+0xb2>
 8012f9e:	4a2a      	ldr	r2, [pc, #168]	@ (8013048 <__sflush_r+0x104>)
 8012fa0:	410a      	asrs	r2, r1
 8012fa2:	07d6      	lsls	r6, r2, #31
 8012fa4:	d427      	bmi.n	8012ff6 <__sflush_r+0xb2>
 8012fa6:	2200      	movs	r2, #0
 8012fa8:	6062      	str	r2, [r4, #4]
 8012faa:	04d9      	lsls	r1, r3, #19
 8012fac:	6922      	ldr	r2, [r4, #16]
 8012fae:	6022      	str	r2, [r4, #0]
 8012fb0:	d504      	bpl.n	8012fbc <__sflush_r+0x78>
 8012fb2:	1c42      	adds	r2, r0, #1
 8012fb4:	d101      	bne.n	8012fba <__sflush_r+0x76>
 8012fb6:	682b      	ldr	r3, [r5, #0]
 8012fb8:	b903      	cbnz	r3, 8012fbc <__sflush_r+0x78>
 8012fba:	6560      	str	r0, [r4, #84]	@ 0x54
 8012fbc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012fbe:	602f      	str	r7, [r5, #0]
 8012fc0:	b1b9      	cbz	r1, 8012ff2 <__sflush_r+0xae>
 8012fc2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012fc6:	4299      	cmp	r1, r3
 8012fc8:	d002      	beq.n	8012fd0 <__sflush_r+0x8c>
 8012fca:	4628      	mov	r0, r5
 8012fcc:	f7fe fcdc 	bl	8011988 <_free_r>
 8012fd0:	2300      	movs	r3, #0
 8012fd2:	6363      	str	r3, [r4, #52]	@ 0x34
 8012fd4:	e00d      	b.n	8012ff2 <__sflush_r+0xae>
 8012fd6:	2301      	movs	r3, #1
 8012fd8:	4628      	mov	r0, r5
 8012fda:	47b0      	blx	r6
 8012fdc:	4602      	mov	r2, r0
 8012fde:	1c50      	adds	r0, r2, #1
 8012fe0:	d1c9      	bne.n	8012f76 <__sflush_r+0x32>
 8012fe2:	682b      	ldr	r3, [r5, #0]
 8012fe4:	2b00      	cmp	r3, #0
 8012fe6:	d0c6      	beq.n	8012f76 <__sflush_r+0x32>
 8012fe8:	2b1d      	cmp	r3, #29
 8012fea:	d001      	beq.n	8012ff0 <__sflush_r+0xac>
 8012fec:	2b16      	cmp	r3, #22
 8012fee:	d11e      	bne.n	801302e <__sflush_r+0xea>
 8012ff0:	602f      	str	r7, [r5, #0]
 8012ff2:	2000      	movs	r0, #0
 8012ff4:	e022      	b.n	801303c <__sflush_r+0xf8>
 8012ff6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012ffa:	b21b      	sxth	r3, r3
 8012ffc:	e01b      	b.n	8013036 <__sflush_r+0xf2>
 8012ffe:	690f      	ldr	r7, [r1, #16]
 8013000:	2f00      	cmp	r7, #0
 8013002:	d0f6      	beq.n	8012ff2 <__sflush_r+0xae>
 8013004:	0793      	lsls	r3, r2, #30
 8013006:	680e      	ldr	r6, [r1, #0]
 8013008:	bf08      	it	eq
 801300a:	694b      	ldreq	r3, [r1, #20]
 801300c:	600f      	str	r7, [r1, #0]
 801300e:	bf18      	it	ne
 8013010:	2300      	movne	r3, #0
 8013012:	eba6 0807 	sub.w	r8, r6, r7
 8013016:	608b      	str	r3, [r1, #8]
 8013018:	f1b8 0f00 	cmp.w	r8, #0
 801301c:	dde9      	ble.n	8012ff2 <__sflush_r+0xae>
 801301e:	6a21      	ldr	r1, [r4, #32]
 8013020:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8013022:	4643      	mov	r3, r8
 8013024:	463a      	mov	r2, r7
 8013026:	4628      	mov	r0, r5
 8013028:	47b0      	blx	r6
 801302a:	2800      	cmp	r0, #0
 801302c:	dc08      	bgt.n	8013040 <__sflush_r+0xfc>
 801302e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013032:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013036:	81a3      	strh	r3, [r4, #12]
 8013038:	f04f 30ff 	mov.w	r0, #4294967295
 801303c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013040:	4407      	add	r7, r0
 8013042:	eba8 0800 	sub.w	r8, r8, r0
 8013046:	e7e7      	b.n	8013018 <__sflush_r+0xd4>
 8013048:	dfbffffe 	.word	0xdfbffffe

0801304c <_fflush_r>:
 801304c:	b538      	push	{r3, r4, r5, lr}
 801304e:	690b      	ldr	r3, [r1, #16]
 8013050:	4605      	mov	r5, r0
 8013052:	460c      	mov	r4, r1
 8013054:	b913      	cbnz	r3, 801305c <_fflush_r+0x10>
 8013056:	2500      	movs	r5, #0
 8013058:	4628      	mov	r0, r5
 801305a:	bd38      	pop	{r3, r4, r5, pc}
 801305c:	b118      	cbz	r0, 8013066 <_fflush_r+0x1a>
 801305e:	6a03      	ldr	r3, [r0, #32]
 8013060:	b90b      	cbnz	r3, 8013066 <_fflush_r+0x1a>
 8013062:	f7fd fcdb 	bl	8010a1c <__sinit>
 8013066:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801306a:	2b00      	cmp	r3, #0
 801306c:	d0f3      	beq.n	8013056 <_fflush_r+0xa>
 801306e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8013070:	07d0      	lsls	r0, r2, #31
 8013072:	d404      	bmi.n	801307e <_fflush_r+0x32>
 8013074:	0599      	lsls	r1, r3, #22
 8013076:	d402      	bmi.n	801307e <_fflush_r+0x32>
 8013078:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801307a:	f7fd fe18 	bl	8010cae <__retarget_lock_acquire_recursive>
 801307e:	4628      	mov	r0, r5
 8013080:	4621      	mov	r1, r4
 8013082:	f7ff ff5f 	bl	8012f44 <__sflush_r>
 8013086:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013088:	07da      	lsls	r2, r3, #31
 801308a:	4605      	mov	r5, r0
 801308c:	d4e4      	bmi.n	8013058 <_fflush_r+0xc>
 801308e:	89a3      	ldrh	r3, [r4, #12]
 8013090:	059b      	lsls	r3, r3, #22
 8013092:	d4e1      	bmi.n	8013058 <_fflush_r+0xc>
 8013094:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013096:	f7fd fe0b 	bl	8010cb0 <__retarget_lock_release_recursive>
 801309a:	e7dd      	b.n	8013058 <_fflush_r+0xc>

0801309c <memmove>:
 801309c:	4288      	cmp	r0, r1
 801309e:	b510      	push	{r4, lr}
 80130a0:	eb01 0402 	add.w	r4, r1, r2
 80130a4:	d902      	bls.n	80130ac <memmove+0x10>
 80130a6:	4284      	cmp	r4, r0
 80130a8:	4623      	mov	r3, r4
 80130aa:	d807      	bhi.n	80130bc <memmove+0x20>
 80130ac:	1e43      	subs	r3, r0, #1
 80130ae:	42a1      	cmp	r1, r4
 80130b0:	d008      	beq.n	80130c4 <memmove+0x28>
 80130b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80130b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80130ba:	e7f8      	b.n	80130ae <memmove+0x12>
 80130bc:	4402      	add	r2, r0
 80130be:	4601      	mov	r1, r0
 80130c0:	428a      	cmp	r2, r1
 80130c2:	d100      	bne.n	80130c6 <memmove+0x2a>
 80130c4:	bd10      	pop	{r4, pc}
 80130c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80130ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80130ce:	e7f7      	b.n	80130c0 <memmove+0x24>

080130d0 <_sbrk_r>:
 80130d0:	b538      	push	{r3, r4, r5, lr}
 80130d2:	4d06      	ldr	r5, [pc, #24]	@ (80130ec <_sbrk_r+0x1c>)
 80130d4:	2300      	movs	r3, #0
 80130d6:	4604      	mov	r4, r0
 80130d8:	4608      	mov	r0, r1
 80130da:	602b      	str	r3, [r5, #0]
 80130dc:	f7ee ffe4 	bl	80020a8 <_sbrk>
 80130e0:	1c43      	adds	r3, r0, #1
 80130e2:	d102      	bne.n	80130ea <_sbrk_r+0x1a>
 80130e4:	682b      	ldr	r3, [r5, #0]
 80130e6:	b103      	cbz	r3, 80130ea <_sbrk_r+0x1a>
 80130e8:	6023      	str	r3, [r4, #0]
 80130ea:	bd38      	pop	{r3, r4, r5, pc}
 80130ec:	20000b28 	.word	0x20000b28

080130f0 <__assert_func>:
 80130f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80130f2:	4614      	mov	r4, r2
 80130f4:	461a      	mov	r2, r3
 80130f6:	4b09      	ldr	r3, [pc, #36]	@ (801311c <__assert_func+0x2c>)
 80130f8:	681b      	ldr	r3, [r3, #0]
 80130fa:	4605      	mov	r5, r0
 80130fc:	68d8      	ldr	r0, [r3, #12]
 80130fe:	b954      	cbnz	r4, 8013116 <__assert_func+0x26>
 8013100:	4b07      	ldr	r3, [pc, #28]	@ (8013120 <__assert_func+0x30>)
 8013102:	461c      	mov	r4, r3
 8013104:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013108:	9100      	str	r1, [sp, #0]
 801310a:	462b      	mov	r3, r5
 801310c:	4905      	ldr	r1, [pc, #20]	@ (8013124 <__assert_func+0x34>)
 801310e:	f000 f84f 	bl	80131b0 <fiprintf>
 8013112:	f000 f85f 	bl	80131d4 <abort>
 8013116:	4b04      	ldr	r3, [pc, #16]	@ (8013128 <__assert_func+0x38>)
 8013118:	e7f4      	b.n	8013104 <__assert_func+0x14>
 801311a:	bf00      	nop
 801311c:	20000208 	.word	0x20000208
 8013120:	08013f45 	.word	0x08013f45
 8013124:	08013f17 	.word	0x08013f17
 8013128:	08013f0a 	.word	0x08013f0a

0801312c <_calloc_r>:
 801312c:	b570      	push	{r4, r5, r6, lr}
 801312e:	fba1 5402 	umull	r5, r4, r1, r2
 8013132:	b93c      	cbnz	r4, 8013144 <_calloc_r+0x18>
 8013134:	4629      	mov	r1, r5
 8013136:	f7fe ffd5 	bl	80120e4 <_malloc_r>
 801313a:	4606      	mov	r6, r0
 801313c:	b928      	cbnz	r0, 801314a <_calloc_r+0x1e>
 801313e:	2600      	movs	r6, #0
 8013140:	4630      	mov	r0, r6
 8013142:	bd70      	pop	{r4, r5, r6, pc}
 8013144:	220c      	movs	r2, #12
 8013146:	6002      	str	r2, [r0, #0]
 8013148:	e7f9      	b.n	801313e <_calloc_r+0x12>
 801314a:	462a      	mov	r2, r5
 801314c:	4621      	mov	r1, r4
 801314e:	f7fd fd1f 	bl	8010b90 <memset>
 8013152:	e7f5      	b.n	8013140 <_calloc_r+0x14>

08013154 <_realloc_r>:
 8013154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013158:	4680      	mov	r8, r0
 801315a:	4615      	mov	r5, r2
 801315c:	460c      	mov	r4, r1
 801315e:	b921      	cbnz	r1, 801316a <_realloc_r+0x16>
 8013160:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013164:	4611      	mov	r1, r2
 8013166:	f7fe bfbd 	b.w	80120e4 <_malloc_r>
 801316a:	b92a      	cbnz	r2, 8013178 <_realloc_r+0x24>
 801316c:	f7fe fc0c 	bl	8011988 <_free_r>
 8013170:	2400      	movs	r4, #0
 8013172:	4620      	mov	r0, r4
 8013174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013178:	f000 f833 	bl	80131e2 <_malloc_usable_size_r>
 801317c:	4285      	cmp	r5, r0
 801317e:	4606      	mov	r6, r0
 8013180:	d802      	bhi.n	8013188 <_realloc_r+0x34>
 8013182:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8013186:	d8f4      	bhi.n	8013172 <_realloc_r+0x1e>
 8013188:	4629      	mov	r1, r5
 801318a:	4640      	mov	r0, r8
 801318c:	f7fe ffaa 	bl	80120e4 <_malloc_r>
 8013190:	4607      	mov	r7, r0
 8013192:	2800      	cmp	r0, #0
 8013194:	d0ec      	beq.n	8013170 <_realloc_r+0x1c>
 8013196:	42b5      	cmp	r5, r6
 8013198:	462a      	mov	r2, r5
 801319a:	4621      	mov	r1, r4
 801319c:	bf28      	it	cs
 801319e:	4632      	movcs	r2, r6
 80131a0:	f7fd fd87 	bl	8010cb2 <memcpy>
 80131a4:	4621      	mov	r1, r4
 80131a6:	4640      	mov	r0, r8
 80131a8:	f7fe fbee 	bl	8011988 <_free_r>
 80131ac:	463c      	mov	r4, r7
 80131ae:	e7e0      	b.n	8013172 <_realloc_r+0x1e>

080131b0 <fiprintf>:
 80131b0:	b40e      	push	{r1, r2, r3}
 80131b2:	b503      	push	{r0, r1, lr}
 80131b4:	4601      	mov	r1, r0
 80131b6:	ab03      	add	r3, sp, #12
 80131b8:	4805      	ldr	r0, [pc, #20]	@ (80131d0 <fiprintf+0x20>)
 80131ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80131be:	6800      	ldr	r0, [r0, #0]
 80131c0:	9301      	str	r3, [sp, #4]
 80131c2:	f000 f83f 	bl	8013244 <_vfiprintf_r>
 80131c6:	b002      	add	sp, #8
 80131c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80131cc:	b003      	add	sp, #12
 80131ce:	4770      	bx	lr
 80131d0:	20000208 	.word	0x20000208

080131d4 <abort>:
 80131d4:	b508      	push	{r3, lr}
 80131d6:	2006      	movs	r0, #6
 80131d8:	f000 fa08 	bl	80135ec <raise>
 80131dc:	2001      	movs	r0, #1
 80131de:	f7ee feeb 	bl	8001fb8 <_exit>

080131e2 <_malloc_usable_size_r>:
 80131e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80131e6:	1f18      	subs	r0, r3, #4
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	bfbc      	itt	lt
 80131ec:	580b      	ldrlt	r3, [r1, r0]
 80131ee:	18c0      	addlt	r0, r0, r3
 80131f0:	4770      	bx	lr

080131f2 <__sfputc_r>:
 80131f2:	6893      	ldr	r3, [r2, #8]
 80131f4:	3b01      	subs	r3, #1
 80131f6:	2b00      	cmp	r3, #0
 80131f8:	b410      	push	{r4}
 80131fa:	6093      	str	r3, [r2, #8]
 80131fc:	da08      	bge.n	8013210 <__sfputc_r+0x1e>
 80131fe:	6994      	ldr	r4, [r2, #24]
 8013200:	42a3      	cmp	r3, r4
 8013202:	db01      	blt.n	8013208 <__sfputc_r+0x16>
 8013204:	290a      	cmp	r1, #10
 8013206:	d103      	bne.n	8013210 <__sfputc_r+0x1e>
 8013208:	f85d 4b04 	ldr.w	r4, [sp], #4
 801320c:	f000 b932 	b.w	8013474 <__swbuf_r>
 8013210:	6813      	ldr	r3, [r2, #0]
 8013212:	1c58      	adds	r0, r3, #1
 8013214:	6010      	str	r0, [r2, #0]
 8013216:	7019      	strb	r1, [r3, #0]
 8013218:	4608      	mov	r0, r1
 801321a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801321e:	4770      	bx	lr

08013220 <__sfputs_r>:
 8013220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013222:	4606      	mov	r6, r0
 8013224:	460f      	mov	r7, r1
 8013226:	4614      	mov	r4, r2
 8013228:	18d5      	adds	r5, r2, r3
 801322a:	42ac      	cmp	r4, r5
 801322c:	d101      	bne.n	8013232 <__sfputs_r+0x12>
 801322e:	2000      	movs	r0, #0
 8013230:	e007      	b.n	8013242 <__sfputs_r+0x22>
 8013232:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013236:	463a      	mov	r2, r7
 8013238:	4630      	mov	r0, r6
 801323a:	f7ff ffda 	bl	80131f2 <__sfputc_r>
 801323e:	1c43      	adds	r3, r0, #1
 8013240:	d1f3      	bne.n	801322a <__sfputs_r+0xa>
 8013242:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013244 <_vfiprintf_r>:
 8013244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013248:	460d      	mov	r5, r1
 801324a:	b09d      	sub	sp, #116	@ 0x74
 801324c:	4614      	mov	r4, r2
 801324e:	4698      	mov	r8, r3
 8013250:	4606      	mov	r6, r0
 8013252:	b118      	cbz	r0, 801325c <_vfiprintf_r+0x18>
 8013254:	6a03      	ldr	r3, [r0, #32]
 8013256:	b90b      	cbnz	r3, 801325c <_vfiprintf_r+0x18>
 8013258:	f7fd fbe0 	bl	8010a1c <__sinit>
 801325c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801325e:	07d9      	lsls	r1, r3, #31
 8013260:	d405      	bmi.n	801326e <_vfiprintf_r+0x2a>
 8013262:	89ab      	ldrh	r3, [r5, #12]
 8013264:	059a      	lsls	r2, r3, #22
 8013266:	d402      	bmi.n	801326e <_vfiprintf_r+0x2a>
 8013268:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801326a:	f7fd fd20 	bl	8010cae <__retarget_lock_acquire_recursive>
 801326e:	89ab      	ldrh	r3, [r5, #12]
 8013270:	071b      	lsls	r3, r3, #28
 8013272:	d501      	bpl.n	8013278 <_vfiprintf_r+0x34>
 8013274:	692b      	ldr	r3, [r5, #16]
 8013276:	b99b      	cbnz	r3, 80132a0 <_vfiprintf_r+0x5c>
 8013278:	4629      	mov	r1, r5
 801327a:	4630      	mov	r0, r6
 801327c:	f000 f938 	bl	80134f0 <__swsetup_r>
 8013280:	b170      	cbz	r0, 80132a0 <_vfiprintf_r+0x5c>
 8013282:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013284:	07dc      	lsls	r4, r3, #31
 8013286:	d504      	bpl.n	8013292 <_vfiprintf_r+0x4e>
 8013288:	f04f 30ff 	mov.w	r0, #4294967295
 801328c:	b01d      	add	sp, #116	@ 0x74
 801328e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013292:	89ab      	ldrh	r3, [r5, #12]
 8013294:	0598      	lsls	r0, r3, #22
 8013296:	d4f7      	bmi.n	8013288 <_vfiprintf_r+0x44>
 8013298:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801329a:	f7fd fd09 	bl	8010cb0 <__retarget_lock_release_recursive>
 801329e:	e7f3      	b.n	8013288 <_vfiprintf_r+0x44>
 80132a0:	2300      	movs	r3, #0
 80132a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80132a4:	2320      	movs	r3, #32
 80132a6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80132aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80132ae:	2330      	movs	r3, #48	@ 0x30
 80132b0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8013460 <_vfiprintf_r+0x21c>
 80132b4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80132b8:	f04f 0901 	mov.w	r9, #1
 80132bc:	4623      	mov	r3, r4
 80132be:	469a      	mov	sl, r3
 80132c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80132c4:	b10a      	cbz	r2, 80132ca <_vfiprintf_r+0x86>
 80132c6:	2a25      	cmp	r2, #37	@ 0x25
 80132c8:	d1f9      	bne.n	80132be <_vfiprintf_r+0x7a>
 80132ca:	ebba 0b04 	subs.w	fp, sl, r4
 80132ce:	d00b      	beq.n	80132e8 <_vfiprintf_r+0xa4>
 80132d0:	465b      	mov	r3, fp
 80132d2:	4622      	mov	r2, r4
 80132d4:	4629      	mov	r1, r5
 80132d6:	4630      	mov	r0, r6
 80132d8:	f7ff ffa2 	bl	8013220 <__sfputs_r>
 80132dc:	3001      	adds	r0, #1
 80132de:	f000 80a7 	beq.w	8013430 <_vfiprintf_r+0x1ec>
 80132e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80132e4:	445a      	add	r2, fp
 80132e6:	9209      	str	r2, [sp, #36]	@ 0x24
 80132e8:	f89a 3000 	ldrb.w	r3, [sl]
 80132ec:	2b00      	cmp	r3, #0
 80132ee:	f000 809f 	beq.w	8013430 <_vfiprintf_r+0x1ec>
 80132f2:	2300      	movs	r3, #0
 80132f4:	f04f 32ff 	mov.w	r2, #4294967295
 80132f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80132fc:	f10a 0a01 	add.w	sl, sl, #1
 8013300:	9304      	str	r3, [sp, #16]
 8013302:	9307      	str	r3, [sp, #28]
 8013304:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013308:	931a      	str	r3, [sp, #104]	@ 0x68
 801330a:	4654      	mov	r4, sl
 801330c:	2205      	movs	r2, #5
 801330e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013312:	4853      	ldr	r0, [pc, #332]	@ (8013460 <_vfiprintf_r+0x21c>)
 8013314:	f7ec ff84 	bl	8000220 <memchr>
 8013318:	9a04      	ldr	r2, [sp, #16]
 801331a:	b9d8      	cbnz	r0, 8013354 <_vfiprintf_r+0x110>
 801331c:	06d1      	lsls	r1, r2, #27
 801331e:	bf44      	itt	mi
 8013320:	2320      	movmi	r3, #32
 8013322:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013326:	0713      	lsls	r3, r2, #28
 8013328:	bf44      	itt	mi
 801332a:	232b      	movmi	r3, #43	@ 0x2b
 801332c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013330:	f89a 3000 	ldrb.w	r3, [sl]
 8013334:	2b2a      	cmp	r3, #42	@ 0x2a
 8013336:	d015      	beq.n	8013364 <_vfiprintf_r+0x120>
 8013338:	9a07      	ldr	r2, [sp, #28]
 801333a:	4654      	mov	r4, sl
 801333c:	2000      	movs	r0, #0
 801333e:	f04f 0c0a 	mov.w	ip, #10
 8013342:	4621      	mov	r1, r4
 8013344:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013348:	3b30      	subs	r3, #48	@ 0x30
 801334a:	2b09      	cmp	r3, #9
 801334c:	d94b      	bls.n	80133e6 <_vfiprintf_r+0x1a2>
 801334e:	b1b0      	cbz	r0, 801337e <_vfiprintf_r+0x13a>
 8013350:	9207      	str	r2, [sp, #28]
 8013352:	e014      	b.n	801337e <_vfiprintf_r+0x13a>
 8013354:	eba0 0308 	sub.w	r3, r0, r8
 8013358:	fa09 f303 	lsl.w	r3, r9, r3
 801335c:	4313      	orrs	r3, r2
 801335e:	9304      	str	r3, [sp, #16]
 8013360:	46a2      	mov	sl, r4
 8013362:	e7d2      	b.n	801330a <_vfiprintf_r+0xc6>
 8013364:	9b03      	ldr	r3, [sp, #12]
 8013366:	1d19      	adds	r1, r3, #4
 8013368:	681b      	ldr	r3, [r3, #0]
 801336a:	9103      	str	r1, [sp, #12]
 801336c:	2b00      	cmp	r3, #0
 801336e:	bfbb      	ittet	lt
 8013370:	425b      	neglt	r3, r3
 8013372:	f042 0202 	orrlt.w	r2, r2, #2
 8013376:	9307      	strge	r3, [sp, #28]
 8013378:	9307      	strlt	r3, [sp, #28]
 801337a:	bfb8      	it	lt
 801337c:	9204      	strlt	r2, [sp, #16]
 801337e:	7823      	ldrb	r3, [r4, #0]
 8013380:	2b2e      	cmp	r3, #46	@ 0x2e
 8013382:	d10a      	bne.n	801339a <_vfiprintf_r+0x156>
 8013384:	7863      	ldrb	r3, [r4, #1]
 8013386:	2b2a      	cmp	r3, #42	@ 0x2a
 8013388:	d132      	bne.n	80133f0 <_vfiprintf_r+0x1ac>
 801338a:	9b03      	ldr	r3, [sp, #12]
 801338c:	1d1a      	adds	r2, r3, #4
 801338e:	681b      	ldr	r3, [r3, #0]
 8013390:	9203      	str	r2, [sp, #12]
 8013392:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013396:	3402      	adds	r4, #2
 8013398:	9305      	str	r3, [sp, #20]
 801339a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8013470 <_vfiprintf_r+0x22c>
 801339e:	7821      	ldrb	r1, [r4, #0]
 80133a0:	2203      	movs	r2, #3
 80133a2:	4650      	mov	r0, sl
 80133a4:	f7ec ff3c 	bl	8000220 <memchr>
 80133a8:	b138      	cbz	r0, 80133ba <_vfiprintf_r+0x176>
 80133aa:	9b04      	ldr	r3, [sp, #16]
 80133ac:	eba0 000a 	sub.w	r0, r0, sl
 80133b0:	2240      	movs	r2, #64	@ 0x40
 80133b2:	4082      	lsls	r2, r0
 80133b4:	4313      	orrs	r3, r2
 80133b6:	3401      	adds	r4, #1
 80133b8:	9304      	str	r3, [sp, #16]
 80133ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80133be:	4829      	ldr	r0, [pc, #164]	@ (8013464 <_vfiprintf_r+0x220>)
 80133c0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80133c4:	2206      	movs	r2, #6
 80133c6:	f7ec ff2b 	bl	8000220 <memchr>
 80133ca:	2800      	cmp	r0, #0
 80133cc:	d03f      	beq.n	801344e <_vfiprintf_r+0x20a>
 80133ce:	4b26      	ldr	r3, [pc, #152]	@ (8013468 <_vfiprintf_r+0x224>)
 80133d0:	bb1b      	cbnz	r3, 801341a <_vfiprintf_r+0x1d6>
 80133d2:	9b03      	ldr	r3, [sp, #12]
 80133d4:	3307      	adds	r3, #7
 80133d6:	f023 0307 	bic.w	r3, r3, #7
 80133da:	3308      	adds	r3, #8
 80133dc:	9303      	str	r3, [sp, #12]
 80133de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80133e0:	443b      	add	r3, r7
 80133e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80133e4:	e76a      	b.n	80132bc <_vfiprintf_r+0x78>
 80133e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80133ea:	460c      	mov	r4, r1
 80133ec:	2001      	movs	r0, #1
 80133ee:	e7a8      	b.n	8013342 <_vfiprintf_r+0xfe>
 80133f0:	2300      	movs	r3, #0
 80133f2:	3401      	adds	r4, #1
 80133f4:	9305      	str	r3, [sp, #20]
 80133f6:	4619      	mov	r1, r3
 80133f8:	f04f 0c0a 	mov.w	ip, #10
 80133fc:	4620      	mov	r0, r4
 80133fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013402:	3a30      	subs	r2, #48	@ 0x30
 8013404:	2a09      	cmp	r2, #9
 8013406:	d903      	bls.n	8013410 <_vfiprintf_r+0x1cc>
 8013408:	2b00      	cmp	r3, #0
 801340a:	d0c6      	beq.n	801339a <_vfiprintf_r+0x156>
 801340c:	9105      	str	r1, [sp, #20]
 801340e:	e7c4      	b.n	801339a <_vfiprintf_r+0x156>
 8013410:	fb0c 2101 	mla	r1, ip, r1, r2
 8013414:	4604      	mov	r4, r0
 8013416:	2301      	movs	r3, #1
 8013418:	e7f0      	b.n	80133fc <_vfiprintf_r+0x1b8>
 801341a:	ab03      	add	r3, sp, #12
 801341c:	9300      	str	r3, [sp, #0]
 801341e:	462a      	mov	r2, r5
 8013420:	4b12      	ldr	r3, [pc, #72]	@ (801346c <_vfiprintf_r+0x228>)
 8013422:	a904      	add	r1, sp, #16
 8013424:	4630      	mov	r0, r6
 8013426:	f7fc fca1 	bl	800fd6c <_printf_float>
 801342a:	4607      	mov	r7, r0
 801342c:	1c78      	adds	r0, r7, #1
 801342e:	d1d6      	bne.n	80133de <_vfiprintf_r+0x19a>
 8013430:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013432:	07d9      	lsls	r1, r3, #31
 8013434:	d405      	bmi.n	8013442 <_vfiprintf_r+0x1fe>
 8013436:	89ab      	ldrh	r3, [r5, #12]
 8013438:	059a      	lsls	r2, r3, #22
 801343a:	d402      	bmi.n	8013442 <_vfiprintf_r+0x1fe>
 801343c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801343e:	f7fd fc37 	bl	8010cb0 <__retarget_lock_release_recursive>
 8013442:	89ab      	ldrh	r3, [r5, #12]
 8013444:	065b      	lsls	r3, r3, #25
 8013446:	f53f af1f 	bmi.w	8013288 <_vfiprintf_r+0x44>
 801344a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801344c:	e71e      	b.n	801328c <_vfiprintf_r+0x48>
 801344e:	ab03      	add	r3, sp, #12
 8013450:	9300      	str	r3, [sp, #0]
 8013452:	462a      	mov	r2, r5
 8013454:	4b05      	ldr	r3, [pc, #20]	@ (801346c <_vfiprintf_r+0x228>)
 8013456:	a904      	add	r1, sp, #16
 8013458:	4630      	mov	r0, r6
 801345a:	f7fc ff1f 	bl	801029c <_printf_i>
 801345e:	e7e4      	b.n	801342a <_vfiprintf_r+0x1e6>
 8013460:	08013ef9 	.word	0x08013ef9
 8013464:	08013f03 	.word	0x08013f03
 8013468:	0800fd6d 	.word	0x0800fd6d
 801346c:	08013221 	.word	0x08013221
 8013470:	08013eff 	.word	0x08013eff

08013474 <__swbuf_r>:
 8013474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013476:	460e      	mov	r6, r1
 8013478:	4614      	mov	r4, r2
 801347a:	4605      	mov	r5, r0
 801347c:	b118      	cbz	r0, 8013486 <__swbuf_r+0x12>
 801347e:	6a03      	ldr	r3, [r0, #32]
 8013480:	b90b      	cbnz	r3, 8013486 <__swbuf_r+0x12>
 8013482:	f7fd facb 	bl	8010a1c <__sinit>
 8013486:	69a3      	ldr	r3, [r4, #24]
 8013488:	60a3      	str	r3, [r4, #8]
 801348a:	89a3      	ldrh	r3, [r4, #12]
 801348c:	071a      	lsls	r2, r3, #28
 801348e:	d501      	bpl.n	8013494 <__swbuf_r+0x20>
 8013490:	6923      	ldr	r3, [r4, #16]
 8013492:	b943      	cbnz	r3, 80134a6 <__swbuf_r+0x32>
 8013494:	4621      	mov	r1, r4
 8013496:	4628      	mov	r0, r5
 8013498:	f000 f82a 	bl	80134f0 <__swsetup_r>
 801349c:	b118      	cbz	r0, 80134a6 <__swbuf_r+0x32>
 801349e:	f04f 37ff 	mov.w	r7, #4294967295
 80134a2:	4638      	mov	r0, r7
 80134a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80134a6:	6823      	ldr	r3, [r4, #0]
 80134a8:	6922      	ldr	r2, [r4, #16]
 80134aa:	1a98      	subs	r0, r3, r2
 80134ac:	6963      	ldr	r3, [r4, #20]
 80134ae:	b2f6      	uxtb	r6, r6
 80134b0:	4283      	cmp	r3, r0
 80134b2:	4637      	mov	r7, r6
 80134b4:	dc05      	bgt.n	80134c2 <__swbuf_r+0x4e>
 80134b6:	4621      	mov	r1, r4
 80134b8:	4628      	mov	r0, r5
 80134ba:	f7ff fdc7 	bl	801304c <_fflush_r>
 80134be:	2800      	cmp	r0, #0
 80134c0:	d1ed      	bne.n	801349e <__swbuf_r+0x2a>
 80134c2:	68a3      	ldr	r3, [r4, #8]
 80134c4:	3b01      	subs	r3, #1
 80134c6:	60a3      	str	r3, [r4, #8]
 80134c8:	6823      	ldr	r3, [r4, #0]
 80134ca:	1c5a      	adds	r2, r3, #1
 80134cc:	6022      	str	r2, [r4, #0]
 80134ce:	701e      	strb	r6, [r3, #0]
 80134d0:	6962      	ldr	r2, [r4, #20]
 80134d2:	1c43      	adds	r3, r0, #1
 80134d4:	429a      	cmp	r2, r3
 80134d6:	d004      	beq.n	80134e2 <__swbuf_r+0x6e>
 80134d8:	89a3      	ldrh	r3, [r4, #12]
 80134da:	07db      	lsls	r3, r3, #31
 80134dc:	d5e1      	bpl.n	80134a2 <__swbuf_r+0x2e>
 80134de:	2e0a      	cmp	r6, #10
 80134e0:	d1df      	bne.n	80134a2 <__swbuf_r+0x2e>
 80134e2:	4621      	mov	r1, r4
 80134e4:	4628      	mov	r0, r5
 80134e6:	f7ff fdb1 	bl	801304c <_fflush_r>
 80134ea:	2800      	cmp	r0, #0
 80134ec:	d0d9      	beq.n	80134a2 <__swbuf_r+0x2e>
 80134ee:	e7d6      	b.n	801349e <__swbuf_r+0x2a>

080134f0 <__swsetup_r>:
 80134f0:	b538      	push	{r3, r4, r5, lr}
 80134f2:	4b29      	ldr	r3, [pc, #164]	@ (8013598 <__swsetup_r+0xa8>)
 80134f4:	4605      	mov	r5, r0
 80134f6:	6818      	ldr	r0, [r3, #0]
 80134f8:	460c      	mov	r4, r1
 80134fa:	b118      	cbz	r0, 8013504 <__swsetup_r+0x14>
 80134fc:	6a03      	ldr	r3, [r0, #32]
 80134fe:	b90b      	cbnz	r3, 8013504 <__swsetup_r+0x14>
 8013500:	f7fd fa8c 	bl	8010a1c <__sinit>
 8013504:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013508:	0719      	lsls	r1, r3, #28
 801350a:	d422      	bmi.n	8013552 <__swsetup_r+0x62>
 801350c:	06da      	lsls	r2, r3, #27
 801350e:	d407      	bmi.n	8013520 <__swsetup_r+0x30>
 8013510:	2209      	movs	r2, #9
 8013512:	602a      	str	r2, [r5, #0]
 8013514:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013518:	81a3      	strh	r3, [r4, #12]
 801351a:	f04f 30ff 	mov.w	r0, #4294967295
 801351e:	e033      	b.n	8013588 <__swsetup_r+0x98>
 8013520:	0758      	lsls	r0, r3, #29
 8013522:	d512      	bpl.n	801354a <__swsetup_r+0x5a>
 8013524:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013526:	b141      	cbz	r1, 801353a <__swsetup_r+0x4a>
 8013528:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801352c:	4299      	cmp	r1, r3
 801352e:	d002      	beq.n	8013536 <__swsetup_r+0x46>
 8013530:	4628      	mov	r0, r5
 8013532:	f7fe fa29 	bl	8011988 <_free_r>
 8013536:	2300      	movs	r3, #0
 8013538:	6363      	str	r3, [r4, #52]	@ 0x34
 801353a:	89a3      	ldrh	r3, [r4, #12]
 801353c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8013540:	81a3      	strh	r3, [r4, #12]
 8013542:	2300      	movs	r3, #0
 8013544:	6063      	str	r3, [r4, #4]
 8013546:	6923      	ldr	r3, [r4, #16]
 8013548:	6023      	str	r3, [r4, #0]
 801354a:	89a3      	ldrh	r3, [r4, #12]
 801354c:	f043 0308 	orr.w	r3, r3, #8
 8013550:	81a3      	strh	r3, [r4, #12]
 8013552:	6923      	ldr	r3, [r4, #16]
 8013554:	b94b      	cbnz	r3, 801356a <__swsetup_r+0x7a>
 8013556:	89a3      	ldrh	r3, [r4, #12]
 8013558:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801355c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013560:	d003      	beq.n	801356a <__swsetup_r+0x7a>
 8013562:	4621      	mov	r1, r4
 8013564:	4628      	mov	r0, r5
 8013566:	f000 f883 	bl	8013670 <__smakebuf_r>
 801356a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801356e:	f013 0201 	ands.w	r2, r3, #1
 8013572:	d00a      	beq.n	801358a <__swsetup_r+0x9a>
 8013574:	2200      	movs	r2, #0
 8013576:	60a2      	str	r2, [r4, #8]
 8013578:	6962      	ldr	r2, [r4, #20]
 801357a:	4252      	negs	r2, r2
 801357c:	61a2      	str	r2, [r4, #24]
 801357e:	6922      	ldr	r2, [r4, #16]
 8013580:	b942      	cbnz	r2, 8013594 <__swsetup_r+0xa4>
 8013582:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8013586:	d1c5      	bne.n	8013514 <__swsetup_r+0x24>
 8013588:	bd38      	pop	{r3, r4, r5, pc}
 801358a:	0799      	lsls	r1, r3, #30
 801358c:	bf58      	it	pl
 801358e:	6962      	ldrpl	r2, [r4, #20]
 8013590:	60a2      	str	r2, [r4, #8]
 8013592:	e7f4      	b.n	801357e <__swsetup_r+0x8e>
 8013594:	2000      	movs	r0, #0
 8013596:	e7f7      	b.n	8013588 <__swsetup_r+0x98>
 8013598:	20000208 	.word	0x20000208

0801359c <_raise_r>:
 801359c:	291f      	cmp	r1, #31
 801359e:	b538      	push	{r3, r4, r5, lr}
 80135a0:	4605      	mov	r5, r0
 80135a2:	460c      	mov	r4, r1
 80135a4:	d904      	bls.n	80135b0 <_raise_r+0x14>
 80135a6:	2316      	movs	r3, #22
 80135a8:	6003      	str	r3, [r0, #0]
 80135aa:	f04f 30ff 	mov.w	r0, #4294967295
 80135ae:	bd38      	pop	{r3, r4, r5, pc}
 80135b0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80135b2:	b112      	cbz	r2, 80135ba <_raise_r+0x1e>
 80135b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80135b8:	b94b      	cbnz	r3, 80135ce <_raise_r+0x32>
 80135ba:	4628      	mov	r0, r5
 80135bc:	f000 f830 	bl	8013620 <_getpid_r>
 80135c0:	4622      	mov	r2, r4
 80135c2:	4601      	mov	r1, r0
 80135c4:	4628      	mov	r0, r5
 80135c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80135ca:	f000 b817 	b.w	80135fc <_kill_r>
 80135ce:	2b01      	cmp	r3, #1
 80135d0:	d00a      	beq.n	80135e8 <_raise_r+0x4c>
 80135d2:	1c59      	adds	r1, r3, #1
 80135d4:	d103      	bne.n	80135de <_raise_r+0x42>
 80135d6:	2316      	movs	r3, #22
 80135d8:	6003      	str	r3, [r0, #0]
 80135da:	2001      	movs	r0, #1
 80135dc:	e7e7      	b.n	80135ae <_raise_r+0x12>
 80135de:	2100      	movs	r1, #0
 80135e0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80135e4:	4620      	mov	r0, r4
 80135e6:	4798      	blx	r3
 80135e8:	2000      	movs	r0, #0
 80135ea:	e7e0      	b.n	80135ae <_raise_r+0x12>

080135ec <raise>:
 80135ec:	4b02      	ldr	r3, [pc, #8]	@ (80135f8 <raise+0xc>)
 80135ee:	4601      	mov	r1, r0
 80135f0:	6818      	ldr	r0, [r3, #0]
 80135f2:	f7ff bfd3 	b.w	801359c <_raise_r>
 80135f6:	bf00      	nop
 80135f8:	20000208 	.word	0x20000208

080135fc <_kill_r>:
 80135fc:	b538      	push	{r3, r4, r5, lr}
 80135fe:	4d07      	ldr	r5, [pc, #28]	@ (801361c <_kill_r+0x20>)
 8013600:	2300      	movs	r3, #0
 8013602:	4604      	mov	r4, r0
 8013604:	4608      	mov	r0, r1
 8013606:	4611      	mov	r1, r2
 8013608:	602b      	str	r3, [r5, #0]
 801360a:	f7ee fcc5 	bl	8001f98 <_kill>
 801360e:	1c43      	adds	r3, r0, #1
 8013610:	d102      	bne.n	8013618 <_kill_r+0x1c>
 8013612:	682b      	ldr	r3, [r5, #0]
 8013614:	b103      	cbz	r3, 8013618 <_kill_r+0x1c>
 8013616:	6023      	str	r3, [r4, #0]
 8013618:	bd38      	pop	{r3, r4, r5, pc}
 801361a:	bf00      	nop
 801361c:	20000b28 	.word	0x20000b28

08013620 <_getpid_r>:
 8013620:	f7ee bcb2 	b.w	8001f88 <_getpid>

08013624 <__swhatbuf_r>:
 8013624:	b570      	push	{r4, r5, r6, lr}
 8013626:	460c      	mov	r4, r1
 8013628:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801362c:	2900      	cmp	r1, #0
 801362e:	b096      	sub	sp, #88	@ 0x58
 8013630:	4615      	mov	r5, r2
 8013632:	461e      	mov	r6, r3
 8013634:	da0d      	bge.n	8013652 <__swhatbuf_r+0x2e>
 8013636:	89a3      	ldrh	r3, [r4, #12]
 8013638:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801363c:	f04f 0100 	mov.w	r1, #0
 8013640:	bf14      	ite	ne
 8013642:	2340      	movne	r3, #64	@ 0x40
 8013644:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8013648:	2000      	movs	r0, #0
 801364a:	6031      	str	r1, [r6, #0]
 801364c:	602b      	str	r3, [r5, #0]
 801364e:	b016      	add	sp, #88	@ 0x58
 8013650:	bd70      	pop	{r4, r5, r6, pc}
 8013652:	466a      	mov	r2, sp
 8013654:	f000 f848 	bl	80136e8 <_fstat_r>
 8013658:	2800      	cmp	r0, #0
 801365a:	dbec      	blt.n	8013636 <__swhatbuf_r+0x12>
 801365c:	9901      	ldr	r1, [sp, #4]
 801365e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8013662:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8013666:	4259      	negs	r1, r3
 8013668:	4159      	adcs	r1, r3
 801366a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801366e:	e7eb      	b.n	8013648 <__swhatbuf_r+0x24>

08013670 <__smakebuf_r>:
 8013670:	898b      	ldrh	r3, [r1, #12]
 8013672:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013674:	079d      	lsls	r5, r3, #30
 8013676:	4606      	mov	r6, r0
 8013678:	460c      	mov	r4, r1
 801367a:	d507      	bpl.n	801368c <__smakebuf_r+0x1c>
 801367c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8013680:	6023      	str	r3, [r4, #0]
 8013682:	6123      	str	r3, [r4, #16]
 8013684:	2301      	movs	r3, #1
 8013686:	6163      	str	r3, [r4, #20]
 8013688:	b003      	add	sp, #12
 801368a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801368c:	ab01      	add	r3, sp, #4
 801368e:	466a      	mov	r2, sp
 8013690:	f7ff ffc8 	bl	8013624 <__swhatbuf_r>
 8013694:	9f00      	ldr	r7, [sp, #0]
 8013696:	4605      	mov	r5, r0
 8013698:	4639      	mov	r1, r7
 801369a:	4630      	mov	r0, r6
 801369c:	f7fe fd22 	bl	80120e4 <_malloc_r>
 80136a0:	b948      	cbnz	r0, 80136b6 <__smakebuf_r+0x46>
 80136a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80136a6:	059a      	lsls	r2, r3, #22
 80136a8:	d4ee      	bmi.n	8013688 <__smakebuf_r+0x18>
 80136aa:	f023 0303 	bic.w	r3, r3, #3
 80136ae:	f043 0302 	orr.w	r3, r3, #2
 80136b2:	81a3      	strh	r3, [r4, #12]
 80136b4:	e7e2      	b.n	801367c <__smakebuf_r+0xc>
 80136b6:	89a3      	ldrh	r3, [r4, #12]
 80136b8:	6020      	str	r0, [r4, #0]
 80136ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80136be:	81a3      	strh	r3, [r4, #12]
 80136c0:	9b01      	ldr	r3, [sp, #4]
 80136c2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80136c6:	b15b      	cbz	r3, 80136e0 <__smakebuf_r+0x70>
 80136c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80136cc:	4630      	mov	r0, r6
 80136ce:	f000 f81d 	bl	801370c <_isatty_r>
 80136d2:	b128      	cbz	r0, 80136e0 <__smakebuf_r+0x70>
 80136d4:	89a3      	ldrh	r3, [r4, #12]
 80136d6:	f023 0303 	bic.w	r3, r3, #3
 80136da:	f043 0301 	orr.w	r3, r3, #1
 80136de:	81a3      	strh	r3, [r4, #12]
 80136e0:	89a3      	ldrh	r3, [r4, #12]
 80136e2:	431d      	orrs	r5, r3
 80136e4:	81a5      	strh	r5, [r4, #12]
 80136e6:	e7cf      	b.n	8013688 <__smakebuf_r+0x18>

080136e8 <_fstat_r>:
 80136e8:	b538      	push	{r3, r4, r5, lr}
 80136ea:	4d07      	ldr	r5, [pc, #28]	@ (8013708 <_fstat_r+0x20>)
 80136ec:	2300      	movs	r3, #0
 80136ee:	4604      	mov	r4, r0
 80136f0:	4608      	mov	r0, r1
 80136f2:	4611      	mov	r1, r2
 80136f4:	602b      	str	r3, [r5, #0]
 80136f6:	f7ee fcaf 	bl	8002058 <_fstat>
 80136fa:	1c43      	adds	r3, r0, #1
 80136fc:	d102      	bne.n	8013704 <_fstat_r+0x1c>
 80136fe:	682b      	ldr	r3, [r5, #0]
 8013700:	b103      	cbz	r3, 8013704 <_fstat_r+0x1c>
 8013702:	6023      	str	r3, [r4, #0]
 8013704:	bd38      	pop	{r3, r4, r5, pc}
 8013706:	bf00      	nop
 8013708:	20000b28 	.word	0x20000b28

0801370c <_isatty_r>:
 801370c:	b538      	push	{r3, r4, r5, lr}
 801370e:	4d06      	ldr	r5, [pc, #24]	@ (8013728 <_isatty_r+0x1c>)
 8013710:	2300      	movs	r3, #0
 8013712:	4604      	mov	r4, r0
 8013714:	4608      	mov	r0, r1
 8013716:	602b      	str	r3, [r5, #0]
 8013718:	f7ee fcae 	bl	8002078 <_isatty>
 801371c:	1c43      	adds	r3, r0, #1
 801371e:	d102      	bne.n	8013726 <_isatty_r+0x1a>
 8013720:	682b      	ldr	r3, [r5, #0]
 8013722:	b103      	cbz	r3, 8013726 <_isatty_r+0x1a>
 8013724:	6023      	str	r3, [r4, #0]
 8013726:	bd38      	pop	{r3, r4, r5, pc}
 8013728:	20000b28 	.word	0x20000b28

0801372c <fmod>:
 801372c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801372e:	ed2d 8b02 	vpush	{d8}
 8013732:	ec57 6b10 	vmov	r6, r7, d0
 8013736:	ec55 4b11 	vmov	r4, r5, d1
 801373a:	f000 f825 	bl	8013788 <__ieee754_fmod>
 801373e:	4622      	mov	r2, r4
 8013740:	462b      	mov	r3, r5
 8013742:	4630      	mov	r0, r6
 8013744:	4639      	mov	r1, r7
 8013746:	eeb0 8a40 	vmov.f32	s16, s0
 801374a:	eef0 8a60 	vmov.f32	s17, s1
 801374e:	f7ed fa15 	bl	8000b7c <__aeabi_dcmpun>
 8013752:	b990      	cbnz	r0, 801377a <fmod+0x4e>
 8013754:	2200      	movs	r2, #0
 8013756:	2300      	movs	r3, #0
 8013758:	4620      	mov	r0, r4
 801375a:	4629      	mov	r1, r5
 801375c:	f7ed f9dc 	bl	8000b18 <__aeabi_dcmpeq>
 8013760:	b158      	cbz	r0, 801377a <fmod+0x4e>
 8013762:	f7fd fa79 	bl	8010c58 <__errno>
 8013766:	2321      	movs	r3, #33	@ 0x21
 8013768:	6003      	str	r3, [r0, #0]
 801376a:	2200      	movs	r2, #0
 801376c:	2300      	movs	r3, #0
 801376e:	4610      	mov	r0, r2
 8013770:	4619      	mov	r1, r3
 8013772:	f7ed f893 	bl	800089c <__aeabi_ddiv>
 8013776:	ec41 0b18 	vmov	d8, r0, r1
 801377a:	eeb0 0a48 	vmov.f32	s0, s16
 801377e:	eef0 0a68 	vmov.f32	s1, s17
 8013782:	ecbd 8b02 	vpop	{d8}
 8013786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013788 <__ieee754_fmod>:
 8013788:	ec53 2b11 	vmov	r2, r3, d1
 801378c:	f023 4c00 	bic.w	ip, r3, #2147483648	@ 0x80000000
 8013790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013794:	ea52 040c 	orrs.w	r4, r2, ip
 8013798:	ec51 0b10 	vmov	r0, r1, d0
 801379c:	461e      	mov	r6, r3
 801379e:	4617      	mov	r7, r2
 80137a0:	4696      	mov	lr, r2
 80137a2:	d00c      	beq.n	80137be <__ieee754_fmod+0x36>
 80137a4:	4c77      	ldr	r4, [pc, #476]	@ (8013984 <__ieee754_fmod+0x1fc>)
 80137a6:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 80137aa:	45a0      	cmp	r8, r4
 80137ac:	4689      	mov	r9, r1
 80137ae:	d806      	bhi.n	80137be <__ieee754_fmod+0x36>
 80137b0:	4254      	negs	r4, r2
 80137b2:	4d75      	ldr	r5, [pc, #468]	@ (8013988 <__ieee754_fmod+0x200>)
 80137b4:	4314      	orrs	r4, r2
 80137b6:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 80137ba:	42ac      	cmp	r4, r5
 80137bc:	d909      	bls.n	80137d2 <__ieee754_fmod+0x4a>
 80137be:	f7ec ff43 	bl	8000648 <__aeabi_dmul>
 80137c2:	4602      	mov	r2, r0
 80137c4:	460b      	mov	r3, r1
 80137c6:	f7ed f869 	bl	800089c <__aeabi_ddiv>
 80137ca:	ec41 0b10 	vmov	d0, r0, r1
 80137ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80137d2:	45e0      	cmp	r8, ip
 80137d4:	4682      	mov	sl, r0
 80137d6:	4604      	mov	r4, r0
 80137d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80137dc:	dc09      	bgt.n	80137f2 <__ieee754_fmod+0x6a>
 80137de:	dbf4      	blt.n	80137ca <__ieee754_fmod+0x42>
 80137e0:	4282      	cmp	r2, r0
 80137e2:	d8f2      	bhi.n	80137ca <__ieee754_fmod+0x42>
 80137e4:	d105      	bne.n	80137f2 <__ieee754_fmod+0x6a>
 80137e6:	4b69      	ldr	r3, [pc, #420]	@ (801398c <__ieee754_fmod+0x204>)
 80137e8:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 80137ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80137f0:	e7eb      	b.n	80137ca <__ieee754_fmod+0x42>
 80137f2:	4a65      	ldr	r2, [pc, #404]	@ (8013988 <__ieee754_fmod+0x200>)
 80137f4:	ea19 0f02 	tst.w	r9, r2
 80137f8:	d148      	bne.n	801388c <__ieee754_fmod+0x104>
 80137fa:	f1b8 0f00 	cmp.w	r8, #0
 80137fe:	d13d      	bne.n	801387c <__ieee754_fmod+0xf4>
 8013800:	4963      	ldr	r1, [pc, #396]	@ (8013990 <__ieee754_fmod+0x208>)
 8013802:	4653      	mov	r3, sl
 8013804:	2b00      	cmp	r3, #0
 8013806:	dc36      	bgt.n	8013876 <__ieee754_fmod+0xee>
 8013808:	4216      	tst	r6, r2
 801380a:	d14f      	bne.n	80138ac <__ieee754_fmod+0x124>
 801380c:	f1bc 0f00 	cmp.w	ip, #0
 8013810:	d144      	bne.n	801389c <__ieee754_fmod+0x114>
 8013812:	4a5f      	ldr	r2, [pc, #380]	@ (8013990 <__ieee754_fmod+0x208>)
 8013814:	463b      	mov	r3, r7
 8013816:	2b00      	cmp	r3, #0
 8013818:	dc3d      	bgt.n	8013896 <__ieee754_fmod+0x10e>
 801381a:	485e      	ldr	r0, [pc, #376]	@ (8013994 <__ieee754_fmod+0x20c>)
 801381c:	4281      	cmp	r1, r0
 801381e:	db4a      	blt.n	80138b6 <__ieee754_fmod+0x12e>
 8013820:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013824:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8013828:	485a      	ldr	r0, [pc, #360]	@ (8013994 <__ieee754_fmod+0x20c>)
 801382a:	4282      	cmp	r2, r0
 801382c:	db57      	blt.n	80138de <__ieee754_fmod+0x156>
 801382e:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8013832:	f446 1680 	orr.w	r6, r6, #1048576	@ 0x100000
 8013836:	1a89      	subs	r1, r1, r2
 8013838:	1b98      	subs	r0, r3, r6
 801383a:	eba4 070e 	sub.w	r7, r4, lr
 801383e:	2900      	cmp	r1, #0
 8013840:	d162      	bne.n	8013908 <__ieee754_fmod+0x180>
 8013842:	4574      	cmp	r4, lr
 8013844:	bf38      	it	cc
 8013846:	f100 30ff 	addcc.w	r0, r0, #4294967295
 801384a:	2800      	cmp	r0, #0
 801384c:	bfa4      	itt	ge
 801384e:	463c      	movge	r4, r7
 8013850:	4603      	movge	r3, r0
 8013852:	ea53 0104 	orrs.w	r1, r3, r4
 8013856:	d0c6      	beq.n	80137e6 <__ieee754_fmod+0x5e>
 8013858:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801385c:	db69      	blt.n	8013932 <__ieee754_fmod+0x1aa>
 801385e:	494d      	ldr	r1, [pc, #308]	@ (8013994 <__ieee754_fmod+0x20c>)
 8013860:	428a      	cmp	r2, r1
 8013862:	db6c      	blt.n	801393e <__ieee754_fmod+0x1b6>
 8013864:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8013868:	432b      	orrs	r3, r5
 801386a:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 801386e:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8013872:	4620      	mov	r0, r4
 8013874:	e7a9      	b.n	80137ca <__ieee754_fmod+0x42>
 8013876:	3901      	subs	r1, #1
 8013878:	005b      	lsls	r3, r3, #1
 801387a:	e7c3      	b.n	8013804 <__ieee754_fmod+0x7c>
 801387c:	4945      	ldr	r1, [pc, #276]	@ (8013994 <__ieee754_fmod+0x20c>)
 801387e:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 8013882:	2b00      	cmp	r3, #0
 8013884:	ddc0      	ble.n	8013808 <__ieee754_fmod+0x80>
 8013886:	3901      	subs	r1, #1
 8013888:	005b      	lsls	r3, r3, #1
 801388a:	e7fa      	b.n	8013882 <__ieee754_fmod+0xfa>
 801388c:	ea4f 5128 	mov.w	r1, r8, asr #20
 8013890:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8013894:	e7b8      	b.n	8013808 <__ieee754_fmod+0x80>
 8013896:	3a01      	subs	r2, #1
 8013898:	005b      	lsls	r3, r3, #1
 801389a:	e7bc      	b.n	8013816 <__ieee754_fmod+0x8e>
 801389c:	4a3d      	ldr	r2, [pc, #244]	@ (8013994 <__ieee754_fmod+0x20c>)
 801389e:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 80138a2:	2b00      	cmp	r3, #0
 80138a4:	ddb9      	ble.n	801381a <__ieee754_fmod+0x92>
 80138a6:	3a01      	subs	r2, #1
 80138a8:	005b      	lsls	r3, r3, #1
 80138aa:	e7fa      	b.n	80138a2 <__ieee754_fmod+0x11a>
 80138ac:	ea4f 522c 	mov.w	r2, ip, asr #20
 80138b0:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80138b4:	e7b1      	b.n	801381a <__ieee754_fmod+0x92>
 80138b6:	1a40      	subs	r0, r0, r1
 80138b8:	281f      	cmp	r0, #31
 80138ba:	dc0a      	bgt.n	80138d2 <__ieee754_fmod+0x14a>
 80138bc:	f201 431e 	addw	r3, r1, #1054	@ 0x41e
 80138c0:	fa08 f800 	lsl.w	r8, r8, r0
 80138c4:	fa2a f303 	lsr.w	r3, sl, r3
 80138c8:	ea43 0308 	orr.w	r3, r3, r8
 80138cc:	fa0a f400 	lsl.w	r4, sl, r0
 80138d0:	e7aa      	b.n	8013828 <__ieee754_fmod+0xa0>
 80138d2:	4b31      	ldr	r3, [pc, #196]	@ (8013998 <__ieee754_fmod+0x210>)
 80138d4:	1a5b      	subs	r3, r3, r1
 80138d6:	fa0a f303 	lsl.w	r3, sl, r3
 80138da:	2400      	movs	r4, #0
 80138dc:	e7a4      	b.n	8013828 <__ieee754_fmod+0xa0>
 80138de:	1a80      	subs	r0, r0, r2
 80138e0:	281f      	cmp	r0, #31
 80138e2:	dc0a      	bgt.n	80138fa <__ieee754_fmod+0x172>
 80138e4:	f202 461e 	addw	r6, r2, #1054	@ 0x41e
 80138e8:	fa0c fc00 	lsl.w	ip, ip, r0
 80138ec:	fa27 f606 	lsr.w	r6, r7, r6
 80138f0:	ea46 060c 	orr.w	r6, r6, ip
 80138f4:	fa07 fe00 	lsl.w	lr, r7, r0
 80138f8:	e79d      	b.n	8013836 <__ieee754_fmod+0xae>
 80138fa:	4e27      	ldr	r6, [pc, #156]	@ (8013998 <__ieee754_fmod+0x210>)
 80138fc:	1ab6      	subs	r6, r6, r2
 80138fe:	fa07 f606 	lsl.w	r6, r7, r6
 8013902:	f04f 0e00 	mov.w	lr, #0
 8013906:	e796      	b.n	8013836 <__ieee754_fmod+0xae>
 8013908:	4574      	cmp	r4, lr
 801390a:	bf38      	it	cc
 801390c:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8013910:	2800      	cmp	r0, #0
 8013912:	da05      	bge.n	8013920 <__ieee754_fmod+0x198>
 8013914:	0fe0      	lsrs	r0, r4, #31
 8013916:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801391a:	0064      	lsls	r4, r4, #1
 801391c:	3901      	subs	r1, #1
 801391e:	e78b      	b.n	8013838 <__ieee754_fmod+0xb0>
 8013920:	ea50 0307 	orrs.w	r3, r0, r7
 8013924:	f43f af5f 	beq.w	80137e6 <__ieee754_fmod+0x5e>
 8013928:	0ffb      	lsrs	r3, r7, #31
 801392a:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 801392e:	007c      	lsls	r4, r7, #1
 8013930:	e7f4      	b.n	801391c <__ieee754_fmod+0x194>
 8013932:	0fe1      	lsrs	r1, r4, #31
 8013934:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8013938:	0064      	lsls	r4, r4, #1
 801393a:	3a01      	subs	r2, #1
 801393c:	e78c      	b.n	8013858 <__ieee754_fmod+0xd0>
 801393e:	1a89      	subs	r1, r1, r2
 8013940:	2914      	cmp	r1, #20
 8013942:	dc0a      	bgt.n	801395a <__ieee754_fmod+0x1d2>
 8013944:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 8013948:	fa03 f202 	lsl.w	r2, r3, r2
 801394c:	40cc      	lsrs	r4, r1
 801394e:	4322      	orrs	r2, r4
 8013950:	410b      	asrs	r3, r1
 8013952:	ea43 0105 	orr.w	r1, r3, r5
 8013956:	4610      	mov	r0, r2
 8013958:	e737      	b.n	80137ca <__ieee754_fmod+0x42>
 801395a:	291f      	cmp	r1, #31
 801395c:	dc07      	bgt.n	801396e <__ieee754_fmod+0x1e6>
 801395e:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 8013962:	40cc      	lsrs	r4, r1
 8013964:	fa03 f202 	lsl.w	r2, r3, r2
 8013968:	4322      	orrs	r2, r4
 801396a:	462b      	mov	r3, r5
 801396c:	e7f1      	b.n	8013952 <__ieee754_fmod+0x1ca>
 801396e:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 8013972:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 8013976:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 801397a:	32e2      	adds	r2, #226	@ 0xe2
 801397c:	fa43 f202 	asr.w	r2, r3, r2
 8013980:	e7f3      	b.n	801396a <__ieee754_fmod+0x1e2>
 8013982:	bf00      	nop
 8013984:	7fefffff 	.word	0x7fefffff
 8013988:	7ff00000 	.word	0x7ff00000
 801398c:	08013f48 	.word	0x08013f48
 8013990:	fffffbed 	.word	0xfffffbed
 8013994:	fffffc02 	.word	0xfffffc02
 8013998:	fffffbe2 	.word	0xfffffbe2

0801399c <_init>:
 801399c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801399e:	bf00      	nop
 80139a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80139a2:	bc08      	pop	{r3}
 80139a4:	469e      	mov	lr, r3
 80139a6:	4770      	bx	lr

080139a8 <_fini>:
 80139a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80139aa:	bf00      	nop
 80139ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80139ae:	bc08      	pop	{r3}
 80139b0:	469e      	mov	lr, r3
 80139b2:	4770      	bx	lr
>>>>>>> f88694781bd54d0bca96bec7ac145bdac62fa329
