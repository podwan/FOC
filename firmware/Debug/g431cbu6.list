
g431cbu6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005eec  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080060c4  080060c4  000160c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006104  08006104  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08006104  08006104  00016104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800610c  0800610c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800610c  0800610c  0001610c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006110  08006110  00016110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006114  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000330  2000000c  08006120  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000033c  08006120  0002033c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c87d  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003958  00000000  00000000  0003c8fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018a0  00000000  00000000  00040258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001325  00000000  00000000  00041af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021ca9  00000000  00000000  00042e1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f4cd  00000000  00000000  00064ac6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000df669  00000000  00000000  00083f93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006914  00000000  00000000  001635fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00169f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080060ac 	.word	0x080060ac

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080060ac 	.word	0x080060ac

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <MX_ADC2_Init>:

ADC_HandleTypeDef hadc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b088      	sub	sp, #32
 8000518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800051a:	463b      	mov	r3, r7
 800051c:	2220      	movs	r2, #32
 800051e:	2100      	movs	r1, #0
 8000520:	4618      	mov	r0, r3
 8000522:	f005 fd97 	bl	8006054 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000526:	4b2b      	ldr	r3, [pc, #172]	; (80005d4 <MX_ADC2_Init+0xc0>)
 8000528:	4a2b      	ldr	r2, [pc, #172]	; (80005d8 <MX_ADC2_Init+0xc4>)
 800052a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800052c:	4b29      	ldr	r3, [pc, #164]	; (80005d4 <MX_ADC2_Init+0xc0>)
 800052e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000532:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000534:	4b27      	ldr	r3, [pc, #156]	; (80005d4 <MX_ADC2_Init+0xc0>)
 8000536:	2200      	movs	r2, #0
 8000538:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800053a:	4b26      	ldr	r3, [pc, #152]	; (80005d4 <MX_ADC2_Init+0xc0>)
 800053c:	2200      	movs	r2, #0
 800053e:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000540:	4b24      	ldr	r3, [pc, #144]	; (80005d4 <MX_ADC2_Init+0xc0>)
 8000542:	2200      	movs	r2, #0
 8000544:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000546:	4b23      	ldr	r3, [pc, #140]	; (80005d4 <MX_ADC2_Init+0xc0>)
 8000548:	2200      	movs	r2, #0
 800054a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800054c:	4b21      	ldr	r3, [pc, #132]	; (80005d4 <MX_ADC2_Init+0xc0>)
 800054e:	2204      	movs	r2, #4
 8000550:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000552:	4b20      	ldr	r3, [pc, #128]	; (80005d4 <MX_ADC2_Init+0xc0>)
 8000554:	2200      	movs	r2, #0
 8000556:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000558:	4b1e      	ldr	r3, [pc, #120]	; (80005d4 <MX_ADC2_Init+0xc0>)
 800055a:	2200      	movs	r2, #0
 800055c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800055e:	4b1d      	ldr	r3, [pc, #116]	; (80005d4 <MX_ADC2_Init+0xc0>)
 8000560:	2201      	movs	r2, #1
 8000562:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000564:	4b1b      	ldr	r3, [pc, #108]	; (80005d4 <MX_ADC2_Init+0xc0>)
 8000566:	2200      	movs	r2, #0
 8000568:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800056c:	4b19      	ldr	r3, [pc, #100]	; (80005d4 <MX_ADC2_Init+0xc0>)
 800056e:	2200      	movs	r2, #0
 8000570:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000572:	4b18      	ldr	r3, [pc, #96]	; (80005d4 <MX_ADC2_Init+0xc0>)
 8000574:	2200      	movs	r2, #0
 8000576:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000578:	4b16      	ldr	r3, [pc, #88]	; (80005d4 <MX_ADC2_Init+0xc0>)
 800057a:	2200      	movs	r2, #0
 800057c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000580:	4b14      	ldr	r3, [pc, #80]	; (80005d4 <MX_ADC2_Init+0xc0>)
 8000582:	2200      	movs	r2, #0
 8000584:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000586:	4b13      	ldr	r3, [pc, #76]	; (80005d4 <MX_ADC2_Init+0xc0>)
 8000588:	2200      	movs	r2, #0
 800058a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800058e:	4811      	ldr	r0, [pc, #68]	; (80005d4 <MX_ADC2_Init+0xc0>)
 8000590:	f001 f86a 	bl	8001668 <HAL_ADC_Init>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 800059a:	f000 fae1 	bl	8000b60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800059e:	4b0f      	ldr	r3, [pc, #60]	; (80005dc <MX_ADC2_Init+0xc8>)
 80005a0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005a2:	2306      	movs	r3, #6
 80005a4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80005a6:	2300      	movs	r3, #0
 80005a8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005aa:	237f      	movs	r3, #127	; 0x7f
 80005ac:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005ae:	2304      	movs	r3, #4
 80005b0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80005b2:	2300      	movs	r3, #0
 80005b4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80005b6:	463b      	mov	r3, r7
 80005b8:	4619      	mov	r1, r3
 80005ba:	4806      	ldr	r0, [pc, #24]	; (80005d4 <MX_ADC2_Init+0xc0>)
 80005bc:	f001 f9d8 	bl	8001970 <HAL_ADC_ConfigChannel>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80005c6:	f000 facb 	bl	8000b60 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80005ca:	bf00      	nop
 80005cc:	3720      	adds	r7, #32
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	20000028 	.word	0x20000028
 80005d8:	50000100 	.word	0x50000100
 80005dc:	04300002 	.word	0x04300002

080005e0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b09a      	sub	sp, #104	; 0x68
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]
 80005f2:	609a      	str	r2, [r3, #8]
 80005f4:	60da      	str	r2, [r3, #12]
 80005f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005f8:	f107 0310 	add.w	r3, r7, #16
 80005fc:	2244      	movs	r2, #68	; 0x44
 80005fe:	2100      	movs	r1, #0
 8000600:	4618      	mov	r0, r3
 8000602:	f005 fd27 	bl	8006054 <memset>
  if(adcHandle->Instance==ADC2)
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	4a1e      	ldr	r2, [pc, #120]	; (8000684 <HAL_ADC_MspInit+0xa4>)
 800060c:	4293      	cmp	r3, r2
 800060e:	d134      	bne.n	800067a <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000610:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000614:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000616:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800061a:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800061c:	f107 0310 	add.w	r3, r7, #16
 8000620:	4618      	mov	r0, r3
 8000622:	f003 fabf 	bl	8003ba4 <HAL_RCCEx_PeriphCLKConfig>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800062c:	f000 fa98 	bl	8000b60 <Error_Handler>
    }

    /* ADC2 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000630:	4b15      	ldr	r3, [pc, #84]	; (8000688 <HAL_ADC_MspInit+0xa8>)
 8000632:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000634:	4a14      	ldr	r2, [pc, #80]	; (8000688 <HAL_ADC_MspInit+0xa8>)
 8000636:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800063a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800063c:	4b12      	ldr	r3, [pc, #72]	; (8000688 <HAL_ADC_MspInit+0xa8>)
 800063e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000640:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000644:	60fb      	str	r3, [r7, #12]
 8000646:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000648:	4b0f      	ldr	r3, [pc, #60]	; (8000688 <HAL_ADC_MspInit+0xa8>)
 800064a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800064c:	4a0e      	ldr	r2, [pc, #56]	; (8000688 <HAL_ADC_MspInit+0xa8>)
 800064e:	f043 0301 	orr.w	r3, r3, #1
 8000652:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000654:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <HAL_ADC_MspInit+0xa8>)
 8000656:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000658:	f003 0301 	and.w	r3, r3, #1
 800065c:	60bb      	str	r3, [r7, #8]
 800065e:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PA0     ------> ADC2_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000660:	2301      	movs	r3, #1
 8000662:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000664:	2303      	movs	r3, #3
 8000666:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000668:	2300      	movs	r3, #0
 800066a:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800066c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000670:	4619      	mov	r1, r3
 8000672:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000676:	f002 f9b5 	bl	80029e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800067a:	bf00      	nop
 800067c:	3768      	adds	r7, #104	; 0x68
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	50000100 	.word	0x50000100
 8000688:	40021000 	.word	0x40021000

0800068c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000692:	4b1c      	ldr	r3, [pc, #112]	; (8000704 <MX_DMA_Init+0x78>)
 8000694:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000696:	4a1b      	ldr	r2, [pc, #108]	; (8000704 <MX_DMA_Init+0x78>)
 8000698:	f043 0304 	orr.w	r3, r3, #4
 800069c:	6493      	str	r3, [r2, #72]	; 0x48
 800069e:	4b19      	ldr	r3, [pc, #100]	; (8000704 <MX_DMA_Init+0x78>)
 80006a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006a2:	f003 0304 	and.w	r3, r3, #4
 80006a6:	60fb      	str	r3, [r7, #12]
 80006a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80006aa:	4b16      	ldr	r3, [pc, #88]	; (8000704 <MX_DMA_Init+0x78>)
 80006ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006ae:	4a15      	ldr	r2, [pc, #84]	; (8000704 <MX_DMA_Init+0x78>)
 80006b0:	f043 0302 	orr.w	r3, r3, #2
 80006b4:	6493      	str	r3, [r2, #72]	; 0x48
 80006b6:	4b13      	ldr	r3, [pc, #76]	; (8000704 <MX_DMA_Init+0x78>)
 80006b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006ba:	f003 0302 	and.w	r3, r3, #2
 80006be:	60bb      	str	r3, [r7, #8]
 80006c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006c2:	4b10      	ldr	r3, [pc, #64]	; (8000704 <MX_DMA_Init+0x78>)
 80006c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006c6:	4a0f      	ldr	r2, [pc, #60]	; (8000704 <MX_DMA_Init+0x78>)
 80006c8:	f043 0301 	orr.w	r3, r3, #1
 80006cc:	6493      	str	r3, [r2, #72]	; 0x48
 80006ce:	4b0d      	ldr	r3, [pc, #52]	; (8000704 <MX_DMA_Init+0x78>)
 80006d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006d2:	f003 0301 	and.w	r3, r3, #1
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80006da:	2200      	movs	r2, #0
 80006dc:	2100      	movs	r1, #0
 80006de:	200d      	movs	r0, #13
 80006e0:	f001 fdee 	bl	80022c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80006e4:	200d      	movs	r0, #13
 80006e6:	f001 fe05 	bl	80022f4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 80006ea:	2200      	movs	r2, #0
 80006ec:	2100      	movs	r1, #0
 80006ee:	2039      	movs	r0, #57	; 0x39
 80006f0:	f001 fde6 	bl	80022c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 80006f4:	2039      	movs	r0, #57	; 0x39
 80006f6:	f001 fdfd 	bl	80022f4 <HAL_NVIC_EnableIRQ>

}
 80006fa:	bf00      	nop
 80006fc:	3710      	adds	r7, #16
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40021000 	.word	0x40021000

08000708 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800070c:	4b1f      	ldr	r3, [pc, #124]	; (800078c <MX_FDCAN1_Init+0x84>)
 800070e:	4a20      	ldr	r2, [pc, #128]	; (8000790 <MX_FDCAN1_Init+0x88>)
 8000710:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000712:	4b1e      	ldr	r3, [pc, #120]	; (800078c <MX_FDCAN1_Init+0x84>)
 8000714:	2200      	movs	r2, #0
 8000716:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000718:	4b1c      	ldr	r3, [pc, #112]	; (800078c <MX_FDCAN1_Init+0x84>)
 800071a:	2200      	movs	r2, #0
 800071c:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800071e:	4b1b      	ldr	r3, [pc, #108]	; (800078c <MX_FDCAN1_Init+0x84>)
 8000720:	2200      	movs	r2, #0
 8000722:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000724:	4b19      	ldr	r3, [pc, #100]	; (800078c <MX_FDCAN1_Init+0x84>)
 8000726:	2200      	movs	r2, #0
 8000728:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800072a:	4b18      	ldr	r3, [pc, #96]	; (800078c <MX_FDCAN1_Init+0x84>)
 800072c:	2200      	movs	r2, #0
 800072e:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000730:	4b16      	ldr	r3, [pc, #88]	; (800078c <MX_FDCAN1_Init+0x84>)
 8000732:	2200      	movs	r2, #0
 8000734:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8000736:	4b15      	ldr	r3, [pc, #84]	; (800078c <MX_FDCAN1_Init+0x84>)
 8000738:	2210      	movs	r2, #16
 800073a:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800073c:	4b13      	ldr	r3, [pc, #76]	; (800078c <MX_FDCAN1_Init+0x84>)
 800073e:	2201      	movs	r2, #1
 8000740:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000742:	4b12      	ldr	r3, [pc, #72]	; (800078c <MX_FDCAN1_Init+0x84>)
 8000744:	2202      	movs	r2, #2
 8000746:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000748:	4b10      	ldr	r3, [pc, #64]	; (800078c <MX_FDCAN1_Init+0x84>)
 800074a:	2202      	movs	r2, #2
 800074c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800074e:	4b0f      	ldr	r3, [pc, #60]	; (800078c <MX_FDCAN1_Init+0x84>)
 8000750:	2201      	movs	r2, #1
 8000752:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000754:	4b0d      	ldr	r3, [pc, #52]	; (800078c <MX_FDCAN1_Init+0x84>)
 8000756:	2201      	movs	r2, #1
 8000758:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 800075a:	4b0c      	ldr	r3, [pc, #48]	; (800078c <MX_FDCAN1_Init+0x84>)
 800075c:	2201      	movs	r2, #1
 800075e:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000760:	4b0a      	ldr	r3, [pc, #40]	; (800078c <MX_FDCAN1_Init+0x84>)
 8000762:	2201      	movs	r2, #1
 8000764:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000766:	4b09      	ldr	r3, [pc, #36]	; (800078c <MX_FDCAN1_Init+0x84>)
 8000768:	2200      	movs	r2, #0
 800076a:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 800076c:	4b07      	ldr	r3, [pc, #28]	; (800078c <MX_FDCAN1_Init+0x84>)
 800076e:	2200      	movs	r2, #0
 8000770:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000772:	4b06      	ldr	r3, [pc, #24]	; (800078c <MX_FDCAN1_Init+0x84>)
 8000774:	2200      	movs	r2, #0
 8000776:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000778:	4804      	ldr	r0, [pc, #16]	; (800078c <MX_FDCAN1_Init+0x84>)
 800077a:	f001 ff83 	bl	8002684 <HAL_FDCAN_Init>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000784:	f000 f9ec 	bl	8000b60 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000788:	bf00      	nop
 800078a:	bd80      	pop	{r7, pc}
 800078c:	20000094 	.word	0x20000094
 8000790:	40006400 	.word	0x40006400

08000794 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b09a      	sub	sp, #104	; 0x68
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
 80007a6:	609a      	str	r2, [r3, #8]
 80007a8:	60da      	str	r2, [r3, #12]
 80007aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007ac:	f107 0310 	add.w	r3, r7, #16
 80007b0:	2244      	movs	r2, #68	; 0x44
 80007b2:	2100      	movs	r1, #0
 80007b4:	4618      	mov	r0, r3
 80007b6:	f005 fc4d 	bl	8006054 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	4a20      	ldr	r2, [pc, #128]	; (8000840 <HAL_FDCAN_MspInit+0xac>)
 80007c0:	4293      	cmp	r3, r2
 80007c2:	d139      	bne.n	8000838 <HAL_FDCAN_MspInit+0xa4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80007c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007c8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80007ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80007ce:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007d0:	f107 0310 	add.w	r3, r7, #16
 80007d4:	4618      	mov	r0, r3
 80007d6:	f003 f9e5 	bl	8003ba4 <HAL_RCCEx_PeriphCLKConfig>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80007e0:	f000 f9be 	bl	8000b60 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80007e4:	4b17      	ldr	r3, [pc, #92]	; (8000844 <HAL_FDCAN_MspInit+0xb0>)
 80007e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007e8:	4a16      	ldr	r2, [pc, #88]	; (8000844 <HAL_FDCAN_MspInit+0xb0>)
 80007ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007ee:	6593      	str	r3, [r2, #88]	; 0x58
 80007f0:	4b14      	ldr	r3, [pc, #80]	; (8000844 <HAL_FDCAN_MspInit+0xb0>)
 80007f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80007f8:	60fb      	str	r3, [r7, #12]
 80007fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fc:	4b11      	ldr	r3, [pc, #68]	; (8000844 <HAL_FDCAN_MspInit+0xb0>)
 80007fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000800:	4a10      	ldr	r2, [pc, #64]	; (8000844 <HAL_FDCAN_MspInit+0xb0>)
 8000802:	f043 0301 	orr.w	r3, r3, #1
 8000806:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000808:	4b0e      	ldr	r3, [pc, #56]	; (8000844 <HAL_FDCAN_MspInit+0xb0>)
 800080a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080c:	f003 0301 	and.w	r3, r3, #1
 8000810:	60bb      	str	r3, [r7, #8]
 8000812:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000814:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000818:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081a:	2302      	movs	r3, #2
 800081c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081e:	2300      	movs	r3, #0
 8000820:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000822:	2300      	movs	r3, #0
 8000824:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000826:	2309      	movs	r3, #9
 8000828:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800082a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800082e:	4619      	mov	r1, r3
 8000830:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000834:	f002 f8d6 	bl	80029e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8000838:	bf00      	nop
 800083a:	3768      	adds	r7, #104	; 0x68
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	40006400 	.word	0x40006400
 8000844:	40021000 	.word	0x40021000

08000848 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b08a      	sub	sp, #40	; 0x28
 800084c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084e:	f107 0314 	add.w	r3, r7, #20
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	605a      	str	r2, [r3, #4]
 8000858:	609a      	str	r2, [r3, #8]
 800085a:	60da      	str	r2, [r3, #12]
 800085c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800085e:	4b2a      	ldr	r3, [pc, #168]	; (8000908 <MX_GPIO_Init+0xc0>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000862:	4a29      	ldr	r2, [pc, #164]	; (8000908 <MX_GPIO_Init+0xc0>)
 8000864:	f043 0304 	orr.w	r3, r3, #4
 8000868:	64d3      	str	r3, [r2, #76]	; 0x4c
 800086a:	4b27      	ldr	r3, [pc, #156]	; (8000908 <MX_GPIO_Init+0xc0>)
 800086c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086e:	f003 0304 	and.w	r3, r3, #4
 8000872:	613b      	str	r3, [r7, #16]
 8000874:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000876:	4b24      	ldr	r3, [pc, #144]	; (8000908 <MX_GPIO_Init+0xc0>)
 8000878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087a:	4a23      	ldr	r2, [pc, #140]	; (8000908 <MX_GPIO_Init+0xc0>)
 800087c:	f043 0320 	orr.w	r3, r3, #32
 8000880:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000882:	4b21      	ldr	r3, [pc, #132]	; (8000908 <MX_GPIO_Init+0xc0>)
 8000884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000886:	f003 0320 	and.w	r3, r3, #32
 800088a:	60fb      	str	r3, [r7, #12]
 800088c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800088e:	4b1e      	ldr	r3, [pc, #120]	; (8000908 <MX_GPIO_Init+0xc0>)
 8000890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000892:	4a1d      	ldr	r2, [pc, #116]	; (8000908 <MX_GPIO_Init+0xc0>)
 8000894:	f043 0301 	orr.w	r3, r3, #1
 8000898:	64d3      	str	r3, [r2, #76]	; 0x4c
 800089a:	4b1b      	ldr	r3, [pc, #108]	; (8000908 <MX_GPIO_Init+0xc0>)
 800089c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089e:	f003 0301 	and.w	r3, r3, #1
 80008a2:	60bb      	str	r3, [r7, #8]
 80008a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a6:	4b18      	ldr	r3, [pc, #96]	; (8000908 <MX_GPIO_Init+0xc0>)
 80008a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008aa:	4a17      	ldr	r2, [pc, #92]	; (8000908 <MX_GPIO_Init+0xc0>)
 80008ac:	f043 0302 	orr.w	r3, r3, #2
 80008b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008b2:	4b15      	ldr	r3, [pc, #84]	; (8000908 <MX_GPIO_Init+0xc0>)
 80008b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b6:	f003 0302 	and.w	r3, r3, #2
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 80008be:	2200      	movs	r2, #0
 80008c0:	2150      	movs	r1, #80	; 0x50
 80008c2:	4812      	ldr	r0, [pc, #72]	; (800090c <MX_GPIO_Init+0xc4>)
 80008c4:	f002 fa10 	bl	8002ce8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_10|GPIO_PIN_11;
 80008c8:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80008cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ce:	2300      	movs	r3, #0
 80008d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008d6:	f107 0314 	add.w	r3, r7, #20
 80008da:	4619      	mov	r1, r3
 80008dc:	480b      	ldr	r0, [pc, #44]	; (800090c <MX_GPIO_Init+0xc4>)
 80008de:	f002 f881 	bl	80029e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin;
 80008e2:	2350      	movs	r3, #80	; 0x50
 80008e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e6:	2301      	movs	r3, #1
 80008e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ee:	2300      	movs	r3, #0
 80008f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008f2:	f107 0314 	add.w	r3, r7, #20
 80008f6:	4619      	mov	r1, r3
 80008f8:	4804      	ldr	r0, [pc, #16]	; (800090c <MX_GPIO_Init+0xc4>)
 80008fa:	f002 f873 	bl	80029e4 <HAL_GPIO_Init>

}
 80008fe:	bf00      	nop
 8000900:	3728      	adds	r7, #40	; 0x28
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40021000 	.word	0x40021000
 800090c:	48000800 	.word	0x48000800

08000910 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000914:	4b1b      	ldr	r3, [pc, #108]	; (8000984 <MX_I2C1_Init+0x74>)
 8000916:	4a1c      	ldr	r2, [pc, #112]	; (8000988 <MX_I2C1_Init+0x78>)
 8000918:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x60505F8C;
 800091a:	4b1a      	ldr	r3, [pc, #104]	; (8000984 <MX_I2C1_Init+0x74>)
 800091c:	4a1b      	ldr	r2, [pc, #108]	; (800098c <MX_I2C1_Init+0x7c>)
 800091e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000920:	4b18      	ldr	r3, [pc, #96]	; (8000984 <MX_I2C1_Init+0x74>)
 8000922:	2200      	movs	r2, #0
 8000924:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000926:	4b17      	ldr	r3, [pc, #92]	; (8000984 <MX_I2C1_Init+0x74>)
 8000928:	2201      	movs	r2, #1
 800092a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800092c:	4b15      	ldr	r3, [pc, #84]	; (8000984 <MX_I2C1_Init+0x74>)
 800092e:	2200      	movs	r2, #0
 8000930:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000932:	4b14      	ldr	r3, [pc, #80]	; (8000984 <MX_I2C1_Init+0x74>)
 8000934:	2200      	movs	r2, #0
 8000936:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000938:	4b12      	ldr	r3, [pc, #72]	; (8000984 <MX_I2C1_Init+0x74>)
 800093a:	2200      	movs	r2, #0
 800093c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800093e:	4b11      	ldr	r3, [pc, #68]	; (8000984 <MX_I2C1_Init+0x74>)
 8000940:	2200      	movs	r2, #0
 8000942:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000944:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <MX_I2C1_Init+0x74>)
 8000946:	2200      	movs	r2, #0
 8000948:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800094a:	480e      	ldr	r0, [pc, #56]	; (8000984 <MX_I2C1_Init+0x74>)
 800094c:	f002 f9e4 	bl	8002d18 <HAL_I2C_Init>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000956:	f000 f903 	bl	8000b60 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800095a:	2100      	movs	r1, #0
 800095c:	4809      	ldr	r0, [pc, #36]	; (8000984 <MX_I2C1_Init+0x74>)
 800095e:	f002 fa76 	bl	8002e4e <HAL_I2CEx_ConfigAnalogFilter>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000968:	f000 f8fa 	bl	8000b60 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800096c:	2100      	movs	r1, #0
 800096e:	4805      	ldr	r0, [pc, #20]	; (8000984 <MX_I2C1_Init+0x74>)
 8000970:	f002 fab8 	bl	8002ee4 <HAL_I2CEx_ConfigDigitalFilter>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800097a:	f000 f8f1 	bl	8000b60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	200000f8 	.word	0x200000f8
 8000988:	40005400 	.word	0x40005400
 800098c:	60505f8c 	.word	0x60505f8c

08000990 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b09c      	sub	sp, #112	; 0x70
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000998:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	605a      	str	r2, [r3, #4]
 80009a2:	609a      	str	r2, [r3, #8]
 80009a4:	60da      	str	r2, [r3, #12]
 80009a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009a8:	f107 0318 	add.w	r3, r7, #24
 80009ac:	2244      	movs	r2, #68	; 0x44
 80009ae:	2100      	movs	r1, #0
 80009b0:	4618      	mov	r0, r3
 80009b2:	f005 fb4f 	bl	8006054 <memset>
  if(i2cHandle->Instance==I2C1)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	4a2e      	ldr	r2, [pc, #184]	; (8000a74 <HAL_I2C_MspInit+0xe4>)
 80009bc:	4293      	cmp	r3, r2
 80009be:	d154      	bne.n	8000a6a <HAL_I2C_MspInit+0xda>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80009c0:	2340      	movs	r3, #64	; 0x40
 80009c2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80009c4:	2300      	movs	r3, #0
 80009c6:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009c8:	f107 0318 	add.w	r3, r7, #24
 80009cc:	4618      	mov	r0, r3
 80009ce:	f003 f8e9 	bl	8003ba4 <HAL_RCCEx_PeriphCLKConfig>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80009d8:	f000 f8c2 	bl	8000b60 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009dc:	4b26      	ldr	r3, [pc, #152]	; (8000a78 <HAL_I2C_MspInit+0xe8>)
 80009de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e0:	4a25      	ldr	r2, [pc, #148]	; (8000a78 <HAL_I2C_MspInit+0xe8>)
 80009e2:	f043 0301 	orr.w	r3, r3, #1
 80009e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009e8:	4b23      	ldr	r3, [pc, #140]	; (8000a78 <HAL_I2C_MspInit+0xe8>)
 80009ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ec:	f003 0301 	and.w	r3, r3, #1
 80009f0:	617b      	str	r3, [r7, #20]
 80009f2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f4:	4b20      	ldr	r3, [pc, #128]	; (8000a78 <HAL_I2C_MspInit+0xe8>)
 80009f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f8:	4a1f      	ldr	r2, [pc, #124]	; (8000a78 <HAL_I2C_MspInit+0xe8>)
 80009fa:	f043 0302 	orr.w	r3, r3, #2
 80009fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a00:	4b1d      	ldr	r3, [pc, #116]	; (8000a78 <HAL_I2C_MspInit+0xe8>)
 8000a02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a04:	f003 0302 	and.w	r3, r3, #2
 8000a08:	613b      	str	r3, [r7, #16]
 8000a0a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000a0c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a10:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a12:	2312      	movs	r3, #18
 8000a14:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a1e:	2304      	movs	r3, #4
 8000a20:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a22:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000a26:	4619      	mov	r1, r3
 8000a28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a2c:	f001 ffda 	bl	80029e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a34:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a36:	2312      	movs	r3, #18
 8000a38:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a42:	2304      	movs	r3, #4
 8000a44:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a46:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	480b      	ldr	r0, [pc, #44]	; (8000a7c <HAL_I2C_MspInit+0xec>)
 8000a4e:	f001 ffc9 	bl	80029e4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a52:	4b09      	ldr	r3, [pc, #36]	; (8000a78 <HAL_I2C_MspInit+0xe8>)
 8000a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a56:	4a08      	ldr	r2, [pc, #32]	; (8000a78 <HAL_I2C_MspInit+0xe8>)
 8000a58:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a5c:	6593      	str	r3, [r2, #88]	; 0x58
 8000a5e:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <HAL_I2C_MspInit+0xe8>)
 8000a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a66:	60fb      	str	r3, [r7, #12]
 8000a68:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000a6a:	bf00      	nop
 8000a6c:	3770      	adds	r7, #112	; 0x70
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40005400 	.word	0x40005400
 8000a78:	40021000 	.word	0x40021000
 8000a7c:	48000400 	.word	0x48000400

08000a80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a84:	f000 fbe3 	bl	800124e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a88:	f000 f80f 	bl	8000aaa <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a8c:	f7ff fedc 	bl	8000848 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a90:	f7ff fdfc 	bl	800068c <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000a94:	f000 fab0 	bl	8000ff8 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8000a98:	f000 f958 	bl	8000d4c <MX_TIM1_Init>
  MX_ADC2_Init();
 8000a9c:	f7ff fd3a 	bl	8000514 <MX_ADC2_Init>
  MX_I2C1_Init();
 8000aa0:	f7ff ff36 	bl	8000910 <MX_I2C1_Init>
  MX_FDCAN1_Init();
 8000aa4:	f7ff fe30 	bl	8000708 <MX_FDCAN1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <main+0x28>

08000aaa <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	b094      	sub	sp, #80	; 0x50
 8000aae:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ab0:	f107 0318 	add.w	r3, r7, #24
 8000ab4:	2238      	movs	r2, #56	; 0x38
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f005 facb 	bl	8006054 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000abe:	1d3b      	adds	r3, r7, #4
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	60da      	str	r2, [r3, #12]
 8000aca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000acc:	2000      	movs	r0, #0
 8000ace:	f002 fa55 	bl	8002f7c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ad6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ada:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000adc:	2302      	movs	r3, #2
 8000ade:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ae0:	2303      	movs	r3, #3
 8000ae2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 28;
 8000ae8:	231c      	movs	r3, #28
 8000aea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000aec:	2302      	movs	r3, #2
 8000aee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000af0:	2302      	movs	r3, #2
 8000af2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000af4:	2302      	movs	r3, #2
 8000af6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000af8:	f107 0318 	add.w	r3, r7, #24
 8000afc:	4618      	mov	r0, r3
 8000afe:	f002 faf1 	bl	80030e4 <HAL_RCC_OscConfig>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000b08:	f000 f82a 	bl	8000b60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b0c:	230f      	movs	r3, #15
 8000b0e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b10:	2303      	movs	r3, #3
 8000b12:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b14:	2300      	movs	r3, #0
 8000b16:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b20:	1d3b      	adds	r3, r7, #4
 8000b22:	2104      	movs	r1, #4
 8000b24:	4618      	mov	r0, r3
 8000b26:	f002 fdef 	bl	8003708 <HAL_RCC_ClockConfig>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000b30:	f000 f816 	bl	8000b60 <Error_Handler>
  }
}
 8000b34:	bf00      	nop
 8000b36:	3750      	adds	r7, #80	; 0x50
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a04      	ldr	r2, [pc, #16]	; (8000b5c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d101      	bne.n	8000b52 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b4e:	f000 fb97 	bl	8001280 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b52:	bf00      	nop
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	40014800 	.word	0x40014800

08000b60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b64:	b672      	cpsid	i
}
 8000b66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <Error_Handler+0x8>
	...

08000b6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b72:	4b0f      	ldr	r3, [pc, #60]	; (8000bb0 <HAL_MspInit+0x44>)
 8000b74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b76:	4a0e      	ldr	r2, [pc, #56]	; (8000bb0 <HAL_MspInit+0x44>)
 8000b78:	f043 0301 	orr.w	r3, r3, #1
 8000b7c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b7e:	4b0c      	ldr	r3, [pc, #48]	; (8000bb0 <HAL_MspInit+0x44>)
 8000b80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b82:	f003 0301 	and.w	r3, r3, #1
 8000b86:	607b      	str	r3, [r7, #4]
 8000b88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b8a:	4b09      	ldr	r3, [pc, #36]	; (8000bb0 <HAL_MspInit+0x44>)
 8000b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b8e:	4a08      	ldr	r2, [pc, #32]	; (8000bb0 <HAL_MspInit+0x44>)
 8000b90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b94:	6593      	str	r3, [r2, #88]	; 0x58
 8000b96:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <HAL_MspInit+0x44>)
 8000b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b9e:	603b      	str	r3, [r7, #0]
 8000ba0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000ba2:	f002 fa8f 	bl	80030c4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40021000 	.word	0x40021000

08000bb4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b08c      	sub	sp, #48	; 0x30
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8000bc4:	4b2c      	ldr	r3, [pc, #176]	; (8000c78 <HAL_InitTick+0xc4>)
 8000bc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bc8:	4a2b      	ldr	r2, [pc, #172]	; (8000c78 <HAL_InitTick+0xc4>)
 8000bca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bce:	6613      	str	r3, [r2, #96]	; 0x60
 8000bd0:	4b29      	ldr	r3, [pc, #164]	; (8000c78 <HAL_InitTick+0xc4>)
 8000bd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bd4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bd8:	60bb      	str	r3, [r7, #8]
 8000bda:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bdc:	f107 020c 	add.w	r2, r7, #12
 8000be0:	f107 0310 	add.w	r3, r7, #16
 8000be4:	4611      	mov	r1, r2
 8000be6:	4618      	mov	r0, r3
 8000be8:	f002 ff64 	bl	8003ab4 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000bec:	f002 ff4c 	bl	8003a88 <HAL_RCC_GetPCLK2Freq>
 8000bf0:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bf4:	4a21      	ldr	r2, [pc, #132]	; (8000c7c <HAL_InitTick+0xc8>)
 8000bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8000bfa:	0c9b      	lsrs	r3, r3, #18
 8000bfc:	3b01      	subs	r3, #1
 8000bfe:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8000c00:	4b1f      	ldr	r3, [pc, #124]	; (8000c80 <HAL_InitTick+0xcc>)
 8000c02:	4a20      	ldr	r2, [pc, #128]	; (8000c84 <HAL_InitTick+0xd0>)
 8000c04:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8000c06:	4b1e      	ldr	r3, [pc, #120]	; (8000c80 <HAL_InitTick+0xcc>)
 8000c08:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c0c:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8000c0e:	4a1c      	ldr	r2, [pc, #112]	; (8000c80 <HAL_InitTick+0xcc>)
 8000c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c12:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8000c14:	4b1a      	ldr	r3, [pc, #104]	; (8000c80 <HAL_InitTick+0xcc>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c1a:	4b19      	ldr	r3, [pc, #100]	; (8000c80 <HAL_InitTick+0xcc>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim17);
 8000c20:	4817      	ldr	r0, [pc, #92]	; (8000c80 <HAL_InitTick+0xcc>)
 8000c22:	f003 f9af 	bl	8003f84 <HAL_TIM_Base_Init>
 8000c26:	4603      	mov	r3, r0
 8000c28:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000c2c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d11b      	bne.n	8000c6c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 8000c34:	4812      	ldr	r0, [pc, #72]	; (8000c80 <HAL_InitTick+0xcc>)
 8000c36:	f003 f9fd 	bl	8004034 <HAL_TIM_Base_Start_IT>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000c40:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d111      	bne.n	8000c6c <HAL_InitTick+0xb8>
    {
    /* Enable the TIM17 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000c48:	201a      	movs	r0, #26
 8000c4a:	f001 fb53 	bl	80022f4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2b0f      	cmp	r3, #15
 8000c52:	d808      	bhi.n	8000c66 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority, 0U);
 8000c54:	2200      	movs	r2, #0
 8000c56:	6879      	ldr	r1, [r7, #4]
 8000c58:	201a      	movs	r0, #26
 8000c5a:	f001 fb31 	bl	80022c0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c5e:	4a0a      	ldr	r2, [pc, #40]	; (8000c88 <HAL_InitTick+0xd4>)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	6013      	str	r3, [r2, #0]
 8000c64:	e002      	b.n	8000c6c <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8000c66:	2301      	movs	r3, #1
 8000c68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000c6c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3730      	adds	r7, #48	; 0x30
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	40021000 	.word	0x40021000
 8000c7c:	431bde83 	.word	0x431bde83
 8000c80:	2000014c 	.word	0x2000014c
 8000c84:	40014800 	.word	0x40014800
 8000c88:	20000004 	.word	0x20000004

08000c8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <NMI_Handler+0x4>

08000c92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c96:	e7fe      	b.n	8000c96 <HardFault_Handler+0x4>

08000c98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c9c:	e7fe      	b.n	8000c9c <MemManage_Handler+0x4>

08000c9e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca2:	e7fe      	b.n	8000ca2 <BusFault_Handler+0x4>

08000ca4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca8:	e7fe      	b.n	8000ca8 <UsageFault_Handler+0x4>

08000caa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr

08000cc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
	...

08000ce4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8000ce8:	4802      	ldr	r0, [pc, #8]	; (8000cf4 <DMA1_Channel3_IRQHandler+0x10>)
 8000cea:	f001 fbb9 	bl	8002460 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	200002d8 	.word	0x200002d8

08000cf8 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000cfc:	4803      	ldr	r0, [pc, #12]	; (8000d0c <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 8000cfe:	f003 fa64 	bl	80041ca <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 8000d02:	4803      	ldr	r0, [pc, #12]	; (8000d10 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 8000d04:	f003 fa61 	bl	80041ca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8000d08:	bf00      	nop
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	20000198 	.word	0x20000198
 8000d10:	2000014c 	.word	0x2000014c

08000d14 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000d18:	4802      	ldr	r0, [pc, #8]	; (8000d24 <DMA2_Channel2_IRQHandler+0x10>)
 8000d1a:	f001 fba1 	bl	8002460 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	20000278 	.word	0x20000278

08000d28 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d2c:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <SystemInit+0x20>)
 8000d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d32:	4a05      	ldr	r2, [pc, #20]	; (8000d48 <SystemInit+0x20>)
 8000d34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	e000ed00 	.word	0xe000ed00

08000d4c <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b09c      	sub	sp, #112	; 0x70
 8000d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d52:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000d56:	2200      	movs	r2, #0
 8000d58:	601a      	str	r2, [r3, #0]
 8000d5a:	605a      	str	r2, [r3, #4]
 8000d5c:	609a      	str	r2, [r3, #8]
 8000d5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d60:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d6c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]
 8000d7a:	611a      	str	r2, [r3, #16]
 8000d7c:	615a      	str	r2, [r3, #20]
 8000d7e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d80:	1d3b      	adds	r3, r7, #4
 8000d82:	2234      	movs	r2, #52	; 0x34
 8000d84:	2100      	movs	r1, #0
 8000d86:	4618      	mov	r0, r3
 8000d88:	f005 f964 	bl	8006054 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d8c:	4b51      	ldr	r3, [pc, #324]	; (8000ed4 <MX_TIM1_Init+0x188>)
 8000d8e:	4a52      	ldr	r2, [pc, #328]	; (8000ed8 <MX_TIM1_Init+0x18c>)
 8000d90:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000d92:	4b50      	ldr	r3, [pc, #320]	; (8000ed4 <MX_TIM1_Init+0x188>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d98:	4b4e      	ldr	r3, [pc, #312]	; (8000ed4 <MX_TIM1_Init+0x188>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000d9e:	4b4d      	ldr	r3, [pc, #308]	; (8000ed4 <MX_TIM1_Init+0x188>)
 8000da0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000da4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000da6:	4b4b      	ldr	r3, [pc, #300]	; (8000ed4 <MX_TIM1_Init+0x188>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000dac:	4b49      	ldr	r3, [pc, #292]	; (8000ed4 <MX_TIM1_Init+0x188>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000db2:	4b48      	ldr	r3, [pc, #288]	; (8000ed4 <MX_TIM1_Init+0x188>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000db8:	4846      	ldr	r0, [pc, #280]	; (8000ed4 <MX_TIM1_Init+0x188>)
 8000dba:	f003 f8e3 	bl	8003f84 <HAL_TIM_Base_Init>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000dc4:	f7ff fecc 	bl	8000b60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dcc:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000dce:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	483f      	ldr	r0, [pc, #252]	; (8000ed4 <MX_TIM1_Init+0x188>)
 8000dd6:	f003 fc5b 	bl	8004690 <HAL_TIM_ConfigClockSource>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000de0:	f7ff febe 	bl	8000b60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000de4:	483b      	ldr	r0, [pc, #236]	; (8000ed4 <MX_TIM1_Init+0x188>)
 8000de6:	f003 f98f 	bl	8004108 <HAL_TIM_PWM_Init>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000df0:	f7ff feb6 	bl	8000b60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000df4:	2300      	movs	r3, #0
 8000df6:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e00:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e04:	4619      	mov	r1, r3
 8000e06:	4833      	ldr	r0, [pc, #204]	; (8000ed4 <MX_TIM1_Init+0x188>)
 8000e08:	f004 f992 	bl	8005130 <HAL_TIMEx_MasterConfigSynchronization>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000e12:	f7ff fea5 	bl	8000b60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e16:	2360      	movs	r3, #96	; 0x60
 8000e18:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e22:	2300      	movs	r3, #0
 8000e24:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e26:	2300      	movs	r3, #0
 8000e28:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e32:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e36:	2200      	movs	r2, #0
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4826      	ldr	r0, [pc, #152]	; (8000ed4 <MX_TIM1_Init+0x188>)
 8000e3c:	f003 fb14 	bl	8004468 <HAL_TIM_PWM_ConfigChannel>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000e46:	f7ff fe8b 	bl	8000b60 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e4a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e4e:	2204      	movs	r2, #4
 8000e50:	4619      	mov	r1, r3
 8000e52:	4820      	ldr	r0, [pc, #128]	; (8000ed4 <MX_TIM1_Init+0x188>)
 8000e54:	f003 fb08 	bl	8004468 <HAL_TIM_PWM_ConfigChannel>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000e5e:	f7ff fe7f 	bl	8000b60 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e62:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e66:	2208      	movs	r2, #8
 8000e68:	4619      	mov	r1, r3
 8000e6a:	481a      	ldr	r0, [pc, #104]	; (8000ed4 <MX_TIM1_Init+0x188>)
 8000e6c:	f003 fafc 	bl	8004468 <HAL_TIM_PWM_ConfigChannel>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8000e76:	f7ff fe73 	bl	8000b60 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e82:	2300      	movs	r3, #0
 8000e84:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e86:	2300      	movs	r3, #0
 8000e88:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e92:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000e94:	2300      	movs	r3, #0
 8000e96:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000ea0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000ea4:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000eb2:	1d3b      	adds	r3, r7, #4
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4807      	ldr	r0, [pc, #28]	; (8000ed4 <MX_TIM1_Init+0x188>)
 8000eb8:	f004 f9bc 	bl	8005234 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 8000ec2:	f7ff fe4d 	bl	8000b60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ec6:	4803      	ldr	r0, [pc, #12]	; (8000ed4 <MX_TIM1_Init+0x188>)
 8000ec8:	f000 f82e 	bl	8000f28 <HAL_TIM_MspPostInit>

}
 8000ecc:	bf00      	nop
 8000ece:	3770      	adds	r7, #112	; 0x70
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	20000198 	.word	0x20000198
 8000ed8:	40012c00 	.word	0x40012c00

08000edc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a0d      	ldr	r2, [pc, #52]	; (8000f20 <HAL_TIM_Base_MspInit+0x44>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d113      	bne.n	8000f16 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000eee:	4b0d      	ldr	r3, [pc, #52]	; (8000f24 <HAL_TIM_Base_MspInit+0x48>)
 8000ef0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ef2:	4a0c      	ldr	r2, [pc, #48]	; (8000f24 <HAL_TIM_Base_MspInit+0x48>)
 8000ef4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ef8:	6613      	str	r3, [r2, #96]	; 0x60
 8000efa:	4b0a      	ldr	r3, [pc, #40]	; (8000f24 <HAL_TIM_Base_MspInit+0x48>)
 8000efc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000efe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 15, 0);
 8000f06:	2200      	movs	r2, #0
 8000f08:	210f      	movs	r1, #15
 8000f0a:	201a      	movs	r0, #26
 8000f0c:	f001 f9d8 	bl	80022c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000f10:	201a      	movs	r0, #26
 8000f12:	f001 f9ef 	bl	80022f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000f16:	bf00      	nop
 8000f18:	3710      	adds	r7, #16
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40012c00 	.word	0x40012c00
 8000f24:	40021000 	.word	0x40021000

08000f28 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b08a      	sub	sp, #40	; 0x28
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f30:	f107 0314 	add.w	r3, r7, #20
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	605a      	str	r2, [r3, #4]
 8000f3a:	609a      	str	r2, [r3, #8]
 8000f3c:	60da      	str	r2, [r3, #12]
 8000f3e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a29      	ldr	r2, [pc, #164]	; (8000fec <HAL_TIM_MspPostInit+0xc4>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d14b      	bne.n	8000fe2 <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f4a:	4b29      	ldr	r3, [pc, #164]	; (8000ff0 <HAL_TIM_MspPostInit+0xc8>)
 8000f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f4e:	4a28      	ldr	r2, [pc, #160]	; (8000ff0 <HAL_TIM_MspPostInit+0xc8>)
 8000f50:	f043 0302 	orr.w	r3, r3, #2
 8000f54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f56:	4b26      	ldr	r3, [pc, #152]	; (8000ff0 <HAL_TIM_MspPostInit+0xc8>)
 8000f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f5a:	f003 0302 	and.w	r3, r3, #2
 8000f5e:	613b      	str	r3, [r7, #16]
 8000f60:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f62:	4b23      	ldr	r3, [pc, #140]	; (8000ff0 <HAL_TIM_MspPostInit+0xc8>)
 8000f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f66:	4a22      	ldr	r2, [pc, #136]	; (8000ff0 <HAL_TIM_MspPostInit+0xc8>)
 8000f68:	f043 0301 	orr.w	r3, r3, #1
 8000f6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f6e:	4b20      	ldr	r3, [pc, #128]	; (8000ff0 <HAL_TIM_MspPostInit+0xc8>)
 8000f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f72:	f003 0301 	and.w	r3, r3, #1
 8000f76:	60fb      	str	r3, [r7, #12]
 8000f78:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000f7a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000f7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f80:	2302      	movs	r3, #2
 8000f82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f84:	2300      	movs	r3, #0
 8000f86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000f8c:	2306      	movs	r3, #6
 8000f8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f90:	f107 0314 	add.w	r3, r7, #20
 8000f94:	4619      	mov	r1, r3
 8000f96:	4817      	ldr	r0, [pc, #92]	; (8000ff4 <HAL_TIM_MspPostInit+0xcc>)
 8000f98:	f001 fd24 	bl	80029e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000f9c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fa0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000faa:	2300      	movs	r3, #0
 8000fac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8000fae:	2304      	movs	r3, #4
 8000fb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb2:	f107 0314 	add.w	r3, r7, #20
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	480e      	ldr	r0, [pc, #56]	; (8000ff4 <HAL_TIM_MspPostInit+0xcc>)
 8000fba:	f001 fd13 	bl	80029e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000fbe:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000fc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000fd0:	2306      	movs	r3, #6
 8000fd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd4:	f107 0314 	add.w	r3, r7, #20
 8000fd8:	4619      	mov	r1, r3
 8000fda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fde:	f001 fd01 	bl	80029e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000fe2:	bf00      	nop
 8000fe4:	3728      	adds	r7, #40	; 0x28
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40012c00 	.word	0x40012c00
 8000ff0:	40021000 	.word	0x40021000
 8000ff4:	48000400 	.word	0x48000400

08000ff8 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ffc:	4b22      	ldr	r3, [pc, #136]	; (8001088 <MX_USART3_UART_Init+0x90>)
 8000ffe:	4a23      	ldr	r2, [pc, #140]	; (800108c <MX_USART3_UART_Init+0x94>)
 8001000:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001002:	4b21      	ldr	r3, [pc, #132]	; (8001088 <MX_USART3_UART_Init+0x90>)
 8001004:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001008:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800100a:	4b1f      	ldr	r3, [pc, #124]	; (8001088 <MX_USART3_UART_Init+0x90>)
 800100c:	2200      	movs	r2, #0
 800100e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001010:	4b1d      	ldr	r3, [pc, #116]	; (8001088 <MX_USART3_UART_Init+0x90>)
 8001012:	2200      	movs	r2, #0
 8001014:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001016:	4b1c      	ldr	r3, [pc, #112]	; (8001088 <MX_USART3_UART_Init+0x90>)
 8001018:	2200      	movs	r2, #0
 800101a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800101c:	4b1a      	ldr	r3, [pc, #104]	; (8001088 <MX_USART3_UART_Init+0x90>)
 800101e:	220c      	movs	r2, #12
 8001020:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001022:	4b19      	ldr	r3, [pc, #100]	; (8001088 <MX_USART3_UART_Init+0x90>)
 8001024:	2200      	movs	r2, #0
 8001026:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001028:	4b17      	ldr	r3, [pc, #92]	; (8001088 <MX_USART3_UART_Init+0x90>)
 800102a:	2200      	movs	r2, #0
 800102c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800102e:	4b16      	ldr	r3, [pc, #88]	; (8001088 <MX_USART3_UART_Init+0x90>)
 8001030:	2200      	movs	r2, #0
 8001032:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001034:	4b14      	ldr	r3, [pc, #80]	; (8001088 <MX_USART3_UART_Init+0x90>)
 8001036:	2200      	movs	r2, #0
 8001038:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800103a:	4b13      	ldr	r3, [pc, #76]	; (8001088 <MX_USART3_UART_Init+0x90>)
 800103c:	2200      	movs	r2, #0
 800103e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001040:	4811      	ldr	r0, [pc, #68]	; (8001088 <MX_USART3_UART_Init+0x90>)
 8001042:	f004 f9c9 	bl	80053d8 <HAL_UART_Init>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800104c:	f7ff fd88 	bl	8000b60 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001050:	2100      	movs	r1, #0
 8001052:	480d      	ldr	r0, [pc, #52]	; (8001088 <MX_USART3_UART_Init+0x90>)
 8001054:	f004 ff34 	bl	8005ec0 <HAL_UARTEx_SetTxFifoThreshold>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800105e:	f7ff fd7f 	bl	8000b60 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001062:	2100      	movs	r1, #0
 8001064:	4808      	ldr	r0, [pc, #32]	; (8001088 <MX_USART3_UART_Init+0x90>)
 8001066:	f004 ff69 	bl	8005f3c <HAL_UARTEx_SetRxFifoThreshold>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001070:	f7ff fd76 	bl	8000b60 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001074:	4804      	ldr	r0, [pc, #16]	; (8001088 <MX_USART3_UART_Init+0x90>)
 8001076:	f004 feea 	bl	8005e4e <HAL_UARTEx_DisableFifoMode>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001080:	f7ff fd6e 	bl	8000b60 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001084:	bf00      	nop
 8001086:	bd80      	pop	{r7, pc}
 8001088:	200001e4 	.word	0x200001e4
 800108c:	40004800 	.word	0x40004800

08001090 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b09a      	sub	sp, #104	; 0x68
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001098:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
 80010a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010a8:	f107 0310 	add.w	r3, r7, #16
 80010ac:	2244      	movs	r2, #68	; 0x44
 80010ae:	2100      	movs	r1, #0
 80010b0:	4618      	mov	r0, r3
 80010b2:	f004 ffcf 	bl	8006054 <memset>
  if(uartHandle->Instance==USART3)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a49      	ldr	r2, [pc, #292]	; (80011e0 <HAL_UART_MspInit+0x150>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	f040 808a 	bne.w	80011d6 <HAL_UART_MspInit+0x146>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80010c2:	2304      	movs	r3, #4
 80010c4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80010c6:	2300      	movs	r3, #0
 80010c8:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010ca:	f107 0310 	add.w	r3, r7, #16
 80010ce:	4618      	mov	r0, r3
 80010d0:	f002 fd68 	bl	8003ba4 <HAL_RCCEx_PeriphCLKConfig>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80010da:	f7ff fd41 	bl	8000b60 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80010de:	4b41      	ldr	r3, [pc, #260]	; (80011e4 <HAL_UART_MspInit+0x154>)
 80010e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010e2:	4a40      	ldr	r2, [pc, #256]	; (80011e4 <HAL_UART_MspInit+0x154>)
 80010e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010e8:	6593      	str	r3, [r2, #88]	; 0x58
 80010ea:	4b3e      	ldr	r3, [pc, #248]	; (80011e4 <HAL_UART_MspInit+0x154>)
 80010ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f6:	4b3b      	ldr	r3, [pc, #236]	; (80011e4 <HAL_UART_MspInit+0x154>)
 80010f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fa:	4a3a      	ldr	r2, [pc, #232]	; (80011e4 <HAL_UART_MspInit+0x154>)
 80010fc:	f043 0302 	orr.w	r3, r3, #2
 8001100:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001102:	4b38      	ldr	r3, [pc, #224]	; (80011e4 <HAL_UART_MspInit+0x154>)
 8001104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001106:	f003 0302 	and.w	r3, r3, #2
 800110a:	60bb      	str	r3, [r7, #8]
 800110c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800110e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001112:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001114:	2302      	movs	r3, #2
 8001116:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001118:	2300      	movs	r3, #0
 800111a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111c:	2300      	movs	r3, #0
 800111e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001120:	2307      	movs	r3, #7
 8001122:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001124:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001128:	4619      	mov	r1, r3
 800112a:	482f      	ldr	r0, [pc, #188]	; (80011e8 <HAL_UART_MspInit+0x158>)
 800112c:	f001 fc5a 	bl	80029e4 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA2_Channel2;
 8001130:	4b2e      	ldr	r3, [pc, #184]	; (80011ec <HAL_UART_MspInit+0x15c>)
 8001132:	4a2f      	ldr	r2, [pc, #188]	; (80011f0 <HAL_UART_MspInit+0x160>)
 8001134:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8001136:	4b2d      	ldr	r3, [pc, #180]	; (80011ec <HAL_UART_MspInit+0x15c>)
 8001138:	221c      	movs	r2, #28
 800113a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800113c:	4b2b      	ldr	r3, [pc, #172]	; (80011ec <HAL_UART_MspInit+0x15c>)
 800113e:	2200      	movs	r2, #0
 8001140:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001142:	4b2a      	ldr	r3, [pc, #168]	; (80011ec <HAL_UART_MspInit+0x15c>)
 8001144:	2200      	movs	r2, #0
 8001146:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001148:	4b28      	ldr	r3, [pc, #160]	; (80011ec <HAL_UART_MspInit+0x15c>)
 800114a:	2280      	movs	r2, #128	; 0x80
 800114c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800114e:	4b27      	ldr	r3, [pc, #156]	; (80011ec <HAL_UART_MspInit+0x15c>)
 8001150:	2200      	movs	r2, #0
 8001152:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001154:	4b25      	ldr	r3, [pc, #148]	; (80011ec <HAL_UART_MspInit+0x15c>)
 8001156:	2200      	movs	r2, #0
 8001158:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800115a:	4b24      	ldr	r3, [pc, #144]	; (80011ec <HAL_UART_MspInit+0x15c>)
 800115c:	2200      	movs	r2, #0
 800115e:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001160:	4b22      	ldr	r3, [pc, #136]	; (80011ec <HAL_UART_MspInit+0x15c>)
 8001162:	2200      	movs	r2, #0
 8001164:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001166:	4821      	ldr	r0, [pc, #132]	; (80011ec <HAL_UART_MspInit+0x15c>)
 8001168:	f001 f8d2 	bl	8002310 <HAL_DMA_Init>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8001172:	f7ff fcf5 	bl	8000b60 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a1c      	ldr	r2, [pc, #112]	; (80011ec <HAL_UART_MspInit+0x15c>)
 800117a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800117e:	4a1b      	ldr	r2, [pc, #108]	; (80011ec <HAL_UART_MspInit+0x15c>)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel3;
 8001184:	4b1b      	ldr	r3, [pc, #108]	; (80011f4 <HAL_UART_MspInit+0x164>)
 8001186:	4a1c      	ldr	r2, [pc, #112]	; (80011f8 <HAL_UART_MspInit+0x168>)
 8001188:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 800118a:	4b1a      	ldr	r3, [pc, #104]	; (80011f4 <HAL_UART_MspInit+0x164>)
 800118c:	221d      	movs	r2, #29
 800118e:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001190:	4b18      	ldr	r3, [pc, #96]	; (80011f4 <HAL_UART_MspInit+0x164>)
 8001192:	2210      	movs	r2, #16
 8001194:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001196:	4b17      	ldr	r3, [pc, #92]	; (80011f4 <HAL_UART_MspInit+0x164>)
 8001198:	2200      	movs	r2, #0
 800119a:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800119c:	4b15      	ldr	r3, [pc, #84]	; (80011f4 <HAL_UART_MspInit+0x164>)
 800119e:	2280      	movs	r2, #128	; 0x80
 80011a0:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011a2:	4b14      	ldr	r3, [pc, #80]	; (80011f4 <HAL_UART_MspInit+0x164>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011a8:	4b12      	ldr	r3, [pc, #72]	; (80011f4 <HAL_UART_MspInit+0x164>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80011ae:	4b11      	ldr	r3, [pc, #68]	; (80011f4 <HAL_UART_MspInit+0x164>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80011b4:	4b0f      	ldr	r3, [pc, #60]	; (80011f4 <HAL_UART_MspInit+0x164>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80011ba:	480e      	ldr	r0, [pc, #56]	; (80011f4 <HAL_UART_MspInit+0x164>)
 80011bc:	f001 f8a8 	bl	8002310 <HAL_DMA_Init>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 80011c6:	f7ff fccb 	bl	8000b60 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a09      	ldr	r2, [pc, #36]	; (80011f4 <HAL_UART_MspInit+0x164>)
 80011ce:	67da      	str	r2, [r3, #124]	; 0x7c
 80011d0:	4a08      	ldr	r2, [pc, #32]	; (80011f4 <HAL_UART_MspInit+0x164>)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80011d6:	bf00      	nop
 80011d8:	3768      	adds	r7, #104	; 0x68
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	40004800 	.word	0x40004800
 80011e4:	40021000 	.word	0x40021000
 80011e8:	48000400 	.word	0x48000400
 80011ec:	20000278 	.word	0x20000278
 80011f0:	4002041c 	.word	0x4002041c
 80011f4:	200002d8 	.word	0x200002d8
 80011f8:	40020030 	.word	0x40020030

080011fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80011fc:	480d      	ldr	r0, [pc, #52]	; (8001234 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80011fe:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001200:	f7ff fd92 	bl	8000d28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001204:	480c      	ldr	r0, [pc, #48]	; (8001238 <LoopForever+0x6>)
  ldr r1, =_edata
 8001206:	490d      	ldr	r1, [pc, #52]	; (800123c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001208:	4a0d      	ldr	r2, [pc, #52]	; (8001240 <LoopForever+0xe>)
  movs r3, #0
 800120a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800120c:	e002      	b.n	8001214 <LoopCopyDataInit>

0800120e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800120e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001210:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001212:	3304      	adds	r3, #4

08001214 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001214:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001216:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001218:	d3f9      	bcc.n	800120e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800121a:	4a0a      	ldr	r2, [pc, #40]	; (8001244 <LoopForever+0x12>)
  ldr r4, =_ebss
 800121c:	4c0a      	ldr	r4, [pc, #40]	; (8001248 <LoopForever+0x16>)
  movs r3, #0
 800121e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001220:	e001      	b.n	8001226 <LoopFillZerobss>

08001222 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001222:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001224:	3204      	adds	r2, #4

08001226 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001226:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001228:	d3fb      	bcc.n	8001222 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800122a:	f004 ff1b 	bl	8006064 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800122e:	f7ff fc27 	bl	8000a80 <main>

08001232 <LoopForever>:

LoopForever:
    b LoopForever
 8001232:	e7fe      	b.n	8001232 <LoopForever>
  ldr   r0, =_estack
 8001234:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001238:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800123c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001240:	08006114 	.word	0x08006114
  ldr r2, =_sbss
 8001244:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001248:	2000033c 	.word	0x2000033c

0800124c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800124c:	e7fe      	b.n	800124c <ADC1_2_IRQHandler>

0800124e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800124e:	b580      	push	{r7, lr}
 8001250:	b082      	sub	sp, #8
 8001252:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001254:	2300      	movs	r3, #0
 8001256:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001258:	2003      	movs	r0, #3
 800125a:	f001 f826 	bl	80022aa <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800125e:	200f      	movs	r0, #15
 8001260:	f7ff fca8 	bl	8000bb4 <HAL_InitTick>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d002      	beq.n	8001270 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	71fb      	strb	r3, [r7, #7]
 800126e:	e001      	b.n	8001274 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001270:	f7ff fc7c 	bl	8000b6c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001274:	79fb      	ldrb	r3, [r7, #7]

}
 8001276:	4618      	mov	r0, r3
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
	...

08001280 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001284:	4b05      	ldr	r3, [pc, #20]	; (800129c <HAL_IncTick+0x1c>)
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	4b05      	ldr	r3, [pc, #20]	; (80012a0 <HAL_IncTick+0x20>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4413      	add	r3, r2
 800128e:	4a03      	ldr	r2, [pc, #12]	; (800129c <HAL_IncTick+0x1c>)
 8001290:	6013      	str	r3, [r2, #0]
}
 8001292:	bf00      	nop
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr
 800129c:	20000338 	.word	0x20000338
 80012a0:	20000008 	.word	0x20000008

080012a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  return uwTick;
 80012a8:	4b03      	ldr	r3, [pc, #12]	; (80012b8 <HAL_GetTick+0x14>)
 80012aa:	681b      	ldr	r3, [r3, #0]
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	20000338 	.word	0x20000338

080012bc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	431a      	orrs	r2, r3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	609a      	str	r2, [r3, #8]
}
 80012d6:	bf00      	nop
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr

080012e2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80012e2:	b480      	push	{r7}
 80012e4:	b083      	sub	sp, #12
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	6078      	str	r0, [r7, #4]
 80012ea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	431a      	orrs	r2, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	609a      	str	r2, [r3, #8]
}
 80012fc:	bf00      	nop
 80012fe:	370c      	adds	r7, #12
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr

08001308 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001318:	4618      	mov	r0, r3
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001324:	b480      	push	{r7}
 8001326:	b087      	sub	sp, #28
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	60b9      	str	r1, [r7, #8]
 800132e:	607a      	str	r2, [r7, #4]
 8001330:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	3360      	adds	r3, #96	; 0x60
 8001336:	461a      	mov	r2, r3
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	4413      	add	r3, r2
 800133e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	4b08      	ldr	r3, [pc, #32]	; (8001368 <LL_ADC_SetOffset+0x44>)
 8001346:	4013      	ands	r3, r2
 8001348:	687a      	ldr	r2, [r7, #4]
 800134a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800134e:	683a      	ldr	r2, [r7, #0]
 8001350:	430a      	orrs	r2, r1
 8001352:	4313      	orrs	r3, r2
 8001354:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800135c:	bf00      	nop
 800135e:	371c      	adds	r7, #28
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr
 8001368:	03fff000 	.word	0x03fff000

0800136c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800136c:	b480      	push	{r7}
 800136e:	b085      	sub	sp, #20
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	3360      	adds	r3, #96	; 0x60
 800137a:	461a      	mov	r2, r3
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	4413      	add	r3, r2
 8001382:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800138c:	4618      	mov	r0, r3
 800138e:	3714      	adds	r7, #20
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001398:	b480      	push	{r7}
 800139a:	b087      	sub	sp, #28
 800139c:	af00      	add	r7, sp, #0
 800139e:	60f8      	str	r0, [r7, #12]
 80013a0:	60b9      	str	r1, [r7, #8]
 80013a2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	3360      	adds	r3, #96	; 0x60
 80013a8:	461a      	mov	r2, r3
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	4413      	add	r3, r2
 80013b0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	431a      	orrs	r2, r3
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80013c2:	bf00      	nop
 80013c4:	371c      	adds	r7, #28
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr

080013ce <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80013ce:	b480      	push	{r7}
 80013d0:	b087      	sub	sp, #28
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	60f8      	str	r0, [r7, #12]
 80013d6:	60b9      	str	r1, [r7, #8]
 80013d8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	3360      	adds	r3, #96	; 0x60
 80013de:	461a      	mov	r2, r3
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	4413      	add	r3, r2
 80013e6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	431a      	orrs	r2, r3
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80013f8:	bf00      	nop
 80013fa:	371c      	adds	r7, #28
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001404:	b480      	push	{r7}
 8001406:	b087      	sub	sp, #28
 8001408:	af00      	add	r7, sp, #0
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	60b9      	str	r1, [r7, #8]
 800140e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	3360      	adds	r3, #96	; 0x60
 8001414:	461a      	mov	r2, r3
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	4413      	add	r3, r2
 800141c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	431a      	orrs	r2, r3
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800142e:	bf00      	nop
 8001430:	371c      	adds	r7, #28
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr

0800143a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800143a:	b480      	push	{r7}
 800143c:	b083      	sub	sp, #12
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
 8001442:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	695b      	ldr	r3, [r3, #20]
 8001448:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	431a      	orrs	r2, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	615a      	str	r2, [r3, #20]
}
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001460:	b480      	push	{r7}
 8001462:	b087      	sub	sp, #28
 8001464:	af00      	add	r7, sp, #0
 8001466:	60f8      	str	r0, [r7, #12]
 8001468:	60b9      	str	r1, [r7, #8]
 800146a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	3330      	adds	r3, #48	; 0x30
 8001470:	461a      	mov	r2, r3
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	0a1b      	lsrs	r3, r3, #8
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	f003 030c 	and.w	r3, r3, #12
 800147c:	4413      	add	r3, r2
 800147e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	f003 031f 	and.w	r3, r3, #31
 800148a:	211f      	movs	r1, #31
 800148c:	fa01 f303 	lsl.w	r3, r1, r3
 8001490:	43db      	mvns	r3, r3
 8001492:	401a      	ands	r2, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	0e9b      	lsrs	r3, r3, #26
 8001498:	f003 011f 	and.w	r1, r3, #31
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	f003 031f 	and.w	r3, r3, #31
 80014a2:	fa01 f303 	lsl.w	r3, r1, r3
 80014a6:	431a      	orrs	r2, r3
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80014ac:	bf00      	nop
 80014ae:	371c      	adds	r7, #28
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b087      	sub	sp, #28
 80014bc:	af00      	add	r7, sp, #0
 80014be:	60f8      	str	r0, [r7, #12]
 80014c0:	60b9      	str	r1, [r7, #8]
 80014c2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	3314      	adds	r3, #20
 80014c8:	461a      	mov	r2, r3
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	0e5b      	lsrs	r3, r3, #25
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	f003 0304 	and.w	r3, r3, #4
 80014d4:	4413      	add	r3, r2
 80014d6:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	0d1b      	lsrs	r3, r3, #20
 80014e0:	f003 031f 	and.w	r3, r3, #31
 80014e4:	2107      	movs	r1, #7
 80014e6:	fa01 f303 	lsl.w	r3, r1, r3
 80014ea:	43db      	mvns	r3, r3
 80014ec:	401a      	ands	r2, r3
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	0d1b      	lsrs	r3, r3, #20
 80014f2:	f003 031f 	and.w	r3, r3, #31
 80014f6:	6879      	ldr	r1, [r7, #4]
 80014f8:	fa01 f303 	lsl.w	r3, r1, r3
 80014fc:	431a      	orrs	r2, r3
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001502:	bf00      	nop
 8001504:	371c      	adds	r7, #28
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
	...

08001510 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001510:	b480      	push	{r7}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	60b9      	str	r1, [r7, #8]
 800151a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001528:	43db      	mvns	r3, r3
 800152a:	401a      	ands	r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	f003 0318 	and.w	r3, r3, #24
 8001532:	4908      	ldr	r1, [pc, #32]	; (8001554 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001534:	40d9      	lsrs	r1, r3
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	400b      	ands	r3, r1
 800153a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800153e:	431a      	orrs	r2, r3
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001546:	bf00      	nop
 8001548:	3714      	adds	r7, #20
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	0007ffff 	.word	0x0007ffff

08001558 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001568:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	6093      	str	r3, [r2, #8]
}
 8001570:	bf00      	nop
 8001572:	370c      	adds	r7, #12
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr

0800157c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800158c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001590:	d101      	bne.n	8001596 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001592:	2301      	movs	r3, #1
 8001594:	e000      	b.n	8001598 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001596:	2300      	movs	r3, #0
}
 8001598:	4618      	mov	r0, r3
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80015b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015b8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80015c0:	bf00      	nop
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80015e0:	d101      	bne.n	80015e6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80015e2:	2301      	movs	r3, #1
 80015e4:	e000      	b.n	80015e8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80015e6:	2300      	movs	r3, #0
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	f003 0301 	and.w	r3, r3, #1
 8001604:	2b01      	cmp	r3, #1
 8001606:	d101      	bne.n	800160c <LL_ADC_IsEnabled+0x18>
 8001608:	2301      	movs	r3, #1
 800160a:	e000      	b.n	800160e <LL_ADC_IsEnabled+0x1a>
 800160c:	2300      	movs	r3, #0
}
 800160e:	4618      	mov	r0, r3
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr

0800161a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800161a:	b480      	push	{r7}
 800161c:	b083      	sub	sp, #12
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	f003 0304 	and.w	r3, r3, #4
 800162a:	2b04      	cmp	r3, #4
 800162c:	d101      	bne.n	8001632 <LL_ADC_REG_IsConversionOngoing+0x18>
 800162e:	2301      	movs	r3, #1
 8001630:	e000      	b.n	8001634 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001632:	2300      	movs	r3, #0
}
 8001634:	4618      	mov	r0, r3
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	f003 0308 	and.w	r3, r3, #8
 8001650:	2b08      	cmp	r3, #8
 8001652:	d101      	bne.n	8001658 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001654:	2301      	movs	r3, #1
 8001656:	e000      	b.n	800165a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001658:	2300      	movs	r3, #0
}
 800165a:	4618      	mov	r0, r3
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
	...

08001668 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001668:	b590      	push	{r4, r7, lr}
 800166a:	b089      	sub	sp, #36	; 0x24
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001670:	2300      	movs	r3, #0
 8001672:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001674:	2300      	movs	r3, #0
 8001676:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d101      	bne.n	8001682 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e167      	b.n	8001952 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	695b      	ldr	r3, [r3, #20]
 8001686:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800168c:	2b00      	cmp	r3, #0
 800168e:	d109      	bne.n	80016a4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f7fe ffa5 	bl	80005e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2200      	movs	r2, #0
 800169a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2200      	movs	r2, #0
 80016a0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff ff67 	bl	800157c <LL_ADC_IsDeepPowerDownEnabled>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d004      	beq.n	80016be <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff ff4d 	bl	8001558 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff ff82 	bl	80015cc <LL_ADC_IsInternalRegulatorEnabled>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d115      	bne.n	80016fa <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7ff ff66 	bl	80015a4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80016d8:	4ba0      	ldr	r3, [pc, #640]	; (800195c <HAL_ADC_Init+0x2f4>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	099b      	lsrs	r3, r3, #6
 80016de:	4aa0      	ldr	r2, [pc, #640]	; (8001960 <HAL_ADC_Init+0x2f8>)
 80016e0:	fba2 2303 	umull	r2, r3, r2, r3
 80016e4:	099b      	lsrs	r3, r3, #6
 80016e6:	3301      	adds	r3, #1
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80016ec:	e002      	b.n	80016f4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	3b01      	subs	r3, #1
 80016f2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d1f9      	bne.n	80016ee <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4618      	mov	r0, r3
 8001700:	f7ff ff64 	bl	80015cc <LL_ADC_IsInternalRegulatorEnabled>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d10d      	bne.n	8001726 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800170e:	f043 0210 	orr.w	r2, r3, #16
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800171a:	f043 0201 	orr.w	r2, r3, #1
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4618      	mov	r0, r3
 800172c:	f7ff ff75 	bl	800161a <LL_ADC_REG_IsConversionOngoing>
 8001730:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001736:	f003 0310 	and.w	r3, r3, #16
 800173a:	2b00      	cmp	r3, #0
 800173c:	f040 8100 	bne.w	8001940 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	2b00      	cmp	r3, #0
 8001744:	f040 80fc 	bne.w	8001940 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800174c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001750:	f043 0202 	orr.w	r2, r3, #2
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff ff49 	bl	80015f4 <LL_ADC_IsEnabled>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d111      	bne.n	800178c <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001768:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800176c:	f7ff ff42 	bl	80015f4 <LL_ADC_IsEnabled>
 8001770:	4604      	mov	r4, r0
 8001772:	487c      	ldr	r0, [pc, #496]	; (8001964 <HAL_ADC_Init+0x2fc>)
 8001774:	f7ff ff3e 	bl	80015f4 <LL_ADC_IsEnabled>
 8001778:	4603      	mov	r3, r0
 800177a:	4323      	orrs	r3, r4
 800177c:	2b00      	cmp	r3, #0
 800177e:	d105      	bne.n	800178c <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	4619      	mov	r1, r3
 8001786:	4878      	ldr	r0, [pc, #480]	; (8001968 <HAL_ADC_Init+0x300>)
 8001788:	f7ff fd98 	bl	80012bc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	7f5b      	ldrb	r3, [r3, #29]
 8001790:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001796:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800179c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80017a2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80017aa:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80017ac:	4313      	orrs	r3, r2
 80017ae:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d106      	bne.n	80017c8 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017be:	3b01      	subs	r3, #1
 80017c0:	045b      	lsls	r3, r3, #17
 80017c2:	69ba      	ldr	r2, [r7, #24]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d009      	beq.n	80017e4 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d4:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017dc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80017de:	69ba      	ldr	r2, [r7, #24]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	68da      	ldr	r2, [r3, #12]
 80017ea:	4b60      	ldr	r3, [pc, #384]	; (800196c <HAL_ADC_Init+0x304>)
 80017ec:	4013      	ands	r3, r2
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	6812      	ldr	r2, [r2, #0]
 80017f2:	69b9      	ldr	r1, [r7, #24]
 80017f4:	430b      	orrs	r3, r1
 80017f6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	691b      	ldr	r3, [r3, #16]
 80017fe:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	430a      	orrs	r2, r1
 800180c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff ff14 	bl	8001640 <LL_ADC_INJ_IsConversionOngoing>
 8001818:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d16d      	bne.n	80018fc <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d16a      	bne.n	80018fc <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800182a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001832:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001834:	4313      	orrs	r3, r2
 8001836:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	68db      	ldr	r3, [r3, #12]
 800183e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001842:	f023 0302 	bic.w	r3, r3, #2
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	6812      	ldr	r2, [r2, #0]
 800184a:	69b9      	ldr	r1, [r7, #24]
 800184c:	430b      	orrs	r3, r1
 800184e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	691b      	ldr	r3, [r3, #16]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d017      	beq.n	8001888 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	691a      	ldr	r2, [r3, #16]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001866:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001870:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001874:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	6911      	ldr	r1, [r2, #16]
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	6812      	ldr	r2, [r2, #0]
 8001880:	430b      	orrs	r3, r1
 8001882:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001886:	e013      	b.n	80018b0 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	691a      	ldr	r2, [r3, #16]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001896:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	6812      	ldr	r2, [r2, #0]
 80018a4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80018a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80018ac:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d118      	bne.n	80018ec <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	691b      	ldr	r3, [r3, #16]
 80018c0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80018c4:	f023 0304 	bic.w	r3, r3, #4
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80018d0:	4311      	orrs	r1, r2
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80018d6:	4311      	orrs	r1, r2
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80018dc:	430a      	orrs	r2, r1
 80018de:	431a      	orrs	r2, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f042 0201 	orr.w	r2, r2, #1
 80018e8:	611a      	str	r2, [r3, #16]
 80018ea:	e007      	b.n	80018fc <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	691a      	ldr	r2, [r3, #16]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f022 0201 	bic.w	r2, r2, #1
 80018fa:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	695b      	ldr	r3, [r3, #20]
 8001900:	2b01      	cmp	r3, #1
 8001902:	d10c      	bne.n	800191e <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	f023 010f 	bic.w	r1, r3, #15
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6a1b      	ldr	r3, [r3, #32]
 8001912:	1e5a      	subs	r2, r3, #1
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	430a      	orrs	r2, r1
 800191a:	631a      	str	r2, [r3, #48]	; 0x30
 800191c:	e007      	b.n	800192e <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f022 020f 	bic.w	r2, r2, #15
 800192c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001932:	f023 0303 	bic.w	r3, r3, #3
 8001936:	f043 0201 	orr.w	r2, r3, #1
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	65da      	str	r2, [r3, #92]	; 0x5c
 800193e:	e007      	b.n	8001950 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001944:	f043 0210 	orr.w	r2, r3, #16
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001950:	7ffb      	ldrb	r3, [r7, #31]
}
 8001952:	4618      	mov	r0, r3
 8001954:	3724      	adds	r7, #36	; 0x24
 8001956:	46bd      	mov	sp, r7
 8001958:	bd90      	pop	{r4, r7, pc}
 800195a:	bf00      	nop
 800195c:	20000000 	.word	0x20000000
 8001960:	053e2d63 	.word	0x053e2d63
 8001964:	50000100 	.word	0x50000100
 8001968:	50000300 	.word	0x50000300
 800196c:	fff04007 	.word	0xfff04007

08001970 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b0b6      	sub	sp, #216	; 0xd8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800197a:	2300      	movs	r3, #0
 800197c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001980:	2300      	movs	r3, #0
 8001982:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800198a:	2b01      	cmp	r3, #1
 800198c:	d101      	bne.n	8001992 <HAL_ADC_ConfigChannel+0x22>
 800198e:	2302      	movs	r3, #2
 8001990:	e3c8      	b.n	8002124 <HAL_ADC_ConfigChannel+0x7b4>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2201      	movs	r2, #1
 8001996:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4618      	mov	r0, r3
 80019a0:	f7ff fe3b 	bl	800161a <LL_ADC_REG_IsConversionOngoing>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	f040 83ad 	bne.w	8002106 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6818      	ldr	r0, [r3, #0]
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	6859      	ldr	r1, [r3, #4]
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	461a      	mov	r2, r3
 80019ba:	f7ff fd51 	bl	8001460 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7ff fe29 	bl	800161a <LL_ADC_REG_IsConversionOngoing>
 80019c8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff fe35 	bl	8001640 <LL_ADC_INJ_IsConversionOngoing>
 80019d6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80019da:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	f040 81d9 	bne.w	8001d96 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80019e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	f040 81d4 	bne.w	8001d96 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80019f6:	d10f      	bne.n	8001a18 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6818      	ldr	r0, [r3, #0]
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2200      	movs	r2, #0
 8001a02:	4619      	mov	r1, r3
 8001a04:	f7ff fd58 	bl	80014b8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff fd12 	bl	800143a <LL_ADC_SetSamplingTimeCommonConfig>
 8001a16:	e00e      	b.n	8001a36 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6818      	ldr	r0, [r3, #0]
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	6819      	ldr	r1, [r3, #0]
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	461a      	mov	r2, r3
 8001a26:	f7ff fd47 	bl	80014b8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	2100      	movs	r1, #0
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff fd02 	bl	800143a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	695a      	ldr	r2, [r3, #20]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	08db      	lsrs	r3, r3, #3
 8001a42:	f003 0303 	and.w	r3, r3, #3
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	691b      	ldr	r3, [r3, #16]
 8001a54:	2b04      	cmp	r3, #4
 8001a56:	d022      	beq.n	8001a9e <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6818      	ldr	r0, [r3, #0]
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	6919      	ldr	r1, [r3, #16]
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001a68:	f7ff fc5c 	bl	8001324 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6818      	ldr	r0, [r3, #0]
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	6919      	ldr	r1, [r3, #16]
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	461a      	mov	r2, r3
 8001a7a:	f7ff fca8 	bl	80013ce <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6818      	ldr	r0, [r3, #0]
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d102      	bne.n	8001a94 <HAL_ADC_ConfigChannel+0x124>
 8001a8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a92:	e000      	b.n	8001a96 <HAL_ADC_ConfigChannel+0x126>
 8001a94:	2300      	movs	r3, #0
 8001a96:	461a      	mov	r2, r3
 8001a98:	f7ff fcb4 	bl	8001404 <LL_ADC_SetOffsetSaturation>
 8001a9c:	e17b      	b.n	8001d96 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff fc61 	bl	800136c <LL_ADC_GetOffsetChannel>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d10a      	bne.n	8001aca <HAL_ADC_ConfigChannel+0x15a>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2100      	movs	r1, #0
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7ff fc56 	bl	800136c <LL_ADC_GetOffsetChannel>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	0e9b      	lsrs	r3, r3, #26
 8001ac4:	f003 021f 	and.w	r2, r3, #31
 8001ac8:	e01e      	b.n	8001b08 <HAL_ADC_ConfigChannel+0x198>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2100      	movs	r1, #0
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7ff fc4b 	bl	800136c <LL_ADC_GetOffsetChannel>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001adc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001ae0:	fa93 f3a3 	rbit	r3, r3
 8001ae4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001ae8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001aec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001af0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d101      	bne.n	8001afc <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8001af8:	2320      	movs	r3, #32
 8001afa:	e004      	b.n	8001b06 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8001afc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001b00:	fab3 f383 	clz	r3, r3
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d105      	bne.n	8001b20 <HAL_ADC_ConfigChannel+0x1b0>
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	0e9b      	lsrs	r3, r3, #26
 8001b1a:	f003 031f 	and.w	r3, r3, #31
 8001b1e:	e018      	b.n	8001b52 <HAL_ADC_ConfigChannel+0x1e2>
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b28:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001b2c:	fa93 f3a3 	rbit	r3, r3
 8001b30:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001b34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001b38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001b3c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d101      	bne.n	8001b48 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8001b44:	2320      	movs	r3, #32
 8001b46:	e004      	b.n	8001b52 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8001b48:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001b4c:	fab3 f383 	clz	r3, r3
 8001b50:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d106      	bne.n	8001b64 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7ff fc1a 	bl	8001398 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2101      	movs	r1, #1
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7ff fbfe 	bl	800136c <LL_ADC_GetOffsetChannel>
 8001b70:	4603      	mov	r3, r0
 8001b72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d10a      	bne.n	8001b90 <HAL_ADC_ConfigChannel+0x220>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2101      	movs	r1, #1
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff fbf3 	bl	800136c <LL_ADC_GetOffsetChannel>
 8001b86:	4603      	mov	r3, r0
 8001b88:	0e9b      	lsrs	r3, r3, #26
 8001b8a:	f003 021f 	and.w	r2, r3, #31
 8001b8e:	e01e      	b.n	8001bce <HAL_ADC_ConfigChannel+0x25e>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2101      	movs	r1, #1
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7ff fbe8 	bl	800136c <LL_ADC_GetOffsetChannel>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001ba6:	fa93 f3a3 	rbit	r3, r3
 8001baa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001bae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001bb2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001bb6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d101      	bne.n	8001bc2 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8001bbe:	2320      	movs	r3, #32
 8001bc0:	e004      	b.n	8001bcc <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8001bc2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001bc6:	fab3 f383 	clz	r3, r3
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d105      	bne.n	8001be6 <HAL_ADC_ConfigChannel+0x276>
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	0e9b      	lsrs	r3, r3, #26
 8001be0:	f003 031f 	and.w	r3, r3, #31
 8001be4:	e018      	b.n	8001c18 <HAL_ADC_ConfigChannel+0x2a8>
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001bf2:	fa93 f3a3 	rbit	r3, r3
 8001bf6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001bfa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001bfe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001c02:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d101      	bne.n	8001c0e <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8001c0a:	2320      	movs	r3, #32
 8001c0c:	e004      	b.n	8001c18 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8001c0e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c12:	fab3 f383 	clz	r3, r3
 8001c16:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d106      	bne.n	8001c2a <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2200      	movs	r2, #0
 8001c22:	2101      	movs	r1, #1
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7ff fbb7 	bl	8001398 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2102      	movs	r1, #2
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7ff fb9b 	bl	800136c <LL_ADC_GetOffsetChannel>
 8001c36:	4603      	mov	r3, r0
 8001c38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d10a      	bne.n	8001c56 <HAL_ADC_ConfigChannel+0x2e6>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2102      	movs	r1, #2
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7ff fb90 	bl	800136c <LL_ADC_GetOffsetChannel>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	0e9b      	lsrs	r3, r3, #26
 8001c50:	f003 021f 	and.w	r2, r3, #31
 8001c54:	e01e      	b.n	8001c94 <HAL_ADC_ConfigChannel+0x324>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	2102      	movs	r1, #2
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff fb85 	bl	800136c <LL_ADC_GetOffsetChannel>
 8001c62:	4603      	mov	r3, r0
 8001c64:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c68:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c6c:	fa93 f3a3 	rbit	r3, r3
 8001c70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001c74:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001c78:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001c7c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d101      	bne.n	8001c88 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8001c84:	2320      	movs	r3, #32
 8001c86:	e004      	b.n	8001c92 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8001c88:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001c8c:	fab3 f383 	clz	r3, r3
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d105      	bne.n	8001cac <HAL_ADC_ConfigChannel+0x33c>
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	0e9b      	lsrs	r3, r3, #26
 8001ca6:	f003 031f 	and.w	r3, r3, #31
 8001caa:	e016      	b.n	8001cda <HAL_ADC_ConfigChannel+0x36a>
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001cb8:	fa93 f3a3 	rbit	r3, r3
 8001cbc:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001cbe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001cc0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001cc4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d101      	bne.n	8001cd0 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8001ccc:	2320      	movs	r3, #32
 8001cce:	e004      	b.n	8001cda <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8001cd0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001cd4:	fab3 f383 	clz	r3, r3
 8001cd8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d106      	bne.n	8001cec <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	2102      	movs	r1, #2
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7ff fb56 	bl	8001398 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2103      	movs	r1, #3
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7ff fb3a 	bl	800136c <LL_ADC_GetOffsetChannel>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d10a      	bne.n	8001d18 <HAL_ADC_ConfigChannel+0x3a8>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	2103      	movs	r1, #3
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff fb2f 	bl	800136c <LL_ADC_GetOffsetChannel>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	0e9b      	lsrs	r3, r3, #26
 8001d12:	f003 021f 	and.w	r2, r3, #31
 8001d16:	e017      	b.n	8001d48 <HAL_ADC_ConfigChannel+0x3d8>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2103      	movs	r1, #3
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7ff fb24 	bl	800136c <LL_ADC_GetOffsetChannel>
 8001d24:	4603      	mov	r3, r0
 8001d26:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d2a:	fa93 f3a3 	rbit	r3, r3
 8001d2e:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001d30:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d32:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001d34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d101      	bne.n	8001d3e <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8001d3a:	2320      	movs	r3, #32
 8001d3c:	e003      	b.n	8001d46 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8001d3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d40:	fab3 f383 	clz	r3, r3
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d105      	bne.n	8001d60 <HAL_ADC_ConfigChannel+0x3f0>
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	0e9b      	lsrs	r3, r3, #26
 8001d5a:	f003 031f 	and.w	r3, r3, #31
 8001d5e:	e011      	b.n	8001d84 <HAL_ADC_ConfigChannel+0x414>
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d66:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d68:	fa93 f3a3 	rbit	r3, r3
 8001d6c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001d6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001d70:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001d72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d101      	bne.n	8001d7c <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8001d78:	2320      	movs	r3, #32
 8001d7a:	e003      	b.n	8001d84 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8001d7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d7e:	fab3 f383 	clz	r3, r3
 8001d82:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d106      	bne.n	8001d96 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	2103      	movs	r1, #3
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7ff fb01 	bl	8001398 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7ff fc2a 	bl	80015f4 <LL_ADC_IsEnabled>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	f040 8140 	bne.w	8002028 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6818      	ldr	r0, [r3, #0]
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	6819      	ldr	r1, [r3, #0]
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	461a      	mov	r2, r3
 8001db6:	f7ff fbab 	bl	8001510 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	68db      	ldr	r3, [r3, #12]
 8001dbe:	4a8f      	ldr	r2, [pc, #572]	; (8001ffc <HAL_ADC_ConfigChannel+0x68c>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	f040 8131 	bne.w	8002028 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d10b      	bne.n	8001dee <HAL_ADC_ConfigChannel+0x47e>
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	0e9b      	lsrs	r3, r3, #26
 8001ddc:	3301      	adds	r3, #1
 8001dde:	f003 031f 	and.w	r3, r3, #31
 8001de2:	2b09      	cmp	r3, #9
 8001de4:	bf94      	ite	ls
 8001de6:	2301      	movls	r3, #1
 8001de8:	2300      	movhi	r3, #0
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	e019      	b.n	8001e22 <HAL_ADC_ConfigChannel+0x4b2>
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001df6:	fa93 f3a3 	rbit	r3, r3
 8001dfa:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001dfc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001dfe:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001e00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d101      	bne.n	8001e0a <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8001e06:	2320      	movs	r3, #32
 8001e08:	e003      	b.n	8001e12 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8001e0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e0c:	fab3 f383 	clz	r3, r3
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	3301      	adds	r3, #1
 8001e14:	f003 031f 	and.w	r3, r3, #31
 8001e18:	2b09      	cmp	r3, #9
 8001e1a:	bf94      	ite	ls
 8001e1c:	2301      	movls	r3, #1
 8001e1e:	2300      	movhi	r3, #0
 8001e20:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d079      	beq.n	8001f1a <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d107      	bne.n	8001e42 <HAL_ADC_ConfigChannel+0x4d2>
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	0e9b      	lsrs	r3, r3, #26
 8001e38:	3301      	adds	r3, #1
 8001e3a:	069b      	lsls	r3, r3, #26
 8001e3c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e40:	e015      	b.n	8001e6e <HAL_ADC_ConfigChannel+0x4fe>
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e4a:	fa93 f3a3 	rbit	r3, r3
 8001e4e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001e50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e52:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001e54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d101      	bne.n	8001e5e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8001e5a:	2320      	movs	r3, #32
 8001e5c:	e003      	b.n	8001e66 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8001e5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e60:	fab3 f383 	clz	r3, r3
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	3301      	adds	r3, #1
 8001e68:	069b      	lsls	r3, r3, #26
 8001e6a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d109      	bne.n	8001e8e <HAL_ADC_ConfigChannel+0x51e>
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	0e9b      	lsrs	r3, r3, #26
 8001e80:	3301      	adds	r3, #1
 8001e82:	f003 031f 	and.w	r3, r3, #31
 8001e86:	2101      	movs	r1, #1
 8001e88:	fa01 f303 	lsl.w	r3, r1, r3
 8001e8c:	e017      	b.n	8001ebe <HAL_ADC_ConfigChannel+0x54e>
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e96:	fa93 f3a3 	rbit	r3, r3
 8001e9a:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001e9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e9e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001ea0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d101      	bne.n	8001eaa <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8001ea6:	2320      	movs	r3, #32
 8001ea8:	e003      	b.n	8001eb2 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8001eaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001eac:	fab3 f383 	clz	r3, r3
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	f003 031f 	and.w	r3, r3, #31
 8001eb8:	2101      	movs	r1, #1
 8001eba:	fa01 f303 	lsl.w	r3, r1, r3
 8001ebe:	ea42 0103 	orr.w	r1, r2, r3
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d10a      	bne.n	8001ee4 <HAL_ADC_ConfigChannel+0x574>
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	0e9b      	lsrs	r3, r3, #26
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	f003 021f 	and.w	r2, r3, #31
 8001eda:	4613      	mov	r3, r2
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	4413      	add	r3, r2
 8001ee0:	051b      	lsls	r3, r3, #20
 8001ee2:	e018      	b.n	8001f16 <HAL_ADC_ConfigChannel+0x5a6>
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001eec:	fa93 f3a3 	rbit	r3, r3
 8001ef0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001ef2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ef4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001ef6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d101      	bne.n	8001f00 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8001efc:	2320      	movs	r3, #32
 8001efe:	e003      	b.n	8001f08 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8001f00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f02:	fab3 f383 	clz	r3, r3
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	3301      	adds	r3, #1
 8001f0a:	f003 021f 	and.w	r2, r3, #31
 8001f0e:	4613      	mov	r3, r2
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	4413      	add	r3, r2
 8001f14:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f16:	430b      	orrs	r3, r1
 8001f18:	e081      	b.n	800201e <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d107      	bne.n	8001f36 <HAL_ADC_ConfigChannel+0x5c6>
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	0e9b      	lsrs	r3, r3, #26
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	069b      	lsls	r3, r3, #26
 8001f30:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f34:	e015      	b.n	8001f62 <HAL_ADC_ConfigChannel+0x5f2>
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f3e:	fa93 f3a3 	rbit	r3, r3
 8001f42:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f46:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d101      	bne.n	8001f52 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8001f4e:	2320      	movs	r3, #32
 8001f50:	e003      	b.n	8001f5a <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8001f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f54:	fab3 f383 	clz	r3, r3
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	069b      	lsls	r3, r3, #26
 8001f5e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d109      	bne.n	8001f82 <HAL_ADC_ConfigChannel+0x612>
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	0e9b      	lsrs	r3, r3, #26
 8001f74:	3301      	adds	r3, #1
 8001f76:	f003 031f 	and.w	r3, r3, #31
 8001f7a:	2101      	movs	r1, #1
 8001f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f80:	e017      	b.n	8001fb2 <HAL_ADC_ConfigChannel+0x642>
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f88:	6a3b      	ldr	r3, [r7, #32]
 8001f8a:	fa93 f3a3 	rbit	r3, r3
 8001f8e:	61fb      	str	r3, [r7, #28]
  return result;
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d101      	bne.n	8001f9e <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8001f9a:	2320      	movs	r3, #32
 8001f9c:	e003      	b.n	8001fa6 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8001f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa0:	fab3 f383 	clz	r3, r3
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	f003 031f 	and.w	r3, r3, #31
 8001fac:	2101      	movs	r1, #1
 8001fae:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb2:	ea42 0103 	orr.w	r1, r2, r3
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d10d      	bne.n	8001fde <HAL_ADC_ConfigChannel+0x66e>
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	0e9b      	lsrs	r3, r3, #26
 8001fc8:	3301      	adds	r3, #1
 8001fca:	f003 021f 	and.w	r2, r3, #31
 8001fce:	4613      	mov	r3, r2
 8001fd0:	005b      	lsls	r3, r3, #1
 8001fd2:	4413      	add	r3, r2
 8001fd4:	3b1e      	subs	r3, #30
 8001fd6:	051b      	lsls	r3, r3, #20
 8001fd8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001fdc:	e01e      	b.n	800201c <HAL_ADC_ConfigChannel+0x6ac>
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	fa93 f3a3 	rbit	r3, r3
 8001fea:	613b      	str	r3, [r7, #16]
  return result;
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d104      	bne.n	8002000 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8001ff6:	2320      	movs	r3, #32
 8001ff8:	e006      	b.n	8002008 <HAL_ADC_ConfigChannel+0x698>
 8001ffa:	bf00      	nop
 8001ffc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	fab3 f383 	clz	r3, r3
 8002006:	b2db      	uxtb	r3, r3
 8002008:	3301      	adds	r3, #1
 800200a:	f003 021f 	and.w	r2, r3, #31
 800200e:	4613      	mov	r3, r2
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	4413      	add	r3, r2
 8002014:	3b1e      	subs	r3, #30
 8002016:	051b      	lsls	r3, r3, #20
 8002018:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800201c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800201e:	683a      	ldr	r2, [r7, #0]
 8002020:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002022:	4619      	mov	r1, r3
 8002024:	f7ff fa48 	bl	80014b8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	4b3f      	ldr	r3, [pc, #252]	; (800212c <HAL_ADC_ConfigChannel+0x7bc>)
 800202e:	4013      	ands	r3, r2
 8002030:	2b00      	cmp	r3, #0
 8002032:	d071      	beq.n	8002118 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002034:	483e      	ldr	r0, [pc, #248]	; (8002130 <HAL_ADC_ConfigChannel+0x7c0>)
 8002036:	f7ff f967 	bl	8001308 <LL_ADC_GetCommonPathInternalCh>
 800203a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a3c      	ldr	r2, [pc, #240]	; (8002134 <HAL_ADC_ConfigChannel+0x7c4>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d004      	beq.n	8002052 <HAL_ADC_ConfigChannel+0x6e2>
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a3a      	ldr	r2, [pc, #232]	; (8002138 <HAL_ADC_ConfigChannel+0x7c8>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d127      	bne.n	80020a2 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002052:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002056:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d121      	bne.n	80020a2 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002066:	d157      	bne.n	8002118 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002068:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800206c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002070:	4619      	mov	r1, r3
 8002072:	482f      	ldr	r0, [pc, #188]	; (8002130 <HAL_ADC_ConfigChannel+0x7c0>)
 8002074:	f7ff f935 	bl	80012e2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002078:	4b30      	ldr	r3, [pc, #192]	; (800213c <HAL_ADC_ConfigChannel+0x7cc>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	099b      	lsrs	r3, r3, #6
 800207e:	4a30      	ldr	r2, [pc, #192]	; (8002140 <HAL_ADC_ConfigChannel+0x7d0>)
 8002080:	fba2 2303 	umull	r2, r3, r2, r3
 8002084:	099b      	lsrs	r3, r3, #6
 8002086:	1c5a      	adds	r2, r3, #1
 8002088:	4613      	mov	r3, r2
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	4413      	add	r3, r2
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002092:	e002      	b.n	800209a <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	3b01      	subs	r3, #1
 8002098:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d1f9      	bne.n	8002094 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80020a0:	e03a      	b.n	8002118 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a27      	ldr	r2, [pc, #156]	; (8002144 <HAL_ADC_ConfigChannel+0x7d4>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d113      	bne.n	80020d4 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80020ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d10d      	bne.n	80020d4 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a22      	ldr	r2, [pc, #136]	; (8002148 <HAL_ADC_ConfigChannel+0x7d8>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d02a      	beq.n	8002118 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80020c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020ca:	4619      	mov	r1, r3
 80020cc:	4818      	ldr	r0, [pc, #96]	; (8002130 <HAL_ADC_ConfigChannel+0x7c0>)
 80020ce:	f7ff f908 	bl	80012e2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80020d2:	e021      	b.n	8002118 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a1c      	ldr	r2, [pc, #112]	; (800214c <HAL_ADC_ConfigChannel+0x7dc>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d11c      	bne.n	8002118 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80020de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d116      	bne.n	8002118 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a16      	ldr	r2, [pc, #88]	; (8002148 <HAL_ADC_ConfigChannel+0x7d8>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d011      	beq.n	8002118 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80020f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80020fc:	4619      	mov	r1, r3
 80020fe:	480c      	ldr	r0, [pc, #48]	; (8002130 <HAL_ADC_ConfigChannel+0x7c0>)
 8002100:	f7ff f8ef 	bl	80012e2 <LL_ADC_SetCommonPathInternalCh>
 8002104:	e008      	b.n	8002118 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800210a:	f043 0220 	orr.w	r2, r3, #32
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002120:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002124:	4618      	mov	r0, r3
 8002126:	37d8      	adds	r7, #216	; 0xd8
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	80080000 	.word	0x80080000
 8002130:	50000300 	.word	0x50000300
 8002134:	c3210000 	.word	0xc3210000
 8002138:	90c00010 	.word	0x90c00010
 800213c:	20000000 	.word	0x20000000
 8002140:	053e2d63 	.word	0x053e2d63
 8002144:	c7520000 	.word	0xc7520000
 8002148:	50000100 	.word	0x50000100
 800214c:	cb840000 	.word	0xcb840000

08002150 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002150:	b480      	push	{r7}
 8002152:	b085      	sub	sp, #20
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f003 0307 	and.w	r3, r3, #7
 800215e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002160:	4b0c      	ldr	r3, [pc, #48]	; (8002194 <__NVIC_SetPriorityGrouping+0x44>)
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002166:	68ba      	ldr	r2, [r7, #8]
 8002168:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800216c:	4013      	ands	r3, r2
 800216e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002178:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800217c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002180:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002182:	4a04      	ldr	r2, [pc, #16]	; (8002194 <__NVIC_SetPriorityGrouping+0x44>)
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	60d3      	str	r3, [r2, #12]
}
 8002188:	bf00      	nop
 800218a:	3714      	adds	r7, #20
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr
 8002194:	e000ed00 	.word	0xe000ed00

08002198 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800219c:	4b04      	ldr	r3, [pc, #16]	; (80021b0 <__NVIC_GetPriorityGrouping+0x18>)
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	0a1b      	lsrs	r3, r3, #8
 80021a2:	f003 0307 	and.w	r3, r3, #7
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr
 80021b0:	e000ed00 	.word	0xe000ed00

080021b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	4603      	mov	r3, r0
 80021bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	db0b      	blt.n	80021de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021c6:	79fb      	ldrb	r3, [r7, #7]
 80021c8:	f003 021f 	and.w	r2, r3, #31
 80021cc:	4907      	ldr	r1, [pc, #28]	; (80021ec <__NVIC_EnableIRQ+0x38>)
 80021ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d2:	095b      	lsrs	r3, r3, #5
 80021d4:	2001      	movs	r0, #1
 80021d6:	fa00 f202 	lsl.w	r2, r0, r2
 80021da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021de:	bf00      	nop
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	e000e100 	.word	0xe000e100

080021f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	4603      	mov	r3, r0
 80021f8:	6039      	str	r1, [r7, #0]
 80021fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002200:	2b00      	cmp	r3, #0
 8002202:	db0a      	blt.n	800221a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	b2da      	uxtb	r2, r3
 8002208:	490c      	ldr	r1, [pc, #48]	; (800223c <__NVIC_SetPriority+0x4c>)
 800220a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800220e:	0112      	lsls	r2, r2, #4
 8002210:	b2d2      	uxtb	r2, r2
 8002212:	440b      	add	r3, r1
 8002214:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002218:	e00a      	b.n	8002230 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	b2da      	uxtb	r2, r3
 800221e:	4908      	ldr	r1, [pc, #32]	; (8002240 <__NVIC_SetPriority+0x50>)
 8002220:	79fb      	ldrb	r3, [r7, #7]
 8002222:	f003 030f 	and.w	r3, r3, #15
 8002226:	3b04      	subs	r3, #4
 8002228:	0112      	lsls	r2, r2, #4
 800222a:	b2d2      	uxtb	r2, r2
 800222c:	440b      	add	r3, r1
 800222e:	761a      	strb	r2, [r3, #24]
}
 8002230:	bf00      	nop
 8002232:	370c      	adds	r7, #12
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr
 800223c:	e000e100 	.word	0xe000e100
 8002240:	e000ed00 	.word	0xe000ed00

08002244 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002244:	b480      	push	{r7}
 8002246:	b089      	sub	sp, #36	; 0x24
 8002248:	af00      	add	r7, sp, #0
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	60b9      	str	r1, [r7, #8]
 800224e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	f003 0307 	and.w	r3, r3, #7
 8002256:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	f1c3 0307 	rsb	r3, r3, #7
 800225e:	2b04      	cmp	r3, #4
 8002260:	bf28      	it	cs
 8002262:	2304      	movcs	r3, #4
 8002264:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	3304      	adds	r3, #4
 800226a:	2b06      	cmp	r3, #6
 800226c:	d902      	bls.n	8002274 <NVIC_EncodePriority+0x30>
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	3b03      	subs	r3, #3
 8002272:	e000      	b.n	8002276 <NVIC_EncodePriority+0x32>
 8002274:	2300      	movs	r3, #0
 8002276:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002278:	f04f 32ff 	mov.w	r2, #4294967295
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	fa02 f303 	lsl.w	r3, r2, r3
 8002282:	43da      	mvns	r2, r3
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	401a      	ands	r2, r3
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800228c:	f04f 31ff 	mov.w	r1, #4294967295
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	fa01 f303 	lsl.w	r3, r1, r3
 8002296:	43d9      	mvns	r1, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800229c:	4313      	orrs	r3, r2
         );
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3724      	adds	r7, #36	; 0x24
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr

080022aa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022aa:	b580      	push	{r7, lr}
 80022ac:	b082      	sub	sp, #8
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f7ff ff4c 	bl	8002150 <__NVIC_SetPriorityGrouping>
}
 80022b8:	bf00      	nop
 80022ba:	3708      	adds	r7, #8
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}

080022c0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b086      	sub	sp, #24
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	4603      	mov	r3, r0
 80022c8:	60b9      	str	r1, [r7, #8]
 80022ca:	607a      	str	r2, [r7, #4]
 80022cc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80022ce:	f7ff ff63 	bl	8002198 <__NVIC_GetPriorityGrouping>
 80022d2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	68b9      	ldr	r1, [r7, #8]
 80022d8:	6978      	ldr	r0, [r7, #20]
 80022da:	f7ff ffb3 	bl	8002244 <NVIC_EncodePriority>
 80022de:	4602      	mov	r2, r0
 80022e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022e4:	4611      	mov	r1, r2
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7ff ff82 	bl	80021f0 <__NVIC_SetPriority>
}
 80022ec:	bf00      	nop
 80022ee:	3718      	adds	r7, #24
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	4603      	mov	r3, r0
 80022fc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002302:	4618      	mov	r0, r3
 8002304:	f7ff ff56 	bl	80021b4 <__NVIC_EnableIRQ>
}
 8002308:	bf00      	nop
 800230a:	3708      	adds	r7, #8
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}

08002310 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d101      	bne.n	8002322 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e08d      	b.n	800243e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	461a      	mov	r2, r3
 8002328:	4b47      	ldr	r3, [pc, #284]	; (8002448 <HAL_DMA_Init+0x138>)
 800232a:	429a      	cmp	r2, r3
 800232c:	d80f      	bhi.n	800234e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	461a      	mov	r2, r3
 8002334:	4b45      	ldr	r3, [pc, #276]	; (800244c <HAL_DMA_Init+0x13c>)
 8002336:	4413      	add	r3, r2
 8002338:	4a45      	ldr	r2, [pc, #276]	; (8002450 <HAL_DMA_Init+0x140>)
 800233a:	fba2 2303 	umull	r2, r3, r2, r3
 800233e:	091b      	lsrs	r3, r3, #4
 8002340:	009a      	lsls	r2, r3, #2
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a42      	ldr	r2, [pc, #264]	; (8002454 <HAL_DMA_Init+0x144>)
 800234a:	641a      	str	r2, [r3, #64]	; 0x40
 800234c:	e00e      	b.n	800236c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	461a      	mov	r2, r3
 8002354:	4b40      	ldr	r3, [pc, #256]	; (8002458 <HAL_DMA_Init+0x148>)
 8002356:	4413      	add	r3, r2
 8002358:	4a3d      	ldr	r2, [pc, #244]	; (8002450 <HAL_DMA_Init+0x140>)
 800235a:	fba2 2303 	umull	r2, r3, r2, r3
 800235e:	091b      	lsrs	r3, r3, #4
 8002360:	009a      	lsls	r2, r3, #2
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a3c      	ldr	r2, [pc, #240]	; (800245c <HAL_DMA_Init+0x14c>)
 800236a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2202      	movs	r2, #2
 8002370:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002382:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002386:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002390:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	691b      	ldr	r3, [r3, #16]
 8002396:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800239c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	699b      	ldr	r3, [r3, #24]
 80023a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6a1b      	ldr	r3, [r3, #32]
 80023ae:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80023b0:	68fa      	ldr	r2, [r7, #12]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	68fa      	ldr	r2, [r7, #12]
 80023bc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f000 f8fe 	bl	80025c0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80023cc:	d102      	bne.n	80023d4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685a      	ldr	r2, [r3, #4]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023dc:	b2d2      	uxtb	r2, r2
 80023de:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80023e8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d010      	beq.n	8002414 <HAL_DMA_Init+0x104>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	2b04      	cmp	r3, #4
 80023f8:	d80c      	bhi.n	8002414 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f000 f91e 	bl	800263c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002404:	2200      	movs	r2, #0
 8002406:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002410:	605a      	str	r2, [r3, #4]
 8002412:	e008      	b.n	8002426 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2201      	movs	r2, #1
 8002430:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800243c:	2300      	movs	r3, #0
}
 800243e:	4618      	mov	r0, r3
 8002440:	3710      	adds	r7, #16
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	40020407 	.word	0x40020407
 800244c:	bffdfff8 	.word	0xbffdfff8
 8002450:	cccccccd 	.word	0xcccccccd
 8002454:	40020000 	.word	0x40020000
 8002458:	bffdfbf8 	.word	0xbffdfbf8
 800245c:	40020400 	.word	0x40020400

08002460 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800247c:	f003 031f 	and.w	r3, r3, #31
 8002480:	2204      	movs	r2, #4
 8002482:	409a      	lsls	r2, r3
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	4013      	ands	r3, r2
 8002488:	2b00      	cmp	r3, #0
 800248a:	d026      	beq.n	80024da <HAL_DMA_IRQHandler+0x7a>
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	f003 0304 	and.w	r3, r3, #4
 8002492:	2b00      	cmp	r3, #0
 8002494:	d021      	beq.n	80024da <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0320 	and.w	r3, r3, #32
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d107      	bne.n	80024b4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f022 0204 	bic.w	r2, r2, #4
 80024b2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b8:	f003 021f 	and.w	r2, r3, #31
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c0:	2104      	movs	r1, #4
 80024c2:	fa01 f202 	lsl.w	r2, r1, r2
 80024c6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d071      	beq.n	80025b4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80024d8:	e06c      	b.n	80025b4 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024de:	f003 031f 	and.w	r3, r3, #31
 80024e2:	2202      	movs	r2, #2
 80024e4:	409a      	lsls	r2, r3
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	4013      	ands	r3, r2
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d02e      	beq.n	800254c <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	f003 0302 	and.w	r3, r3, #2
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d029      	beq.n	800254c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0320 	and.w	r3, r3, #32
 8002502:	2b00      	cmp	r3, #0
 8002504:	d10b      	bne.n	800251e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f022 020a 	bic.w	r2, r2, #10
 8002514:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2201      	movs	r2, #1
 800251a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002522:	f003 021f 	and.w	r2, r3, #31
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252a:	2102      	movs	r1, #2
 800252c:	fa01 f202 	lsl.w	r2, r1, r2
 8002530:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800253e:	2b00      	cmp	r3, #0
 8002540:	d038      	beq.n	80025b4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800254a:	e033      	b.n	80025b4 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002550:	f003 031f 	and.w	r3, r3, #31
 8002554:	2208      	movs	r2, #8
 8002556:	409a      	lsls	r2, r3
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	4013      	ands	r3, r2
 800255c:	2b00      	cmp	r3, #0
 800255e:	d02a      	beq.n	80025b6 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	f003 0308 	and.w	r3, r3, #8
 8002566:	2b00      	cmp	r3, #0
 8002568:	d025      	beq.n	80025b6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f022 020e 	bic.w	r2, r2, #14
 8002578:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257e:	f003 021f 	and.w	r2, r3, #31
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002586:	2101      	movs	r1, #1
 8002588:	fa01 f202 	lsl.w	r2, r1, r2
 800258c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2201      	movs	r2, #1
 8002592:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2201      	movs	r2, #1
 8002598:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2200      	movs	r2, #0
 80025a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d004      	beq.n	80025b6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80025b4:	bf00      	nop
 80025b6:	bf00      	nop
}
 80025b8:	3710      	adds	r7, #16
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
	...

080025c0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b087      	sub	sp, #28
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	461a      	mov	r2, r3
 80025ce:	4b16      	ldr	r3, [pc, #88]	; (8002628 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d802      	bhi.n	80025da <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80025d4:	4b15      	ldr	r3, [pc, #84]	; (800262c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80025d6:	617b      	str	r3, [r7, #20]
 80025d8:	e001      	b.n	80025de <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80025da:	4b15      	ldr	r3, [pc, #84]	; (8002630 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80025dc:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	3b08      	subs	r3, #8
 80025ea:	4a12      	ldr	r2, [pc, #72]	; (8002634 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80025ec:	fba2 2303 	umull	r2, r3, r2, r3
 80025f0:	091b      	lsrs	r3, r3, #4
 80025f2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f8:	089b      	lsrs	r3, r3, #2
 80025fa:	009a      	lsls	r2, r3, #2
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	4413      	add	r3, r2
 8002600:	461a      	mov	r2, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a0b      	ldr	r2, [pc, #44]	; (8002638 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800260a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f003 031f 	and.w	r3, r3, #31
 8002612:	2201      	movs	r2, #1
 8002614:	409a      	lsls	r2, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	651a      	str	r2, [r3, #80]	; 0x50
}
 800261a:	bf00      	nop
 800261c:	371c      	adds	r7, #28
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	40020407 	.word	0x40020407
 800262c:	40020800 	.word	0x40020800
 8002630:	40020820 	.word	0x40020820
 8002634:	cccccccd 	.word	0xcccccccd
 8002638:	40020880 	.word	0x40020880

0800263c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800263c:	b480      	push	{r7}
 800263e:	b085      	sub	sp, #20
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	b2db      	uxtb	r3, r3
 800264a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800264c:	68fa      	ldr	r2, [r7, #12]
 800264e:	4b0b      	ldr	r3, [pc, #44]	; (800267c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002650:	4413      	add	r3, r2
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	461a      	mov	r2, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a08      	ldr	r2, [pc, #32]	; (8002680 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800265e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	3b01      	subs	r3, #1
 8002664:	f003 031f 	and.w	r3, r3, #31
 8002668:	2201      	movs	r2, #1
 800266a:	409a      	lsls	r2, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002670:	bf00      	nop
 8002672:	3714      	adds	r7, #20
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr
 800267c:	1000823f 	.word	0x1000823f
 8002680:	40020940 	.word	0x40020940

08002684 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d101      	bne.n	8002696 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e147      	b.n	8002926 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800269c:	b2db      	uxtb	r3, r3
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d106      	bne.n	80026b0 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f7fe f872 	bl	8000794 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	699a      	ldr	r2, [r3, #24]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f022 0210 	bic.w	r2, r2, #16
 80026be:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80026c0:	f7fe fdf0 	bl	80012a4 <HAL_GetTick>
 80026c4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80026c6:	e012      	b.n	80026ee <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80026c8:	f7fe fdec 	bl	80012a4 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b0a      	cmp	r3, #10
 80026d4:	d90b      	bls.n	80026ee <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026da:	f043 0201 	orr.w	r2, r3, #1
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2203      	movs	r2, #3
 80026e6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e11b      	b.n	8002926 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	699b      	ldr	r3, [r3, #24]
 80026f4:	f003 0308 	and.w	r3, r3, #8
 80026f8:	2b08      	cmp	r3, #8
 80026fa:	d0e5      	beq.n	80026c8 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	699a      	ldr	r2, [r3, #24]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f042 0201 	orr.w	r2, r2, #1
 800270a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800270c:	f7fe fdca 	bl	80012a4 <HAL_GetTick>
 8002710:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002712:	e012      	b.n	800273a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002714:	f7fe fdc6 	bl	80012a4 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b0a      	cmp	r3, #10
 8002720:	d90b      	bls.n	800273a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002726:	f043 0201 	orr.w	r2, r3, #1
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2203      	movs	r2, #3
 8002732:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e0f5      	b.n	8002926 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	699b      	ldr	r3, [r3, #24]
 8002740:	f003 0301 	and.w	r3, r3, #1
 8002744:	2b00      	cmp	r3, #0
 8002746:	d0e5      	beq.n	8002714 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	699a      	ldr	r2, [r3, #24]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f042 0202 	orr.w	r2, r2, #2
 8002756:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a74      	ldr	r2, [pc, #464]	; (8002930 <HAL_FDCAN_Init+0x2ac>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d103      	bne.n	800276a <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8002762:	4a74      	ldr	r2, [pc, #464]	; (8002934 <HAL_FDCAN_Init+0x2b0>)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	7c1b      	ldrb	r3, [r3, #16]
 800276e:	2b01      	cmp	r3, #1
 8002770:	d108      	bne.n	8002784 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	699a      	ldr	r2, [r3, #24]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002780:	619a      	str	r2, [r3, #24]
 8002782:	e007      	b.n	8002794 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	699a      	ldr	r2, [r3, #24]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002792:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	7c5b      	ldrb	r3, [r3, #17]
 8002798:	2b01      	cmp	r3, #1
 800279a:	d108      	bne.n	80027ae <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	699a      	ldr	r2, [r3, #24]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027aa:	619a      	str	r2, [r3, #24]
 80027ac:	e007      	b.n	80027be <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	699a      	ldr	r2, [r3, #24]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80027bc:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	7c9b      	ldrb	r3, [r3, #18]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d108      	bne.n	80027d8 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	699a      	ldr	r2, [r3, #24]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80027d4:	619a      	str	r2, [r3, #24]
 80027d6:	e007      	b.n	80027e8 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	699a      	ldr	r2, [r3, #24]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80027e6:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	699b      	ldr	r3, [r3, #24]
 80027ee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	689a      	ldr	r2, [r3, #8]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	430a      	orrs	r2, r1
 80027fc:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	699a      	ldr	r2, [r3, #24]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800280c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	691a      	ldr	r2, [r3, #16]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f022 0210 	bic.w	r2, r2, #16
 800281c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	2b01      	cmp	r3, #1
 8002824:	d108      	bne.n	8002838 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	699a      	ldr	r2, [r3, #24]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f042 0204 	orr.w	r2, r2, #4
 8002834:	619a      	str	r2, [r3, #24]
 8002836:	e02c      	b.n	8002892 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d028      	beq.n	8002892 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	2b02      	cmp	r3, #2
 8002846:	d01c      	beq.n	8002882 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	699a      	ldr	r2, [r3, #24]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002856:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	691a      	ldr	r2, [r3, #16]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f042 0210 	orr.w	r2, r2, #16
 8002866:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	2b03      	cmp	r3, #3
 800286e:	d110      	bne.n	8002892 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	699a      	ldr	r2, [r3, #24]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f042 0220 	orr.w	r2, r2, #32
 800287e:	619a      	str	r2, [r3, #24]
 8002880:	e007      	b.n	8002892 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	699a      	ldr	r2, [r3, #24]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f042 0220 	orr.w	r2, r2, #32
 8002890:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	699b      	ldr	r3, [r3, #24]
 8002896:	3b01      	subs	r3, #1
 8002898:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	69db      	ldr	r3, [r3, #28]
 800289e:	3b01      	subs	r3, #1
 80028a0:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80028a2:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6a1b      	ldr	r3, [r3, #32]
 80028a8:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80028aa:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	695b      	ldr	r3, [r3, #20]
 80028b2:	3b01      	subs	r3, #1
 80028b4:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80028ba:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80028bc:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80028c6:	d115      	bne.n	80028f4 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028cc:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d2:	3b01      	subs	r3, #1
 80028d4:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80028d6:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028dc:	3b01      	subs	r3, #1
 80028de:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80028e0:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e8:	3b01      	subs	r3, #1
 80028ea:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80028f0:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80028f2:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	430a      	orrs	r2, r1
 8002906:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f000 f814 	bl	8002938 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8002924:	2300      	movs	r3, #0
}
 8002926:	4618      	mov	r0, r3
 8002928:	3710      	adds	r7, #16
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	40006400 	.word	0x40006400
 8002934:	40006500 	.word	0x40006500

08002938 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8002940:	4b27      	ldr	r3, [pc, #156]	; (80029e0 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8002942:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	68ba      	ldr	r2, [r7, #8]
 8002948:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002952:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800295a:	041a      	lsls	r2, r3, #16
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	430a      	orrs	r2, r1
 8002962:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	f103 0270 	add.w	r2, r3, #112	; 0x70
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002978:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002980:	061a      	lsls	r2, r3, #24
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	430a      	orrs	r2, r1
 8002988:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	f503 7218 	add.w	r2, r3, #608	; 0x260
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	f503 721e 	add.w	r2, r3, #632	; 0x278
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	60fb      	str	r3, [r7, #12]
 80029b8:	e005      	b.n	80029c6 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2200      	movs	r2, #0
 80029be:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	3304      	adds	r3, #4
 80029c4:	60fb      	str	r3, [r7, #12]
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80029cc:	68fa      	ldr	r2, [r7, #12]
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d3f3      	bcc.n	80029ba <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 80029d2:	bf00      	nop
 80029d4:	bf00      	nop
 80029d6:	3714      	adds	r7, #20
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr
 80029e0:	4000a400 	.word	0x4000a400

080029e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b087      	sub	sp, #28
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80029ee:	2300      	movs	r3, #0
 80029f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80029f2:	e15a      	b.n	8002caa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	2101      	movs	r1, #1
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002a00:	4013      	ands	r3, r2
 8002a02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	f000 814c 	beq.w	8002ca4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f003 0303 	and.w	r3, r3, #3
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d005      	beq.n	8002a24 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d130      	bne.n	8002a86 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	005b      	lsls	r3, r3, #1
 8002a2e:	2203      	movs	r2, #3
 8002a30:	fa02 f303 	lsl.w	r3, r2, r3
 8002a34:	43db      	mvns	r3, r3
 8002a36:	693a      	ldr	r2, [r7, #16]
 8002a38:	4013      	ands	r3, r2
 8002a3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	68da      	ldr	r2, [r3, #12]
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	005b      	lsls	r3, r3, #1
 8002a44:	fa02 f303 	lsl.w	r3, r2, r3
 8002a48:	693a      	ldr	r2, [r7, #16]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	693a      	ldr	r2, [r7, #16]
 8002a52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a62:	43db      	mvns	r3, r3
 8002a64:	693a      	ldr	r2, [r7, #16]
 8002a66:	4013      	ands	r3, r2
 8002a68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	091b      	lsrs	r3, r3, #4
 8002a70:	f003 0201 	and.w	r2, r3, #1
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7a:	693a      	ldr	r2, [r7, #16]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	693a      	ldr	r2, [r7, #16]
 8002a84:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f003 0303 	and.w	r3, r3, #3
 8002a8e:	2b03      	cmp	r3, #3
 8002a90:	d017      	beq.n	8002ac2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	005b      	lsls	r3, r3, #1
 8002a9c:	2203      	movs	r2, #3
 8002a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa2:	43db      	mvns	r3, r3
 8002aa4:	693a      	ldr	r2, [r7, #16]
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	689a      	ldr	r2, [r3, #8]
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	005b      	lsls	r3, r3, #1
 8002ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab6:	693a      	ldr	r2, [r7, #16]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	693a      	ldr	r2, [r7, #16]
 8002ac0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f003 0303 	and.w	r3, r3, #3
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d123      	bne.n	8002b16 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	08da      	lsrs	r2, r3, #3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	3208      	adds	r2, #8
 8002ad6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ada:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	f003 0307 	and.w	r3, r3, #7
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	220f      	movs	r2, #15
 8002ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aea:	43db      	mvns	r3, r3
 8002aec:	693a      	ldr	r2, [r7, #16]
 8002aee:	4013      	ands	r3, r2
 8002af0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	691a      	ldr	r2, [r3, #16]
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	f003 0307 	and.w	r3, r3, #7
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	fa02 f303 	lsl.w	r3, r2, r3
 8002b02:	693a      	ldr	r2, [r7, #16]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	08da      	lsrs	r2, r3, #3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	3208      	adds	r2, #8
 8002b10:	6939      	ldr	r1, [r7, #16]
 8002b12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	005b      	lsls	r3, r3, #1
 8002b20:	2203      	movs	r2, #3
 8002b22:	fa02 f303 	lsl.w	r3, r2, r3
 8002b26:	43db      	mvns	r3, r3
 8002b28:	693a      	ldr	r2, [r7, #16]
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f003 0203 	and.w	r2, r3, #3
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	005b      	lsls	r3, r3, #1
 8002b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3e:	693a      	ldr	r2, [r7, #16]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	693a      	ldr	r2, [r7, #16]
 8002b48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	f000 80a6 	beq.w	8002ca4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b58:	4b5b      	ldr	r3, [pc, #364]	; (8002cc8 <HAL_GPIO_Init+0x2e4>)
 8002b5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b5c:	4a5a      	ldr	r2, [pc, #360]	; (8002cc8 <HAL_GPIO_Init+0x2e4>)
 8002b5e:	f043 0301 	orr.w	r3, r3, #1
 8002b62:	6613      	str	r3, [r2, #96]	; 0x60
 8002b64:	4b58      	ldr	r3, [pc, #352]	; (8002cc8 <HAL_GPIO_Init+0x2e4>)
 8002b66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b68:	f003 0301 	and.w	r3, r3, #1
 8002b6c:	60bb      	str	r3, [r7, #8]
 8002b6e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b70:	4a56      	ldr	r2, [pc, #344]	; (8002ccc <HAL_GPIO_Init+0x2e8>)
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	089b      	lsrs	r3, r3, #2
 8002b76:	3302      	adds	r3, #2
 8002b78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	f003 0303 	and.w	r3, r3, #3
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	220f      	movs	r2, #15
 8002b88:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8c:	43db      	mvns	r3, r3
 8002b8e:	693a      	ldr	r2, [r7, #16]
 8002b90:	4013      	ands	r3, r2
 8002b92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002b9a:	d01f      	beq.n	8002bdc <HAL_GPIO_Init+0x1f8>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	4a4c      	ldr	r2, [pc, #304]	; (8002cd0 <HAL_GPIO_Init+0x2ec>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d019      	beq.n	8002bd8 <HAL_GPIO_Init+0x1f4>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	4a4b      	ldr	r2, [pc, #300]	; (8002cd4 <HAL_GPIO_Init+0x2f0>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d013      	beq.n	8002bd4 <HAL_GPIO_Init+0x1f0>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	4a4a      	ldr	r2, [pc, #296]	; (8002cd8 <HAL_GPIO_Init+0x2f4>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d00d      	beq.n	8002bd0 <HAL_GPIO_Init+0x1ec>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	4a49      	ldr	r2, [pc, #292]	; (8002cdc <HAL_GPIO_Init+0x2f8>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d007      	beq.n	8002bcc <HAL_GPIO_Init+0x1e8>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	4a48      	ldr	r2, [pc, #288]	; (8002ce0 <HAL_GPIO_Init+0x2fc>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d101      	bne.n	8002bc8 <HAL_GPIO_Init+0x1e4>
 8002bc4:	2305      	movs	r3, #5
 8002bc6:	e00a      	b.n	8002bde <HAL_GPIO_Init+0x1fa>
 8002bc8:	2306      	movs	r3, #6
 8002bca:	e008      	b.n	8002bde <HAL_GPIO_Init+0x1fa>
 8002bcc:	2304      	movs	r3, #4
 8002bce:	e006      	b.n	8002bde <HAL_GPIO_Init+0x1fa>
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	e004      	b.n	8002bde <HAL_GPIO_Init+0x1fa>
 8002bd4:	2302      	movs	r3, #2
 8002bd6:	e002      	b.n	8002bde <HAL_GPIO_Init+0x1fa>
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e000      	b.n	8002bde <HAL_GPIO_Init+0x1fa>
 8002bdc:	2300      	movs	r3, #0
 8002bde:	697a      	ldr	r2, [r7, #20]
 8002be0:	f002 0203 	and.w	r2, r2, #3
 8002be4:	0092      	lsls	r2, r2, #2
 8002be6:	4093      	lsls	r3, r2
 8002be8:	693a      	ldr	r2, [r7, #16]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bee:	4937      	ldr	r1, [pc, #220]	; (8002ccc <HAL_GPIO_Init+0x2e8>)
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	089b      	lsrs	r3, r3, #2
 8002bf4:	3302      	adds	r3, #2
 8002bf6:	693a      	ldr	r2, [r7, #16]
 8002bf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002bfc:	4b39      	ldr	r3, [pc, #228]	; (8002ce4 <HAL_GPIO_Init+0x300>)
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	43db      	mvns	r3, r3
 8002c06:	693a      	ldr	r2, [r7, #16]
 8002c08:	4013      	ands	r3, r2
 8002c0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d003      	beq.n	8002c20 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002c18:	693a      	ldr	r2, [r7, #16]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002c20:	4a30      	ldr	r2, [pc, #192]	; (8002ce4 <HAL_GPIO_Init+0x300>)
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002c26:	4b2f      	ldr	r3, [pc, #188]	; (8002ce4 <HAL_GPIO_Init+0x300>)
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	43db      	mvns	r3, r3
 8002c30:	693a      	ldr	r2, [r7, #16]
 8002c32:	4013      	ands	r3, r2
 8002c34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d003      	beq.n	8002c4a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002c42:	693a      	ldr	r2, [r7, #16]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002c4a:	4a26      	ldr	r2, [pc, #152]	; (8002ce4 <HAL_GPIO_Init+0x300>)
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002c50:	4b24      	ldr	r3, [pc, #144]	; (8002ce4 <HAL_GPIO_Init+0x300>)
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	43db      	mvns	r3, r3
 8002c5a:	693a      	ldr	r2, [r7, #16]
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d003      	beq.n	8002c74 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002c6c:	693a      	ldr	r2, [r7, #16]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002c74:	4a1b      	ldr	r2, [pc, #108]	; (8002ce4 <HAL_GPIO_Init+0x300>)
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002c7a:	4b1a      	ldr	r3, [pc, #104]	; (8002ce4 <HAL_GPIO_Init+0x300>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	43db      	mvns	r3, r3
 8002c84:	693a      	ldr	r2, [r7, #16]
 8002c86:	4013      	ands	r3, r2
 8002c88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d003      	beq.n	8002c9e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002c96:	693a      	ldr	r2, [r7, #16]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002c9e:	4a11      	ldr	r2, [pc, #68]	; (8002ce4 <HAL_GPIO_Init+0x300>)
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	fa22 f303 	lsr.w	r3, r2, r3
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	f47f ae9d 	bne.w	80029f4 <HAL_GPIO_Init+0x10>
  }
}
 8002cba:	bf00      	nop
 8002cbc:	bf00      	nop
 8002cbe:	371c      	adds	r7, #28
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr
 8002cc8:	40021000 	.word	0x40021000
 8002ccc:	40010000 	.word	0x40010000
 8002cd0:	48000400 	.word	0x48000400
 8002cd4:	48000800 	.word	0x48000800
 8002cd8:	48000c00 	.word	0x48000c00
 8002cdc:	48001000 	.word	0x48001000
 8002ce0:	48001400 	.word	0x48001400
 8002ce4:	40010400 	.word	0x40010400

08002ce8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	807b      	strh	r3, [r7, #2]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002cf8:	787b      	ldrb	r3, [r7, #1]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d003      	beq.n	8002d06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002cfe:	887a      	ldrh	r2, [r7, #2]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002d04:	e002      	b.n	8002d0c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d06:	887a      	ldrh	r2, [r7, #2]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002d0c:	bf00      	nop
 8002d0e:	370c      	adds	r7, #12
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr

08002d18 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b082      	sub	sp, #8
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d101      	bne.n	8002d2a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e08d      	b.n	8002e46 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d106      	bne.n	8002d44 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f7fd fe26 	bl	8000990 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2224      	movs	r2, #36	; 0x24
 8002d48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f022 0201 	bic.w	r2, r2, #1
 8002d5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	685a      	ldr	r2, [r3, #4]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d68:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	689a      	ldr	r2, [r3, #8]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d78:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d107      	bne.n	8002d92 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	689a      	ldr	r2, [r3, #8]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d8e:	609a      	str	r2, [r3, #8]
 8002d90:	e006      	b.n	8002da0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	689a      	ldr	r2, [r3, #8]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002d9e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d108      	bne.n	8002dba <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	685a      	ldr	r2, [r3, #4]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002db6:	605a      	str	r2, [r3, #4]
 8002db8:	e007      	b.n	8002dca <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	685a      	ldr	r2, [r3, #4]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002dc8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	6812      	ldr	r2, [r2, #0]
 8002dd4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002dd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ddc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	68da      	ldr	r2, [r3, #12]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002dec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	691a      	ldr	r2, [r3, #16]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	695b      	ldr	r3, [r3, #20]
 8002df6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	430a      	orrs	r2, r1
 8002e06:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	69d9      	ldr	r1, [r3, #28]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a1a      	ldr	r2, [r3, #32]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	430a      	orrs	r2, r1
 8002e16:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f042 0201 	orr.w	r2, r2, #1
 8002e26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2220      	movs	r2, #32
 8002e32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002e44:	2300      	movs	r3, #0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3708      	adds	r7, #8
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}

08002e4e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002e4e:	b480      	push	{r7}
 8002e50:	b083      	sub	sp, #12
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	6078      	str	r0, [r7, #4]
 8002e56:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	2b20      	cmp	r3, #32
 8002e62:	d138      	bne.n	8002ed6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d101      	bne.n	8002e72 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002e6e:	2302      	movs	r3, #2
 8002e70:	e032      	b.n	8002ed8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2201      	movs	r2, #1
 8002e76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2224      	movs	r2, #36	; 0x24
 8002e7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f022 0201 	bic.w	r2, r2, #1
 8002e90:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002ea0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	6819      	ldr	r1, [r3, #0]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	683a      	ldr	r2, [r7, #0]
 8002eae:	430a      	orrs	r2, r1
 8002eb0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f042 0201 	orr.w	r2, r2, #1
 8002ec0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2220      	movs	r2, #32
 8002ec6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	e000      	b.n	8002ed8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002ed6:	2302      	movs	r3, #2
  }
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	370c      	adds	r7, #12
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b085      	sub	sp, #20
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2b20      	cmp	r3, #32
 8002ef8:	d139      	bne.n	8002f6e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d101      	bne.n	8002f08 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002f04:	2302      	movs	r3, #2
 8002f06:	e033      	b.n	8002f70 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2224      	movs	r2, #36	; 0x24
 8002f14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f022 0201 	bic.w	r2, r2, #1
 8002f26:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002f36:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	021b      	lsls	r3, r3, #8
 8002f3c:	68fa      	ldr	r2, [r7, #12]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	68fa      	ldr	r2, [r7, #12]
 8002f48:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f042 0201 	orr.w	r2, r2, #1
 8002f58:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2220      	movs	r2, #32
 8002f5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	e000      	b.n	8002f70 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002f6e:	2302      	movs	r3, #2
  }
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3714      	adds	r7, #20
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr

08002f7c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b085      	sub	sp, #20
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d141      	bne.n	800300e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f8a:	4b4b      	ldr	r3, [pc, #300]	; (80030b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f96:	d131      	bne.n	8002ffc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f98:	4b47      	ldr	r3, [pc, #284]	; (80030b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f9e:	4a46      	ldr	r2, [pc, #280]	; (80030b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fa0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fa4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002fa8:	4b43      	ldr	r3, [pc, #268]	; (80030b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002fb0:	4a41      	ldr	r2, [pc, #260]	; (80030b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fb6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002fb8:	4b40      	ldr	r3, [pc, #256]	; (80030bc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2232      	movs	r2, #50	; 0x32
 8002fbe:	fb02 f303 	mul.w	r3, r2, r3
 8002fc2:	4a3f      	ldr	r2, [pc, #252]	; (80030c0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc8:	0c9b      	lsrs	r3, r3, #18
 8002fca:	3301      	adds	r3, #1
 8002fcc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fce:	e002      	b.n	8002fd6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	3b01      	subs	r3, #1
 8002fd4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fd6:	4b38      	ldr	r3, [pc, #224]	; (80030b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fd8:	695b      	ldr	r3, [r3, #20]
 8002fda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fe2:	d102      	bne.n	8002fea <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d1f2      	bne.n	8002fd0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002fea:	4b33      	ldr	r3, [pc, #204]	; (80030b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ff2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ff6:	d158      	bne.n	80030aa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	e057      	b.n	80030ac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ffc:	4b2e      	ldr	r3, [pc, #184]	; (80030b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ffe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003002:	4a2d      	ldr	r2, [pc, #180]	; (80030b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003004:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003008:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800300c:	e04d      	b.n	80030aa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003014:	d141      	bne.n	800309a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003016:	4b28      	ldr	r3, [pc, #160]	; (80030b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800301e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003022:	d131      	bne.n	8003088 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003024:	4b24      	ldr	r3, [pc, #144]	; (80030b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003026:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800302a:	4a23      	ldr	r2, [pc, #140]	; (80030b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800302c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003030:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003034:	4b20      	ldr	r3, [pc, #128]	; (80030b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800303c:	4a1e      	ldr	r2, [pc, #120]	; (80030b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800303e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003042:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003044:	4b1d      	ldr	r3, [pc, #116]	; (80030bc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2232      	movs	r2, #50	; 0x32
 800304a:	fb02 f303 	mul.w	r3, r2, r3
 800304e:	4a1c      	ldr	r2, [pc, #112]	; (80030c0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003050:	fba2 2303 	umull	r2, r3, r2, r3
 8003054:	0c9b      	lsrs	r3, r3, #18
 8003056:	3301      	adds	r3, #1
 8003058:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800305a:	e002      	b.n	8003062 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	3b01      	subs	r3, #1
 8003060:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003062:	4b15      	ldr	r3, [pc, #84]	; (80030b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003064:	695b      	ldr	r3, [r3, #20]
 8003066:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800306a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800306e:	d102      	bne.n	8003076 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d1f2      	bne.n	800305c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003076:	4b10      	ldr	r3, [pc, #64]	; (80030b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003078:	695b      	ldr	r3, [r3, #20]
 800307a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800307e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003082:	d112      	bne.n	80030aa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	e011      	b.n	80030ac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003088:	4b0b      	ldr	r3, [pc, #44]	; (80030b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800308a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800308e:	4a0a      	ldr	r2, [pc, #40]	; (80030b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003090:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003094:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003098:	e007      	b.n	80030aa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800309a:	4b07      	ldr	r3, [pc, #28]	; (80030b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80030a2:	4a05      	ldr	r2, [pc, #20]	; (80030b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030a8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80030aa:	2300      	movs	r3, #0
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3714      	adds	r7, #20
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr
 80030b8:	40007000 	.word	0x40007000
 80030bc:	20000000 	.word	0x20000000
 80030c0:	431bde83 	.word	0x431bde83

080030c4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80030c4:	b480      	push	{r7}
 80030c6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80030c8:	4b05      	ldr	r3, [pc, #20]	; (80030e0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	4a04      	ldr	r2, [pc, #16]	; (80030e0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80030ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030d2:	6093      	str	r3, [r2, #8]
}
 80030d4:	bf00      	nop
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr
 80030de:	bf00      	nop
 80030e0:	40007000 	.word	0x40007000

080030e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b088      	sub	sp, #32
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d101      	bne.n	80030f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e2fe      	b.n	80036f4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0301 	and.w	r3, r3, #1
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d075      	beq.n	80031ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003102:	4b97      	ldr	r3, [pc, #604]	; (8003360 <HAL_RCC_OscConfig+0x27c>)
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f003 030c 	and.w	r3, r3, #12
 800310a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800310c:	4b94      	ldr	r3, [pc, #592]	; (8003360 <HAL_RCC_OscConfig+0x27c>)
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	f003 0303 	and.w	r3, r3, #3
 8003114:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	2b0c      	cmp	r3, #12
 800311a:	d102      	bne.n	8003122 <HAL_RCC_OscConfig+0x3e>
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	2b03      	cmp	r3, #3
 8003120:	d002      	beq.n	8003128 <HAL_RCC_OscConfig+0x44>
 8003122:	69bb      	ldr	r3, [r7, #24]
 8003124:	2b08      	cmp	r3, #8
 8003126:	d10b      	bne.n	8003140 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003128:	4b8d      	ldr	r3, [pc, #564]	; (8003360 <HAL_RCC_OscConfig+0x27c>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003130:	2b00      	cmp	r3, #0
 8003132:	d05b      	beq.n	80031ec <HAL_RCC_OscConfig+0x108>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d157      	bne.n	80031ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e2d9      	b.n	80036f4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003148:	d106      	bne.n	8003158 <HAL_RCC_OscConfig+0x74>
 800314a:	4b85      	ldr	r3, [pc, #532]	; (8003360 <HAL_RCC_OscConfig+0x27c>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a84      	ldr	r2, [pc, #528]	; (8003360 <HAL_RCC_OscConfig+0x27c>)
 8003150:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003154:	6013      	str	r3, [r2, #0]
 8003156:	e01d      	b.n	8003194 <HAL_RCC_OscConfig+0xb0>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003160:	d10c      	bne.n	800317c <HAL_RCC_OscConfig+0x98>
 8003162:	4b7f      	ldr	r3, [pc, #508]	; (8003360 <HAL_RCC_OscConfig+0x27c>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a7e      	ldr	r2, [pc, #504]	; (8003360 <HAL_RCC_OscConfig+0x27c>)
 8003168:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800316c:	6013      	str	r3, [r2, #0]
 800316e:	4b7c      	ldr	r3, [pc, #496]	; (8003360 <HAL_RCC_OscConfig+0x27c>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a7b      	ldr	r2, [pc, #492]	; (8003360 <HAL_RCC_OscConfig+0x27c>)
 8003174:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003178:	6013      	str	r3, [r2, #0]
 800317a:	e00b      	b.n	8003194 <HAL_RCC_OscConfig+0xb0>
 800317c:	4b78      	ldr	r3, [pc, #480]	; (8003360 <HAL_RCC_OscConfig+0x27c>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a77      	ldr	r2, [pc, #476]	; (8003360 <HAL_RCC_OscConfig+0x27c>)
 8003182:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003186:	6013      	str	r3, [r2, #0]
 8003188:	4b75      	ldr	r3, [pc, #468]	; (8003360 <HAL_RCC_OscConfig+0x27c>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a74      	ldr	r2, [pc, #464]	; (8003360 <HAL_RCC_OscConfig+0x27c>)
 800318e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003192:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d013      	beq.n	80031c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800319c:	f7fe f882 	bl	80012a4 <HAL_GetTick>
 80031a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031a2:	e008      	b.n	80031b6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031a4:	f7fe f87e 	bl	80012a4 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	2b64      	cmp	r3, #100	; 0x64
 80031b0:	d901      	bls.n	80031b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e29e      	b.n	80036f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031b6:	4b6a      	ldr	r3, [pc, #424]	; (8003360 <HAL_RCC_OscConfig+0x27c>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d0f0      	beq.n	80031a4 <HAL_RCC_OscConfig+0xc0>
 80031c2:	e014      	b.n	80031ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c4:	f7fe f86e 	bl	80012a4 <HAL_GetTick>
 80031c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031ca:	e008      	b.n	80031de <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031cc:	f7fe f86a 	bl	80012a4 <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	2b64      	cmp	r3, #100	; 0x64
 80031d8:	d901      	bls.n	80031de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e28a      	b.n	80036f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031de:	4b60      	ldr	r3, [pc, #384]	; (8003360 <HAL_RCC_OscConfig+0x27c>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d1f0      	bne.n	80031cc <HAL_RCC_OscConfig+0xe8>
 80031ea:	e000      	b.n	80031ee <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0302 	and.w	r3, r3, #2
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d075      	beq.n	80032e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031fa:	4b59      	ldr	r3, [pc, #356]	; (8003360 <HAL_RCC_OscConfig+0x27c>)
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f003 030c 	and.w	r3, r3, #12
 8003202:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003204:	4b56      	ldr	r3, [pc, #344]	; (8003360 <HAL_RCC_OscConfig+0x27c>)
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	f003 0303 	and.w	r3, r3, #3
 800320c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	2b0c      	cmp	r3, #12
 8003212:	d102      	bne.n	800321a <HAL_RCC_OscConfig+0x136>
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	2b02      	cmp	r3, #2
 8003218:	d002      	beq.n	8003220 <HAL_RCC_OscConfig+0x13c>
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	2b04      	cmp	r3, #4
 800321e:	d11f      	bne.n	8003260 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003220:	4b4f      	ldr	r3, [pc, #316]	; (8003360 <HAL_RCC_OscConfig+0x27c>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003228:	2b00      	cmp	r3, #0
 800322a:	d005      	beq.n	8003238 <HAL_RCC_OscConfig+0x154>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d101      	bne.n	8003238 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e25d      	b.n	80036f4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003238:	4b49      	ldr	r3, [pc, #292]	; (8003360 <HAL_RCC_OscConfig+0x27c>)
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	691b      	ldr	r3, [r3, #16]
 8003244:	061b      	lsls	r3, r3, #24
 8003246:	4946      	ldr	r1, [pc, #280]	; (8003360 <HAL_RCC_OscConfig+0x27c>)
 8003248:	4313      	orrs	r3, r2
 800324a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800324c:	4b45      	ldr	r3, [pc, #276]	; (8003364 <HAL_RCC_OscConfig+0x280>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4618      	mov	r0, r3
 8003252:	f7fd fcaf 	bl	8000bb4 <HAL_InitTick>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d043      	beq.n	80032e4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e249      	b.n	80036f4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d023      	beq.n	80032b0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003268:	4b3d      	ldr	r3, [pc, #244]	; (8003360 <HAL_RCC_OscConfig+0x27c>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a3c      	ldr	r2, [pc, #240]	; (8003360 <HAL_RCC_OscConfig+0x27c>)
 800326e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003272:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003274:	f7fe f816 	bl	80012a4 <HAL_GetTick>
 8003278:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800327a:	e008      	b.n	800328e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800327c:	f7fe f812 	bl	80012a4 <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b02      	cmp	r3, #2
 8003288:	d901      	bls.n	800328e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e232      	b.n	80036f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800328e:	4b34      	ldr	r3, [pc, #208]	; (8003360 <HAL_RCC_OscConfig+0x27c>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003296:	2b00      	cmp	r3, #0
 8003298:	d0f0      	beq.n	800327c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800329a:	4b31      	ldr	r3, [pc, #196]	; (8003360 <HAL_RCC_OscConfig+0x27c>)
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	691b      	ldr	r3, [r3, #16]
 80032a6:	061b      	lsls	r3, r3, #24
 80032a8:	492d      	ldr	r1, [pc, #180]	; (8003360 <HAL_RCC_OscConfig+0x27c>)
 80032aa:	4313      	orrs	r3, r2
 80032ac:	604b      	str	r3, [r1, #4]
 80032ae:	e01a      	b.n	80032e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032b0:	4b2b      	ldr	r3, [pc, #172]	; (8003360 <HAL_RCC_OscConfig+0x27c>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a2a      	ldr	r2, [pc, #168]	; (8003360 <HAL_RCC_OscConfig+0x27c>)
 80032b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032bc:	f7fd fff2 	bl	80012a4 <HAL_GetTick>
 80032c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032c2:	e008      	b.n	80032d6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032c4:	f7fd ffee 	bl	80012a4 <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d901      	bls.n	80032d6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e20e      	b.n	80036f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032d6:	4b22      	ldr	r3, [pc, #136]	; (8003360 <HAL_RCC_OscConfig+0x27c>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d1f0      	bne.n	80032c4 <HAL_RCC_OscConfig+0x1e0>
 80032e2:	e000      	b.n	80032e6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032e4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0308 	and.w	r3, r3, #8
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d041      	beq.n	8003376 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d01c      	beq.n	8003334 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032fa:	4b19      	ldr	r3, [pc, #100]	; (8003360 <HAL_RCC_OscConfig+0x27c>)
 80032fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003300:	4a17      	ldr	r2, [pc, #92]	; (8003360 <HAL_RCC_OscConfig+0x27c>)
 8003302:	f043 0301 	orr.w	r3, r3, #1
 8003306:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800330a:	f7fd ffcb 	bl	80012a4 <HAL_GetTick>
 800330e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003310:	e008      	b.n	8003324 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003312:	f7fd ffc7 	bl	80012a4 <HAL_GetTick>
 8003316:	4602      	mov	r2, r0
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	2b02      	cmp	r3, #2
 800331e:	d901      	bls.n	8003324 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e1e7      	b.n	80036f4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003324:	4b0e      	ldr	r3, [pc, #56]	; (8003360 <HAL_RCC_OscConfig+0x27c>)
 8003326:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800332a:	f003 0302 	and.w	r3, r3, #2
 800332e:	2b00      	cmp	r3, #0
 8003330:	d0ef      	beq.n	8003312 <HAL_RCC_OscConfig+0x22e>
 8003332:	e020      	b.n	8003376 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003334:	4b0a      	ldr	r3, [pc, #40]	; (8003360 <HAL_RCC_OscConfig+0x27c>)
 8003336:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800333a:	4a09      	ldr	r2, [pc, #36]	; (8003360 <HAL_RCC_OscConfig+0x27c>)
 800333c:	f023 0301 	bic.w	r3, r3, #1
 8003340:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003344:	f7fd ffae 	bl	80012a4 <HAL_GetTick>
 8003348:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800334a:	e00d      	b.n	8003368 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800334c:	f7fd ffaa 	bl	80012a4 <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	2b02      	cmp	r3, #2
 8003358:	d906      	bls.n	8003368 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e1ca      	b.n	80036f4 <HAL_RCC_OscConfig+0x610>
 800335e:	bf00      	nop
 8003360:	40021000 	.word	0x40021000
 8003364:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003368:	4b8c      	ldr	r3, [pc, #560]	; (800359c <HAL_RCC_OscConfig+0x4b8>)
 800336a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800336e:	f003 0302 	and.w	r3, r3, #2
 8003372:	2b00      	cmp	r3, #0
 8003374:	d1ea      	bne.n	800334c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0304 	and.w	r3, r3, #4
 800337e:	2b00      	cmp	r3, #0
 8003380:	f000 80a6 	beq.w	80034d0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003384:	2300      	movs	r3, #0
 8003386:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003388:	4b84      	ldr	r3, [pc, #528]	; (800359c <HAL_RCC_OscConfig+0x4b8>)
 800338a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800338c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d101      	bne.n	8003398 <HAL_RCC_OscConfig+0x2b4>
 8003394:	2301      	movs	r3, #1
 8003396:	e000      	b.n	800339a <HAL_RCC_OscConfig+0x2b6>
 8003398:	2300      	movs	r3, #0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d00d      	beq.n	80033ba <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800339e:	4b7f      	ldr	r3, [pc, #508]	; (800359c <HAL_RCC_OscConfig+0x4b8>)
 80033a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033a2:	4a7e      	ldr	r2, [pc, #504]	; (800359c <HAL_RCC_OscConfig+0x4b8>)
 80033a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033a8:	6593      	str	r3, [r2, #88]	; 0x58
 80033aa:	4b7c      	ldr	r3, [pc, #496]	; (800359c <HAL_RCC_OscConfig+0x4b8>)
 80033ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033b2:	60fb      	str	r3, [r7, #12]
 80033b4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80033b6:	2301      	movs	r3, #1
 80033b8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033ba:	4b79      	ldr	r3, [pc, #484]	; (80035a0 <HAL_RCC_OscConfig+0x4bc>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d118      	bne.n	80033f8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033c6:	4b76      	ldr	r3, [pc, #472]	; (80035a0 <HAL_RCC_OscConfig+0x4bc>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a75      	ldr	r2, [pc, #468]	; (80035a0 <HAL_RCC_OscConfig+0x4bc>)
 80033cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033d2:	f7fd ff67 	bl	80012a4 <HAL_GetTick>
 80033d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033d8:	e008      	b.n	80033ec <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033da:	f7fd ff63 	bl	80012a4 <HAL_GetTick>
 80033de:	4602      	mov	r2, r0
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	2b02      	cmp	r3, #2
 80033e6:	d901      	bls.n	80033ec <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80033e8:	2303      	movs	r3, #3
 80033ea:	e183      	b.n	80036f4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033ec:	4b6c      	ldr	r3, [pc, #432]	; (80035a0 <HAL_RCC_OscConfig+0x4bc>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d0f0      	beq.n	80033da <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d108      	bne.n	8003412 <HAL_RCC_OscConfig+0x32e>
 8003400:	4b66      	ldr	r3, [pc, #408]	; (800359c <HAL_RCC_OscConfig+0x4b8>)
 8003402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003406:	4a65      	ldr	r2, [pc, #404]	; (800359c <HAL_RCC_OscConfig+0x4b8>)
 8003408:	f043 0301 	orr.w	r3, r3, #1
 800340c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003410:	e024      	b.n	800345c <HAL_RCC_OscConfig+0x378>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	2b05      	cmp	r3, #5
 8003418:	d110      	bne.n	800343c <HAL_RCC_OscConfig+0x358>
 800341a:	4b60      	ldr	r3, [pc, #384]	; (800359c <HAL_RCC_OscConfig+0x4b8>)
 800341c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003420:	4a5e      	ldr	r2, [pc, #376]	; (800359c <HAL_RCC_OscConfig+0x4b8>)
 8003422:	f043 0304 	orr.w	r3, r3, #4
 8003426:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800342a:	4b5c      	ldr	r3, [pc, #368]	; (800359c <HAL_RCC_OscConfig+0x4b8>)
 800342c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003430:	4a5a      	ldr	r2, [pc, #360]	; (800359c <HAL_RCC_OscConfig+0x4b8>)
 8003432:	f043 0301 	orr.w	r3, r3, #1
 8003436:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800343a:	e00f      	b.n	800345c <HAL_RCC_OscConfig+0x378>
 800343c:	4b57      	ldr	r3, [pc, #348]	; (800359c <HAL_RCC_OscConfig+0x4b8>)
 800343e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003442:	4a56      	ldr	r2, [pc, #344]	; (800359c <HAL_RCC_OscConfig+0x4b8>)
 8003444:	f023 0301 	bic.w	r3, r3, #1
 8003448:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800344c:	4b53      	ldr	r3, [pc, #332]	; (800359c <HAL_RCC_OscConfig+0x4b8>)
 800344e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003452:	4a52      	ldr	r2, [pc, #328]	; (800359c <HAL_RCC_OscConfig+0x4b8>)
 8003454:	f023 0304 	bic.w	r3, r3, #4
 8003458:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d016      	beq.n	8003492 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003464:	f7fd ff1e 	bl	80012a4 <HAL_GetTick>
 8003468:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800346a:	e00a      	b.n	8003482 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800346c:	f7fd ff1a 	bl	80012a4 <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	f241 3288 	movw	r2, #5000	; 0x1388
 800347a:	4293      	cmp	r3, r2
 800347c:	d901      	bls.n	8003482 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e138      	b.n	80036f4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003482:	4b46      	ldr	r3, [pc, #280]	; (800359c <HAL_RCC_OscConfig+0x4b8>)
 8003484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003488:	f003 0302 	and.w	r3, r3, #2
 800348c:	2b00      	cmp	r3, #0
 800348e:	d0ed      	beq.n	800346c <HAL_RCC_OscConfig+0x388>
 8003490:	e015      	b.n	80034be <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003492:	f7fd ff07 	bl	80012a4 <HAL_GetTick>
 8003496:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003498:	e00a      	b.n	80034b0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800349a:	f7fd ff03 	bl	80012a4 <HAL_GetTick>
 800349e:	4602      	mov	r2, r0
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d901      	bls.n	80034b0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	e121      	b.n	80036f4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034b0:	4b3a      	ldr	r3, [pc, #232]	; (800359c <HAL_RCC_OscConfig+0x4b8>)
 80034b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d1ed      	bne.n	800349a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80034be:	7ffb      	ldrb	r3, [r7, #31]
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d105      	bne.n	80034d0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034c4:	4b35      	ldr	r3, [pc, #212]	; (800359c <HAL_RCC_OscConfig+0x4b8>)
 80034c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034c8:	4a34      	ldr	r2, [pc, #208]	; (800359c <HAL_RCC_OscConfig+0x4b8>)
 80034ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034ce:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0320 	and.w	r3, r3, #32
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d03c      	beq.n	8003556 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	699b      	ldr	r3, [r3, #24]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d01c      	beq.n	800351e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80034e4:	4b2d      	ldr	r3, [pc, #180]	; (800359c <HAL_RCC_OscConfig+0x4b8>)
 80034e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034ea:	4a2c      	ldr	r2, [pc, #176]	; (800359c <HAL_RCC_OscConfig+0x4b8>)
 80034ec:	f043 0301 	orr.w	r3, r3, #1
 80034f0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034f4:	f7fd fed6 	bl	80012a4 <HAL_GetTick>
 80034f8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80034fa:	e008      	b.n	800350e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80034fc:	f7fd fed2 	bl	80012a4 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	2b02      	cmp	r3, #2
 8003508:	d901      	bls.n	800350e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e0f2      	b.n	80036f4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800350e:	4b23      	ldr	r3, [pc, #140]	; (800359c <HAL_RCC_OscConfig+0x4b8>)
 8003510:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003514:	f003 0302 	and.w	r3, r3, #2
 8003518:	2b00      	cmp	r3, #0
 800351a:	d0ef      	beq.n	80034fc <HAL_RCC_OscConfig+0x418>
 800351c:	e01b      	b.n	8003556 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800351e:	4b1f      	ldr	r3, [pc, #124]	; (800359c <HAL_RCC_OscConfig+0x4b8>)
 8003520:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003524:	4a1d      	ldr	r2, [pc, #116]	; (800359c <HAL_RCC_OscConfig+0x4b8>)
 8003526:	f023 0301 	bic.w	r3, r3, #1
 800352a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800352e:	f7fd feb9 	bl	80012a4 <HAL_GetTick>
 8003532:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003534:	e008      	b.n	8003548 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003536:	f7fd feb5 	bl	80012a4 <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	2b02      	cmp	r3, #2
 8003542:	d901      	bls.n	8003548 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e0d5      	b.n	80036f4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003548:	4b14      	ldr	r3, [pc, #80]	; (800359c <HAL_RCC_OscConfig+0x4b8>)
 800354a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800354e:	f003 0302 	and.w	r3, r3, #2
 8003552:	2b00      	cmp	r3, #0
 8003554:	d1ef      	bne.n	8003536 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	69db      	ldr	r3, [r3, #28]
 800355a:	2b00      	cmp	r3, #0
 800355c:	f000 80c9 	beq.w	80036f2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003560:	4b0e      	ldr	r3, [pc, #56]	; (800359c <HAL_RCC_OscConfig+0x4b8>)
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	f003 030c 	and.w	r3, r3, #12
 8003568:	2b0c      	cmp	r3, #12
 800356a:	f000 8083 	beq.w	8003674 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	69db      	ldr	r3, [r3, #28]
 8003572:	2b02      	cmp	r3, #2
 8003574:	d15e      	bne.n	8003634 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003576:	4b09      	ldr	r3, [pc, #36]	; (800359c <HAL_RCC_OscConfig+0x4b8>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a08      	ldr	r2, [pc, #32]	; (800359c <HAL_RCC_OscConfig+0x4b8>)
 800357c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003580:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003582:	f7fd fe8f 	bl	80012a4 <HAL_GetTick>
 8003586:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003588:	e00c      	b.n	80035a4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800358a:	f7fd fe8b 	bl	80012a4 <HAL_GetTick>
 800358e:	4602      	mov	r2, r0
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	2b02      	cmp	r3, #2
 8003596:	d905      	bls.n	80035a4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003598:	2303      	movs	r3, #3
 800359a:	e0ab      	b.n	80036f4 <HAL_RCC_OscConfig+0x610>
 800359c:	40021000 	.word	0x40021000
 80035a0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035a4:	4b55      	ldr	r3, [pc, #340]	; (80036fc <HAL_RCC_OscConfig+0x618>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d1ec      	bne.n	800358a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035b0:	4b52      	ldr	r3, [pc, #328]	; (80036fc <HAL_RCC_OscConfig+0x618>)
 80035b2:	68da      	ldr	r2, [r3, #12]
 80035b4:	4b52      	ldr	r3, [pc, #328]	; (8003700 <HAL_RCC_OscConfig+0x61c>)
 80035b6:	4013      	ands	r3, r2
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	6a11      	ldr	r1, [r2, #32]
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80035c0:	3a01      	subs	r2, #1
 80035c2:	0112      	lsls	r2, r2, #4
 80035c4:	4311      	orrs	r1, r2
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80035ca:	0212      	lsls	r2, r2, #8
 80035cc:	4311      	orrs	r1, r2
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80035d2:	0852      	lsrs	r2, r2, #1
 80035d4:	3a01      	subs	r2, #1
 80035d6:	0552      	lsls	r2, r2, #21
 80035d8:	4311      	orrs	r1, r2
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80035de:	0852      	lsrs	r2, r2, #1
 80035e0:	3a01      	subs	r2, #1
 80035e2:	0652      	lsls	r2, r2, #25
 80035e4:	4311      	orrs	r1, r2
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80035ea:	06d2      	lsls	r2, r2, #27
 80035ec:	430a      	orrs	r2, r1
 80035ee:	4943      	ldr	r1, [pc, #268]	; (80036fc <HAL_RCC_OscConfig+0x618>)
 80035f0:	4313      	orrs	r3, r2
 80035f2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035f4:	4b41      	ldr	r3, [pc, #260]	; (80036fc <HAL_RCC_OscConfig+0x618>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a40      	ldr	r2, [pc, #256]	; (80036fc <HAL_RCC_OscConfig+0x618>)
 80035fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035fe:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003600:	4b3e      	ldr	r3, [pc, #248]	; (80036fc <HAL_RCC_OscConfig+0x618>)
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	4a3d      	ldr	r2, [pc, #244]	; (80036fc <HAL_RCC_OscConfig+0x618>)
 8003606:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800360a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800360c:	f7fd fe4a 	bl	80012a4 <HAL_GetTick>
 8003610:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003612:	e008      	b.n	8003626 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003614:	f7fd fe46 	bl	80012a4 <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	2b02      	cmp	r3, #2
 8003620:	d901      	bls.n	8003626 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e066      	b.n	80036f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003626:	4b35      	ldr	r3, [pc, #212]	; (80036fc <HAL_RCC_OscConfig+0x618>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d0f0      	beq.n	8003614 <HAL_RCC_OscConfig+0x530>
 8003632:	e05e      	b.n	80036f2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003634:	4b31      	ldr	r3, [pc, #196]	; (80036fc <HAL_RCC_OscConfig+0x618>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a30      	ldr	r2, [pc, #192]	; (80036fc <HAL_RCC_OscConfig+0x618>)
 800363a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800363e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003640:	f7fd fe30 	bl	80012a4 <HAL_GetTick>
 8003644:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003646:	e008      	b.n	800365a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003648:	f7fd fe2c 	bl	80012a4 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	2b02      	cmp	r3, #2
 8003654:	d901      	bls.n	800365a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e04c      	b.n	80036f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800365a:	4b28      	ldr	r3, [pc, #160]	; (80036fc <HAL_RCC_OscConfig+0x618>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d1f0      	bne.n	8003648 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003666:	4b25      	ldr	r3, [pc, #148]	; (80036fc <HAL_RCC_OscConfig+0x618>)
 8003668:	68da      	ldr	r2, [r3, #12]
 800366a:	4924      	ldr	r1, [pc, #144]	; (80036fc <HAL_RCC_OscConfig+0x618>)
 800366c:	4b25      	ldr	r3, [pc, #148]	; (8003704 <HAL_RCC_OscConfig+0x620>)
 800366e:	4013      	ands	r3, r2
 8003670:	60cb      	str	r3, [r1, #12]
 8003672:	e03e      	b.n	80036f2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	69db      	ldr	r3, [r3, #28]
 8003678:	2b01      	cmp	r3, #1
 800367a:	d101      	bne.n	8003680 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e039      	b.n	80036f4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003680:	4b1e      	ldr	r3, [pc, #120]	; (80036fc <HAL_RCC_OscConfig+0x618>)
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	f003 0203 	and.w	r2, r3, #3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6a1b      	ldr	r3, [r3, #32]
 8003690:	429a      	cmp	r2, r3
 8003692:	d12c      	bne.n	80036ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369e:	3b01      	subs	r3, #1
 80036a0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d123      	bne.n	80036ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d11b      	bne.n	80036ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d113      	bne.n	80036ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d0:	085b      	lsrs	r3, r3, #1
 80036d2:	3b01      	subs	r3, #1
 80036d4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d109      	bne.n	80036ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036e4:	085b      	lsrs	r3, r3, #1
 80036e6:	3b01      	subs	r3, #1
 80036e8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d001      	beq.n	80036f2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e000      	b.n	80036f4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80036f2:	2300      	movs	r3, #0
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3720      	adds	r7, #32
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	40021000 	.word	0x40021000
 8003700:	019f800c 	.word	0x019f800c
 8003704:	feeefffc 	.word	0xfeeefffc

08003708 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b086      	sub	sp, #24
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003712:	2300      	movs	r3, #0
 8003714:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d101      	bne.n	8003720 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e11e      	b.n	800395e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003720:	4b91      	ldr	r3, [pc, #580]	; (8003968 <HAL_RCC_ClockConfig+0x260>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 030f 	and.w	r3, r3, #15
 8003728:	683a      	ldr	r2, [r7, #0]
 800372a:	429a      	cmp	r2, r3
 800372c:	d910      	bls.n	8003750 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800372e:	4b8e      	ldr	r3, [pc, #568]	; (8003968 <HAL_RCC_ClockConfig+0x260>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f023 020f 	bic.w	r2, r3, #15
 8003736:	498c      	ldr	r1, [pc, #560]	; (8003968 <HAL_RCC_ClockConfig+0x260>)
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	4313      	orrs	r3, r2
 800373c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800373e:	4b8a      	ldr	r3, [pc, #552]	; (8003968 <HAL_RCC_ClockConfig+0x260>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 030f 	and.w	r3, r3, #15
 8003746:	683a      	ldr	r2, [r7, #0]
 8003748:	429a      	cmp	r2, r3
 800374a:	d001      	beq.n	8003750 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e106      	b.n	800395e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0301 	and.w	r3, r3, #1
 8003758:	2b00      	cmp	r3, #0
 800375a:	d073      	beq.n	8003844 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	2b03      	cmp	r3, #3
 8003762:	d129      	bne.n	80037b8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003764:	4b81      	ldr	r3, [pc, #516]	; (800396c <HAL_RCC_ClockConfig+0x264>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d101      	bne.n	8003774 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e0f4      	b.n	800395e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003774:	f000 f9d0 	bl	8003b18 <RCC_GetSysClockFreqFromPLLSource>
 8003778:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	4a7c      	ldr	r2, [pc, #496]	; (8003970 <HAL_RCC_ClockConfig+0x268>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d93f      	bls.n	8003802 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003782:	4b7a      	ldr	r3, [pc, #488]	; (800396c <HAL_RCC_ClockConfig+0x264>)
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d009      	beq.n	80037a2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003796:	2b00      	cmp	r3, #0
 8003798:	d033      	beq.n	8003802 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d12f      	bne.n	8003802 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80037a2:	4b72      	ldr	r3, [pc, #456]	; (800396c <HAL_RCC_ClockConfig+0x264>)
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037aa:	4a70      	ldr	r2, [pc, #448]	; (800396c <HAL_RCC_ClockConfig+0x264>)
 80037ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037b0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80037b2:	2380      	movs	r3, #128	; 0x80
 80037b4:	617b      	str	r3, [r7, #20]
 80037b6:	e024      	b.n	8003802 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	2b02      	cmp	r3, #2
 80037be:	d107      	bne.n	80037d0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037c0:	4b6a      	ldr	r3, [pc, #424]	; (800396c <HAL_RCC_ClockConfig+0x264>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d109      	bne.n	80037e0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e0c6      	b.n	800395e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037d0:	4b66      	ldr	r3, [pc, #408]	; (800396c <HAL_RCC_ClockConfig+0x264>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d101      	bne.n	80037e0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e0be      	b.n	800395e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80037e0:	f000 f8ce 	bl	8003980 <HAL_RCC_GetSysClockFreq>
 80037e4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	4a61      	ldr	r2, [pc, #388]	; (8003970 <HAL_RCC_ClockConfig+0x268>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d909      	bls.n	8003802 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80037ee:	4b5f      	ldr	r3, [pc, #380]	; (800396c <HAL_RCC_ClockConfig+0x264>)
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037f6:	4a5d      	ldr	r2, [pc, #372]	; (800396c <HAL_RCC_ClockConfig+0x264>)
 80037f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037fc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80037fe:	2380      	movs	r3, #128	; 0x80
 8003800:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003802:	4b5a      	ldr	r3, [pc, #360]	; (800396c <HAL_RCC_ClockConfig+0x264>)
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f023 0203 	bic.w	r2, r3, #3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	4957      	ldr	r1, [pc, #348]	; (800396c <HAL_RCC_ClockConfig+0x264>)
 8003810:	4313      	orrs	r3, r2
 8003812:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003814:	f7fd fd46 	bl	80012a4 <HAL_GetTick>
 8003818:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800381a:	e00a      	b.n	8003832 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800381c:	f7fd fd42 	bl	80012a4 <HAL_GetTick>
 8003820:	4602      	mov	r2, r0
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	f241 3288 	movw	r2, #5000	; 0x1388
 800382a:	4293      	cmp	r3, r2
 800382c:	d901      	bls.n	8003832 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e095      	b.n	800395e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003832:	4b4e      	ldr	r3, [pc, #312]	; (800396c <HAL_RCC_ClockConfig+0x264>)
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f003 020c 	and.w	r2, r3, #12
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	429a      	cmp	r2, r3
 8003842:	d1eb      	bne.n	800381c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0302 	and.w	r3, r3, #2
 800384c:	2b00      	cmp	r3, #0
 800384e:	d023      	beq.n	8003898 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0304 	and.w	r3, r3, #4
 8003858:	2b00      	cmp	r3, #0
 800385a:	d005      	beq.n	8003868 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800385c:	4b43      	ldr	r3, [pc, #268]	; (800396c <HAL_RCC_ClockConfig+0x264>)
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	4a42      	ldr	r2, [pc, #264]	; (800396c <HAL_RCC_ClockConfig+0x264>)
 8003862:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003866:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0308 	and.w	r3, r3, #8
 8003870:	2b00      	cmp	r3, #0
 8003872:	d007      	beq.n	8003884 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003874:	4b3d      	ldr	r3, [pc, #244]	; (800396c <HAL_RCC_ClockConfig+0x264>)
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800387c:	4a3b      	ldr	r2, [pc, #236]	; (800396c <HAL_RCC_ClockConfig+0x264>)
 800387e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003882:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003884:	4b39      	ldr	r3, [pc, #228]	; (800396c <HAL_RCC_ClockConfig+0x264>)
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	4936      	ldr	r1, [pc, #216]	; (800396c <HAL_RCC_ClockConfig+0x264>)
 8003892:	4313      	orrs	r3, r2
 8003894:	608b      	str	r3, [r1, #8]
 8003896:	e008      	b.n	80038aa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	2b80      	cmp	r3, #128	; 0x80
 800389c:	d105      	bne.n	80038aa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800389e:	4b33      	ldr	r3, [pc, #204]	; (800396c <HAL_RCC_ClockConfig+0x264>)
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	4a32      	ldr	r2, [pc, #200]	; (800396c <HAL_RCC_ClockConfig+0x264>)
 80038a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038a8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038aa:	4b2f      	ldr	r3, [pc, #188]	; (8003968 <HAL_RCC_ClockConfig+0x260>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 030f 	and.w	r3, r3, #15
 80038b2:	683a      	ldr	r2, [r7, #0]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d21d      	bcs.n	80038f4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038b8:	4b2b      	ldr	r3, [pc, #172]	; (8003968 <HAL_RCC_ClockConfig+0x260>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f023 020f 	bic.w	r2, r3, #15
 80038c0:	4929      	ldr	r1, [pc, #164]	; (8003968 <HAL_RCC_ClockConfig+0x260>)
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80038c8:	f7fd fcec 	bl	80012a4 <HAL_GetTick>
 80038cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ce:	e00a      	b.n	80038e6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038d0:	f7fd fce8 	bl	80012a4 <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	f241 3288 	movw	r2, #5000	; 0x1388
 80038de:	4293      	cmp	r3, r2
 80038e0:	d901      	bls.n	80038e6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e03b      	b.n	800395e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038e6:	4b20      	ldr	r3, [pc, #128]	; (8003968 <HAL_RCC_ClockConfig+0x260>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 030f 	and.w	r3, r3, #15
 80038ee:	683a      	ldr	r2, [r7, #0]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d1ed      	bne.n	80038d0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0304 	and.w	r3, r3, #4
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d008      	beq.n	8003912 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003900:	4b1a      	ldr	r3, [pc, #104]	; (800396c <HAL_RCC_ClockConfig+0x264>)
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	4917      	ldr	r1, [pc, #92]	; (800396c <HAL_RCC_ClockConfig+0x264>)
 800390e:	4313      	orrs	r3, r2
 8003910:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0308 	and.w	r3, r3, #8
 800391a:	2b00      	cmp	r3, #0
 800391c:	d009      	beq.n	8003932 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800391e:	4b13      	ldr	r3, [pc, #76]	; (800396c <HAL_RCC_ClockConfig+0x264>)
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	00db      	lsls	r3, r3, #3
 800392c:	490f      	ldr	r1, [pc, #60]	; (800396c <HAL_RCC_ClockConfig+0x264>)
 800392e:	4313      	orrs	r3, r2
 8003930:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003932:	f000 f825 	bl	8003980 <HAL_RCC_GetSysClockFreq>
 8003936:	4602      	mov	r2, r0
 8003938:	4b0c      	ldr	r3, [pc, #48]	; (800396c <HAL_RCC_ClockConfig+0x264>)
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	091b      	lsrs	r3, r3, #4
 800393e:	f003 030f 	and.w	r3, r3, #15
 8003942:	490c      	ldr	r1, [pc, #48]	; (8003974 <HAL_RCC_ClockConfig+0x26c>)
 8003944:	5ccb      	ldrb	r3, [r1, r3]
 8003946:	f003 031f 	and.w	r3, r3, #31
 800394a:	fa22 f303 	lsr.w	r3, r2, r3
 800394e:	4a0a      	ldr	r2, [pc, #40]	; (8003978 <HAL_RCC_ClockConfig+0x270>)
 8003950:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003952:	4b0a      	ldr	r3, [pc, #40]	; (800397c <HAL_RCC_ClockConfig+0x274>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4618      	mov	r0, r3
 8003958:	f7fd f92c 	bl	8000bb4 <HAL_InitTick>
 800395c:	4603      	mov	r3, r0
}
 800395e:	4618      	mov	r0, r3
 8003960:	3718      	adds	r7, #24
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	40022000 	.word	0x40022000
 800396c:	40021000 	.word	0x40021000
 8003970:	04c4b400 	.word	0x04c4b400
 8003974:	080060c4 	.word	0x080060c4
 8003978:	20000000 	.word	0x20000000
 800397c:	20000004 	.word	0x20000004

08003980 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003980:	b480      	push	{r7}
 8003982:	b087      	sub	sp, #28
 8003984:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003986:	4b2c      	ldr	r3, [pc, #176]	; (8003a38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f003 030c 	and.w	r3, r3, #12
 800398e:	2b04      	cmp	r3, #4
 8003990:	d102      	bne.n	8003998 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003992:	4b2a      	ldr	r3, [pc, #168]	; (8003a3c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003994:	613b      	str	r3, [r7, #16]
 8003996:	e047      	b.n	8003a28 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003998:	4b27      	ldr	r3, [pc, #156]	; (8003a38 <HAL_RCC_GetSysClockFreq+0xb8>)
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	f003 030c 	and.w	r3, r3, #12
 80039a0:	2b08      	cmp	r3, #8
 80039a2:	d102      	bne.n	80039aa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80039a4:	4b26      	ldr	r3, [pc, #152]	; (8003a40 <HAL_RCC_GetSysClockFreq+0xc0>)
 80039a6:	613b      	str	r3, [r7, #16]
 80039a8:	e03e      	b.n	8003a28 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80039aa:	4b23      	ldr	r3, [pc, #140]	; (8003a38 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f003 030c 	and.w	r3, r3, #12
 80039b2:	2b0c      	cmp	r3, #12
 80039b4:	d136      	bne.n	8003a24 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80039b6:	4b20      	ldr	r3, [pc, #128]	; (8003a38 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	f003 0303 	and.w	r3, r3, #3
 80039be:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80039c0:	4b1d      	ldr	r3, [pc, #116]	; (8003a38 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	091b      	lsrs	r3, r3, #4
 80039c6:	f003 030f 	and.w	r3, r3, #15
 80039ca:	3301      	adds	r3, #1
 80039cc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2b03      	cmp	r3, #3
 80039d2:	d10c      	bne.n	80039ee <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80039d4:	4a1a      	ldr	r2, [pc, #104]	; (8003a40 <HAL_RCC_GetSysClockFreq+0xc0>)
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039dc:	4a16      	ldr	r2, [pc, #88]	; (8003a38 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039de:	68d2      	ldr	r2, [r2, #12]
 80039e0:	0a12      	lsrs	r2, r2, #8
 80039e2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80039e6:	fb02 f303 	mul.w	r3, r2, r3
 80039ea:	617b      	str	r3, [r7, #20]
      break;
 80039ec:	e00c      	b.n	8003a08 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80039ee:	4a13      	ldr	r2, [pc, #76]	; (8003a3c <HAL_RCC_GetSysClockFreq+0xbc>)
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80039f6:	4a10      	ldr	r2, [pc, #64]	; (8003a38 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039f8:	68d2      	ldr	r2, [r2, #12]
 80039fa:	0a12      	lsrs	r2, r2, #8
 80039fc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003a00:	fb02 f303 	mul.w	r3, r2, r3
 8003a04:	617b      	str	r3, [r7, #20]
      break;
 8003a06:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a08:	4b0b      	ldr	r3, [pc, #44]	; (8003a38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	0e5b      	lsrs	r3, r3, #25
 8003a0e:	f003 0303 	and.w	r3, r3, #3
 8003a12:	3301      	adds	r3, #1
 8003a14:	005b      	lsls	r3, r3, #1
 8003a16:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003a18:	697a      	ldr	r2, [r7, #20]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a20:	613b      	str	r3, [r7, #16]
 8003a22:	e001      	b.n	8003a28 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003a24:	2300      	movs	r3, #0
 8003a26:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003a28:	693b      	ldr	r3, [r7, #16]
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	371c      	adds	r7, #28
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr
 8003a36:	bf00      	nop
 8003a38:	40021000 	.word	0x40021000
 8003a3c:	00f42400 	.word	0x00f42400
 8003a40:	016e3600 	.word	0x016e3600

08003a44 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a44:	b480      	push	{r7}
 8003a46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a48:	4b03      	ldr	r3, [pc, #12]	; (8003a58 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	20000000 	.word	0x20000000

08003a5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003a60:	f7ff fff0 	bl	8003a44 <HAL_RCC_GetHCLKFreq>
 8003a64:	4602      	mov	r2, r0
 8003a66:	4b06      	ldr	r3, [pc, #24]	; (8003a80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	0a1b      	lsrs	r3, r3, #8
 8003a6c:	f003 0307 	and.w	r3, r3, #7
 8003a70:	4904      	ldr	r1, [pc, #16]	; (8003a84 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a72:	5ccb      	ldrb	r3, [r1, r3]
 8003a74:	f003 031f 	and.w	r3, r3, #31
 8003a78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	40021000 	.word	0x40021000
 8003a84:	080060d4 	.word	0x080060d4

08003a88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003a8c:	f7ff ffda 	bl	8003a44 <HAL_RCC_GetHCLKFreq>
 8003a90:	4602      	mov	r2, r0
 8003a92:	4b06      	ldr	r3, [pc, #24]	; (8003aac <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	0adb      	lsrs	r3, r3, #11
 8003a98:	f003 0307 	and.w	r3, r3, #7
 8003a9c:	4904      	ldr	r1, [pc, #16]	; (8003ab0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a9e:	5ccb      	ldrb	r3, [r1, r3]
 8003aa0:	f003 031f 	and.w	r3, r3, #31
 8003aa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	40021000 	.word	0x40021000
 8003ab0:	080060d4 	.word	0x080060d4

08003ab4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	220f      	movs	r2, #15
 8003ac2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003ac4:	4b12      	ldr	r3, [pc, #72]	; (8003b10 <HAL_RCC_GetClockConfig+0x5c>)
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	f003 0203 	and.w	r2, r3, #3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003ad0:	4b0f      	ldr	r3, [pc, #60]	; (8003b10 <HAL_RCC_GetClockConfig+0x5c>)
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003adc:	4b0c      	ldr	r3, [pc, #48]	; (8003b10 <HAL_RCC_GetClockConfig+0x5c>)
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003ae8:	4b09      	ldr	r3, [pc, #36]	; (8003b10 <HAL_RCC_GetClockConfig+0x5c>)
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	08db      	lsrs	r3, r3, #3
 8003aee:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003af6:	4b07      	ldr	r3, [pc, #28]	; (8003b14 <HAL_RCC_GetClockConfig+0x60>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 020f 	and.w	r2, r3, #15
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	601a      	str	r2, [r3, #0]
}
 8003b02:	bf00      	nop
 8003b04:	370c      	adds	r7, #12
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop
 8003b10:	40021000 	.word	0x40021000
 8003b14:	40022000 	.word	0x40022000

08003b18 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b087      	sub	sp, #28
 8003b1c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b1e:	4b1e      	ldr	r3, [pc, #120]	; (8003b98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	f003 0303 	and.w	r3, r3, #3
 8003b26:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b28:	4b1b      	ldr	r3, [pc, #108]	; (8003b98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	091b      	lsrs	r3, r3, #4
 8003b2e:	f003 030f 	and.w	r3, r3, #15
 8003b32:	3301      	adds	r3, #1
 8003b34:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	2b03      	cmp	r3, #3
 8003b3a:	d10c      	bne.n	8003b56 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b3c:	4a17      	ldr	r2, [pc, #92]	; (8003b9c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b44:	4a14      	ldr	r2, [pc, #80]	; (8003b98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b46:	68d2      	ldr	r2, [r2, #12]
 8003b48:	0a12      	lsrs	r2, r2, #8
 8003b4a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003b4e:	fb02 f303 	mul.w	r3, r2, r3
 8003b52:	617b      	str	r3, [r7, #20]
    break;
 8003b54:	e00c      	b.n	8003b70 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b56:	4a12      	ldr	r2, [pc, #72]	; (8003ba0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b5e:	4a0e      	ldr	r2, [pc, #56]	; (8003b98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b60:	68d2      	ldr	r2, [r2, #12]
 8003b62:	0a12      	lsrs	r2, r2, #8
 8003b64:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003b68:	fb02 f303 	mul.w	r3, r2, r3
 8003b6c:	617b      	str	r3, [r7, #20]
    break;
 8003b6e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b70:	4b09      	ldr	r3, [pc, #36]	; (8003b98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	0e5b      	lsrs	r3, r3, #25
 8003b76:	f003 0303 	and.w	r3, r3, #3
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	005b      	lsls	r3, r3, #1
 8003b7e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003b80:	697a      	ldr	r2, [r7, #20]
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b88:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003b8a:	687b      	ldr	r3, [r7, #4]
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	371c      	adds	r7, #28
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr
 8003b98:	40021000 	.word	0x40021000
 8003b9c:	016e3600 	.word	0x016e3600
 8003ba0:	00f42400 	.word	0x00f42400

08003ba4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b086      	sub	sp, #24
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003bac:	2300      	movs	r3, #0
 8003bae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	f000 8098 	beq.w	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bc6:	4b43      	ldr	r3, [pc, #268]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d10d      	bne.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bd2:	4b40      	ldr	r3, [pc, #256]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bd6:	4a3f      	ldr	r2, [pc, #252]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bdc:	6593      	str	r3, [r2, #88]	; 0x58
 8003bde:	4b3d      	ldr	r3, [pc, #244]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003be2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003be6:	60bb      	str	r3, [r7, #8]
 8003be8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bea:	2301      	movs	r3, #1
 8003bec:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bee:	4b3a      	ldr	r3, [pc, #232]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a39      	ldr	r2, [pc, #228]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003bf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bf8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003bfa:	f7fd fb53 	bl	80012a4 <HAL_GetTick>
 8003bfe:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c00:	e009      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c02:	f7fd fb4f 	bl	80012a4 <HAL_GetTick>
 8003c06:	4602      	mov	r2, r0
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	1ad3      	subs	r3, r2, r3
 8003c0c:	2b02      	cmp	r3, #2
 8003c0e:	d902      	bls.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003c10:	2303      	movs	r3, #3
 8003c12:	74fb      	strb	r3, [r7, #19]
        break;
 8003c14:	e005      	b.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c16:	4b30      	ldr	r3, [pc, #192]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d0ef      	beq.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003c22:	7cfb      	ldrb	r3, [r7, #19]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d159      	bne.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003c28:	4b2a      	ldr	r3, [pc, #168]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c32:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d01e      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3e:	697a      	ldr	r2, [r7, #20]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d019      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003c44:	4b23      	ldr	r3, [pc, #140]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c4e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c50:	4b20      	ldr	r3, [pc, #128]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c56:	4a1f      	ldr	r2, [pc, #124]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c60:	4b1c      	ldr	r3, [pc, #112]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c66:	4a1b      	ldr	r2, [pc, #108]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003c70:	4a18      	ldr	r2, [pc, #96]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	f003 0301 	and.w	r3, r3, #1
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d016      	beq.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c82:	f7fd fb0f 	bl	80012a4 <HAL_GetTick>
 8003c86:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c88:	e00b      	b.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c8a:	f7fd fb0b 	bl	80012a4 <HAL_GetTick>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	1ad3      	subs	r3, r2, r3
 8003c94:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d902      	bls.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	74fb      	strb	r3, [r7, #19]
            break;
 8003ca0:	e006      	b.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ca2:	4b0c      	ldr	r3, [pc, #48]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ca8:	f003 0302 	and.w	r3, r3, #2
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d0ec      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003cb0:	7cfb      	ldrb	r3, [r7, #19]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d10b      	bne.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cb6:	4b07      	ldr	r3, [pc, #28]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cbc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc4:	4903      	ldr	r1, [pc, #12]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003ccc:	e008      	b.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003cce:	7cfb      	ldrb	r3, [r7, #19]
 8003cd0:	74bb      	strb	r3, [r7, #18]
 8003cd2:	e005      	b.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003cd4:	40021000 	.word	0x40021000
 8003cd8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cdc:	7cfb      	ldrb	r3, [r7, #19]
 8003cde:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ce0:	7c7b      	ldrb	r3, [r7, #17]
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d105      	bne.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ce6:	4ba6      	ldr	r3, [pc, #664]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cea:	4aa5      	ldr	r2, [pc, #660]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cf0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0301 	and.w	r3, r3, #1
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00a      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003cfe:	4ba0      	ldr	r3, [pc, #640]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d04:	f023 0203 	bic.w	r2, r3, #3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	499c      	ldr	r1, [pc, #624]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0302 	and.w	r3, r3, #2
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d00a      	beq.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d20:	4b97      	ldr	r3, [pc, #604]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d26:	f023 020c 	bic.w	r2, r3, #12
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	4994      	ldr	r1, [pc, #592]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d30:	4313      	orrs	r3, r2
 8003d32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0304 	and.w	r3, r3, #4
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d00a      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d42:	4b8f      	ldr	r3, [pc, #572]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d48:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	498b      	ldr	r1, [pc, #556]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d52:	4313      	orrs	r3, r2
 8003d54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0308 	and.w	r3, r3, #8
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d00a      	beq.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d64:	4b86      	ldr	r3, [pc, #536]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d6a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	691b      	ldr	r3, [r3, #16]
 8003d72:	4983      	ldr	r1, [pc, #524]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d74:	4313      	orrs	r3, r2
 8003d76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0320 	and.w	r3, r3, #32
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d00a      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d86:	4b7e      	ldr	r3, [pc, #504]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d8c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	695b      	ldr	r3, [r3, #20]
 8003d94:	497a      	ldr	r1, [pc, #488]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d96:	4313      	orrs	r3, r2
 8003d98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d00a      	beq.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003da8:	4b75      	ldr	r3, [pc, #468]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dae:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	699b      	ldr	r3, [r3, #24]
 8003db6:	4972      	ldr	r1, [pc, #456]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003db8:	4313      	orrs	r3, r2
 8003dba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d00a      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003dca:	4b6d      	ldr	r3, [pc, #436]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dd0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	69db      	ldr	r3, [r3, #28]
 8003dd8:	4969      	ldr	r1, [pc, #420]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d00a      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003dec:	4b64      	ldr	r3, [pc, #400]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003df2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a1b      	ldr	r3, [r3, #32]
 8003dfa:	4961      	ldr	r1, [pc, #388]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d00a      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e0e:	4b5c      	ldr	r3, [pc, #368]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e14:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1c:	4958      	ldr	r1, [pc, #352]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d015      	beq.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e30:	4b53      	ldr	r3, [pc, #332]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e36:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e3e:	4950      	ldr	r1, [pc, #320]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e40:	4313      	orrs	r3, r2
 8003e42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e4e:	d105      	bne.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e50:	4b4b      	ldr	r3, [pc, #300]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	4a4a      	ldr	r2, [pc, #296]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e5a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d015      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003e68:	4b45      	ldr	r3, [pc, #276]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e6e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e76:	4942      	ldr	r1, [pc, #264]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e86:	d105      	bne.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e88:	4b3d      	ldr	r3, [pc, #244]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	4a3c      	ldr	r2, [pc, #240]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e92:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d015      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003ea0:	4b37      	ldr	r3, [pc, #220]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ea6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eae:	4934      	ldr	r1, [pc, #208]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ebe:	d105      	bne.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ec0:	4b2f      	ldr	r3, [pc, #188]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	4a2e      	ldr	r2, [pc, #184]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ec6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003eca:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d015      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ed8:	4b29      	ldr	r3, [pc, #164]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ede:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ee6:	4926      	ldr	r1, [pc, #152]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ef2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ef6:	d105      	bne.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ef8:	4b21      	ldr	r3, [pc, #132]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	4a20      	ldr	r2, [pc, #128]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003efe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f02:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d015      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003f10:	4b1b      	ldr	r3, [pc, #108]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f16:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f1e:	4918      	ldr	r1, [pc, #96]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f20:	4313      	orrs	r3, r2
 8003f22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f2e:	d105      	bne.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f30:	4b13      	ldr	r3, [pc, #76]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	4a12      	ldr	r2, [pc, #72]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f3a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d015      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003f48:	4b0d      	ldr	r3, [pc, #52]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f4e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f56:	490a      	ldr	r1, [pc, #40]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f66:	d105      	bne.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003f68:	4b05      	ldr	r3, [pc, #20]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	4a04      	ldr	r2, [pc, #16]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f72:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003f74:	7cbb      	ldrb	r3, [r7, #18]
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3718      	adds	r7, #24
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	40021000 	.word	0x40021000

08003f84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b082      	sub	sp, #8
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d101      	bne.n	8003f96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e049      	b.n	800402a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d106      	bne.n	8003fb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f7fc ff96 	bl	8000edc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2202      	movs	r2, #2
 8003fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	3304      	adds	r3, #4
 8003fc0:	4619      	mov	r1, r3
 8003fc2:	4610      	mov	r0, r2
 8003fc4:	f000 fc86 	bl	80048d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	3708      	adds	r7, #8
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
	...

08004034 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004034:	b480      	push	{r7}
 8004036:	b085      	sub	sp, #20
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004042:	b2db      	uxtb	r3, r3
 8004044:	2b01      	cmp	r3, #1
 8004046:	d001      	beq.n	800404c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	e04a      	b.n	80040e2 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2202      	movs	r2, #2
 8004050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	68da      	ldr	r2, [r3, #12]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f042 0201 	orr.w	r2, r2, #1
 8004062:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a21      	ldr	r2, [pc, #132]	; (80040f0 <HAL_TIM_Base_Start_IT+0xbc>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d018      	beq.n	80040a0 <HAL_TIM_Base_Start_IT+0x6c>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004076:	d013      	beq.n	80040a0 <HAL_TIM_Base_Start_IT+0x6c>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a1d      	ldr	r2, [pc, #116]	; (80040f4 <HAL_TIM_Base_Start_IT+0xc0>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d00e      	beq.n	80040a0 <HAL_TIM_Base_Start_IT+0x6c>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a1c      	ldr	r2, [pc, #112]	; (80040f8 <HAL_TIM_Base_Start_IT+0xc4>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d009      	beq.n	80040a0 <HAL_TIM_Base_Start_IT+0x6c>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a1a      	ldr	r2, [pc, #104]	; (80040fc <HAL_TIM_Base_Start_IT+0xc8>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d004      	beq.n	80040a0 <HAL_TIM_Base_Start_IT+0x6c>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a19      	ldr	r2, [pc, #100]	; (8004100 <HAL_TIM_Base_Start_IT+0xcc>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d115      	bne.n	80040cc <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	689a      	ldr	r2, [r3, #8]
 80040a6:	4b17      	ldr	r3, [pc, #92]	; (8004104 <HAL_TIM_Base_Start_IT+0xd0>)
 80040a8:	4013      	ands	r3, r2
 80040aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2b06      	cmp	r3, #6
 80040b0:	d015      	beq.n	80040de <HAL_TIM_Base_Start_IT+0xaa>
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040b8:	d011      	beq.n	80040de <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f042 0201 	orr.w	r2, r2, #1
 80040c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040ca:	e008      	b.n	80040de <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f042 0201 	orr.w	r2, r2, #1
 80040da:	601a      	str	r2, [r3, #0]
 80040dc:	e000      	b.n	80040e0 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040de:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80040e0:	2300      	movs	r3, #0
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3714      	adds	r7, #20
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop
 80040f0:	40012c00 	.word	0x40012c00
 80040f4:	40000400 	.word	0x40000400
 80040f8:	40000800 	.word	0x40000800
 80040fc:	40013400 	.word	0x40013400
 8004100:	40014000 	.word	0x40014000
 8004104:	00010007 	.word	0x00010007

08004108 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d101      	bne.n	800411a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e049      	b.n	80041ae <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004120:	b2db      	uxtb	r3, r3
 8004122:	2b00      	cmp	r3, #0
 8004124:	d106      	bne.n	8004134 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f000 f841 	bl	80041b6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2202      	movs	r2, #2
 8004138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	3304      	adds	r3, #4
 8004144:	4619      	mov	r1, r3
 8004146:	4610      	mov	r0, r2
 8004148:	f000 fbc4 	bl	80048d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3708      	adds	r7, #8
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}

080041b6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80041b6:	b480      	push	{r7}
 80041b8:	b083      	sub	sp, #12
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80041be:	bf00      	nop
 80041c0:	370c      	adds	r7, #12
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr

080041ca <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80041ca:	b580      	push	{r7, lr}
 80041cc:	b084      	sub	sp, #16
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	691b      	ldr	r3, [r3, #16]
 80041e0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	f003 0302 	and.w	r3, r3, #2
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d020      	beq.n	800422e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f003 0302 	and.w	r3, r3, #2
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d01b      	beq.n	800422e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f06f 0202 	mvn.w	r2, #2
 80041fe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	699b      	ldr	r3, [r3, #24]
 800420c:	f003 0303 	and.w	r3, r3, #3
 8004210:	2b00      	cmp	r3, #0
 8004212:	d003      	beq.n	800421c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f000 fb3f 	bl	8004898 <HAL_TIM_IC_CaptureCallback>
 800421a:	e005      	b.n	8004228 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f000 fb31 	bl	8004884 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f000 fb42 	bl	80048ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	f003 0304 	and.w	r3, r3, #4
 8004234:	2b00      	cmp	r3, #0
 8004236:	d020      	beq.n	800427a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f003 0304 	and.w	r3, r3, #4
 800423e:	2b00      	cmp	r3, #0
 8004240:	d01b      	beq.n	800427a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f06f 0204 	mvn.w	r2, #4
 800424a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2202      	movs	r2, #2
 8004250:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	699b      	ldr	r3, [r3, #24]
 8004258:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800425c:	2b00      	cmp	r3, #0
 800425e:	d003      	beq.n	8004268 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f000 fb19 	bl	8004898 <HAL_TIM_IC_CaptureCallback>
 8004266:	e005      	b.n	8004274 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f000 fb0b 	bl	8004884 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f000 fb1c 	bl	80048ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	f003 0308 	and.w	r3, r3, #8
 8004280:	2b00      	cmp	r3, #0
 8004282:	d020      	beq.n	80042c6 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f003 0308 	and.w	r3, r3, #8
 800428a:	2b00      	cmp	r3, #0
 800428c:	d01b      	beq.n	80042c6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f06f 0208 	mvn.w	r2, #8
 8004296:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2204      	movs	r2, #4
 800429c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	69db      	ldr	r3, [r3, #28]
 80042a4:	f003 0303 	and.w	r3, r3, #3
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d003      	beq.n	80042b4 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f000 faf3 	bl	8004898 <HAL_TIM_IC_CaptureCallback>
 80042b2:	e005      	b.n	80042c0 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f000 fae5 	bl	8004884 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f000 faf6 	bl	80048ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	f003 0310 	and.w	r3, r3, #16
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d020      	beq.n	8004312 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f003 0310 	and.w	r3, r3, #16
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d01b      	beq.n	8004312 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f06f 0210 	mvn.w	r2, #16
 80042e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2208      	movs	r2, #8
 80042e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	69db      	ldr	r3, [r3, #28]
 80042f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d003      	beq.n	8004300 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f000 facd 	bl	8004898 <HAL_TIM_IC_CaptureCallback>
 80042fe:	e005      	b.n	800430c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f000 fabf 	bl	8004884 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f000 fad0 	bl	80048ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	f003 0301 	and.w	r3, r3, #1
 8004318:	2b00      	cmp	r3, #0
 800431a:	d00c      	beq.n	8004336 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f003 0301 	and.w	r3, r3, #1
 8004322:	2b00      	cmp	r3, #0
 8004324:	d007      	beq.n	8004336 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f06f 0201 	mvn.w	r2, #1
 800432e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f7fc fc03 	bl	8000b3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800433c:	2b00      	cmp	r3, #0
 800433e:	d104      	bne.n	800434a <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004346:	2b00      	cmp	r3, #0
 8004348:	d00c      	beq.n	8004364 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004350:	2b00      	cmp	r3, #0
 8004352:	d007      	beq.n	8004364 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800435c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f000 fffe 	bl	8005360 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800436a:	2b00      	cmp	r3, #0
 800436c:	d00c      	beq.n	8004388 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004374:	2b00      	cmp	r3, #0
 8004376:	d007      	beq.n	8004388 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004380:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f000 fff6 	bl	8005374 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00c      	beq.n	80043ac <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004398:	2b00      	cmp	r3, #0
 800439a:	d007      	beq.n	80043ac <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80043a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f000 fa8a 	bl	80048c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	f003 0320 	and.w	r3, r3, #32
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d00c      	beq.n	80043d0 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f003 0320 	and.w	r3, r3, #32
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d007      	beq.n	80043d0 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f06f 0220 	mvn.w	r2, #32
 80043c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f000 ffbe 	bl	800534c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d00c      	beq.n	80043f4 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d007      	beq.n	80043f4 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80043ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 ffca 	bl	8005388 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d00c      	beq.n	8004418 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004404:	2b00      	cmp	r3, #0
 8004406:	d007      	beq.n	8004418 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004410:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f000 ffc2 	bl	800539c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d00c      	beq.n	800443c <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004428:	2b00      	cmp	r3, #0
 800442a:	d007      	beq.n	800443c <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004434:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 ffba 	bl	80053b0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d00c      	beq.n	8004460 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d007      	beq.n	8004460 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004458:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f000 ffb2 	bl	80053c4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004460:	bf00      	nop
 8004462:	3710      	adds	r7, #16
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}

08004468 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b086      	sub	sp, #24
 800446c:	af00      	add	r7, sp, #0
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	60b9      	str	r1, [r7, #8]
 8004472:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004474:	2300      	movs	r3, #0
 8004476:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800447e:	2b01      	cmp	r3, #1
 8004480:	d101      	bne.n	8004486 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004482:	2302      	movs	r3, #2
 8004484:	e0ff      	b.n	8004686 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2201      	movs	r2, #1
 800448a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2b14      	cmp	r3, #20
 8004492:	f200 80f0 	bhi.w	8004676 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004496:	a201      	add	r2, pc, #4	; (adr r2, 800449c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800449c:	080044f1 	.word	0x080044f1
 80044a0:	08004677 	.word	0x08004677
 80044a4:	08004677 	.word	0x08004677
 80044a8:	08004677 	.word	0x08004677
 80044ac:	08004531 	.word	0x08004531
 80044b0:	08004677 	.word	0x08004677
 80044b4:	08004677 	.word	0x08004677
 80044b8:	08004677 	.word	0x08004677
 80044bc:	08004573 	.word	0x08004573
 80044c0:	08004677 	.word	0x08004677
 80044c4:	08004677 	.word	0x08004677
 80044c8:	08004677 	.word	0x08004677
 80044cc:	080045b3 	.word	0x080045b3
 80044d0:	08004677 	.word	0x08004677
 80044d4:	08004677 	.word	0x08004677
 80044d8:	08004677 	.word	0x08004677
 80044dc:	080045f5 	.word	0x080045f5
 80044e0:	08004677 	.word	0x08004677
 80044e4:	08004677 	.word	0x08004677
 80044e8:	08004677 	.word	0x08004677
 80044ec:	08004635 	.word	0x08004635
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	68b9      	ldr	r1, [r7, #8]
 80044f6:	4618      	mov	r0, r3
 80044f8:	f000 fa88 	bl	8004a0c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	699a      	ldr	r2, [r3, #24]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f042 0208 	orr.w	r2, r2, #8
 800450a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	699a      	ldr	r2, [r3, #24]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f022 0204 	bic.w	r2, r2, #4
 800451a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	6999      	ldr	r1, [r3, #24]
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	691a      	ldr	r2, [r3, #16]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	430a      	orrs	r2, r1
 800452c:	619a      	str	r2, [r3, #24]
      break;
 800452e:	e0a5      	b.n	800467c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	68b9      	ldr	r1, [r7, #8]
 8004536:	4618      	mov	r0, r3
 8004538:	f000 faf8 	bl	8004b2c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	699a      	ldr	r2, [r3, #24]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800454a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	699a      	ldr	r2, [r3, #24]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800455a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	6999      	ldr	r1, [r3, #24]
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	691b      	ldr	r3, [r3, #16]
 8004566:	021a      	lsls	r2, r3, #8
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	430a      	orrs	r2, r1
 800456e:	619a      	str	r2, [r3, #24]
      break;
 8004570:	e084      	b.n	800467c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	68b9      	ldr	r1, [r7, #8]
 8004578:	4618      	mov	r0, r3
 800457a:	f000 fb61 	bl	8004c40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	69da      	ldr	r2, [r3, #28]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f042 0208 	orr.w	r2, r2, #8
 800458c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	69da      	ldr	r2, [r3, #28]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f022 0204 	bic.w	r2, r2, #4
 800459c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	69d9      	ldr	r1, [r3, #28]
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	691a      	ldr	r2, [r3, #16]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	430a      	orrs	r2, r1
 80045ae:	61da      	str	r2, [r3, #28]
      break;
 80045b0:	e064      	b.n	800467c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	68b9      	ldr	r1, [r7, #8]
 80045b8:	4618      	mov	r0, r3
 80045ba:	f000 fbc9 	bl	8004d50 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	69da      	ldr	r2, [r3, #28]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	69da      	ldr	r2, [r3, #28]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	69d9      	ldr	r1, [r3, #28]
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	691b      	ldr	r3, [r3, #16]
 80045e8:	021a      	lsls	r2, r3, #8
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	430a      	orrs	r2, r1
 80045f0:	61da      	str	r2, [r3, #28]
      break;
 80045f2:	e043      	b.n	800467c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	68b9      	ldr	r1, [r7, #8]
 80045fa:	4618      	mov	r0, r3
 80045fc:	f000 fc32 	bl	8004e64 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f042 0208 	orr.w	r2, r2, #8
 800460e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f022 0204 	bic.w	r2, r2, #4
 800461e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	691a      	ldr	r2, [r3, #16]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	430a      	orrs	r2, r1
 8004630:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004632:	e023      	b.n	800467c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	68b9      	ldr	r1, [r7, #8]
 800463a:	4618      	mov	r0, r3
 800463c:	f000 fc76 	bl	8004f2c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800464e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800465e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	021a      	lsls	r2, r3, #8
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	430a      	orrs	r2, r1
 8004672:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004674:	e002      	b.n	800467c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	75fb      	strb	r3, [r7, #23]
      break;
 800467a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2200      	movs	r2, #0
 8004680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004684:	7dfb      	ldrb	r3, [r7, #23]
}
 8004686:	4618      	mov	r0, r3
 8004688:	3718      	adds	r7, #24
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop

08004690 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800469a:	2300      	movs	r3, #0
 800469c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d101      	bne.n	80046ac <HAL_TIM_ConfigClockSource+0x1c>
 80046a8:	2302      	movs	r3, #2
 80046aa:	e0de      	b.n	800486a <HAL_TIM_ConfigClockSource+0x1da>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2202      	movs	r2, #2
 80046b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80046ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80046ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	68ba      	ldr	r2, [r7, #8]
 80046de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a63      	ldr	r2, [pc, #396]	; (8004874 <HAL_TIM_ConfigClockSource+0x1e4>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	f000 80a9 	beq.w	800483e <HAL_TIM_ConfigClockSource+0x1ae>
 80046ec:	4a61      	ldr	r2, [pc, #388]	; (8004874 <HAL_TIM_ConfigClockSource+0x1e4>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	f200 80ae 	bhi.w	8004850 <HAL_TIM_ConfigClockSource+0x1c0>
 80046f4:	4a60      	ldr	r2, [pc, #384]	; (8004878 <HAL_TIM_ConfigClockSource+0x1e8>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	f000 80a1 	beq.w	800483e <HAL_TIM_ConfigClockSource+0x1ae>
 80046fc:	4a5e      	ldr	r2, [pc, #376]	; (8004878 <HAL_TIM_ConfigClockSource+0x1e8>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	f200 80a6 	bhi.w	8004850 <HAL_TIM_ConfigClockSource+0x1c0>
 8004704:	4a5d      	ldr	r2, [pc, #372]	; (800487c <HAL_TIM_ConfigClockSource+0x1ec>)
 8004706:	4293      	cmp	r3, r2
 8004708:	f000 8099 	beq.w	800483e <HAL_TIM_ConfigClockSource+0x1ae>
 800470c:	4a5b      	ldr	r2, [pc, #364]	; (800487c <HAL_TIM_ConfigClockSource+0x1ec>)
 800470e:	4293      	cmp	r3, r2
 8004710:	f200 809e 	bhi.w	8004850 <HAL_TIM_ConfigClockSource+0x1c0>
 8004714:	4a5a      	ldr	r2, [pc, #360]	; (8004880 <HAL_TIM_ConfigClockSource+0x1f0>)
 8004716:	4293      	cmp	r3, r2
 8004718:	f000 8091 	beq.w	800483e <HAL_TIM_ConfigClockSource+0x1ae>
 800471c:	4a58      	ldr	r2, [pc, #352]	; (8004880 <HAL_TIM_ConfigClockSource+0x1f0>)
 800471e:	4293      	cmp	r3, r2
 8004720:	f200 8096 	bhi.w	8004850 <HAL_TIM_ConfigClockSource+0x1c0>
 8004724:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004728:	f000 8089 	beq.w	800483e <HAL_TIM_ConfigClockSource+0x1ae>
 800472c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004730:	f200 808e 	bhi.w	8004850 <HAL_TIM_ConfigClockSource+0x1c0>
 8004734:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004738:	d03e      	beq.n	80047b8 <HAL_TIM_ConfigClockSource+0x128>
 800473a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800473e:	f200 8087 	bhi.w	8004850 <HAL_TIM_ConfigClockSource+0x1c0>
 8004742:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004746:	f000 8086 	beq.w	8004856 <HAL_TIM_ConfigClockSource+0x1c6>
 800474a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800474e:	d87f      	bhi.n	8004850 <HAL_TIM_ConfigClockSource+0x1c0>
 8004750:	2b70      	cmp	r3, #112	; 0x70
 8004752:	d01a      	beq.n	800478a <HAL_TIM_ConfigClockSource+0xfa>
 8004754:	2b70      	cmp	r3, #112	; 0x70
 8004756:	d87b      	bhi.n	8004850 <HAL_TIM_ConfigClockSource+0x1c0>
 8004758:	2b60      	cmp	r3, #96	; 0x60
 800475a:	d050      	beq.n	80047fe <HAL_TIM_ConfigClockSource+0x16e>
 800475c:	2b60      	cmp	r3, #96	; 0x60
 800475e:	d877      	bhi.n	8004850 <HAL_TIM_ConfigClockSource+0x1c0>
 8004760:	2b50      	cmp	r3, #80	; 0x50
 8004762:	d03c      	beq.n	80047de <HAL_TIM_ConfigClockSource+0x14e>
 8004764:	2b50      	cmp	r3, #80	; 0x50
 8004766:	d873      	bhi.n	8004850 <HAL_TIM_ConfigClockSource+0x1c0>
 8004768:	2b40      	cmp	r3, #64	; 0x40
 800476a:	d058      	beq.n	800481e <HAL_TIM_ConfigClockSource+0x18e>
 800476c:	2b40      	cmp	r3, #64	; 0x40
 800476e:	d86f      	bhi.n	8004850 <HAL_TIM_ConfigClockSource+0x1c0>
 8004770:	2b30      	cmp	r3, #48	; 0x30
 8004772:	d064      	beq.n	800483e <HAL_TIM_ConfigClockSource+0x1ae>
 8004774:	2b30      	cmp	r3, #48	; 0x30
 8004776:	d86b      	bhi.n	8004850 <HAL_TIM_ConfigClockSource+0x1c0>
 8004778:	2b20      	cmp	r3, #32
 800477a:	d060      	beq.n	800483e <HAL_TIM_ConfigClockSource+0x1ae>
 800477c:	2b20      	cmp	r3, #32
 800477e:	d867      	bhi.n	8004850 <HAL_TIM_ConfigClockSource+0x1c0>
 8004780:	2b00      	cmp	r3, #0
 8004782:	d05c      	beq.n	800483e <HAL_TIM_ConfigClockSource+0x1ae>
 8004784:	2b10      	cmp	r3, #16
 8004786:	d05a      	beq.n	800483e <HAL_TIM_ConfigClockSource+0x1ae>
 8004788:	e062      	b.n	8004850 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800479a:	f000 fca9 	bl	80050f0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80047ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	68ba      	ldr	r2, [r7, #8]
 80047b4:	609a      	str	r2, [r3, #8]
      break;
 80047b6:	e04f      	b.n	8004858 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80047c8:	f000 fc92 	bl	80050f0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	689a      	ldr	r2, [r3, #8]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047da:	609a      	str	r2, [r3, #8]
      break;
 80047dc:	e03c      	b.n	8004858 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047ea:	461a      	mov	r2, r3
 80047ec:	f000 fc04 	bl	8004ff8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	2150      	movs	r1, #80	; 0x50
 80047f6:	4618      	mov	r0, r3
 80047f8:	f000 fc5d 	bl	80050b6 <TIM_ITRx_SetConfig>
      break;
 80047fc:	e02c      	b.n	8004858 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800480a:	461a      	mov	r2, r3
 800480c:	f000 fc23 	bl	8005056 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	2160      	movs	r1, #96	; 0x60
 8004816:	4618      	mov	r0, r3
 8004818:	f000 fc4d 	bl	80050b6 <TIM_ITRx_SetConfig>
      break;
 800481c:	e01c      	b.n	8004858 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800482a:	461a      	mov	r2, r3
 800482c:	f000 fbe4 	bl	8004ff8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	2140      	movs	r1, #64	; 0x40
 8004836:	4618      	mov	r0, r3
 8004838:	f000 fc3d 	bl	80050b6 <TIM_ITRx_SetConfig>
      break;
 800483c:	e00c      	b.n	8004858 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4619      	mov	r1, r3
 8004848:	4610      	mov	r0, r2
 800484a:	f000 fc34 	bl	80050b6 <TIM_ITRx_SetConfig>
      break;
 800484e:	e003      	b.n	8004858 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	73fb      	strb	r3, [r7, #15]
      break;
 8004854:	e000      	b.n	8004858 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8004856:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004868:	7bfb      	ldrb	r3, [r7, #15]
}
 800486a:	4618      	mov	r0, r3
 800486c:	3710      	adds	r7, #16
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	00100070 	.word	0x00100070
 8004878:	00100040 	.word	0x00100040
 800487c:	00100030 	.word	0x00100030
 8004880:	00100020 	.word	0x00100020

08004884 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800488c:	bf00      	nop
 800488e:	370c      	adds	r7, #12
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr

08004898 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048a0:	bf00      	nop
 80048a2:	370c      	adds	r7, #12
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048b4:	bf00      	nop
 80048b6:	370c      	adds	r7, #12
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048c8:	bf00      	nop
 80048ca:	370c      	adds	r7, #12
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b085      	sub	sp, #20
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	4a42      	ldr	r2, [pc, #264]	; (80049f0 <TIM_Base_SetConfig+0x11c>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d00f      	beq.n	800490c <TIM_Base_SetConfig+0x38>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048f2:	d00b      	beq.n	800490c <TIM_Base_SetConfig+0x38>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4a3f      	ldr	r2, [pc, #252]	; (80049f4 <TIM_Base_SetConfig+0x120>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d007      	beq.n	800490c <TIM_Base_SetConfig+0x38>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	4a3e      	ldr	r2, [pc, #248]	; (80049f8 <TIM_Base_SetConfig+0x124>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d003      	beq.n	800490c <TIM_Base_SetConfig+0x38>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	4a3d      	ldr	r2, [pc, #244]	; (80049fc <TIM_Base_SetConfig+0x128>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d108      	bne.n	800491e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004912:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	68fa      	ldr	r2, [r7, #12]
 800491a:	4313      	orrs	r3, r2
 800491c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a33      	ldr	r2, [pc, #204]	; (80049f0 <TIM_Base_SetConfig+0x11c>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d01b      	beq.n	800495e <TIM_Base_SetConfig+0x8a>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800492c:	d017      	beq.n	800495e <TIM_Base_SetConfig+0x8a>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a30      	ldr	r2, [pc, #192]	; (80049f4 <TIM_Base_SetConfig+0x120>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d013      	beq.n	800495e <TIM_Base_SetConfig+0x8a>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a2f      	ldr	r2, [pc, #188]	; (80049f8 <TIM_Base_SetConfig+0x124>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d00f      	beq.n	800495e <TIM_Base_SetConfig+0x8a>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a2e      	ldr	r2, [pc, #184]	; (80049fc <TIM_Base_SetConfig+0x128>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d00b      	beq.n	800495e <TIM_Base_SetConfig+0x8a>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a2d      	ldr	r2, [pc, #180]	; (8004a00 <TIM_Base_SetConfig+0x12c>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d007      	beq.n	800495e <TIM_Base_SetConfig+0x8a>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a2c      	ldr	r2, [pc, #176]	; (8004a04 <TIM_Base_SetConfig+0x130>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d003      	beq.n	800495e <TIM_Base_SetConfig+0x8a>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	4a2b      	ldr	r2, [pc, #172]	; (8004a08 <TIM_Base_SetConfig+0x134>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d108      	bne.n	8004970 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004964:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	68fa      	ldr	r2, [r7, #12]
 800496c:	4313      	orrs	r3, r2
 800496e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	695b      	ldr	r3, [r3, #20]
 800497a:	4313      	orrs	r3, r2
 800497c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	68fa      	ldr	r2, [r7, #12]
 8004982:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	689a      	ldr	r2, [r3, #8]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	4a16      	ldr	r2, [pc, #88]	; (80049f0 <TIM_Base_SetConfig+0x11c>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d00f      	beq.n	80049bc <TIM_Base_SetConfig+0xe8>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4a17      	ldr	r2, [pc, #92]	; (80049fc <TIM_Base_SetConfig+0x128>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d00b      	beq.n	80049bc <TIM_Base_SetConfig+0xe8>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4a16      	ldr	r2, [pc, #88]	; (8004a00 <TIM_Base_SetConfig+0x12c>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d007      	beq.n	80049bc <TIM_Base_SetConfig+0xe8>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4a15      	ldr	r2, [pc, #84]	; (8004a04 <TIM_Base_SetConfig+0x130>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d003      	beq.n	80049bc <TIM_Base_SetConfig+0xe8>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	4a14      	ldr	r2, [pc, #80]	; (8004a08 <TIM_Base_SetConfig+0x134>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d103      	bne.n	80049c4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	691a      	ldr	r2, [r3, #16]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	691b      	ldr	r3, [r3, #16]
 80049ce:	f003 0301 	and.w	r3, r3, #1
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d105      	bne.n	80049e2 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	691b      	ldr	r3, [r3, #16]
 80049da:	f023 0201 	bic.w	r2, r3, #1
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	611a      	str	r2, [r3, #16]
  }
}
 80049e2:	bf00      	nop
 80049e4:	3714      	adds	r7, #20
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr
 80049ee:	bf00      	nop
 80049f0:	40012c00 	.word	0x40012c00
 80049f4:	40000400 	.word	0x40000400
 80049f8:	40000800 	.word	0x40000800
 80049fc:	40013400 	.word	0x40013400
 8004a00:	40014000 	.word	0x40014000
 8004a04:	40014400 	.word	0x40014400
 8004a08:	40014800 	.word	0x40014800

08004a0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b087      	sub	sp, #28
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a1b      	ldr	r3, [r3, #32]
 8004a1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6a1b      	ldr	r3, [r3, #32]
 8004a20:	f023 0201 	bic.w	r2, r3, #1
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	699b      	ldr	r3, [r3, #24]
 8004a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f023 0303 	bic.w	r3, r3, #3
 8004a46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	68fa      	ldr	r2, [r7, #12]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	f023 0302 	bic.w	r3, r3, #2
 8004a58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	697a      	ldr	r2, [r7, #20]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	4a2c      	ldr	r2, [pc, #176]	; (8004b18 <TIM_OC1_SetConfig+0x10c>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d00f      	beq.n	8004a8c <TIM_OC1_SetConfig+0x80>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	4a2b      	ldr	r2, [pc, #172]	; (8004b1c <TIM_OC1_SetConfig+0x110>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d00b      	beq.n	8004a8c <TIM_OC1_SetConfig+0x80>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	4a2a      	ldr	r2, [pc, #168]	; (8004b20 <TIM_OC1_SetConfig+0x114>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d007      	beq.n	8004a8c <TIM_OC1_SetConfig+0x80>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	4a29      	ldr	r2, [pc, #164]	; (8004b24 <TIM_OC1_SetConfig+0x118>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d003      	beq.n	8004a8c <TIM_OC1_SetConfig+0x80>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	4a28      	ldr	r2, [pc, #160]	; (8004b28 <TIM_OC1_SetConfig+0x11c>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d10c      	bne.n	8004aa6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	f023 0308 	bic.w	r3, r3, #8
 8004a92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	697a      	ldr	r2, [r7, #20]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	f023 0304 	bic.w	r3, r3, #4
 8004aa4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	4a1b      	ldr	r2, [pc, #108]	; (8004b18 <TIM_OC1_SetConfig+0x10c>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d00f      	beq.n	8004ace <TIM_OC1_SetConfig+0xc2>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4a1a      	ldr	r2, [pc, #104]	; (8004b1c <TIM_OC1_SetConfig+0x110>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d00b      	beq.n	8004ace <TIM_OC1_SetConfig+0xc2>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	4a19      	ldr	r2, [pc, #100]	; (8004b20 <TIM_OC1_SetConfig+0x114>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d007      	beq.n	8004ace <TIM_OC1_SetConfig+0xc2>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	4a18      	ldr	r2, [pc, #96]	; (8004b24 <TIM_OC1_SetConfig+0x118>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d003      	beq.n	8004ace <TIM_OC1_SetConfig+0xc2>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	4a17      	ldr	r2, [pc, #92]	; (8004b28 <TIM_OC1_SetConfig+0x11c>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d111      	bne.n	8004af2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ad4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004adc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	695b      	ldr	r3, [r3, #20]
 8004ae2:	693a      	ldr	r2, [r7, #16]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	699b      	ldr	r3, [r3, #24]
 8004aec:	693a      	ldr	r2, [r7, #16]
 8004aee:	4313      	orrs	r3, r2
 8004af0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	693a      	ldr	r2, [r7, #16]
 8004af6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	68fa      	ldr	r2, [r7, #12]
 8004afc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	685a      	ldr	r2, [r3, #4]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	697a      	ldr	r2, [r7, #20]
 8004b0a:	621a      	str	r2, [r3, #32]
}
 8004b0c:	bf00      	nop
 8004b0e:	371c      	adds	r7, #28
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr
 8004b18:	40012c00 	.word	0x40012c00
 8004b1c:	40013400 	.word	0x40013400
 8004b20:	40014000 	.word	0x40014000
 8004b24:	40014400 	.word	0x40014400
 8004b28:	40014800 	.word	0x40014800

08004b2c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b087      	sub	sp, #28
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6a1b      	ldr	r3, [r3, #32]
 8004b3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6a1b      	ldr	r3, [r3, #32]
 8004b40:	f023 0210 	bic.w	r2, r3, #16
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	699b      	ldr	r3, [r3, #24]
 8004b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	021b      	lsls	r3, r3, #8
 8004b6e:	68fa      	ldr	r2, [r7, #12]
 8004b70:	4313      	orrs	r3, r2
 8004b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	f023 0320 	bic.w	r3, r3, #32
 8004b7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	011b      	lsls	r3, r3, #4
 8004b82:	697a      	ldr	r2, [r7, #20]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4a28      	ldr	r2, [pc, #160]	; (8004c2c <TIM_OC2_SetConfig+0x100>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d003      	beq.n	8004b98 <TIM_OC2_SetConfig+0x6c>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4a27      	ldr	r2, [pc, #156]	; (8004c30 <TIM_OC2_SetConfig+0x104>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d10d      	bne.n	8004bb4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	011b      	lsls	r3, r3, #4
 8004ba6:	697a      	ldr	r2, [r7, #20]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bb2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	4a1d      	ldr	r2, [pc, #116]	; (8004c2c <TIM_OC2_SetConfig+0x100>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d00f      	beq.n	8004bdc <TIM_OC2_SetConfig+0xb0>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	4a1c      	ldr	r2, [pc, #112]	; (8004c30 <TIM_OC2_SetConfig+0x104>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d00b      	beq.n	8004bdc <TIM_OC2_SetConfig+0xb0>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	4a1b      	ldr	r2, [pc, #108]	; (8004c34 <TIM_OC2_SetConfig+0x108>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d007      	beq.n	8004bdc <TIM_OC2_SetConfig+0xb0>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	4a1a      	ldr	r2, [pc, #104]	; (8004c38 <TIM_OC2_SetConfig+0x10c>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d003      	beq.n	8004bdc <TIM_OC2_SetConfig+0xb0>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	4a19      	ldr	r2, [pc, #100]	; (8004c3c <TIM_OC2_SetConfig+0x110>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d113      	bne.n	8004c04 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004be2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004bea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	695b      	ldr	r3, [r3, #20]
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	693a      	ldr	r2, [r7, #16]
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	699b      	ldr	r3, [r3, #24]
 8004bfc:	009b      	lsls	r3, r3, #2
 8004bfe:	693a      	ldr	r2, [r7, #16]
 8004c00:	4313      	orrs	r3, r2
 8004c02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	693a      	ldr	r2, [r7, #16]
 8004c08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	68fa      	ldr	r2, [r7, #12]
 8004c0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	685a      	ldr	r2, [r3, #4]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	697a      	ldr	r2, [r7, #20]
 8004c1c:	621a      	str	r2, [r3, #32]
}
 8004c1e:	bf00      	nop
 8004c20:	371c      	adds	r7, #28
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr
 8004c2a:	bf00      	nop
 8004c2c:	40012c00 	.word	0x40012c00
 8004c30:	40013400 	.word	0x40013400
 8004c34:	40014000 	.word	0x40014000
 8004c38:	40014400 	.word	0x40014400
 8004c3c:	40014800 	.word	0x40014800

08004c40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b087      	sub	sp, #28
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a1b      	ldr	r3, [r3, #32]
 8004c4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6a1b      	ldr	r3, [r3, #32]
 8004c54:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	69db      	ldr	r3, [r3, #28]
 8004c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f023 0303 	bic.w	r3, r3, #3
 8004c7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	68fa      	ldr	r2, [r7, #12]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	021b      	lsls	r3, r3, #8
 8004c94:	697a      	ldr	r2, [r7, #20]
 8004c96:	4313      	orrs	r3, r2
 8004c98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4a27      	ldr	r2, [pc, #156]	; (8004d3c <TIM_OC3_SetConfig+0xfc>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d003      	beq.n	8004caa <TIM_OC3_SetConfig+0x6a>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4a26      	ldr	r2, [pc, #152]	; (8004d40 <TIM_OC3_SetConfig+0x100>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d10d      	bne.n	8004cc6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004cb0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	021b      	lsls	r3, r3, #8
 8004cb8:	697a      	ldr	r2, [r7, #20]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004cc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4a1c      	ldr	r2, [pc, #112]	; (8004d3c <TIM_OC3_SetConfig+0xfc>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d00f      	beq.n	8004cee <TIM_OC3_SetConfig+0xae>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4a1b      	ldr	r2, [pc, #108]	; (8004d40 <TIM_OC3_SetConfig+0x100>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d00b      	beq.n	8004cee <TIM_OC3_SetConfig+0xae>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	4a1a      	ldr	r2, [pc, #104]	; (8004d44 <TIM_OC3_SetConfig+0x104>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d007      	beq.n	8004cee <TIM_OC3_SetConfig+0xae>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4a19      	ldr	r2, [pc, #100]	; (8004d48 <TIM_OC3_SetConfig+0x108>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d003      	beq.n	8004cee <TIM_OC3_SetConfig+0xae>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4a18      	ldr	r2, [pc, #96]	; (8004d4c <TIM_OC3_SetConfig+0x10c>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d113      	bne.n	8004d16 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004cf4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004cfc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	695b      	ldr	r3, [r3, #20]
 8004d02:	011b      	lsls	r3, r3, #4
 8004d04:	693a      	ldr	r2, [r7, #16]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	699b      	ldr	r3, [r3, #24]
 8004d0e:	011b      	lsls	r3, r3, #4
 8004d10:	693a      	ldr	r2, [r7, #16]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	693a      	ldr	r2, [r7, #16]
 8004d1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	68fa      	ldr	r2, [r7, #12]
 8004d20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	685a      	ldr	r2, [r3, #4]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	697a      	ldr	r2, [r7, #20]
 8004d2e:	621a      	str	r2, [r3, #32]
}
 8004d30:	bf00      	nop
 8004d32:	371c      	adds	r7, #28
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr
 8004d3c:	40012c00 	.word	0x40012c00
 8004d40:	40013400 	.word	0x40013400
 8004d44:	40014000 	.word	0x40014000
 8004d48:	40014400 	.word	0x40014400
 8004d4c:	40014800 	.word	0x40014800

08004d50 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b087      	sub	sp, #28
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a1b      	ldr	r3, [r3, #32]
 8004d5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6a1b      	ldr	r3, [r3, #32]
 8004d64:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	69db      	ldr	r3, [r3, #28]
 8004d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	021b      	lsls	r3, r3, #8
 8004d92:	68fa      	ldr	r2, [r7, #12]
 8004d94:	4313      	orrs	r3, r2
 8004d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	031b      	lsls	r3, r3, #12
 8004da6:	697a      	ldr	r2, [r7, #20]
 8004da8:	4313      	orrs	r3, r2
 8004daa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	4a28      	ldr	r2, [pc, #160]	; (8004e50 <TIM_OC4_SetConfig+0x100>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d003      	beq.n	8004dbc <TIM_OC4_SetConfig+0x6c>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	4a27      	ldr	r2, [pc, #156]	; (8004e54 <TIM_OC4_SetConfig+0x104>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d10d      	bne.n	8004dd8 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004dc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	031b      	lsls	r3, r3, #12
 8004dca:	697a      	ldr	r2, [r7, #20]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004dd6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	4a1d      	ldr	r2, [pc, #116]	; (8004e50 <TIM_OC4_SetConfig+0x100>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d00f      	beq.n	8004e00 <TIM_OC4_SetConfig+0xb0>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	4a1c      	ldr	r2, [pc, #112]	; (8004e54 <TIM_OC4_SetConfig+0x104>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d00b      	beq.n	8004e00 <TIM_OC4_SetConfig+0xb0>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	4a1b      	ldr	r2, [pc, #108]	; (8004e58 <TIM_OC4_SetConfig+0x108>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d007      	beq.n	8004e00 <TIM_OC4_SetConfig+0xb0>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	4a1a      	ldr	r2, [pc, #104]	; (8004e5c <TIM_OC4_SetConfig+0x10c>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d003      	beq.n	8004e00 <TIM_OC4_SetConfig+0xb0>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4a19      	ldr	r2, [pc, #100]	; (8004e60 <TIM_OC4_SetConfig+0x110>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d113      	bne.n	8004e28 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e06:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004e0e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	695b      	ldr	r3, [r3, #20]
 8004e14:	019b      	lsls	r3, r3, #6
 8004e16:	693a      	ldr	r2, [r7, #16]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	699b      	ldr	r3, [r3, #24]
 8004e20:	019b      	lsls	r3, r3, #6
 8004e22:	693a      	ldr	r2, [r7, #16]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	693a      	ldr	r2, [r7, #16]
 8004e2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	68fa      	ldr	r2, [r7, #12]
 8004e32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	685a      	ldr	r2, [r3, #4]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	697a      	ldr	r2, [r7, #20]
 8004e40:	621a      	str	r2, [r3, #32]
}
 8004e42:	bf00      	nop
 8004e44:	371c      	adds	r7, #28
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr
 8004e4e:	bf00      	nop
 8004e50:	40012c00 	.word	0x40012c00
 8004e54:	40013400 	.word	0x40013400
 8004e58:	40014000 	.word	0x40014000
 8004e5c:	40014400 	.word	0x40014400
 8004e60:	40014800 	.word	0x40014800

08004e64 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b087      	sub	sp, #28
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6a1b      	ldr	r3, [r3, #32]
 8004e72:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6a1b      	ldr	r3, [r3, #32]
 8004e78:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	68fa      	ldr	r2, [r7, #12]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004ea8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	041b      	lsls	r3, r3, #16
 8004eb0:	693a      	ldr	r2, [r7, #16]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4a17      	ldr	r2, [pc, #92]	; (8004f18 <TIM_OC5_SetConfig+0xb4>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d00f      	beq.n	8004ede <TIM_OC5_SetConfig+0x7a>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a16      	ldr	r2, [pc, #88]	; (8004f1c <TIM_OC5_SetConfig+0xb8>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d00b      	beq.n	8004ede <TIM_OC5_SetConfig+0x7a>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a15      	ldr	r2, [pc, #84]	; (8004f20 <TIM_OC5_SetConfig+0xbc>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d007      	beq.n	8004ede <TIM_OC5_SetConfig+0x7a>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a14      	ldr	r2, [pc, #80]	; (8004f24 <TIM_OC5_SetConfig+0xc0>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d003      	beq.n	8004ede <TIM_OC5_SetConfig+0x7a>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a13      	ldr	r2, [pc, #76]	; (8004f28 <TIM_OC5_SetConfig+0xc4>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d109      	bne.n	8004ef2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ee4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	695b      	ldr	r3, [r3, #20]
 8004eea:	021b      	lsls	r3, r3, #8
 8004eec:	697a      	ldr	r2, [r7, #20]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	697a      	ldr	r2, [r7, #20]
 8004ef6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	68fa      	ldr	r2, [r7, #12]
 8004efc:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	685a      	ldr	r2, [r3, #4]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	693a      	ldr	r2, [r7, #16]
 8004f0a:	621a      	str	r2, [r3, #32]
}
 8004f0c:	bf00      	nop
 8004f0e:	371c      	adds	r7, #28
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr
 8004f18:	40012c00 	.word	0x40012c00
 8004f1c:	40013400 	.word	0x40013400
 8004f20:	40014000 	.word	0x40014000
 8004f24:	40014400 	.word	0x40014400
 8004f28:	40014800 	.word	0x40014800

08004f2c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b087      	sub	sp, #28
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6a1b      	ldr	r3, [r3, #32]
 8004f3a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6a1b      	ldr	r3, [r3, #32]
 8004f40:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	021b      	lsls	r3, r3, #8
 8004f66:	68fa      	ldr	r2, [r7, #12]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004f72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	051b      	lsls	r3, r3, #20
 8004f7a:	693a      	ldr	r2, [r7, #16]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	4a18      	ldr	r2, [pc, #96]	; (8004fe4 <TIM_OC6_SetConfig+0xb8>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d00f      	beq.n	8004fa8 <TIM_OC6_SetConfig+0x7c>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4a17      	ldr	r2, [pc, #92]	; (8004fe8 <TIM_OC6_SetConfig+0xbc>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d00b      	beq.n	8004fa8 <TIM_OC6_SetConfig+0x7c>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4a16      	ldr	r2, [pc, #88]	; (8004fec <TIM_OC6_SetConfig+0xc0>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d007      	beq.n	8004fa8 <TIM_OC6_SetConfig+0x7c>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4a15      	ldr	r2, [pc, #84]	; (8004ff0 <TIM_OC6_SetConfig+0xc4>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d003      	beq.n	8004fa8 <TIM_OC6_SetConfig+0x7c>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	4a14      	ldr	r2, [pc, #80]	; (8004ff4 <TIM_OC6_SetConfig+0xc8>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d109      	bne.n	8004fbc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004fae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	695b      	ldr	r3, [r3, #20]
 8004fb4:	029b      	lsls	r3, r3, #10
 8004fb6:	697a      	ldr	r2, [r7, #20]
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	697a      	ldr	r2, [r7, #20]
 8004fc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	68fa      	ldr	r2, [r7, #12]
 8004fc6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	685a      	ldr	r2, [r3, #4]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	693a      	ldr	r2, [r7, #16]
 8004fd4:	621a      	str	r2, [r3, #32]
}
 8004fd6:	bf00      	nop
 8004fd8:	371c      	adds	r7, #28
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr
 8004fe2:	bf00      	nop
 8004fe4:	40012c00 	.word	0x40012c00
 8004fe8:	40013400 	.word	0x40013400
 8004fec:	40014000 	.word	0x40014000
 8004ff0:	40014400 	.word	0x40014400
 8004ff4:	40014800 	.word	0x40014800

08004ff8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b087      	sub	sp, #28
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	60f8      	str	r0, [r7, #12]
 8005000:	60b9      	str	r1, [r7, #8]
 8005002:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	6a1b      	ldr	r3, [r3, #32]
 8005008:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6a1b      	ldr	r3, [r3, #32]
 800500e:	f023 0201 	bic.w	r2, r3, #1
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	699b      	ldr	r3, [r3, #24]
 800501a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005022:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	011b      	lsls	r3, r3, #4
 8005028:	693a      	ldr	r2, [r7, #16]
 800502a:	4313      	orrs	r3, r2
 800502c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	f023 030a 	bic.w	r3, r3, #10
 8005034:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005036:	697a      	ldr	r2, [r7, #20]
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	4313      	orrs	r3, r2
 800503c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	693a      	ldr	r2, [r7, #16]
 8005042:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	697a      	ldr	r2, [r7, #20]
 8005048:	621a      	str	r2, [r3, #32]
}
 800504a:	bf00      	nop
 800504c:	371c      	adds	r7, #28
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr

08005056 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005056:	b480      	push	{r7}
 8005058:	b087      	sub	sp, #28
 800505a:	af00      	add	r7, sp, #0
 800505c:	60f8      	str	r0, [r7, #12]
 800505e:	60b9      	str	r1, [r7, #8]
 8005060:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	6a1b      	ldr	r3, [r3, #32]
 8005066:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6a1b      	ldr	r3, [r3, #32]
 800506c:	f023 0210 	bic.w	r2, r3, #16
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	699b      	ldr	r3, [r3, #24]
 8005078:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005080:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	031b      	lsls	r3, r3, #12
 8005086:	693a      	ldr	r2, [r7, #16]
 8005088:	4313      	orrs	r3, r2
 800508a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005092:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	011b      	lsls	r3, r3, #4
 8005098:	697a      	ldr	r2, [r7, #20]
 800509a:	4313      	orrs	r3, r2
 800509c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	693a      	ldr	r2, [r7, #16]
 80050a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	697a      	ldr	r2, [r7, #20]
 80050a8:	621a      	str	r2, [r3, #32]
}
 80050aa:	bf00      	nop
 80050ac:	371c      	adds	r7, #28
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr

080050b6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80050b6:	b480      	push	{r7}
 80050b8:	b085      	sub	sp, #20
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	6078      	str	r0, [r7, #4]
 80050be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80050cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80050d2:	683a      	ldr	r2, [r7, #0]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	f043 0307 	orr.w	r3, r3, #7
 80050dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	609a      	str	r2, [r3, #8]
}
 80050e4:	bf00      	nop
 80050e6:	3714      	adds	r7, #20
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr

080050f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b087      	sub	sp, #28
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	60b9      	str	r1, [r7, #8]
 80050fa:	607a      	str	r2, [r7, #4]
 80050fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800510a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	021a      	lsls	r2, r3, #8
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	431a      	orrs	r2, r3
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	4313      	orrs	r3, r2
 8005118:	697a      	ldr	r2, [r7, #20]
 800511a:	4313      	orrs	r3, r2
 800511c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	697a      	ldr	r2, [r7, #20]
 8005122:	609a      	str	r2, [r3, #8]
}
 8005124:	bf00      	nop
 8005126:	371c      	adds	r7, #28
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr

08005130 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005130:	b480      	push	{r7}
 8005132:	b085      	sub	sp, #20
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005140:	2b01      	cmp	r3, #1
 8005142:	d101      	bne.n	8005148 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005144:	2302      	movs	r3, #2
 8005146:	e065      	b.n	8005214 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2202      	movs	r2, #2
 8005154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a2c      	ldr	r2, [pc, #176]	; (8005220 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d004      	beq.n	800517c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a2b      	ldr	r2, [pc, #172]	; (8005224 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d108      	bne.n	800518e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005182:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	68fa      	ldr	r2, [r7, #12]
 800518a:	4313      	orrs	r3, r2
 800518c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005194:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005198:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	68fa      	ldr	r2, [r7, #12]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	68fa      	ldr	r2, [r7, #12]
 80051aa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a1b      	ldr	r2, [pc, #108]	; (8005220 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d018      	beq.n	80051e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051be:	d013      	beq.n	80051e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a18      	ldr	r2, [pc, #96]	; (8005228 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d00e      	beq.n	80051e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a17      	ldr	r2, [pc, #92]	; (800522c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d009      	beq.n	80051e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a12      	ldr	r2, [pc, #72]	; (8005224 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d004      	beq.n	80051e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a13      	ldr	r2, [pc, #76]	; (8005230 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d10c      	bne.n	8005202 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051ee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	68ba      	ldr	r2, [r7, #8]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	68ba      	ldr	r2, [r7, #8]
 8005200:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2201      	movs	r2, #1
 8005206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005212:	2300      	movs	r3, #0
}
 8005214:	4618      	mov	r0, r3
 8005216:	3714      	adds	r7, #20
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr
 8005220:	40012c00 	.word	0x40012c00
 8005224:	40013400 	.word	0x40013400
 8005228:	40000400 	.word	0x40000400
 800522c:	40000800 	.word	0x40000800
 8005230:	40014000 	.word	0x40014000

08005234 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005234:	b480      	push	{r7}
 8005236:	b085      	sub	sp, #20
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800523e:	2300      	movs	r3, #0
 8005240:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005248:	2b01      	cmp	r3, #1
 800524a:	d101      	bne.n	8005250 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800524c:	2302      	movs	r3, #2
 800524e:	e073      	b.n	8005338 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	4313      	orrs	r3, r2
 8005264:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	4313      	orrs	r3, r2
 8005272:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	4313      	orrs	r3, r2
 8005280:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4313      	orrs	r3, r2
 800528e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	691b      	ldr	r3, [r3, #16]
 800529a:	4313      	orrs	r3, r2
 800529c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	695b      	ldr	r3, [r3, #20]
 80052a8:	4313      	orrs	r3, r2
 80052aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b6:	4313      	orrs	r3, r2
 80052b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	699b      	ldr	r3, [r3, #24]
 80052c4:	041b      	lsls	r3, r3, #16
 80052c6:	4313      	orrs	r3, r2
 80052c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	69db      	ldr	r3, [r3, #28]
 80052d4:	4313      	orrs	r3, r2
 80052d6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a19      	ldr	r2, [pc, #100]	; (8005344 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d004      	beq.n	80052ec <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a18      	ldr	r2, [pc, #96]	; (8005348 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d11c      	bne.n	8005326 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052f6:	051b      	lsls	r3, r3, #20
 80052f8:	4313      	orrs	r3, r2
 80052fa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	6a1b      	ldr	r3, [r3, #32]
 8005306:	4313      	orrs	r3, r2
 8005308:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005314:	4313      	orrs	r3, r2
 8005316:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005322:	4313      	orrs	r3, r2
 8005324:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	68fa      	ldr	r2, [r7, #12]
 800532c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005336:	2300      	movs	r3, #0
}
 8005338:	4618      	mov	r0, r3
 800533a:	3714      	adds	r7, #20
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr
 8005344:	40012c00 	.word	0x40012c00
 8005348:	40013400 	.word	0x40013400

0800534c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800534c:	b480      	push	{r7}
 800534e:	b083      	sub	sp, #12
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005354:	bf00      	nop
 8005356:	370c      	adds	r7, #12
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr

08005360 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005360:	b480      	push	{r7}
 8005362:	b083      	sub	sp, #12
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005368:	bf00      	nop
 800536a:	370c      	adds	r7, #12
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005374:	b480      	push	{r7}
 8005376:	b083      	sub	sp, #12
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800537c:	bf00      	nop
 800537e:	370c      	adds	r7, #12
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr

08005388 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005388:	b480      	push	{r7}
 800538a:	b083      	sub	sp, #12
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005390:	bf00      	nop
 8005392:	370c      	adds	r7, #12
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr

0800539c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80053a4:	bf00      	nop
 80053a6:	370c      	adds	r7, #12
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr

080053b0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b083      	sub	sp, #12
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80053b8:	bf00      	nop
 80053ba:	370c      	adds	r7, #12
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr

080053c4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b083      	sub	sp, #12
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80053cc:	bf00      	nop
 80053ce:	370c      	adds	r7, #12
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr

080053d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b082      	sub	sp, #8
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d101      	bne.n	80053ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	e042      	b.n	8005470 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d106      	bne.n	8005402 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2200      	movs	r2, #0
 80053f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f7fb fe47 	bl	8001090 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2224      	movs	r2, #36	; 0x24
 8005406:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f022 0201 	bic.w	r2, r2, #1
 8005418:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800541e:	2b00      	cmp	r3, #0
 8005420:	d002      	beq.n	8005428 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f000 faf4 	bl	8005a10 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f000 f825 	bl	8005478 <UART_SetConfig>
 800542e:	4603      	mov	r3, r0
 8005430:	2b01      	cmp	r3, #1
 8005432:	d101      	bne.n	8005438 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	e01b      	b.n	8005470 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	685a      	ldr	r2, [r3, #4]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005446:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	689a      	ldr	r2, [r3, #8]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005456:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f042 0201 	orr.w	r2, r2, #1
 8005466:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f000 fb73 	bl	8005b54 <UART_CheckIdleState>
 800546e:	4603      	mov	r3, r0
}
 8005470:	4618      	mov	r0, r3
 8005472:	3708      	adds	r7, #8
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}

08005478 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005478:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800547c:	b08c      	sub	sp, #48	; 0x30
 800547e:	af00      	add	r7, sp, #0
 8005480:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005482:	2300      	movs	r3, #0
 8005484:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	689a      	ldr	r2, [r3, #8]
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	691b      	ldr	r3, [r3, #16]
 8005490:	431a      	orrs	r2, r3
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	695b      	ldr	r3, [r3, #20]
 8005496:	431a      	orrs	r2, r3
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	69db      	ldr	r3, [r3, #28]
 800549c:	4313      	orrs	r3, r2
 800549e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	4bab      	ldr	r3, [pc, #684]	; (8005754 <UART_SetConfig+0x2dc>)
 80054a8:	4013      	ands	r3, r2
 80054aa:	697a      	ldr	r2, [r7, #20]
 80054ac:	6812      	ldr	r2, [r2, #0]
 80054ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80054b0:	430b      	orrs	r3, r1
 80054b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	68da      	ldr	r2, [r3, #12]
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	430a      	orrs	r2, r1
 80054c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	699b      	ldr	r3, [r3, #24]
 80054ce:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4aa0      	ldr	r2, [pc, #640]	; (8005758 <UART_SetConfig+0x2e0>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d004      	beq.n	80054e4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	6a1b      	ldr	r3, [r3, #32]
 80054de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054e0:	4313      	orrs	r3, r2
 80054e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80054ee:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80054f2:	697a      	ldr	r2, [r7, #20]
 80054f4:	6812      	ldr	r2, [r2, #0]
 80054f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80054f8:	430b      	orrs	r3, r1
 80054fa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005502:	f023 010f 	bic.w	r1, r3, #15
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	430a      	orrs	r2, r1
 8005510:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a91      	ldr	r2, [pc, #580]	; (800575c <UART_SetConfig+0x2e4>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d125      	bne.n	8005568 <UART_SetConfig+0xf0>
 800551c:	4b90      	ldr	r3, [pc, #576]	; (8005760 <UART_SetConfig+0x2e8>)
 800551e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005522:	f003 0303 	and.w	r3, r3, #3
 8005526:	2b03      	cmp	r3, #3
 8005528:	d81a      	bhi.n	8005560 <UART_SetConfig+0xe8>
 800552a:	a201      	add	r2, pc, #4	; (adr r2, 8005530 <UART_SetConfig+0xb8>)
 800552c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005530:	08005541 	.word	0x08005541
 8005534:	08005551 	.word	0x08005551
 8005538:	08005549 	.word	0x08005549
 800553c:	08005559 	.word	0x08005559
 8005540:	2301      	movs	r3, #1
 8005542:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005546:	e0d6      	b.n	80056f6 <UART_SetConfig+0x27e>
 8005548:	2302      	movs	r3, #2
 800554a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800554e:	e0d2      	b.n	80056f6 <UART_SetConfig+0x27e>
 8005550:	2304      	movs	r3, #4
 8005552:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005556:	e0ce      	b.n	80056f6 <UART_SetConfig+0x27e>
 8005558:	2308      	movs	r3, #8
 800555a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800555e:	e0ca      	b.n	80056f6 <UART_SetConfig+0x27e>
 8005560:	2310      	movs	r3, #16
 8005562:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005566:	e0c6      	b.n	80056f6 <UART_SetConfig+0x27e>
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a7d      	ldr	r2, [pc, #500]	; (8005764 <UART_SetConfig+0x2ec>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d138      	bne.n	80055e4 <UART_SetConfig+0x16c>
 8005572:	4b7b      	ldr	r3, [pc, #492]	; (8005760 <UART_SetConfig+0x2e8>)
 8005574:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005578:	f003 030c 	and.w	r3, r3, #12
 800557c:	2b0c      	cmp	r3, #12
 800557e:	d82d      	bhi.n	80055dc <UART_SetConfig+0x164>
 8005580:	a201      	add	r2, pc, #4	; (adr r2, 8005588 <UART_SetConfig+0x110>)
 8005582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005586:	bf00      	nop
 8005588:	080055bd 	.word	0x080055bd
 800558c:	080055dd 	.word	0x080055dd
 8005590:	080055dd 	.word	0x080055dd
 8005594:	080055dd 	.word	0x080055dd
 8005598:	080055cd 	.word	0x080055cd
 800559c:	080055dd 	.word	0x080055dd
 80055a0:	080055dd 	.word	0x080055dd
 80055a4:	080055dd 	.word	0x080055dd
 80055a8:	080055c5 	.word	0x080055c5
 80055ac:	080055dd 	.word	0x080055dd
 80055b0:	080055dd 	.word	0x080055dd
 80055b4:	080055dd 	.word	0x080055dd
 80055b8:	080055d5 	.word	0x080055d5
 80055bc:	2300      	movs	r3, #0
 80055be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055c2:	e098      	b.n	80056f6 <UART_SetConfig+0x27e>
 80055c4:	2302      	movs	r3, #2
 80055c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055ca:	e094      	b.n	80056f6 <UART_SetConfig+0x27e>
 80055cc:	2304      	movs	r3, #4
 80055ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055d2:	e090      	b.n	80056f6 <UART_SetConfig+0x27e>
 80055d4:	2308      	movs	r3, #8
 80055d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055da:	e08c      	b.n	80056f6 <UART_SetConfig+0x27e>
 80055dc:	2310      	movs	r3, #16
 80055de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055e2:	e088      	b.n	80056f6 <UART_SetConfig+0x27e>
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a5f      	ldr	r2, [pc, #380]	; (8005768 <UART_SetConfig+0x2f0>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d125      	bne.n	800563a <UART_SetConfig+0x1c2>
 80055ee:	4b5c      	ldr	r3, [pc, #368]	; (8005760 <UART_SetConfig+0x2e8>)
 80055f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055f4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80055f8:	2b30      	cmp	r3, #48	; 0x30
 80055fa:	d016      	beq.n	800562a <UART_SetConfig+0x1b2>
 80055fc:	2b30      	cmp	r3, #48	; 0x30
 80055fe:	d818      	bhi.n	8005632 <UART_SetConfig+0x1ba>
 8005600:	2b20      	cmp	r3, #32
 8005602:	d00a      	beq.n	800561a <UART_SetConfig+0x1a2>
 8005604:	2b20      	cmp	r3, #32
 8005606:	d814      	bhi.n	8005632 <UART_SetConfig+0x1ba>
 8005608:	2b00      	cmp	r3, #0
 800560a:	d002      	beq.n	8005612 <UART_SetConfig+0x19a>
 800560c:	2b10      	cmp	r3, #16
 800560e:	d008      	beq.n	8005622 <UART_SetConfig+0x1aa>
 8005610:	e00f      	b.n	8005632 <UART_SetConfig+0x1ba>
 8005612:	2300      	movs	r3, #0
 8005614:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005618:	e06d      	b.n	80056f6 <UART_SetConfig+0x27e>
 800561a:	2302      	movs	r3, #2
 800561c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005620:	e069      	b.n	80056f6 <UART_SetConfig+0x27e>
 8005622:	2304      	movs	r3, #4
 8005624:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005628:	e065      	b.n	80056f6 <UART_SetConfig+0x27e>
 800562a:	2308      	movs	r3, #8
 800562c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005630:	e061      	b.n	80056f6 <UART_SetConfig+0x27e>
 8005632:	2310      	movs	r3, #16
 8005634:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005638:	e05d      	b.n	80056f6 <UART_SetConfig+0x27e>
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a4b      	ldr	r2, [pc, #300]	; (800576c <UART_SetConfig+0x2f4>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d125      	bne.n	8005690 <UART_SetConfig+0x218>
 8005644:	4b46      	ldr	r3, [pc, #280]	; (8005760 <UART_SetConfig+0x2e8>)
 8005646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800564a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800564e:	2bc0      	cmp	r3, #192	; 0xc0
 8005650:	d016      	beq.n	8005680 <UART_SetConfig+0x208>
 8005652:	2bc0      	cmp	r3, #192	; 0xc0
 8005654:	d818      	bhi.n	8005688 <UART_SetConfig+0x210>
 8005656:	2b80      	cmp	r3, #128	; 0x80
 8005658:	d00a      	beq.n	8005670 <UART_SetConfig+0x1f8>
 800565a:	2b80      	cmp	r3, #128	; 0x80
 800565c:	d814      	bhi.n	8005688 <UART_SetConfig+0x210>
 800565e:	2b00      	cmp	r3, #0
 8005660:	d002      	beq.n	8005668 <UART_SetConfig+0x1f0>
 8005662:	2b40      	cmp	r3, #64	; 0x40
 8005664:	d008      	beq.n	8005678 <UART_SetConfig+0x200>
 8005666:	e00f      	b.n	8005688 <UART_SetConfig+0x210>
 8005668:	2300      	movs	r3, #0
 800566a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800566e:	e042      	b.n	80056f6 <UART_SetConfig+0x27e>
 8005670:	2302      	movs	r3, #2
 8005672:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005676:	e03e      	b.n	80056f6 <UART_SetConfig+0x27e>
 8005678:	2304      	movs	r3, #4
 800567a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800567e:	e03a      	b.n	80056f6 <UART_SetConfig+0x27e>
 8005680:	2308      	movs	r3, #8
 8005682:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005686:	e036      	b.n	80056f6 <UART_SetConfig+0x27e>
 8005688:	2310      	movs	r3, #16
 800568a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800568e:	e032      	b.n	80056f6 <UART_SetConfig+0x27e>
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a30      	ldr	r2, [pc, #192]	; (8005758 <UART_SetConfig+0x2e0>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d12a      	bne.n	80056f0 <UART_SetConfig+0x278>
 800569a:	4b31      	ldr	r3, [pc, #196]	; (8005760 <UART_SetConfig+0x2e8>)
 800569c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056a0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80056a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80056a8:	d01a      	beq.n	80056e0 <UART_SetConfig+0x268>
 80056aa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80056ae:	d81b      	bhi.n	80056e8 <UART_SetConfig+0x270>
 80056b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056b4:	d00c      	beq.n	80056d0 <UART_SetConfig+0x258>
 80056b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056ba:	d815      	bhi.n	80056e8 <UART_SetConfig+0x270>
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d003      	beq.n	80056c8 <UART_SetConfig+0x250>
 80056c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056c4:	d008      	beq.n	80056d8 <UART_SetConfig+0x260>
 80056c6:	e00f      	b.n	80056e8 <UART_SetConfig+0x270>
 80056c8:	2300      	movs	r3, #0
 80056ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056ce:	e012      	b.n	80056f6 <UART_SetConfig+0x27e>
 80056d0:	2302      	movs	r3, #2
 80056d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056d6:	e00e      	b.n	80056f6 <UART_SetConfig+0x27e>
 80056d8:	2304      	movs	r3, #4
 80056da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056de:	e00a      	b.n	80056f6 <UART_SetConfig+0x27e>
 80056e0:	2308      	movs	r3, #8
 80056e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056e6:	e006      	b.n	80056f6 <UART_SetConfig+0x27e>
 80056e8:	2310      	movs	r3, #16
 80056ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056ee:	e002      	b.n	80056f6 <UART_SetConfig+0x27e>
 80056f0:	2310      	movs	r3, #16
 80056f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a17      	ldr	r2, [pc, #92]	; (8005758 <UART_SetConfig+0x2e0>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	f040 80a8 	bne.w	8005852 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005702:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005706:	2b08      	cmp	r3, #8
 8005708:	d834      	bhi.n	8005774 <UART_SetConfig+0x2fc>
 800570a:	a201      	add	r2, pc, #4	; (adr r2, 8005710 <UART_SetConfig+0x298>)
 800570c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005710:	08005735 	.word	0x08005735
 8005714:	08005775 	.word	0x08005775
 8005718:	0800573d 	.word	0x0800573d
 800571c:	08005775 	.word	0x08005775
 8005720:	08005743 	.word	0x08005743
 8005724:	08005775 	.word	0x08005775
 8005728:	08005775 	.word	0x08005775
 800572c:	08005775 	.word	0x08005775
 8005730:	0800574b 	.word	0x0800574b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005734:	f7fe f992 	bl	8003a5c <HAL_RCC_GetPCLK1Freq>
 8005738:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800573a:	e021      	b.n	8005780 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800573c:	4b0c      	ldr	r3, [pc, #48]	; (8005770 <UART_SetConfig+0x2f8>)
 800573e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005740:	e01e      	b.n	8005780 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005742:	f7fe f91d 	bl	8003980 <HAL_RCC_GetSysClockFreq>
 8005746:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005748:	e01a      	b.n	8005780 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800574a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800574e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005750:	e016      	b.n	8005780 <UART_SetConfig+0x308>
 8005752:	bf00      	nop
 8005754:	cfff69f3 	.word	0xcfff69f3
 8005758:	40008000 	.word	0x40008000
 800575c:	40013800 	.word	0x40013800
 8005760:	40021000 	.word	0x40021000
 8005764:	40004400 	.word	0x40004400
 8005768:	40004800 	.word	0x40004800
 800576c:	40004c00 	.word	0x40004c00
 8005770:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005774:	2300      	movs	r3, #0
 8005776:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800577e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005782:	2b00      	cmp	r3, #0
 8005784:	f000 812a 	beq.w	80059dc <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800578c:	4a9e      	ldr	r2, [pc, #632]	; (8005a08 <UART_SetConfig+0x590>)
 800578e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005792:	461a      	mov	r2, r3
 8005794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005796:	fbb3 f3f2 	udiv	r3, r3, r2
 800579a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	685a      	ldr	r2, [r3, #4]
 80057a0:	4613      	mov	r3, r2
 80057a2:	005b      	lsls	r3, r3, #1
 80057a4:	4413      	add	r3, r2
 80057a6:	69ba      	ldr	r2, [r7, #24]
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d305      	bcc.n	80057b8 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80057b2:	69ba      	ldr	r2, [r7, #24]
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d903      	bls.n	80057c0 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80057be:	e10d      	b.n	80059dc <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80057c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c2:	2200      	movs	r2, #0
 80057c4:	60bb      	str	r3, [r7, #8]
 80057c6:	60fa      	str	r2, [r7, #12]
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057cc:	4a8e      	ldr	r2, [pc, #568]	; (8005a08 <UART_SetConfig+0x590>)
 80057ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	2200      	movs	r2, #0
 80057d6:	603b      	str	r3, [r7, #0]
 80057d8:	607a      	str	r2, [r7, #4]
 80057da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057de:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80057e2:	f7fa fd19 	bl	8000218 <__aeabi_uldivmod>
 80057e6:	4602      	mov	r2, r0
 80057e8:	460b      	mov	r3, r1
 80057ea:	4610      	mov	r0, r2
 80057ec:	4619      	mov	r1, r3
 80057ee:	f04f 0200 	mov.w	r2, #0
 80057f2:	f04f 0300 	mov.w	r3, #0
 80057f6:	020b      	lsls	r3, r1, #8
 80057f8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80057fc:	0202      	lsls	r2, r0, #8
 80057fe:	6979      	ldr	r1, [r7, #20]
 8005800:	6849      	ldr	r1, [r1, #4]
 8005802:	0849      	lsrs	r1, r1, #1
 8005804:	2000      	movs	r0, #0
 8005806:	460c      	mov	r4, r1
 8005808:	4605      	mov	r5, r0
 800580a:	eb12 0804 	adds.w	r8, r2, r4
 800580e:	eb43 0905 	adc.w	r9, r3, r5
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	2200      	movs	r2, #0
 8005818:	469a      	mov	sl, r3
 800581a:	4693      	mov	fp, r2
 800581c:	4652      	mov	r2, sl
 800581e:	465b      	mov	r3, fp
 8005820:	4640      	mov	r0, r8
 8005822:	4649      	mov	r1, r9
 8005824:	f7fa fcf8 	bl	8000218 <__aeabi_uldivmod>
 8005828:	4602      	mov	r2, r0
 800582a:	460b      	mov	r3, r1
 800582c:	4613      	mov	r3, r2
 800582e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005830:	6a3b      	ldr	r3, [r7, #32]
 8005832:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005836:	d308      	bcc.n	800584a <UART_SetConfig+0x3d2>
 8005838:	6a3b      	ldr	r3, [r7, #32]
 800583a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800583e:	d204      	bcs.n	800584a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	6a3a      	ldr	r2, [r7, #32]
 8005846:	60da      	str	r2, [r3, #12]
 8005848:	e0c8      	b.n	80059dc <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005850:	e0c4      	b.n	80059dc <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	69db      	ldr	r3, [r3, #28]
 8005856:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800585a:	d167      	bne.n	800592c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800585c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005860:	2b08      	cmp	r3, #8
 8005862:	d828      	bhi.n	80058b6 <UART_SetConfig+0x43e>
 8005864:	a201      	add	r2, pc, #4	; (adr r2, 800586c <UART_SetConfig+0x3f4>)
 8005866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800586a:	bf00      	nop
 800586c:	08005891 	.word	0x08005891
 8005870:	08005899 	.word	0x08005899
 8005874:	080058a1 	.word	0x080058a1
 8005878:	080058b7 	.word	0x080058b7
 800587c:	080058a7 	.word	0x080058a7
 8005880:	080058b7 	.word	0x080058b7
 8005884:	080058b7 	.word	0x080058b7
 8005888:	080058b7 	.word	0x080058b7
 800588c:	080058af 	.word	0x080058af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005890:	f7fe f8e4 	bl	8003a5c <HAL_RCC_GetPCLK1Freq>
 8005894:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005896:	e014      	b.n	80058c2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005898:	f7fe f8f6 	bl	8003a88 <HAL_RCC_GetPCLK2Freq>
 800589c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800589e:	e010      	b.n	80058c2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058a0:	4b5a      	ldr	r3, [pc, #360]	; (8005a0c <UART_SetConfig+0x594>)
 80058a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80058a4:	e00d      	b.n	80058c2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058a6:	f7fe f86b 	bl	8003980 <HAL_RCC_GetSysClockFreq>
 80058aa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80058ac:	e009      	b.n	80058c2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058b2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80058b4:	e005      	b.n	80058c2 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80058b6:	2300      	movs	r3, #0
 80058b8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80058c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80058c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	f000 8089 	beq.w	80059dc <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ce:	4a4e      	ldr	r2, [pc, #312]	; (8005a08 <UART_SetConfig+0x590>)
 80058d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80058d4:	461a      	mov	r2, r3
 80058d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80058dc:	005a      	lsls	r2, r3, #1
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	085b      	lsrs	r3, r3, #1
 80058e4:	441a      	add	r2, r3
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80058ee:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058f0:	6a3b      	ldr	r3, [r7, #32]
 80058f2:	2b0f      	cmp	r3, #15
 80058f4:	d916      	bls.n	8005924 <UART_SetConfig+0x4ac>
 80058f6:	6a3b      	ldr	r3, [r7, #32]
 80058f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058fc:	d212      	bcs.n	8005924 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80058fe:	6a3b      	ldr	r3, [r7, #32]
 8005900:	b29b      	uxth	r3, r3
 8005902:	f023 030f 	bic.w	r3, r3, #15
 8005906:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005908:	6a3b      	ldr	r3, [r7, #32]
 800590a:	085b      	lsrs	r3, r3, #1
 800590c:	b29b      	uxth	r3, r3
 800590e:	f003 0307 	and.w	r3, r3, #7
 8005912:	b29a      	uxth	r2, r3
 8005914:	8bfb      	ldrh	r3, [r7, #30]
 8005916:	4313      	orrs	r3, r2
 8005918:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	8bfa      	ldrh	r2, [r7, #30]
 8005920:	60da      	str	r2, [r3, #12]
 8005922:	e05b      	b.n	80059dc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800592a:	e057      	b.n	80059dc <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800592c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005930:	2b08      	cmp	r3, #8
 8005932:	d828      	bhi.n	8005986 <UART_SetConfig+0x50e>
 8005934:	a201      	add	r2, pc, #4	; (adr r2, 800593c <UART_SetConfig+0x4c4>)
 8005936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800593a:	bf00      	nop
 800593c:	08005961 	.word	0x08005961
 8005940:	08005969 	.word	0x08005969
 8005944:	08005971 	.word	0x08005971
 8005948:	08005987 	.word	0x08005987
 800594c:	08005977 	.word	0x08005977
 8005950:	08005987 	.word	0x08005987
 8005954:	08005987 	.word	0x08005987
 8005958:	08005987 	.word	0x08005987
 800595c:	0800597f 	.word	0x0800597f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005960:	f7fe f87c 	bl	8003a5c <HAL_RCC_GetPCLK1Freq>
 8005964:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005966:	e014      	b.n	8005992 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005968:	f7fe f88e 	bl	8003a88 <HAL_RCC_GetPCLK2Freq>
 800596c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800596e:	e010      	b.n	8005992 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005970:	4b26      	ldr	r3, [pc, #152]	; (8005a0c <UART_SetConfig+0x594>)
 8005972:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005974:	e00d      	b.n	8005992 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005976:	f7fe f803 	bl	8003980 <HAL_RCC_GetSysClockFreq>
 800597a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800597c:	e009      	b.n	8005992 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800597e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005982:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005984:	e005      	b.n	8005992 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8005986:	2300      	movs	r3, #0
 8005988:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005990:	bf00      	nop
    }

    if (pclk != 0U)
 8005992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005994:	2b00      	cmp	r3, #0
 8005996:	d021      	beq.n	80059dc <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599c:	4a1a      	ldr	r2, [pc, #104]	; (8005a08 <UART_SetConfig+0x590>)
 800599e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059a2:	461a      	mov	r2, r3
 80059a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a6:	fbb3 f2f2 	udiv	r2, r3, r2
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	085b      	lsrs	r3, r3, #1
 80059b0:	441a      	add	r2, r3
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80059ba:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059bc:	6a3b      	ldr	r3, [r7, #32]
 80059be:	2b0f      	cmp	r3, #15
 80059c0:	d909      	bls.n	80059d6 <UART_SetConfig+0x55e>
 80059c2:	6a3b      	ldr	r3, [r7, #32]
 80059c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059c8:	d205      	bcs.n	80059d6 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80059ca:	6a3b      	ldr	r3, [r7, #32]
 80059cc:	b29a      	uxth	r2, r3
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	60da      	str	r2, [r3, #12]
 80059d4:	e002      	b.n	80059dc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	2201      	movs	r2, #1
 80059e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	2201      	movs	r2, #1
 80059e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	2200      	movs	r2, #0
 80059f0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	2200      	movs	r2, #0
 80059f6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80059f8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	3730      	adds	r7, #48	; 0x30
 8005a00:	46bd      	mov	sp, r7
 8005a02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a06:	bf00      	nop
 8005a08:	080060dc 	.word	0x080060dc
 8005a0c:	00f42400 	.word	0x00f42400

08005a10 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b083      	sub	sp, #12
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a1c:	f003 0308 	and.w	r3, r3, #8
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d00a      	beq.n	8005a3a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	430a      	orrs	r2, r1
 8005a38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a3e:	f003 0301 	and.w	r3, r3, #1
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d00a      	beq.n	8005a5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	430a      	orrs	r2, r1
 8005a5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a60:	f003 0302 	and.w	r3, r3, #2
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d00a      	beq.n	8005a7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	430a      	orrs	r2, r1
 8005a7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a82:	f003 0304 	and.w	r3, r3, #4
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d00a      	beq.n	8005aa0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	430a      	orrs	r2, r1
 8005a9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aa4:	f003 0310 	and.w	r3, r3, #16
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d00a      	beq.n	8005ac2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	430a      	orrs	r2, r1
 8005ac0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ac6:	f003 0320 	and.w	r3, r3, #32
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d00a      	beq.n	8005ae4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	430a      	orrs	r2, r1
 8005ae2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d01a      	beq.n	8005b26 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	430a      	orrs	r2, r1
 8005b04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b0e:	d10a      	bne.n	8005b26 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	430a      	orrs	r2, r1
 8005b24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d00a      	beq.n	8005b48 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	430a      	orrs	r2, r1
 8005b46:	605a      	str	r2, [r3, #4]
  }
}
 8005b48:	bf00      	nop
 8005b4a:	370c      	adds	r7, #12
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr

08005b54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b098      	sub	sp, #96	; 0x60
 8005b58:	af02      	add	r7, sp, #8
 8005b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005b64:	f7fb fb9e 	bl	80012a4 <HAL_GetTick>
 8005b68:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f003 0308 	and.w	r3, r3, #8
 8005b74:	2b08      	cmp	r3, #8
 8005b76:	d12f      	bne.n	8005bd8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b78:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b7c:	9300      	str	r3, [sp, #0]
 8005b7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b80:	2200      	movs	r2, #0
 8005b82:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f000 f88e 	bl	8005ca8 <UART_WaitOnFlagUntilTimeout>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d022      	beq.n	8005bd8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b9a:	e853 3f00 	ldrex	r3, [r3]
 8005b9e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005ba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ba2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ba6:	653b      	str	r3, [r7, #80]	; 0x50
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	461a      	mov	r2, r3
 8005bae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bb0:	647b      	str	r3, [r7, #68]	; 0x44
 8005bb2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bb4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005bb6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005bb8:	e841 2300 	strex	r3, r2, [r1]
 8005bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005bbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d1e6      	bne.n	8005b92 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2220      	movs	r2, #32
 8005bc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005bd4:	2303      	movs	r3, #3
 8005bd6:	e063      	b.n	8005ca0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f003 0304 	and.w	r3, r3, #4
 8005be2:	2b04      	cmp	r3, #4
 8005be4:	d149      	bne.n	8005c7a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005be6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005bea:	9300      	str	r3, [sp, #0]
 8005bec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bee:	2200      	movs	r2, #0
 8005bf0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f000 f857 	bl	8005ca8 <UART_WaitOnFlagUntilTimeout>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d03c      	beq.n	8005c7a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c08:	e853 3f00 	ldrex	r3, [r3]
 8005c0c:	623b      	str	r3, [r7, #32]
   return(result);
 8005c0e:	6a3b      	ldr	r3, [r7, #32]
 8005c10:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c14:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c1e:	633b      	str	r3, [r7, #48]	; 0x30
 8005c20:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c26:	e841 2300 	strex	r3, r2, [r1]
 8005c2a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d1e6      	bne.n	8005c00 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	3308      	adds	r3, #8
 8005c38:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	e853 3f00 	ldrex	r3, [r3]
 8005c40:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f023 0301 	bic.w	r3, r3, #1
 8005c48:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	3308      	adds	r3, #8
 8005c50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c52:	61fa      	str	r2, [r7, #28]
 8005c54:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c56:	69b9      	ldr	r1, [r7, #24]
 8005c58:	69fa      	ldr	r2, [r7, #28]
 8005c5a:	e841 2300 	strex	r3, r2, [r1]
 8005c5e:	617b      	str	r3, [r7, #20]
   return(result);
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d1e5      	bne.n	8005c32 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2220      	movs	r2, #32
 8005c6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2200      	movs	r2, #0
 8005c72:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c76:	2303      	movs	r3, #3
 8005c78:	e012      	b.n	8005ca0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2220      	movs	r2, #32
 8005c7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2220      	movs	r2, #32
 8005c86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005c9e:	2300      	movs	r3, #0
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3758      	adds	r7, #88	; 0x58
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}

08005ca8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b084      	sub	sp, #16
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	60f8      	str	r0, [r7, #12]
 8005cb0:	60b9      	str	r1, [r7, #8]
 8005cb2:	603b      	str	r3, [r7, #0]
 8005cb4:	4613      	mov	r3, r2
 8005cb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cb8:	e04f      	b.n	8005d5a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cba:	69bb      	ldr	r3, [r7, #24]
 8005cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cc0:	d04b      	beq.n	8005d5a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cc2:	f7fb faef 	bl	80012a4 <HAL_GetTick>
 8005cc6:	4602      	mov	r2, r0
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	1ad3      	subs	r3, r2, r3
 8005ccc:	69ba      	ldr	r2, [r7, #24]
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d302      	bcc.n	8005cd8 <UART_WaitOnFlagUntilTimeout+0x30>
 8005cd2:	69bb      	ldr	r3, [r7, #24]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d101      	bne.n	8005cdc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005cd8:	2303      	movs	r3, #3
 8005cda:	e04e      	b.n	8005d7a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f003 0304 	and.w	r3, r3, #4
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d037      	beq.n	8005d5a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	2b80      	cmp	r3, #128	; 0x80
 8005cee:	d034      	beq.n	8005d5a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	2b40      	cmp	r3, #64	; 0x40
 8005cf4:	d031      	beq.n	8005d5a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	69db      	ldr	r3, [r3, #28]
 8005cfc:	f003 0308 	and.w	r3, r3, #8
 8005d00:	2b08      	cmp	r3, #8
 8005d02:	d110      	bne.n	8005d26 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	2208      	movs	r2, #8
 8005d0a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d0c:	68f8      	ldr	r0, [r7, #12]
 8005d0e:	f000 f838 	bl	8005d82 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2208      	movs	r2, #8
 8005d16:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8005d22:	2301      	movs	r3, #1
 8005d24:	e029      	b.n	8005d7a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	69db      	ldr	r3, [r3, #28]
 8005d2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d34:	d111      	bne.n	8005d5a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d3e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d40:	68f8      	ldr	r0, [r7, #12]
 8005d42:	f000 f81e 	bl	8005d82 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2220      	movs	r2, #32
 8005d4a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2200      	movs	r2, #0
 8005d52:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005d56:	2303      	movs	r3, #3
 8005d58:	e00f      	b.n	8005d7a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	69da      	ldr	r2, [r3, #28]
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	4013      	ands	r3, r2
 8005d64:	68ba      	ldr	r2, [r7, #8]
 8005d66:	429a      	cmp	r2, r3
 8005d68:	bf0c      	ite	eq
 8005d6a:	2301      	moveq	r3, #1
 8005d6c:	2300      	movne	r3, #0
 8005d6e:	b2db      	uxtb	r3, r3
 8005d70:	461a      	mov	r2, r3
 8005d72:	79fb      	ldrb	r3, [r7, #7]
 8005d74:	429a      	cmp	r2, r3
 8005d76:	d0a0      	beq.n	8005cba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d78:	2300      	movs	r3, #0
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3710      	adds	r7, #16
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}

08005d82 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d82:	b480      	push	{r7}
 8005d84:	b095      	sub	sp, #84	; 0x54
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d92:	e853 3f00 	ldrex	r3, [r3]
 8005d96:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d9a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	461a      	mov	r2, r3
 8005da6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005da8:	643b      	str	r3, [r7, #64]	; 0x40
 8005daa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005dae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005db0:	e841 2300 	strex	r3, r2, [r1]
 8005db4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d1e6      	bne.n	8005d8a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	3308      	adds	r3, #8
 8005dc2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc4:	6a3b      	ldr	r3, [r7, #32]
 8005dc6:	e853 3f00 	ldrex	r3, [r3]
 8005dca:	61fb      	str	r3, [r7, #28]
   return(result);
 8005dcc:	69fb      	ldr	r3, [r7, #28]
 8005dce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005dd2:	f023 0301 	bic.w	r3, r3, #1
 8005dd6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	3308      	adds	r3, #8
 8005dde:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005de0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005de2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005de6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005de8:	e841 2300 	strex	r3, r2, [r1]
 8005dec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d1e3      	bne.n	8005dbc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	d118      	bne.n	8005e2e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	e853 3f00 	ldrex	r3, [r3]
 8005e08:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	f023 0310 	bic.w	r3, r3, #16
 8005e10:	647b      	str	r3, [r7, #68]	; 0x44
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	461a      	mov	r2, r3
 8005e18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e1a:	61bb      	str	r3, [r7, #24]
 8005e1c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e1e:	6979      	ldr	r1, [r7, #20]
 8005e20:	69ba      	ldr	r2, [r7, #24]
 8005e22:	e841 2300 	strex	r3, r2, [r1]
 8005e26:	613b      	str	r3, [r7, #16]
   return(result);
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d1e6      	bne.n	8005dfc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2220      	movs	r2, #32
 8005e32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005e42:	bf00      	nop
 8005e44:	3754      	adds	r7, #84	; 0x54
 8005e46:	46bd      	mov	sp, r7
 8005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4c:	4770      	bx	lr

08005e4e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005e4e:	b480      	push	{r7}
 8005e50:	b085      	sub	sp, #20
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d101      	bne.n	8005e64 <HAL_UARTEx_DisableFifoMode+0x16>
 8005e60:	2302      	movs	r3, #2
 8005e62:	e027      	b.n	8005eb4 <HAL_UARTEx_DisableFifoMode+0x66>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2201      	movs	r2, #1
 8005e68:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2224      	movs	r2, #36	; 0x24
 8005e70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f022 0201 	bic.w	r2, r2, #1
 8005e8a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005e92:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2200      	movs	r2, #0
 8005e98:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	68fa      	ldr	r2, [r7, #12]
 8005ea0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2220      	movs	r2, #32
 8005ea6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2200      	movs	r2, #0
 8005eae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005eb2:	2300      	movs	r3, #0
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3714      	adds	r7, #20
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr

08005ec0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b084      	sub	sp, #16
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d101      	bne.n	8005ed8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005ed4:	2302      	movs	r3, #2
 8005ed6:	e02d      	b.n	8005f34 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2201      	movs	r2, #1
 8005edc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2224      	movs	r2, #36	; 0x24
 8005ee4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f022 0201 	bic.w	r2, r2, #1
 8005efe:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	683a      	ldr	r2, [r7, #0]
 8005f10:	430a      	orrs	r2, r1
 8005f12:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f000 f84f 	bl	8005fb8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	68fa      	ldr	r2, [r7, #12]
 8005f20:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2220      	movs	r2, #32
 8005f26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005f32:	2300      	movs	r3, #0
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	3710      	adds	r7, #16
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}

08005f3c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b084      	sub	sp, #16
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d101      	bne.n	8005f54 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005f50:	2302      	movs	r3, #2
 8005f52:	e02d      	b.n	8005fb0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2224      	movs	r2, #36	; 0x24
 8005f60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	681a      	ldr	r2, [r3, #0]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f022 0201 	bic.w	r2, r2, #1
 8005f7a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	683a      	ldr	r2, [r7, #0]
 8005f8c:	430a      	orrs	r2, r1
 8005f8e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f000 f811 	bl	8005fb8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	68fa      	ldr	r2, [r7, #12]
 8005f9c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2220      	movs	r2, #32
 8005fa2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005fae:	2300      	movs	r3, #0
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3710      	adds	r7, #16
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}

08005fb8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b085      	sub	sp, #20
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d108      	bne.n	8005fda <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005fd8:	e031      	b.n	800603e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005fda:	2308      	movs	r3, #8
 8005fdc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005fde:	2308      	movs	r3, #8
 8005fe0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	0e5b      	lsrs	r3, r3, #25
 8005fea:	b2db      	uxtb	r3, r3
 8005fec:	f003 0307 	and.w	r3, r3, #7
 8005ff0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	689b      	ldr	r3, [r3, #8]
 8005ff8:	0f5b      	lsrs	r3, r3, #29
 8005ffa:	b2db      	uxtb	r3, r3
 8005ffc:	f003 0307 	and.w	r3, r3, #7
 8006000:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006002:	7bbb      	ldrb	r3, [r7, #14]
 8006004:	7b3a      	ldrb	r2, [r7, #12]
 8006006:	4911      	ldr	r1, [pc, #68]	; (800604c <UARTEx_SetNbDataToProcess+0x94>)
 8006008:	5c8a      	ldrb	r2, [r1, r2]
 800600a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800600e:	7b3a      	ldrb	r2, [r7, #12]
 8006010:	490f      	ldr	r1, [pc, #60]	; (8006050 <UARTEx_SetNbDataToProcess+0x98>)
 8006012:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006014:	fb93 f3f2 	sdiv	r3, r3, r2
 8006018:	b29a      	uxth	r2, r3
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006020:	7bfb      	ldrb	r3, [r7, #15]
 8006022:	7b7a      	ldrb	r2, [r7, #13]
 8006024:	4909      	ldr	r1, [pc, #36]	; (800604c <UARTEx_SetNbDataToProcess+0x94>)
 8006026:	5c8a      	ldrb	r2, [r1, r2]
 8006028:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800602c:	7b7a      	ldrb	r2, [r7, #13]
 800602e:	4908      	ldr	r1, [pc, #32]	; (8006050 <UARTEx_SetNbDataToProcess+0x98>)
 8006030:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006032:	fb93 f3f2 	sdiv	r3, r3, r2
 8006036:	b29a      	uxth	r2, r3
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800603e:	bf00      	nop
 8006040:	3714      	adds	r7, #20
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr
 800604a:	bf00      	nop
 800604c:	080060f4 	.word	0x080060f4
 8006050:	080060fc 	.word	0x080060fc

08006054 <memset>:
 8006054:	4402      	add	r2, r0
 8006056:	4603      	mov	r3, r0
 8006058:	4293      	cmp	r3, r2
 800605a:	d100      	bne.n	800605e <memset+0xa>
 800605c:	4770      	bx	lr
 800605e:	f803 1b01 	strb.w	r1, [r3], #1
 8006062:	e7f9      	b.n	8006058 <memset+0x4>

08006064 <__libc_init_array>:
 8006064:	b570      	push	{r4, r5, r6, lr}
 8006066:	4d0d      	ldr	r5, [pc, #52]	; (800609c <__libc_init_array+0x38>)
 8006068:	4c0d      	ldr	r4, [pc, #52]	; (80060a0 <__libc_init_array+0x3c>)
 800606a:	1b64      	subs	r4, r4, r5
 800606c:	10a4      	asrs	r4, r4, #2
 800606e:	2600      	movs	r6, #0
 8006070:	42a6      	cmp	r6, r4
 8006072:	d109      	bne.n	8006088 <__libc_init_array+0x24>
 8006074:	4d0b      	ldr	r5, [pc, #44]	; (80060a4 <__libc_init_array+0x40>)
 8006076:	4c0c      	ldr	r4, [pc, #48]	; (80060a8 <__libc_init_array+0x44>)
 8006078:	f000 f818 	bl	80060ac <_init>
 800607c:	1b64      	subs	r4, r4, r5
 800607e:	10a4      	asrs	r4, r4, #2
 8006080:	2600      	movs	r6, #0
 8006082:	42a6      	cmp	r6, r4
 8006084:	d105      	bne.n	8006092 <__libc_init_array+0x2e>
 8006086:	bd70      	pop	{r4, r5, r6, pc}
 8006088:	f855 3b04 	ldr.w	r3, [r5], #4
 800608c:	4798      	blx	r3
 800608e:	3601      	adds	r6, #1
 8006090:	e7ee      	b.n	8006070 <__libc_init_array+0xc>
 8006092:	f855 3b04 	ldr.w	r3, [r5], #4
 8006096:	4798      	blx	r3
 8006098:	3601      	adds	r6, #1
 800609a:	e7f2      	b.n	8006082 <__libc_init_array+0x1e>
 800609c:	0800610c 	.word	0x0800610c
 80060a0:	0800610c 	.word	0x0800610c
 80060a4:	0800610c 	.word	0x0800610c
 80060a8:	08006110 	.word	0x08006110

080060ac <_init>:
 80060ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060ae:	bf00      	nop
 80060b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060b2:	bc08      	pop	{r3}
 80060b4:	469e      	mov	lr, r3
 80060b6:	4770      	bx	lr

080060b8 <_fini>:
 80060b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060ba:	bf00      	nop
 80060bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060be:	bc08      	pop	{r3}
 80060c0:	469e      	mov	lr, r3
 80060c2:	4770      	bx	lr
